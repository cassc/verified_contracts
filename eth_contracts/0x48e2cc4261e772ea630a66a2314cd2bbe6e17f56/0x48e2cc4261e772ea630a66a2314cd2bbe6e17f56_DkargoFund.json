{"SourceCode": "// File: contracts/DkargoPrefix.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title DkargoPrefix\r\n/// @notice \ub514\uce74\ub974\uace0 \ucee8\ud2b8\ub799\ud2b8 \uc5ec\ubd80 \uc2dd\ubcc4\uc6a9 prefix \ucee8\ud2b8\ub799\ud2b8 \uc815\uc758\r\n/// @author jhhong\r\ncontract DkargoPrefix {\r\n    \r\n    string internal _dkargoPrefix; // \ub514\uce74\ub974\uace0-\ud504\ub9ac\ud53d\uc2a4\r\n    \r\n    /// @author jhhong\r\n    /// @notice \ub514\uce74\ub974\uace0 \ud504\ub9ac\ud53d\uc2a4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \ub514\uce74\ub974\uace0 \ud504\ub9ac\ud53d\uc2a4 (string)\r\n    function getDkargoPrefix() public view returns(string memory) {\r\n        return _dkargoPrefix;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ub514\uce74\ub974\uace0 \ud504\ub9ac\ud53d\uc2a4\ub97c \uc124\uc815\ud55c\ub2e4.\r\n    /// @param prefix \uc124\uc815\ud560 \ud504\ub9ac\ud53d\uc2a4\r\n    function _setDkargoPrefix(string memory prefix) internal {\r\n        _dkargoPrefix = prefix;\r\n    }\r\n}\r\n\r\n// File: contracts/authority/Ownership.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title Onwership\r\n/// @dev \uc624\ub108 \ud655\uc778 \ubc0f \uc18c\uc720\uad8c \uc774\uc804 \ucc98\ub9ac\r\n/// @author jhhong\r\ncontract Ownership {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed old, address indexed expected);\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc18c\uc720\uc790\ub9cc \uc811\uadfc\ud560 \uc218 \uc788\uc74c\uc744 \uba85\uc2dc\ud55c\ub2e4.\r\n    modifier onlyOwner() {\r\n        require(isOwner() == true, \"Ownership: only the owner can call\");\r\n        _;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8 \uc0dd\uc131\uc790\uc774\ub2e4.\r\n    constructor() internal {\r\n        emit OwnershipTransferred(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc18c\uc720\uad8c\uc744 \ub118\uaca8\uc900\ub2e4.\r\n    /// @param expected \uc0c8\ub85c\uc6b4 \uc624\ub108 \uacc4\uc815\r\n    function transferOwnership(address expected) public onlyOwner {\r\n        require(expected != address(0), \"Ownership: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, expected);\r\n        _owner = expected;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc624\ub108 \uc8fc\uc18c\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uc624\ub108 \uc8fc\uc18c\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc18c\uc720\uc790\uc778\uc9c0 \ud655\uc778\ud55c\ub2e4.\r\n    /// @return \ud655\uc778 \uacb0\uacfc (boolean)\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeMath64.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath64 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        uint64 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint64 a, uint64 b, string memory errorMessage) internal pure returns (uint64) {\r\n        require(b <= a, errorMessage);\r\n        uint64 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint64 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:uint64\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint64 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/chain/Uint64Chain.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title Uint64Chain\r\n/// @notice Uint64 Type \uccb4\uc778 \uc815\uc758 \ubc0f \uad00\ub9ac\r\n/// @dev \uc2dc\uac04\ub300 \ubcc4 \uc774\ubca4\ud2b8\uc640 \uac19\uc740 TIME-BASE \uc778\ub371\uc2a4 \ub9ac\uc2a4\ud2b8 \uad00\ub9ac\uc5d0 \uc4f0\uc778\ub2e4.\r\n/// @author jhhong\r\ncontract Uint64Chain {\r\n    using SafeMath64 for uint64;\r\n\r\n    // \uad6c\uc870\uccb4 : \ub178\ub4dc \uc815\ubcf4\r\n    struct NodeInfo {\r\n        uint64 prev; // \uc774\uc804 \ub178\ub4dc\r\n        uint64 next; // \ub2e4\uc74c \ub178\ub4dc\r\n    }\r\n    // \uad6c\uc870\uccb4 : \ub178\ub4dc \uccb4\uc778\r\n    struct NodeList {\r\n        uint64 count; // \ub178\ub4dc\uc758 \ucd1d \uac1c\uc218\r\n        uint64 head; // \uccb4\uc778\uc758 \uba38\ub9ac\r\n        uint64 tail; // \uccb4\uc778\uc758 \uaf2c\ub9ac\r\n        mapping(uint64 => NodeInfo) map; // \uacc4\uc815\uc5d0 \ub300\ud55c \ub178\ub4dc \uc815\ubcf4 \ub9e4\ud551\r\n    }\r\n\r\n    // \ubcc0\uc218 \uc120\uc5b8\r\n    NodeList private _slist; // \ub178\ub4dc \uccb4\uc778 (\uc2f1\uae00\ub9ac\uc2a4\ud2b8)\r\n\r\n    // \uc774\ubca4\ud2b8 \uc120\uc5b8\r\n    event Uint64ChainLinked(uint64 indexed node); // \uc774\ubca4\ud2b8: \uccb4\uc778\uc5d0 \ucd94\uac00\ub428\r\n    event Uint64ChainUnlinked(uint64 indexed node); // \uc774\ubca4\ud2b8: \uccb4\uc778\uc5d0\uc11c \ube60\uc9d0\r\n\r\n    /// @author jhhong\r\n    /// @notice \uccb4\uc778\uc5d0 \uc5f0\uacb0\ub41c \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uccb4\uc778\uc5d0 \uc5f0\uacb0\ub41c \uc6d0\uc18c\uc758 \uac1c\uc218\r\n    function count() public view returns(uint64) {\r\n        return _slist.count;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uccb4\uc778 \ud5e4\ub4dc \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uccb4\uc778 \ud5e4\ub4dc \uc815\ubcf4\r\n    function head() public view returns(uint64) {\r\n        return _slist.head;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uccb4\uc778 \uaf2c\ub9ac \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uccb4\uc778 \uaf2c\ub9ac \uc815\ubcf4\r\n    function tail() public view returns(uint64) {\r\n        return _slist.tail;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node\uc758 \ub2e4\uc74c \ub178\ub4dc \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uc815\ubcf4 (\uccb4\uc778\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc744 \uc218\ub3c4 \uc788\uace0 \uc544\ub2d0 \uc218\ub3c4 \uc788\uc74c)\r\n    /// @return node\uc758 \ub2e4\uc74c \ub178\ub4dc \uc815\ubcf4\r\n    function nextOf(uint64 node) public view returns(uint64) {\r\n        return _slist.map[node].next;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node\uc758 \uc774\uc804 \ub178\ub4dc \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uc815\ubcf4 (\uccb4\uc778\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc744 \uc218\ub3c4 \uc788\uace0 \uc544\ub2d0 \uc218\ub3c4 \uc788\uc74c)\r\n    /// @return node\uc758 \uc774\uc804 \ub178\ub4dc \uc815\ubcf4\r\n    function prevOf(uint64 node) public view returns(uint64) {\r\n        return _slist.map[node].prev;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node\uac00 \uccb4\uc778\uc5d0 \uc5f0\uacb0\ub41c \uc0c1\ud0dc\uc778\uc9c0\ub97c \ud655\uc778\ud55c\ub2e4.\r\n    /// @param node \uccb4\uc778 \uc5f0\uacb0 \uc5ec\ubd80\ub97c \ud655\uc778\ud560 \ub178\ub4dc \uc8fc\uc18c\r\n    /// @return \uc5f0\uacb0 \uc5ec\ubd80 (boolean), true: \uc5f0\uacb0\ub428(linked), false: \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc74c(unlinked)\r\n    function isLinked(uint64 node) public view returns (bool) {\r\n        if(_slist.count == 1 && _slist.head == node && _slist.tail == node) {\r\n            return true;\r\n        } else {\r\n            return (_slist.map[node].prev == uint64(0) && _slist.map[node].next == uint64(0))? (false) :(true);\r\n        }\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc0c8\ub85c\uc6b4 \ub178\ub4dc \uc815\ubcf4\ub97c \ub178\ub4dc \uccb4\uc778\uc5d0 \uc5f0\uacb0\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uccb4\uc778\uc5d0 \uc5f0\uacb0\ud560 \ub178\ub4dc \uc8fc\uc18c\r\n    function _linkChain(uint64 node) internal {\r\n        require(!isLinked(node), \"Uint64Chain: the node is aleady linked\");\r\n        if(_slist.count == 0) {\r\n            _slist.head = _slist.tail = node;\r\n        } else {\r\n            _slist.map[node].prev = _slist.tail;\r\n            _slist.map[_slist.tail].next = node;\r\n            _slist.tail = node;\r\n        }\r\n        _slist.count = _slist.count.add(1);\r\n        emit Uint64ChainLinked(node);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node \ub178\ub4dc\ub97c \uccb4\uc778\uc5d0\uc11c \uc5f0\uacb0 \ud574\uc81c\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uccb4\uc778\uc5d0\uc11c \uc5f0\uacb0 \ud574\uc81c\ud560 \ub178\ub4dc \uc8fc\uc18c\r\n    function _unlinkChain(uint64 node) internal {\r\n        require(isLinked(node), \"Uint64Chain: the node is aleady unlinked\");\r\n        uint64 tempPrev = _slist.map[node].prev;\r\n        uint64 tempNext = _slist.map[node].next;\r\n        if (_slist.head == node) {\r\n            _slist.head = tempNext;\r\n        }\r\n        if (_slist.tail == node) {\r\n            _slist.tail = tempPrev;\r\n        }\r\n        if (tempPrev != uint64(0)) {\r\n            _slist.map[tempPrev].next = tempNext;\r\n            _slist.map[node].prev = uint64(0);\r\n        }\r\n        if (tempNext != uint64(0)) {\r\n            _slist.map[tempNext].prev = tempPrev;\r\n            _slist.map[node].next = uint64(0);\r\n        }\r\n        _slist.count = _slist.count.sub(1);\r\n        emit Uint64ChainUnlinked(node);\r\n    }\r\n}\r\n\r\n// File: contracts/introspection/ERC165/IERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title IERC165\r\n/// @dev EIP165 interface \uc120\uc5b8\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n/// @author jhhong\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/introspection/ERC165/ERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title ERC165\r\n/// @dev EIP165 interface \uad6c\ud604\r\n/// @author jhhong\r\ncontract ERC165 is IERC165 {\r\n    \r\n    mapping(bytes4 => bool) private _infcs; // INTERFACE ID\ubcc4 \uc9c0\uc6d0\uc5ec\ubd80\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ub9e4\ud551 \ubcc0\uc218\r\n\r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8 \uc0dd\uc131\uc790\uc774\ub2e4.\r\n    /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n    constructor() internal {\r\n        _registerInterface(0x01ffc9a7); // supportsInterface()\uc758 INTERFACE ID \ub4f1\ub85d\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8\uac00 INTERFACE ID\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0\uc758 \uc5ec\ubd80\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param infcid \uc9c0\uc6d0\uc5ec\ubd80\ub97c \ud655\uc778\ud560 INTERFACE ID (Function Selector)\r\n    /// @return \uc9c0\uc6d0\uc5ec\ubd80 (boolean)\r\n    function supportsInterface(bytes4 infcid) external view returns (bool) {\r\n        return _infcs[infcid];\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice INTERFACE ID\ub97c \ub4f1\ub85d\ud55c\ub2e4.\r\n    /// @param infcid \ub4f1\ub85d\ud560 INTERFACE ID (Function Selector)\r\n    function _registerInterface(bytes4 infcid) internal {\r\n        require(infcid != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _infcs[infcid] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/Address.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /// @dev jhhong add features\r\n    /// add useful functions and modifier definitions\r\n    /// date: 2020.02.24\r\n\r\n    /// @author jhhong\r\n    /// @notice call \ubc29\uc2dd\uc758 \uac04\uc811 \ud568\uc218 \ud638\ucd9c\uc744 \uc218\ud589\ud55c\ub2e4.\r\n    /// @param addr \ud568\uc218 \ud638\ucd9c\ud560 \ucee8\ud2b8\ub799\ud2b8 \uc8fc\uc18c\r\n    /// @param rawdata Bytes\ud0c0\uc785\uc758 \ub85c\uc6b0\ub370\uc774\ud130 (\ud568\uc218\uc140\ub809\ud130 + \ud30c\ub77c\uba54\ud130\ub4e4)\r\n    /// @return \ucc98\ub9ac \uacb0\uacfc (bytes type) => abi.decode\ub85c \ub514\ucf54\ub529\ud574\uc918\uc57c \ud568\r\n    function _call(address addr, bytes memory rawdata) internal returns(bytes memory) {\r\n        (bool success, bytes memory data) = address(addr).call(rawdata);\r\n        require(success == true, \"Address: function(call) call failed\");\r\n        return data;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice delegatecall \ubc29\uc2dd\uc758 \uac04\uc811 \ud568\uc218 \ud638\ucd9c\uc744 \uc218\ud589\ud55c\ub2e4.\r\n    /// @param addr \ud568\uc218 \ud638\ucd9c\ud560 \ucee8\ud2b8\ub799\ud2b8 \uc8fc\uc18c\r\n    /// @param rawdata Bytes\ud0c0\uc785\uc758 \ub85c\uc6b0\ub370\uc774\ud130 (\ud568\uc218\uc140\ub809\ud130 + \ud30c\ub77c\uba54\ud130\ub4e4)\r\n    /// @return \ucc98\ub9ac \uacb0\uacfc (bytes type) => abi.decode\ub85c \ub514\ucf54\ub529\ud574\uc918\uc57c \ud568\r\n    function _dcall(address addr, bytes memory rawdata) internal returns(bytes memory) {\r\n        (bool success, bytes memory data) = address(addr).delegatecall(rawdata);\r\n        require(success == true, \"Address: function(delegatecall) call failed\");\r\n        return data;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice staticcall \ubc29\uc2dd\uc758 \uac04\uc811 \ud568\uc218 \ud638\ucd9c\uc744 \uc218\ud589\ud55c\ub2e4.\r\n    /// @dev bool \ud0c0\uc785 \uac12\uc744 \ubc18\ud658\ud558\ub294 view / pure \ud568\uc218 CALL \uc2dc \uc0ac\uc6a9\ub41c\ub2e4.\r\n    /// @param addr \ud568\uc218 \ud638\ucd9c\ud560 \ucee8\ud2b8\ub799\ud2b8 \uc8fc\uc18c\r\n    /// @param rawdata Bytes\ud0c0\uc785\uc758 \ub85c\uc6b0\ub370\uc774\ud130 (\ud568\uc218\uc140\ub809\ud130 + \ud30c\ub77c\uba54\ud130\ub4e4)\r\n    /// @return \ucc98\ub9ac \uacb0\uacfc (bytes type) => abi.decode\ub85c \ub514\ucf54\ub529\ud574\uc918\uc57c \ud568\r\n    function _vcall(address addr, bytes memory rawdata) internal view returns(bytes memory) {\r\n        (bool success, bytes memory data) = address(addr).staticcall(rawdata);\r\n        require(success == true, \"Address: function(staticcall) call failed\");\r\n        return data;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/refs/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/DkargoFund.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title DkargoFund\r\n/// @notice \ub514\uce74\ub974\uace0 \ud380\ub4dc \ucee8\ud2b8\ub799\ud2b8 \uc815\uc758\r\n/// @author jhhong\r\ncontract DkargoFund is Ownership, Uint64Chain, ERC165, DkargoPrefix {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint64 => uint256) private _plans; // \uc778\ucd9c \ud50c\ub79c\r\n    address private _beneficier; // \uc218\ucde8\uc778 \uc8fc\uc18c\r\n    address private _token; // \ud1a0\ud070 \ucee8\ud2b8\ub799\ud2b8 \uc8fc\uc18c\r\n    uint256 private _totals; // \ud50c\ub79c\uc5d0 \uae30\ub85d\ub41c \ucd1d \uc778\ucd9c\ub7c9, \ud380\ub4dc\uc758 \ubcf4\uc720 \ud1a0\ud070\ub7c9\uc744 \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\r\n    \r\n    event BeneficierUpdated(address indexed beneficier); // \uc774\ubca4\ud2b8: \uc218\ucde8\uc778 \ubcc0\uacbd\r\n    event PlanSet(uint64 time, uint256 amount); // \uc774\ubca4\ud2b8: \uc778\ucd9c\ud50c\ub79c \uc124\uc815 (amount=0\uc774\uba74 \uc81c\uac70)\r\n    event Withdraw(uint256 amount); // \uc774\ubca4\ud2b8: \uc778\ucd9c\r\n\r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8 \uc0dd\uc131\uc790\uc774\ub2e4.\r\n    /// @param token \ud1a0\ud070 \ucee8\ud2b8\ub799\ud2b8 \uc8fc\uc18c\r\n    /// @param beneficier \uc218\ucde8\uc778 \uc8fc\uc18c\r\n    constructor(address token, address beneficier) public {\r\n        require(token != address(0), \"DkargoFund: token is null\");\r\n        require(beneficier != address(0), \"DkargoFund: beneficier is null\");\r\n        _setDkargoPrefix(\"fund\"); // \ud504\ub9ac\ud53d\uc2a4 \uc124\uc815 (fund)\r\n        _registerInterface(0x946edbed); // INTERFACE ID \ub4f1\ub85d (getDkargoPrefix)\r\n        _token = token;\r\n        _beneficier = beneficier;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc778\ucd9c\uae08\uc561 \uc218\ucde8\uc778\uc744 \uc124\uc815\ud55c\ub2e4.\r\n    /// @dev \uc218\ucde8\uc778 \uc8fc\uc18c\ub85c EOA, CA \ub2e4 \uc124\uc815 \uac00\ub2a5\ud558\ub2e4.\r\n    /// @param beneficier \uc124\uc815\ud560 \uc218\ucde8\uc778 \uc8fc\uc18c (address)\r\n    function setBeneficier(address beneficier) onlyOwner public {\r\n        require(beneficier != address(0), \"DkargoFund: beneficier is null\");\r\n        require(beneficier != _beneficier, \"DkargoFund: should be not equal\");\r\n        _beneficier = beneficier;\r\n        emit BeneficierUpdated(beneficier);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc778\ucd9c \ud50c\ub79c\uc744 \ucd94\uac00\ud55c\ub2e4.\r\n    /// @dev amount!=0\uc774\uba74 \uc0c8 \ud50c\ub79c\uc744 \ucd94\uac00\ud55c\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4. linkChain \uacfc\uc815\uc774 \uc218\ud589\ub41c\ub2e4. \uae30\uc874\uc5d0 \uc124\uc815\ub41c \ud50c\ub79c\uc774 \uc788\uc744 \uacbd\uc6b0 \ub36e\uc5b4\uc4f4\ub2e4.\r\n    /// amount=0\uc774\uba74 \ud50c\ub79c\uc744 \uc0ad\uc81c\ud55c\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4. unlinkChain \uacfc\uc815\uc774 \uc218\ud589\ub41c\ub2e4. \uae30\uc874\uc5d0 \uc124\uc815\ub41c \ud50c\ub79c\uc774 \uc5c6\uc744 \uacbd\uc6b0 revert\ub41c\ub2e4.\r\n    /// time\uc740 \ud604\uc7ac \uc2dc\uac01(block.timestamp)\ubcf4\ub2e4 \ud070 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4.\r\n    /// \uc124\uc815\ub41c \ud50c\ub79c\ub4e4\uc758 \ubaa8\ub4e0 amount\uc758 \ud569\uc740 balanceOf(fundCA)\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4.\r\n    /// @param time \uc778\ucd9c \uac00\ub2a5\ud55c \uc2dc\uac01\r\n    /// @param amount \uc778\ucd9c \uac00\ub2a5\ud55c \uae08\uc561\r\n    function setPlan(uint64 time, uint256 amount) onlyOwner public {\r\n        require(time > block.timestamp, \"DkargoFund: invalid time\");\r\n        _totals = _totals.add(amount); // \ucd94\uac00\ub420 \ud50c\ub79c \uae08\uc561\uc744 \ucd1d \ud50c\ub79c\uae08\uc561\uc5d0 \ud569\uc0b0\r\n        _totals = _totals.sub(_plans[time]); // \ucd1d \ud50c\ub79c\uae08\uc561\uc5d0\uc11c \uae30\uc874 \uc124\uc815\ub41c \uae08\uc561\uc744 \ucc28\uac10\r\n        require(_totals <= fundAmount(), \"DkargoFund: over the limit\"); // \ucd1d \ud50c\ub79c\uae08\uc561 \uccb4\ud06c\r\n        _plans[time] = amount; // \ud50c\ub79c \uae08\uc561 \uac31\uc2e0\r\n        emit PlanSet(time, amount); // \uc774\ubca4\ud2b8 \ubc1c\uc0dd\r\n        if(amount == 0) { // \uccb4\uc778\uc815\ubcf4 \uac31\uc2e0\r\n            _unlinkChain(time); // \uae30\uc874\uc5d0 \uc124\uc815\ub418\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0, revert(\"AddressChain: the node is aleady unlinked\")\r\n        } else if(isLinked(time) == false) { // \uc0c8 \uc124\uc815\uc77c \uacbd\uc6b0\uc5d0\ub9cc \uccb4\uc778\ucd94\uac00, \uae30\uc874 \uc124\uc815\uc774 \uc788\uc744 \uacbd\uc6b0, \uac12\ub9cc \uac31\uc2e0\ud558\uace0 \uccb4\uc778 \uc815\ubcf4\ub294 \uac31\uc2e0\ud558\uc9c0 \uc54a\uc74c\r\n            _linkChain(time);\r\n        }\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1a0\ud070\uc744 \uc9c0\uc815\ub41c \uc218\ucde8\uc778\uc5d0\uac8c\ub85c \uc778\ucd9c\ud55c\ub2e4.\r\n    /// @dev \ub9cc\ub8cc\ub418\uc9c0 \uc54a\uc740 index\ub294 \uc778\ucd9c \ubd88\uac00\ub2a5\ud558\ub2e4. revert!\r\n    /// \uc124\uc815\ub418\uc9c0 \uc54a\uc740 (\ud639\uc740 \ud574\uc81c\ub41c) \ud50c\ub79c \uc778\ub371\uc2a4\uc5d0 \ub300\ud574\uc11c\ub294 revert!\r\n    /// @param index \ud50c\ub79c \uc778\ub371\uc2a4, setPlan\uc5d0\uc11c \ub123\uc5b4\uc92c\ub358 \uc778\ucd9c \uac00\ub2a5 \uc2dc\uac01\uc774\ub2e4.\r\n    function withdraw(uint64 index) onlyOwner public {\r\n        require(index <= block.timestamp, \"DkargoFund: an unexpired plan\");\r\n        require(_plans[index] > 0, \"DkargoFund: plan is not set\");\r\n        bytes memory cmd = abi.encodeWithSignature(\"transfer(address,uint256)\", _beneficier, _plans[index]);\r\n        bytes memory data = address(_token)._call(cmd);\r\n        bool result = abi.decode(data, (bool));\r\n        require(result == true, \"DkargoFund: failed to proceed raw-data\");\r\n        _totals = _totals.sub(_plans[index]); // \ucd1d \ud50c\ub79c\uae08\uc561\uc5d0\uc11c \uae30\uc874 \uc124\uc815\ub41c \uae08\uc561\uc744 \ucc28\uac10\r\n        emit Withdraw(_plans[index]);\r\n        _plans[index] = 0;\r\n        _unlinkChain(index);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice Fund \ucee8\ud2b8\ub799\ud2b8\uc758 \ubc38\ub7f0\uc2a4\ub97c \ud655\uc778\ud55c\ub2e4.\r\n    /// @return Fund \ucee8\ud2b8\ub799\ud2b8\uc758 \ubc38\ub7f0\uc2a4 (uint256)\r\n    function fundAmount() public view returns(uint256) {\r\n        bytes memory data = address(_token)._vcall(abi.encodeWithSignature(\"balanceOf(address)\", address(this)));\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud50c\ub79c\uc5d0 \uae30\ub85d\ub41c \ucd1d \uae08\uc561\uc744 \ud655\uc778\ud55c\ub2e4.\r\n    /// @return \ud50c\ub79c\uc5d0 \uae30\ub85d\ub41c \ucd1d \uae08\uc561 (uint256)\r\n    function totalPlannedAmount() public view returns(uint256) {\r\n        return _totals;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \ud50c\ub79c \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 \uc778\ucd9c \uae08\uc561\uc744 \ud655\uc778\ud55c\ub2e4.\r\n    /// @param index \ud50c\ub79c \uc778\ub371\uc2a4, setPlan\uc5d0\uc11c \ub123\uc5b4\uc92c\ub358 \uc778\ucd9c \uac00\ub2a5 \uc2dc\uac01\uc774\ub2e4.\r\n    /// @return \ud50c\ub79c \uc778\ub371\uc2a4\uc5d0 \ud574\ub2f9\ud558\ub294 \uc778\ucd9c \uae08\uc561 (uint256)\r\n    function plannedAmountOf(uint64 index) public view returns(uint256) {\r\n        return _plans[index];\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc218\ucde8\uc778 \uc8fc\uc18c\ub97c \ud655\uc778\ud55c\ub2e4.\r\n    /// @return \uc218\ucde8\uc778 \uc8fc\uc18c (address)\r\n    function beneficier() public view returns(address) {\r\n        return _beneficier;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1a0\ud070(ERC-20) \uc8fc\uc18c\ub97c \ud655\uc778\ud55c\ub2e4.\r\n    /// @return \ud1a0\ud070 \uc8fc\uc18c (address)\r\n    function token() public view returns(address) {\r\n        return _token;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"infcid\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"nextOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"plannedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"isLinked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlannedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"prevOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDkargoPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficier\",\"type\":\"address\"}],\"name\":\"setBeneficier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"beneficier\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficier\",\"type\":\"address\"}],\"name\":\"BeneficierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlanSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"Uint64ChainLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"uint64\"}],\"name\":\"Uint64ChainUnlinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "DkargoFund", "CompilerVersion": "v0.5.6+commit.b259423e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005dc60c4d5e75d22588fa17ffeb90a63e535efce00000000000000000000000006b41d51b2357f601b615bf750a9f8a99803a2148", "EVMVersion": "constantinople", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e5c4500e0b609cc4477cc5e96979aaef78deff11aebd8842439998c455dc9a1e"}