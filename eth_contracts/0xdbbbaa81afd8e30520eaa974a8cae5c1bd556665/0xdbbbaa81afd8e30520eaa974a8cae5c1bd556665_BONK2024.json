{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Bonk2024.sol\": {\r\n      \"content\": \"/*\\r\\nhttps://t.me/Bonk2024_portal\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.23;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns(address){\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    \\r\\n    constructor() {\\r\\n        _owner = _msgSender();\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(_owner == _msgSender(), \\\"Not owner\\\");\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        if(a==0) {\\r\\n            return 0;\\r\\n        }\\r\\n        c = a * b;\\r\\n        assert(c/a ==b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b > 0);\\r\\n        uint256 c = a / b;\\r\\n        assert(a == b * c + a % b);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(a >= b);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BONK2024    is Ownable, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address=> bool) _excludeFromFees;\\r\\n\\r\\n    struct TaxInformation {\\r\\n        uint256 buyTax;\\r\\n        uint256 sellTax;\\r\\n        uint256 finalSellTax;\\r\\n        uint256 finalBuyTax;\\r\\n        uint256 _reduceBuyTaxAt;\\r\\n        uint256 _reduceSellTaxAt;\\r\\n        uint256 _preventSwapBefore;\\r\\n        uint256 _buyCount;\\r\\n        uint256 _maxTaxSwap;\\r\\n        uint256 _maxTaxWallet;\\r\\n    }\\r\\n\\r\\n   struct ContractInformation {\\r\\n        string _name;\\r\\n        string _symbol;\\r\\n        uint8 _decimals;\\r\\n        uint256 _totalSupply;\\r\\n   }\\r\\n\\r\\n    address payable private _taxWallet;\\r\\n    address private uniswapV2Pair;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    TaxInformation public tax;\\r\\n    ContractInformation public info;\\r\\n\\r\\n    bool private openedTrade = false;\\r\\n    bool private inSwap = false;\\r\\n    bool private swapEnabled = false;\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        info._name = unicode\\\"Bonk 2024\\\";\\r\\n        info._symbol = unicode\\\"BONK2024\\\";\\r\\n        info._decimals = 9;\\r\\n        info._totalSupply = 1_000_000_000 * 10** info._decimals;\\r\\n        _mint(_msgSender(), info._totalSupply);\\r\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        tax.buyTax = 30;\\r\\n        tax.sellTax = 30;\\r\\n        tax.finalBuyTax = 5;\\r\\n        tax.finalSellTax = 5;\\r\\n        tax._reduceBuyTaxAt = 10;\\r\\n        tax._reduceSellTaxAt = 10;\\r\\n        tax._preventSwapBefore = 5;\\r\\n        tax._maxTaxWallet = info._totalSupply.mul(2).div(100);\\r\\n        tax._maxTaxSwap= info._totalSupply.mul(2).div(100);\\r\\n        _excludeFromFees[address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)] = true;\\r\\n        _excludeFromFees[owner()] = true;\\r\\n        _excludeFromFees[address(this)] = true;\\r\\n    }\\r\\n\\r\\n    function name() public view returns(string memory) {\\r\\n        return info._name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns(string memory) {\\r\\n        return info._symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return info._decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override  returns (uint256) {\\r\\n        return info._totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override  returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override  returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        unchecked {\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\r\\n      return (a>b)?b:a;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        uint256 fromBalance = balanceOf(from);\\r\\n        require(fromBalance >= amount, \\\"ERROR: balance of from less than value\\\");\\r\\n        uint256 taxAmount = 0;\\r\\n        if(!_excludeFromFees[from] && !_excludeFromFees[to]) {\\r\\n            require(openedTrade, \\\"Trade has not been opened yet\\\");\\r\\n            taxAmount = amount.mul((tax._buyCount > tax._reduceBuyTaxAt) ? tax.finalBuyTax : tax.buyTax).div(100);\\r\\n            if (to == uniswapV2Pair) {\\r\\n                taxAmount = amount.mul((tax._buyCount > tax._reduceSellTaxAt) ? tax.finalSellTax : tax.sellTax).div(100);\\r\\n            }\\r\\n                        \\r\\n            if(from==uniswapV2Pair) {\\r\\n                tax._buyCount++;\\r\\n                if(_balances[to].add(amount.sub(taxAmount)) > tax._maxTaxWallet) {\\r\\n                    revert(\\\"The total amount of tokens in the wallet cannot exceed 2% _totalSupply\\\");\\r\\n                }   \\r\\n            }           \\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (!inSwap && to == uniswapV2Pair&& swapEnabled && tax._buyCount>tax._preventSwapBefore) {\\r\\n                swapTokensForEth(min(amount,min(contractTokenBalance,tax._maxTaxSwap)));\\r\\n                uint256 contractETHBalance = address(this).balance;\\r\\n                if(contractETHBalance > 0) {\\r\\n                    sendETHToFee(address(this).balance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if(taxAmount > 0) {\\r\\n            _balances[address(this)]=_balances[address(this)].add(taxAmount);\\r\\n            emit Transfer(from, address(this), taxAmount);\\r\\n        }\\r\\n        _balances[from]=_balances[from].sub(amount);\\r\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\r\\n        emit Transfer(from, to, amount.sub(taxAmount));\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function sendETHToFee(uint256 amount) internal  {\\r\\n        _taxWallet.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function openTrading() external onlyOwner {\\r\\n        openedTrade = true;\\r\\n        swapEnabled = true;\\r\\n    }\\r\\n\\r\\n    function reduceBuyTax(uint256 _newfinalBuyTax, uint256 _newBuyTax) external onlyOwner {\\r\\n        tax.finalBuyTax = _newfinalBuyTax;\\r\\n        tax.buyTax = _newBuyTax;\\r\\n    }\\r\\n\\r\\n    function reduceSellTax(uint256 _newfinalSellTax, uint256 _newSellTax) external onlyOwner {\\r\\n        tax.finalSellTax = _newfinalSellTax;\\r\\n        tax.sellTax = _newSellTax;\\r\\n    }\\r\\n\\r\\n    function updateSwapEnable(bool swap) external onlyOwner {\\r\\n        swapEnabled = swap;\\r\\n    }\\r\\n\\r\\n    function updatePreventSwapBefore(uint256 swap) external onlyOwner {\\r\\n        tax._preventSwapBefore = swap;\\r\\n    }\\r\\n\\r\\n    function updateUniswapV2Router(IUniswapV2Router02 _newRouter) external onlyOwner {\\r\\n        uniswapV2Router = _newRouter;\\r\\n    }\\r\\n\\r\\n    function removeLimit() external onlyOwner {\\r\\n        tax._maxTaxWallet = info._totalSupply;\\r\\n    }\\r\\n\\r\\n    function updateMaxTaxSwap(uint256 _newMaxTaxSwap) external onlyOwner {\\r\\n        tax._maxTaxSwap = _newMaxTaxSwap;\\r\\n    }\\r\\n\\r\\n    function manualSwap(uint256 amount) external onlyOwner{\\r\\n        require(_msgSender() == owner());\\r\\n        require(amount <= balanceOf(address(this)) && amount > 0, \\\"Wrong amount\\\");\\r\\n        swapTokensForEth(amount);\\r\\n    }\\r\\n\\r\\n    function updateSwapTokenAtAmount(uint8 swap) external onlyOwner {\\r\\n        tax._preventSwapBefore = swap;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfinalBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyTax\",\"type\":\"uint256\"}],\"name\":\"reduceBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfinalSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellTax\",\"type\":\"uint256\"}],\"name\":\"reduceSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reduceBuyTaxAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reduceSellTaxAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preventSwapBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTaxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTaxWallet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTaxSwap\",\"type\":\"uint256\"}],\"name\":\"updateMaxTaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swap\",\"type\":\"uint256\"}],\"name\":\"updatePreventSwapBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"updateSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"swap\",\"type\":\"uint8\"}],\"name\":\"updateSwapTokenAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BONK2024", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}