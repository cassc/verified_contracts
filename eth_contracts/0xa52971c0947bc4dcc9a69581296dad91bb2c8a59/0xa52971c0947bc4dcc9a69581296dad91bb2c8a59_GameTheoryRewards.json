{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"contracts/GameTheoryRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\nimport './interfaces/ILPAdapter.sol';\\n\\ncontract GameTheoryRewards is Context {\\n  uint256 constant P = FixedPoint96.Q96;\\n\\n  uint256 public immutable CREATED;\\n  address public immutable TOKEN;\\n  uint256 public immutable FIRST_CLAIM_DELAY;\\n  uint256 public immutable MIN_LOCKUP_TIME;\\n\\n  uint256 public totalUsers;\\n  uint256 public totalShares;\\n  struct Reward {\\n    uint256 cached;\\n    uint256 excluded;\\n    uint256 realized;\\n  }\\n  mapping(address => uint256) public shares;\\n  mapping(address => uint256) public lastClaimAmt;\\n  mapping(address => uint256) public lastClaimTime;\\n  mapping(address => Reward) public rewards;\\n\\n  uint256 _totalPerShare;\\n  uint256 public totalDistributed;\\n  uint256 public totalDepositedGross;\\n  uint256 public totalDepositedNet;\\n\\n  event AddShares(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userCached,\\n    uint256 userExcluded\\n  );\\n  event RemoveShares(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userCached,\\n    uint256 userExcluded\\n  );\\n  event CacheReward(\\n    address indexed user,\\n    uint256 newlyAdded,\\n    uint256 userCached\\n  );\\n  event DistributeReward(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 userCached,\\n    uint256 userExcluded\\n  );\\n  event CompoundReward(\\n    address indexed user,\\n    uint256 amountETH,\\n    uint256 amountTokenOut,\\n    uint256 userCached,\\n    uint256 userExcluded\\n  );\\n  event DepositRewards(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 latestTotalPerShare,\\n    bool areNew\\n  );\\n  event PayBackLastClaim(\\n    address indexed user,\\n    uint256 amountPaidBack,\\n    uint256 userCached,\\n    uint256 userExcluded\\n  );\\n\\n  constructor(uint256 _firstClaim, uint256 _minLockup) {\\n    CREATED = block.timestamp;\\n    TOKEN = _msgSender();\\n    FIRST_CLAIM_DELAY = _firstClaim;\\n    MIN_LOCKUP_TIME = _minLockup;\\n  }\\n\\n  function update(\\n    address _wallet,\\n    uint256 _updateAmount,\\n    bool _removing\\n  ) external {\\n    require(_msgSender() == TOKEN, 'T');\\n    if (_removing) {\\n      _removeShares(_wallet, _updateAmount);\\n      emit RemoveShares(\\n        _wallet,\\n        _updateAmount,\\n        rewards[_wallet].cached,\\n        rewards[_wallet].excluded\\n      );\\n    } else {\\n      _addShares(_wallet, _updateAmount);\\n      emit AddShares(\\n        _wallet,\\n        _updateAmount,\\n        rewards[_wallet].cached,\\n        rewards[_wallet].excluded\\n      );\\n    }\\n  }\\n\\n  function depositRewards() external payable {\\n    _depositRewards(_msgSender(), msg.value, true);\\n  }\\n\\n  function claim(bool _compound, uint256 _cmpndMinOut) external {\\n    require(block.timestamp >= CREATED + FIRST_CLAIM_DELAY, 'I');\\n    _distributeReward(_msgSender(), false, _compound, _cmpndMinOut);\\n  }\\n\\n  function paybackLastClaim() external payable {\\n    address _wallet = _msgSender();\\n    require(!_isUnlocked(_wallet), 'ULK');\\n    require(msg.value == lastClaimAmt[_wallet], 'E');\\n    uint256 _userShares = shares[_wallet];\\n    if (totalShares > _userShares) {\\n      // distribute to other reward-eligible users\\n      _removeShares(_wallet, _userShares);\\n      _depositRewards(_wallet, msg.value, true);\\n      _addShares(_wallet, _userShares);\\n    } else {\\n      _depositRewards(_wallet, msg.value, true);\\n      lastClaimAmt[_wallet] = 0;\\n      lastClaimTime[_wallet] = 0;\\n    }\\n    emit PayBackLastClaim(\\n      _wallet,\\n      msg.value,\\n      rewards[_wallet].cached,\\n      rewards[_wallet].excluded\\n    );\\n  }\\n\\n  function _addShares(address _wallet, uint256 _amount) internal {\\n    if (shares[_wallet] > 0) {\\n      _distributeReward(_wallet, true, false, 0);\\n    }\\n    uint256 sharesBefore = shares[_wallet];\\n    totalShares += _amount;\\n    shares[_wallet] += _amount;\\n    if (sharesBefore == 0 && shares[_wallet] > 0) {\\n      totalUsers++;\\n    }\\n    rewards[_wallet].excluded = _cumulative(shares[_wallet]);\\n  }\\n\\n  function _removeShares(address _wallet, uint256 _amount) internal {\\n    require(_amount <= shares[_wallet], 'R');\\n    if (shares[_wallet] == 0) {\\n      return;\\n    }\\n    uint256 _unclaimed = _unclaimedRewards(_wallet);\\n    if (_unclaimed > 0) {\\n      uint256 _userShares = shares[_wallet];\\n      if (totalShares > _userShares) {\\n        // distribute to other reward-eligible users\\n        totalShares -= _userShares;\\n        _depositRewards(_wallet, _unclaimed, false);\\n        totalShares += _userShares;\\n        rewards[_wallet].cached = 0;\\n      } else {\\n        _distributeReward(_wallet, false, false, 0);\\n      }\\n    }\\n    totalShares -= _amount;\\n    shares[_wallet] -= _amount;\\n    if (shares[_wallet] == 0) {\\n      totalUsers--;\\n    }\\n    lastClaimAmt[_wallet] = 0;\\n    lastClaimTime[_wallet] = 0;\\n    rewards[_wallet].excluded = _cumulative(shares[_wallet]);\\n  }\\n\\n  function _depositRewards(\\n    address _wallet,\\n    uint256 _amount,\\n    bool _additive\\n  ) internal {\\n    require(_amount > 0 && totalShares > 0, 'D0');\\n    totalDepositedGross += _amount;\\n    if (_additive) {\\n      totalDepositedNet += _amount;\\n    }\\n    _totalPerShare += (P * _amount) / totalShares;\\n    emit DepositRewards(_wallet, _amount, _totalPerShare, _additive);\\n  }\\n\\n  function _distributeReward(\\n    address _wallet,\\n    bool _cache,\\n    bool _compound,\\n    uint256 _cmpndMinOut\\n  ) internal {\\n    if (shares[_wallet] == 0) {\\n      return;\\n    }\\n    bool _unlocked = _isUnlocked(_wallet);\\n    uint256 _amount = _unclaimedRewards(_wallet);\\n    rewards[_wallet].excluded = _cumulative(shares[_wallet]);\\n    if (_cache) {\\n      uint256 _newRewards = _amount - rewards[_wallet].cached;\\n      if (_newRewards == 0) {\\n        return;\\n      }\\n      rewards[_wallet].cached += _newRewards;\\n      emit CacheReward(_wallet, _newRewards, rewards[_wallet].cached);\\n    } else if (_compound) {\\n      require(_amount > 0, 'CA');\\n      rewards[_wallet].cached = 0;\\n      lastClaimAmt[_wallet] = _unlocked\\n        ? _amount\\n        : lastClaimAmt[_wallet] + _amount;\\n      lastClaimTime[_wallet] = block.timestamp;\\n      rewards[_wallet].realized += _amount;\\n      totalDistributed += _amount;\\n      uint256 _amountOut = ILPAdapter(TOKEN).swapETHForToken{ value: _amount }(\\n        TOKEN,\\n        _cmpndMinOut,\\n        _wallet\\n      );\\n      emit CompoundReward(\\n        _wallet,\\n        _amount,\\n        _amountOut,\\n        rewards[_wallet].cached,\\n        rewards[_wallet].excluded\\n      );\\n    } else {\\n      require(_unlocked, 'LK');\\n      rewards[_wallet].cached = 0;\\n      if (_amount > 0) {\\n        lastClaimAmt[_wallet] = _amount;\\n        lastClaimTime[_wallet] = block.timestamp;\\n        rewards[_wallet].realized += _amount;\\n        totalDistributed += _amount;\\n        uint256 _bef = address(this).balance;\\n        (bool _s, ) = payable(_wallet).call{ value: _amount }('');\\n        require(_s, 'D1');\\n        require(address(this).balance >= _bef - _amount, 'D2');\\n        emit DistributeReward(\\n          _wallet,\\n          _amount,\\n          rewards[_wallet].cached,\\n          rewards[_wallet].excluded\\n        );\\n      }\\n    }\\n  }\\n\\n  function _isUnlocked(address _wallet) internal view returns (bool) {\\n    bool _enoughUnclaimed = _unclaimedRewards(_wallet) >= lastClaimAmt[_wallet];\\n    bool _minTimePassed = block.timestamp >\\n      lastClaimTime[_wallet] + MIN_LOCKUP_TIME;\\n    return _enoughUnclaimed && _minTimePassed;\\n  }\\n\\n  function isUnlocked(address _wallet) external view returns (bool) {\\n    return _isUnlocked(_wallet);\\n  }\\n\\n  function _unclaimedRewards(address _wallet) internal view returns (uint256) {\\n    if (shares[_wallet] == 0) {\\n      return 0;\\n    }\\n    uint256 _earned = _cumulative(shares[_wallet]) + rewards[_wallet].cached;\\n    uint256 _excluded = rewards[_wallet].excluded;\\n    if (_earned <= _excluded) {\\n      return 0;\\n    }\\n    return _earned - _excluded;\\n  }\\n\\n  function unclaimedRewards(address _wallet) external view returns (uint256) {\\n    return _unclaimedRewards(_wallet);\\n  }\\n\\n  function _cumulative(uint256 _share) internal view returns (uint256) {\\n    return (_share * _totalPerShare) / P;\\n  }\\n\\n  receive() external payable {\\n    _depositRewards(_msgSender(), msg.value, true);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILPAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface ILPAdapter {\\n  function swapETHForToken(\\n    address token,\\n    uint256 amountOutMin,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLockup\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCached\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userExcluded\",\"type\":\"uint256\"}],\"name\":\"AddShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newlyAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCached\",\"type\":\"uint256\"}],\"name\":\"CacheReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCached\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userExcluded\",\"type\":\"uint256\"}],\"name\":\"CompoundReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestTotalPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"areNew\",\"type\":\"bool\"}],\"name\":\"DepositRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCached\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userExcluded\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaidBack\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCached\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userExcluded\",\"type\":\"uint256\"}],\"name\":\"PayBackLastClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCached\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userExcluded\",\"type\":\"uint256\"}],\"name\":\"RemoveShares\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_CLAIM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCKUP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_compound\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cmpndMinOut\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paybackLastClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cached\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realized\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedGross\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedNet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updateAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_removing\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GameTheoryRewards", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000003f480", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}