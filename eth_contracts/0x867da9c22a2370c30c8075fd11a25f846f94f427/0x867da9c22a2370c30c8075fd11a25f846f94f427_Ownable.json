{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28c4\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28fe\u281f\u280b\u2819\u280b\u2809\u2819\u28b7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e4\u28f6\u28f6\u28c4\u2800\u2800\u2800\u28a0\u28fe\u28ff\u28c1\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2891\u28ff\u2846\u2800\u2800\u2800\u28a0\u28fe\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28fe\u28e6\u2840\u28a0\u28fe\u287f\u28db\u28db\u287b\u28b7\u28c4\u2800\u2800\u28f4\u28fe\u28ff\u281b\u283b\u2826\u28c4\u28f4\u28ff\u28ff\u287f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u283b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28e7\u28bc\u28ff\u28ff\u28ff\u283f\u28ff\u28c7\u28b8\u285f\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u283f\u28bf\u28fe\u28ff\u28e4\u283f\u280b\u2800\u2808\u283b\u28bf\u28ff\u28e7\u28ff\u281f\u28ec\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u2803\u2800\u2800\u2880\u28f4\u28d6\u28f6\u2800\u2800\u2800\u2800\u2800\u2880\u2848\u2800\u2800\u2898\u28fe\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28f6\u28f6\u28f6\u283f\u283f\u283f\u283f\u2837\u2836\u2836\u2836\u281b\u280b\u283b\u28e6\u28e4\u28c0\u287c\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u2847\u2800\u28ff\u283b\u28b7\u28e4\u28c0\u2800\u2800\u2800\u2808\u2800\u2800\u2800\u28c0\u28c8\u287b\u28bf\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28ff\u287f\u281b\u284f\u2801\u2802\u2818\u282d\u28bf\u28d2\u28d2\u2852\u2812\u2812\u280a\u2809\u2801\u2800\u2800\u28ff\u2824\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u281f\u2801\u2844\u2823\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u284c\u2819\u2832\u28e4\u28c0\u2820\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u28ff\u28cf\u2800\u2800\u28bf\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\u280b\u2800\u2800\u2800\u2800\u2808\u2819\u281a\u2813\u2836\u28a4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f4\u28ff\u28ff\u28ff\u28ff\u28f6\u28c0\u2874\u281b\u28b7\u28c4\u28e0\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2833\u28a6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e4\u28e4\u2834\u283e\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u281b\u283f\u28ff\u28e6\u28c4\u2819\u28bb\u28ff\u28f7\u28e6\u2864\u2824\u2836\u2812\u281b\u2801\u28e0\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28f4\u287e\u280f\u2801\u2800\u2800\u2800\u2800\u2830\u283f\u281f\u280b\u2800\u2800\u2800\u2800\u2808\u2809\u281b\u2819\u280b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u28c0\u2874\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28a7\u2840\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u287f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u2812\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28b7\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u287f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2889\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2847\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2884\u28fe\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\u28b8\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28e7\u2880\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28fc\u28cb\u28e7\u28f6\u2800\u2800\u2800\u2880\u2840\u28c0\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2864\u28fc\u28ff\u28ff\u28df\u28e4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28e6\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28ff\u285f\u2847\u28ff\u28e4\u28e4\u28f4\u28fc\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bc\u28f7\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u280f\u28f4\u28ff\u28ff\u280b\u2809\u2809\u281b\u280b\u2844\u2802\u2800\u2800\u2800\u2800\u2808\u28c7\u2800\r\n\u2800\u2800\u2800\u2880\u28ff\u28f7\u28dc\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u28bf\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f6\u283e\u28ff\u28ff\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u2816\u28e0\u28f6\u28ff\u28df\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2840\r\n\u2800\u2800\u2880\u28fe\u280b\u283b\u28ff\u2876\u280d\u2819\u281b\u28bf\u28ff\u28ff\u28ff\u28ee\u2859\u283f\u28ff\u28f6\u28e4\u28c4\u28c0\u28e4\u28e4\u28e4\u28e4\u2840\u2880\u28c8\u28c1\u28f0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\r\n\u2800\u2800\u28fe\u2807\u2800\u2800\u2818\u28b7\u2847\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28f6\u28fc\u28ff\u28ff\u28df\u28fb\u28ff\u28ff\u28ff\u28ff\u287f\u281f\u281b\u2801\u2800\u2809\u283b\u28bf\u28ff\u28f6\u28e4\u28f4\u28f6\u28f6\u28e4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2807\r\n\u2800\u28b8\u28ff\u2800\u2800\u2800\u28a0\u285e\u2800\u2800\u2800\u2800\u28be\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u28cb\u28e0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2889\u28db\u28bb\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u2800\r\n\u2800\u28b8\u284f\u2800\u2800\u2800\u28fc\u2801\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281b\u283f\u287f\u281b\u2809\u2809\u2809\u2801\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2809\u2830\u283f\u283f\u281b\u283b\u281f\u2809\u2801\u28a9\u28b9\u28ff\u28ff\u28c4\u2800\u2838\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\r\n\u2800\u28ff\u28bf\u2800\u2800\u28f0\u2807\u2800\u2800\u2800\u2800\u2800\u28ff\u285f\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u283b\u28b6\u28e4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28bf\u28ff\u28ff\u28e6\u2800\u28b9\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\r\n\u2880\u285f\u283a\u2800\u2890\u287f\u2800\u2800\u2800\u2800\u2880\u28fc\u28ff\u2801\u2800\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28e4\u28ff\u28e4\u28e4\u28e4\u28e4\u28f6\u2844\u2800\u2800\u28ff\u28c7\u28e4\u28e4\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28f7\u28ff\u287e\u2801\u28bf\u28ff\u28f7\u28ff\u28ff\u2877\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\r\n\u28b8\u2847\u2800\u2818\u28ff\u2841\u2800\u2800\u2880\u28f0\u28ff\u28ff\u2803\u2800\u2800\u2800\u28bb\u28ff\u28fd\u280b\u281b\u28af\u28bf\u28ff\u281b\u281b\u280b\u2809\u2819\u281b\u2832\u28c4\u2809\u2809\u2801\u2808\u2809\u2819\u281b\u2837\u28e6\u28e4\u28e4\u28cc\u2800\u2800\u28b8\u285f\u2801\u2800\u2800\u283b\u28ff\u28ff\u28ff\u28cd\u2800\u2800\u2800\u2800\u2800\u2800\u28a7\u2800\r\n\u28b8\u2801\u2800\u2800\u28b9\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u280b\u2800\u2800\u2800\u2800\u28b8\u28ff\u28a2\u2800\u2802\u2800\u28ed\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2849\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2800\u2800\u2800\u2800\u2800\u287f\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u287f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u287e\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u280b\u28ff\u28ff\u28ff\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u28fc\u28cf\u2808\u2801\u28b0\u2800\u28a8\u28ff\u28e7\u28c0\u2840\u28e0\u2800\u2800\u2800\u28f8\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2847\u2800\u2800\u2800\u2800\u2800\u28f8\u284d\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f7\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28bf\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u281f\u2807\u2800\u2808\u2811\u28a6\u28ff\u283f\u283f\u283f\u283f\u2836\u2880\u2880\u28f8\u283f\u28f6\u28e6\u28e0\u2856\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28bb\u2846\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u2847\u2800\u2800\u2800\u2800\u2800\u28f8\u2857\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2837\u2844\u28c0\u2800\u2800\u283b\u281f\u2803\u2800\u2800\u2800\u2800\u2824\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u285f\u2800\u2800\u2800\u2800\u2800\u28b0\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u2807\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u2820\u28b0\u28f6\u2804\u2800\u2800\u2800\u2880\u28c0\u2800\u28a0\u2800\u2800\u28a0\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28d9\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u28f8\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u2807\r\n\r\nt.me/farquaaderc\r\n\r\n*/\r\n\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external payable;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract FARQUAAD is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    string private constant _name = \"I was only nine years old. I loved Shrek so much, I had all the merchandise and movies. I'd pray to Shrek every night before I go to bed, thanking for the life I've been given. Shrek is love, I would say, Shrek is life. My dad hears me and calls me a faggot. I knew he was just jealous for my devotion of Shrek. I called him a cunt. He slaps me and sends me to go to sleep. I'm crying now and my face hurts. I lay in bed and it's really cold. A warmth is moving towards me. I feel something touch me. It's Shrek. I'm so happy. He whispers in my ear, This is my swamp. He grabs me with his powerful ogre hands, and puts me on my hands and knees. I spread my ass-cheeks for Shrek. He penetrates my butthole. It hurts so much, but I do it for Shrek. I can feel my butt tearing as my eyes start to water. I push against his force. I want to please Shrek. He roars a mighty roar, as he fills my butt with his love. My dad walks in. Shrek looks him straight in the eye, and says, It's all ogre now. Shrek leaves through my window. Shrek is love. Shrek is life.\";\r\n    string private constant _symbol = \"FARQUAAD\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _tTotal =  10000000  * 10**_decimals;\r\n    bool public tradingActive = false;\r\n    uint256 private liquidityFee;\r\n    uint256 private marketingFee;\r\n    BuyFees public buyFee;\r\n    SellFees public sellFee;\r\n    bool private swapping;\r\n    uint256 public _maxWalletAmount = 275000 * 10**_decimals;\r\n    uint256 public _maxTxAmount =  275000 * 10**_decimals;\r\n    uint256 public swapTokenAtAmount = 50000 * 10**_decimals;\r\n    uint256 public forceSwapCount;\r\n    address public liquidityReceiver;\r\n    address public marketingWallet;\r\n    struct BuyFees{uint256 liquidity;uint256 marketing;}\r\n    struct SellFees{uint256 liquidity;uint256 marketing;}\r\n\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n\r\n    constructor (address marketingAddress, address liquidityAddress) {\r\n        marketingWallet = marketingAddress;\r\n        liquidityReceiver = liquidityAddress;\r\n\r\n        balances[_msgSender()] = _tTotal;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        buyFee.liquidity = 1;\r\n        buyFee.marketing = 1;\r\n        sellFee.liquidity = 1;\r\n        sellFee.marketing = 1;\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        \r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(0x00)] = true;\r\n        _isExcludedFromFee[address(0xdead)] = true;\r\n\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function totalSupply() public view override returns (uint256) {return _tTotal;}\r\n    function balanceOf(address account) public view override returns (uint256) {return balances[account];}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFee[address(account)] = excluded;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function takeBuyFees(uint256 amount, address from) private returns (uint256) {\r\n        uint256 liquidityFeeToken = amount * buyFee.liquidity / 100; \r\n        uint256 marketingFeeTokens = amount * buyFee.marketing / 100;\r\n\r\n        balances[address(this)] += liquidityFeeToken + marketingFeeTokens;\r\n        emit Transfer (from, address(this), marketingFeeTokens + liquidityFeeToken);\r\n        return (amount -liquidityFeeToken -marketingFeeTokens);\r\n    }\r\n\r\n    function takeSellFees(uint256 amount, address from) private returns (uint256) {\r\n        uint256 liquidityFeeToken = amount * sellFee.liquidity / 100; \r\n        uint256 marketingFeeTokens = amount * sellFee.marketing / 100;\r\n\r\n        balances[address(this)] += liquidityFeeToken + marketingFeeTokens;\r\n        emit Transfer (from, address(this), marketingFeeTokens + liquidityFeeToken );\r\n        return (amount -liquidityFeeToken -marketingFeeTokens);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        tradingActive = true;\r\n    }\r\n\r\n    function adjustFees(uint256 _buyMarketingFee, uint256 _buyLiquidityFee, uint256 _sellMarketingFee, uint256 _sellLiquidityFee) public onlyOwner {\r\n        buyFee.liquidity = _buyLiquidityFee;\r\n        buyFee.marketing = _buyMarketingFee;\r\n        sellFee.liquidity = _sellLiquidityFee;\r\n        sellFee.marketing = _sellMarketingFee;\r\n    }\r\n\r\n    function updateMaxTransactions(uint256 _maxTx, uint256 _maxWallet) public onlyOwner {\r\n        require(_maxTx + _maxWallet > _tTotal / 1000, \"Should be bigger than 0,1%\");\r\n        _maxTxAmount = _maxTx;\r\n        _maxWalletAmount = _maxWallet;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        balances[from] -= amount;\r\n        uint256 transferAmount = amount;\r\n        \r\n        bool takeFee;\r\n\r\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            takeFee = true;\r\n        }\r\n\r\n        if (!tradingActive) {\r\n                    require(\r\n                        _isExcludedFromFee[from] || _isExcludedFromFee[to],\r\n                        \"Trading is not active.\"\r\n                    );\r\n                }\r\n\r\n        if(takeFee){\r\n            if(to != uniswapV2Pair){\r\n                require(amount <= _maxTxAmount, \"Transfer Amount exceeds the maxTxnsAmount\");\r\n                require(balanceOf(to) + amount <= _maxWalletAmount, \"Transfer amount exceeds the maxWalletAmount.\");\r\n                transferAmount = takeBuyFees(amount, to);\r\n            }\r\n\r\n            if(from != uniswapV2Pair){\r\n                require(amount <= _maxTxAmount, \"Transfer Amount exceeds the maxTxnsAmount\");\r\n                transferAmount = takeSellFees(amount, from);\r\n                forceSwapCount += 1;\r\n\r\n               if (balanceOf(address(this)) >= swapTokenAtAmount && !swapping) {\r\n                    swapping = true;\r\n                    swapBack(swapTokenAtAmount);\r\n                    swapping = false;\r\n                    forceSwapCount = 0;\r\n              }\r\n\r\n                if (forceSwapCount > 5 && !swapping) {\r\n                    swapping = true;\r\n                    swapBack(balanceOf(address(this)));\r\n                    swapping = false;\r\n                    forceSwapCount = 0;\r\n              }\r\n            }\r\n\r\n            if(to != uniswapV2Pair && from != uniswapV2Pair){\r\n                require(amount <= _maxTxAmount, \"Transfer Amount exceeds the maxTxnsAmount\");\r\n                require(balanceOf(to) + amount <= _maxWalletAmount, \"Transfer amount exceeds the maxWalletAmount.\");\r\n            }\r\n        }\r\n        \r\n        balances[to] += transferAmount;\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n   \r\n    function swapBack(uint256 amount) private {\r\n        uint256 contractBalance = amount;\r\n        uint256 liquidityTokens = contractBalance * (buyFee.liquidity + sellFee.liquidity) / (buyFee.marketing + buyFee.liquidity + sellFee.marketing + sellFee.liquidity);\r\n        uint256 marketingTokens = contractBalance * (buyFee.marketing + sellFee.marketing) / (buyFee.marketing + buyFee.liquidity + sellFee.marketing + sellFee.liquidity);\r\n        uint256 totalTokensToSwap = liquidityTokens + marketingTokens;\r\n        \r\n        uint256 tokensForLiquidity = liquidityTokens.div(2);\r\n        uint256 amountToSwapForETH = contractBalance.sub(tokensForLiquidity);\r\n        uint256 initialETHBalance = address(this).balance;\r\n        swapTokensForEth(amountToSwapForETH); \r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n        \r\n        uint256 ethForLiquidity = ethBalance.mul(liquidityTokens).div(totalTokensToSwap);\r\n        addLiquidity(tokensForLiquidity, ethForLiquidity);\r\n        payable(marketingWallet).transfer(address(this).balance);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH {value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Ownable", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b226777efadb0d49a5b4a206adc4f72e2ec29098f2b8a4f93afa07b247e8a505"}