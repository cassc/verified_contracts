{"SourceCode": "/**\r\nYJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ5\r\nJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ?J?JJ?JJ??JJ?JJJJJ?JJJJJJJJJJJJJJJJJJJJJ?\r\nJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ????????????J??????????????J?J???JJJ?JJJJJJJ????JJJJ5\r\nJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJYY5555555555555555YYYYYYYYJJJJ??????????????????????J?????????J?????\r\nJJJJJJJJJJJJJJJJJJJJJJJ?J?JJY55PPPPPPPPPPPPPPPPPPPPPPPPPPPP555555YJ???????????????????????????????JY\r\nJJJJJJJJJJJJJJJJJJJJ?J?JY55PPPPPPPPPPPPPPPPPP5555555555555555PPPPPP555YJ????????????????????????????\r\nJJJJJJJJJ?JJJJJJJ????JY5PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP55YYJ??????????????????????J\r\nJJJJJJJJ??JJJJ?J???JYPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP5PPPPPPPPPPPPP5PPPPPPP55J????????????????????\r\nJJJJJ?JJJ?J?????JY5PPPPPPPP5P55PP5555555555555555555555555PPP55P555555555555555555YJ??7?????????????\r\nJJJ?J?????????JY5PPPPP55555PP555555PP55555555YYYY55555555555555555555555555555Y555555Y?7?7777???????\r\n??J??????????J5PPP55P555PP55555555555555555YYYY5555P55PP555Y555555Y5P5YY55555P5Y5555555Y777777?7????\r\n?????????????Y5555P5555555555P55555YYY5555YYY55555P555PP555YY5PP5YYPPP5YYP55Y5P5Y5P55Y5PJ77777777??J\r\n????????????J55PP5555P55YY555P5555YYY5555YYPPP555PP55YY55555Y5PP5YYJPP5YYPP5YY55Y5P555Y5P?7777777777\r\n???????????J555P555Y5P5YYY555P555YYY55555Y5GPP555GP5Y!^~5555YY5555Y!7?5YYPP55Y55Y5P555Y5PY77777777?J\r\n???????????Y5P555YJY55YYY5555555YYY55555YJJGP555!7YPJ^^^JP555JY77Y57:!5J!!~?5YY555P55Y55PP?777777777\r\n??????????YP5P55YJJY55YY5555P555YY555PP5Y!~!Y55Y^^~Y?~^^^?555Y57:~77^~7^^^!77~^!??555555PPJ!7777777?\r\n??77?7777?5P555YJJJ5P5YY5555P555YY55??55J~J?Y5Y7^^^~7~^~!~?5YYY!^^^^^^^::::::^^^^!?YPP55PP?!77777777\r\n?77?77777Y5P55YYJJY5P5Y55555P555YY5?^:75?:^!!~^^^^^^^^^^~!!7!!^^^^^^^^~!7??7!~^:^^~7PP5YP57!!7777777\r\n777777777YP55YJJJJ5PP555P5555555Y5J^^^:~~!77!~^::^^^^^^^^^^^^^^^^^^^^?GBGGGGBBG57^^75P5557!!!!!!7777\r\n777777777Y555YJJJY5PP555P55Y5P55YY7^:^?PBBBBBBGPJ!^^^^^^^^^^^^^^^^^^^^^~!777???5G?^^~YY?!!!!!!!!!!77\r\n777777777Y55YYJJJY55P555P55YYPPP5Y7^?BB?~~^^^~!7?!:^^^^^^^^^^^^^^^^^^^?5G#&#&&B?^~^^^!!~~!!!!!!!!!!!\r\n77777777J555YJJJJ5555PP555YJJJ??Y5J!&5^:::^~!7???JJ!^^^^^^^^^^^^^^^^^^JB#?5&&&@B7^~^^~~!!!!!!!!!!!!!\r\n7777777?5555YJJJY55555555YJJ?~:^^~!~7^^~7JPGGGP5Y?7~^^^^^^^^^^^^^^~^^?&@B.^#&&&##!~~~~!~~~!!!!!!!!!!\r\n7777777Y5555YJJY5P555555YJ??!^^^^^^^^^:7PBBGG&&@&#P7^^^^^^^^^^^^^~~^^B&&&B#&#@#BYJ~~^~~~~~~~~!!!!!!!\r\n777777JP5555YJYPP55YYJJ?7!~~^^^^^^^^^!P#&&P7Y&##&&@&Y^^^^^^^^^:^^~~^!&G&&###&@GG:^~^^~~~~~~~~~~~!!!!\r\n7??7!7555555JJJJ?77!~~^^^^^^^^^^^^^^?#@#G&&&&####&@&&!^^^^^^^^^^~~~^~#GG&&#&&#G5:~~~~~~~~~~~~~~~~~!!\r\n?YY7!75555Y?~~~~^^^^^^^^^^^^^^^^^^^~B7J&5G&######&&G&J^^^^^^^^^^~~~~^Y#PG#&&PP#~~~~~~~~~~~~~~~~~!!!!\r\n55YJ?YP555?^~~~^^^^^^^^^^^^^^^^^^^^^!.:BB5G&&&&&&##B&J^^^^^^^^^^~~~~~~?5PGPP#G!^~~~^~~~~~~!~~~!!!!~~\r\nGGP555P555Y!~~~~^^^^^^^^^^^^^^^^^^^^^^.~G#P5PGBB#YY@G~^^^^^~~^^~~~~~~~^^~7?YPJ~~~~^~!!!!!!!!!!!!!!!7\r\nBBBGGPP555YYY!~^~~~^^^^^^^^^^^^^^^^^^^^::7PBGP5PB&#5~^^^^^^^^^^^^^^~~~~~~~~~~~~~~^~????JJ??????77!!!\r\nBBBBBGP555Y5P5Y?!~~^^~~^^^^^^^^^^^^^^^^^^:^5##BG5J!^^^^^^^^^^^^:::^^~~~~~~~~~~~~^~Y5JJJYJJJJJJJ?7!!7\r\n##BBBBP555Y5P5PPPYJ?!~~^^~~~~~~~~^^^^^^^^^^^!~^^^^^^^^^^^^^^^^^^^^^^^^~~~~~~~~~^!Y5Y???JJJJJJJ?????7\r\n####BBG55555P555PPPPP5YJ7!~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^~~~~~~^^^^~~~~~~^~?55YYYJ???JJJJJJJYYY5\r\n#####B#G5555P5555555PPPPPP5YJ?7!~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^~~~~~~7YPP5555YYYY555555PPPPP\r\n########G555P5555555555PPPPPPPPP5YJ?7!~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^~~~~~~!?5PPP5555555PGGGGGGGGBGGG\r\n#######&#P55P55555555555PPPPPPPPPPPPPP5J?!~^^^^^^^^^^^^^^^^^^^^^^^^^~~!!?Y5PPPPP55Y55555GBBBBBBBBBBB\r\n#####&#&#G5555555555555555PPPPPPPPPPPPPPPPP5Y?7!~~^^^^^^^^^~~~~~~~!7?Y5PPPPPPP555555555YPBBBBBBBBBBB\r\n&&&##&&&&B55555555P5555555555PPPPPPPPPPPPPGBBBBBGJ77!!!~~~~~~~!YYY55PPPPPPPPPP55555555555GBBBBB#BBBB\r\n&&&#&&&###P555555555555PPPPP555PPPPPPPGBBB#######5YJ7777!!!!!~!G#BGGPPPPPPPP5PP555555555Y5GBB5PBB#B#\r\n&##&&&##BGP55555555555555555555PPGGB####PJJ??77JYJ???77!!!!!!!~??77777JY5PPPP55555555555555555G#####\r\n##&&&&#BP55555555PPPPPPPGGGGBBB##&&BY?7!~....!7~^!7777!!!!!!!!~~.!~...:~~!7JPGPPPGBGGGG##BBBB#######\r\n##&&&&&&##BBBBBBBB###B##&&&&&###&B?~~~~~~^...!J!:^~!!!!!!!~~~~~^:?~...:~~~^^!5B######B##&#######&&&&\r\n###&&&&&&&#BBB##BB#####&####&&##B!^~~~~~~^:...^!?~^^^^~^^^^^^^:~7~....:~~~~~^^JB#BBBBB##&#######&&&&\r\n&&&&&#&&&&#BBB###BB#########&&&#?~~~~~~~~~:.....:~!7!!:~7!^!7!!~^.....:~~~~~~^^J###BB###########&&&&\r\n&&&&##&&####BB###BB##BBB##&&&&@5~~~~~~~~~~:........:^!:!!!~~^::.......:^~~~^^^^~P#####&&######&&&&&#\r\n&&&&##################B##&@&&@#!~~~~~~~~~~:...........................:^^^^^^^^^7B###&&&&&&&&&&&&&&&\r\n&&&&&##########&&##&&##&&&&&&&5~~~~~~~~~~~:...........:.....::........:^^^^^^^^^^Y##&&&&@&&&&&&&&&&#\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract milady is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    address payable private _taxWallet;\r\n    address payable private _developmentWallet;\r\n    uint256 firstBlock;\r\n    uint256 private _initialBuyTax=20;\r\n    uint256 private _initialSellTax=90;\r\n    uint256 private _finalBuyTax=4;\r\n    uint256 private _finalSellTax=4;\r\n    uint256 private _reduceBuyTaxAt=20;\r\n    uint256 private _reduceSellTaxAt=40;\r\n    uint256 private _preventSwapBefore=35;\r\n    uint256 private _buyCount=0;\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000 * 10**_decimals;\r\n    string private constant _name = unicode\"milady\";\r\n    string private constant _symbol = unicode\"milady\";\r\n    uint256 public _maxTxAmount = 20000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 10000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 10000 * 10**_decimals;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool public tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(0x4b3Cf4b832285CbDC50889544EE7EF5fFA8e3bF8);\r\n        _developmentWallet = payable(msg.sender);\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);       \r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n\r\n                if (firstBlock + 3  > block.number) {\r\n                    require(!isContract(to) && msg.sender == tx.origin, \"No bots allowed\");\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        bool c = account.code.length == 0 ? false : true;\r\n        return c;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function ForceCoolDownTaX() external onlyOwner{\r\n           _initialBuyTax=20;\r\n           _initialSellTax=20;\r\n    }\r\n\r\n  \r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        uint256 developmentFee;\r\n        uint256 taxFee;\r\n        developmentFee = amount * 15/ 100;\r\n        taxFee = amount * 85/100;\r\n        _developmentWallet.transfer(developmentFee);\r\n        _taxWallet.transfer(taxFee);\r\n    }\r\n\r\n    function addBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory notbot) public onlyOwner {\r\n      for (uint i = 0; i < notbot.length; i++) {\r\n          bots[notbot[i]] = false;\r\n      }\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ForceCoolDownTaX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "milady", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b784522e265583f5fe97ad53e1beb7a7e75ad7d40b676d957c45d64ac7ecd183"}