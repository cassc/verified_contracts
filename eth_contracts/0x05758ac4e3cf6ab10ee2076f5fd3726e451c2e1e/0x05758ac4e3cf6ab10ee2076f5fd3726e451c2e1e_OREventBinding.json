{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/example/OREventBinding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IOREventBinding} from \\\"../interface/IOREventBinding.sol\\\";\\nimport {ConstantsLib} from \\\"../library/ConstantsLib.sol\\\";\\nimport {RuleLib} from \\\"../library/RuleLib.sol\\\";\\n\\ncontract OREventBinding is IOREventBinding {\\n    function getSecurityCode(uint amount) public pure returns (uint) {\\n        return uint16(amount % ConstantsLib.EBC_AMOUNT_PARAMS_MODULUS);\\n    }\\n\\n    function splitSecurityCode(uint securityCode) public pure returns (uint[] memory) {\\n        uint[] memory splits = new uint[](3);\\n\\n        unchecked {\\n            splits[0] = (securityCode / 1000) % 10;\\n            splits[1] = (securityCode / 100) % 10;\\n            splits[2] = securityCode % 100;\\n        }\\n\\n        return splits;\\n    }\\n\\n    function getAmountParams(uint amount) public pure returns (AmountParams memory) {\\n        uint[] memory params = splitSecurityCode(getSecurityCode(amount));\\n\\n        require(params[0] > 0, \\\"P0Z\\\");\\n        require(params[1] > 0, \\\"P1Z\\\");\\n        require(params[2] > 0, \\\"P2Z\\\");\\n\\n        return AmountParams(params[0], params[1], params[2]);\\n    }\\n\\n    /**\\n     * Get intent\\n     * @param amount Source tx amount\\n     * @param ro Rule oneway\\n     */\\n    function getResponseIntent(uint amount, RuleLib.RuleOneway calldata ro) external pure returns (bytes memory) {\\n        uint securityCode = getSecurityCode(amount);\\n        require(securityCode > 0, \\\"SCZ\\\");\\n\\n        uint tradeAmount = amount - securityCode - ro.withholdingFee;\\n        require(tradeAmount >= ro.minPrice, \\\"MINOF\\\");\\n        require(tradeAmount <= ro.maxPrice, \\\"MAXOF\\\");\\n\\n        uint fee = (tradeAmount * ro.tradingFee) / ConstantsLib.RATIO_MULTIPLE;\\n        require(tradeAmount > fee, \\\"FOF\\\");\\n\\n        uint responseAmount = ((tradeAmount - fee) / ConstantsLib.EBC_AMOUNT_PARAMS_MODULUS) *\\n            ConstantsLib.EBC_AMOUNT_PARAMS_MODULUS; // Clear out empty digits\\n\\n        return abi.encode(responseAmount);\\n    }\\n\\n    /**\\n     * Get response amount from intent\\n     * @param intent Intent\\n     */\\n    function getResponseAmountFromIntent(bytes calldata intent) external pure returns (uint) {\\n        uint responseAmount = abi.decode(intent, (uint));\\n        return responseAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOREventBinding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {RuleLib} from \\\"../library/RuleLib.sol\\\";\\n\\ninterface IOREventBinding {\\n    struct AmountParams {\\n        uint dealerIndex;\\n        uint ebcIndex;\\n        uint chainIdIndex;\\n    }\\n\\n    function getSecurityCode(uint amount) external pure returns (uint);\\n\\n    function splitSecurityCode(uint securityCode) external pure returns (uint[] memory);\\n\\n    function getAmountParams(uint amount) external pure returns (AmountParams memory);\\n\\n    function getResponseIntent(uint amount, RuleLib.RuleOneway calldata ro) external pure returns (bytes memory);\\n\\n    function getResponseAmountFromIntent(bytes calldata intent) external pure returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/library/ConstantsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary ConstantsLib {\\n    uint constant RATIO_MULTIPLE = 1000000;\\n\\n    uint constant MIN_ENABLE_DELAY = 120; // Unit: second\\n\\n    uint constant DEALER_WITHDRAW_DELAY = 3600; // Unit: second\\n\\n    uint constant WITHDRAW_DURATION = 3360; // Unit: second\\n\\n    uint constant LOCK_DURATION = 240; // Unit: second\\n    // uint constant DEALER_WITHDRAW_DELAY = 30; // Unit: second for test off-chain\\n\\n    // uint constant WITHDRAW_DURATION = 300; // Unit: second for test off-chain\\n\\n    // uint constant LOCK_DURATION = 180; // Unit: second for test off-chain\\n\\n    uint constant EBC_AMOUNT_PARAMS_MODULUS = 10000;\\n}\\n\"\r\n    },\r\n    \"contracts/library/RuleLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {ConstantsLib} from \\\"./ConstantsLib.sol\\\";\\n\\nlibrary RuleLib {\\n    struct Rule {\\n        uint64 chainId0; // 59144\\n        uint64 chainId1; // 10\\n        uint8 status0;\\n        uint8 status1;\\n        uint token0;\\n        uint token1;\\n        uint128 minPrice0;\\n        uint128 minPrice1;\\n        uint128 maxPrice0;\\n        uint128 maxPrice1;\\n        uint128 withholdingFee0;\\n        uint128 withholdingFee1;\\n        uint32 tradingFee0;\\n        uint32 tradingFee1;\\n        uint32 responseTime0;\\n        uint32 responseTime1;\\n        uint32 compensationRatio0;\\n        uint32 compensationRatio1;\\n    }\\n\\n    struct RootWithVersion {\\n        bytes32 root;\\n        uint32 version;\\n    }\\n\\n    struct RuleOneway {\\n        uint64 sourceChainId;\\n        uint64 destChainId;\\n        uint8 status;\\n        uint sourceToken;\\n        uint destToken;\\n        uint128 minPrice;\\n        uint128 maxPrice;\\n        uint128 withholdingFee;\\n        uint32 tradingFee;\\n        uint32 responseTime;\\n        uint32 compensationRatio;\\n    }\\n\\n    function checkChainIds(uint64 chainId0, uint64 chainId1) internal pure {\\n        require(chainId0 < chainId1, \\\"C0LC1\\\");\\n    }\\n\\n    function checkWithholdingFees(uint128 withholdingFee0, uint128 withholdingFee1) internal pure {\\n        require(withholdingFee0 % ConstantsLib.EBC_AMOUNT_PARAMS_MODULUS == 0, \\\"WFI0\\\");\\n        require(withholdingFee1 % ConstantsLib.EBC_AMOUNT_PARAMS_MODULUS == 0, \\\"WFI1\\\");\\n    }\\n\\n    function convertToOneway(\\n        Rule memory rule,\\n        uint64 sourceChainId\\n    ) internal pure returns (RuleOneway memory ruleOneway) {\\n        require(sourceChainId == rule.chainId0 || sourceChainId == rule.chainId1, \\\"SCI\\\");\\n\\n        if (sourceChainId == rule.chainId0) {\\n            return\\n                RuleOneway(\\n                    rule.chainId0,\\n                    rule.chainId1,\\n                    rule.status0,\\n                    rule.token0,\\n                    rule.token1,\\n                    rule.minPrice0,\\n                    rule.maxPrice0,\\n                    rule.withholdingFee0,\\n                    rule.tradingFee0,\\n                    rule.responseTime0,\\n                    rule.compensationRatio0\\n                );\\n        } else {\\n            return\\n                RuleOneway(\\n                    rule.chainId1,\\n                    rule.chainId0,\\n                    rule.status1,\\n                    rule.token1,\\n                    rule.token0,\\n                    rule.minPrice1,\\n                    rule.maxPrice1,\\n                    rule.withholdingFee1,\\n                    rule.tradingFee1,\\n                    rule.responseTime1,\\n                    rule.compensationRatio1\\n                );\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dealerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ebcIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainIdIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct IOREventBinding.AmountParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"intent\",\"type\":\"bytes\"}],\"name\":\"getResponseAmountFromIntent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"sourceChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"destChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destToken\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withholdingFee\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"tradingFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"responseTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"compensationRatio\",\"type\":\"uint32\"}],\"internalType\":\"struct RuleLib.RuleOneway\",\"name\":\"ro\",\"type\":\"tuple\"}],\"name\":\"getResponseIntent\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSecurityCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"securityCode\",\"type\":\"uint256\"}],\"name\":\"splitSecurityCode\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "OREventBinding", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}