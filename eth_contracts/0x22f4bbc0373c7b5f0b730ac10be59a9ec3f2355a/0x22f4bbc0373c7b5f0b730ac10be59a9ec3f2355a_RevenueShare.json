{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract RevenueShare {\r\n    address public owner;\r\n    IERC20 public opmndToken;\r\n    mapping(address => uint256) public holderSnapshots; // Stores OPMND balance snapshot for addresses\r\n    uint256 public snapshotTotal; // Total OPMND in snapshot for eligible holders\r\n    bool public claimActive = false;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress) {\r\n        owner = msg.sender;\r\n        opmndToken = IERC20(_tokenAddress);\r\n    }\r\n\r\n    function changeOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function toggleClaimActive() external onlyOwner {\r\n        claimActive = !claimActive;\r\n    }\r\n\r\n    function uploadSnapshot(address[] calldata addresses, uint256[] calldata balances) external onlyOwner {\r\n        require(addresses.length == balances.length, \"Array length mismatch\");\r\n        uint256 total = 0;\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if (balances[i] >= 1000 * 10**18) { // Assuming OPMND has 18 decimals\r\n                holderSnapshots[addresses[i]] = balances[i];\r\n                total += balances[i];\r\n            }\r\n        }\r\n        snapshotTotal = total;\r\n    }\r\n\r\n    function claimReward() external {\r\n        require(claimActive, \"Claiming not active\");\r\n        require(holderSnapshots[msg.sender] > 0, \"No reward available\");\r\n        \r\n        uint256 reward = address(this).balance * holderSnapshots[msg.sender] / snapshotTotal;\r\n        payable(msg.sender).transfer(reward);\r\n        \r\n        // Reset holder's snapshot balance to prevent re-claiming\r\n        snapshotTotal -= holderSnapshots[msg.sender];\r\n        holderSnapshots[msg.sender] = 0;\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    // Fallback function to receive ETH\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opmndToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleClaimActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"uploadSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RevenueShare", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000087fd01183ba0235e1568995884a78f61081267ef", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50108c2afe6350b8ce06768eb95907154980f99d6578b61e47b808bfb642c559"}