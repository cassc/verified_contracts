{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\ninterface IVeBoost {\r\n    function approve(address, uint256) external;\r\n    function boost(address, uint256, uint256, address) external;\r\n    function delegable_balance(address) external returns (uint256);\r\n    function permit(address, address, uint256, uint256, uint8, bytes32, bytes32) external;\r\n    function received_balance(address) external returns (uint256);\r\n}\r\n\r\n// Original idea and credit:\r\n// VeSDTDelegation 0x6037Bb1BBa598bf88D816cAD90A28cC00fE3ff64 by AladdinDAO\r\n// Mostly forked from AladdinDAO, except that now there is a minimum period to delegate boost\r\n// and there are 2 tokens as reward rather than one.\r\ncontract VeBoostDelegationMultiRewards is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// Errors\r\n    error NOT_ALLOWED();\r\n    error NOT_STARTED_YET();\r\n    error TOO_LOW();\r\n    error TOKEN_NOT_SUPPORTED();\r\n    error ZERO_ADDRESS();\r\n\r\n    /// @notice Emitted when someone boost the `LockerProxy` contract.\r\n    /// @param _owner The address of veToken owner.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    event Boost(address indexed _owner, address indexed _recipient, uint256 _amount, uint256 _endtime);\r\n\r\n    /// @notice Emitted when someone checkpoint pending rewards.\r\n    /// @param _timestamp The timestamp in seconds when the checkpoint happened.\r\n    /// @param _rewardToken The token reward address\r\n    /// @param _amount The amount of pending rewards distributed.\r\n    event CheckpointReward(uint256 _timestamp, address _rewardToken, uint256 _amount);\r\n\r\n    /// @notice Emitted when user claim pending rewards\r\n    /// @param _owner The owner of the pool share.\r\n    /// @param _recipient The address of recipient who will receive the rewards.\r\n    /// @param _token The token claimed\r\n    /// @param _amount The amount of pending rewards claimed.\r\n    event Claim(address indexed _owner, address indexed _recipient, address indexed _token, uint256 _amount);\r\n\r\n    /// @notice Emitted when a new min boost duration has set\r\n    /// @param _duration Min boosting duration\r\n    event MinBoostDurationSet(uint256 _duration);\r\n\r\n    /// @dev The address of Token Vote-Escrowed Boost contract.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    address public constant veTOKEN_BOOST = 0x67F8DF125B796B05895a6dc8Ecf944b9556ecb0B; // BAL VeBoost\r\n\r\n    /// @notice Reward tokens\r\n    address public constant BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\r\n    address public constant SDT = 0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F;\r\n\r\n    uint256 private constant REWARD_CHECKPOINT_DELAY = 1 days;\r\n\r\n    /// @dev The number of seconds in a week.\r\n    uint256 private constant WEEK = 86400 * 7;\r\n\r\n    /// @dev The minimum boost duration\r\n    uint256 public minBoostDuration = 4 * WEEK;\r\n\r\n    /// @notice The name of the vault.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public constant name = \"Balancer veBPT Boost\";\r\n\r\n    /// @notice The symbol of the vault.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    string public constant symbol = \"veBPT-boost\";\r\n\r\n    /// @notice The decimal of the vault share.\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice The address of lockerProxy contract.\r\n    address public immutable lockerProxy;\r\n\r\n    /// @dev Compiler will pack this into single `uint256`.\r\n    /// The boost power can be represented as `bias - slope * (t - ts)` if the time `t` and `ts`\r\n    /// is in the same epoch. If epoch cross happens, we will change the corresponding value based\r\n    /// on slope changes.\r\n    struct Point {\r\n        // The bias for the linear function\r\n        uint112 bias;\r\n        // The slop for the linear function\r\n        uint112 slope;\r\n        // The start timestamp in seconds for current epoch.\r\n        // `uint32` should be enough for next 83 years.\r\n        uint32 ts;\r\n    }\r\n\r\n    /// @dev Compiler will pack this into single `uint256`.\r\n    struct RewardData {\r\n        // The current balance of reward token.\r\n        uint128 balance;\r\n        // The timestamp in second when last distribute happened.\r\n        uint128 timestamp;\r\n    }\r\n\r\n    /// @notice Mapping from user address to current updated point.\r\n    /// @dev The global information is stored in address(0)\r\n    mapping(address => Point) public boosts;\r\n\r\n    /// @notice Mapping from user address to boost endtime to slope changes.\r\n    /// @dev The global information is stored in address(0)\r\n    mapping(address => mapping(uint256 => uint256)) public slopeChanges;\r\n\r\n    /// @notice Mapping from user address to week timestamp to the boost power.\r\n    /// @dev The global information is stored in address(0)\r\n    mapping(address => mapping(uint256 => uint256)) public historyBoosts;\r\n\r\n    /// @notice Mapping from token -> week timestamp -> number of rewards accured during the week.\r\n    mapping(address => mapping(uint256 => uint256)) public weeklyRewards;\r\n\r\n    /// @notice Mapping from user address -> token address -> reward claimed week timestamp.\r\n    mapping(address => mapping(address => uint256)) public claimIndex;\r\n\r\n    /// @notice The lastest reward distribute information.\r\n    mapping(address => RewardData) public lastRewards;\r\n\r\n    /**\r\n     * Constructor *********************************\r\n     */\r\n\r\n    constructor(address _lockerProxy, uint256 _startTimestamp) {\r\n        lockerProxy = _lockerProxy;\r\n        boosts[address(0)] = Point({bias: 0, slope: 0, ts: uint32(block.timestamp)});\r\n        // BAL info\r\n        lastRewards[BAL] =\r\n            RewardData({balance: 0, timestamp: uint128(_startTimestamp)});\r\n        // SDT info\r\n        lastRewards[SDT] =\r\n            RewardData({balance: 0, timestamp: uint128(_startTimestamp)});\r\n    }\r\n\r\n    /**\r\n     * View Functions *********************************\r\n     */\r\n\r\n    /// @notice Return the current total pool shares.\r\n    function totalSupply() external view returns (uint256) {\r\n        Point memory p = _checkpointRead(address(0));\r\n        return p.bias - p.slope * (block.timestamp - p.ts);\r\n    }\r\n\r\n    /// @notice Return the current pool share for the user.\r\n    /// @param _user The address of the user to query.\r\n    function balanceOf(address _user) external view returns (uint256) {\r\n        if (_user == address(0)) return 0;\r\n\r\n        Point memory p = _checkpointRead(_user);\r\n        return p.bias - p.slope * (block.timestamp - p.ts);\r\n    }\r\n\r\n    /**\r\n     * Mutated Functions *********************************\r\n     */\r\n\r\n    /// @notice Boost some veToken to `LockerProxy` contract permited.\r\n    /// @dev Use `_amount=-1` to boost all available power.\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    /// @param _deadline The deadline in seconds for the permit signature.\r\n    /// @param _v The V part of the signature\r\n    /// @param _r The R part of the signature\r\n    /// @param _s The S part of the signature\r\n    function boostPermit(\r\n        uint256 _amount,\r\n        uint256 _endtime,\r\n        address _recipient,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external {\r\n        // set allowance\r\n        IVeBoost(veTOKEN_BOOST).permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\r\n\r\n        // do delegation\r\n        boost(_amount, _endtime, _recipient);\r\n    }\r\n\r\n    /// @notice Boost some veToken to `lockerProxy` contract.\r\n    /// @dev Use `_amount=-1` to boost all available power.\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    function boost(uint256 _amount, uint256 _endtime, address _recipient) public {\r\n        if (_recipient == address(0)) revert ZERO_ADDRESS();\r\n        if (_amount == type(uint256).max) {\r\n            _amount = IVeBoost(veTOKEN_BOOST).delegable_balance(msg.sender);\r\n        }\r\n\r\n        // check if the _endTime is at least minBoostDuration\r\n        uint256 currentWeek = block.timestamp / WEEK * WEEK;\r\n        if (_endtime < currentWeek + minBoostDuration) revert TOO_LOW();\r\n\r\n        IVeBoost(veTOKEN_BOOST).boost(lockerProxy, _amount, _endtime, msg.sender);\r\n\r\n        _boost(_amount, _endtime, _recipient);\r\n    }\r\n\r\n    /// @notice Claim rewards for some user.\r\n    /// @param _user The address of user to claim.\r\n    /// @param _recipient The address of recipient who will receive the reward.\r\n    /// @param _token The address of the token to claim\r\n    function claim(address _user, address _recipient, address _token) public {\r\n        if (_user != msg.sender) {\r\n            if (_recipient != _user) revert NOT_ALLOWED();\r\n        }\r\n        if (_user == address(0)) revert ZERO_ADDRESS();\r\n        if (BAL != _token && SDT != _token) revert TOKEN_NOT_SUPPORTED();\r\n\r\n        // during claiming, update the point if 1 day pasts, since we will not use the latest point\r\n        Point memory p = boosts[address(0)];\r\n        if (block.timestamp >= p.ts + REWARD_CHECKPOINT_DELAY) {\r\n            _checkpointWrite(address(0), p);\r\n            boosts[address(0)] = p;\r\n        }\r\n\r\n        // during claiming, update the point if 1 day pasts, since we will not use the latest point\r\n        p = boosts[_user];\r\n        if (block.timestamp >= p.ts + REWARD_CHECKPOINT_DELAY) {\r\n            _checkpointWrite(_user, p);\r\n            boosts[_user] = p;\r\n        }\r\n\r\n        // checkpoint weekly reward\r\n        _checkpointReward(_token, false);\r\n\r\n        // claim reward\r\n        _claim(_user, _recipient, _token);\r\n    }\r\n\r\n    /// @notice Claim all rewards for some user.\r\n    /// @param _user The address of user to claim.\r\n    /// @param _recipient The address of recipient who will receive the reward.\r\n    function claimAll(address _user, address _recipient) external {\r\n        claim(_user, _recipient, BAL);\r\n        claim(_user, _recipient, SDT);\r\n    }\r\n\r\n    /// @notice Force checkpoint reward status for one token.\r\n    /// @param _token reward token to checkpoint\r\n    function checkpointReward(address _token) external {\r\n        if (_token != BAL && _token != SDT) revert TOKEN_NOT_SUPPORTED();\r\n        _checkpointReward(_token, true);\r\n    }\r\n\r\n    /// @notice Force checkpoint reward status for all reward tokens.\r\n    function checkpointRewards() external {\r\n        _checkpointReward(BAL, true);\r\n        _checkpointReward(SDT, true);\r\n    }\r\n\r\n    /// @notice Force checkpoint user information.\r\n    /// @dev User `_user=address(0)` to checkpoint total supply.\r\n    /// @param _user The address of user to checkpoint.\r\n    function checkpoint(address _user) external {\r\n        Point memory p = boosts[_user];\r\n        _checkpointWrite(_user, p);\r\n        boosts[_user] = p;\r\n    }\r\n\r\n    /// @notice Set the minimum duration for delegate boost\r\n    /// @param _duration minimum boosting duration\r\n    function setMinBoostDuration(uint256 _duration) external onlyOwner {\r\n        minBoostDuration = _duration;\r\n        emit MinBoostDurationSet(_duration);\r\n    }\r\n\r\n    /**\r\n     * Internal Functions *********************************\r\n     */\r\n\r\n    /// @dev Internal function to update boost records\r\n    /// @param _amount The amount of veToken to boost.\r\n    /// @param _endtime The timestamp in seconds when the boost will end.\r\n    /// @param _recipient The address of recipient who will receive the pool share.\r\n    function _boost(uint256 _amount, uint256 _endtime, address _recipient) internal {\r\n        if (claimIndex[_recipient][BAL] == 0) {\r\n            claimIndex[_recipient][BAL] = (block.timestamp / WEEK) * WEEK;\r\n            claimIndex[_recipient][SDT] = (block.timestamp / WEEK) * WEEK;\r\n        }\r\n\r\n        // _endtime should always be multiple of WEEK\r\n        uint256 _slope = _amount / (_endtime - block.timestamp);\r\n        uint256 _bias = _slope * (_endtime - block.timestamp);\r\n\r\n        // update global state\r\n        _update(_bias, _slope, _endtime, address(0));\r\n\r\n        // update user state\r\n        _update(_bias, _slope, _endtime, _recipient);\r\n\r\n        emit Boost(msg.sender, _recipient, _amount, _endtime);\r\n    }\r\n\r\n    /// @dev Internal function to update veBoost point\r\n    /// @param _bias The bias delta of the point.\r\n    /// @param _slope The slope delta of the point.\r\n    /// @param _endtime The endtime in seconds for the boost.\r\n    /// @param _user The address of user to update.\r\n    function _update(uint256 _bias, uint256 _slope, uint256 _endtime, address _user) internal {\r\n        Point memory p = boosts[_user];\r\n        _checkpointWrite(_user, p);\r\n        p.bias += uint112(_bias);\r\n        p.slope += uint112(_slope);\r\n\r\n        slopeChanges[_user][_endtime] += _slope;\r\n        boosts[_user] = p;\r\n\r\n        if (p.ts % WEEK == 0) {\r\n            historyBoosts[_user][p.ts] = p.bias;\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to claim user rewards.\r\n    /// @param _user The address of user to claim.\r\n    /// @param _recipient The address of recipient who will receive the reward.\r\n    /// @return The amount of reward claimed.\r\n    function _claim(address _user, address _recipient, address _token) internal returns (uint256) {\r\n        uint256 _index = claimIndex[_user][_token];\r\n        uint256 _lastTime = lastRewards[_token].timestamp;\r\n        uint256 _amount = 0;\r\n        uint256 _thisWeek = (block.timestamp / WEEK) * WEEK;\r\n\r\n        // claim at most 50 weeks in one tx\r\n        for (uint256 i = 0; i < 50;) {\r\n            // we don't claim rewards from current week.\r\n            if (_index >= _lastTime || _index >= _thisWeek) break;\r\n            uint256 _totalPower = historyBoosts[address(0)][_index];\r\n            uint256 _userPower = historyBoosts[_user][_index];\r\n            if (_totalPower != 0 && _userPower != 0) {\r\n                _amount += (_userPower * weeklyRewards[_token][_index]) / _totalPower;\r\n            }\r\n            _index += WEEK;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        claimIndex[_user][_token] = _index;\r\n\r\n        if (_amount > 0) {\r\n            lastRewards[_token].balance -= uint128(_amount);\r\n            IERC20(_token).safeTransfer(_recipient, _amount);\r\n        }\r\n\r\n        emit Claim(_user, _recipient, _token, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    /// @dev Internal function to read checkpoint result without change state.\r\n    /// @param _user The address of user to checkpoint.\r\n    /// @return The result point for the user.\r\n    function _checkpointRead(address _user) internal view returns (Point memory) {\r\n        Point memory p = boosts[_user];\r\n\r\n        if (p.ts == 0) {\r\n            p.ts = uint32(block.timestamp);\r\n        }\r\n        if (p.ts == block.timestamp) {\r\n            return p;\r\n        }\r\n\r\n        uint256 ts = (p.ts / WEEK) * WEEK;\r\n        for (uint256 i = 0; i < 255;) {\r\n            ts += WEEK;\r\n            uint256 _slopeChange = 0;\r\n            if (ts > block.timestamp) {\r\n                ts = block.timestamp;\r\n            } else {\r\n                _slopeChange = slopeChanges[_user][ts];\r\n            }\r\n\r\n            p.bias -= p.slope * uint112(ts - p.ts);\r\n            p.slope -= uint112(_slopeChange);\r\n            p.ts = uint32(ts);\r\n\r\n            if (p.ts == block.timestamp) {\r\n                break;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /// @dev Internal function to read checkpoint result and change state.\r\n    /// @param _user The address of user to checkpoint.\r\n    function _checkpointWrite(address _user, Point memory p) internal {\r\n        if (p.ts == 0) p.ts = uint32(block.timestamp);\r\n        if (p.ts == block.timestamp) return;\r\n\r\n        uint256 ts = (p.ts / WEEK) * WEEK;\r\n        for (uint256 i = 0; i < 255;) {\r\n            ts += WEEK;\r\n            uint256 _slopeChange = 0;\r\n            if (ts > block.timestamp) {\r\n                ts = block.timestamp;\r\n            } else {\r\n                _slopeChange = slopeChanges[_user][ts];\r\n            }\r\n\r\n            p.bias -= p.slope * uint112(ts - p.ts);\r\n            p.slope -= uint112(_slopeChange);\r\n            p.ts = uint32(ts);\r\n\r\n            if (ts % WEEK == 0) {\r\n                historyBoosts[_user][ts] = p.bias;\r\n            }\r\n\r\n            if (p.ts == block.timestamp) {\r\n                break;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to checkpoint the rewards\r\n    /// @param _force Whether to do force checkpoint.\r\n    function _checkpointReward(address _token, bool _force) internal {\r\n        uint256 _lastTime = lastRewards[_token].timestamp;\r\n        // We only claim in the next week, so the update can delay 1 day.\r\n        if (!_force && block.timestamp <= _lastTime + REWARD_CHECKPOINT_DELAY) return;\r\n        if (block.timestamp < _lastTime) revert NOT_STARTED_YET();\r\n\r\n        // update timestamp\r\n        uint256 _sinceLast = block.timestamp - _lastTime;\r\n        lastRewards[_token].timestamp = uint128(block.timestamp);\r\n\r\n        // update balance\r\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\r\n        uint256 _amount = _balance - lastRewards[_token].balance;\r\n        lastRewards[_token].balance = uint128(_balance);\r\n\r\n        if (_amount > 0) {\r\n            uint256 _thisWeek = (_lastTime / WEEK) * WEEK;\r\n            // 20 should be enough, since we are doing checkpoint every week.\r\n            for (uint256 i; i < 20;) {\r\n                uint256 _nextWeek = _thisWeek + WEEK;\r\n                if (block.timestamp < _nextWeek) {\r\n                    if (_sinceLast == 0) {\r\n                        weeklyRewards[_token][_thisWeek] += _amount;\r\n                    } else {\r\n                        weeklyRewards[_token][_thisWeek] += (_amount * (block.timestamp - _lastTime)) / _sinceLast;\r\n                    }\r\n                    break;\r\n                } else {\r\n                    if (_sinceLast == 0 && _nextWeek == _lastTime) {\r\n                        weeklyRewards[_token][_thisWeek] += _amount;\r\n                    } else {\r\n                        weeklyRewards[_token][_thisWeek] += (_amount * (_nextWeek - _lastTime)) / _sinceLast;\r\n                    }\r\n                }\r\n                _lastTime = _nextWeek;\r\n                _thisWeek = _nextWeek;\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        emit CheckpointReward(block.timestamp, _token, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_STARTED_YET\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOKEN_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOO_LOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CheckpointReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"MinBoostDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"boostPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boosts\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"bias\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"slope\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"ts\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"checkpointReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyBoosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBoostDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setMinBoostDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veTOKEN_BOOST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VeBoostDelegationMultiRewards", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ea79d1a83da6db43a85942767c389fe0acf336a50000000000000000000000000000000000000000000000000000000065024d00", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dde0c0d6ad255497ebde2fdae955ea1681107d367afd024e140996bf5df7f6ba"}