{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// website:https://www.berc20.cash/\r\n\r\n//'########::'########:'########:::'######:::'#######::::'#####:::\r\n//##.... ##: ##.....:: ##.... ##:'##... ##:'##.... ##::'##.. ##::\r\n//##:::: ##: ##::::::: ##:::: ##: ##:::..::..::::: ##:'##:::: ##:\r\n//########:: ######::: ########:: ##::::::::'#######:: ##:::: ##:\r\n//##.... ##: ##...:::: ##.. ##::: ##:::::::'##:::::::: ##:::: ##:\r\n//##:::: ##: ##::::::: ##::. ##:: ##::: ##: ##::::::::. ##:: ##::\r\n//########:: ########: ##:::. ##:. ######:: #########::. #####:::\r\n//........:::........::..:::::..:::......:::.........::::.....::::\r\npragma solidity ^0.8.9;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary MerkleProof {\r\n\r\n    error MerkleProofInvalidMultiproof();\r\n\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        if (leavesLen + proof.length - 1 != totalHashes) {\r\n            revert MerkleProofInvalidMultiproof();\r\n        }\r\n\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        if (leavesLen + proof.length - 1 != totalHashes) {\r\n            revert MerkleProofInvalidMultiproof();\r\n        }\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary Counters {\r\n    struct Counter {\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 amount) external;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Enumerable {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ninterface IERC1155 {\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n}\r\n\r\ninterface BercAirdrop {\r\n    function createAirdrop(address depositContract,address airDropContract, uint256 _airDropNums, uint256 depositeCycle, uint256 claimCycle, uint256 _minDeposit) external;\r\n}\r\n\r\ninterface Berc20Store {\r\n    function createTokenInfo(address tokenAddress,string memory name,string memory symbol,uint256 totalSupply,\r\n        uint256 maxMintCount,\r\n        uint256 maxMintPerAddress,\r\n        uint256 mintPrice,\r\n        address creator,\r\n        bytes32 wlRoot,\r\n        uint256[] memory params,\r\n        address[] memory authContracts\r\n        ) external;\r\n}\r\n\r\ncontract BlackErc20 is ERC20, Ownable {\r\n\r\n    uint256 private constant DECIMAL_MULTIPLIER = 1e18;\r\n    address private  blackHole = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    uint256 public _maxMintCount;\r\n    uint256 public _mintPrice;\r\n    uint256 public _maxMintPerAddress;\r\n\r\n    mapping(address => uint256) public _mintCounts;\r\n    uint256 public _mintedCounts;\r\n\r\n    address public wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    //address public wethAddress = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;\r\n    address public lpContract;\r\n    address public _devAddress;\r\n    address public _deplyAddress;\r\n\r\n    uint256 public _maxPro = 0;\r\n\r\n    uint256 public deployReserveTokenPro = 0;\r\n    uint256 public donateReserveTokenPro = 0;\r\n    uint256 public airDropTokenPro = 0;\r\n\r\n    uint256 public tokenLockDays = 0;\r\n    uint256 public deployTime;\r\n    uint256 public tokenUnlockCounts;\r\n    uint256 public hadTokenUnlockCounts=0;\r\n    uint256 public totalTokensLocked;\r\n    uint public totalTokensClaimed;\r\n\r\n\r\n    uint256 public deployReserveEthPro = 0;\r\n    uint256 public donateEthPro = 0;\r\n\r\n    uint256 public wlMintCounts = 0;\r\n    uint256 public wlMintedCounts = 0;\r\n    uint256 public wlMintedEndTime;\r\n\r\n\r\n    uint256 public mintStartTime=0;\r\n    uint256 public mintEndTime;\r\n\r\n    uint256 public burnAddressPer=0;\r\n    uint256 public burnBlockPer=0;\r\n    uint256 public burnAirDropPer=0;\r\n\r\n    address public  burnAddress;\r\n    address public  airDropAddress;\r\n\r\n\r\n    bytes32 public wlRoot;\r\n\r\n    uint256 public validateNftNumber=0;\r\n\r\n    bool public deployHadClaimEth;\r\n    bool public devHadClaimEth;\r\n    uint256 public  remainBalance=0;\r\n\r\n    mapping(uint256 => bool) public tokenExists;\r\n\r\n    enum ContractType {ERC721,ERC20,ERC1155}\r\n\r\n    struct ContractAuth {\r\n        ContractType contractType;\r\n        address contractAddress;\r\n        uint256 tokenCount;\r\n    }\r\n\r\n    ContractAuth[] public contractAuths;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 totalSupply,\r\n        uint256 maxMintCount,\r\n        uint256 maxMintPerAddress,\r\n        uint256 mintPrice,\r\n        address factoryContract,\r\n        address devAddress,\r\n        address deplyAddress,\r\n        address _airDropAddress,\r\n        uint256[] memory params\r\n    ) ERC20(symbol,name) {\r\n        _maxMintCount = maxMintCount;\r\n        _mintPrice = mintPrice;\r\n        _devAddress = devAddress;\r\n        _deplyAddress = deplyAddress;\r\n        _maxMintPerAddress = maxMintPerAddress;\r\n\r\n        deployReserveTokenPro = params[0];\r\n        donateReserveTokenPro = params[2];\r\n        wlMintCounts = params[3];\r\n        validateNftNumber = params[13];\r\n\r\n        tokenLockDays = params[7];\r\n        if (tokenLockDays>0){\r\n            require(params[6]>0&&params[6]<tokenLockDays,\"tokenUnlockCounts error\");\r\n            tokenUnlockCounts = params[6];\r\n        }\r\n        totalTokensLocked = totalSupply*deployReserveTokenPro/1000;\r\n        deployTime = block.timestamp;\r\n\r\n\r\n        deployReserveEthPro = params[4];\r\n        donateEthPro = params[5];\r\n\r\n        burnAddressPer = params[15];\r\n        burnBlockPer = params[17];\r\n        burnAirDropPer = params[18];\r\n\r\n        if(params[1]>0){\r\n            airDropTokenPro = params[1];\r\n            _mint(_airDropAddress, totalSupply*airDropTokenPro/1000);\r\n        }\r\n\r\n        airDropAddress =_airDropAddress;\r\n\r\n        _maxPro = 1000000-(10+params[0]*1000+params[1]*1000+params[2]*1000);\r\n        _mint(factoryContract, totalSupply*1/100000);\r\n\r\n        if(params[8]>0){\r\n            mintStartTime = params[8];\r\n        }\r\n        if(params[9]>0){\r\n            mintEndTime = params[9];\r\n        }\r\n        if(params[16]>0){\r\n            wlMintedEndTime = params[16];\r\n        }\r\n\r\n        if(donateReserveTokenPro>0){\r\n            _mint(devAddress, totalSupply*donateReserveTokenPro*1000/1000000);\r\n        }\r\n\r\n        if(deployReserveTokenPro>0&&params[7]==0){\r\n            _mint(deplyAddress, totalSupply*deployReserveTokenPro*1000/1000000);\r\n        }\r\n        _mint(address(this), totalSupply*_maxPro/1000000);\r\n    }\r\n\r\n    function mintProof(uint256 mintCount,address receiveAds,bytes32[] memory proof) public  payable {\r\n        require(!isContract(msg.sender),\"not supper contract mint\");\r\n        require(mintCount > 0, \"Invalid mint count\");\r\n        require(mintCount <= _maxMintPerAddress, \"Exceeded maximum mint count per address\");\r\n        require(msg.value >= mintCount*_mintPrice, \"illegal price\");\r\n        require(_mintCounts[msg.sender]+mintCount <= _maxMintPerAddress, \"over limit\");\r\n        receiveAds = msg.sender;\r\n\r\n        if(isZero(wlRoot)){\r\n            require(block.timestamp >= mintStartTime, \"Minting has not started yet\");\r\n            require(block.timestamp <= mintEndTime, \"Minting has ended\");\r\n        }else {\r\n            if (block.timestamp<wlMintedEndTime){\r\n                require(wlMintedCounts+mintCount<=wlMintCounts,\"over limit\");\r\n                bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n                require(MerkleProof.verify(proof, wlRoot, leaf),\"Not In Wl\");\r\n                wlMintedCounts += mintCount;\r\n            }\r\n        }\r\n\r\n        if (block.timestamp<wlMintedEndTime){\r\n            require(_mintedCounts-wlMintedCounts+mintCount <= (_maxMintCount - wlMintedCounts), \"illegal mintAmount\");\r\n        }\r\n\r\n        IWETH(wethAddress).deposit{value: msg.value*(1000-deployReserveEthPro-donateEthPro)/1000}();\r\n        IWETH(wethAddress).approve(lpContract, msg.value*(1000-deployReserveEthPro-donateEthPro)/1000);\r\n        IWETH(wethAddress).transferFrom(address(this), lpContract, msg.value*(1000-deployReserveEthPro-donateEthPro)/1000); \r\n\r\n        uint256 mintAmount = (totalSupply() * _maxPro * mintCount) / (_maxMintCount * 2000000);\r\n\r\n        for (uint256 i = 0; i < contractAuths.length; i++) {\r\n            if (contractAuths[i].contractType == ContractType.ERC721) {\r\n                if(validateNftNumber==1){\r\n                    IERC721Enumerable eRC721Enumerable = IERC721Enumerable(contractAuths[i].contractAddress);\r\n                    uint256 tokenId = eRC721Enumerable.tokenOfOwnerByIndex(msg.sender, 0);\r\n                    require(!tokenExists[tokenId],\"had used!\");\r\n                    tokenExists[tokenId] = true;\r\n                }\r\n                uint256 tokenCount = getERC721TokenCount(contractAuths[i].contractAddress);\r\n                require(tokenCount >= contractAuths[i].tokenCount, \"Insufficient ERC721 tokens\");\r\n            } else if (contractAuths[i].contractType == ContractType.ERC20) {\r\n                uint256 tokenCount = getERC20TokenCount(contractAuths[i].contractAddress);\r\n                require(tokenCount >= contractAuths[i].tokenCount, \"Insufficient ERC20 tokens\");\r\n            } else if (contractAuths[i].contractType == ContractType.ERC1155) {\r\n                uint256 tokenCount = getERC1155TokenCount(contractAuths[i].contractAddress, 0);\r\n                require(tokenCount >= contractAuths[i].tokenCount, \"Insufficient ERC1155 tokens\");\r\n            }\r\n        }\r\n\r\n        // Transfer minted tokens from contract to the sender and blackAddress\r\n        _transfer(address(this), receiveAds, mintAmount);\r\n        _transfer(address(this), lpContract, mintAmount);\r\n        IUniswapV2Pair(lpContract).sync();\r\n\r\n        _mintCounts[msg.sender] += mintCount;\r\n        _mintedCounts += mintCount;\r\n    }\r\n\r\n    function mint(uint256 mintCount,address receiveAds) external payable {\r\n        bytes32[] memory proof = new bytes32[](0);\r\n        mintProof(mintCount,receiveAds,proof);\r\n    }\r\n\r\n    function isContract(address addr) private view returns (bool) {\r\n        uint256 codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n\r\n    function setContractAuth(uint256[] memory params, address[] memory authContracts) external onlyOwner {\r\n        delete contractAuths;\r\n        if (authContracts[0] != address(0)) {\r\n            contractAuths.push(ContractAuth({\r\n                contractType: ContractType.ERC721,\r\n                contractAddress: authContracts[0],\r\n                tokenCount: 1\r\n            }));\r\n        }\r\n        if (authContracts[1] != address(0)) {\r\n            contractAuths.push(ContractAuth({\r\n                contractType: ContractType.ERC20,\r\n                contractAddress: authContracts[1],\r\n                tokenCount: params[14]\r\n            }));\r\n        }\r\n\r\n        if (authContracts[2] != address(0)) {\r\n            contractAuths.push(ContractAuth({\r\n                contractType: ContractType.ERC1155,\r\n                contractAddress: authContracts[2],\r\n                tokenCount: 1\r\n            }));\r\n        }\r\n        if (authContracts[3] != address(0)) {\r\n           burnAddress = authContracts[3];\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 burnAddressAmount = amount * burnAddressPer / 1000;\r\n        uint256 burnBlockAmount = amount * burnBlockPer / 1000;\r\n        uint256 burnAirDropAmount = amount * burnAirDropPer / 1000;\r\n        uint256 transferAmount = amount - burnAddressAmount -burnBlockAmount-burnAirDropAmount;\r\n        super._transfer(msg.sender, recipient, transferAmount);\r\n        if(burnAddressAmount>0){\r\n            super._transfer(msg.sender, burnAddress, burnAddressAmount);\r\n        }\r\n        if(burnBlockAmount>0){\r\n            super._transfer(msg.sender, blackHole, burnBlockAmount);\r\n        }\r\n        if(burnAirDropAmount>0){\r\n            super._transfer(msg.sender, airDropAddress, burnAirDropAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 burnAddressAmount = amount * burnAddressPer / 1000;\r\n        uint256 burnBlockAmount = amount * burnBlockPer / 1000;\r\n        uint256 burnAirDropAmount = amount * burnAirDropPer / 1000;\r\n        uint256 transferAmount = amount - burnAddressAmount -burnBlockAmount-burnAirDropAmount;        \r\n        super._transfer(sender, recipient, transferAmount);\r\n        if(burnAddressAmount>0){\r\n            super._transfer(sender, burnAddress, burnAddressAmount);\r\n        }\r\n        if(burnBlockAmount>0){\r\n            super._transfer(sender, blackHole, burnBlockAmount);\r\n        }\r\n        if(burnAirDropAmount>0){\r\n            super._transfer(sender, airDropAddress, burnAirDropAmount);\r\n        }\r\n        uint256 currentAllowance = allowance(sender, msg.sender);\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        super._approve(sender, msg.sender, currentAllowance - amount);\r\n         return true;\r\n    }\r\n\r\n\r\n    function setLPContract(address lp) external onlyOwner {\r\n        lpContract = lp;\r\n    }\r\n\r\n    function setWlRoot(bytes32 root) external onlyOwner {\r\n        wlRoot = root;\r\n    }\r\n\r\n    function devAwardEth() external {\r\n        require(_mintedCounts==_maxMintCount,\"waiting mint finish\");\r\n        require(!devHadClaimEth,\"had claimed\");\r\n        require(msg.sender==_devAddress,\"only dev!\");\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"Contract has no ETH balance.\");\r\n        address payable sender = payable(_devAddress);\r\n        uint256 devAmount = donateEthPro*balance/(deployReserveEthPro+donateEthPro);\r\n        if(remainBalance==0){\r\n            sender.transfer(devAmount);\r\n            remainBalance = balance-devAmount;\r\n        }else{\r\n            sender.transfer(remainBalance);\r\n        }\r\n        devHadClaimEth = true;\r\n    }\r\n\r\n    function deployAwardEth() external {\r\n        require(_mintedCounts==_maxMintCount,\"waiting mint finish\");\r\n        require(!deployHadClaimEth,\"had claimed\");\r\n        require(msg.sender==_deplyAddress,\"only deply!\");\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"Contract has no ETH balance.\");\r\n        address payable sender = payable(_deplyAddress);\r\n        uint256 deplyAmount = deployReserveEthPro*balance/(deployReserveEthPro+donateEthPro);\r\n        if(remainBalance==0){\r\n            sender.transfer(deplyAmount);\r\n            remainBalance = balance-deplyAmount;\r\n        }else{\r\n            sender.transfer(remainBalance);\r\n        }\r\n        deployHadClaimEth = true;\r\n    }\r\n\r\n    function deployAwardToken() external {\r\n        require(_mintedCounts==_maxMintCount,\"waiting mint finish\");\r\n        require(msg.sender==_deplyAddress,\"not deplyer\");\r\n        require(totalTokensClaimed <= totalTokensLocked, \"All tokens have been claimed.\");\r\n        uint256 currentTimestamp = block.timestamp;\r\n        uint256 lockEndTime = deployTime + (tokenLockDays * 86400);\r\n        uint256 unlockTimes = (lockEndTime - currentTimestamp) / ((tokenLockDays / tokenUnlockCounts) * 86400) - hadTokenUnlockCounts;\r\n        uint256 claimableTokens;\r\n        IERC20 token2 = IERC20(address(this));\r\n        if (unlockTimes >= tokenUnlockCounts) {\r\n            claimableTokens = token2.balanceOf(address(this));\r\n            hadTokenUnlockCounts = tokenUnlockCounts;\r\n        } else {\r\n            require(unlockTimes>0,\"not have unlock times!\");\r\n            claimableTokens = unlockTimes * (totalTokensLocked/tokenUnlockCounts);\r\n            hadTokenUnlockCounts += unlockTimes;\r\n        }\r\n        token2.transfer(msg.sender, claimableTokens);\r\n    }\r\n\r\n\r\n    function getERC721TokenCount(address contractAddress) internal view returns (uint256) {\r\n        IERC721 erc721Contract = IERC721(contractAddress);\r\n        return erc721Contract.balanceOf(msg.sender);\r\n    }\r\n\r\n    function getERC20TokenCount(address contractAddress) internal view returns (uint256) {\r\n        IERC20 erc20Contract = IERC20(contractAddress);\r\n        return erc20Contract.balanceOf(msg.sender);\r\n    }\r\n\r\n    function getERC1155TokenCount(address contractAddress, uint256 tokenId) internal view returns (uint256) {\r\n        IERC1155 erc1155Contract = IERC1155(contractAddress);\r\n        return erc1155Contract.balanceOf(msg.sender, tokenId);\r\n    }\r\n\r\n    function getMintedCounts() external view returns (uint256) {\r\n        return _mintedCounts;\r\n    }\r\n\r\n    function getContractAuthsLength() public view returns (uint256) {\r\n        return contractAuths.length;\r\n    }\r\n\r\n    function getAllContractAuths() public view returns (ContractAuth[] memory) {\r\n        return contractAuths;\r\n    }\r\n\r\n    function isZero(bytes32 value) private  pure returns (bool) {\r\n        return value == 0x0000000000000000000000000000000000000000000000000000000000000000;\r\n    }\r\n\r\n    function getAllContractTypes() public view returns (uint256[] memory) {\r\n        uint256[] memory contractTypes = new uint256[](contractAuths.length);\r\n        if (contractAuths.length==0){\r\n            return new uint256[](0);\r\n        }\r\n        for (uint256 i = 0; i < contractAuths.length; i++) {\r\n            contractTypes[i] = uint256(contractAuths[i].contractType);\r\n        }\r\n        return contractTypes;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factoryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deplyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airDropAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_deplyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxMintPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxPro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_mintCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropTokenPro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddressPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAirDropPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBlockPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractAuths\",\"outputs\":[{\"internalType\":\"enum BlackErc20.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployAwardEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployAwardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployHadClaimEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployReserveEthPro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployReserveTokenPro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAwardEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devHadClaimEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateEthPro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donateReserveTokenPro\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContractAuths\",\"outputs\":[{\"components\":[{\"internalType\":\"enum BlackErc20.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"internalType\":\"struct BlackErc20.ContractAuth[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContractTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAuthsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hadTokenUnlockCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiveAds\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiveAds\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"authContracts\",\"type\":\"address[]\"}],\"name\":\"setContractAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"setLPContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setWlRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUnlockCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateNftNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintedCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintedEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BlackErc20", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000115eec47f6cf7e350000000000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000006696f0eeff4af5409b99047053d6f714b7a2af3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e80e91f6fbdfcb7ee5fc4e0afe39a68306adc94000000000000000000000000ec2034230a3710a6eb34be818276b8c7ceb254bd00000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000064265726332300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f466169722062657263323020706f7700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000649f851c000000000000000000000000000000000000000000000000000000006c25a49cersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a41dfbf6e8087331afa4f1029281ed9f3f4b8689098f31ab40fcf7db21cbc881"}