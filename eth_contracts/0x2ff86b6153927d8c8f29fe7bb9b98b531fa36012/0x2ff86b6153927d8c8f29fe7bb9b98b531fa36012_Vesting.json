{"SourceCode": "// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/VestingLanify.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n// OpenZeppelin dependencies\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Vesting\r\n */\r\ncontract Vesting is Ownable, ReentrancyGuard {\r\n    struct VestingSchedule {\r\n        // beneficiary of tokens after they are released\r\n        address beneficiary;\r\n        // cliff time of the vesting start in seconds since the UNIX epoch\r\n        uint256 cliff;\r\n        // start time of the vesting period in seconds since the UNIX epoch\r\n        uint256 start;\r\n        // start time of TGE\r\n        uint256 launch;\r\n        // duration of the vesting period in seconds\r\n        uint256 duration;\r\n        // duration of a slice period for the vesting in seconds\r\n        uint256 slicePeriodSeconds;\r\n        // whether or not the vesting is revocable\r\n        bool revocable;\r\n        // total amount of tokens to be released at the end of the vesting\r\n        uint256 amountTotal;\r\n        // percentage to be released at TGE\r\n        uint256 launchPercent;\r\n        // amount of tokens released\r\n        uint256 released;\r\n        // whether or not the vesting has been revoked\r\n        bool revoked;\r\n    }\r\n\r\n    IERC20 public immutable token;\r\n\r\n    bytes32[] private vestingSchedulesIds;\r\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\r\n    uint256 private vestingSchedulesTotalAmount;\r\n    mapping(address => uint256) private holdersVestingCount;\r\n\r\n    /**\r\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\r\n     */\r\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\r\n        require(!vestingSchedules[vestingScheduleId].revoked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a vesting contract.\r\n     * @param token_ address of the ERC20 token contract\r\n     */\r\n    constructor(address token_) Ownable(msg.sender) {\r\n        // Check that the token address is not 0x0.\r\n        require(token_ != address(0x0), \"Vesting: invalid token address\");\r\n        // Set the token address.\r\n        token = IERC20(token_);\r\n    }\r\n\r\n    /**\r\n     * @dev This function is called for plain Ether transfers, i.e. for every call with empty calldata.\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Fallback function is executed if none of the other functions match the function\r\n     * identifier or no data was provided with the function call.\r\n     */\r\n    fallback() external payable {}\r\n\r\n    /**\r\n     * @notice Creates a new vesting schedule for a beneficiary.\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param _start start time of the vesting period\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\r\n     * @param _revocable whether the vesting is revocable or not\r\n     * @param _amount total amount of tokens to be released at the end of the vesting\r\n     */\r\n    function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _launch,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        uint256 _launchPercent,\r\n        bool _revocable,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(\r\n            getWithdrawableAmount() >= _amount,\r\n            \"Vesting: cannot create vesting schedule because not sufficient tokens\"\r\n        );\r\n        require(_duration > 0, \"Vesting: duration must be > 0\");\r\n        require(_launch > 0, \"Vesting: launch must be > 0\");\r\n        require(_amount > 0, \"Vesting: amount must be > 0\");\r\n        require(\r\n            _slicePeriodSeconds >= 1,\r\n            \"Vesting: slicePeriodSeconds must be >= 1\"\r\n        );\r\n        require(_duration >= _cliff, \"Vesting: duration must be >= cliff\");\r\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(\r\n            _beneficiary\r\n        );\r\n        uint256 cliff = _start + _cliff;\r\n        uint256 launch = _start + _launch;\r\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\r\n            _beneficiary,\r\n            cliff,\r\n            _start,\r\n            launch,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _revocable,\r\n            _amount,\r\n            _launchPercent,\r\n            0,\r\n            false\r\n        );\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\r\n        vestingSchedulesIds.push(vestingScheduleId);\r\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\r\n        holdersVestingCount[_beneficiary] = currentVestingCount + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes the vesting schedule for given identifier.\r\n     * @param vestingScheduleId the vesting schedule identifier\r\n     */\r\n    function revoke(\r\n        bytes32 vestingScheduleId\r\n    ) external onlyOwner onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[\r\n            vestingScheduleId\r\n        ];\r\n        require(vestingSchedule.revocable, \"Vesting: vesting is not revocable\");\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        if (vestedAmount > 0) {\r\n            release(vestingScheduleId, vestedAmount);\r\n        }\r\n        uint256 unreleased = vestingSchedule.amountTotal -\r\n            vestingSchedule.released;\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - unreleased;\r\n        vestingSchedule.revoked = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the specified amount if possible.\r\n     * @param amount the amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external nonReentrant onlyOwner {\r\n        require(\r\n            getWithdrawableAmount() >= amount,\r\n            \"Vesting: not enough withdrawable funds\"\r\n        );\r\n        /*\r\n         * @dev Replaced owner() with msg.sender => address of WITHDRAWER_ROLE\r\n         */\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Release vested amount of tokens.\r\n     * @param vestingScheduleId the vesting schedule identifier\r\n     * @param amount the amount to release\r\n     */\r\n    function release(\r\n        bytes32 vestingScheduleId,\r\n        uint256 amount\r\n    ) public nonReentrant onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[\r\n            vestingScheduleId\r\n        ];\r\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\r\n\r\n        bool isReleasor = (msg.sender == owner());\r\n        require(\r\n            isBeneficiary || isReleasor,\r\n            \"Vesting: only beneficiary and owner can release vested tokens\"\r\n        );\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        require(\r\n            vestedAmount >= amount,\r\n            \"Vesting: cannot release tokens, not enough vested tokens\"\r\n        );\r\n        vestingSchedule.released = vestingSchedule.released + amount;\r\n        address payable beneficiaryPayable = payable(\r\n            vestingSchedule.beneficiary\r\n        );\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - amount;\r\n        token.transfer(beneficiaryPayable, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of vesting schedules associated to a beneficiary.\r\n     * @return the number of vesting schedules\r\n     */\r\n    function getVestingSchedulesCountByBeneficiary(\r\n        address _beneficiary\r\n    ) external view returns (uint256) {\r\n        return holdersVestingCount[_beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the vesting schedule id at the given index.\r\n     * @return the vesting id\r\n     */\r\n    function getVestingIdAtIndex(\r\n        uint256 index\r\n    ) external view returns (bytes32) {\r\n        require(\r\n            index < getVestingSchedulesCount(),\r\n            \"Vesting: index out of bounds\"\r\n        );\r\n        return vestingSchedulesIds[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vesting schedule information for a given holder and index.\r\n     * @return the vesting schedule structure information\r\n     */\r\n    function getVestingScheduleByAddressAndIndex(\r\n        address holder,\r\n        uint256 index\r\n    ) external view returns (VestingSchedule memory) {\r\n        return\r\n            getVestingSchedule(\r\n                computeVestingScheduleIdForAddressAndIndex(holder, index)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total amount of vesting schedules.\r\n     * @return the total amount of vesting schedules\r\n     */\r\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\r\n        return vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of vesting schedules managed by this contract.\r\n     * @return the number of vesting schedules\r\n     */\r\n    function getVestingSchedulesCount() public view returns (uint256) {\r\n        return vestingSchedulesIds.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\r\n     * @return the vested amount\r\n     */\r\n    function computeReleasableAmount(\r\n        bytes32 vestingScheduleId\r\n    )\r\n        external\r\n        view\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\r\n        returns (uint256)\r\n    {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[\r\n            vestingScheduleId\r\n        ];\r\n        return _computeReleasableAmount(vestingSchedule);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vesting schedule information for a given identifier.\r\n     * @return the vesting schedule structure information\r\n     */\r\n    function getVestingSchedule(\r\n        bytes32 vestingScheduleId\r\n    ) public view returns (VestingSchedule memory) {\r\n        return vestingSchedules[vestingScheduleId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\r\n     * @return the amount of tokens\r\n     */\r\n    function getWithdrawableAmount() public view returns (uint256) {\r\n        return token.balanceOf(address(this)) - vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the next vesting schedule identifier for a given holder address.\r\n     */\r\n    function computeNextVestingScheduleIdForHolder(\r\n        address holder\r\n    ) public view returns (bytes32) {\r\n        return\r\n            computeVestingScheduleIdForAddressAndIndex(\r\n                holder,\r\n                holdersVestingCount[holder]\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the last vesting schedule for a given holder address.\r\n     */\r\n    function getLastVestingScheduleForHolder(\r\n        address holder\r\n    ) external view returns (VestingSchedule memory) {\r\n        return\r\n            vestingSchedules[\r\n                computeVestingScheduleIdForAddressAndIndex(\r\n                    holder,\r\n                    holdersVestingCount[holder] - 1\r\n                )\r\n            ];\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the vesting schedule identifier for an address and an index.\r\n     */\r\n    function computeVestingScheduleIdForAddressAndIndex(\r\n        address holder,\r\n        uint256 index\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(holder, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\r\n     * @return the amount of releasable tokens\r\n     */\r\n    function _computeReleasableAmount(\r\n        VestingSchedule memory vestingSchedule\r\n    ) internal view returns (uint256) {\r\n        // Retrieve the current time.\r\n        uint256 currentTime = block.timestamp;\r\n        // If the current time is before the cliff, no tokens are releasable.\r\n        if (\r\n            (currentTime < vestingSchedule.cliff) ||\r\n            (currentTime < vestingSchedule.launch) ||\r\n            vestingSchedule.revoked\r\n        ) {\r\n            return 0;\r\n        }\r\n        // If the current time is after the vesting period, all tokens are releasable,\r\n        // minus the amount already released.\r\n        else if (\r\n            currentTime >= vestingSchedule.start + vestingSchedule.duration\r\n        ) {\r\n            return vestingSchedule.amountTotal - vestingSchedule.released;\r\n        }\r\n        // Otherwise, some tokens are releasable.\r\n        else {\r\n            // Compute the number of full vesting periods that have elapsed.\r\n            uint256 launchAmount = (vestingSchedule.amountTotal *\r\n                vestingSchedule.launchPercent) / 100;\r\n            uint256 leftAmount = vestingSchedule.amountTotal - launchAmount;\r\n            uint256 timeFromStart = currentTime - vestingSchedule.start;\r\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\r\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\r\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\r\n            // Compute the amount of tokens that are vested.\r\n            uint256 vestedAmount = (leftAmount * vestedSeconds) /\r\n                vestingSchedule.duration;\r\n            // Subtract the amount already released and return.\r\n            return vestedAmount + launchAmount - vestingSchedule.released;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_launch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_launchPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getLastVestingScheduleForHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c01b1979e2244dc94e67891df0af4f7885e57fd4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4f268dc94eabb8379e6cd4bd23b2b57b18efb9832c0aace8ce13972eae40806a"}