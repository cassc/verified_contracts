{"SourceCode": "// Sources flattened with hardhat v2.22.8 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v2.5.1\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @studydefi/money-legos/dydx/contracts/ISoloMargin.sol@v2.4.2\r\n\r\npragma solidity ^0.5.7;\r\n// Original pragma directive: pragma experimental ABIEncoderV2\r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\ncontract ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public;\r\n\r\n    function getIsGlobalOperator(address operator) public view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n        public\r\n        view\r\n        returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n        public;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n        public\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n        public\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n        public\r\n        view\r\n        returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() public view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n        public\r\n        returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n        public;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n        public\r\n        view\r\n        returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n        public\r\n        view\r\n        returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) public;\r\n\r\n    function getMarginRatio() public view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) public view returns (bool);\r\n\r\n    function getRiskParams() public view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        public\r\n        view\r\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() public;\r\n\r\n    function getMinBorrowedValue() public view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) public;\r\n\r\n    function getMarketPrice(uint256 marketId) public view returns (address);\r\n\r\n    function owner() public view returns (address);\r\n\r\n    function isOwner() public view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n        public\r\n        returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) public;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) public;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        public\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public;\r\n\r\n    function getLiquidationSpread() public view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n        public\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) public view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n        public\r\n        view\r\n        returns (uint8);\r\n\r\n    function getEarningsRate() public view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public;\r\n\r\n    function getRiskLimits() public view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) public;\r\n\r\n    function transferOwnership(address newOwner) public;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n        public\r\n        view\r\n        returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n        public\r\n        view\r\n        returns (Interest.Rate memory);\r\n}\r\n\r\n\r\n// File @studydefi/money-legos/dydx/contracts/DydxFlashloanBase.sol@v2.4.2\r\n\r\npragma solidity ^0.5.7;\r\n// Original pragma directive: pragma experimental ABIEncoderV2\r\n\r\n\r\ncontract DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n        internal\r\n        view\r\n        returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}\r\n\r\n\r\n// File @studydefi/money-legos/dydx/contracts/ICallee.sol@v2.4.2\r\n\r\npragma solidity ^0.5.7;\r\n// Original pragma directive: pragma experimental ABIEncoderV2\r\n\r\n/**\r\n * @title ICallee\r\n * @author dYdX\r\n *\r\n * Interface that Callees for Solo must implement in order to ingest data.\r\n */\r\ncontract ICallee {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory accountInfo,\r\n        bytes memory data\r\n    )\r\n        public;\r\n}\r\n\r\n\r\n// File @studydefi/money-legos/compound/contracts/ICToken.sol@v2.4.2\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ICToken {\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n    function balanceOfUnderlying(address account) external returns (uint);\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n    \r\n    function underlying() external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/LeveragedYieldFarm.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n// Original pragma directive: pragma experimental ABIEncoderV2\r\n// NOTE: @studydefi doesn't contain clamComp();\r\ninterface Comptroller {\r\n    function enterMarkets(address[] calldata)\r\n        external\r\n        returns (uint256[] memory);\r\n\r\n    function claimComp(address holder) external;\r\n}\r\n\r\ncontract LeveragedYieldFarm is ICallee, DydxFlashloanBase {\r\n    // Mainnet Dai\r\n    // https://etherscan.io/address/0x6b175474e89094c44da98b954eedeac495271d0f#readContract\r\n    address daiAddress = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    IERC20 dai = IERC20(daiAddress);\r\n\r\n    // Mainnet cDai\r\n    // https://etherscan.io/address/0x5d3a536e4d6dbd6114cc1ead35777bab948e3643#readProxyContract\r\n    address cDaiAddress = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n    ICToken cDai = ICToken(cDaiAddress);\r\n\r\n    // Mainnet Comptroller\r\n    // https://etherscan.io/address/0x3d9819210a31b4961b30ef54be2aed79b9c9cd3b#readProxyContract\r\n    address comptrollerAddress = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    Comptroller comptroller = Comptroller(comptrollerAddress);\r\n\r\n    // COMP ERC-20 token\r\n    // https://etherscan.io/token/0xc00e94cb662c3520282e6f5717214004a7f26888\r\n    IERC20 compToken = IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888);\r\n\r\n    // Mainnet dYdX SoloMargin contract\r\n    // https://etherscan.io/address/0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e#readProxyContract\r\n    address soloMarginAddress = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n\r\n    // Contract owner\r\n    address payable owner;\r\n\r\n    struct MyCustomData {\r\n        address token;\r\n        uint256 repayAmount;\r\n        uint256 fullAmount;\r\n        bool isDeposit;\r\n    }\r\n\r\n    event FlashLoan(address indexed _from, bytes32 indexed _id, uint256 _value);\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"caller is not the owner!\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        // Track the contract owner\r\n        owner = msg.sender;\r\n\r\n        // Enter the cDai market so you can borrow another type of asset\r\n        address[] memory cTokens = new address[](1);\r\n        cTokens[0] = cDaiAddress;\r\n        uint256[] memory errors = comptroller.enterMarkets(cTokens);\r\n        if (errors[0] != 0) {\r\n            revert(\"Comptroller.enterMarkets failed.\");\r\n        }\r\n    }\r\n\r\n    // Don't allow contract to receive Ether by mistake\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    function flashLoan(\r\n        address _solo,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _fullAmount,\r\n        bool _isDeposit\r\n    ) internal {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        // Get marketId from token address\r\n        uint256 marketId = _getMarketIdFromTokenAddress(_solo, _token);\r\n\r\n        // Calculate repay amount (_amount + (2 wei))\r\n        // Approve transfer from\r\n        uint256 repayAmount = _getRepaymentAmountInternal(_amount);\r\n        IERC20(_token).approve(_solo, repayAmount);\r\n\r\n        // 1. Withdraw $\r\n        // 2. Call callFunction(...)\r\n        // 3. Deposit back $\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = _getWithdrawAction(marketId, _amount);\r\n        operations[1] = _getCallAction(\r\n            // Encode MyCustomData for callFunction\r\n            abi.encode(\r\n                MyCustomData({\r\n                    token: _token,\r\n                    repayAmount: repayAmount,\r\n                    fullAmount: _fullAmount,\r\n                    isDeposit: _isDeposit\r\n                })\r\n            )\r\n        );\r\n        operations[2] = _getDepositAction(marketId, repayAmount);\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        solo.operate(accountInfos, operations);\r\n    }\r\n\r\n    // Do not deposit all your DAI because you must pay flash loan fees\r\n    // Always keep at least 1 DAI in the contract\r\n    function depositDai(uint256 initialAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        // Total deposit: 30% initial amount, 70% flash loan\r\n        uint256 totalAmount = (initialAmount * 10) / 3;\r\n\r\n        // loan is 70% of total deposit\r\n        uint256 flashLoanAmount = totalAmount - initialAmount;\r\n\r\n        // Get DAI Flash Loan for \"DEPOSIT\"\r\n        bool isDeposit = true;\r\n        flashLoan(\r\n            soloMarginAddress,\r\n            daiAddress,\r\n            flashLoanAmount,\r\n            totalAmount,\r\n            isDeposit\r\n        ); // execution goes to `callFunction`\r\n\r\n        // Handle remaining execution inside handleDeposit() function\r\n\r\n        return true;\r\n    }\r\n\r\n    // You must have some Dai in your contract still to pay flash loan fee!\r\n    // Always keep at least 1 DAI in the contract\r\n    function withdrawDai(uint256 initialAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        // Total deposit: 30% initial amount, 70% flash loan\r\n        uint256 totalAmount = (initialAmount * 10) / 3;\r\n\r\n        // loan is 70% of total deposit\r\n        uint256 flashLoanAmount = totalAmount - initialAmount;\r\n\r\n        // Use flash loan to payback borrowed amount\r\n        bool isDeposit = false; //false means withdraw\r\n        flashLoan(\r\n            soloMarginAddress,\r\n            daiAddress,\r\n            flashLoanAmount,\r\n            totalAmount,\r\n            isDeposit\r\n        ); // execution goes to `callFunction`\r\n\r\n        // Handle repayment inside handleWithdraw() function\r\n\r\n        // Claim COMP tokens\r\n        comptroller.claimComp(address(this));\r\n\r\n        // Withdraw COMP tokens\r\n        compToken.transfer(owner, compToken.balanceOf(address(this)));\r\n\r\n        // Withdraw Dai to the wallet\r\n        dai.transfer(owner, dai.balanceOf(address(this)));\r\n\r\n        return true;\r\n    }\r\n\r\n    // This is the function that will be called postLoan\r\n    // i.e. Encode the logic to handle your flashloaned funds here\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory account,\r\n        bytes memory data\r\n    ) public {\r\n        MyCustomData memory mcd = abi.decode(data, (MyCustomData));\r\n        uint256 balOfLoanedToken = IERC20(mcd.token).balanceOf(address(this));\r\n\r\n        // Note that you can ignore the line below\r\n        // if your dydx account (this contract in this case)\r\n        // has deposited at least ~2 Wei of assets into the account\r\n        // to balance out the collaterization ratio\r\n        require(\r\n            balOfLoanedToken >= mcd.repayAmount,\r\n            \"Not enough funds to repay dYdX loan!\"\r\n        );\r\n\r\n        if (mcd.isDeposit == true) {\r\n            handleDeposit(mcd.fullAmount, mcd.repayAmount);\r\n        }\r\n\r\n        if (mcd.isDeposit == false) {\r\n            handleWithdraw();\r\n        }\r\n    }\r\n\r\n    // You must first send DAI to this contract before you can call this function\r\n    function handleDeposit(uint256 totalAmount, uint256 flashLoanAmount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // Approve Dai tokens as collateral\r\n        dai.approve(cDaiAddress, totalAmount);\r\n\r\n        // Provide collateral by minting cDai tokens\r\n        cDai.mint(totalAmount);\r\n\r\n        // Borrow Dai\r\n        cDai.borrow(flashLoanAmount);\r\n\r\n        // Start earning COMP tokens, yay!\r\n        return true;\r\n    }\r\n\r\n    function handleWithdraw() internal returns (bool) {\r\n        uint256 balance;\r\n\r\n        // Get curent borrow Balance\r\n        balance = cDai.borrowBalanceCurrent(address(this));\r\n\r\n        // Approve tokens for repayment\r\n        dai.approve(address(cDai), balance);\r\n\r\n        // Repay tokens\r\n        cDai.repayBorrow(balance);\r\n\r\n        // Get cDai balance\r\n        balance = cDai.balanceOf(address(this));\r\n\r\n        // Redeem cDai\r\n        cDai.redeem(balance);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Fallback in case any other tokens are sent to this contract\r\n    function withdrawToken(address _tokenAddress) public onlyOwner {\r\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        IERC20(_tokenAddress).transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"name\":\"depositDai\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"account\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"}]", "ContractName": "LeveragedYieldFarm", "CompilerVersion": "v0.5.7+commit.6da8b019", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d314f2bb56a509fa0644a616f6c7d942b470a8c9b73a9cb02d4e439a8dc53140"}