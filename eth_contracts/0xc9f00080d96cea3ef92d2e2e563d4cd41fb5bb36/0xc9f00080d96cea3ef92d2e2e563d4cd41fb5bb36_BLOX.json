{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BLOX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.23;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nerror ZeroAddress();\\r\\nerror ContractAddress();\\r\\nerror TradingAlreadyEnabled();\\r\\nerror NotEnoughTokens();\\r\\n\\r\\n\\r\\ncontract BLOX is IERC20, Ownable {\\r\\n    mapping (address => uint) private _balances;\\r\\n    mapping (address => mapping (address => uint)) private _allowances;\\r\\n    mapping (address => bool) public allowList;\\r\\n\\r\\n    //strings\\r\\n    string private constant _name = 'BLOX';\\r\\n    string private constant _symbol = 'BLOX';\\r\\n\\r\\n    //uints\\r\\n    uint private constant InitialSupply= 100_000_000 * 10**_decimals;\\r\\n    uint8 private constant _decimals = 18;\\r\\n\\r\\n    bool public tradingOpen = false;\\r\\n\\r\\n    constructor () {\\r\\n        _balances[msg.sender] = InitialSupply;\\r\\n        allowList[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Internal function to transfer tokens from one address to another.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender, \\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) internal {\\r\\n        if(sender == address(0)) revert ZeroAddress();\\r\\n        if(recipient == address(0)) revert ZeroAddress();\\r\\n\\r\\n        if(allowList[sender])\\r\\n            _allowedTransfer(sender, recipient, amount);\\r\\n        else {\\r\\n            require(tradingOpen,\\\"trading not yet enabled\\\");\\r\\n            _allowedTransfer(sender,recipient,amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Transfer amount of tokens without fees.\\r\\n    * @dev In feelessTransfer, there isn't limit as well.\\r\\n    * @param sender The address of user to send tokens.\\r\\n    * @param recipient The address of user to be recieveid tokens.\\r\\n    * @param amount The token amount to transfer.\\r\\n    */\\r\\n    function _allowedTransfer(\\r\\n        address sender, \\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) internal {\\r\\n        uint senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"Transfer exceeds balance\\\");\\r\\n        _balances[sender]-=amount;\\r\\n        _balances[recipient]+=amount;\\r\\n        emit Transfer(sender,recipient,amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Get Burned tokens.\\r\\n    * @dev This function is for get burned tokens.\\r\\n    */\\r\\n    function getBurnedTokens(\\r\\n    ) public view returns(uint) {\\r\\n        return _balances[address(0xdead)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Get circulating supply.\\r\\n    * @dev This function is for get circulating supply.\\r\\n     */\\r\\n    function getCirculatingSupply(\\r\\n    ) public view returns(uint) {\\r\\n        return InitialSupply-_balances[address(0xdead)];\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * @notice Set to allowed trade early.\\r\\n    * @dev This function is for set to allowed trade early.\\r\\n    * @param account The address of user to be allowed early.\\r\\n    * @param boolean The status of allowed.\\r\\n    */\\r\\n    function allowListChange(\\r\\n        address account, \\r\\n        bool boolean\\r\\n    ) external onlyOwner {\\r\\n        if(account == address(0)) revert ZeroAddress();\\r\\n        allowList[account]=boolean;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n    * @notice Used to start trading.\\r\\n    * @dev This function is for used to start trading.\\r\\n    */\\r\\n    function SetupEnableTrading(\\r\\n    ) external onlyOwner{\\r\\n        if(tradingOpen) revert TradingAlreadyEnabled();\\r\\n        tradingOpen = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    function name() external pure override returns (string memory) {return _name;}\\r\\n    function symbol() external pure override returns (string memory) {return _symbol;}\\r\\n    function decimals() external pure override returns (uint8) {return _decimals;}\\r\\n    function totalSupply() external pure override returns (uint) {return InitialSupply;}\\r\\n    function balanceOf(address account) public view override returns (uint) {return _balances[account];}\\r\\n    function isAllowed(address account) public view returns(bool) {return allowList[account];}\\r\\n    \\r\\n    function transfer(\\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) external override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(\\r\\n        address _owner, \\r\\n        address spender\\r\\n    ) external view override returns (uint) {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n    function approve(\\r\\n        address spender, \\r\\n        uint amount\\r\\n    ) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function _approve(\\r\\n        address _owner, \\r\\n        address spender, \\r\\n        uint amount\\r\\n    ) private {\\r\\n        if(_owner == address(0)) revert ZeroAddress();\\r\\n        if(spender == address(0)) revert ZeroAddress();\\r\\n        _allowances[_owner][spender] = amount;\\r\\n        emit Approval(_owner, spender, amount);\\r\\n    }\\r\\n    function transferFrom(\\r\\n        address sender, \\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance >= amount, \\\"Transfer > allowance\\\");\\r\\n        _approve(sender, msg.sender, currentAllowance - amount);\\r\\n        return true;\\r\\n    }\\r\\n    function increaseAllowance(\\r\\n        address spender, \\r\\n        uint addedValue\\r\\n    ) external returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseAllowance(\\r\\n        address spender, \\r\\n        uint subtractedValue\\r\\n    ) external returns (bool) {\\r\\n        uint currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"<0 allowance\\\");\\r\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Used to remove excess ETH from contract\\r\\n    * @dev This function is for used to remove excess ETH from contract.\\r\\n    * @param amountPercentage The amount percentage to recover.\\r\\n     */\\r\\n    function emergencyETHrecovery(\\r\\n        uint256 amountPercentage\\r\\n    ) external onlyOwner {\\r\\n        uint256 amountETH = address(this).balance;\\r\\n        (bool sent,)=msg.sender.call{value:amountETH * amountPercentage / 100}(\\\"\\\");\\r\\n            sent=true;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @notice Used to remove excess Tokens from contract\\r\\n    * @dev This function is for used to remove excess Tokens from contract.\\r\\n    * @param tokenAddress The token address to recover.\\r\\n    * @param amountPercentage The amount percentage to recover.\\r\\n     */\\r\\n    function emergencyTokenrecovery(\\r\\n        address tokenAddress, \\r\\n        uint256 amountPercentage\\r\\n    ) external onlyOwner {\\r\\n        IERC20 token = IERC20(tokenAddress);\\r\\n        uint256 tokenAmount = token.balanceOf(address(this));\\r\\n        token.transfer(msg.sender, tokenAmount * amountPercentage / 100);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TradingAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SetupEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"boolean\",\"type\":\"bool\"}],\"name\":\"allowListChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"emergencyETHrecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenrecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BLOX", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}