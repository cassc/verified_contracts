{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PermissionsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n    This contract handles the accesses to the various Blue contracts.\\n*/\\n\\ncontract PermissionsRegistry {\\n\\n    /// @notice Control this contract. This is the main multisig 4/6\\n    address public blueMultisig;\\n\\n    /// @notice This is the blue team multisig 2/2\\n    address public blueTeamMultisig;\\n\\n    /// @notice Control emergency functions (set to multisig)\\n    address public emergencyCouncil;\\n\\n    /// @notice Check if caller has a role active   (role -> caller -> true/false)\\n    mapping(bytes => mapping(address => bool)) public hasRole;\\n    mapping(bytes => bool) internal _checkRole;\\n\\n    mapping(bytes => address[]) internal _roleToAddresses;\\n    mapping(address => bytes[]) internal _addressToRoles;\\n\\n    /// @notice Roles array\\n    bytes[] internal _roles;\\n\\n    event RoleAdded(bytes role);\\n    event RoleRemoved(bytes role);\\n    event RoleSetFor(address indexed user, bytes indexed role);\\n    event RoleRemovedFor(address indexed user, bytes indexed role);\\n    event SetEmergencyCouncil(address indexed council);\\n    event SetBlueTeamMultisig(address indexed multisig);\\n    event SetBlueMultisig(address indexed multisig);\\n\\n\\n\\n    constructor() {\\n        blueTeamMultisig = msg.sender;\\n        blueMultisig = msg.sender;\\n        emergencyCouncil = msg.sender;\\n\\n\\n        _roles.push(bytes(\\\"GOVERNANCE\\\"));\\n        _checkRole[(bytes(\\\"GOVERNANCE\\\"))] = true;\\n\\n        _roles.push(bytes(\\\"VOTER_ADMIN\\\"));\\n        _checkRole[(bytes(\\\"VOTER_ADMIN\\\"))] = true;\\n\\n        _roles.push(bytes(\\\"GAUGE_ADMIN\\\"));\\n        _checkRole[(bytes(\\\"GAUGE_ADMIN\\\"))] = true;\\n\\n        _roles.push(bytes(\\\"BRIBE_ADMIN\\\"));\\n        _checkRole[(bytes(\\\"BRIBE_ADMIN\\\"))] = true;\\n        \\n        _roles.push(bytes(\\\"FEE_MANAGER\\\"));\\n        _checkRole[(bytes(\\\"FEE_MANAGER\\\"))] = true;\\n\\n        _roles.push(bytes(\\\"CL_FEES_VAULT_ADMIN\\\"));\\n        _checkRole[(bytes(\\\"CL_FEES_VAULT_ADMIN\\\"))] = true;\\n\\n    }\\n\\n    modifier onlyBlueMultisig() {\\n        require(msg.sender == blueMultisig, \\\"!blueMultisig\\\");\\n        _;\\n    }\\n\\n    /* -----------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n                                    ROLES SETTINGS\\n    --------------------------------------------------------------------------------\\n    ----------------------------------------------------------------------------- */\\n\\n    /// @notice add a new role\\n    /// @param  role    new role's string (eg role = \\\"GAUGE_ADMIN\\\")\\n    function addRole(string memory role) external onlyBlueMultisig {\\n        bytes memory _role = bytes(role);\\n        require(!_checkRole[_role], 'is a role');\\n        _checkRole[_role] = true;\\n        _roles.push(_role);\\n        emit RoleAdded(_role);\\n    }\\n\\n    /// @notice Remove a role\\n    /// @dev    set last one to i_th position then .pop()\\n    function removeRole(string memory role) external onlyBlueMultisig {\\n        bytes memory _role = bytes(role);\\n        require(_checkRole[_role], 'not a role');\\n\\n        for(uint i = 0; i < _roles.length; i++){\\n            if(keccak256(_roles[i]) == keccak256(_role)){\\n                _roles[i] = _roles[_roles.length -1];\\n                _roles.pop();\\n                _checkRole[_role] = false;\\n                emit RoleRemoved(_role);\\n                break; \\n            }\\n        }\\n\\n        address[] memory rta = _roleToAddresses[bytes(role)];\\n        for(uint i = 0; i < rta.length; i++){\\n            hasRole[bytes(role)][rta[i]] = false;\\n            bytes[] memory __roles = _addressToRoles[rta[i]];\\n            for(uint k = 0; k < __roles.length; k++){\\n                if(keccak256(__roles[k]) == keccak256(bytes(role))){\\n                    _addressToRoles[rta[i]][k] = _roles[_roles.length -1];\\n                    _addressToRoles[rta[i]].pop();\\n                }\\n            }\\n        }\\n\\n    }\\n\\n\\n    \\n    /// @notice Set a role for an address\\n    function setRoleFor(address c, string memory role) external onlyBlueMultisig {\\n        bytes memory _role = bytes(role);\\n        require(_checkRole[_role], 'not a role');\\n        require(!hasRole[_role][c], 'assigned');\\n\\n        hasRole[_role][c] = true;\\n\\n        _roleToAddresses[_role].push(c);\\n        _addressToRoles[c].push(_role);\\n\\n        emit RoleSetFor(c, _role);\\n\\n    }\\n\\n    \\n    /// @notice remove a role from an address\\n    function removeRoleFrom(address c, string memory role) external onlyBlueMultisig {\\n        bytes memory _role = bytes(role);\\n        require(_checkRole[_role], 'not a role');\\n        require(hasRole[_role][c], 'not assigned');\\n\\n        hasRole[_role][c] = false;\\n\\n        address[] storage rta = _roleToAddresses[_role];\\n        for(uint i = 0; i < rta.length; i++){\\n            if(rta[i] == c){\\n                rta[i] = rta[rta.length -1];\\n                rta.pop();\\n            }\\n        }\\n\\n        bytes[] storage atr = _addressToRoles[c];\\n        for(uint i = 0; i < atr.length; i++){\\n            if(keccak256(atr[i]) == keccak256(_role)){\\n                atr[i] = atr[atr.length -1];\\n                atr.pop();\\n            }\\n        }\\n\\n        emit RoleRemovedFor(c, _role);\\n        \\n    }\\n\\n    \\n\\n  \\n\\n    /************************************************************\\n                                VIEW\\n    *************************************************************/\\n    \\n    /// @notice Read roles and return strings\\n    function rolesToString() external view returns(string[] memory __roles){\\n        __roles = new string[](_roles.length);\\n        for(uint i = 0; i < _roles.length; i++){\\n            __roles[i] = string(_roles[i]);\\n        }\\n    }\\n\\n    \\n    /// @notice Read roles array and return bytes\\n    function roles() external view returns(bytes[] memory){\\n        return _roles;\\n    }\\n\\n    /// @notice Read roles length\\n    function rolesLength() external view returns(uint){\\n        return _roles.length;\\n    }\\n\\n     /// @notice Return addresses for a given role\\n    function roleToAddresses(string memory role) external view returns(address[] memory _addresses){\\n        return _roleToAddresses[bytes(role)];\\n    }\\n\\n    /// @notice Return roles for a given address\\n    function addressToRole(address _user) external view returns(string[] memory){\\n        string[] memory _temp = new string[](_addressToRoles[_user].length);\\n        uint i = 0;\\n        for(i; i < _temp.length; i++){\\n            _temp[i] = string(_addressToRoles[_user][i]);\\n        }\\n        return _temp;\\n    }\\n\\n    \\n    /************************************************************\\n                                HELPERS\\n    *************************************************************/\\n\\n    /// @notice Helper function to get bytes from a string\\n    function helper_stringToBytes(string memory _input) public pure returns(bytes memory){\\n        return bytes(_input);\\n    }\\n\\n    /// @notice Helper function to get string from bytes\\n    function helper_bytesToString(bytes memory _input) public pure returns(string memory){\\n        return string(_input);\\n    }\\n\\n\\n  \\n    /* -----------------------------------------------------------------------------\\n    --------------------------------------------------------------------------------\\n                                EMERGENCY AND MULTISIG\\n    --------------------------------------------------------------------------------\\n    ----------------------------------------------------------------------------- */\\n\\n\\n    /// @notice set emergency counsil\\n    /// @param _new new address    \\n    function setEmergencyCouncil(address _new) external {\\n        require(msg.sender == emergencyCouncil || msg.sender == blueMultisig, \\\"not allowed\\\");\\n        require(_new != address(0), \\\"addr0\\\");\\n        require(_new != emergencyCouncil, \\\"same emergencyCouncil\\\");\\n        emergencyCouncil = _new;\\n\\n        emit SetEmergencyCouncil(_new);\\n    }\\n\\n\\n    /// @notice set blue team multisig\\n    /// @param _new new address    \\n    function setBlueTeamMultisig(address _new) external {\\n        require(msg.sender == blueTeamMultisig, \\\"not allowed\\\");\\n        require(_new != address(0), \\\"addr 0\\\");\\n        require(_new != blueTeamMultisig, \\\"same multisig\\\");\\n        blueTeamMultisig = _new;\\n        \\n        emit SetBlueTeamMultisig(_new);\\n    }\\n\\n    /// @notice set blue multisig\\n    /// @param _new new address    \\n    function setBlueMultisig(address _new) external {\\n        require(msg.sender == blueMultisig, \\\"not allowed\\\");\\n        require(_new != address(0), \\\"addr0\\\");\\n        require(_new != blueMultisig, \\\"same multisig\\\");\\n        blueMultisig = _new;\\n        \\n        emit SetBlueMultisig(_new);\\n    }\\n    \\n\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"role\",\"type\":\"bytes\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"role\",\"type\":\"bytes\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"role\",\"type\":\"bytes\"}],\"name\":\"RoleRemovedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"role\",\"type\":\"bytes\"}],\"name\":\"RoleSetFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"SetBlueMultisig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"SetBlueTeamMultisig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"council\",\"type\":\"address\"}],\"name\":\"SetEmergencyCouncil\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"addRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addressToRole\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blueMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blueTeamMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"helper_bytesToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_input\",\"type\":\"string\"}],\"name\":\"helper_stringToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"removeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"removeRoleFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"roleToAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolesToString\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"__roles\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setBlueMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setBlueTeamMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setEmergencyCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"setRoleFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PermissionsRegistry", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}