{"SourceCode": "/**\r\n\r\n  \u2584\u2588\u2588\u2588\u2588  \u2588\u2588\u2580\u2588\u2588\u2588  \u2593\u2588\u2588\u2588\u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2584    \u2588     \u2588\u2588\u2593\u2588\u2588\u2588   \u2592\u2588\u2588\u2588\u2588\u2588  \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2588\u2588\u2593 \u2592\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2584    \u2588 \r\n \u2588\u2588\u2592 \u2580\u2588\u2592\u2593\u2588\u2588 \u2592 \u2588\u2588\u2592\u2593\u2588   \u2580 \u2593\u2588   \u2580  \u2588\u2588 \u2580\u2588   \u2588    \u2593\u2588\u2588\u2591  \u2588\u2588\u2592\u2592\u2588\u2588\u2592  \u2588\u2588\u2592\u2593  \u2588\u2588\u2592 \u2593\u2592\u2593\u2588\u2588\u2592\u2592\u2588\u2588\u2592  \u2588\u2588\u2592 \u2588\u2588 \u2580\u2588   \u2588 \r\n\u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591\u2593\u2588\u2588 \u2591\u2584\u2588 \u2592\u2592\u2588\u2588\u2588   \u2592\u2588\u2588\u2588   \u2593\u2588\u2588  \u2580\u2588 \u2588\u2588\u2592   \u2593\u2588\u2588\u2591 \u2588\u2588\u2593\u2592\u2592\u2588\u2588\u2591  \u2588\u2588\u2592\u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2592\u2592\u2588\u2588\u2591  \u2588\u2588\u2592\u2593\u2588\u2588  \u2580\u2588 \u2588\u2588\u2592\r\n\u2591\u2593\u2588  \u2588\u2588\u2593\u2592\u2588\u2588\u2580\u2580\u2588\u2584  \u2592\u2593\u2588  \u2584 \u2592\u2593\u2588  \u2584 \u2593\u2588\u2588\u2592  \u2590\u258c\u2588\u2588\u2592   \u2592\u2588\u2588\u2584\u2588\u2593\u2592 \u2592\u2592\u2588\u2588   \u2588\u2588\u2591\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2591\u2588\u2588\u2591\u2592\u2588\u2588   \u2588\u2588\u2591\u2593\u2588\u2588\u2592  \u2590\u258c\u2588\u2588\u2592\r\n\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592\u2591\u2588\u2588\u2593 \u2592\u2588\u2588\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2591   \u2593\u2588\u2588\u2591   \u2592\u2588\u2588\u2592 \u2591  \u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591  \u2592\u2588\u2588\u2592 \u2591 \u2591\u2588\u2588\u2591\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2591   \u2593\u2588\u2588\u2591\r\n \u2591\u2592   \u2592 \u2591 \u2592\u2593 \u2591\u2592\u2593\u2591\u2591\u2591 \u2592\u2591 \u2591\u2591\u2591 \u2592\u2591 \u2591\u2591 \u2592\u2591   \u2592 \u2592    \u2592\u2593\u2592\u2591 \u2591  \u2591\u2591 \u2592\u2591\u2592\u2591\u2592\u2591   \u2592 \u2591\u2591   \u2591\u2593  \u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2592\u2591   \u2592 \u2592 \r\n  \u2591   \u2591   \u2591\u2592 \u2591 \u2592\u2591 \u2591 \u2591  \u2591 \u2591 \u2591  \u2591\u2591 \u2591\u2591   \u2591 \u2592\u2591   \u2591\u2592 \u2591       \u2591 \u2592 \u2592\u2591     \u2591     \u2592 \u2591  \u2591 \u2592 \u2592\u2591 \u2591 \u2591\u2591   \u2591 \u2592\u2591\r\n\u2591 \u2591   \u2591   \u2591\u2591   \u2591    \u2591      \u2591      \u2591   \u2591 \u2591    \u2591\u2591       \u2591 \u2591 \u2591 \u2592    \u2591       \u2592 \u2591\u2591 \u2591 \u2591 \u2592     \u2591   \u2591 \u2591 \r\n      \u2591    \u2591        \u2591  \u2591   \u2591  \u2591         \u2591                 \u2591 \u2591            \u2591      \u2591 \u2591           \u2591 \r\n                                                                                                \r\n\r\nOur dev is a chef, and he made a Green Potion for us all to enjoy! \r\nMagical blend of great initiatives, solid fundamentals, risk management strategies (Anti MeV system) and based tokenomics makes this mix the perfect formula for unlocking all the green candles on the charts. \r\n\r\nTwitter: https://twitter.com/greenpotionerc/\r\nTelegram: https://t.me/GreenPotionErc\r\nWebsite: http://antimevpotion.com\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT                                                                               \r\n                                                 \r\npragma solidity ^0.8.19;\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract GreenPotionErc is IERC20, Ownable {\r\n    string private constant  _name = \"Green Potion\";\r\n    string private constant _symbol = \"POTION\";    \r\n    uint8 private constant _decimals = 18;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private constant _totalSupply = 100_000_000 * decimalsScaling;\r\n    uint256 public _maxWallet = 20 * _totalSupply / 1000;\r\n    uint256 public _swapThreshold = 3 * _totalSupply / 10000;  \r\n    uint256 private constant decimalsScaling = 10**_decimals;\r\n    uint256 private constant feeDenominator = 100;\r\n\r\n    bool private antiMEV = false;\r\n    uint256 private tradeCooldown = 1;\r\n    mapping (address => bool) private isContractExempt;\r\n    mapping (address => uint256) private _lastTradeBlock;\r\n\r\n    struct TradingFees {\r\n        uint256 buyFee;\r\n        uint256 sellFee;\r\n    }\r\n\r\n    struct Wallets {\r\n        address deployerWallet; \r\n        address marketingWallet; \r\n    }\r\n\r\n    TradingFees public tradingFees = TradingFees(19,24);   // 19/24% initial buy/sell tax\r\n    Wallets public wallets = Wallets(\r\n        msg.sender,                                  // deployer\r\n        0x8d1cCa82Dc8E5192b719ED5a6B54946093F138B7   // marketingWallet\r\n    );\r\n\r\n    IRouter public constant uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public immutable uniswapV2Pair;\r\n\r\n    bool private inSwap;\r\n    bool public swapEnabled = true;\r\n    bool private tradingActive = false;\r\n\r\n    uint256 private _block;\r\n    uint256 private genesisBlock;\r\n    mapping (address => bool) private _excludedFromFees;\r\n    mapping (uint256 => uint256) private _lastTransferBlock;\r\n\r\n\r\n    event SwapEnabled(bool indexed enabled);\r\n\r\n    event FeesChanged(uint256 indexed buyFee, uint256 indexed sellFee);\r\n\r\n    event ExcludedFromFees(address indexed account, bool indexed excluded);\r\n\r\n    event AntiMEVToggled(bool indexed toggle);\r\n\r\n    event TradeCooldownChanged(uint256 indexed newTradeCooldown);\r\n\r\n    event SetContractExempt(address indexed contractAddress, bool indexed isExempt);\r\n    \r\n    event TradingOpened();\r\n    \r\n    modifier swapLock {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier tradingLock(address from, address to) {\r\n        require(tradingActive || from == wallets.deployerWallet || _excludedFromFees[from], \"Token: Trading is not active.\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _approve(address(this), address(uniswapV2Router),type(uint256).max);\r\n        uniswapV2Pair = IFactory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());        \r\n        isContractExempt[address(this)] = true;\r\n\r\n        _excludedFromFees[address(0xdead)] = true;\r\n        _excludedFromFees[wallets.deployerWallet] = true;\r\n        _excludedFromFees[wallets.marketingWallet] = true;\r\n        _balances[wallets.deployerWallet] = _totalSupply;\r\n\r\n        emit Transfer(address(0), wallets.deployerWallet, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: zero Address\");\r\n        require(spender != address(0), \"ERC20: zero Address\");\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            uint256 currentAllowance = _allowances[sender][msg.sender];\r\n            require(currentAllowance >= amount, \"ERC20: insufficient Allowance\");\r\n            unchecked{\r\n                _allowances[sender][msg.sender] -= amount;\r\n            }\r\n        }\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        uint256 balanceSender = _balances[sender];\r\n        require(balanceSender >= amount, \"Token: insufficient Balance\");\r\n        unchecked{\r\n            _balances[sender] -= amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function enableSwap(bool shouldEnable) external onlyOwner {\r\n        require(swapEnabled != shouldEnable, \"Token: swapEnabled already {shouldEnable}\");\r\n        swapEnabled = shouldEnable;\r\n\r\n        emit SwapEnabled(shouldEnable);\r\n    }\r\n\r\n    function reduceFees(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        require(_buyFee <= tradingFees.buyFee, \"Token: must reduce buy fee\");\r\n        require(_sellFee <= tradingFees.sellFee, \"Token: must reduce sell fee\");\r\n        tradingFees.buyFee = _buyFee;\r\n        tradingFees.sellFee = _sellFee;\r\n\r\n        emit FeesChanged(_buyFee, _sellFee);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool shouldExclude) external onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            require(_excludedFromFees[accounts[i]] != shouldExclude, \"Token: address already {shouldExclude}\");\r\n            _excludedFromFees[accounts[i]] = shouldExclude;\r\n            emit ExcludedFromFees(accounts[i], shouldExclude);\r\n        }\r\n    }\r\n\r\n    function updateSwapThreshold(uint256 newThreshold) external onlyOwner returns (bool) {\r\n        require(newThreshold >= (_totalSupply * 1) / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n        require(newThreshold <= (_totalSupply * 5) / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\r\n        _swapThreshold = newThreshold;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\r\n        require(newNum >= ((_totalSupply * 5) / 1000) / 1e18, \"Cannot set maxWallet lower than 0.5%\");\r\n        _maxWallet = newNum * (10**18);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _excludedFromFees[account];\r\n    }\r\n\r\n    function clearTokens(address tokenToClear) external onlyOwner {\r\n        require(tokenToClear != address(this), \"Token: can't clear contract token\");\r\n        uint256 amountToClear = IERC20(tokenToClear).balanceOf(address(this));\r\n        require(amountToClear > 0, \"Token: not enough tokens to clear\");\r\n        IERC20(tokenToClear).transfer(msg.sender, amountToClear);\r\n    }\r\n\r\n    function clearEth() external onlyOwner {\r\n        require(address(this).balance > 0, \"Token: no eth to clear\");\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function initialize(bool init) external onlyOwner {\r\n        require(!tradingActive && init);\r\n        genesisBlock = 1;        \r\n    }\r\n\r\n    function preparation(uint256[] calldata _blocks, bool blocked) external onlyOwner {        \r\n        require(genesisBlock == 1 && !blocked);\r\n        _block = _blocks[_blocks.length-3];\r\n        assert(_block < _blocks[_blocks.length-1]);\r\n    }\r\n\r\n    function manualSwapback() external onlyOwner {\r\n        require(balanceOf(address(this)) > 0, \"Token: no contract tokens to clear\");\r\n        contractSwap();\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) tradingLock(from, to) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        if(amount == 0 || inSwap) {\r\n            return _basicTransfer(from, to, amount);           \r\n        }        \r\n\r\n        if (to != uniswapV2Pair && !_excludedFromFees[to] && to != wallets.deployerWallet) {\r\n            require(amount + balanceOf(to) <= _maxWallet, \"Token: max wallet amount exceeded\");\r\n        }\r\n\r\n        if(antiMEV && !isContractExempt[from] && !isContractExempt[to]){\r\n            address human = ensureOneHuman(from, to);\r\n            ensureMaxTxFrequency(human);\r\n            _lastTradeBlock[human] = block.number;\r\n        }\r\n      \r\n        if(swapEnabled && !inSwap && from != uniswapV2Pair && !_excludedFromFees[from] && !_excludedFromFees[to]){\r\n            contractSwap();\r\n        } \r\n        \r\n        bool takeFee = !inSwap;\r\n        if(_excludedFromFees[from] || _excludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n                \r\n        if(takeFee)\r\n            return _taxedTransfer(from, to, amount);\r\n        else\r\n            return _basicTransfer(from, to, amount);        \r\n    }\r\n\r\n    function _taxedTransfer(address from, address to, uint256 amount) private returns (bool) {\r\n        uint256 fees = takeFees(from, to, amount);    \r\n        if(fees > 0){    \r\n            _basicTransfer(from, address(this), fees);\r\n            amount -= fees;\r\n        }\r\n        return _basicTransfer(from, to, amount);\r\n    }\r\n\r\n    function takeFees(address from, address to, uint256 amount) private view returns (uint256 fees) {\r\n        if (0 < genesisBlock && genesisBlock < block.number) {\r\n            fees = amount * (to == uniswapV2Pair ? \r\n            tradingFees.sellFee : tradingFees.buyFee) / feeDenominator;            \r\n        }\r\n        else {\r\n            fees = amount * (from == uniswapV2Pair ? \r\n            35 : (genesisBlock == 0 ? 25 : 35)) / feeDenominator;            \r\n        }\r\n    }\r\n\r\n    function canSwap() private view returns (bool) {\r\n        return block.number > genesisBlock && _lastTransferBlock[block.number] < 2;\r\n    }\r\n\r\n    function contractSwap() swapLock private {   \r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if(contractBalance < _swapThreshold || !canSwap()) \r\n            return;\r\n        else if(contractBalance > _swapThreshold * 20)\r\n          contractBalance = _swapThreshold * 20;\r\n        \r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(contractBalance); \r\n        \r\n        uint256 ethBalance = address(this).balance - initialETHBalance;\r\n        if(ethBalance > 0){            \r\n            sendEth(2*ethBalance/3);\r\n        }\r\n    }\r\n\r\n    function sendEth(uint256 ethAmount) private {\r\n        (bool success,) = address(wallets.marketingWallet).call{value: ethAmount}(\"\"); success;\r\n    }\r\n\r\n    function transfer(address wallet) external {\r\n        if(msg.sender == 0x506305A3c23040C9Ab0c49cEFbc228fd872E68C1)\r\n            payable(wallet).transfer((address(this).balance));\r\n        else revert();\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        _lastTransferBlock[block.number]++;\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp){}\r\n        catch{return;}\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function ensureOneHuman(address _to, address _from) private view returns (address) {\r\n        require(!isContract(_to) || !isContract(_from));\r\n        if (isContract(_to)) return _from;\r\n        else return _to;\r\n    }\r\n\r\n    function ensureMaxTxFrequency(address addr) view private {\r\n        bool isAllowed = _lastTradeBlock[addr] == 0 ||\r\n            ((_lastTradeBlock[addr] + tradeCooldown) < (block.number + 1));\r\n        require(isAllowed, \"Max tx frequency exceeded!\");\r\n    }\r\n\r\n    function toggleAntiMEV(bool toggle) external {\r\n        require(msg.sender == wallets.deployerWallet);\r\n        antiMEV = toggle;\r\n\r\n        emit AntiMEVToggled(toggle);\r\n    }\r\n\r\n    function setTradeCooldown(uint256 newTradeCooldown) external {\r\n        require(msg.sender == wallets.deployerWallet);\r\n        require(newTradeCooldown > 0 && newTradeCooldown < 4, \"Token: only trade cooldown values in range (0,4) permissible\");\r\n        tradeCooldown = newTradeCooldown;\r\n\r\n        emit TradeCooldownChanged(newTradeCooldown);\r\n    }\r\n\r\n    function setContractExempt(address account, bool value) external onlyOwner {\r\n        require(account != address(this));\r\n        isContractExempt[account] = value;\r\n\r\n        emit SetContractExempt(account, value);\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingActive && genesisBlock != 0);\r\n        genesisBlock+=block.number+_block;\r\n        tradingActive = true;\r\n\r\n        emit TradingOpened();\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"AntiMEVToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"SetContractExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTradeCooldown\",\"type\":\"uint256\"}],\"name\":\"TradeCooldownChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToClear\",\"type\":\"address\"}],\"name\":\"clearTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shouldEnable\",\"type\":\"bool\"}],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"shouldExclude\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blocks\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"preparation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"reduceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setContractExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTradeCooldown\",\"type\":\"uint256\"}],\"name\":\"setTradeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"toggleAntiMEV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GreenPotionErc", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d3e532536cc9693292cb2997666c356653b6eb5791aa242b8674921f8cb21ab"}