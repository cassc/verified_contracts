{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ordify-contracts-copied/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nstruct CreateVestingInput {\\n    address user;\\n    uint128 amount;\\n}\\n\\n/**\\n * @param rate percentage vested from total amount during the phase in BPS\\n * @param endAt Time when phase ends\\n * @param minimumClaimablePeriod for linear vesting it would be \\\"1 seconds\\\", for weekly westing it would be \\\"1 weeks\\\", if not set(set to zero) user will be able to claim only after phase ends\\n */\\nstruct Phase {\\n    uint32 rate;\\n    uint40 endAt;\\n    uint32 minimumClaimablePeriod;\\n}\\n\\n/**\\n * @title Vesting\\n * @dev no user can claim while contract is in locked state\\n * @dev Contract that is used for token vesting by some predefined schedule. It supports cases when part(percentage) of the token was already given\\n * to users and rest will be claimed here. It supports many phases and cliff at the start. Also it supports vesting by block, which means user can vest every block some tokens, \\n * by percentage defined in phase percetage.\\n * For time we are using uint40, which max number is 1099511627776, presented in seconds is more than suitable for our usage.\\n */\\ncontract Vesting is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @param amount Total amount allocated for user\\n     * @param amountClaimed Total amount claimed by user so far\\n     * @param lastClaimAt Timestamp from user last claim\\n     */\\n    struct UserVesting {\\n        uint40 lastClaimAt;\\n        bool init;\\n        // during refundGracePeriod (i.e. 1, 3 or 7 days after vesting starts, user can request refund if did not claim any tokens)\\n        // after refundGracePeriod expires, user will be then enabled refund on fundraise chain.\\n        bool requestedRefund;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n    }\\n\\n    uint128 public constant BASIS_POINT_RATE_CONVERTER = 10_000; // Basis Points(bps) 1% = 100bps\\n    uint256 public constant MAX_ALLOWED_PHASES = 30;\\n\\n    string public name;\\n\\n    bool public refundMode; \\n    bool public requestedRefundWithdrawn;\\n    bool public refundWithdrawn;\\n    uint40 public startDateAt;\\n    uint40 public vestingEndAt;\\n    uint16 public claimableAtStart; // in BPS\\n    uint32  public refundGracePeriodDuration; // in seconds\\n\\n    IERC20 public vestedToken;\\n\\n    // when refund mode is on this means complete project will be refunded as terms has been nreached. \\n    // i.e. price is bellow IDO Price after 48 hours, etc. \\n    uint256 public totalAmountAllocated; // Amount owner allocated for all users\\n    uint256 public totalAmountClaimed; // Amount claimed by all users\\n    uint256 public totalAmountRefundRequested; // Amount reserved for refund, requested by users\\n\\n    Phase[] public phases;\\n    mapping(address => UserVesting) public vestings;\\n    \\n    // it is hard to add user and then remove it if cancle requestRefund. SO here wew ill store all users\\n    // that requestedRefund. Later we will check flag in UserVesting\\n    address[] public refundRequestedUsersAtLeastOnce;\\n\\n    event NewVestingCreated(address indexed user, uint256 amount);\\n    event NewClaim(address indexed user, uint256 amountClaimed);\\n    event RefundRequested(address indexed user);\\n    event RefundRequestedPulledBack(address indexed user);\\n    event RefundRequestedWithdrawn(address indexed user, uint256 amount);\\n    event RefundForAllWithdrawn(address indexed user, uint256 amount);\\n\\n    constructor(\\n        IERC20 _vestedToken,\\n        string memory _name,\\n        uint40 _startDateAt,\\n        uint16 _claimableAtStart,\\n        Phase[] memory _phases,\\n        uint32 _refundGracePeriodDuration\\n    ) payable Ownable() {\\n        _initialize(\\n            _vestedToken,\\n            _name,\\n            _startDateAt,\\n            _claimableAtStart,\\n            _phases,\\n            _refundGracePeriodDuration\\n        );\\n    }\\n\\n    /**\\n     * @notice owner can reinitialize vesting schedule only if vesting did not started\\n     */\\n    function reinitialize(\\n        IERC20 _vestedToken,\\n        string memory _name,\\n        uint40 _startDateAt,\\n        uint16 _claimableAtStart,\\n        Phase[] memory _phases,\\n        uint32 _refundGracePeriodDuration\\n    ) external onlyOwner {\\n        require(totalAmountClaimed == 0, \\\"claim already started\\\");\\n \\n        _initialize(\\n            _vestedToken,\\n            _name,\\n            _startDateAt,\\n            _claimableAtStart,\\n            _phases,\\n            _refundGracePeriodDuration\\n        );\\n    }\\n\\n    function getNumberOfRefundRequestedUsersAtLeastOnce() public view returns (uint256) {\\n        return refundRequestedUsersAtLeastOnce.length;\\n    }\\n\\n    function getRefundRequestedUsersAtLeastOnceVesting(uint256 index) public view returns (UserVesting memory userVesting) {\\n        address user = refundRequestedUsersAtLeastOnce[index];\\n\\n        userVesting = vestings[user];\\n    }\\n\\n    /**\\n     * @notice this is to make vesting refundMode. This method is used if e.g we will refund launchpad but we need to return not vested tokens, we need to make it \\n     * to stop vesting contract.\\n     */\\n    function setRefundMode(bool _refundMode) external onlyOwner {\\n        refundMode = _refundMode;\\n    }\\n\\n    function getUserVesting(address _userAddress) public view returns (UserVesting memory) {\\n        return vestings[_userAddress];\\n    }\\n\\n    /**\\n     * @notice create vesting for user, only one vesting per user address\\n     * @dev owner needs to first deploy enough tokens to vesting contract address\\n     */\\n    function createVestings(CreateVestingInput[] calldata vestingsInput, bool depositCheck) external onlyOwner {\\n        require(vestingsInput.length > 0, \\\"vestingsInput empty\\\");\\n        require(block.timestamp < startDateAt, \\\"vesting started\\\");\\n\\n        uint256 totalDepositedAmount = getDepositedAmount();\\n        uint256 amountAllocated;\\n\\n        for (uint64 i = 0; i < vestingsInput.length; i++) {\\n            amountAllocated += vestingsInput[i].amount;\\n        }\\n\\n        if (depositCheck) {\\n            uint256 totalTokenAvailable = totalDepositedAmount + totalAmountClaimed - totalAmountAllocated;\\n            require(totalTokenAvailable >= amountAllocated, \\\"not enough token deposited\\\");\\n        }\\n\\n        for (uint64 i = 0; i < vestingsInput.length; i++) {\\n            _createVesting(vestingsInput[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev method which is used for claiming if any tokens are available for claim\\n     */\\n    function claim() external nonReentrant {\\n        require(!refundMode, \\\"vesting is refunded\\\");\\n\\n        address user = _msgSender();\\n        UserVesting storage vesting = vestings[user];\\n        require(!vesting.requestedRefund, \\\"user req refund\\\");\\n\\n        require(vesting.init, \\\"user is not participating\\\");\\n        require(vesting.amount - vesting.amountClaimed > 0, \\\"all amount claimed\\\");\\n        \\n        uint256 claimableAmount = _claimable(vesting);\\n        require(getDepositedAmount() >= claimableAmount, \\\"not enough token deposited for claim\\\");\\n\\n        require(claimableAmount > 0, \\\"nothing to claim currently\\\");\\n\\n        totalAmountClaimed += claimableAmount;\\n        vesting.amountClaimed += claimableAmount;\\n        vesting.lastClaimAt = uint40(block.timestamp);\\n\\n        assert(vesting.amountClaimed <= vesting.amount);\\n        assert(totalAmountClaimed <= totalAmountAllocated);\\n\\n        vestedToken.safeTransfer(user, claimableAmount);\\n        emit NewClaim(user, claimableAmount);\\n    }\\n\\n    /**\\n     * @dev return amount user can claim from locked tokens at the moment\\n     */\\n    function claimable(address _user) external view returns (uint256 amount) {\\n        if (refundMode) {\\n            return 0;\\n        }\\n\\n        amount = _claimable(vestings[_user]);\\n    }\\n\\n    function getDepositedAmount() public view returns (uint256 amount) {\\n        amount = vestedToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev method which is used for user to request refund\\n     */\\n    function requestRefund() external nonReentrant {\\n        address user = _msgSender();\\n        UserVesting storage vesting = vestings[user];\\n\\n        require(vesting.init, \\\"user is not participating\\\");\\n        require(vesting.amountClaimed == 0, \\\"user already claimed\\\");\\n        require(block.timestamp <= (startDateAt + refundGracePeriodDuration), \\\"refund period passed\\\");\\n\\n        vesting.requestedRefund = true;\\n        totalAmountRefundRequested += vesting.amount;\\n        totalAmountAllocated -= vesting.amount;\\n        refundRequestedUsersAtLeastOnce.push(user);\\n        \\n        emit RefundRequested(user);\\n    }\\n\\n    /**\\n     * @dev method which is used for user to request refund\\n     */\\n    function pullBackRequestRefund() external nonReentrant {\\n        address user = _msgSender();\\n        UserVesting storage vesting = vestings[user];\\n\\n        require(vesting.init, \\\"user is not participating\\\");\\n        require(vesting.amountClaimed == 0, \\\"user already claimed\\\");\\n        require(vesting.requestedRefund, \\\"nothin to pull back\\\");\\n        require(block.timestamp <= (startDateAt + refundGracePeriodDuration), \\\"refund period passed\\\");\\n        \\n        vesting.requestedRefund = false;\\n        totalAmountRefundRequested -= vesting.amount;\\n        totalAmountAllocated += vesting.amount;\\n\\n        emit RefundRequestedPulledBack(user);\\n    }\\n\\n    /**\\n     * @dev Returns time until next vesting batch will be unlocked for vesting contract provided in arguments\\n     * in case of linear vesting (or next block vesting) it is returned 1, which for the caller indicates it will be next block\\n     * for other use cases it is returned time when next phase will be available\\n     */\\n    function nextBatchAt() external view returns (uint256) {\\n        if (block.timestamp >= vestingEndAt) {\\n            return vestingEndAt;\\n        }\\n\\n        // we assume all vesting contracts release at least some funds on start date/TGE\\n        if (block.timestamp < startDateAt) {\\n            return startDateAt;\\n        }\\n\\n        uint256 nextBatchIn;\\n        uint256 prevEndDate = startDateAt;\\n        \\n        // iterate over phases until we find current phase contract does not returns phases length\\n        for (uint256 i = 0; block.timestamp > prevEndDate; i++) {\\n            Phase memory phase = phases[i];\\n            if (block.timestamp <= phase.endAt) {\\n                // vesting per sec/block\\n                if (phase.minimumClaimablePeriod == 1) {\\n                    nextBatchIn = 1;\\n                } else if (phase.minimumClaimablePeriod == 0) {\\n                    // vested at the end of the phase\\n                    nextBatchIn = phase.endAt;\\n                } else {\\n                    // if the funds are released in batches in current phase every `minimumClaimablePeriod` time,\\n                    nextBatchIn = block.timestamp + phase.minimumClaimablePeriod - ((block.timestamp - prevEndDate) % phase.minimumClaimablePeriod);\\n                }\\n                break;\\n            }\\n            \\n            prevEndDate = phase.endAt;\\n        }\\n\\n        return nextBatchIn;\\n    }\\n\\n    /**\\n     * @notice rescue any token accidentally sent to this contract\\n     */\\n    function emergencyWithdrawToken(IERC20 token) external onlyOwner {\\n        token.safeTransfer(_msgSender(), token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Move vesting to another address in case user lose access to his original account\\n    */\\n    function moveVesting(address from, address to) external onlyOwner {\\n        UserVesting memory vestingFrom = vestings[from];\\n        require(vestingFrom.init, \\\"`from` no active vesting\\\");\\n        require(vestingFrom.amount - vestingFrom.amountClaimed > 0, \\\"`from` all amount claimed\\\");\\n\\n        UserVesting memory vestingTo = vestings[to];\\n        require(!vestingTo.init, \\\"`to` has registered listing\\\");\\n        require(to != address(0), \\\"`to` must not be 0 addr\\\");\\n\\n        vestings[to] = vestingFrom;\\n        delete vestings[from];\\n    }\\n\\n    /**\\n     * @dev withdraw toknes which requested refund. These tokens will be returned to the project and user will be enabled refund on fundraiseChain\\n     */\\n    function withdrawRequestRefundToken() external onlyOwner {\\n        require(!requestedRefundWithdrawn, \\\"already withdrawn\\\");\\n        require(block.timestamp > startDateAt + refundGracePeriodDuration, \\\"refund period active\\\");\\n        uint256 vestedbalance = vestedToken.balanceOf(address(this));\\n        require(vestedbalance >= totalAmountRefundRequested, \\\"not enough tokens\\\");\\n\\n        requestedRefundWithdrawn = true;\\n        vestedToken.safeTransfer(msg.sender, totalAmountRefundRequested);\\n\\n        emit RefundRequestedWithdrawn(msg.sender, totalAmountRefundRequested);\\n    }\\n\\n    /**\\n     * @dev withdraw refund tokens. These tokens will be returned to project and user will be enabled refund on fundraiseChain\\n     */\\n    function withdrawRefundForAll() external onlyOwner {\\n        require(!refundWithdrawn, \\\"already withdrawn\\\");\\n        require(refundMode, \\\"refund mode is off\\\");\\n\\n        refundWithdrawn = true;\\n        vestedToken.safeTransfer(msg.sender, vestedToken.balanceOf(address(this)));\\n\\n        emit RefundForAllWithdrawn(msg.sender, totalAmountRefundRequested);\\n    }\\n\\n    function _initialize(\\n        IERC20 _vestedToken,\\n        string memory _name,\\n        uint40 _startDateAt,\\n        uint16 _claimableAtStart,\\n        Phase[] memory _phases,\\n        uint32 _refundGracePeriodDuration\\n    ) private {\\n        require(_phases.length <= MAX_ALLOWED_PHASES, \\\"phases size exceeds max allowed\\\");\\n\\n        uint256 prevStartDate = _startDateAt;\\n        uint256 total = _claimableAtStart;\\n        for (uint256 i = 0; i < _phases.length; i++) {\\n            Phase memory phase = _phases[i];\\n\\n            require(phase.endAt > prevStartDate, \\\"phases not ordered\\\");\\n            \\n            total += phase.rate;\\n            prevStartDate = phase.endAt;\\n        }\\n\\n        require(total == BASIS_POINT_RATE_CONVERTER, \\\"total == 10000\\\");\\n        require(address(_vestedToken) != address(0), \\\"vesttedToken address is zero\\\");\\n        \\n        name = _name;\\n        vestedToken = _vestedToken;\\n        startDateAt = _startDateAt;\\n        // set vesting end date to last phase end date, if there is not phases then set end date to start date(e.g. for 100% claim at TGE)\\n        vestingEndAt = _phases.length > 0\\n            ? _phases[_phases.length - 1].endAt\\n            : _startDateAt;\\n        claimableAtStart = _claimableAtStart;\\n        // clear the phases array in case of reinitialization\\n        delete phases;\\n        for (uint256 i = 0; i < _phases.length; i++) {\\n            phases.push(_phases[i]);\\n        }\\n\\n        refundGracePeriodDuration = _refundGracePeriodDuration;\\n    }\\n\\n    /**\\n     * @dev create vesting for an user\\n     */\\n    function _createVesting(CreateVestingInput memory v) private {\\n        require(v.user != address(0), \\\"user address is zero\\\");\\n        require(v.amount > 0, \\\"amount is zero\\\");\\n        require(vestings[v.user].amount == 0, \\\"one vesting per addr\\\");\\n\\n        totalAmountAllocated += v.amount;\\n\\n        vestings[v.user] = UserVesting({\\n            init: true,\\n            amount: v.amount,\\n            amountClaimed: 0,\\n            lastClaimAt: 0,\\n            requestedRefund: false\\n        });\\n\\n        emit NewVestingCreated(v.user, v.amount);\\n    }\\n\\n    /**\\n     * @dev claimable amount available at the time function is called\\n     */\\n    function _claimable(UserVesting memory v) private view returns (uint256 amount) {\\n        if (refundMode || v.requestedRefund) {\\n            // refundMode is on or user requested refund\\n            return 0;\\n        } else if (block.timestamp < startDateAt) {\\n            // vesting has not started\\n            return 0;\\n        }\\n\\n        uint256 amountLeft = v.amount - v.amountClaimed;\\n        // user already claimed everything\\n        if (amountLeft == 0) return 0;\\n\\n        if (block.timestamp >= vestingEndAt) {\\n            // if vesting ended return everything left\\n            amount = amountLeft;\\n        } else {\\n            if (v.lastClaimAt == 0) {\\n                // if this is first claim also calculate amount available at start\\n                amount += (claimableAtStart * v.amount) / BASIS_POINT_RATE_CONVERTER;\\n            }\\n            uint256 prevEndDate = startDateAt;\\n            for (uint256 i = 0; i < phases.length; i++) {\\n                Phase memory phase = phases[i];\\n                uint40 phaseLength = uint40(phase.endAt - prevEndDate);\\n\\n                // if last claim time is larger than the end of phase then skip it, already calculated in previous claim\\n                if (v.lastClaimAt < phase.endAt) {\\n                    if (block.timestamp >= phase.endAt && phase.minimumClaimablePeriod == 0) {\\n                        // if phase completely passed then calculate amount with every second in phase\\n                        amount += (v.amount * phase.rate) / BASIS_POINT_RATE_CONVERTER;\\n                    } else if (phase.minimumClaimablePeriod != 0) {\\n                        uint40 start = uint40(max(v.lastClaimAt, prevEndDate));\\n                        uint40 end = uint40(min(block.timestamp, phase.endAt));\\n\\n                        // only take full increments of minimumClaimablePeriod in calculation of amount. \\n                        // e.g. if end (current block.timestamp) is at 170, and start is at 100,  and if minimumClaimable perios is 20s. \\n                        // then we have following: end - start = 170 - 100 = 70, and of that 70 we can only take in calculation 60 seconds, only full amount of claimable period.\\n                        // timePassed = 170 - 100 - ((170 - 100) % 20) = 70 - (70 % 20) = 70 - 10 = 60\\n                        uint40 timePassed = end - start - ((end - start) % phase.minimumClaimablePeriod);\\n\\n                        amount += (v.amount * phase.rate * timePassed) / (phaseLength * BASIS_POINT_RATE_CONVERTER);\\n                    }\\n\\n                    if (block.timestamp < phase.endAt) {\\n                        // if current time is less than end of this phase then there is no need to calculate remaining phases\\n                        break;\\n                    }\\n                }\\n                prevEndDate = phase.endAt;\\n            }\\n        }\\n\\n        return min(amount, amountLeft);\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_vestedToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint40\",\"name\":\"_startDateAt\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"_claimableAtStart\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"endAt\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"minimumClaimablePeriod\",\"type\":\"uint32\"}],\"internalType\":\"struct Phase[]\",\"name\":\"_phases\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"_refundGracePeriodDuration\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"NewClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewVestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundForAllWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RefundRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RefundRequestedPulledBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundRequestedWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINT_RATE_CONVERTER\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ALLOWED_PHASES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableAtStart\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct CreateVestingInput[]\",\"name\":\"vestingsInput\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"depositCheck\",\"type\":\"bool\"}],\"name\":\"createVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfRefundRequestedUsersAtLeastOnce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRefundRequestedUsersAtLeastOnceVesting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"lastClaimAt\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requestedRefund\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.UserVesting\",\"name\":\"userVesting\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserVesting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"lastClaimAt\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requestedRefund\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.UserVesting\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"moveVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBatchAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"endAt\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"minimumClaimablePeriod\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullBackRequestRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundGracePeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundRequestedUsersAtLeastOnce\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_vestedToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint40\",\"name\":\"_startDateAt\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"_claimableAtStart\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"rate\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"endAt\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"minimumClaimablePeriod\",\"type\":\"uint32\"}],\"internalType\":\"struct Phase[]\",\"name\":\"_phases\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"_refundGracePeriodDuration\",\"type\":\"uint32\"}],\"name\":\"reinitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestedRefundWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_refundMode\",\"type\":\"bool\"}],\"name\":\"setRefundMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDateAt\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountRefundRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEndAt\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"lastClaimAt\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"init\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requestedRefund\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRefundForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRequestRefundToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cf078da6e85389de507ceede0e3d217e457b9d4900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000665993e800000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000000000001d4f7264696479202d20536b696c6c66756c6c2041692056657374696e67000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066827268000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023280000000000000000000000000000000000000000000000000000000067ebad680000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}