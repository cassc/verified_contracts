{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ncontract PatternVault {\r\n    address public rootAccount;\r\n    mapping(address => bool) public traders;\r\n    mapping(address => bool) public tokens;\r\n    mapping(address => bool) public protocols;\r\n    string public contractName;\r\n\r\n    event TraderAdded(address indexed trader);\r\n    event TraderRemoved(address indexed trader);\r\n    event TokenAdded(address indexed token);\r\n    event TokenRemoved(address indexed token);\r\n    event ProtocolAdded(address indexed protocol);\r\n    event ProtocolRemoved(address indexed protocol);\r\n    event Withdrawn(address indexed to, uint256 amount, address indexed token);\r\n    event Transferred(address indexed sender, uint256 amount, address indexed token, address indexed protocol);\r\n    event TradeContractAddress(address indexed external_contract, bytes call_data);\r\n\r\n    modifier onlyRoot() {\r\n        require(msg.sender == rootAccount, \"Only root account can perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTrader() {\r\n        require(traders[msg.sender], \"Only traders can perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPatternVault() {\r\n        require(msg.sender == address(this), \"Only PatternVault contract can perform this action\");\r\n        _;\r\n    }\r\n\r\n    constructor(string memory _name) {\r\n        rootAccount = msg.sender;\r\n        contractName = _name;\r\n    }\r\n\r\n    function addTrader(address _trader) external onlyRoot {\r\n        traders[_trader] = true;\r\n        emit TraderAdded(_trader);\r\n    }\r\n\r\n    function removeTrader(address _trader) external onlyRoot {\r\n        traders[_trader] = false;\r\n        emit TraderRemoved(_trader);\r\n    }\r\n\r\n    function addToken(address _token) external onlyRoot {\r\n        tokens[_token] = true;\r\n        emit TokenAdded(_token);\r\n    }\r\n\r\n    function removeToken(address _token) external onlyRoot {\r\n        tokens[_token] = false;\r\n        emit TokenRemoved(_token);\r\n    }\r\n\r\n    function addProtocol(address _protocol) external onlyRoot {\r\n        protocols[_protocol] = true;\r\n        emit ProtocolAdded(_protocol);\r\n    }\r\n\r\n    function removeProtocol(address _protocol) external onlyRoot {\r\n        protocols[_protocol] = false;\r\n        emit ProtocolRemoved(_protocol);\r\n    }\r\n\r\n    function withdraw(address _to, uint256 _amount, address _token) external onlyRoot {\r\n        IERC20 token = IERC20(_token);\r\n        require(token.balanceOf(address(this)) >= _amount, \"Insufficient balance\");\r\n        token.transfer(_to, _amount);\r\n        emit Withdrawn(_to, _amount, _token);\r\n    }\r\n\r\n    function transfer(uint256 _amount, address _token, address _protocol) external onlyPatternVault {\r\n        require(tokens[_token], \"Token is not allowed to trade\");\r\n        require(protocols[_protocol], \"Protocol is not allowed to trade\");\r\n\r\n        IERC20 token = IERC20(_token);\r\n        require(token.balanceOf(address(this)) >= _amount, \"Insufficient contract balance\");\r\n        token.transfer(_protocol, _amount);\r\n\r\n        emit Transferred(msg.sender, _amount, _token, _protocol);\r\n    }\r\n\r\n    function trade(address[] calldata _contracts, bytes[] calldata _data) external onlyTrader {\r\n        require(_contracts.length == _data.length, \"Contracts and data length mismatch\");\r\n\r\n        for (uint256 i = 0; i < _contracts.length; i++) {\r\n            require(\r\n                _contracts[i] == address(this) || protocols[_contracts[i]] == true,\r\n                \"Contract address not allowed\"\r\n            );\r\n\r\n            emit TradeContractAddress(_contracts[i], _data[i]);\r\n\r\n            (bool success, bytes memory returnData) = _contracts[i].call(_data[i]);\r\n            require(success, string(abi.encodePacked(\"External call failed: \", returnData)));\r\n        }\r\n    }\r\n\r\n    // Get name of this contract\r\n    function getName() external view returns (string memory) {\r\n        return contractName;\r\n    }\r\n\r\n    // Get the root account address\r\n    function getRootAccount() external view returns (address) {\r\n        return rootAccount;\r\n    }\r\n\r\n    // Check if an address is a trader\r\n    function isTrader(address _address) external view returns (bool) {\r\n        return traders[_address];\r\n    }\r\n\r\n    // Check if a token is allowed\r\n    function isTokenAllowed(address _token) external view returns (bool) {\r\n        return tokens[_token];\r\n    }\r\n\r\n    // Check if a protocol is allowed\r\n    function isProtocolAllowed(address _protocol) external view returns (bool) {\r\n        return protocols[_protocol];\r\n    }\r\n\r\n    // For piranha query\r\n    function getAllBalances(address[] calldata _tokens) external view returns (TokenBalance[] memory) {\r\n        TokenBalance[] memory balances = new TokenBalance[](_tokens.length);\r\n\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            IERC20 token = IERC20(_tokens[i]);\r\n            uint256 balance = token.balanceOf(address(this));\r\n            string memory tokenName = token.name();\r\n            balances[i] = TokenBalance(_tokens[i], tokenName, balance);\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    struct TokenBalance {\r\n        address tokenAddress;\r\n        string name;\r\n        uint256 amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"ProtocolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"ProtocolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"external_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"call_data\",\"type\":\"bytes\"}],\"name\":\"TradeContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"TraderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"TraderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"addTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getAllBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PatternVault.TokenBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"isProtocolAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"removeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"removeTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"traders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PatternVault", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000205061747465726e5661756c745465737431202d206e6f6e6520466f7264656669", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8146f9a4feecaa432527b60a5ae27ca122102ddcfac52869ec74227426418f30"}