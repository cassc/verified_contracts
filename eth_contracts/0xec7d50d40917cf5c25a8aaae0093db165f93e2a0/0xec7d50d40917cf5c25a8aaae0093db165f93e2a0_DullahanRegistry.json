{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/modules/DullahanRegistry.sol\": {\r\n      \"content\": \"//\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n//\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n//\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n//\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\n\\npragma solidity 0.8.16;\\n//SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"../utils/Owner.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/** @title Dullahan Registry contract\\n *  @author Paladin\\n *  @notice Registry, for all Aave related addresses & some Dullahan addresses\\n */\\ncontract DullahanRegistry is Owner {\\n\\n    // Storage\\n\\n    /** @notice Address of the stkAAVE token */\\n    address public immutable STK_AAVE;\\n    /** @notice Address of the AAVE token */\\n    address public immutable AAVE;\\n\\n    /** @notice Address of the GHO token */\\n    address public immutable GHO;\\n    /** @notice Address of the GHO debt token */\\n    address public immutable DEBT_GHO;\\n\\n    /** @notice Address of the Aave v3 Pool */\\n    address public immutable AAVE_POOL_V3;\\n\\n    /** @notice Address of the Aave rewards controller */\\n    address public immutable AAVE_REWARD_COONTROLLER;\\n\\n    /** @notice Address of the Dullahan Vault */\\n    address public dullahanVault;\\n\\n    /** @notice Address of Dullahan Pod Managers */\\n    address[] public dullahanPodManagers;\\n\\n    // Events\\n\\n    /** @notice Event emitted when the Vault is set */\\n    event SetVault(address indexed vault);\\n    /** @notice Event emitted when a Manager is added */\\n    event AddPodManager(address indexed newManager);\\n\\n\\n    // Constructor\\n    constructor(\\n        address _aave,\\n        address _stkAave,\\n        address _gho,\\n        address _ghoDebt,\\n        address _aavePool,\\n        address _aaveRewardController\\n    ) {\\n        if(\\n            _aave == address(0)\\n            || _stkAave == address(0)\\n            || _gho == address(0)\\n            || _ghoDebt == address(0)\\n            || _aavePool == address(0)\\n            || _aaveRewardController == address(0)\\n        ) revert Errors.AddressZero();\\n\\n        STK_AAVE = _stkAave;\\n        AAVE = _aave;\\n\\n        GHO = _gho;\\n        DEBT_GHO = _ghoDebt;\\n\\n        AAVE_POOL_V3 = _aavePool;\\n\\n        AAVE_REWARD_COONTROLLER = _aaveRewardController;\\n    }\\n\\n    /**\\n    * @notice Set the Dullahan Vault\\n    * @param vault address of the vault\\n    */\\n    function setVault(address vault) external onlyOwner {\\n        if(vault == address(0)) revert Errors.AddressZero();\\n        if(dullahanVault != address(0)) revert Errors.VaultAlreadySet();\\n\\n        dullahanVault = vault;\\n\\n        emit SetVault(vault);\\n    }\\n\\n    /**\\n    * @notice Add a Pod Manager\\n    * @param manager Address of the new manager\\n    */\\n    function addPodManager(address manager) external onlyOwner {\\n        if(manager == address(0)) revert Errors.AddressZero();\\n\\n        // Check in the Manager list that it's not already present\\n        address[] memory _managers = dullahanPodManagers;\\n        uint256 length = _managers.length;\\n        for(uint256 i; i < length;){\\n            if(_managers[i] == manager) revert Errors.AlreadyListedManager();\\n            unchecked { ++i; }\\n        }\\n\\n        dullahanPodManagers.push(manager);\\n\\n        emit AddPodManager(manager);\\n    }\\n\\n    /**\\n    * @notice Get the list of Pod Managers\\n    * @return address[] : List of Pod Managers\\n    */\\n    function getPodManagers() external view returns(address[] memory) {\\n        return dullahanPodManagers;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/oz/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.16;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary Errors {\\n\\n    // Common Errors\\n    error AddressZero();\\n    error NullAmount();\\n    error IncorrectRewardToken();\\n    error SameAddress();\\n    error InequalArraySizes();\\n    error EmptyArray();\\n    error EmptyParameters();\\n    error NotInitialized();\\n    error AlreadyInitialized();\\n    error CannotInitialize();\\n    error InvalidParameter();\\n    error CannotRecoverToken();\\n    error NullWithdraw();\\n    error AlreadyListedManager();\\n    error NotListedManager();\\n\\n    // Access Control Erros\\n    error CallerNotAdmin();\\n    error CannotBeAdmin();\\n    error CallerNotPendingAdmin();\\n    error CallerNotAllowed();\\n\\n    // ERC20 Errors\\n    error ERC20_ApproveAddressZero();\\n    error ERC20_AllowanceUnderflow();\\n    error ERC20_AmountOverAllowance();\\n    error ERC20_AddressZero();\\n    error ERC20_SelfTransfer();\\n    error ERC20_NullAmount();\\n    error ERC20_AmountExceedBalance();\\n\\n    // Maths Errors\\n    error NumberExceed96Bits();\\n    error NumberExceed128Bits();\\n    error NumberExceed248Bits();\\n\\n    // Vault Errors\\n    error ManagerAlreadyListed();\\n    error ManagerNotListed();\\n    error NotEnoughAvailableFunds();\\n    error WithdrawBuffer();\\n    error ReserveTooLow();\\n    error CallerNotAllowedManager();\\n    error NotUndebtedManager();\\n    error AmountExceedsDebt();\\n\\n    // Vaults Rewards Errors\\n    error NullScaledAmount();\\n    error AlreadyListedDepositor();\\n    error NotListedDepositor();\\n    error ClaimNotAllowed();\\n\\n    // Pods Errors\\n    error NotPodOwner();\\n    error NotPodManager();\\n    error FailPodStateUpdate();\\n    error MintAmountUnderMinimum();\\n    error RepayFailed();\\n\\n    // Pods Manager Errors\\n    error CallerNotValidPod();\\n    error CollateralBlocked();\\n    error MintingAllowanceFailed();\\n    error FreeingStkAaveFailed();\\n    error CollateralAlreadyListed();\\n    error CollateralNotListed();\\n    error CollateralNotAllowed();\\n    error PodInvalid();\\n    error FailStateUpdate();\\n    error PodNotLiquidable();\\n\\n    // Registry Errors\\n    error VaultAlreadySet();\\n\\n    // Zap Errors\\n    error InvalidSourceToken();\\n    error DepositFailed();\\n\\n    // Wrapper Errors\\n    error NullConvertedAmount();\\n\\n}\"\r\n    },\r\n    \"contracts/utils/Owner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../oz/utils/Ownable.sol\\\";\\n\\n/** @title Extend OZ Ownable contract  */\\n/// @author Paladin\\n\\ncontract Owner is Ownable {\\n\\n    address public pendingOwner;\\n\\n    event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\\n\\n    error CannotBeOwner();\\n    error CallerNotPendingOwner();\\n    error OwnerAddressZero();\\n\\n    function transferOwnership(address newOwner) public override virtual onlyOwner {\\n        if(newOwner == address(0)) revert OwnerAddressZero();\\n        if(newOwner == owner()) revert CannotBeOwner();\\n        address oldPendingOwner = pendingOwner;\\n\\n        pendingOwner = newOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newOwner);\\n    }\\n\\n    function acceptOwnership() public virtual {\\n        if(msg.sender != pendingOwner) revert CallerNotPendingOwner();\\n        address newOwner = pendingOwner;\\n        _transferOwnership(pendingOwner);\\n        pendingOwner = address(0);\\n\\n        emit NewPendingOwner(newOwner, address(0));\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aave\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stkAave\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gho\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ghoDebt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aavePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveRewardController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyListedManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"AddPodManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"SetVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_POOL_V3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_REWARD_COONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_GHO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GHO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STK_AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addPodManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dullahanPodManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dullahanVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPodManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DullahanRegistry", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f500000000000000000000000040d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f000000000000000000000000786dbff3f1292ae8f92ea68cf93c30b34b1ed04b00000000000000000000000087870bca3f3fd6335c3f4ce8392d69350b4fa4e20000000000000000000000008164cc65827dcfe994ab23944cbc90e0aa80bfcb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}