{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-03-12\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract Vault is ReentrancyGuard {\r\n    IERC20 public token;\r\n\r\n    \r\n\r\n    address owner;\r\n    address dev;\r\n    address teamMember1;\r\n    address teamMember2;\r\n    address teamMember3;\r\n    address teamMember4;  \r\n    address teamMember5;  \r\n    address teamMember6;  \r\n    address teamMember7;\r\n\r\n   struct Team {\r\n    address member;\r\n    uint256 amountDue;\r\n    uint256 amountClaimed;\r\n    uint256 nextClaim;\r\n    uint8 timesClaimed;\r\n   }\r\n\r\n   struct Partner {\r\n    address member;\r\n    uint256 amountDue;\r\n    uint256 amountClaimed;\r\n    uint256 nextClaim;\r\n    uint8 timesClaimed;\r\n   }\r\n\r\n   \r\n   uint8 public partnerLimit = 60;\r\n   uint8 public partnerTotal = 0;\r\n\r\n   uint8 public partnerVestingPeriods = 24;\r\n   uint8 public teamVestingPeriods = 24;\r\n\r\n   uint8 public partnerVestingPercent = 33; \r\n   uint8 public teamVestingPercent = 33;\r\n\r\n\r\n    uint8 public tgePercent = 200; //This number is the % multiplied by 10\r\n\r\n   \r\n\r\n   \r\n    mapping (address => Team) public team;\r\n    mapping (address => Partner) public partner;\r\n    \r\n\r\n    \r\n    uint256 public totalTLB = 3 * 10 **9 * 10 **18;\r\n    uint256 public tge = 1711998000; //1711998000 April 1, 2024 (arbitrary)\r\n    \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address  _owner,\r\n        address _dev,\r\n        address _teamMember1,\r\n        address _teamMember2,\r\n        address _teamMember3,\r\n        address _teamMember4,\r\n        address _teamMember5,\r\n        address _teamMember6,\r\n        address _teamMember7\r\n    ) {\r\n\r\n        owner = _owner;\r\n        dev = _dev;\r\n        teamMember1 = _teamMember1;\r\n        teamMember2 = _teamMember2;\r\n        teamMember3 = _teamMember3;\r\n        teamMember4 = _teamMember4;\r\n        teamMember5 = _teamMember5;\r\n        teamMember6 = _teamMember6;\r\n        teamMember7 = _teamMember7;\r\n\r\n        team[_owner] = Team(\r\n            _owner,\r\n            (totalTLB * 8)/100,\r\n            0,\r\n            tge,\r\n            0          \r\n        );\r\n        team[_dev] = Team(\r\n            _dev,\r\n            (totalTLB * 1)/100,\r\n            0,\r\n            tge,\r\n            0\r\n        );\r\n        team[_teamMember1] = Team(\r\n            _teamMember1,\r\n            (totalTLB * 5)/1000,\r\n            0,\r\n            tge,\r\n            0\r\n        );\r\n        team[_teamMember2] = Team(\r\n            _teamMember2,\r\n            (totalTLB * 5)/1000,\r\n            0,\r\n            tge,\r\n            0\r\n        );\r\n        team[_teamMember3] = Team(\r\n            _teamMember3,\r\n            (totalTLB * 1)/100,\r\n            0,\r\n            tge,\r\n            0\r\n        );\r\n        team[_teamMember4] = Team(\r\n            _teamMember4,\r\n            (totalTLB * 1)/100,\r\n            0,\r\n            tge,\r\n            0\r\n        );\r\n         team[_teamMember5] = Team(\r\n            _teamMember5,\r\n            (totalTLB * 5)/1000,\r\n            0,\r\n            tge,\r\n            0\r\n        );\r\n         team[_teamMember6] = Team(\r\n            _teamMember6,\r\n            (totalTLB * 25)/10000,\r\n            0,\r\n            tge,\r\n            0\r\n        );\r\n         team[_teamMember7] = Team(\r\n            _teamMember7,\r\n            (totalTLB * 25)/10000,\r\n            0,\r\n            tge,\r\n            0\r\n        );    \r\n    \r\n    }\r\n\r\n    function getVaultBalance() external view returns (uint256){\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n\r\n    //Added getclaim period function to let people know they can claim their next batch\r\n    function getTeamClaimPeriod(address _addr) public view returns (uint256) {\r\n        return team[_addr].nextClaim;\r\n    }\r\n\r\n    function getPartnerClaimPeriod(address _addr) public view returns (uint256) {\r\n        return partner[_addr].nextClaim;\r\n    }\r\n\r\n    function getTeamAmountDue(address _addr) public view returns (uint256){\r\n        return team[_addr].amountDue;\r\n    }\r\n    function getPartnerAmountDue(address _addr) public view returns (uint256){\r\n        return partner[_addr].amountDue;\r\n    }\r\n\r\n\r\n    /* Add partner by address and %. You cannot add decimals, therefore, to calculate _percentInBasePoints\r\n    * take the decimal that you want to add and multiply by 1000. For example,\r\n    * 2% or 0.02 would be 20, and .2% or .002 would be 2.\r\n    */\r\n    function addPartner(address _partner, uint8 _percentInBasePoints) external onlyOwner {\r\n        require(0 < _percentInBasePoints && _percentInBasePoints <= partnerLimit, \"Added amount exceeds total partner limit\");\r\n        require(_percentInBasePoints + partnerTotal <= partnerLimit, \"Added amount exceeds partner allocation limit\");\r\n        require(partner[_partner].member == address(0), \"Partner already added!\");\r\n        partner[_partner] = Partner (\r\n            _partner,\r\n            (totalTLB * _percentInBasePoints)/1000,\r\n            0,\r\n            tge,\r\n            0  \r\n        );\r\n        partnerTotal+= _percentInBasePoints;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function teamClaim() external nonReentrant {\r\n        require(\r\n            msg.sender == team[msg.sender].member,\r\n            \"Team Member not found!\"\r\n        );\r\n        require(\r\n            block.timestamp > team[msg.sender].nextClaim,\r\n            \"Not time for next vesting\"\r\n        );\r\n        require(\r\n            team[msg.sender].timesClaimed < teamVestingPeriods,\r\n            \"You're already fully vested!\"\r\n        );\r\n        require(\r\n            team[msg.sender].amountDue > 0,\r\n            \"You are not due to collect anymore.\"\r\n        );\r\n\r\n        \r\n\r\n         if (team[msg.sender].timesClaimed == 0){\r\n            uint256 amountReceived = (team[msg.sender].amountDue *\r\n                tgePercent) / 1000;\r\n            require(\r\n                token.balanceOf(address(this)) >= amountReceived,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, amountReceived );\r\n\r\n            team[msg.sender].nextClaim = block.timestamp + 2629743; //2629743 1 month\r\n            team[msg.sender].amountClaimed += amountReceived;\r\n            team[msg.sender].timesClaimed++;\r\n        }\r\n\r\n\r\n        else if (team[msg.sender].timesClaimed == (teamVestingPeriods - 1)) {\r\n            uint256 remainder = team[msg.sender].amountDue -\r\n                team[msg.sender].amountClaimed;\r\n            require(\r\n                token.balanceOf(address(this)) >= remainder,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, remainder);\r\n\r\n            team[msg.sender].amountClaimed += remainder;\r\n            team[msg.sender].timesClaimed++;\r\n        } else if ((team[msg.sender].amountDue - team[msg.sender].amountClaimed) < (team[msg.sender].amountDue * teamVestingPercent)/1000) {\r\n            uint256 remainder = team[msg.sender].amountDue -\r\n                team[msg.sender].amountClaimed;\r\n             require(\r\n                token.balanceOf(address(this)) >= remainder,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, remainder);\r\n\r\n            team[msg.sender].amountClaimed += remainder;\r\n            team[msg.sender].timesClaimed++;\r\n        }\r\n        \r\n        else {\r\n            uint256 amountReceived = (team[msg.sender].amountDue *\r\n                teamVestingPercent) / 1000;\r\n            require(\r\n                token.balanceOf(address(this)) >= amountReceived,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, amountReceived);\r\n\r\n            team[msg.sender].nextClaim = block.timestamp + 2629743; //2629743 1 month;\r\n            team[msg.sender].amountClaimed += amountReceived;\r\n            team[msg.sender].timesClaimed++;\r\n        }\r\n    }\r\n\r\n    \r\n    function partnerClaim() external nonReentrant {\r\n        require(\r\n            msg.sender == partner[msg.sender].member,\r\n            \"Team Member not found!\"\r\n        );\r\n        require(\r\n            block.timestamp > partner[msg.sender].nextClaim,\r\n            \"Not time for next vesting\"\r\n        );\r\n        require(\r\n            partner[msg.sender].timesClaimed < partnerVestingPeriods,\r\n            \"You're already fully vested!\"\r\n        );\r\n        require(\r\n            partner[msg.sender].amountDue > 0,\r\n            \"You are not due to collect anymore.\"\r\n        );\r\n\r\n        \r\n\r\n         if (partner[msg.sender].timesClaimed == 0){\r\n            uint256 amountReceived = (partner[msg.sender].amountDue *\r\n                tgePercent) / 1000;\r\n            require(\r\n                token.balanceOf(address(this)) >= amountReceived,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, amountReceived );\r\n\r\n            partner[msg.sender].nextClaim = block.timestamp + 2629743; //1 month\r\n            partner[msg.sender].amountClaimed += amountReceived;\r\n            partner[msg.sender].timesClaimed++;\r\n        }\r\n\r\n\r\n        else if (partner[msg.sender].timesClaimed == (partnerVestingPeriods - 1)) {\r\n            uint256 remainder = partner[msg.sender].amountDue -\r\n                partner[msg.sender].amountClaimed;\r\n            require(\r\n                token.balanceOf(address(this)) >= remainder,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, remainder);\r\n\r\n            partner[msg.sender].amountClaimed += remainder;\r\n            partner[msg.sender].timesClaimed++;\r\n        } else if ((partner[msg.sender].amountDue - partner[msg.sender].amountClaimed) < (partner[msg.sender].amountDue * partnerVestingPercent)/1000) {\r\n            uint256 remainder = partner[msg.sender].amountDue -\r\n                partner[msg.sender].amountClaimed;\r\n             require(\r\n                token.balanceOf(address(this)) >= remainder,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, remainder);\r\n\r\n            partner[msg.sender].amountClaimed += remainder;\r\n            partner[msg.sender].timesClaimed++;\r\n        }\r\n        \r\n        else {\r\n            uint256 amountReceived = (partner[msg.sender].amountDue *\r\n                partnerVestingPercent) / 1000;\r\n            require(\r\n                token.balanceOf(address(this)) >= amountReceived,\r\n                \"Insufficient balance of TLB held in contract to complete claim\"\r\n            );\r\n\r\n            token.transfer(msg.sender, amountReceived);\r\n\r\n            partner[msg.sender].nextClaim = block.timestamp + 2629743; //2592000;\r\n            partner[msg.sender].amountClaimed += amountReceived;\r\n            partner[msg.sender].timesClaimed++;\r\n        }\r\n    }\r\n\r\n    function setTge(uint256 _newTge) external onlyOwner{\r\n        tge = _newTge;\r\n    }\r\n\r\n    function setTgePercent(uint8 _percent) external onlyOwner {\r\n        require(_percent > 0 && _percent <= 100, \"Invalid percentage entered\");\r\n        tgePercent = _percent * 10;\r\n    }\r\n\r\n    function setToken(address _token) external onlyOwner {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    \r\n    \r\n    function setVesting(\r\n        uint8 _newTeamPeriod, \r\n        uint8 _newTeamPercent,\r\n        uint8 _newPartnerPeriod,\r\n        uint8 _newPartnerPercent\r\n        )\r\n        external\r\n        onlyOwner\r\n    {\r\n        teamVestingPeriods = _newTeamPeriod;\r\n        teamVestingPercent = _newTeamPercent;\r\n        partnerVestingPeriods = _newPartnerPeriod;\r\n        partnerVestingPercent = _newPartnerPercent;\r\n    }\r\n\r\n    function setPartnerLimit (uint8 _percent) external onlyOwner {\r\n        require(_percent > 0 && _percent <= 100, \"Invalid percentage entered\");\r\n        partnerLimit = _percent * 10;\r\n    }\r\n\r\n    \r\n\r\n    function transferOwnership(address payable _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    \r\n\r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamMember1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamMember2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamMember3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamMember4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamMember5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamMember6\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamMember7\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percentInBasePoints\",\"type\":\"uint8\"}],\"name\":\"addPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPartnerAmountDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPartnerClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTeamAmountDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTeamClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"timesClaimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerTotal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerVestingPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerVestingPeriods\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percent\",\"type\":\"uint8\"}],\"name\":\"setPartnerLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTge\",\"type\":\"uint256\"}],\"name\":\"setTge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percent\",\"type\":\"uint8\"}],\"name\":\"setTgePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newTeamPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_newTeamPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_newPartnerPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_newPartnerPercent\",\"type\":\"uint8\"}],\"name\":\"setVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"timesClaimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamVestingPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamVestingPeriods\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004512001ff4d93fe551bf5618eb2d93669281012c0000000000000000000000002fe70ef3db7ea49b5f14b5edf6208116458fa74a000000000000000000000000c4b04371320274d9e9892f7d0adf98f8d672906e0000000000000000000000006cb7f0c262650f4e06e153a9563d08f8659c99c3000000000000000000000000bda2146239b0fafa8ae89e51bef2c29953ef0d2b0000000000000000000000008ea187280f4857d5ca6a1a6926568b50c3f35f9f0000000000000000000000003ed0ecfa2348afbf0d1ae08636d874cdd311b66600000000000000000000000017ea6b0aed4786a97388c8797cd074de8806e2e0000000000000000000000000dccf6c087a9d0ed4a214829beab0810f05ef6fbc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a915ac0b122d259f63dc8224f699e3b41cad10ef4569257847ec80cc789a758"}