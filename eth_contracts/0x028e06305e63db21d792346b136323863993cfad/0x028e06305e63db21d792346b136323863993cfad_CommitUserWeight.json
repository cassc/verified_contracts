{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CommitUserWeight.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./interfaces/IZkEvmBridge.sol\\\";\\r\\nimport \\\"./interfaces/IvlCVX.sol\\\";\\r\\n\\r\\ncontract CommitUserWeight {\\r\\n\\r\\n    bytes4 private constant updateSelector = bytes4(keccak256(\\\"updateWeight(address,uint256,uint256)\\\"));\\r\\n    address public constant vlcvx = address(0x72a19342e8F1838460eBFCCEf09F6585e32db86E);\\r\\n    address public constant bridge = address(0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe);\\r\\n    uint256 public constant epochDuration = 86400 * 7;\\r\\n\\r\\n    function currentEpoch() public view returns (uint256) {\\r\\n        return block.timestamp/epochDuration*epochDuration;\\r\\n    }\\r\\n\\r\\n    function commit(\\r\\n        address _userAddress,\\r\\n        address _contractAddr\\r\\n    ) external  {\\r\\n        //make sure vlcvx is checkpointed\\r\\n        IvlCVX(vlcvx).checkpointEpoch();\\r\\n\\r\\n        //get vlcvx balance\\r\\n        uint256 balance = IvlCVX(vlcvx).balanceOf(_userAddress);\\r\\n\\r\\n        //build data\\r\\n        bytes memory data = abi.encodeWithSelector(updateSelector, _userAddress, currentEpoch(), balance);\\r\\n\\r\\n        //submit to L2\\r\\n        uint32 destinationNetwork = 1;\\r\\n        bool forceUpdateGlobalExitRoot = true;\\r\\n        IZkEvmBridge(bridge).bridgeMessage{value:0}(\\r\\n            destinationNetwork,\\r\\n            _contractAddr,\\r\\n            forceUpdateGlobalExitRoot,\\r\\n            data\\r\\n        );\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IvlCVX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IvlCVX{\\n\\tfunction checkpointEpoch() external;\\n\\tfunction epochCount() external view returns(uint256);\\n\\tfunction balanceOf(address _user) view external returns(uint256 amount);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IZkEvmBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n\\r\\ninterface IZkEvmBridge{\\r\\n\\tfunction bridgeMessage(\\r\\n\\t\\tuint32 destinationNetwork,\\r\\n\\t\\taddress destinationAddress,\\r\\n\\t\\tbool forceUpdateGlobalExitRoot,\\r\\n\\t\\tbytes calldata metadata\\r\\n\\t) external payable;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vlcvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CommitUserWeight", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}