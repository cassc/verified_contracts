{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PancakeStableSwapFactoryOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin-4.5.0/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPancakeStableSwapFactory.sol\\\";\\nimport \\\"./interfaces/IPancakeStableSwap.sol\\\";\\n\\ncontract PancakeStableSwapFactoryOwner is Ownable {\\n    IPancakeStableSwapFactory public immutable PancakeStableSwapFactory;\\n\\n    // user can deploy new stable swap pair with permission.\\n    mapping(address => bool) public deployPermission;\\n\\n    event UpdatePermission(address indexed user, bool permission);\\n    event NewStableSwapPair(address indexed user, address swapContract, address lpContract);\\n\\n    error ZeroAddress();\\n    error NoPermission();\\n    error PairAlreadyExist(address swapContract);\\n\\n    modifier onlyPermission() {\\n        if (!deployPermission[msg.sender]) {\\n            revert NoPermission();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice constructor\\n     * _factory : PancakeStableSwapFactory\\n     */\\n    constructor(IPancakeStableSwapFactory _factory) {\\n        PancakeStableSwapFactory = _factory;\\n    }\\n\\n    struct PermissionConfig {\\n        address user;\\n        bool permission;\\n    }\\n\\n    /**\\n     * @notice setPermission\\n     * @param _permissions : PermissionConfig array.\\n     */\\n    function setPermission(PermissionConfig[] calldata _permissions) external onlyOwner {\\n        for (uint256 i = 0; i < _permissions.length; i++) {\\n            PermissionConfig memory currentPermissionConfig = _permissions[i];\\n            if (currentPermissionConfig.user == address(0)) {\\n                revert ZeroAddress();\\n            }\\n\\n            deployPermission[currentPermissionConfig.user] = currentPermissionConfig.permission;\\n            emit UpdatePermission(currentPermissionConfig.user, currentPermissionConfig.permission);\\n        }\\n    }\\n\\n    /**\\n     * @notice createSwapPairWithPermission\\n     * @dev Create a new stable swap pair with permission.\\n     * @dev Can only create pair which does not exist.\\n     * @param _tokenA : Addresses of ERC20 conracts .\\n     * @param _tokenB : Addresses of ERC20 conracts .\\n     * @param _A : Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee : Fee to charge for exchanges\\n     * @param _admin_fee : Admin fee\\n     */\\n    function createSwapPairWithPermission(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee\\n    ) external onlyPermission {\\n        _checkExistPair(_tokenA, _tokenB);\\n        _createSwapPair(_tokenA, _tokenB, _A, _fee, _admin_fee);\\n    }\\n\\n    /**\\n     * @notice createSwapPair\\n     * @dev Create a new stable swap pair by owner.\\n     * @dev Can create pair which exists.\\n     * @dev It will update the stableSwapPairInfo in PancakeStableSwapFactory when deploying existing pair, and there is no effect on existing pairs.\\n     * @param _tokenA : Addresses of ERC20 conracts .\\n     * @param _tokenB : Addresses of ERC20 conracts .\\n     * @param _A : Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee : Fee to charge for exchanges\\n     * @param _admin_fee : Admin fee\\n     */\\n    function createSwapPair(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee\\n    ) external onlyOwner {\\n        _createSwapPair(_tokenA, _tokenB, _A, _fee, _admin_fee);\\n    }\\n\\n    /**\\n     * @notice setFactoryOwner\\n     * @dev Transfer ownership of PancakeStableSwapFactory.\\n     * @param _newOwner : New owner.\\n     */\\n    function setFactoryOwner(address _newOwner) external onlyOwner {\\n        PancakeStableSwapFactory.transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @notice addPairInfo\\n     * @dev Add pair info to PancakeStableSwapFactory when we deploy a new factory.\\n     * @dev It will update the stableSwapPairInfo in PancakeStableSwapFactory, and there is no effect on existing pairs.\\n     * @param _swapContract : Swap contract.\\n     */\\n    function addPairInfo(address _swapContract) external onlyOwner {\\n        PancakeStableSwapFactory.addPairInfo(_swapContract);\\n    }\\n\\n    function _createSwapPair(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee\\n    ) internal {\\n        PancakeStableSwapFactory.createSwapPair(_tokenA, _tokenB, _A, _fee, _admin_fee);\\n        (address swapContract, , , address LPContract) = PancakeStableSwapFactory.getPairInfo(_tokenA, _tokenB);\\n        // transfer stable swap pool ownership to owner\\n        IPancakeStableSwap(swapContract).transferOwnership(owner());\\n        emit NewStableSwapPair(msg.sender, swapContract, LPContract);\\n    }\\n\\n    function _checkExistPair(address _tokenA, address _tokenB) internal view {\\n        (address swapContract, , , ) = PancakeStableSwapFactory.getPairInfo(_tokenA, _tokenB);\\n        if (swapContract != address(0)) {\\n            revert PairAlreadyExist(swapContract);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeStableSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IPancakeStableSwapFactory {\\n    function stableSwapPairInfo(\\n        address,\\n        address,\\n        address\\n    )\\n        external\\n        view\\n        returns (\\n            address swapContract,\\n            address token0,\\n            address token1,\\n            address LPContract\\n        );\\n\\n    /**\\n     * @notice createSwapPair\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     */\\n    function createSwapPair(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee\\n    ) external;\\n\\n    /**\\n     * @notice createThreePoolPair\\n     * @param _tokenA: Addresses of ERC20 conracts .\\n     * @param _tokenB: Addresses of ERC20 conracts .\\n     * @param _tokenC: Addresses of ERC20 conracts .\\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\\n     * @param _fee: Fee to charge for exchanges\\n     * @param _admin_fee: Admin fee\\n     */\\n    function createThreePoolPair(\\n        address _tokenA,\\n        address _tokenB,\\n        address _tokenC,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _admin_fee\\n    ) external;\\n\\n    function addPairInfo(address _swapContract) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    function getPairInfo(address _tokenA, address _tokenB)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeStableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IPancakeStableSwap {\\n    function token() external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function N_COINS() external view returns (uint256);\\n\\n    function RATES(uint256 i) external view returns (uint256);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function PRECISION_MUL(uint256 i) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function A() external view returns (uint256);\\n\\n    function get_D_mem(uint256[2] memory _balances, uint256 amp) external view returns (uint256);\\n\\n    function get_y(\\n        uint256 i,\\n        uint256 j,\\n        uint256 x,\\n        uint256[2] memory xp_\\n    ) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] memory amounts, uint256 max_burn_amount) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPancakeStableSwapFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoPermission\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"}],\"name\":\"PairAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpContract\",\"type\":\"address\"}],\"name\":\"NewStableSwapPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"UpdatePermission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PancakeStableSwapFactory\",\"outputs\":[{\"internalType\":\"contract IPancakeStableSwapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapContract\",\"type\":\"address\"}],\"name\":\"addPairInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"}],\"name\":\"createSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_admin_fee\",\"type\":\"uint256\"}],\"name\":\"createSwapPairWithPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setFactoryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"internalType\":\"struct PancakeStableSwapFactoryOwner.PermissionConfig[]\",\"name\":\"_permissions\",\"type\":\"tuple[]\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PancakeStableSwapFactoryOwner", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000d173bf0851d2803177cc3928cf52f7b6bd29d054", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}