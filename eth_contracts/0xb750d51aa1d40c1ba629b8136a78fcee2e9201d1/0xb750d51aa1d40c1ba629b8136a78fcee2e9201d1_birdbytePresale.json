{"SourceCode": "//SPDX-License-Identifier: MIT Licensed\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract birdbytePresale is Ownable {\r\n    IERC20 public mainToken;\r\n    IERC20 public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IERC20 public USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    struct Phase {\r\n        uint256 endTime;\r\n        uint256 tokensToSell;\r\n        uint256 totalSoldTokens;\r\n        uint256 tokenPerUsdPrice;\r\n    }\r\n    mapping(uint256 => Phase) public phases;\r\n\r\n    // Stats\r\n    uint256 public totalStages;\r\n    uint256 public currentStage;\r\n    uint256 public totalUsers;\r\n    uint256 public soldToken;\r\n    uint256 public amountRaised;\r\n    uint256 public amountRaisedUSDT;\r\n    uint256 public amountRaisedUSDC;\r\n\r\n    address payable public fundReceiver;\r\n\r\n\r\n    uint256 public vestingDuration; // Vesting duration in seconds\r\n    uint256 public vestingPercentage; // Percentage of tokens vested every period\r\n\r\n    bool public presaleStatus;\r\n    bool public isPresaleEnded;\r\n    uint256 public claimStartTime;\r\n    address[] public UsersAddresses;\r\n\r\n    mapping(address => bool) public oldBuyer;\r\n    struct User {\r\n        uint256 native_balance;\r\n        uint256 usdt_balance;\r\n        uint256 usdc_balance;\r\n        uint256 token_balance;\r\n        uint256 claimed_tokens;\r\n        uint256 last_claimed_at;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    event BuyToken(address indexed _user, uint256 indexed _amount);\r\n    event ClaimToken(address indexed _user, uint256 indexed _amount);\r\n    event UpdatePrice(uint256 _oldPrice, uint256 _newPrice);\r\n\r\n    constructor(\r\n        IERC20 _token,\r\n        address _fundReceiver,\r\n        uint256[] memory tokensToSell,\r\n        uint256[] memory endTimestamps,\r\n        uint256[] memory tokenPerUsdPrice\r\n    ) {\r\n        require(\r\n            tokensToSell.length == endTimestamps.length &&\r\n                endTimestamps.length == tokenPerUsdPrice.length,\r\n            \"tokens and duration length mismatch\"\r\n        );\r\n        mainToken = _token;\r\n        fundReceiver = payable(_fundReceiver);\r\n        priceFeed = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokensToSell.length; i++) {\r\n            phases[i].endTime = endTimestamps[i];\r\n            phases[i].tokensToSell = tokensToSell[i];\r\n            phases[i].tokenPerUsdPrice = tokenPerUsdPrice[i];\r\n        }\r\n        totalStages = tokensToSell.length;\r\n    }\r\n\r\n    // to get real time price of Eth\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    // to buy token during preSale time with Eth => for web3 use\r\n\r\n    function buyToken() public payable {\r\n        require(!isPresaleEnded, \"Presale ended!\");\r\n        require(presaleStatus, \" Presale is Paused, check back later\");\r\n        if (!oldBuyer[msg.sender]) {\r\n            totalUsers += 1;\r\n            UsersAddresses.push(msg.sender);\r\n        }\r\n        fundReceiver.transfer(msg.value);\r\n        // Check active phase\r\n        uint256 activePhase = activePhaseInd();\r\n        if (activePhase != currentStage) {\r\n            currentStage = activePhase;\r\n        }\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = nativeToToken(msg.value, activePhase);\r\n        require(\r\n            phases[currentStage].totalSoldTokens + numberOfTokens <=\r\n                phases[currentStage].tokensToSell,\r\n            \"Phase Limit Reached\"\r\n        );\r\n        soldToken = soldToken + (numberOfTokens);\r\n        amountRaised = amountRaised + (msg.value);\r\n\r\n        users[msg.sender].native_balance =\r\n            users[msg.sender].native_balance +\r\n            (msg.value);\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n        phases[currentStage].totalSoldTokens += numberOfTokens;\r\n        oldBuyer[msg.sender] = true;\r\n    }\r\n\r\n    // to buy token during preSale time with USDT => for web3 use\r\n    function buyTokenUSDT(uint256 amount) public {\r\n        require(!isPresaleEnded, \"Presale ended!\");\r\n        require(presaleStatus, \" Presale is Paused, check back later\");\r\n        if (!oldBuyer[msg.sender]) {\r\n            totalUsers += 1;\r\n            UsersAddresses.push(msg.sender);\r\n        }\r\n        USDT.transferFrom(msg.sender, fundReceiver, amount);\r\n        // Check active phase\r\n        uint256 activePhase = activePhaseInd();\r\n        if (activePhase != currentStage) {\r\n            currentStage = activePhase;\r\n        }\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = usdtToToken(amount, activePhase);\r\n        require(\r\n            phases[currentStage].totalSoldTokens + numberOfTokens <=\r\n                phases[currentStage].tokensToSell,\r\n            \"Phase Limit Reached\"\r\n        );\r\n        soldToken = soldToken + numberOfTokens;\r\n        amountRaisedUSDT = amountRaisedUSDT + amount;\r\n\r\n        users[msg.sender].usdt_balance += amount;\r\n\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            numberOfTokens;\r\n        phases[currentStage].totalSoldTokens += numberOfTokens;\r\n        oldBuyer[msg.sender] = true;\r\n    }\r\n\r\n    // to buy token during preSale time with USDc => for web3 use\r\n    function buyTokenUSDC(uint256 amount) public {\r\n        require(!isPresaleEnded, \"Presale ended!\");\r\n        require(presaleStatus, \" Presale is Paused, check back later\");\r\n        if (!oldBuyer[msg.sender]) {\r\n            totalUsers += 1;\r\n            UsersAddresses.push(msg.sender);\r\n        }\r\n        USDC.transferFrom(msg.sender, fundReceiver, amount);\r\n        // Check active phase\r\n        uint256 activePhase = activePhaseInd();\r\n        if (activePhase != currentStage) {\r\n            currentStage = activePhase;\r\n        }\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = usdtToToken(amount, activePhase);\r\n        require(\r\n            phases[currentStage].totalSoldTokens + numberOfTokens <=\r\n                phases[currentStage].tokensToSell,\r\n            \"Phase Limit Reached\"\r\n        );\r\n        soldToken = soldToken + numberOfTokens;\r\n        amountRaisedUSDC = amountRaisedUSDC + amount;\r\n\r\n        users[msg.sender].usdc_balance += amount;\r\n\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n        phases[currentStage].totalSoldTokens += numberOfTokens;\r\n        oldBuyer[msg.sender] = true;\r\n    }\r\n\r\n    function activePhaseInd() public view returns (uint256) {\r\n        if (block.timestamp < phases[currentStage].endTime) {\r\n            if (\r\n                phases[currentStage].totalSoldTokens <\r\n                phases[currentStage].tokensToSell\r\n            ) {\r\n                return currentStage;\r\n            } else {\r\n                return currentStage + 1;\r\n            }\r\n        } else {\r\n            return currentStage + 1;\r\n        }\r\n    }\r\n\r\n    function getPhaseDetail(\r\n        uint256 phaseInd\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 tokenToSell,\r\n            uint256 soldTokens,\r\n            uint256 priceUsd,\r\n            uint256 duration\r\n        )\r\n    {\r\n        Phase memory phase = phases[phaseInd];\r\n        return (\r\n            phase.tokensToSell,\r\n            phase.totalSoldTokens,\r\n            phase.tokenPerUsdPrice,\r\n            phase.endTime\r\n        );\r\n    }\r\n\r\n    function claimTokens() external {\r\n        require(isPresaleEnded, \"Presale has not ended yet\");\r\n        User storage user = users[msg.sender];\r\n        require(user.token_balance > 0, \"No tokens purchased\");\r\n        uint256 claimableTokens = calculateClaimableTokens(msg.sender);\r\n        require(claimableTokens > 0, \"No tokens to claim\");\r\n\r\n        user.claimed_tokens += claimableTokens;\r\n        user.last_claimed_at = block.timestamp;\r\n        mainToken.transfer(msg.sender, claimableTokens);\r\n        emit ClaimToken(msg.sender, claimableTokens);\r\n    }\r\n\r\n    function calculateClaimableTokens(\r\n        address _usr\r\n    ) public view returns (uint256) {\r\n        User memory user = users[_usr];\r\n        if (user.claimed_tokens < user.token_balance) {\r\n            uint256 lastClaimTime = user.last_claimed_at == 0\r\n                ? claimStartTime\r\n                : user.last_claimed_at;\r\n            uint256 periods = (block.timestamp - lastClaimTime) /\r\n                vestingDuration;\r\n            uint256 vestedTokens = (user.token_balance * vestingPercentage) /\r\n                100;\r\n            uint256 claimableTokens = vestedTokens * periods;\r\n            if (user.claimed_tokens + claimableTokens > user.token_balance) {\r\n                return user.token_balance - user.claimed_tokens;\r\n            }\r\n            return claimableTokens;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function whitelistBSCAddresses(\r\n        address[] memory _addresses,\r\n        uint256[] memory _tokenAmount\r\n    ) external onlyOwner {\r\n        require(\r\n            _addresses.length == _tokenAmount.length,\r\n            \"Addresses and amounts must be equal\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            users[_addresses[i]].token_balance += _tokenAmount[i];\r\n        }\r\n    }\r\n\r\n    function setPresaleStatus(bool _status) external onlyOwner {\r\n        presaleStatus = _status;\r\n    }\r\n\r\n    function AdvanceStage(uint256 _currentStage) external onlyOwner {\r\n        currentStage = _currentStage;\r\n    }\r\n\r\n    function endPresale() external onlyOwner {\r\n        isPresaleEnded = true;\r\n        claimStartTime = block.timestamp;\r\n    }\r\n\r\n    // to check number of token for given Eth\r\n    function nativeToToken(\r\n        uint256 _amount,\r\n        uint256 phaseId\r\n    ) public view returns (uint256) {\r\n        uint256 ethToUsd = (_amount * (getLatestPrice())) / (1 ether);\r\n        uint256 numberOfTokens = (ethToUsd * phases[phaseId].tokenPerUsdPrice) /\r\n            (1e8);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to check number of token for given usdt\r\n    function usdtToToken(\r\n        uint256 _amount,\r\n        uint256 phaseId\r\n    ) public view returns (uint256) {\r\n        uint256 numberOfTokens = (_amount * phases[phaseId].tokenPerUsdPrice) /\r\n            (1e18);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    function updateInfos(\r\n        uint256 _sold,\r\n        uint256 _raised,\r\n        uint256 _raisedInUsdt,\r\n        uint256 _raisedInUsdc\r\n    ) external onlyOwner {\r\n        soldToken = _sold;\r\n        amountRaised = _raised;\r\n        amountRaisedUSDT = _raisedInUsdt;\r\n        amountRaisedUSDC = _raisedInUsdc;\r\n    }\r\n\r\n    // change tokens\r\n    function updateToken(address _token) external onlyOwner {\r\n        mainToken = IERC20(_token);\r\n    }\r\n\r\n    function updateVestingDetail(\r\n        uint256 _vestingDuration,\r\n        uint256 _vestingPercentage\r\n    ) external onlyOwner {\r\n        vestingDuration = _vestingDuration;\r\n        vestingPercentage = _vestingPercentage;\r\n    }\r\n\r\n    //change tokens for buy\r\n    function updateStableTokens(IERC20 _USDT, IERC20 _USDC) external onlyOwner {\r\n        USDT = IERC20(_USDT);\r\n        USDC = IERC20(_USDC);\r\n    }\r\n\r\n    // to withdraw funds for liquidity\r\n    function initiateTransfer(uint256 _value) external onlyOwner {\r\n        fundReceiver.transfer(_value);\r\n    }\r\n\r\n    // to withdraw funds for liquidity\r\n    function changeFundReciever(address _addr) external onlyOwner {\r\n        fundReceiver = payable(_addr);\r\n    }\r\n\r\n    //live feed for ETH-USD\r\n    function updatePriceFeed(\r\n        AggregatorV3Interface _priceFeed\r\n    ) external onlyOwner {\r\n        priceFeed = _priceFeed;\r\n    }\r\n\r\n    // to withdraw out tokens\r\n    function transferTokens(IERC20 token, uint256 _value) external onlyOwner {\r\n        token.transfer(msg.sender, _value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensToSell\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenPerUsdPrice\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentStage\",\"type\":\"uint256\"}],\"name\":\"AdvanceStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UsersAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePhaseInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"}],\"name\":\"calculateClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeFundReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseInd\",\"type\":\"uint256\"}],\"name\":\"getPhaseDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"}],\"name\":\"nativeToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSoldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerUsdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raisedInUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raisedInUsdc\",\"type\":\"uint256\"}],\"name\":\"updateInfos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_USDC\",\"type\":\"address\"}],\"name\":\"updateStableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPercentage\",\"type\":\"uint256\"}],\"name\":\"updateVestingDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"native_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdc_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_claimed_at\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAmount\",\"type\":\"uint256[]\"}],\"name\":\"whitelistBSCAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "birdbytePresale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d4c8e80643711bea53f1930d2c85e4900f48ab11000000000000000000000000dd45e11f1540ac2100acc9fef292369b91df64e500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000000ee3a5f48a68b5520000000000000000000000000000000000000000000000001b929b9ee181f57c1500000000000000000000000000000000000000000000001d8acb4eca819a461b0000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000664f9230000000000000000000000000000000000000000000000000000000006658ccb0000000000000000000000000000000000000000000000000000000006662073000000000000000000000000000000000000000000000000000000000666b41b00000000000000000000000000000000000000000000000000000000066747c3000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000022b1c8c1227a00000000000000000000000000000000000000000000000000001ce8bf268fbc500000000000000000000000000000000000000000000000000018c7d07a130e90000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aebafb9ce4888e98a1b80ba388fdf2b9dbbb000a85e9dda4d1d3f2943329723a"}