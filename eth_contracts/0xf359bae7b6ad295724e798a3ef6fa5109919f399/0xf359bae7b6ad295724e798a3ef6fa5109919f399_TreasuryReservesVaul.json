{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/CommonEventsAndErrors.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (common/CommonEventsAndErrors.sol)\\n\\n/// @notice A collection of common errors thrown within the Temple contracts\\nlibrary CommonEventsAndErrors {\\n    error InsufficientBalance(address token, uint256 required, uint256 balance);\\n    error InvalidParam();\\n    error InvalidAddress();\\n    error InvalidAccess();\\n    error InvalidAmount(address token, uint256 amount);\\n    error ExpectedNonZero();\\n    error Unimplemented();\\n    event TokenRecovered(address indexed to, address indexed token, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/access/ITempleElevatedAccess.sol)\\n\\n/**\\n * @notice Inherit to add Executor and Rescuer roles for DAO elevated access.\\n */ \\ninterface ITempleElevatedAccess {\\n    event ExplicitAccessSet(address indexed account, bytes4 indexed fnSelector, bool indexed value);\\n    event RescueModeSet(bool indexed value);\\n\\n    event NewRescuerProposed(address indexed oldRescuer, address indexed oldProposedRescuer, address indexed newProposedRescuer);\\n    event NewRescuerAccepted(address indexed oldRescuer, address indexed newRescuer);\\n\\n    event NewExecutorProposed(address indexed oldExecutor, address indexed oldProposedExecutor, address indexed newProposedExecutor);\\n    event NewExecutorAccepted(address indexed oldExecutor, address indexed newExecutor);\\n\\n    struct ExplicitAccess {\\n        bytes4 fnSelector;\\n        bool allowed;\\n    }\\n\\n    /**\\n     * @notice A set of addresses which are approved to execute emergency operations.\\n     */ \\n    function rescuer() external returns (address);\\n\\n    /**\\n     * @notice A set of addresses which are approved to execute normal operations on behalf of the DAO.\\n     */ \\n    function executor() external returns (address);\\n\\n    /**\\n     * @notice Explicit approval for an address to execute a function.\\n     * allowedCaller => function selector => true/false\\n     */\\n    function explicitFunctionAccess(address contractAddr, bytes4 functionSelector) external returns (bool);\\n\\n    /**\\n     * @notice Under normal circumstances, rescuers don't have access to admin/operational functions.\\n     * However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\\n     */\\n    function inRescueMode() external returns (bool);\\n    \\n    /**\\n     * @notice Set the contract into or out of rescue mode.\\n     * Only the rescuers or executors are allowed to set.\\n     */\\n    function setRescueMode(bool value) external;\\n\\n    /**\\n     * @notice Proposes a new Rescuer.\\n     * Can only be called by the current rescuer.\\n     */\\n    function proposeNewRescuer(address account) external;\\n\\n    /**\\n     * @notice Caller accepts the role as new Rescuer.\\n     * Can only be called by the proposed rescuer\\n     */\\n    function acceptRescuer() external;\\n\\n    /**\\n     * @notice Proposes a new Executor.\\n     * Can only be called by the current executor or resucer (if in resuce mode)\\n     */\\n    function proposeNewExecutor(address account) external;\\n\\n    /**\\n     * @notice Caller accepts the role as new Executor.\\n     * Can only be called by the proposed executor\\n     */\\n    function acceptExecutor() external;\\n\\n    /**\\n     * @notice Grant `allowedCaller` the rights to call the function selectors in the access list.\\n     * @dev fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\\n     */\\n    function setExplicitAccess(address allowedCaller, ExplicitAccess[] calldata access) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v2/ITempleDebtToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/ITempleDebtToken.sol)\\n\\nimport { IERC20, IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\n\\ninterface ITempleDebtToken is IERC20, IERC20Metadata, ITempleElevatedAccess {\\n    error NonTransferrable();\\n    error CannotMintOrBurn(address caller);\\n\\n    event BaseInterestRateSet(uint96 rate);\\n    event RiskPremiumInterestRateSet(address indexed debtor, uint96 rate);\\n    event AddedMinter(address indexed account);\\n    event RemovedMinter(address indexed account);\\n    event DebtorBalance(address indexed debtor, uint128 principal, uint128 baseInterest, uint128 riskPremiumInterest);\\n\\n    /**\\n     * @notice Track the deployed version of this contract. \\n     */\\n    function version() external view returns (string memory);\\n\\n    /**\\n     * @notice The current (base rate) interest common for all users. This can be updated by governance\\n     * @dev 1e18 format, where 0.01e18 = 1%\\n     */\\n    function baseRate() external view returns (uint96);\\n\\n    /**\\n     * @notice The last checkpoint time of the (base rate) principal and interest checkpoint\\n     */\\n    function baseCheckpointTime() external view returns (uint32);\\n\\n    /**\\n     * @notice The (base rate) total principal and interest owed across all debtors as of the latest checkpoint\\n     */\\n    function baseCheckpoint() external view returns (uint128);\\n\\n    /**\\n     * @notice The (base rate) total number of shares allocated out to users for internal book keeping\\n     */\\n    function baseShares() external view returns (uint128);\\n\\n    /**\\n     * @notice The net amount of principal amount of debt minted across all users.\\n     */\\n    function totalPrincipal() external view returns (uint128);\\n\\n    /**\\n     * @notice The latest estimate of the (risk premium) interest (no principal) owed.\\n     * @dev Indicative only. This total is only updated on a per strategy basis when that strategy gets \\n     * checkpointed (on borrow/repay rate change).\\n     * So it is generally always going to be out of date as each strategy will accrue interest independently \\n     * on different rates.\\n     */\\n    function estimatedTotalRiskPremiumInterest() external view returns (uint128);\\n\\n    /// @dev byte packed into two slots.\\n    struct Debtor {\\n        /// @notice The current principal owed by this debtor\\n        uint128 principal;\\n\\n        /// @notice The number of this shares this debtor is allocated of the base interest.\\n        uint128 baseShares;\\n\\n        /// @notice The current (risk premium) interest rate specific to this debtor. This can be updated by governance\\n        /// @dev 1e18 format, where 0.01e18 = 1%\\n        uint96 rate;\\n\\n        /// @notice The debtor's (risk premium only) interest (no principal or base interest) owed as of the last checkpoint\\n        uint128 checkpoint;\\n\\n        /// @notice The last checkpoint time of this debtor's (risk premium) interest\\n        /// @dev uint32 => max time of Feb 7 2106\\n        uint32 checkpointTime;\\n    }\\n\\n    /**\\n     * @notice Per address status of debt\\n     */\\n    function debtors(address account) external view returns (\\n        /// @notice The current principal owed by this debtor\\n        uint128 principal,\\n\\n        /// @notice The number of this shares this debtor is allocated of the base interest.\\n        uint128 baseShares,\\n\\n        /// @notice The current (risk premium) interest rate specific to this debtor. This can be updated by governance\\n        /// @dev 1e18 format, where 0.01e18 = 1%\\n        uint96 rate,\\n\\n        /// @notice The debtor's (risk premium only) interest (no principal or base interest) owed as of the last checkpoint\\n        uint128 checkpoint,\\n\\n        /// @notice The last checkpoint time of this debtor's (risk premium) interest\\n        uint32 checkpointTime\\n    );\\n\\n    /// @notice A set of addresses which are approved to mint/burn\\n    function minters(address account) external view returns (bool);\\n\\n    /**\\n     * @notice Governance can add an address which is able to mint or burn debt\\n     * positions on behalf of users.\\n     */\\n    function addMinter(address account) external;\\n\\n    /**\\n     * @notice Governance can remove an address which is able to mint or burn debt\\n     * positions on behalf of users.\\n     */\\n    function removeMinter(address account) external;\\n\\n    /**\\n     * @notice Governance can update the continuously compounding (base) interest rate of all debtors, from this block onwards.\\n     */\\n    function setBaseInterestRate(uint96 _rate) external;\\n\\n    /**\\n     * @notice Governance can update the continuously compounding (risk premium) interest rate for a given debtor, from this block onwards\\n     */\\n    function setRiskPremiumInterestRate(address _debtor, uint96 _rate) external;\\n\\n    /**\\n     * @notice Approved Minters can add a new debt position on behalf of a user.\\n     * @param _debtor The address of the debtor who is issued new debt\\n     * @param _mintAmount The notional amount of debt tokens to issue.\\n     */\\n    function mint(address _debtor, uint256 _mintAmount) external;\\n\\n    /**\\n     * @notice Approved Minters can burn debt on behalf of a user.\\n     * @dev Interest is repaid in preference:\\n     *   1/ Firstly to the higher interest rate of (baseRate, debtor risk premium rate)\\n     *   2/ Any remaining of the repayment is then paid of the other interest amount.\\n     *   3/ Finally if there is still some repayment amount unallocated, \\n     *      then the principal will be paid down. This is like a new debt is issued for the lower balance,\\n     *      where interest accrual starts fresh.\\n     * More debt than the user has cannot be burned - it is capped. The actual amount burned is returned\\n     * @param _debtor The address of the debtor\\n     * @param _burnAmount The notional amount of debt tokens to repay.\\n     */\\n    function burn(address _debtor, uint256 _burnAmount) external returns (uint256 burnedAmount);\\n\\n    /**\\n     * @notice Approved Minters can burn the entire debt on behalf of a user.\\n     * @param _debtor The address of the debtor\\n     */\\n    function burnAll(address _debtor) external returns (uint256 burnedAmount);\\n\\n    /**\\n     * @notice Checkpoint the base interest owed by all debtors up to this block.\\n     */\\n    function checkpointBaseInterest() external returns (uint256);\\n\\n    /**\\n     * @notice Checkpoint a debtor's (risk premium) interest (no principal) owed up to this block.\\n     */\\n    function checkpointDebtorInterest(address debtor) external returns (uint256);\\n\\n    /**\\n     * @notice Checkpoint multiple accounts (risk premium) interest (no principal) owed up to this block.\\n     * @dev Provided in case there needs to be block synchronisation on the total debt.\\n     */\\n    function checkpointDebtorsInterest(address[] calldata _debtors) external;\\n\\n    struct DebtOwed {\\n        uint256 principal;\\n        uint256 baseInterest;\\n        uint256 riskPremiumInterest;\\n    }\\n\\n    /**\\n     * @notice The current debt for a given user split out by\\n     * principal, base interest, risk premium (per debtor) interest\\n     */\\n    function currentDebtOf(address _debtor) external view returns (\\n        DebtOwed memory debtOwed\\n    );\\n\\n    /**\\n     * @notice The current debt for a given set of users split out by\\n     * principal, base interest, risk premium (per debtor) interest\\n     */\\n    function currentDebtsOf(address[] calldata _debtors) external view returns (\\n        DebtOwed[] memory debtsOwed\\n    );\\n\\n    /**\\n      * @notice The current total principal + total base interest, total (estimate) debtor specific risk premium interest owed by all debtors.\\n      * @dev Note the (total principal + total base interest) portion is up to date.\\n      * However the (debtor specific risk premium interest) portion is likely stale.\\n      * The `estimatedTotalDebtorInterest` is only updated when each debtor checkpoints, so it's going to be out of date.\\n      * For more up to date current totals, off-chain aggregation of balanceOf() will be required - eg via subgraph.\\n      */\\n    function currentTotalDebt() external view returns (\\n        DebtOwed memory debtOwed\\n    );\\n\\n    /**\\n     * @notice Convert a (base interest) debt amount into proportional amount of shares\\n     */\\n    function baseDebtToShares(uint128 debt) external view returns (uint128);\\n\\n    /**\\n     * @notice Convert a number of (base interest) shares into proportional amount of debt\\n     */\\n    function baseSharesToDebt(uint128 shares) external view returns (uint128);\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/ITreasuryPriceIndexOracle.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/ITreasuryPriceIndexOracle.sol)\\n\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\n\\n/**\\n * @title Treasury Price Index Oracle\\n * @notice The custom oracle (not dependant on external markets/AMMs/dependencies) to give the\\n * Treasury Price Index, representing the target Treasury Value per token.\\n * This rate is updated manually with elevated permissions. The new TPI doesn't take effect until after a cooldown.\\n */\\ninterface ITreasuryPriceIndexOracle is ITempleElevatedAccess {\\n    event TreasuryPriceIndexSet(uint96 oldTpi, uint96 newTpi);\\n    event TpiCooldownSet(uint32 cooldownSecs);\\n    event MaxTreasuryPriceIndexDeltaSet(uint256 maxDelta);\\n\\n    error BreachedMaxTpiDelta(uint96 oldTpi, uint96 newTpi, uint256 maxDelta);\\n\\n    /**\\n     * @notice The current Treasury Price Index (TPI) value\\n     * @dev If the TPI has just been updated, the old TPI will be used until `cooldownSecs` has elapsed\\n     */\\n    function treasuryPriceIndex() external view returns (uint96);\\n\\n    /**\\n     * @notice The maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms.\\n     * @dev Used as a bound to avoid unintended/fat fingering when updating TPI\\n     */\\n    function maxTreasuryPriceIndexDelta() external view returns (uint256);\\n\\n    /**\\n     * @notice The current internal TPI data along with when it was last reset, and the prior value\\n     */\\n    function tpiData() external view returns (\\n        uint96 currentTpi,\\n        uint96 previousTpi,\\n        uint32 lastUpdatedAt,\\n        uint32 cooldownSecs\\n    );\\n\\n    /**\\n     * @notice Set the Treasury Price Index (TPI)\\n     */\\n    function setTreasuryPriceIndex(uint96 value) external;\\n\\n    /**\\n     * @notice Set the number of seconds to elapse before a new TPI will take effect.\\n     */\\n    function setTpiCooldown(uint32 cooldownSecs) external;\\n\\n    /**\\n     * @notice Set the maximum allowed TPI change on any single `setTreasuryPriceIndex()`, in absolute terms.\\n     * @dev 18 decimal places, 0.20e18 == $0.20\\n     */\\n    function setMaxTreasuryPriceIndexDelta(uint256 maxDelta) external;\\n\\n    /**\\n     * @notice The decimal precision of Temple Price Index (TPI)\\n     * @dev 18 decimals, so 1.02e18 == $1.02\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function TPI_DECIMALS() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/ITreasuryReservesVault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/ITreasuryReservesVault.sol)\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITempleDebtToken } from \\\"contracts/interfaces/v2/ITempleDebtToken.sol\\\";\\nimport { ITempleStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleStrategy.sol\\\";\\nimport { ITempleBaseStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleBaseStrategy.sol\\\";\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\nimport { ITreasuryPriceIndexOracle } from \\\"contracts/interfaces/v2/ITreasuryPriceIndexOracle.sol\\\";\\n\\n/**\\n * @title Treasury Reserves Vault (TRV)\\n *\\n * @notice Temple has various strategies which utilise the treasury funds to generate \\n * gains for token holders.\\n * \\n * The maximum amount of funds allocated to each strategy is determined by governance, \\n * and then each strategy can borrow/repay as required (up to the cap).\\n * \\n * When strategies borrow funds, they are issued `dToken`, an accruing debt token representing\\n * the debt to the temple treasury. This is used to compare strategies performance, where\\n * we can determine an equity value (assets - debt).\\n *\\n *    Strategies can borrow different types of tokens from the TRV, and are minted equivalent internal debt tokens eg:\\n *      DAI => minted dUSD\\n *      TEMPLE => minted dTEMPLE\\n *      ETH => minted dETH\\n *   \\n *   Each of the dTokens are compounding at different risk free rates, eg:\\n *      dUSD: At DAIs Savings Rate (DSR)\\n *      dTEMPLE: 0% interest (no opportunity cost)\\n *      dETH: ~avg LST rate\\n *   \\n *   And so each token which can be borrowed has separate config on how to pull/deposit idle funds.\\n *   For example, this may be:\\n *      DAI => DSR base strategy\\n *      TEMPLE => direct Temple mint/burn \\n *      ETH => just hold in a vault\\n */\\ninterface ITreasuryReservesVault is ITempleElevatedAccess {\\n    event GlobalPausedSet(bool borrow, bool repay);\\n    event StrategyPausedSet(address indexed strategy, bool borrow, bool repay);\\n\\n    event StrategyAdded(address indexed strategy, int256 underperformingEquityThreshold);\\n    event StrategyRemoved(address indexed strategy);\\n    event DebtCeilingUpdated(address indexed strategy, address indexed token, uint256 oldDebtCeiling, uint256 newDebtCeiling);\\n    event UnderperformingEquityThresholdUpdated(address indexed strategy, int256 oldThreshold, int256 newThreshold);\\n    event StrategyIsShuttingDownSet(address indexed strategy, bool isShuttingDown);\\n    event StrategyShutdownCreditAndDebt(address indexed strategy, address indexed token, uint256 outstandingCredit, uint256 outstandingDebt);\\n    event StrategyCreditAndDebtBalance(address indexed strategy, address indexed token, uint256 credit, uint256 debt);\\n\\n    event BorrowTokenSet(address indexed token, address baseStrategy, uint256 baseStrategyWithdrawalBuffer, uint256 baseStrategyDepositThreshold, address dToken);\\n    event BorrowTokenRemoved(address indexed token);\\n\\n    event Borrow(address indexed strategy, address indexed token, address indexed recipient, uint256 amount);\\n    event Repay(address indexed strategy, address indexed token, address indexed from, uint256 amount);\\n\\n    event TpiOracleSet(address indexed tpiOracle);\\n\\n    error BorrowTokenNotEnabled();\\n    error StrategyNotEnabled();\\n\\n    error AlreadyEnabled();\\n    error BorrowPaused();\\n    error RepaysPaused();\\n    error StrategyIsShutdown();\\n    error DebtCeilingBreached(uint256 available, uint256 borrowAmount);\\n    error NotShuttingDown();\\n\\n    struct BorrowTokenConfig {\\n        /**\\n         * @notice The base strategy used to hold idle treasury funds\\n         */\\n        ITempleBaseStrategy baseStrategy;\\n\\n        /**\\n         * @notice A buffer of tokens are maintained in the TRV such that it doesn't have to churn through small base strategy\\n         * deposits/withdrawals. \\n         * On a borrow if tokens need to be pulled from the base strategy, more than the requested amount is withdrawn such that\\n         * this extra buffer of tokens ends up in the TRV\\n         */\\n        uint256 baseStrategyWithdrawalBuffer;\\n\\n        /**\\n         * @notice When repayments are made to the TRV, tokens are only deposited into the base strategy once this threshold is met.\\n         * The amount deposited will ensure that the `baseStrategyWithdrawalBuffer` amount remains in the TRV\\n         */\\n        uint256 baseStrategyDepositThreshold;\\n\\n        /**\\n         * @notice The address of the internal debt token for this borrow token\\n         * @dev eg Temple => dTEMPLE, DAI => dUSD\\n         */\\n        ITempleDebtToken dToken;\\n    }\\n    \\n    struct StrategyConfig {\\n        /**\\n         * @notice Pause borrows\\n         */\\n        bool borrowPaused;\\n\\n        /**\\n         * @notice Pause repayments\\n         */\\n        bool repaysPaused;\\n\\n        /**\\n         * @notice Governance nominates this strategy to be shutdown.\\n         * The strategy executor then needs to unwind (may be manual) \\n         * and the strategy needs to then call shutdown() when ready.\\n         */\\n        bool isShuttingDown;\\n\\n        /**\\n         * @notice Each strategy will have a different threshold of expected performance.\\n         * This underperforming threshold is used for reporting to determine if the strategy is underperforming.\\n         */\\n        int256 underperformingEquityThreshold;\\n\\n        /**\\n         * @notice The strategy can borrow up to this limit of accrued debt for each token.\\n         * The `dToken` is minted on any borrows 1:1 (which then accrues interest)\\n         * When a strategy repays, the `dToken` is burned 1:1\\n         */\\n        mapping(IERC20 => uint256) debtCeiling;\\n\\n        /**\\n         * @notice The tokens that this strategy is allowed to borrow from TRV\\n         * @dev This must be one of the configured Borrow Tokens\\n         */\\n        mapping(IERC20 => bool) enabledBorrowTokens;\\n    }\\n\\n    /**\\n     * @notice True if all borrows are paused for all strategies.\\n     */\\n    function globalBorrowPaused() external view returns (bool);\\n\\n    /**\\n     * @notice True if all repayments are paused for all strategies.\\n     */\\n    function globalRepaysPaused() external view returns (bool);\\n\\n    /**\\n     * @notice The configuration for a given strategy\\n     */\\n    function strategies(address strategy) external view returns (\\n        bool borrowPaused,\\n        bool repaysPaused,\\n        bool isShuttingDown,\\n        int256 underperformingEquityThreshold\\n    );\\n\\n    /**\\n     * @notice The list of all strategies currently added to the TRV\\n     */\\n    function strategiesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice The configuration for a given token which can be borrowed by strategies\\n     */\\n    function borrowTokens(IERC20 token) external view returns (\\n        ITempleBaseStrategy baseStrategy,\\n        uint256 baseStrategyWithdrawalBuffer,\\n        uint256 baseStrategyDepositThreshold,\\n        ITempleDebtToken dToken\\n    );\\n\\n    /**\\n     * @notice The list of all tokens which can be borrowed by the TRV\\n     */\\n    function borrowTokensList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice When strategies repay a token which covers more than their dToken debt for the token\\n     * They receive credits. When they next need to borrow tokens this credit is used prior to\\n     * issuing more dTokens\\n     */\\n    function strategyTokenCredits(address strategy, IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice The Treasury Price Index Oracle\\n     */\\n    function tpiOracle() external view returns (ITreasuryPriceIndexOracle);\\n\\n    /**\\n     * @notice Set the Treasury Price Index (TPI) Oracle\\n     */\\n    function setTpiOracle(address tpiOracleAddress) external;\\n\\n    /**\\n     * @notice The Treasury Price Index - the target price of the Treasury, in `stableToken` terms.\\n     */\\n    function treasuryPriceIndex() external view returns (uint96);\\n\\n    /**\\n     * @notice API version to help with future integrations/migrations\\n     */\\n    function apiVersion() external pure returns (string memory);\\n\\n    /**\\n     * @notice Set the borrow token configuration. \\n     * @dev This can either add a new token or update an existing token.\\n     */\\n    function setBorrowToken(\\n        IERC20 token, \\n        address baseStrategy,\\n        uint256 baseStrategyWithdrawalBuffer,\\n        uint256 baseStrategyDepositThreshold,\\n        address dToken\\n    ) external;\\n\\n    /**\\n     * @notice Enable and/or disable tokens which a strategy can borrow from the (configured) TRV borrow tokens\\n     */\\n    function updateStrategyEnabledBorrowTokens(\\n        address strategy, \\n        IERC20[] calldata enableBorrowTokens, \\n        IERC20[] calldata disableBorrowTokens\\n    ) external;\\n\\n    /**\\n     * @notice Remove the borrow token configuration. \\n     */\\n    function removeBorrowToken(\\n        IERC20 token\\n    ) external;\\n\\n    /**\\n     * @notice A helper to collate information about a given strategy for reporting purposes.\\n     * @dev Note the current assets may not be 100% up to date, as some strategies may need to checkpoint based\\n     * on the underlying strategy protocols (eg DSR for DAI would need to checkpoint to get the latest valuation).\\n     */\\n    function strategyDetails(address strategy) external view returns (\\n        string memory name,\\n        string memory version,\\n        bool borrowPaused,\\n        bool repaysPaused,\\n        bool isShuttingDown,\\n        int256 underperformingEquityThreshold,\\n        ITempleStrategy.AssetBalance[] memory debtCeiling\\n    );\\n\\n    /**\\n     * @notice A strategy's current asset balances, any manual adjustments and the current debt\\n     * of the strategy.\\n     * \\n     * This will be used to report equity performance: `sum($assetValue +- $manualAdj) - debt`\\n     * The conversion of each asset price into the stable token (eg DAI) will be done off-chain\\n     * along with formulating the union of asset balances and manual adjustments\\n     */\\n    function strategyBalanceSheet(address strategyAddr) external view returns (\\n        ITempleStrategy.AssetBalance[] memory assetBalances,\\n        ITempleStrategy.AssetBalanceDelta[] memory manualAdjustments, \\n        ITempleStrategy.AssetBalance[] memory dTokenBalances,\\n        ITempleStrategy.AssetBalance[] memory dTokenCreditBalances\\n    );\\n\\n    /**\\n     * @notice The current max debt ceiling that a strategy is allowed to borrow up to.\\n     */\\n    function strategyDebtCeiling(address strategy, IERC20 token) external view returns (uint256);\\n    \\n    /**\\n     * @notice Whether a token is enabled to be borrowed for a given strategy\\n     */\\n    function strategyEnabledBorrowTokens(address strategy, IERC20 token) external view returns (bool);\\n\\n    /**\\n     * @notice The total available stables, both as a balance in this contract and\\n     * any available to withdraw from the baseStrategy\\n     */\\n    function totalAvailable(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount remaining that a strategy can borrow for a given token\\n     * taking into account: the approved debt ceiling, current dToken debt, and any credits\\n     * @dev available == min(ceiling - debt + credit, 0)\\n     */\\n    function availableForStrategyToBorrow(\\n        address strategy, \\n        IERC20 token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Pause all strategy borrow and repays\\n     */\\n    function setGlobalPaused(bool borrow, bool repays) external;\\n\\n    /**\\n     * @notice Set whether borrows and repayments are paused for a given strategy.\\n     */\\n    function setStrategyPaused(address strategy, bool borrow, bool repays) external;\\n\\n    /**\\n     * @notice Register a new strategy which can borrow tokens from Treasury Reserves\\n     */\\n    function addStrategy(\\n        address strategy, \\n        int256 underperformingEquityThreshold,\\n        ITempleStrategy.AssetBalance[] calldata debtCeiling\\n    ) external;\\n\\n    /**\\n     * @notice Update the debt ceiling for a given strategy\\n     */\\n    function setStrategyDebtCeiling(address strategy, IERC20 token, uint256 newDebtCeiling) external;\\n\\n    /**\\n     * @notice Update the underperforming equity threshold.\\n     */\\n    function setStrategyUnderperformingThreshold(address strategy, int256 underperformingEquityThreshold) external;\\n\\n    /**\\n     * @notice The first step in a two-phase shutdown. Executor first sets whether a strategy is slated for shutdown.\\n     * The strategy then needs to call shutdown as a separate call once ready.\\n     */\\n    function setStrategyIsShuttingDown(address strategy, bool isShuttingDown) external;\\n\\n    /**\\n     * @notice The second step in a two-phase shutdown. A strategy (automated) or executor (manual) calls\\n     * to effect the shutdown. isShuttingDown must be true for the strategy first.\\n     * The strategy executor is responsible for unwinding all it's positions first and repaying the debt to the TRV.\\n     * All outstanding dToken debt is burned, leaving a net gain/loss of equity for the shutdown strategy.\\n     */\\n    function shutdown(address strategy) external;   \\n\\n    /**\\n     * @notice A strategy calls to request more funding.\\n     * @dev This will revert if the strategy requests more stables than it's able to borrow.\\n     * `dToken` will be minted 1:1 for the amount of stables borrowed\\n     */\\n    function borrow(IERC20 token, uint256 borrowAmount, address recipient) external;\\n\\n    /**\\n     * @notice A strategy calls to request the most funding it can.\\n     * @dev This will revert if the strategy requests more stables than it's able to borrow.\\n     * `dToken` will be minted 1:1 for the amount of stables borrowed\\n     */\\n    function borrowMax(IERC20 token, address recipient) external returns (uint256);\\n\\n    /**\\n     * @notice A strategy calls to paydown it's debt\\n     * This will pull the stables, and will burn the equivalent amount of dToken from the strategy.\\n     */\\n    function repay(IERC20 token, uint256 repayAmount, address strategy) external;\\n\\n    /**\\n     * @notice A strategy calls to paydown all of it's debt\\n     * This will pull the stables for the entire dToken balance of the strategy, and burn the dToken.\\n     */\\n    function repayAll(IERC20 token, address strategy) external returns (uint256 amountRepaid);\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/strategies/ITempleBaseStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/strategies/ITempleBaseStrategy.sol)\\n\\nimport { ITempleStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleStrategy.sol\\\";\\n\\n/**\\n * @title Temple Base Strategy\\n * @notice A special Temple Strategy which is eligable to transiently apply capital\\n * into a very safe yield bearing protocol (eg DAI Savings Rate).\\n * \\n * The Treasury Reserves Vault will have permission to pull back funds from this strategy\\n * at any time, for example when another strategy wants to borrow funds.\\n */\\ninterface ITempleBaseStrategy {\\n    /**\\n     * @notice The latest checkpoint of each asset balance this strategy holds.\\n     *\\n     * @dev The asset value may be stale at any point in time, depending on the strategy. \\n     * It may optionally implement `checkpointAssetBalances()` in order to update those balances.\\n     */\\n    function latestAssetBalances() external view returns (ITempleStrategy.AssetBalance[] memory assetBalances);\\n\\n    /**\\n     * @notice The same as `borrowMax()` but for a pre-determined amount to borrow,\\n     * such that something upstream/off-chain can determine the amount.\\n     */\\n    function borrowAndDeposit(uint256 amount) external;\\n\\n    /**\\n     * @notice When the TRV has a surplus of funds (over the configured buffer threshold)\\n     * it will transfer tokens to the base strategy, and call this function to apply\\n     * the new captial.\\n     */\\n    function trvDeposit(uint256 amount) external;\\n\\n    /**\\n     * @notice The TRV is able to withdraw on demand in order to fund other strategies which \\n     * wish to borrow from the TRV.\\n     * @dev It may withdraw less than requested if there isn't enough balance in the DSR.\\n     */\\n    function trvWithdraw(uint256 requestedAmount) external returns (uint256 amountWithdrawn);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/v2/strategies/ITempleStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/v2/strategies/ITempleStrategy.sol)\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ITreasuryReservesVault } from \\\"contracts/interfaces/v2/ITreasuryReservesVault.sol\\\";\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\n\\n/**\\n * @title Temple Strategy\\n * @notice The Temple Strategy is responsible for borrowing funds from the Treasury Reserve Vault\\n * and generating positive equity from that capital.\\n * \\n * When it borrows funds it is issued systematic debt (`dToken`) which accrues interest at a common base rate\\n * plus a risk premium rate specific to this strategy, agreed and set by governance.\\n *\\n * The strategy reports it's assets (total available funds in investments)\\n * in order to report the equity of the strategy -- ie a comparable performance metric across all strategy's.\\n *\\n * The Strategy Executor role is responsible for applying the capital within the strategy, and can borrow funds from\\n * the TRV up to a cap (set by governance). Similarly the Executor is responsible for operations - borrow/repay/liquidate/etc.\\n *\\n * The strategy can be shutdown - first by Executors giving the go-ahead by setting it to `isShuttingDown` in the TRV\\n * and then the Executor can either:\\n *   a/ Graceful shutdown, where any liquidation can happen automatically\\n *   b/ Force shutdown, where the Executor needs to handle any liquidations manually and send funds back to Treasury first.\\n */\\ninterface ITempleStrategy is ITempleElevatedAccess {\\n    struct AssetBalance {\\n        address asset;\\n        uint256 balance;\\n    }\\n\\n    struct AssetBalanceDelta {\\n        address asset;\\n        int256 delta;\\n    }\\n\\n    event TreasuryReservesVaultSet(address indexed trv);\\n    event Shutdown();\\n    event AssetBalancesCheckpoint(AssetBalance[] assetBalances);\\n    event ManualAdjustmentsSet(AssetBalanceDelta[] adjustments);\\n    event TokenAllowanceSet(address token, address spender, uint256 amount);\\n    \\n    error InvalidVersion(string expected, string actual);\\n    error OnlyTreasuryReserveVault(address caller);\\n\\n    /**\\n     * @notice API version to help with future integrations/migrations\\n     */\\n    function apiVersion() external view returns (string memory);\\n\\n    /**\\n     * @notice A human readable name of the strategy\\n     */\\n    function strategyName() external view returns (string memory);\\n\\n    /**\\n     * @notice The version of this particular strategy\\n     */\\n    function strategyVersion() external view returns (string memory);\\n\\n    /**\\n     * @notice The address of the treasury reserves vault.\\n     */\\n    function treasuryReservesVault() external view returns (ITreasuryReservesVault);\\n\\n    /**\\n     * @notice Executors can set the address of the treasury reserves vault.\\n     */\\n    function setTreasuryReservesVault(address _trv) external;\\n\\n    /**\\n     * @notice The Strategy Executor may set manual adjustments to asset balances\\n     * if they cannot be reported automatically - eg a staked position with no receipt token.\\n     */\\n    function setManualAdjustments(AssetBalanceDelta[] calldata adjustments) external;\\n\\n    /**\\n     * @notice Get the set of manual asset balance deltas, set by the Strategy Executor.\\n     */\\n    function manualAdjustments() external view returns (AssetBalanceDelta[] memory adjustments);\\n\\n    /**\\n     * @notice The latest checkpoint of each asset balance this strategy holds.\\n     *\\n     * @dev The asset value may be stale at any point in time, depending on the strategy. \\n     * It may optionally implement `checkpointAssetBalances()` in order to update those balances.\\n     */\\n    function latestAssetBalances() external view returns (AssetBalance[] memory assetBalances);\\n\\n    /**\\n     * @notice By default, we assume there is no checkpoint required for a strategy\\n     * In which case it would be identical to just calling `latestAssetBalances()`\\n     *\\n     * A strategy can override this if on-chain functions are required to run to force balance\\n     * updates first - eg checkpoint DSR\\n     */\\n    function checkpointAssetBalances() external returns (AssetBalance[] memory assetBalances);\\n\\n    /**\\n     * @notice populate data required for shutdown - for example quote data.\\n     * This may/may not be required in order to do a shutdown. For example to avoid frontrunning/MEV\\n     * quotes to exit an LP position may need to be obtained off-chain prior to the actual shutdown.\\n     * Each strategy can abi encode params that it requires.\\n     * @dev Intentionally not a view - as some quotes require a non-view (eg Balancer)\\n     * The intention is for clients to call as 'static', like a view\\n     */\\n    function populateShutdownData(bytes calldata populateParamsData) external returns (bytes memory shutdownParamsData);\\n\\n    /**\\n     * @notice The strategy executor can shutdown this strategy, only after Executors have\\n     * marked the strategy as `isShuttingDown` in the TRV.\\n     * This should handle all liquidations and send all funds back to the TRV, and will then call `TRV.shutdown()`\\n     * to apply the shutdown.\\n     * @dev Each strategy may require a different set of params to do the shutdown. It can abi encode/decode\\n     * that data off chain, or by first calling populateShutdownData()\\n     */\\n    function automatedShutdown(bytes calldata shutdownParamsData) external;\\n\\n    /**\\n     * @notice Executors can recover any token from the strategy.\\n     */\\n    function recoverToken(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Executors can set the allowance of any token spend from the strategy\\n     */\\n    function setTokenAllowance(IERC20 token, address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice A hook which is called by the Treasury Reserves Vault when the debt ceiling\\n     * for this strategy is updated\\n     * @dev by default it's a no-op unless the strategy implements `_debtCeilingUpdated()`\\n     */\\n    function debtCeilingUpdated(IERC20 token, uint256 newDebtCeiling) external;\\n}\"\r\n    },\r\n    \"contracts/v2/access/TempleElevatedAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/access/TempleElevatedAccess.sol)\\n\\nimport { ITempleElevatedAccess } from \\\"contracts/interfaces/v2/access/ITempleElevatedAccess.sol\\\";\\nimport { CommonEventsAndErrors } from \\\"contracts/common/CommonEventsAndErrors.sol\\\";\\n\\n/**\\n * @notice Inherit to add Executor and Rescuer roles for DAO elevated access.\\n */ \\nabstract contract TempleElevatedAccess is ITempleElevatedAccess {\\n    /**\\n     * @notice The address which is approved to execute emergency operations.\\n     */ \\n    address public override rescuer;\\n\\n    /**\\n     * @notice The address which is approved to execute normal operations on behalf of the DAO.\\n     */ \\n    address public override executor;\\n\\n    /**\\n     * @notice Explicit approval for an address to execute a function.\\n     * allowedCaller => function selector => true/false\\n     */\\n    mapping(address => mapping(bytes4 => bool)) public override explicitFunctionAccess;\\n\\n    /**\\n     * @notice Under normal circumstances, rescuers don't have access to admin/operational functions.\\n     * However when rescue mode is enabled (by rescuers or executors), they claim the access rights.\\n     */\\n    bool public override inRescueMode;\\n\\n    /// @dev Track proposed rescuer/executor\\n    address private _proposedNewRescuer;\\n    address private _proposedNewExecutor;\\n\\n    constructor(address initialRescuer, address initialExecutor) {\\n        if (initialRescuer == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (initialExecutor == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (initialExecutor == initialRescuer) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        rescuer = initialRescuer;\\n        executor = initialExecutor;\\n    }\\n\\n    /**\\n     * @notice Set the contract into or out of rescue mode.\\n     * Only the rescuers are allowed to set.\\n     */\\n    function setRescueMode(bool value) external override {\\n        if (msg.sender != rescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        emit RescueModeSet(value);\\n        inRescueMode = value;\\n    }\\n\\n    /**\\n     * @notice Proposes a new Rescuer.\\n     * Can only be called by the current rescuer.\\n     */\\n    function proposeNewRescuer(address account) external override {\\n        if (msg.sender != rescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        if (account == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        emit NewRescuerProposed(msg.sender, _proposedNewRescuer, account);\\n        _proposedNewRescuer = account;\\n    }\\n\\n    /**\\n     * @notice Caller accepts the role as new Rescuer.\\n     * Can only be called by the proposed rescuer\\n     */\\n    function acceptRescuer() external override {\\n        if (msg.sender != _proposedNewRescuer) revert CommonEventsAndErrors.InvalidAccess();\\n        if (msg.sender == executor) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        emit NewRescuerAccepted(rescuer, msg.sender);\\n        rescuer = msg.sender;\\n        delete _proposedNewRescuer;\\n    }\\n\\n    /**\\n     * @notice Proposes a new Executor.\\n     * Can only be called by the current executor or rescuer (if in resuce mode)\\n     */\\n    function proposeNewExecutor(address account) external override onlyElevatedAccess {\\n        if (account == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        emit NewExecutorProposed(executor, _proposedNewExecutor, account);\\n        _proposedNewExecutor = account;\\n    }\\n\\n    /**\\n     * @notice Caller accepts the role as new Executor.\\n     * Can only be called by the proposed executor\\n     */\\n    function acceptExecutor() external override {\\n        if (msg.sender != _proposedNewExecutor) revert CommonEventsAndErrors.InvalidAccess();\\n        if (msg.sender == rescuer) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        emit NewExecutorAccepted(executor, msg.sender);\\n        executor = msg.sender;\\n        delete _proposedNewExecutor;\\n    }\\n\\n    /**\\n     * @notice Grant `allowedCaller` the rights to call the function selectors in the access list.\\n     * @dev fnSelector == bytes4(keccak256(\\\"fn(argType1,argType2,...)\\\"))\\n     */\\n    function setExplicitAccess(address allowedCaller, ExplicitAccess[] calldata access) external override onlyElevatedAccess {\\n        if (allowedCaller == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        uint256 _length = access.length;\\n        ExplicitAccess memory _access;\\n        for (uint256 i; i < _length; ++i) {\\n            _access = access[i];\\n            emit ExplicitAccessSet(allowedCaller, _access.fnSelector, _access.allowed);\\n            explicitFunctionAccess[allowedCaller][_access.fnSelector] = _access.allowed;\\n        }\\n    }\\n\\n    function isElevatedAccess(address caller, bytes4 fnSelector) internal view returns (bool) {\\n        if (inRescueMode) {\\n            // If we're in rescue mode, then only the rescuers can call\\n            return caller == rescuer;\\n        } else if (caller == executor || explicitFunctionAccess[caller][fnSelector]) {\\n            // If we're not in rescue mode, the executor can call all functions\\n            // or the caller has been given explicit access on this function\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Under normal operations, only the executors are allowed to call.\\n     * If 'rescue mode' has been enabled, then only the rescuers are allowed to call.\\n     * @dev Important: Only for use when called from an *external* contract. \\n     * If a function with this modifier is called internally then the `msg.sig` \\n     * will still refer to the top level externally called function.\\n     */\\n    modifier onlyElevatedAccess() {\\n        if (!isElevatedAccess(msg.sender, msg.sig)) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only the executors or rescuers can call.\\n     */\\n    modifier onlyInRescueMode() {\\n        if (!(inRescueMode && msg.sender == rescuer)) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n\\n    modifier notInRescueMode() {\\n        if (inRescueMode) revert CommonEventsAndErrors.InvalidAccess();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/TreasuryReservesVault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (v2/TreasuryReservesVault.sol)\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport { ITreasuryReservesVault } from \\\"contracts/interfaces/v2/ITreasuryReservesVault.sol\\\";\\nimport { ITreasuryPriceIndexOracle } from \\\"contracts/interfaces/v2/ITreasuryPriceIndexOracle.sol\\\";\\nimport { ITempleStrategy, ITempleBaseStrategy } from \\\"contracts/interfaces/v2/strategies/ITempleBaseStrategy.sol\\\";\\nimport { ITempleDebtToken } from \\\"contracts/interfaces/v2/ITempleDebtToken.sol\\\";\\n\\nimport { CommonEventsAndErrors } from \\\"contracts/common/CommonEventsAndErrors.sol\\\";\\nimport { TempleElevatedAccess } from \\\"contracts/v2/access/TempleElevatedAccess.sol\\\";\\n\\n/**\\n * @title Treasury Reserves Vault (TRV)\\n *\\n * @notice Temple has various strategies which utilise the treasury funds to generate \\n * gains for token holders.\\n * \\n * The maximum amount of funds allocated to each strategy is determined by governance, \\n * and then each strategy can borrow/repay as required (up to the cap).\\n * \\n * When strategies borrow funds, they are issued `dToken`, an accruing debt token representing\\n * the debt to the temple treasury. This is used to compare strategies performance, where\\n * we can determine an equity value (assets - debt).\\n *\\n *    Strategies can borrow different types of tokens from the TRV, and are minted equivalent internal debt tokens eg:\\n *      DAI => minted dUSD\\n *      TEMPLE => minted dTEMPLE\\n *      ETH => minted dETH\\n *   \\n *   Each of the dTokens are compounding at different risk free rates, eg:\\n *      dUSD: At DAIs Savings Rate (DSR)\\n *      dTEMPLE: 0% interest (no opportunity cost)\\n *      dETH: ~avg LST rate\\n *   \\n *   And so each token which can be borrowed has separate config on how to pull/deposit idle funds.\\n *   For example, this may be:\\n *      DAI => DSR base strategy\\n *      TEMPLE => direct Temple mint/burn \\n *      ETH => just hold in a vault\\n */\\ncontract TreasuryReservesVault is ITreasuryReservesVault, TempleElevatedAccess {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string private constant API_VERSION = \\\"1.0.0\\\";\\n\\n    /**\\n     * @notice The configuration for a given strategy\\n     */\\n    mapping(address => StrategyConfig) public override strategies;\\n\\n    /**\\n     * @notice The list of all strategies currently added to the TRV\\n     */\\n    EnumerableSet.AddressSet internal _strategySet;\\n\\n    /**\\n     * @notice The configuration for a given token which can be borrowed by strategies\\n     */\\n    mapping(IERC20 => BorrowTokenConfig) public override borrowTokens;\\n\\n    /**\\n     * @notice The list of all tokens which can be borrowed by the TRV\\n     */\\n    EnumerableSet.AddressSet internal _borrowTokenSet;\\n\\n    /**\\n     * @notice A strategy may pay off more than it's entire debt token balance, \\n     * in which case the TRV maintains a 'credit' balance which will contribute\\n     * towards realised gain/loss at full liquidation.\\n     * These credits are also a contributing factor to the strategy equity calculations.\\n     */\\n    mapping(address => mapping(IERC20 => uint256)) public override strategyTokenCredits;\\n\\n    /**\\n     * @notice True if all borrows are paused for all strategies.\\n     */\\n    bool public override globalBorrowPaused;\\n\\n    /**\\n     * @notice True if all repayments are paused for all strategies.\\n     */\\n    bool public override globalRepaysPaused;\\n\\n    /**\\n     * @notice The Treasury Price Index Oracle\\n     */\\n    ITreasuryPriceIndexOracle public override tpiOracle;\\n\\n    constructor(\\n        address _initialRescuer,\\n        address _initialExecutor,\\n        address _tpiOracle\\n    ) TempleElevatedAccess(_initialRescuer, _initialExecutor)\\n    {\\n        tpiOracle = ITreasuryPriceIndexOracle(_tpiOracle);\\n    }\\n\\n    /**\\n     * @notice Set the borrow token configuration. \\n     * @dev This can either add a new token or update an existing token.\\n     */\\n    function setBorrowToken(\\n        IERC20 token, \\n        address baseStrategy,\\n        uint256 baseStrategyWithdrawalBuffer,\\n        uint256 baseStrategyDepositThreshold,\\n        address dToken\\n    ) external override onlyElevatedAccess {\\n        if (address(token) == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (address(dToken) == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n        if (baseStrategyDepositThreshold < baseStrategyWithdrawalBuffer) revert CommonEventsAndErrors.InvalidParam();\\n\\n        emit BorrowTokenSet(address(token), baseStrategy, baseStrategyWithdrawalBuffer, baseStrategyDepositThreshold, dToken);\\n        borrowTokens[token] = BorrowTokenConfig({\\n            baseStrategy: ITempleBaseStrategy(baseStrategy),\\n            baseStrategyWithdrawalBuffer: baseStrategyWithdrawalBuffer,\\n            baseStrategyDepositThreshold: baseStrategyDepositThreshold,\\n            dToken: ITempleDebtToken(dToken)\\n        });\\n        _borrowTokenSet.add(address(token));\\n    }\\n\\n    /**\\n     * @notice Remove the borrow token configuration. \\n     */\\n    function removeBorrowToken(\\n        IERC20 token\\n    ) external override onlyElevatedAccess {\\n        if (!_borrowTokenSet.contains(address(token))) revert BorrowTokenNotEnabled();\\n        emit BorrowTokenRemoved(address(token));\\n        delete borrowTokens[token];\\n        _borrowTokenSet.remove(address(token));\\n    }\\n\\n    /**\\n     * @notice Set the Treasury Price Index (TPI) Oracle\\n     */\\n    function setTpiOracle(address newTpiOracle) external override onlyElevatedAccess {\\n        if (address(newTpiOracle) == address(0)) revert CommonEventsAndErrors.InvalidAddress();\\n\\n        ITreasuryPriceIndexOracle _tpiOracle = ITreasuryPriceIndexOracle(newTpiOracle);\\n        if (_tpiOracle.treasuryPriceIndex() == 0) revert CommonEventsAndErrors.InvalidParam();\\n\\n        emit TpiOracleSet(newTpiOracle);\\n        tpiOracle = _tpiOracle;\\n    }\\n\\n    /**\\n     * @notice Pause all strategy borrow and repays\\n     */\\n    function setGlobalPaused(bool _pauseBorrow, bool _pauseRepays) external override onlyElevatedAccess {\\n        emit GlobalPausedSet(_pauseBorrow, _pauseRepays);\\n        globalBorrowPaused = _pauseBorrow;\\n        globalRepaysPaused = _pauseRepays;\\n    }\\n\\n    /**\\n     * @dev sum(debt ceiling, credits) need to be checked that they don't overflow, on write.\\n     */\\n    function _checkAddOverflow(uint256 a, uint256 b) internal pure {\\n        a + b;\\n    }\\n\\n    /**\\n     * @notice Register a new strategy which can borrow tokens from Treasury Reserves\\n     */\\n    function addStrategy(\\n        address strategy, \\n        int256 underperformingEquityThreshold,\\n        ITempleStrategy.AssetBalance[] calldata debtCeiling\\n    ) external override onlyElevatedAccess {\\n        if (!_strategySet.add(strategy)) revert AlreadyEnabled();\\n        emit StrategyAdded(strategy, underperformingEquityThreshold);\\n\\n        StrategyConfig storage strategyConfig = strategies[strategy];\\n        strategyConfig.underperformingEquityThreshold = underperformingEquityThreshold;\\n\\n        ITempleStrategy.AssetBalance calldata _assetBalance;\\n        uint256 _length = debtCeiling.length;\\n        IERC20 _token;\\n        for (uint256 i; i < _length; ++i) {\\n            _assetBalance = debtCeiling[i];\\n            _token = IERC20(_assetBalance.asset);\\n            emit DebtCeilingUpdated(\\n                strategy, \\n                address(_token), \\n                strategyConfig.debtCeiling[_token], \\n                _assetBalance.balance\\n            );\\n\\n            if (!_borrowTokenSet.contains(address(_token))) revert BorrowTokenNotEnabled();\\n            strategyConfig.debtCeiling[_token] = _assetBalance.balance;\\n            strategyConfig.enabledBorrowTokens[_token] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable and/or disable tokens which a strategy can borrow from the (configured) TRV borrow tokens\\n     */\\n    function updateStrategyEnabledBorrowTokens(\\n        address strategy, \\n        IERC20[] calldata enableBorrowTokens, \\n        IERC20[] calldata disableBorrowTokens\\n    ) external override onlyElevatedAccess {\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n\\n        uint256 i;\\n        IERC20 token;\\n        uint256 _length = enableBorrowTokens.length;\\n        for (; i < _length; ++i) {\\n            token = enableBorrowTokens[i];\\n            if (!_borrowTokenSet.contains(address(token))) revert BorrowTokenNotEnabled();\\n            _strategyConfig.enabledBorrowTokens[token] = true;\\n        }\\n\\n        _length = disableBorrowTokens.length;\\n        for (i = 0; i < _length; ++i) {\\n            // Don't need to validate that the borrow token is configured when disabling.\\n            _strategyConfig.enabledBorrowTokens[disableBorrowTokens[i]] = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set whether borrows and repayments are paused for a given strategy.\\n     */\\n    function setStrategyPaused(address strategy, bool pauseBorrow, bool pauseRepays) external override onlyElevatedAccess {\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n        emit StrategyPausedSet(strategy, pauseBorrow, pauseRepays);\\n        _strategyConfig.borrowPaused = pauseBorrow;\\n        _strategyConfig.repaysPaused = pauseRepays;\\n    }\\n\\n    /**\\n     * @notice Update the debt ceiling for a given strategy\\n     */\\n    function setStrategyDebtCeiling(address strategy, IERC20 token, uint256 newDebtCeiling) external override onlyElevatedAccess {\\n        if (!_borrowTokenSet.contains(address(token))) revert BorrowTokenNotEnabled();\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n        if (!_strategyConfig.enabledBorrowTokens[token]) revert BorrowTokenNotEnabled();\\n\\n        emit DebtCeilingUpdated(strategy, address(token), _strategyConfig.debtCeiling[token], newDebtCeiling);\\n\\n        // Revert if the debt ceiling + credit overflows\\n        _checkAddOverflow(newDebtCeiling, strategyTokenCredits[strategy][token]);\\n\\n        _strategyConfig.debtCeiling[token] = newDebtCeiling;\\n\\n        ITempleStrategy(strategy).debtCeilingUpdated(token, newDebtCeiling);\\n    }\\n\\n    /**\\n     * @notice Update the underperforming equity threshold.\\n     */\\n    function setStrategyUnderperformingThreshold(address strategy, int256 underperformingEquityThreshold) external override onlyElevatedAccess {\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n\\n        emit UnderperformingEquityThresholdUpdated(strategy, _strategyConfig.underperformingEquityThreshold, underperformingEquityThreshold);\\n        _strategyConfig.underperformingEquityThreshold = underperformingEquityThreshold;\\n    }\\n    \\n    /**\\n     * @notice The first step in a two-phase shutdown. Executor first sets whether a strategy is slated for shutdown.\\n     * The strategy then needs to call shutdown as a separate call once ready.\\n     */\\n    function setStrategyIsShuttingDown(address strategy, bool isShuttingDown) external override onlyElevatedAccess {\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n        emit StrategyIsShuttingDownSet(strategy, isShuttingDown);\\n        _strategyConfig.isShuttingDown = isShuttingDown;\\n    }\\n\\n    /**\\n     * @notice The second step in a two-phase shutdown. A strategy (automated) or executor (manual) calls\\n     * to effect the shutdown. isShuttingDown must be true for the strategy first.\\n     * The strategy executor is responsible for unwinding all it's positions first and sending stables to the TRV.\\n     * All outstanding dToken debt is burned, leaving a net gain/loss of equity for the shutdown strategy.\\n     */\\n    function shutdown(address strategy) external override {\\n        if (msg.sender != strategy && !isElevatedAccess(msg.sender, msg.sig)) revert CommonEventsAndErrors.InvalidAccess();\\n\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n        if (!_strategyConfig.isShuttingDown) revert NotShuttingDown();\\n\\n        // Burn any remaining dToken debt.\\n        IERC20 _token;\\n        mapping(IERC20 => uint256) storage credits = strategyTokenCredits[strategy];\\n        uint256 _length = _borrowTokenSet.length();\\n        uint256 _outstandingDebt;\\n        for (uint256 i; i < _length; ++i) {\\n            _token = IERC20(_borrowTokenSet.at(i));\\n            _outstandingDebt = borrowTokens[_token].dToken.burnAll(strategy);\\n            emit StrategyShutdownCreditAndDebt({\\n                strategy: strategy,\\n                token: address(_token), \\n                outstandingCredit: credits[_token], \\n                outstandingDebt: _outstandingDebt\\n            });\\n\\n            // Clean up the debtCeiling approvals for this borrow token.\\n            // Old borrow ceilings may not be removed, but not an issue\\n            delete _strategyConfig.debtCeiling[_token];\\n            delete _strategyConfig.enabledBorrowTokens[_token];\\n            delete credits[_token];\\n        }\\n\\n        // Remove the strategy\\n        emit StrategyRemoved(strategy);\\n\\n        // Required since the debt ceiling above is a nested mapping. \\n        // It's been cleaned up as much as possible.\\n        // slither-disable-next-line mapping-deletion\\n        delete strategies[strategy];\\n        _strategySet.remove(strategy);\\n    }\\n\\n    /**\\n     * @notice Recover any token from the TRV\\n     * @param token Token to recover\\n     * @param to Recipient address\\n     * @param amount Amount to recover\\n     */\\n    function recoverToken(address token, address to, uint256 amount) external onlyElevatedAccess {\\n        emit CommonEventsAndErrors.TokenRecovered(to, token, amount);\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice A strategy calls to request more funding.\\n     * @dev This will revert if the strategy requests more stables than it's able to borrow.\\n     * `dToken` will be minted 1:1 for the amount of stables borrowed\\n     */\\n    function borrow(IERC20 token, uint256 borrowAmount, address recipient) external override {\\n        BorrowTokenConfig storage _tokenConfig = _getBorrowTokenConfig(token);\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(msg.sender);\\n        if (!_strategyConfig.enabledBorrowTokens[token]) revert BorrowTokenNotEnabled();\\n        uint256 _dTokenBalance = _tokenConfig.dToken.balanceOf(msg.sender);\\n\\n        // This is not allowed to take the borrower over the debt ceiling\\n        uint256 available = _availableForStrategyToBorrow(msg.sender, _strategyConfig, token, _dTokenBalance);\\n        if (borrowAmount > available) revert DebtCeilingBreached(available, borrowAmount);\\n\\n        _borrow(msg.sender, token, recipient, _tokenConfig, _strategyConfig, borrowAmount, _dTokenBalance);\\n    }\\n\\n    /**\\n     * @notice A strategy calls to request the most funding it can.\\n     * @dev This will revert if the strategy requests more stables than it's able to borrow.\\n     * `dToken` will be minted 1:1 for the amount of stables borrowed\\n     */\\n    function borrowMax(IERC20 token, address recipient) external override returns (uint256 borrowedAmount) {\\n        BorrowTokenConfig storage _tokenConfig = _getBorrowTokenConfig(token);\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(msg.sender);\\n        if (!_strategyConfig.enabledBorrowTokens[token]) revert BorrowTokenNotEnabled();\\n        uint256 _dTokenBalance = _tokenConfig.dToken.balanceOf(msg.sender);\\n        borrowedAmount = _availableForStrategyToBorrow(msg.sender, _strategyConfig, token, _dTokenBalance);\\n        _borrow(msg.sender, token, recipient, _tokenConfig, _strategyConfig, borrowedAmount, _dTokenBalance);\\n    }\\n\\n    /**\\n     * @notice A strategy calls to paydown it's debt\\n     * This will pull the stables, and will burn the equivalent amount of dToken from the strategy.\\n     */\\n    function repay(IERC20 token, uint256 repayAmount, address strategy) external override {\\n        BorrowTokenConfig storage _tokenConfig = _getBorrowTokenConfig(token);\\n        uint256 _dTokenBalance = _tokenConfig.dToken.balanceOf(strategy);\\n        _repay(msg.sender, strategy, token, _tokenConfig, repayAmount, _dTokenBalance);\\n        _depositIntoBaseStrategy(token, _tokenConfig, strategy);\\n    }\\n\\n    /**\\n     * @notice A strategy calls to paydown all of it's debt\\n     * This will pull the stables for the entire dToken balance of the strategy, and burn the dToken.\\n     */\\n    function repayAll(IERC20 token, address strategy) external override returns (uint256 amountRepaid) {\\n        BorrowTokenConfig storage _tokenConfig = _getBorrowTokenConfig(token);\\n        amountRepaid = _tokenConfig.dToken.balanceOf(strategy);\\n        _repay(msg.sender, strategy, token, _tokenConfig, amountRepaid, amountRepaid);\\n        _depositIntoBaseStrategy(token, _tokenConfig, strategy);\\n    }\\n\\n    /**\\n     * @notice Track the deployed version of this contract. \\n     */\\n    function apiVersion() external pure override returns (string memory) {\\n        return API_VERSION;\\n    }\\n\\n    /**\\n     * @notice The list of all tokens which can be borrowed by the TRV\\n     */\\n    function borrowTokensList() external view returns (address[] memory) {\\n        return _borrowTokenSet.values();\\n    }\\n\\n    /**\\n     * @notice The Treasury Price Index - the target price of the Treasury, in `stableToken` terms.\\n     */\\n    function treasuryPriceIndex() external view override returns (uint96) {\\n        return tpiOracle.treasuryPriceIndex();\\n    }\\n\\n    /**\\n     * @notice A helper to collate information about a given strategy for reporting purposes.\\n     * @dev Note the current assets may not be 100% up to date, as some strategies may need to checkpoint based\\n     * on the underlying strategy protocols (eg DSR for DAI would need to checkpoint to get the latest valuation).\\n     */\\n    function strategyDetails(address strategy) external override view returns (\\n        string memory name,\\n        string memory version,\\n        bool borrowPaused,\\n        bool repaysPaused,\\n        bool isShuttingDown,\\n        int256 underperformingEquityThreshold,\\n        ITempleStrategy.AssetBalance[] memory debtCeiling\\n    ) {\\n        ITempleStrategy _strategy = ITempleStrategy(strategy);\\n        StrategyConfig storage strategyConfig = _getStrategyConfig(strategy);\\n        name = _strategy.strategyName();\\n        version = _strategy.strategyVersion();\\n        borrowPaused = strategyConfig.borrowPaused;\\n        repaysPaused = strategyConfig.repaysPaused;\\n        isShuttingDown = strategyConfig.isShuttingDown;\\n        underperformingEquityThreshold = strategyConfig.underperformingEquityThreshold;\\n\\n        address _token;\\n        uint256 _length = _borrowTokenSet.length();\\n        debtCeiling = new ITempleStrategy.AssetBalance[](_length);\\n        for (uint256 i; i < _length; ++i) {\\n            _token = _borrowTokenSet.at(i);\\n            debtCeiling[i] = ITempleStrategy.AssetBalance(_token, strategyConfig.debtCeiling[IERC20(_token)]);\\n        }\\n    }\\n\\n    /**\\n     * @notice A strategy's current asset balances, any manual adjustments and the current debt\\n     * of the strategy.\\n     * \\n     * This will be used to report equity performance: `sum($assetValue +- $manualAdj) - debt`\\n     * The conversion of each asset price into the stable token (eg DAI) will be done off-chain\\n     * along with formulating the union of asset balances and manual adjustments\\n     */\\n    function strategyBalanceSheet(address strategy) external override view returns (\\n        ITempleStrategy.AssetBalance[] memory assetBalances,\\n        ITempleStrategy.AssetBalanceDelta[] memory manualAdjustments, \\n        ITempleStrategy.AssetBalance[] memory dTokenBalances,\\n        ITempleStrategy.AssetBalance[] memory dTokenCreditBalances\\n    ) {\\n        ITempleStrategy _strategy = ITempleStrategy(strategy);\\n        assetBalances = _strategy.latestAssetBalances();\\n        manualAdjustments = _strategy.manualAdjustments();\\n\\n        uint256 _length = _borrowTokenSet.length();\\n        dTokenBalances = new ITempleStrategy.AssetBalance[](_length);\\n        dTokenCreditBalances = new ITempleStrategy.AssetBalance[](_length);\\n        address _token;\\n        mapping(IERC20 => uint256) storage _strategyTokenCredits = strategyTokenCredits[strategy];\\n        for (uint256 i; i < _length; ++i) {\\n            _token = _borrowTokenSet.at(i);\\n            dTokenBalances[i] = ITempleStrategy.AssetBalance(_token, borrowTokens[IERC20(_token)].dToken.balanceOf(strategy));\\n            dTokenCreditBalances[i] = ITempleStrategy.AssetBalance(_token, _strategyTokenCredits[IERC20(_token)]);\\n        }\\n    }\\n\\n    /**\\n     * @notice The total available balance available to be borrowed, both as a balance in this contract and\\n     * any available to withdraw from the baseStrategy\\n     */\\n    function totalAvailable(IERC20 token) external override view returns (uint256) {\\n        BorrowTokenConfig storage _tokenConfig = _getBorrowTokenConfig(token);\\n\\n        uint256 baseStrategyAvailable;\\n        ITempleBaseStrategy _baseStrategy = _tokenConfig.baseStrategy;\\n\\n        // Pull the available from the baseStrategy if it's set.\\n        if (address(_baseStrategy) != address(0)) {\\n            ITempleStrategy.AssetBalance[] memory assetBalances = _baseStrategy.latestAssetBalances();\\n\\n            // The base strategy will only have one Asset balance, which should be the requested token\\n            if (assetBalances.length != 1 || assetBalances[0].asset != address(token)) revert CommonEventsAndErrors.InvalidParam();\\n            baseStrategyAvailable = assetBalances[0].balance;\\n        }\\n\\n        return token.balanceOf(address(this)) + baseStrategyAvailable;\\n    }\\n\\n    /**\\n     * @notice The amount remaining that a strategy can borrow for a given token\\n     * taking into account: the approved debt ceiling, current dToken debt, and any credits\\n     * @dev available == min(ceiling - debt + credit, 0)\\n     */\\n    function availableForStrategyToBorrow(\\n        address strategy, \\n        IERC20 token\\n    ) external override view returns (uint256) {\\n        BorrowTokenConfig storage _tokenConfig = _getBorrowTokenConfig(token);\\n        uint256 _dTokenBalance = _tokenConfig.dToken.balanceOf(strategy);\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n        if (!_strategyConfig.enabledBorrowTokens[token]) revert BorrowTokenNotEnabled();\\n        return _availableForStrategyToBorrow(strategy, _strategyConfig, token, _dTokenBalance);\\n    }\\n\\n    /**\\n     * @notice The list of all strategies currently added to the TRV\\n     */\\n    function strategiesList() external override view returns (address[] memory) {\\n        return _strategySet.values();\\n    }\\n\\n    /**\\n     * @notice The current max debt ceiling that a strategy is allowed to borrow up to.\\n     */\\n    function strategyDebtCeiling(address strategy, IERC20 token) external override view returns (uint256) {\\n        if (!_borrowTokenSet.contains(address(token))) revert BorrowTokenNotEnabled();\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n        if (!_strategyConfig.enabledBorrowTokens[token]) revert BorrowTokenNotEnabled();\\n        return _strategyConfig.debtCeiling[token];\\n    }\\n\\n    /**\\n     * @notice Whether a token is enabled to be borrowed for a given strategy\\n     */\\n    function strategyEnabledBorrowTokens(address strategy, IERC20 token) external override view returns (bool) {\\n        return _getStrategyConfig(strategy).enabledBorrowTokens[token];\\n    }\\n\\n    /// @dev Calculate the amount remaining that a strategy can borrow for a given token\\n    /// taking the allowed ceiling, current dToken debt, and any credits into consideration\\n    function _availableForStrategyToBorrow(\\n        address strategy,\\n        StrategyConfig storage strategyConfig,\\n        IERC20 token,\\n        uint256 dTokenBalance\\n    ) internal view returns (uint256) {\\n        // available == max(ceiling + credit - debt, 0)\\n        uint256 _ceiling = strategyConfig.debtCeiling[token];\\n        uint256 _credit = strategyTokenCredits[strategy][token];\\n\\n        unchecked {\\n            // The sum of debtCeiling and credits cannot overflow as they're verified upon write.\\n            uint256 _totalAvailable = _ceiling + _credit;\\n\\n            return _totalAvailable > dTokenBalance\\n                ? _totalAvailable - dTokenBalance\\n                : 0;\\n        } \\n    }\\n\\n    function _borrow(\\n        address strategy, \\n        IERC20 token, \\n        address recipient, \\n        BorrowTokenConfig storage tokenConfig, \\n        StrategyConfig storage strategyConfig, \\n        uint256 borrowAmount,\\n        uint256 dTokenBalance\\n    ) internal {\\n        // slither-disable-next-line incorrect-equality\\n        if (borrowAmount == 0) revert CommonEventsAndErrors.ExpectedNonZero();\\n        if (globalBorrowPaused) revert BorrowPaused();\\n        if (strategyConfig.borrowPaused) revert BorrowPaused();\\n        if (strategyConfig.isShuttingDown) revert StrategyIsShutdown();\\n\\n        emit Borrow(strategy, address(token), recipient, borrowAmount);\\n\\n        // Mint any required dToken (after taking into consideration any credits)\\n        _mintDToken(strategy, token, tokenConfig, borrowAmount, dTokenBalance);\\n\\n        // Source the token from the baseStrategy and send to the strategy.\\n        _withdrawFromBaseStrategy(strategy, token, tokenConfig, recipient, borrowAmount);\\n    }\\n    \\n    /**\\n     * @dev Pull tokens from the defined base strategy for this token config.\\n     * If the base strategy isn't set, or the requesting strategy IS the base strategy, then\\n     * this is a no-op. Token are sent directly from the TRV (this contract)\\n     */\\n    function _withdrawFromBaseStrategy(\\n        address strategy,\\n        IERC20 token, \\n        BorrowTokenConfig storage tokenConfig, \\n        address recipient, \\n        uint256 amount\\n    ) internal {\\n        ITempleBaseStrategy _baseStrategy = tokenConfig.baseStrategy;\\n        address _baseStrategyAddr = address(_baseStrategy);\\n        uint256 _balance = token.balanceOf(address(this));\\n        if (_baseStrategyAddr != address(0) && _baseStrategyAddr != strategy) {\\n            // There may be idle tokens sitting idle in the TRV (ie these are not yet deposited into the baseStrategy)\\n            // So use these first, and only then fallback to pulling the rest from base strategy.\\n            uint256 _withdrawFromBaseStrategyAmount;\\n            unchecked {\\n                _withdrawFromBaseStrategyAmount = _balance > amount ? 0 : amount - _balance;\\n            }\\n\\n            // Pull any remainder required from the base strategy.\\n            if (_withdrawFromBaseStrategyAmount > 0) {\\n                // So there aren't lots of small withdrawals, pull the amount required for this transaction\\n                // plus the threshold amount. Then future borrows don't need to withdraw from base every time.\\n                _withdrawFromBaseStrategyAmount += tokenConfig.baseStrategyWithdrawalBuffer;\\n\\n                // The amount actually withdrawn may be less than requested\\n                // as it's capped to any actual remaining balance in the base strategy\\n                uint256 _withdrawnAmount = _baseStrategy.trvWithdraw(_withdrawFromBaseStrategyAmount);\\n\\n                // Burn the dTokens from the base strategy.\\n                if (_withdrawnAmount > 0) {\\n                    _balance += _withdrawnAmount;\\n\\n                    _burnDToken(\\n                        _baseStrategyAddr, \\n                        strategies[_baseStrategyAddr], \\n                        token, \\n                        tokenConfig, \\n                        _withdrawnAmount, \\n                        tokenConfig.dToken.balanceOf(_baseStrategyAddr)\\n                    );\\n                }\\n            }\\n        }\\n\\n        // The tokens are transferred straight from TRV, no withdrawal from the base strategy\\n        // Do an extra check that it at least has the requested amount in case the token isn't a standard ERC20 which already does a check.\\n        if (amount > _balance) revert CommonEventsAndErrors.InsufficientBalance(address(token), amount, _balance);\\n\\n        // Finally send the stables.\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Increase the dToken debt balance by `toMintAmount`. \\n     * Use up any available 'token credits' first, and only mint the balance outstanding.\\n     */\\n    function _mintDToken(\\n        address strategy, \\n        IERC20 token, \\n        BorrowTokenConfig storage tokenConfig, \\n        uint256 toMintAmount,\\n        uint256 dTokenBalance\\n    ) internal {\\n        mapping(IERC20 => uint256) storage _tokenCredits = strategyTokenCredits[strategy];\\n        uint256 _creditBalance = _tokenCredits[token];\\n\\n        if (toMintAmount > _creditBalance) {\\n            // Mint new dToken for the amount not covered by prior credit balance credit\\n            uint256 _newDebt;\\n            unchecked {\\n                _newDebt = toMintAmount - _creditBalance;\\n\\n                // Safe to be unchecked as it's also overflow checked within the dToken.mint() below\\n                dTokenBalance += _newDebt;\\n            }\\n            tokenConfig.dToken.mint(strategy, _newDebt);\\n\\n            // The credit is now 0\\n            _tokenCredits[token] = _creditBalance = 0;\\n        } else {\\n            // Use up remaining credits\\n            unchecked {\\n              _creditBalance -= toMintAmount;\\n            }\\n            _tokenCredits[token] = _creditBalance;\\n        }\\n\\n        emit StrategyCreditAndDebtBalance(strategy, address(token), _creditBalance, dTokenBalance);\\n    }\\n\\n    /**\\n     * @dev Decrease the dToken debt balance by `toBurnAmount`. \\n     * If there is no more dToken balance (ie fully repaid), then the strategy can go into 'credit'\\n     * which is just kept as state on this contract (no aToken is minted)\\n     */\\n    function _burnDToken(\\n        address strategy, \\n        StrategyConfig storage strategyConfig,\\n        IERC20 token, \\n        BorrowTokenConfig storage tokenConfig, \\n        uint256 toBurnAmount,\\n        uint256 dTokenBalance\\n    ) internal {\\n        mapping(IERC20 => uint256) storage _tokenCredits = strategyTokenCredits[strategy];\\n        uint256 _creditBalance = _tokenCredits[token];\\n\\n        uint256 _burnedAmount = tokenConfig.dToken.burn(strategy, toBurnAmount);\\n        uint256 _remaining;\\n        unchecked {\\n            dTokenBalance -= _burnedAmount;\\n            _remaining = toBurnAmount - _burnedAmount;\\n        }\\n\\n        // If there is any remaining which is not burned, then the debt is now 0\\n        // Add the remainder as a credit.\\n        if (_remaining > 0) {\\n            unchecked {\\n                _creditBalance += _remaining;\\n            }\\n\\n            // Revert if the debt ceiling + credit overflows\\n            _checkAddOverflow(strategyConfig.debtCeiling[token], _creditBalance);\\n\\n            _tokenCredits[token] = _creditBalance;\\n        }\\n\\n        emit StrategyCreditAndDebtBalance(strategy, address(token), _creditBalance, dTokenBalance);\\n    }\\n\\n    function _getStrategyConfig(address strategy) internal view returns (StrategyConfig storage strategyConfig) {\\n        if (!_strategySet.contains(strategy)) revert StrategyNotEnabled();\\n        return strategies[strategy];\\n    }\\n\\n    function _getBorrowTokenConfig(IERC20 token) internal view returns (BorrowTokenConfig storage tokenConfig) {\\n        if (!_borrowTokenSet.contains(address(token))) revert BorrowTokenNotEnabled();\\n        return borrowTokens[token];\\n    }\\n\\n    /**\\n     * @dev Deposit any surplus token balances into the base strategy,\\n     * only when the token balance is greater than `baseStrategyDepositThreshold`\\n     * `baseStrategyWithdrawalBuffer` is always left for future withdrawals.\\n     * If the base strategy isn't set, or the requesting strategy IS the base strategy, then\\n     * don't do anything -- the tokens are just left in the TRV for future withdrawals.\\n     * \\n     */\\n    function _depositIntoBaseStrategy(\\n        IERC20 token, \\n        BorrowTokenConfig storage tokenConfig,\\n        address strategy\\n    ) internal {\\n        ITempleBaseStrategy _baseStrategy = tokenConfig.baseStrategy;\\n        if (address(_baseStrategy) != address(0) && address(_baseStrategy) != strategy) {\\n            uint256 _balance = token.balanceOf(address(this));\\n\\n            // Do nothing if the balance isn't greater than the threshold\\n            if (_balance > tokenConfig.baseStrategyDepositThreshold) {\\n                unchecked {\\n                    _balance -= tokenConfig.baseStrategyWithdrawalBuffer;\\n                }\\n\\n                // Mint new dTokens for this base strategy.\\n                uint256 _dTokenBalance = tokenConfig.dToken.balanceOf(address(_baseStrategy));\\n                _mintDToken(address(_baseStrategy), token, tokenConfig, _balance, _dTokenBalance);\\n\\n                // Deposit the tokens into the base strategy\\n                token.safeTransfer(address(_baseStrategy), _balance);\\n                _baseStrategy.trvDeposit(_balance);\\n            }\\n        }\\n    }\\n\\n    function _repay(\\n        address from, \\n        address strategy, \\n        IERC20 token, \\n        BorrowTokenConfig storage tokenConfig, \\n        uint256 repayAmount,\\n        uint256 dTokenBalance\\n    ) internal {\\n        // slither-disable-next-line incorrect-equality\\n        if (repayAmount == 0) revert CommonEventsAndErrors.ExpectedNonZero();\\n        if (globalRepaysPaused) revert RepaysPaused();\\n        StrategyConfig storage _strategyConfig = _getStrategyConfig(strategy);\\n        if (!_strategyConfig.enabledBorrowTokens[token]) revert BorrowTokenNotEnabled();\\n\\n        if (_strategyConfig.repaysPaused) revert RepaysPaused();\\n        emit Repay(strategy, address(token), from, repayAmount);\\n\\n        // Burn the dToken tokens / add credits\\n        _burnDToken(strategy, _strategyConfig, token, tokenConfig, repayAmount, dTokenBalance);\\n\\n        // Pull the stables from the strategy.\\n        token.safeTransferFrom(from, address(this), repayAmount);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialRescuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialExecutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tpiOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowTokenNotEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingBreached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedNonZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotShuttingDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepaysPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotEnabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BorrowTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseStrategyWithdrawalBuffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseStrategyDepositThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"}],\"name\":\"BorrowTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ExplicitAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"repay\",\"type\":\"bool\"}],\"name\":\"GlobalPausedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedExecutor\",\"type\":\"address\"}],\"name\":\"NewExecutorProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldProposedRescuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProposedRescuer\",\"type\":\"address\"}],\"name\":\"NewRescuerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RescueModeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"StrategyCreditAndDebtBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"}],\"name\":\"StrategyIsShuttingDownSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"repay\",\"type\":\"bool\"}],\"name\":\"StrategyPausedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingCredit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingDebt\",\"type\":\"uint256\"}],\"name\":\"StrategyShutdownCreditAndDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tpiOracle\",\"type\":\"address\"}],\"name\":\"TpiOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"oldThreshold\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newThreshold\",\"type\":\"int256\"}],\"name\":\"UnderperformingEquityThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"debtCeiling\",\"type\":\"tuple[]\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"availableForStrategyToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"borrowMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowTokens\",\"outputs\":[{\"internalType\":\"contract ITempleBaseStrategy\",\"name\":\"baseStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyWithdrawalBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyDepositThreshold\",\"type\":\"uint256\"},{\"internalType\":\"contract ITempleDebtToken\",\"name\":\"dToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"explicitFunctionAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalRepaysPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRescueMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeNewRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"repayAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyWithdrawalBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStrategyDepositThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"}],\"name\":\"setBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"fnSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ITempleElevatedAccess.ExplicitAccess[]\",\"name\":\"access\",\"type\":\"tuple[]\"}],\"name\":\"setExplicitAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pauseBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_pauseRepays\",\"type\":\"bool\"}],\"name\":\"setGlobalPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRescueMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"setStrategyDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"}],\"name\":\"setStrategyIsShuttingDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pauseBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRepays\",\"type\":\"bool\"}],\"name\":\"setStrategyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"}],\"name\":\"setStrategyUnderperformingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTpiOracle\",\"type\":\"address\"}],\"name\":\"setTpiOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaysPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategiesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategyBalanceSheet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"assetBalances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalanceDelta[]\",\"name\":\"manualAdjustments\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"dTokenBalances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"dTokenCreditBalances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"strategyDebtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategyDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"borrowPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"repaysPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isShuttingDown\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"underperformingEquityThreshold\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ITempleStrategy.AssetBalance[]\",\"name\":\"debtCeiling\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"strategyEnabledBorrowTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyTokenCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tpiOracle\",\"outputs\":[{\"internalType\":\"contract ITreasuryPriceIndexOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPriceIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"enableBorrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"disableBorrowTokens\",\"type\":\"address[]\"}],\"name\":\"updateStrategyEnabledBorrowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TreasuryReservesVault", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000009f90430179d9b67341bfa50559bc7b8e35629f1b000000000000000000000000b1e8ab0a81aadf632a653e46caeda1593d71d14300000000000000000000000097e9103267d58448bae0cf6e056f343bd7728d02", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}