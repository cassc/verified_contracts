{"SourceCode": "//SPDX-License-Identifier: MIT\r\n \r\npragma solidity 0.8.19;\r\n \r\ninterface IUniswapV2Factory {\r\nfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n \r\ninterface IUniswapV2Router01 {\r\nfunction factory() external pure returns (address);\r\nfunction WETH() external pure returns (address);\r\nfunction addLiquidityETH(\r\naddress token,\r\nuint amountTokenDesired,\r\nuint amountTokenMin,\r\nuint amountETHMin,\r\naddress to,\r\nuint deadline\r\n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\nuint amountIn,\r\nuint amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint deadline\r\n) external;\r\n}\r\n \r\ninterface IERC20 {\r\nfunction totalSupply() external view returns (uint256);\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) external returns (bool);\r\n \r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\ninterface IERC20Metadata is IERC20 {\r\nfunction name() external view returns (string memory);\r\nfunction symbol() external view returns (string memory);\r\nfunction decimals() external view returns (uint8);\r\n}\r\n \r\nlibrary Address {\r\nfunction sendValue(address payable recipient, uint256 amount) internal returns(bool){\r\nrequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n \r\n(bool success, ) = recipient.call{value: amount}(\"\");\r\nreturn success; // always proceeds\r\n}\r\n}\r\n \r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n \r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\nreturn msg.data;\r\n}\r\n}\r\n \r\nabstract contract Ownable is Context {\r\naddress private _owner;\r\n \r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\nconstructor () {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n \r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\n \r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n \r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n \r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}\r\n \r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\nmapping(address => uint256) private _balances;\r\nmapping(address => mapping(address => uint256)) private _allowances;\r\n \r\nuint256 private _totalSupply;\r\n \r\nstring private _name;\r\nstring private _symbol;\r\n \r\nconstructor(string memory name_, string memory symbol_) {\r\n_name = name_;\r\n_symbol = symbol_;\r\n}\r\n \r\nfunction name() public view virtual override returns (string memory) {\r\nreturn _name;\r\n}\r\n \r\nfunction symbol() public view virtual override returns (string memory) {\r\nreturn _symbol;\r\n}\r\n \r\nfunction decimals() public view virtual override returns (uint8) {\r\nreturn 18;\r\n}\r\n \r\nfunction totalSupply() public view virtual override returns (uint256) {\r\nreturn _totalSupply;\r\n}\r\n \r\nfunction balanceOf(address account) public view virtual override returns (uint256) {\r\nreturn _balances[account];\r\n}\r\n \r\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n \r\nfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n \r\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n \r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) public virtual override returns (bool) {\r\nuint256 currentAllowance = _allowances[sender][_msgSender()];\r\nif (currentAllowance != type(uint256).max) {\r\nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\nunchecked {\r\n_approve(sender, _msgSender(), currentAllowance - amount);\r\n}\r\n}\r\n \r\n_transfer(sender, recipient, amount);\r\n \r\nreturn true;\r\n}\r\n \r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\nreturn true;\r\n}\r\n \r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\nuint256 currentAllowance = _allowances[_msgSender()][spender];\r\nrequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\nunchecked {\r\n_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n}\r\n \r\nreturn true;\r\n}\r\n \r\nfunction _transfer(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) internal virtual {\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\nuint256 senderBalance = _balances[sender];\r\nrequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\nunchecked {\r\n_balances[sender] = senderBalance - amount;\r\n}\r\n_balances[recipient] += amount;\r\n \r\nemit Transfer(sender, recipient, amount);\r\n}\r\n \r\nfunction _mintOnce(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n_totalSupply += amount;\r\n_balances[account] += amount;\r\nemit Transfer(address(0), account, amount);\r\n}\r\n \r\nfunction _burn(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\nuint256 accountBalance = _balances[account];\r\nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\nunchecked {\r\n_balances[account] = accountBalance - amount;\r\n}\r\n_totalSupply -= amount;\r\n \r\nemit Transfer(account, address(0), amount);\r\n}\r\n \r\nfunction _approve(\r\naddress owner,\r\naddress spender,\r\nuint256 amount\r\n) internal virtual {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n}\r\n \r\ncontract TRUMPTAX is ERC20, Ownable {\r\nusing Address for address payable;\r\n \r\nIUniswapV2Router02 public uniswapV2Router;\r\naddress public uniswapV2Pair;\r\n \r\nmapping (address => bool) private _isExcludedFromFees;\r\n \r\nuint256 public feeOnBuy;\r\nuint256 public feeOnSell;\r\n \r\nuint256 public feeOnTransfer;\r\n \r\naddress public feeReceiver;\r\n \r\nuint256 public swapTokensAtAmount;\r\nbool private swapping;\r\n \r\nbool public swapEnabled;\r\n \r\nevent ExcludeFromFees(address indexed account, bool isExcluded);\r\nevent SwapAndSendFee(uint256 tokensSwapped, uint256 bnbSend);\r\nevent SwapTokensAtAmountUpdated(uint256 swapTokensAtAmount);\r\n \r\nconstructor () ERC20(\"TRUMPTAX\", \"TRUMPTAX\")\r\n{\r\naddress router;\r\naddress pinkLock;\r\n \r\nif (block.chainid == 56) {\r\nrouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // BSC Pancake Mainnet Router\r\npinkLock = 0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE; // BSC PinkLock\r\n} else if (block.chainid == 97) {\r\nrouter = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // BSC Pancake Testnet Router\r\npinkLock = 0x5E5b9bE5fd939c578ABE5800a90C566eeEbA44a5; // BSC Testnet PinkLock\r\n} else if (block.chainid == 1 || block.chainid == 5) {\r\nrouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ETH Uniswap Mainnet % Testnet\r\npinkLock = 0x71B5759d73262FBb223956913ecF4ecC51057641; // ETH PinkLock\r\n} else {\r\nrevert();\r\n}\r\n \r\ntransferOwnership(0x3806dcb19e6644C9333e8e36da28cB48872668aE);\r\n \r\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\naddress _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n.createPair(address(this), _uniswapV2Router.WETH());\r\n \r\nuniswapV2Router = _uniswapV2Router;\r\nuniswapV2Pair = _uniswapV2Pair;\r\n \r\n_approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n \r\nfeeOnBuy = 3;\r\nfeeOnSell = 4;\r\n \r\nfeeOnTransfer = 1;\r\n \r\nfeeReceiver = 0x3806dcb19e6644C9333e8e36da28cB48872668aE;\r\n \r\n_isExcludedFromFees[owner()] = true;\r\n_isExcludedFromFees[address(0xdead)] = true;\r\n_isExcludedFromFees[address(this)] = true;\r\n_isExcludedFromFees[pinkLock] = true;\r\n \r\n_mintOnce(owner(), 100e6 * (10 ** decimals()));\r\nswapTokensAtAmount = totalSupply() / 5_000;\r\n \r\nswapEnabled = false;\r\n}\r\n \r\nreceive() external payable {}\r\n \r\nfunction creator() public pure returns (string memory) {\r\nreturn \"https://x.com/trumptaxcoin\";\r\n}\r\n \r\nfunction claimStuckTokens(address token) external onlyOwner {\r\nrequire(token != address(this), \"CSLT: Owner cannot claim contract's balance of its own tokens\");\r\nif (token == address(0x0)) {\r\npayable(msg.sender).sendValue(address(this).balance);\r\nreturn;\r\n}\r\n \r\nIERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n}\r\n \r\nfunction excludeFromFees(address account, bool excluded) external onlyOwner{\r\n_isExcludedFromFees[account] = excluded;\r\n \r\nemit ExcludeFromFees(account, excluded);\r\n}\r\n \r\nfunction isExcludedFromFees(address account) public view returns(bool) {\r\nreturn _isExcludedFromFees[account];\r\n}\r\n \r\nevent UpdateFees(uint256 feeOnBuy, uint256 feeOnSell);\r\n \r\nfunction updateFees(uint256 _feeOnSell, uint256 _feeOnBuy, uint256 _feeOnTransfer) external onlyOwner {\r\nfeeOnBuy = _feeOnBuy;\r\nfeeOnSell = _feeOnSell;\r\nfeeOnTransfer = _feeOnTransfer;\r\n \r\nrequire(feeOnBuy <= 15, \"CSLT: Total Fees cannot exceed the maximum\");\r\nrequire(feeOnSell <= 15, \"CSLT: Total Fees cannot exceed the maximum\");\r\nrequire(feeOnTransfer <= 5, \"CSLT: Total Fees cannot exceed the maximum\");\r\n \r\nemit UpdateFees(feeOnSell, feeOnBuy);\r\n}\r\n \r\nevent FeeReceiverChanged(address feeReceiver);\r\n \r\nfunction changeFeeReceiver(address _feeReceiver) external onlyOwner{\r\nrequire(_feeReceiver != address(0), \"CSLT: Fee receiver cannot be the zero address\");\r\nfeeReceiver = _feeReceiver;\r\n \r\nemit FeeReceiverChanged(feeReceiver);\r\n}\r\n \r\nevent TradingEnabled(bool tradingEnabled);\r\n \r\nbool public tradingEnabled;\r\n \r\nfunction enableTrading() external onlyOwner{\r\nrequire(!tradingEnabled, \"CSLT: Trading already enabled.\");\r\ntradingEnabled = true;\r\nswapEnabled = true;\r\n \r\nemit TradingEnabled(tradingEnabled);\r\n}\r\n \r\nfunction _transfer(address from,address to,uint256 amount) internal override {\r\nrequire(from != address(0), \"CSLT: transfer from the zero address\");\r\nrequire(to != address(0), \"CSLT: transfer to the zero address\");\r\nrequire(tradingEnabled || _isExcludedFromFees[from] || _isExcludedFromFees[to], \"CSLT: Trading not yet enabled!\");\r\n \r\nif (amount == 0) {\r\nsuper._transfer(from, to, 0);\r\nreturn;\r\n}\r\n \r\nuint256 contractTokenBalance = balanceOf(address(this));\r\n \r\nbool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n \r\nif (canSwap &&\r\n!swapping &&\r\nto == uniswapV2Pair &&\r\nfeeOnBuy + feeOnSell > 0 &&\r\n!_isExcludedFromFees[from] &&\r\nswapEnabled\r\n) {\r\nswapping = true;\r\n \r\nswapAndSendFee(contractTokenBalance);\r\n \r\nswapping = false;\r\n}\r\n \r\nuint256 _totalFees;\r\nif (_isExcludedFromFees[from] || _isExcludedFromFees[to] || swapping) {\r\n_totalFees = 0;\r\n} else if (from == uniswapV2Pair) {\r\n_totalFees = feeOnBuy;\r\n} else if (to == uniswapV2Pair) {\r\n_totalFees = feeOnSell;\r\n} else {\r\n_totalFees = feeOnTransfer;\r\n}\r\n \r\nif (_totalFees > 0) {\r\nuint256 fees = (amount * _totalFees) / 100;\r\namount = amount - fees;\r\nsuper._transfer(from, address(this), fees);\r\n}\r\n \r\nsuper._transfer(from, to, amount);\r\n}\r\n \r\nfunction setSwapTokensAtAmount(uint256 newAmount, bool _swapEnabled) external onlyOwner{\r\nrequire(newAmount > totalSupply() / 1_000_000, \"CSLT: SwapTokensAtAmount must be greater than 0.0001% of total supply\");\r\nswapTokensAtAmount = newAmount;\r\nswapEnabled = _swapEnabled;\r\n \r\nemit SwapTokensAtAmountUpdated(swapTokensAtAmount);\r\n}\r\n \r\nfunction swapAndSendFee(uint256 tokenAmount) private {\r\nuint256 initialBalance = address(this).balance;\r\n \r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = uniswapV2Router.WETH();\r\n \r\ntry uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\ntokenAmount,\r\n0,\r\npath,\r\naddress(this),\r\nblock.timestamp\r\n) {} catch {\r\nreturn;\r\n}\r\n \r\nuint256 newBalance = address(this).balance - initialBalance;\r\n \r\npayable(feeReceiver).sendValue(newBalance);\r\n \r\nemit SwapAndSendFee(tokenAmount, newBalance);\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SwapAndSendFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensAtAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tradingEnabled\",\"type\":\"bool\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeOnBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeOnSell\",\"type\":\"uint256\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"changeFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeOnTransfer\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TRUMPTAX", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e0ba37f5cd901ac3bfce2c5cc61837ad8e2cfb185566a156da6e3af2f0c90919"}