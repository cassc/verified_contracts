{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.23;\\n\\n/// @author thirdweb\\n\\nimport \\\"contracts/IContractMetadata.sol\\\";\\n\\n/**\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nabstract contract ContractMetadata is IContractMetadata {\\n    /// @dev The sender is not authorized to perform the action\\n    error ContractMetadataUnauthorized();\\n\\n    /// @notice Returns the contract metadata URI.\\n    string public override contractURI;\\n\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert ContractMetadataUnauthorized();\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        string memory prevURI = contractURI;\\n        contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Osher Haim Glick and OpenZeppelin\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/IERC20.sol\\\";\\nimport \\\"contracts/extensions/IERC20Metadata.sol\\\";\\nimport \\\"contracts/extensions/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    \\n    uint256 private _totalSupply;\\n    mapping(address => uint256) public ownerIndex;\\n    mapping(uint256 => address) public indexToOwner;\\n    uint256 public ownersCount;\\n    string private _name;\\n    string private _symbol;\\n    address[] public owners;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        ownerIndex[msg.sender] = 0;\\n        indexToOwner[0] = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n   function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        require(owner != address(0), \\\"Invalid sender\\\");\\n        require(to != address(0), \\\"Invalid recipient\\\");\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(balanceOf(owner) >= amount, \\\"Insufficient balance\\\");\\n\\n        _transfer(owner, to, amount);\\n\\n        uint256 ownerBalance = balanceOf(owner);\\n        uint256 toBalance = balanceOf(to);\\n\\n        // Remove owner if balance is zero\\n        if (ownerBalance == 0 && ownerIndex[owner] > 0) {\\n            _removeOwner(owner);\\n        }\\n\\n        // Add to owner list if balance is greater than zero and not already in list\\n        if (toBalance > 0 && ownerIndex[to] == 0) {\\n            _addOwner(to);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _addOwner(address account) internal {\\n        require(ownerIndex[account] == 0, \\\"Account is already an owner\\\");\\n\\n        ownersCount++;\\n        ownerIndex[account] = ownersCount;\\n        indexToOwner[ownersCount] = account;\\n\\n        // Update the owners array\\n        owners.push(account);\\n    }\\n\\n    function _removeOwner(address account) internal {\\n        require(ownerIndex[account] > 0, \\\"Account is not an owner\\\");\\n        require(ownersCount > 1 || _balances[account] == 0, \\\"Cannot remove the last owner with non-zero balance\\\");\\n\\n        uint256 index = ownerIndex[account];\\n        address lastOwner = indexToOwner[ownersCount];\\n\\n        ownerIndex[lastOwner] = index;\\n        indexToOwner[index] = lastOwner;\\n\\n        delete ownerIndex[account];\\n        delete indexToOwner[ownersCount];\\n\\n        ownersCount--;\\n\\n        // Update the owners array by replacing the removed owner with the last owner\\n        owners[index - 1] = lastOwner;\\n        owners.pop();\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/FinalStoreDEVSV.sol\": {\r\n      \"content\": \"/**\\r\\n * SPDX-License-Identifier: Copyright (c) 2024 MyBusinessVIP.com Osher Haim Glick.\\r\\n *\\r\\n * Copyright (c) 2024 MyBusinessVIP.com Osher Haim Glick.\\r\\n * Kindly don't copy this code or sell it in anyform.\\r\\n **/\\r\\npragma solidity ^0.8.25;\\r\\n\\r\\nimport \\\"contracts/ERC20.sol\\\";\\r\\nimport \\\"contracts/ReentrancyGuard.sol\\\";\\r\\nimport \\\"contracts/ContractMetadata.sol\\\";\\r\\n\\r\\ncontract ShareDEVSStore is ERC20, ReentrancyGuard, ContractMetadata {\\r\\n    event ProfitDistributed(uint256 totalProfit);\\r\\n    event updatedQuantity(string barcode,uint256 newQuantity);\\r\\n    event updatedDiscount(string barcode,uint256 newDiscountPercentage);\\r\\n    event ClientRefunded(address client, uint256 receiptId, uint256 refundAmount, string clientEmail);\\r\\n    event ProductAdded(\\r\\n    string name,\\r\\n    string barcode,\\r\\n    uint256 price,\\r\\n    uint256 quantity,\\r\\n    uint256 discountPercentage,\\r\\n    string description,\\r\\n    string[] allClientsEmails\\r\\n    );\\r\\n    event newClientRegistered(address clientAddress,string clientName,string clientEmail,string clientPhone,string clientPhysicalAddress);\\r\\n\\r\\n    event NewReceipt(\\r\\n        uint256 receiptId,\\r\\n        uint256 timestamp,\\r\\n        address clientAddress,\\r\\n        string encryptedClientName,\\r\\n        string encryptedClientEmail,\\r\\n        string productBarcode,\\r\\n        uint256 amountPaid,\\r\\n        string encryptedPhysicalAddress,\\r\\n        string phoneNum            \\r\\n    );\\r\\n\\r\\n    struct Product {\\r\\n        string name;\\r\\n        string barcode;\\r\\n        uint256 price;\\r\\n        uint256 quantity;\\r\\n        string productImage1;\\r\\n        string productImage2;\\r\\n        string productImage3;\\r\\n        string productDescription;\\r\\n        uint256 discountPercentage; // New field to store the discount percentage\\r\\n    }\\r\\n\\r\\n    struct Client {\\r\\n        address walletAddress;\\r\\n        string name;\\r\\n        string phoneNum;\\r\\n        string email;\\r\\n        string physicalAddress;\\r\\n    }\\r\\n\\r\\n    struct Receipt {\\r\\n        uint256 index;\\r\\n        uint256 timestamp;\\r\\n        address clientAddress;\\r\\n        string clientName;\\r\\n        string clientEmail;\\r\\n        string productBarcode;\\r\\n        uint256 amountPaid;\\r\\n        string physicalAddress;\\r\\n        string phoneNum;\\r\\n    }\\r\\n\\r\\n    uint256 public TOTAL_DEVS;\\r\\n    mapping(address => uint256) private DEVholdersProfit;\\r\\n    uint64 private constant BATCH_SIZE = 250;\\r\\n    address public contractOwner;\\r\\n    uint256 public total = 0;\\r\\n    uint256 public Profit = 0;\\r\\n    string[] public productBarcodes;\\r\\n    uint8[] private stars;\\r\\n    string[] private reviews;\\r\\n    mapping(address => uint256) private clientReviewCounts;\\r\\n    mapping(string => Product) public products;\\r\\n    mapping(address => Client) public clients;\\r\\n    mapping(uint256 => Receipt) public receipts;\\r\\n    uint256 private receiptCounter;\\r\\n    address[] private clientAddresses;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint256 _totalSupply,\\r\\n        address newContractOwner\\r\\n    ) ERC20(_name, _symbol) {\\r\\n        _mint(newContractOwner, _totalSupply*1e6);\\r\\n        contractOwner = newContractOwner;\\r\\n        TOTAL_DEVS = _totalSupply;\\r\\n        _addOwner(contractOwner);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == contractOwner, \\\"Only owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function reviewStore(uint8 _stars, string memory _review) public {\\r\\n        // Check if the client has purchased a product\\r\\n        bool hasPurchased = false;\\r\\n        for (uint256 i = 0; i < receiptCounter; i++) {\\r\\n            if (receipts[i].clientAddress == msg.sender) {\\r\\n                hasPurchased = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(hasPurchased, \\\"You must have purchased a product to leave a review.\\\");\\r\\n        require(_stars >= 1 && _stars <= 5, \\\"Invalid star rating\\\");\\r\\n\\r\\n        // Check if the client has exceeded the number of reviews they can leave\\r\\n        uint256 clientReceipts = getAllReceiptsByWalletAddress(msg.sender).length;\\r\\n        require(clientReviewCounts[msg.sender] < clientReceipts, \\\"You have already left the maximum number of reviews.\\\");\\r\\n\\r\\n        stars.push(_stars);\\r\\n        reviews.push(_review);\\r\\n        clientReviewCounts[msg.sender]++;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount) public nonReentrant {\\r\\n        require(_amount > 0, \\\"Deposit amount must be greater than zero\\\");\\r\\n        require(transferFrom(msg.sender, address(this), _amount), \\\"Failed to transfer tokens\\\");\\r\\n\\r\\n        // Increase the Profit and total amounts\\r\\n        Profit += _amount;\\r\\n        total += _amount;\\r\\n    }\\r\\n\\r\\n    function getAllReviews() public view returns(string[] memory,uint8[] memory)\\r\\n    {\\r\\n        return (reviews,stars);\\r\\n    }   \\r\\n\\r\\n    function _canSetContractURI() internal view virtual override returns (bool){\\r\\n        return msg.sender == contractOwner;\\r\\n    }\\r\\n\\r\\n    function changeOwner(address _newOwner)\\r\\n        public\\r\\n        onlyOwner\\r\\n        nonReentrant\\r\\n        returns (bool)\\r\\n    {\\r\\n        contractOwner = _newOwner;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function refundClient(address _client, uint256 _receiptId) public nonReentrant onlyOwner {\\r\\n        require(_receiptId < receiptCounter, \\\"Invalid receipt ID\\\");\\r\\n\\r\\n        Receipt storage receipt = receipts[_receiptId];\\r\\n        require(receipt.clientAddress == _client, \\\"\\\");\\r\\n\\r\\n        uint256 amountToRefund = receipt.amountPaid;\\r\\n        require(balanceOf(address(this)) >= amountToRefund, \\\"\\\");\\r\\n\\r\\n        require(transfer(_client, amountToRefund), \\\"\\\");\\r\\n\\r\\n        Profit -= amountToRefund;\\r\\n\\r\\n        emit ClientRefunded(_client, _receiptId, amountToRefund, receipt.clientEmail);\\r\\n    }\\r\\n\\r\\n   function getDEVSOwned(address DEVholder) internal view returns (uint256) {\\r\\n       return balanceOf(DEVholder);\\r\\n   }\\r\\n\\r\\n   function getDEVSOwners() public view returns (address[] memory) {\\r\\n        return owners;\\r\\n    }\\r\\n\\r\\n   function returnTotal() public view returns (uint256) {\\r\\n       return total;\\r\\n   }\\r\\n\\r\\n   function checkWithdrawableRevenue(address DEVholder)\\r\\n       internal\\r\\n       returns (uint256)\\r\\n   {\\r\\n       return calculateDEVholderProfit(DEVholder);\\r\\n   }\\r\\n\\r\\n    function calculateDEVholderProfit(address DEVholder)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 DEVholderDEVS = balanceOf(DEVholder);\\r\\n        if (DEVholderDEVS == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 totalProfit = Profit;\\r\\n        uint256 profitSinceLastUpdate = totalProfit - DEVholdersProfit[DEVholder];\\r\\n        return (profitSinceLastUpdate * DEVholderDEVS) / totalSupply();\\r\\n    }\\r\\n\\r\\n\\r\\n    function distributeQuarterlyProfit() public onlyOwner nonReentrant {\\r\\n        uint256 totalProfit = Profit;\\r\\n        uint256 totalDistributedProfit = 0;\\r\\n        address[] memory holders = getDEVSOwners();\\r\\n        uint256 startIndex = 0;\\r\\n        uint256 endIndex = 0;\\r\\n\\r\\n        while (startIndex < holders.length) {\\r\\n            endIndex = startIndex + BATCH_SIZE;\\r\\n            if (endIndex >= holders.length) {\\r\\n                endIndex = holders.length;\\r\\n            }\\r\\n\\r\\n            totalDistributedProfit += distributeProfitBatch(\\r\\n                holders,\\r\\n                startIndex,\\r\\n                endIndex,\\r\\n                totalProfit\\r\\n            );\\r\\n            startIndex = endIndex;\\r\\n        }\\r\\n\\r\\n        uint256 remainingProfit = totalProfit - totalDistributedProfit;\\r\\n        Profit = remainingProfit;\\r\\n        emit ProfitDistributed(totalDistributedProfit);\\r\\n    }\\r\\n\\r\\n    function distributeProfitBatch(\\r\\n        address[] memory holders,\\r\\n        uint256 startIndex,\\r\\n        uint256 endIndex,\\r\\n        uint256 totalProfit\\r\\n    ) private returns (uint256 totalDistributedProfit) {\\r\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\r\\n            address holder = holders[i];\\r\\n            uint256 holderProfit = calculateDEVholderProfit(holder);\\r\\n            if (holderProfit > 0) {\\r\\n                if(holder == address(this))\\r\\n                {\\r\\n                    require(\\r\\n                    balanceOf(address(this)) >= holderProfit,\\r\\n                    \\\"\\\"\\r\\n                    );\\r\\n\\r\\n                    require(\\r\\n                        transfer(contractOwner, holderProfit),\\r\\n                        \\\"\\\"\\r\\n                    );\\r\\n\\r\\n                    totalDistributedProfit += holderProfit;\\r\\n                    DEVholdersProfit[holder] += holderProfit; // Update DEVholdersProfit after distributing profit\\r\\n                }\\r\\n\\r\\n                else {\\r\\n                    require(\\r\\n                    balanceOf(address(this)) >= holderProfit,\\r\\n                    \\\"\\\"\\r\\n                    );\\r\\n\\r\\n                    require(\\r\\n                        transfer(holder, holderProfit),\\r\\n                        \\\"\\\"\\r\\n                    );\\r\\n\\r\\n                    totalDistributedProfit += holderProfit;\\r\\n                    DEVholdersProfit[holder] += holderProfit; // Update DEVholdersProfit after distributing profit\\r\\n                    }\\r\\n                \\r\\n            }\\r\\n        }\\r\\n        return totalDistributedProfit;\\r\\n    }\\r\\n\\r\\n   function addProduct(\\r\\n        string memory _name,\\r\\n        string memory _barcode,\\r\\n        uint256 _priceInNormalNumber,\\r\\n        uint256 _quantity,\\r\\n        string memory _productImage1,\\r\\n        string memory _productImage2,\\r\\n        string memory _productImage3,\\r\\n        string memory _productDescription,\\r\\n        uint256 _discountPercentage\\r\\n    ) public onlyOwner {\\r\\n        require(bytes(products[_barcode].barcode).length == 0, \\\"Product already exists\\\");\\r\\n\\r\\n        products[_barcode] = Product({\\r\\n            name: _name,\\r\\n            barcode: _barcode,\\r\\n            price: _priceInNormalNumber * 1e6, // Assuming price is scaled for smaller units\\r\\n            quantity: _quantity,\\r\\n            productImage1: _productImage1,\\r\\n            productImage2: _productImage2,\\r\\n            productImage3: _productImage3,\\r\\n            productDescription: _productDescription,\\r\\n            discountPercentage: _discountPercentage\\r\\n        });\\r\\n\\r\\n        productBarcodes.push(_barcode);\\r\\n        string[] memory allEmails = getAllClientsEmails();\\r\\n        emit ProductAdded(\\r\\n            _name,\\r\\n            _barcode,\\r\\n            _priceInNormalNumber, // Price scaled\\r\\n            _quantity,\\r\\n            _discountPercentage,\\r\\n            _productDescription,\\r\\n            allEmails\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function registerClient(string memory _name, string memory _email, string memory _phoneNum, string memory _physicalAddress) public nonReentrant {\\r\\n        clients[msg.sender] = Client({\\r\\n            walletAddress: msg.sender,\\r\\n            name: _name,\\r\\n            email: _email,\\r\\n            physicalAddress: _physicalAddress,\\r\\n            phoneNum: _phoneNum\\r\\n        });\\r\\n        clientAddresses.push(msg.sender);\\r\\n        emit newClientRegistered(msg.sender,_name,_email,_phoneNum,_physicalAddress);\\r\\n    }\\r\\n\\r\\n    function updateProductQuantity(string memory _barcode, uint256 _newQuantity) public onlyOwner {\\r\\n        for (uint256 i = 0; i < productBarcodes.length; i++) {\\r\\n            if (keccak256(abi.encodePacked(productBarcodes[i])) == keccak256(abi.encodePacked(_barcode))) {\\r\\n                products[productBarcodes[i]].quantity = _newQuantity;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        emit updatedQuantity(_barcode,_newQuantity);\\r\\n    }\\r\\n\\r\\n    function purchaseProduct(string memory _productBarcode) public nonReentrant {\\r\\n        Product storage product = products[_productBarcode];\\r\\n        require(product.quantity > 0, \\\"out of stock\\\");\\r\\n\\r\\n        Client storage client = clients[msg.sender];\\r\\n        require(client.walletAddress != address(0), \\\"not registered\\\");\\r\\n\\r\\n        uint256 amountToPay = product.price;\\r\\n\\r\\n        // Apply discount if applicable\\r\\n        if (product.discountPercentage > 0) {\\r\\n            amountToPay = amountToPay * (100 - product.discountPercentage) / 100;\\r\\n        }\\r\\n\\r\\n        require(transferFrom(msg.sender, address(this), amountToPay), \\\"\\\");\\r\\n\\r\\n        product.quantity--;\\r\\n\\r\\n        Receipt memory receipt = Receipt({\\r\\n            index: receiptCounter,\\r\\n            timestamp: block.timestamp,\\r\\n            clientAddress: client.walletAddress,\\r\\n            clientName: client.name,\\r\\n            clientEmail: client.email,\\r\\n            productBarcode: _productBarcode,\\r\\n            amountPaid: amountToPay,\\r\\n            physicalAddress: client.physicalAddress,\\r\\n            phoneNum: client.phoneNum\\r\\n        });\\r\\n\\r\\n        receipts[receiptCounter] = receipt;\\r\\n        emit NewReceipt(\\r\\n            receiptCounter,\\r\\n            receipt.timestamp,\\r\\n            receipt.clientAddress,\\r\\n            receipt.clientName,\\r\\n            receipt.clientEmail,\\r\\n            receipt.productBarcode,\\r\\n            receipt.amountPaid,\\r\\n            receipt.physicalAddress,\\r\\n            receipt.phoneNum\\r\\n        );\\r\\n        receiptCounter++;\\r\\n        Profit += amountToPay;\\r\\n        total += amountToPay;\\r\\n    }\\r\\n\\r\\n    function getClientDetails(address _clientAddress) public view returns (Client memory) {\\r\\n        return clients[_clientAddress];\\r\\n    }\\r\\n\\r\\n    function getAllClients() public view returns (Client[] memory) {\\r\\n        Client[] memory clientList = new Client[](clientAddresses.length);\\r\\n        for (uint256 i = 0; i < clientAddresses.length; i++) {\\r\\n            clientList[i] = clients[clientAddresses[i]];\\r\\n        }\\r\\n        return clientList;\\r\\n    }\\r\\n\\r\\n    function getAllClientsEmails() public view returns (string[] memory) {\\r\\n        string[] memory emails = new string[](clientAddresses.length);\\r\\n        for (uint256 i = 0; i < clientAddresses.length; i++) {\\r\\n            emails[i] = clients[clientAddresses[i]].email;\\r\\n        }\\r\\n        return emails;\\r\\n    }\\r\\n\\r\\n    function getAllReceipts() public view returns (Receipt[] memory) {\\r\\n        Receipt[] memory allReceipts = new Receipt[](receiptCounter);\\r\\n        for (uint256 i = 0; i < receiptCounter; i++) {\\r\\n            allReceipts[i] = receipts[i];\\r\\n        }\\r\\n        return allReceipts;\\r\\n    }\\r\\n\\r\\n    function changeProductDiscount(string memory _barcode, uint256 _newDiscountPercentage) public onlyOwner nonReentrant {\\r\\n        require(bytes(products[_barcode].barcode).length != 0, \\\"not found\\\");\\r\\n        products[_barcode].discountPercentage = _newDiscountPercentage;\\r\\n        emit updatedDiscount(_barcode,_newDiscountPercentage);\\r\\n    }\\r\\n\\r\\n    function editProduct(\\r\\n        string memory _barcode,\\r\\n        string memory _name,\\r\\n        uint256 _priceInNormalNumber,\\r\\n        string memory _productImage1,\\r\\n        string memory _productImage2,\\r\\n        string memory _productImage3,\\r\\n        string memory _productDescription\\r\\n    ) public onlyOwner nonReentrant {\\r\\n        require(bytes(products[_barcode].name).length != 0, \\\"\\\");\\r\\n        products[_barcode].name = _name;\\r\\n        products[_barcode].price = _priceInNormalNumber*1e6;\\r\\n        products[_barcode].productImage1 = _productImage1;\\r\\n        products[_barcode].productImage2 = _productImage2;\\r\\n        products[_barcode].productImage3 = _productImage3;\\r\\n        products[_barcode].productDescription = _productDescription;\\r\\n    }\\r\\n\\r\\n    function deleteCustomer(address _customerAddress) public {\\r\\n        require(msg.sender==contractOwner||msg.sender==clients[_customerAddress].walletAddress,\\\"\\\");\\r\\n\\r\\n        // Remove the customer from the clients mapping\\r\\n        delete clients[_customerAddress];\\r\\n\\r\\n        // Remove the customer's address from the clientAddresses array\\r\\n        uint256 indexToRemove = findIndexInArray(clientAddresses, _customerAddress);\\r\\n        require(indexToRemove != type(uint256).max, \\\"\\\");\\r\\n        removeFromArray(clientAddresses, indexToRemove);\\r\\n    }\\r\\n\\r\\n    function findIndexInArray(address[] memory arr, address value) private pure returns (uint256) {\\r\\n        for (uint256 i = 0; i < arr.length; i++) {\\r\\n            if (arr[i] == value) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function removeFromArray(address[] storage arr, uint256 index) private {\\r\\n        if (index >= arr.length) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = index; i < arr.length - 1; i++) {\\r\\n            arr[i] = arr[i + 1];\\r\\n        }\\r\\n        arr.pop();\\r\\n    }\\r\\n\\r\\n    function getAllProductsBarcodes() public view returns (string[] memory)\\r\\n    {\\r\\n        return productBarcodes;\\r\\n    }\\r\\n\\r\\n    function getAllReceiptsByWalletAddress(address _walletAddress) public view returns (Receipt[] memory) {\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < receiptCounter; i++) {\\r\\n            if (receipts[i].clientAddress == _walletAddress) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        Receipt[] memory clientReceipts = new Receipt[](count);\\r\\n        count = 0; // Reset count to use it as an index\\r\\n\\r\\n        for (uint256 i = 0; i < receiptCounter; i++) {\\r\\n            if (receipts[i].clientAddress == _walletAddress) {\\r\\n                clientReceipts[count] = receipts[i];\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return clientReceipts;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.23;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *  \\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.23;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newContractOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractMetadataUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clientEmail\",\"type\":\"string\"}],\"name\":\"ClientRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"encryptedClientName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"encryptedClientEmail\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"productBarcode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"encryptedPhysicalAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"phoneNum\",\"type\":\"string\"}],\"name\":\"NewReceipt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"barcode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"allClientsEmails\",\"type\":\"string[]\"}],\"name\":\"ProductAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalProfit\",\"type\":\"uint256\"}],\"name\":\"ProfitDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clientName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clientEmail\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clientPhone\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"clientPhysicalAddress\",\"type\":\"string\"}],\"name\":\"newClientRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"barcode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDiscountPercentage\",\"type\":\"uint256\"}],\"name\":\"updatedDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"barcode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuantity\",\"type\":\"uint256\"}],\"name\":\"updatedQuantity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Profit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_DEVS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_barcode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_priceInNormalNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_productImage1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productImage2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productImage3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_discountPercentage\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_barcode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_newDiscountPercentage\",\"type\":\"uint256\"}],\"name\":\"changeProductDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phoneNum\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"deleteCustomer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeQuarterlyProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_barcode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_priceInNormalNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_productImage1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productImage2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productImage3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_productDescription\",\"type\":\"string\"}],\"name\":\"editProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClients\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phoneNum\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct ShareDEVSStore.Client[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClientsEmails\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProductsBarcodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllReceipts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"clientName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clientEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productBarcode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phoneNum\",\"type\":\"string\"}],\"internalType\":\"struct ShareDEVSStore.Receipt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getAllReceiptsByWalletAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"clientName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clientEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productBarcode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phoneNum\",\"type\":\"string\"}],\"internalType\":\"struct ShareDEVSStore.Receipt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllReviews\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clientAddress\",\"type\":\"address\"}],\"name\":\"getClientDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phoneNum\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"}],\"internalType\":\"struct ShareDEVSStore.Client\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDEVSOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productBarcodes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"barcode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"productImage1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productImage2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productImage3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"discountPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_productBarcode\",\"type\":\"string\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"clientName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"clientEmail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productBarcode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phoneNum\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_receiptId\",\"type\":\"uint256\"}],\"name\":\"refundClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_phoneNum\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_physicalAddress\",\"type\":\"string\"}],\"name\":\"registerClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stars\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_review\",\"type\":\"string\"}],\"name\":\"reviewStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_barcode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_newQuantity\",\"type\":\"uint256\"}],\"name\":\"updateProductQuantity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShareDEVSStore", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000081b3200000000000000000000000000ab5578a3907879280bb93ac87a2c95d97960974f000000000000000000000000000000000000000000000000000000000000000e4d79427573696e6573735649505300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d42565300000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}