{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\ninterface ERC721 {\r\n    function safeTransferFrom(address from,address to,uint256 tokenId) external payable;\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ncontract NononSlideV1 {\r\n\r\n    error MustGas();\r\n    error MustOwn();\r\n    error NotLong();\r\n    error MustAlt();\r\n    error GasSet();\r\n\r\n    uint256[] public ids;\r\n    address[] public players;\r\n    uint8 public length;\r\n    uint256 public gas = 50000000000000;\r\n    uint8 public gasSet;\r\n    bool public ready;\r\n\r\n    ERC721 nonon = ERC721(0xD3607bc8c7927B348bac50dc224C28E3ce933ca6);\r\n\r\n    function signUp(uint256 nononId) public payable {\r\n        //cache for gas save\r\n        uint16 _length = length;\r\n        bool travel;\r\n        //must provide gas for slide\r\n        if(msg.value < gas){revert MustGas();}\r\n        //cant slide to yourself\r\n        if(_length > 0){\r\n            if(players[_length - 1] == msg.sender){revert MustAlt();}\r\n            //check if we are sliding 1 nonon down the line\r\n            if(nononId == ids[_length - 1]){travel = true;}\r\n        }\r\n        //must own nonon or be doing the id that was given to you\r\n        if(nonon.ownerOf(nononId) != msg.sender && (_length > 0 && !travel)){revert MustOwn();}\r\n        //load slide CORRECTLY\r\n        ids.push(nononId);\r\n        players.push(msg.sender);\r\n        unchecked{\r\n            ++length;\r\n        }\r\n        //if greater than 2 people, ready to slide\r\n        if(_length+1 > 2){ready = true;}\r\n    }\r\n\r\n    function slide() public {\r\n        //cache for gas save\r\n        address[] memory _players = players;\r\n        uint256[] memory _ids = ids;\r\n        uint16 _length = length;\r\n        //must have greater than 2 ppl\r\n        if(!ready){revert NotLong();}\r\n        //WEEEEEE!!!!!!!!\r\n        for(uint8 i; i<_length-1;){\r\n            nonon.safeTransferFrom(_players[i], _players[i+1], _ids[i]);\r\n            unchecked{\r\n                ++i;\r\n            }\r\n        }\r\n        //loop back to first player\r\n        nonon.safeTransferFrom(_players[_length-1], _players[0], _ids[_length-1]);\r\n        //person who pays the gas for the slide, gets the gas pot\r\n        payable(msg.sender).transfer(address(this).balance);\r\n        //reload for next slide\r\n        reset();\r\n    }\r\n\r\n    function setGas(uint256 newGas) external {\r\n        if(msg.sender != 0x1821BD18CBdD267CE4e389f893dDFe7BEB333aB6){revert MustOwn();}\r\n        //set this once you figure out how much gas it costs per head\r\n        if(gasSet > 2){revert GasSet();}\r\n        gas = newGas;\r\n        ++gasSet;\r\n    }\r\n\r\n    //in case someone messes up\r\n    function resetSlide() external {\r\n        //cache to save gas\r\n        uint256 _gas = gas;\r\n        address[] memory _players = players;\r\n        //return gas mony\r\n        for(uint8 i; i<length;){\r\n            payable(_players[i]).transfer(_gas);\r\n            unchecked{\r\n                ++i;\r\n            }\r\n        }\r\n        //reset slide\r\n        reset();\r\n    }\r\n\r\n    function reset() internal {\r\n        //reset slide\r\n        for(uint8 i; i<length;){\r\n            players.pop();\r\n            ids.pop();\r\n            unchecked{\r\n                ++i;\r\n            }\r\n        }\r\n        length = 0;\r\n        ready = false;\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"name\":\"GasSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustAlt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustOwn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasSet\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ready\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetSlide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"}],\"name\":\"setGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nononId\",\"type\":\"uint256\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NononSlideV1", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce90830401ed67bed119656d54481152a7cc8b9aefdcb99dc8048de5f839bad2"}