{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title Gauge\r\n@author 1up\r\n@license GNU AGPLv3\r\n@notice\r\n    Vault with 1:1 of underlying Yearn gauge token.\r\n    Does not store balances directly, instead they are reported\r\n    to the reward contract.\r\n    The underlying Yearn gauge tokens are held by the proxy.\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\nfrom vyper.interfaces import ERC4626\r\nimplements: ERC20\r\nimplements: ERC4626\r\n\r\ninterface ERC20Detailed:\r\n    def name() -> String[124]: view\r\n    def symbol() -> String[61]: view\r\n    def decimals() -> uint8: view\r\n\r\ninterface YearnGauge:\r\n    def getReward(_account: address): nonpayable\r\n\r\ninterface Rewards:\r\n    def report(_ygauge: address, _from: address, _to: address, _amount: uint256, _rewards: uint256): nonpayable\r\n    def gauge_supply(_gauge: address) -> uint256: view\r\n    def gauge_balance(_gauge: address, _account: address) -> uint256: view\r\n\r\nasset: public(immutable(address))\r\nygauge: public(immutable(address))\r\nproxy: public(immutable(address))\r\nreward_token: public(immutable(ERC20))\r\nrewards: public(immutable(Rewards))\r\nmultiplier: immutable(uint256)\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent Deposit:\r\n    sender: indexed(address)\r\n    owner: indexed(address)\r\n    assets: uint256\r\n    shares: uint256\r\n\r\nevent Withdraw:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    owner: indexed(address)\r\n    assets: uint256\r\n    shares: uint256\r\n\r\n@external\r\ndef __init__(_ygauge: address, _proxy: address, _reward_token: address, _rewards: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _ygauge Yearn gauge address\r\n    @param _proxy Proxy\r\n    @param _reward_token Reward token address\r\n    @param _rewards Rewards contract\r\n    \"\"\"\r\n    asset = ERC4626(_ygauge).asset()\r\n    ygauge = _ygauge\r\n    proxy = _proxy\r\n    reward_token = ERC20(_reward_token)\r\n    rewards = Rewards(_rewards)\r\n    multiplier = 10**(18 - convert(ERC20Detailed(asset).decimals(), uint256))\r\n    assert reward_token.approve(_rewards, max_value(uint256), default_return_value=True)\r\n    assert ERC20(asset).approve(_ygauge, max_value(uint256), default_return_value=True)\r\n    log Transfer(empty(address), msg.sender, 0)\r\n\r\n@external\r\n@view\r\ndef name() -> String[128]:\r\n    \"\"\"\r\n    @notice Get the gauge name\r\n    @return Gauge name\r\n    @dev Based on the name of the asset inside the Yearn gauge\r\n    \"\"\"\r\n    name: String[124] = ERC20Detailed(asset).name()\r\n    return concat(\"1UP \", name)\r\n\r\n@external\r\n@view\r\ndef symbol() -> String[64]:\r\n    \"\"\"\r\n    @notice Get the gauge symbol\r\n    @return Gauge symbol\r\n    @dev Based on the name of the asset inside the Yearn gauge\r\n    \"\"\"\r\n    symbol: String[61] = ERC20Detailed(asset).symbol()\r\n    return concat(\"up-\", symbol)\r\n\r\n@external\r\n@view\r\ndef decimals() -> uint8:\r\n    \"\"\"\r\n    @notice Get the gauge decimals\r\n    @return Gauge decimals\r\n    @dev Same as the decimals of the asset inside the Yearn gauge\r\n    \"\"\"\r\n    return ERC20Detailed(asset).decimals()\r\n\r\n@external\r\n@view\r\ndef totalSupply() -> uint256:\r\n    \"\"\"\r\n    @notice Get the gauge total supply\r\n    @return Gauge total supply\r\n    \"\"\"\r\n    return rewards.gauge_supply(self) / multiplier\r\n\r\n@external\r\n@view\r\ndef balanceOf(_account: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the gauge balance of a user\r\n    @param _account User\r\n    @return Gauge balance\r\n    \"\"\"\r\n    return rewards.gauge_balance(self, _account) / multiplier\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer gauge tokens to another user\r\n    @param _to User to transfer gauge tokens to\r\n    @param _value Amount of gauge tokens to transfer\r\n    @return Always True\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n\r\n    if _value > 0:\r\n        rewards.report(ygauge, msg.sender, _to, _value * multiplier, 0)\r\n\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer another user's gauge tokens by spending an allowance\r\n    @param _from User to transfer gauge tokens from\r\n    @param _to User to transfer gauge tokens to\r\n    @param _value Amount of gauge tokens to transfer\r\n    @return Always True\r\n    \"\"\"\r\n    assert _to != empty(address) and _to != self\r\n\r\n    if _value > 0:\r\n        allowance: uint256 = self.allowance[_from][msg.sender]\r\n        if allowance < max_value(uint256):\r\n            self.allowance[_from][msg.sender] = allowance - _value\r\n\r\n        rewards.report(ygauge, _from, _to, _value * multiplier, 0)\r\n\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve spending of the caller's gauge tokens\r\n    @param _spender User that is allowed to spend caller's tokens\r\n    @param _value Amount of tokens spender is allowed to spend\r\n    @return Always True\r\n    \"\"\"\r\n    assert _spender != empty(address)\r\n\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n@view\r\n@external\r\ndef totalAssets() -> uint256:\r\n    \"\"\"\r\n    @notice Get the total amount of assets in the vault\r\n    @return Total amount of assets\r\n    \"\"\"\r\n    return rewards.gauge_supply(self) / multiplier\r\n\r\n@view\r\n@external\r\ndef convertToShares(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Convert an amount of assets to shares\r\n    @param _assets Amount of assets\r\n    @return Amount of shares\r\n    \"\"\"\r\n    return _assets\r\n\r\n@view\r\n@external\r\ndef convertToAssets(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Convert an amount of shares to assets\r\n    @param _shares Amount of shares\r\n    @return Amount of assets\r\n    \"\"\"\r\n    return _shares\r\n\r\n@view\r\n@external\r\ndef maxDeposit(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of assets a user can deposit\r\n    @param _owner User depositing\r\n    @return Maximum amount of assets that can be deposited\r\n    \"\"\"\r\n    return max_value(uint256)\r\n\r\n@view\r\n@external\r\ndef previewDeposit(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a deposit\r\n    @param _assets Amount of assets to be deposited\r\n    @return Equivalent amount of shares to be minted\r\n    \"\"\"\r\n    return _assets\r\n\r\n@external\r\ndef deposit(_assets: uint256, _receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit assets\r\n    @param _assets Amount of assets to deposit\r\n    @param _receiver Recipient of the shares\r\n    @return Amount of shares minted\r\n    \"\"\"\r\n    self._deposit(_assets, _receiver)\r\n    return _assets\r\n\r\n@view\r\n@external\r\ndef maxMint(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of shares a user can mint\r\n    @param _owner User minting\r\n    @return Maximum amount of shares that can be minted\r\n    \"\"\"\r\n    return max_value(uint256)\r\n\r\n@view\r\n@external\r\ndef previewMint(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a mint\r\n    @param _shares Amount of shares to be minted\r\n    @return Equivalent amount of assets to be deposited\r\n    \"\"\"\r\n    return _shares\r\n\r\n@external\r\ndef mint(_shares: uint256, _receiver: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Mint shares\r\n    @param _shares Amount of shares to mint\r\n    @param _receiver Recipient of the shares\r\n    @return Amount of assets deposited\r\n    \"\"\"\r\n    self._deposit(_shares, _receiver)\r\n    return _shares\r\n\r\n@view\r\n@external\r\ndef maxWithdraw(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of assets a user can withdraw\r\n    @param _owner User withdrawing\r\n    @return Maximum amount of assets that can be withdrawn\r\n    \"\"\"\r\n    return rewards.gauge_balance(self, _owner) / multiplier\r\n\r\n@view\r\n@external\r\ndef previewWithdraw(_assets: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a withdrawal\r\n    @param _assets Amount of assets to be withdrawn\r\n    @return Equivalent amount of shares to be burned\r\n    \"\"\"\r\n    return _assets\r\n\r\n@external\r\ndef withdraw(_assets: uint256, _receiver: address = msg.sender, _owner: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw assets\r\n    @param _assets Amount of assets to withdraw\r\n    @param _receiver Recipient of the assets\r\n    @param _owner Owner of the shares\r\n    @return Amount of shares redeemed\r\n    \"\"\"\r\n    self._withdraw(_assets, _receiver, _owner)\r\n    return _assets\r\n\r\n@view\r\n@external\r\ndef maxRedeem(_owner: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the maximum amount of shares a user can redeem\r\n    @param _owner User redeeming\r\n    @return Maximum amount of shares that can be redeemed\r\n    \"\"\"\r\n    return rewards.gauge_balance(self, _owner) / multiplier\r\n\r\n@view\r\n@external\r\ndef previewRedeem(_shares: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Preview a redemption\r\n    @param _shares Amount of shares to be redeemed\r\n    @return Equivalent amount of assets to be withdrawn\r\n    \"\"\"\r\n    return _shares\r\n\r\n@external\r\ndef redeem(_shares: uint256, _receiver: address = msg.sender, _owner: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Redeem shares\r\n    @param _shares Amount of shares to redeem\r\n    @param _receiver Recipient of the assets\r\n    @param _owner Owner of the shares\r\n    @return Amount of assets withdrawn\r\n    \"\"\"\r\n    self._withdraw(_shares, _receiver, _owner)\r\n    return _shares\r\n\r\n@internal\r\ndef _deposit(_assets: uint256, _receiver: address):\r\n    \"\"\"\r\n    @notice\r\n        Handle a deposit by claiming rewards, reporting to the rewards contract\r\n        and transferring tokens from the caller to the proxy\r\n    \"\"\"\r\n    assert _assets > 0\r\n    pending: uint256 = self._pending()\r\n    rewards.report(ygauge, empty(address), _receiver, _assets * multiplier, pending)\r\n    assert ERC20(asset).transferFrom(msg.sender, self, _assets, default_return_value=True)\r\n    ERC4626(ygauge).deposit(_assets, proxy)\r\n    log Deposit(msg.sender, _receiver, _assets, _assets)\r\n    log Transfer(empty(address), _receiver, _assets)\r\n\r\n@internal\r\ndef _withdraw(_assets: uint256, _receiver: address, _owner: address):\r\n    \"\"\"\r\n    @notice\r\n        Handle a withdrawal by claiming rewards, reporting to the rewards contract\r\n        and transferring tokens from the proxy to the receiver\r\n    \"\"\"\r\n    assert _assets > 0\r\n    assert _receiver != empty(address) and _receiver != self\r\n    if _owner != msg.sender:\r\n        allowance: uint256 = self.allowance[_owner][msg.sender]\r\n        if allowance < max_value(uint256):\r\n            self.allowance[_owner][msg.sender] = allowance - _assets\r\n    pending: uint256 = self._pending()\r\n    rewards.report(ygauge, _owner, empty(address), _assets * multiplier, pending)\r\n    ERC4626(ygauge).withdraw(_assets, _receiver, proxy)\r\n    log Withdraw(msg.sender, _receiver, _owner, _assets, _assets)\r\n    log Transfer(_owner, empty(address), _assets)\r\n\r\n@internal\r\ndef _pending() -> uint256:\r\n    \"\"\"\r\n    @notice Claim rewards from the Yearn gauge and return reward balance\r\n    \"\"\"\r\n    YearnGauge(ygauge).getReward(proxy)\r\n    return reward_token.balanceOf(self)", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"assets\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"assets\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_ygauge\",\"type\":\"address\"},{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_rewards\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalAssets\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convertToShares\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convertToAssets\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxDeposit\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewDeposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxMint\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewMint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxWithdraw\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewWithdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_assets\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxRedeem\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"previewRedeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"asset\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ygauge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proxy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "Gauge", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000622fa41799406b120f9a40da843d358b7b2cfee3000000000000000000000000242521ca01f330f050a65ff5b8ebbe92198ae64f00000000000000000000000041252e8691e964f7de35156b68493bab6797a27500000000000000000000000035440c602bc4f01bbec6cb616ccb901c9df5475f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}