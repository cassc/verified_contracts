{"SourceCode": "// T.ME/WEEKLY_INITIALS    --    CAN ONLY SELL 2X INITIALS/WEEK     --     GET FUCKED\r\npragma solidity 0.8.18;\r\n\r\ninterface IUniswapV2Router02{\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory{function createPair(address tokenA, address tokenB) external returns (address pair);}\r\n\r\ncontract ERC20_UniV2 {\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping(address => uint) private _balances;\r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n    mapping(address => bool) public _whitelisted;\r\n    mapping(address => uint) public _initial;\r\n    mapping(address => bool) public _locked;\r\n    mapping(address => uint) public _timestamp;\r\n    address private _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    string private _name = \"Weekly Initials\";\r\n    string private _symbol = \"WINS\";\r\n    uint private immutable _decimals = 18;\r\n    uint private _totalSupply = 1000000 * 10 ** 18;\r\n    uint public _swapAmount = 1000 * 10 ** 18;\r\n    uint public _buyTax = 2;\r\n    uint public _sellTax = 2;\r\n    uint public _max = 1;\r\n    address public _v2Pair;\r\n    address private _collector;\r\n    address private _dev;\r\n    address[] public _path;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    modifier onlyDev() {require(msg.sender == _dev, \"Only the developer can call this function\");_;}\r\n\r\n    constructor(address collector_) {\r\n        _collector = collector_; _dev = msg.sender;\r\n        _balances[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n        uniswapV2Router = IUniswapV2Router02(_v2Router);\r\n        _v2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _path = new address[](2); _path[0] = address(this); _path[1] = uniswapV2Router.WETH();\r\n        _whitelisted[address(this)] = true; _whitelisted[msg.sender] = true;\r\n    }\r\n\r\n    function name() external view returns (string memory) {return _name;}\r\n    function symbol() external view returns (string memory) {return _symbol;}\r\n    function decimals() external pure returns (uint) {return _decimals;}\r\n    function totalSupply() external view returns (uint) {return _totalSupply;}\r\n    function balanceOf(address account) external view returns (uint) {return _balances[account];}\r\n    function allowance(address owner, address spender) external view returns (uint) {return _allowances[owner][spender];}\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {_transfer(msg.sender, to, amount); return true;}\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {_approve(msg.sender, spender, amount); return true;}\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) internal {\r\n\t\trequire(_balances[from] >= amount && (amount + _balances[to] <= maxInt() || _whitelisted[from] || _whitelisted[to] || to == _v2Pair), \"ERC20: transfer amount exceeds balance or max wallet\");\r\n        require(_whitelisted[from] || _whitelisted[to] || from == _v2Pair || to == _v2Pair, \"No wallet-to-wallet shit\");\r\n        if (from == _v2Pair && !_whitelisted[to]) { //buy \r\n            uint256 ethValueOfTokens = getTokenValueInETH(amount);\r\n            uint256 ethValueHeld = getTokenValueInETH(_balances[to] + 1);\r\n            if (!_locked[to]) {_initial[to] += ethValueOfTokens;} \r\n            else if (ethValueHeld * 2 <= ethValueOfTokens) {_initial[to] = ethValueOfTokens; _timestamp[to] = 0;} // reset the timestamp}\r\n        }\r\n\r\n        if (to == _v2Pair && !_whitelisted[from]) { //sell\r\n            uint256 ethValueOfTokens = getTokenValueInETH(amount);\r\n            require(_timestamp[from] + 1 weeks <= block.timestamp, \"Can only sell once a week\");\r\n            require(ethValueOfTokens <= 2 * _initial[from], \"Can't sell more than 2x initial ETH value weekly\");\r\n            _timestamp[from] = block.timestamp;\r\n            _locked[from] = true;\r\n        }\r\n\r\n\t\tuint256 taxAmount = 0;\r\n\t\tif ((from == _v2Pair || to == _v2Pair) && !_whitelisted[from] && !_whitelisted[to]) {\r\n\t\t\tif (to == _v2Pair) {taxAmount = amount * _sellTax / 100;} else {taxAmount = amount * _buyTax / 100;}\r\n\t\t\t_balances[address(this)] += taxAmount; emit Transfer(from, address(this), taxAmount);\r\n\t\t\tif (_balances[address(this)] > _swapAmount && to == _v2Pair) {_swapBack(_balances[address(this)]);}\r\n\t\t}\r\n\t\t_balances[from] -= amount; _balances[to] += (amount - taxAmount); emit Transfer(from, to, (amount - taxAmount));\r\n\t}\r\n\r\n    function getTokenValueInETH(uint256 tokenAmount) public view returns (uint256) {\r\n        uint[] memory amountsOut = uniswapV2Router.getAmountsOut(tokenAmount, _path);\r\n        return amountsOut[1]; // The estimated amount of ETH for the provided tokenAmount\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        _approve(owner, spender, currentAllowance - amount);\r\n    }\r\n\r\n    function updateWhitelist(address[] memory addresses, bool whitelisted_) external onlyDev {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            _whitelisted[addresses[i]] = whitelisted_;\r\n        }\r\n    }\r\n\r\n    function setDev (address dev_) external onlyDev {_dev = dev_;}\r\n\r\n    function setTax (uint buyTax_, uint sellTax_) external onlyDev {_buyTax = buyTax_; _sellTax = sellTax_;}\r\n\r\n    function setMax(uint max_) external onlyDev {_max = max_;}\r\n\r\n    function setSwapAmount(uint swapAmount_) external onlyDev {_swapAmount = swapAmount_ * 10 ** _decimals;}\r\n\r\n    function maxInt() internal view returns (uint) {return _totalSupply * _max / 100;}\r\n\r\n    function _swapBack(uint256 amount_) internal{\r\n        _approve(address(this), _v2Router, amount_ + 100);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount_, 0, _path, _collector, block.timestamp);\r\n    }\r\n\r\n    function _addLiquidity() external onlyDev{\r\n        _approve(address(this), _v2Router, _balances[address(this)]); _buyTax = 15; _sellTax = 15;\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), _balances[address(this)], 0, 0, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function withdraw(uint amount_) external onlyDev {\r\n        payable(_dev).transfer(address(this).balance);\r\n        _transfer(address(this), _dev, amount_);\r\n    }\r\n\r\n    function deposit() external payable onlyDev{}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_initial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_v2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenValueInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_\",\"type\":\"uint256\"}],\"name\":\"setMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount_\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax_\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"whitelisted_\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20_UniV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000da2e38daaa1da0b3f6ea9b647f76dfa9d8f43b4b", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7445585ca6927846486e9e4b7c259d2f5f19664c2088accf0caf269b10b9cae9"}