{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface Token {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) ;\r\n      function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    }\r\n\r\ncontract NailsTech_Stake\r\n    {\r\n       \r\n        address  public owner;\r\n\r\n        address public Staking_token = 0xbb1e43733D4632955422f92F603F34429ECc8d4c; \r\n\r\n        uint public totalusers;\r\n\r\n        uint public per_day_divider= 1 days;\r\n        uint public minimum_investment=100*10**18;\r\n        uint public penalty=10*10**18;\r\n\r\n        uint public referral_percentage=5*10**18;\r\n\r\n        uint public totalbusiness; \r\n\r\n        struct allInvestments{\r\n\r\n            uint investedAmount;\r\n            uint withdrawnTime;\r\n            uint DepositTime;\r\n            uint investmentNum;\r\n            uint unstakeTime;\r\n            bool unstake;\r\n            uint reward;\r\n            uint pending_rew;\r\n            uint apr;\r\n            uint timeframe;\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        struct Data{\r\n\r\n            mapping(uint=>allInvestments) investment;\r\n            uint noOfInvestment;\r\n            uint totalInvestment;\r\n            uint totalWithdraw_reward;\r\n            bool investBefore;\r\n            uint TotalReferrals_earning;\r\n            address referralFrom;  \r\n            mapping(uint=>ref_data) referralLevel;\r\n            uint totalDirects;\r\n        }\r\n\r\n        struct ref_data{\r\n            uint reward;\r\n            uint count;  \r\n        }\r\n\r\n        struct time_Apy\r\n        {\r\n            uint timeframe;\r\n            uint APR;\r\n        }\r\n\r\n        struct history\r\n        {\r\n            uint events;\r\n            uint amount;\r\n            uint time;\r\n\r\n\r\n        }\r\n        mapping(address=>Data) public user;\r\n        mapping(uint=>time_Apy) public details;\r\n\r\n        mapping(address=>mapping(uint=>allInvestments)) public user_investments;\r\n\r\n        constructor(){\r\n            \r\n            owner=msg.sender;              \r\n\r\n            details[0].timeframe=90 days;\r\n            details[1].timeframe=30 days;\r\n            details[2].timeframe=7 days;\r\n\r\n\r\n\r\n\r\n            details[0].APR=170;\r\n            details[1].APR=50;\r\n            details[2].APR=10;\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        modifier onlyOwner() \r\n        {\r\n            require(msg.sender == owner, \"Only owner is allowed to perform this action\");\r\n            _;\r\n        }      \r\n\r\n        function Stake(uint _investedamount,uint choose_val,address _ref) external returns(bool success)\r\n        {\r\n            require(details[choose_val].APR > 0,\" apr iss\");\r\n            require(_investedamount >= minimum_investment,\"value is not greater than minimum investment\");     \r\n\r\n            require(Token(Staking_token).allowance(msg.sender,address(this))>=_investedamount,\"allowance\");\r\n            \r\n\r\n            if(user[msg.sender].investBefore == false)\r\n            { \r\n\r\n                if(_ref!=address(0) && _ref!=msg.sender) \r\n                {\r\n\r\n                    user[msg.sender].referralFrom=_ref;\r\n                    user[_ref].totalDirects++;\r\n\r\n                    uint earning= _investedamount*referral_percentage/100 ether;\r\n                    user[_ref].TotalReferrals_earning+=earning;\r\n\r\n                    Token(Staking_token).transfer(_ref,earning);\r\n\r\n                }\r\n\r\n                totalusers++;                                     \r\n            }\r\n\r\n            uint num = user[msg.sender].noOfInvestment;\r\n            user[msg.sender].investment[num].investedAmount =_investedamount;\r\n            user[msg.sender].investment[num].DepositTime=block.timestamp;\r\n            user[msg.sender].investment[num].withdrawnTime=block.timestamp + details[choose_val].timeframe ;  \r\n            \r\n            user[msg.sender].investment[num].investmentNum=num;\r\n            user[msg.sender].investment[num].apr=details[choose_val].APR;\r\n             user[msg.sender].investment[num].timeframe=(details[choose_val].timeframe/per_day_divider) ;  \r\n\r\n\r\n            user[msg.sender].totalInvestment+=_investedamount;\r\n            user[msg.sender].noOfInvestment++;\r\n            totalbusiness+=_investedamount;\r\n\r\n\r\n\r\n            Token(Staking_token).transferFrom(msg.sender,address(this),_investedamount);\r\n            user_investments[msg.sender][num] = user[msg.sender].investment[num];\r\n\r\n\r\n\r\n            return true;\r\n            \r\n        }\r\n\r\n       function get_TotalReward(address userAddress) view public returns(uint){ \r\n            uint totalReward;\r\n            uint depTime;\r\n            uint rew;\r\n            uint temp = user[userAddress].noOfInvestment;\r\n            for( uint i = 0;i < temp;i++)\r\n            {   \r\n                if(!user[userAddress].investment[i].unstake)\r\n                {\r\n                    if(block.timestamp < user[userAddress].investment[i].withdrawnTime)\r\n                    {\r\n                        depTime =block.timestamp - user[userAddress].investment[i].DepositTime;\r\n                    }\r\n                    else\r\n                    {    \r\n                        depTime =user[userAddress].investment[i].withdrawnTime - user[userAddress].investment[i].DepositTime;\r\n                    }                \r\n                }\r\n                else\r\n                {\r\n                    if(user[userAddress].investment[i].unstakeTime <= user[userAddress].investment[i].withdrawnTime)\r\n                    {\r\n                        depTime =user[userAddress].investment[i].unstakeTime - user[userAddress].investment[i].DepositTime;\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                        depTime =user[userAddress].investment[i].withdrawnTime - user[userAddress].investment[i].DepositTime;\r\n\r\n                    }                }\r\n                depTime=depTime/per_day_divider; //1 day\r\n                if(depTime>0)\r\n                {\r\n                     rew  =  (((user[userAddress].investment[i].investedAmount * ((user[userAddress].investment[i].apr) *10**18) )/ (100*10**18) )/(user[userAddress].investment[i].timeframe));\r\n\r\n\r\n                    totalReward += depTime * rew;\r\n                }\r\n            }\r\n            totalReward -= user[userAddress].totalWithdraw_reward;\r\n\r\n            return totalReward;\r\n        }\r\n\r\n        function getReward_perInv(uint i, address userAddress) view public returns(uint){ \r\n            uint totalReward;\r\n            uint depTime;\r\n            uint rew;\r\n\r\n                if(!user[userAddress].investment[i].unstake)\r\n                {\r\n                    if(block.timestamp < user[userAddress].investment[i].withdrawnTime)\r\n                    {\r\n                        if(block.timestamp < user[userAddress].investment[i].withdrawnTime)\r\n                        {\r\n                            depTime =block.timestamp - user[userAddress].investment[i].DepositTime;\r\n                        }\r\n                        else\r\n                        {    \r\n                            depTime =user[userAddress].investment[i].withdrawnTime - user[userAddress].investment[i].DepositTime;\r\n                        }                        \r\n                    }\r\n                    else\r\n                    {    \r\n                        depTime =user[userAddress].investment[i].withdrawnTime - user[userAddress].investment[i].DepositTime;\r\n                    }     \r\n                }\r\n                else\r\n                {\r\n                    if(user[userAddress].investment[i].unstakeTime <= user[userAddress].investment[i].withdrawnTime)\r\n                    {\r\n                        depTime =user[userAddress].investment[i].unstakeTime - user[userAddress].investment[i].DepositTime;\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                        depTime =user[userAddress].investment[i].withdrawnTime - user[userAddress].investment[i].DepositTime;\r\n\r\n                    }\r\n                }\r\n                depTime=depTime/per_day_divider; //1 day\r\n                if(depTime>0)\r\n                {\r\n                     rew  =  (((user[userAddress].investment[i].investedAmount * ((user[userAddress].investment[i].apr) *10**18) )/ (100*10**18) )/(user[userAddress].investment[i].timeframe));\r\n\r\n\r\n                    totalReward += depTime * rew;\r\n                }\r\n            \r\n\r\n            return totalReward;\r\n        }\r\n\r\n        function get_totalEarning(address add) public view returns(uint) {   \r\n\r\n            return ( get_TotalReward(add));\r\n\r\n        }\r\n\r\n\r\n        function withdrawReward() public returns (bool success)\r\n        {\r\n            uint Total_reward = get_TotalReward(msg.sender);\r\n            require(Total_reward>0,\"you dont have rewards to withdrawn\");         \r\n        \r\n            Token(Staking_token).transfer(msg.sender,Total_reward);             \r\n                         \r\n            user[msg.sender].totalWithdraw_reward+=Total_reward;\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n        function unStake(uint num) external  returns (bool success)\r\n        {\r\n\r\n\r\n            require(user[msg.sender].investment[num].investedAmount>0,\"you dont have investment to withdrawn\");            \r\n            require(!user[msg.sender].investment[num].unstake ,\"you have withdrawn\");\r\n            uint amount=user[msg.sender].investment[num].investedAmount;\r\n\r\n\r\n            if(user[msg.sender].investment[num].withdrawnTime > block.timestamp)\r\n            {\r\n                uint penalty_fee=(amount*(penalty))/(100*10**18);\r\n                Token(Staking_token).transfer(owner,penalty_fee);            \r\n                amount=amount-penalty_fee;\r\n            }\r\n            Token(Staking_token).transfer(msg.sender,amount);             \r\n            user[msg.sender].investment[num].unstake =true;    \r\n            user[msg.sender].investment[num].unstakeTime =block.timestamp;    \r\n\r\n            user[msg.sender].totalInvestment-=user[msg.sender].investment[num].investedAmount;\r\n            user_investments[msg.sender][num] = user[msg.sender].investment[num];\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n        function getTotalInvestment() public view returns(uint) {   \r\n            \r\n            return user[msg.sender].totalInvestment;\r\n\r\n        }\r\n\r\n        function getAll_investments() public view returns (allInvestments[] memory Invested)\r\n        { \r\n            uint num = user[msg.sender].noOfInvestment;\r\n            uint temp;\r\n            uint currentIndex;\r\n            \r\n            for(uint i=0;i<num;i++)\r\n            {\r\n               if(!user[msg.sender].investment[i].unstake )\r\n               {\r\n                   temp++;\r\n               }\r\n\r\n            }\r\n         \r\n            allInvestments[] memory temp_arr =  new allInvestments[](temp) ;\r\n            Invested =  new allInvestments[](temp) ;\r\n\r\n            for(uint i=0;i<num;i++)\r\n            {\r\n               if( !user[msg.sender].investment[i].unstake )\r\n               {\r\n\r\n                    temp_arr[currentIndex]=user[msg.sender].investment[i];\r\n                    temp_arr[currentIndex].reward=getReward_perInv(i,msg.sender);\r\n\r\n                    currentIndex++;\r\n               }\r\n\r\n            }\r\n\r\n            uint count=temp;\r\n            for(uint i=0;i<temp;i++)\r\n            {\r\n                count--;\r\n                Invested[i]=temp_arr[count];\r\n\r\n            }\r\n\r\n            return Invested;\r\n\r\n        }\r\n\r\n        function getAll_investments_ForReward() public view returns (allInvestments[] memory Invested) { //this function will return the all investments of the investor and withware date\r\n            uint num = user[msg.sender].noOfInvestment;\r\n            uint currentIndex;\r\n\r\n         \r\n            allInvestments[] memory temp_arr =  new allInvestments[](num) ;\r\n            Invested =  new allInvestments[](num) ;\r\n\r\n            for(uint i=0;i<num;i++)\r\n            {\r\n\r\n                temp_arr[currentIndex]=user[msg.sender].investment[i];\r\n                temp_arr[currentIndex].reward=getReward_perInv(i,msg.sender);\r\n\r\n                currentIndex++;\r\n\r\n            }\r\n\r\n            uint count=num;\r\n            for(uint i=0;i<num;i++)\r\n            {\r\n                count--;\r\n                Invested[i]=temp_arr[count];\r\n\r\n            }\r\n\r\n            return Invested;\r\n\r\n        }\r\n\r\n        function get_upliner(address inv) public view returns(address)\r\n        {\r\n            return user[inv].referralFrom;\r\n        }\r\n\r\n\r\n        function get_TotalDirects(address inv) public view returns(uint){  \r\n            return user[inv].totalDirects;\r\n        }\r\n         \r\n        function total_withdraw_reaward() view public returns(uint){\r\n\r\n\r\n            uint Temp = user[msg.sender].totalWithdraw_reward;\r\n\r\n            return Temp;\r\n            \r\n\r\n        }\r\n\r\n        function withdrawFunds(uint _amount)  public\r\n        {\r\n            require(msg.sender==owner);\r\n\r\n            uint bal = Token(Staking_token).balanceOf(address(this));\r\n            require(bal>=_amount);\r\n\r\n            Token(Staking_token).transfer(owner,_amount); \r\n        }\r\n  \r\n\r\n \r\n        function get_currTime() public view returns(uint)\r\n        {\r\n            return block.timestamp;\r\n        }\r\n        \r\n        function get_withdrawnTime(uint num) public view returns(uint)\r\n        {\r\n            return user[msg.sender].investment[num].withdrawnTime;\r\n        }\r\n\r\n        \r\n        //setters\r\n\r\n\r\n        function transferOwnership(address _owner) onlyOwner public\r\n        {\r\n            owner = _owner;\r\n        }\r\n\r\n        function update_min_inv(uint _val) onlyOwner public\r\n        {\r\n            minimum_investment = _val;\r\n        }\r\n\r\n        function update_referral_percentage(uint _val) onlyOwner public\r\n        {\r\n            referral_percentage = _val;\r\n        }\r\n\r\n        function update_7days_apr(uint _val) onlyOwner public\r\n        {\r\n            details[2].APR = _val;\r\n        }\r\n\r\n        function update_30days_apr(uint _val) onlyOwner public\r\n        {\r\n            details[1].APR = _val;\r\n        }\r\n\r\n        function update_90days_apr(uint _val) onlyOwner public\r\n        {\r\n            details[0].APR = _val;\r\n        }\r\n        \r\n        function update_unstake_penalty(uint _val) onlyOwner public\r\n        {\r\n            penalty = _val;\r\n        }\r\n\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_investedamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choose_val\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"Stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Staking_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APR\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll_investments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_rew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"}],\"internalType\":\"struct NailsTech_Stake.allInvestments[]\",\"name\":\"Invested\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll_investments_ForReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_rew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"}],\"internalType\":\"struct NailsTech_Stake.allInvestments[]\",\"name\":\"Invested\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReward_perInv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inv\",\"type\":\"address\"}],\"name\":\"get_TotalDirects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"get_TotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_currTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"get_totalEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inv\",\"type\":\"address\"}],\"name\":\"get_upliner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"get_withdrawnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"per_day_divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdraw_reaward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalbusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalusers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"update_30days_apr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"update_7days_apr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"update_90days_apr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"update_min_inv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"update_referral_percentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"update_unstake_penalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"investBefore\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"TotalReferrals_earning\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDirects\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"user_investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investmentNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_rew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NailsTech_Stake", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d558074775e63a6d6e37be30a2bfa4d183da9ab2861cfa283e49944fc6bd73f"}