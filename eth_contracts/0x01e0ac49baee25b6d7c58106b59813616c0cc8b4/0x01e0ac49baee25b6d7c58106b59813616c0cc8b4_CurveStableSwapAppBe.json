{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/apps/base/AppBeaconBase.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { Ownable2Step, Ownable } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport { IAppAccountBase } from \\\"src/interfaces/apps/base/IAppAccountBase.sol\\\";\\nimport { IAppBeaconBase } from \\\"src/interfaces/apps/base/IAppBeaconBase.sol\\\";\\n\\nabstract contract AppBeaconBase is IAppBeaconBase, ERC165, Ownable2Step {\\n    address public immutable APP_IMPLEMENTATION;\\n    AppBeaconConfig public appBeaconConfig;\\n\\n    constructor(address _owner, address _appImplementation, string memory _appName) Ownable(_owner) {\\n        appBeaconConfig.appName = _appName;\\n        if (!IERC165(_appImplementation).supportsInterface(type(IAppAccountBase).interfaceId)) {\\n            revert InvalidAppAccountImplementation();\\n        }\\n        APP_IMPLEMENTATION = _appImplementation;\\n        appBeaconConfig.latestAppBeacon = address(this);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       \\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return interfaceId == type(IAppBeaconBase).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Gets the name of the app associated to the beacon.\\n     * @return The name of the app beacon.\\n     */\\n    function getAppName() external view returns (string memory) {\\n        return appBeaconConfig.appName;\\n    }\\n\\n    /**\\n     * @notice Gets the latest app implementation.\\n     * @return The address of the latest app implementation.\\n     */\\n    function getLatestAppImplementation() external view returns (address) {\\n        return APP_IMPLEMENTATION;\\n    }\\n\\n    /**\\n     * @notice Gets the latest beacon address for the app.\\n     * @return The address of the latest app beacon.\\n     */\\n    function getLatestAppBeacon() external view returns (address) {\\n        return appBeaconConfig.latestAppBeacon;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t    MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the latest app beacon address.\\n     * @param _latestAppBeacon The address of the latest app beacon associated with the app.\\n     */\\n    function setLatestAppBeacon(address _latestAppBeacon) external onlyOwner {\\n        if (_latestAppBeacon == address(0)) revert ZeroAddress();\\n        emit LatestAppBeaconSet(_latestAppBeacon);\\n        appBeaconConfig.latestAppBeacon = _latestAppBeacon;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/apps/curve/CurveAppError.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nlibrary CurveAppError {\\n    /*///////////////////////////////////////////////////////////////\\n                                GENERIC\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error TokenIndexMismatch();\\n    error InvalidPoolAddress(address poolAddress);\\n    error UnsupportedPool(address poolAddress);\\n    error InvalidToken();\\n    error ZeroAddress();\\n}\\n\"\r\n    },\r\n    \"src/apps/curve/CurveStableSwapAppBeacon.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { AppBeaconBase } from \\\"src/apps/base/AppBeaconBase.sol\\\";\\nimport { ICurveStableSwapFactoryNG } from \\\"src/interfaces/curve/ICurveStableSwapFactoryNG.sol\\\";\\nimport { ICurveStableSwapNG } from \\\"src/interfaces/curve/ICurveStableSwapNG.sol\\\";\\nimport { ICurveStableSwapAppBeacon } from \\\"src/interfaces/curve/ICurveStableSwapAppBeacon.sol\\\";\\n\\nimport { CurveAppError } from \\\"src/apps/curve/CurveAppError.sol\\\";\\n\\ncontract CurveStableSwapAppBeacon is AppBeaconBase, ICurveStableSwapAppBeacon {\\n    address public immutable curveStableswapFactoryNG;\\n    mapping(address => bool) public isSupportedPool;\\n    address public immutable USDC;\\n\\n    constructor(address _owner, address _latestAppImplementation, address _curveStableswapFactoryNG, address _usdc)\\n        AppBeaconBase(_owner, _latestAppImplementation, \\\"CurveStableswap\\\")\\n    {\\n        if (_curveStableswapFactoryNG == address(0)) revert CurveAppError.ZeroAddress();\\n        if (_usdc == address(0)) revert CurveAppError.ZeroAddress();\\n        curveStableswapFactoryNG = _curveStableswapFactoryNG;\\n        USDC = _usdc;\\n    }\\n\\n    /**\\n     * @notice Get the pool data for the given tokens. Data will be empty if type is underyling\\n     * @param _fromToken The address of the token to swap from.\\n     * @param _toToken The address of the token to swap to.\\n     * @return poolData The pool data for the given tokens.\\n     */\\n    function getPoolDatafromTokens(address _fromToken, address _toToken, uint256 _fromAmount)\\n        public\\n        returns (PoolData memory poolData)\\n    {\\n        poolData.pool = ICurveStableSwapFactoryNG(curveStableswapFactoryNG).find_pool_for_coins(_fromToken, _toToken);\\n        poolData.tokens = ICurveStableSwapFactoryNG(curveStableswapFactoryNG).get_coins(poolData.pool);\\n        (poolData.fromTokenIndex, poolData.toTokenIndex, poolData.isUnderlying) =\\n            ICurveStableSwapFactoryNG(curveStableswapFactoryNG).get_coin_indices(poolData.pool, _fromToken, _toToken);\\n        poolData.balances = ICurveStableSwapFactoryNG(curveStableswapFactoryNG).get_balances(poolData.pool);\\n        poolData.decimals = ICurveStableSwapFactoryNG(curveStableswapFactoryNG).get_decimals(poolData.pool);\\n        poolData.amountReceived = ICurveStableSwapNG(poolData.pool).get_dy(poolData.fromTokenIndex, poolData.toTokenIndex, _fromAmount);\\n    }\\n\\n    /**\\n     * @notice A safety feature to limit the pools that can be used by the app to only vetted and suppported pools\\n     * @dev Only the contract owner can call this function.\\n     * @param _pool The address of the pool.\\n     * @param _supported The supported status of the pool.\\n     */\\n    function setIsSupportedPool(address _pool, bool _supported) external onlyOwner {\\n        if (_pool == address(0)) revert CurveAppError.ZeroAddress();\\n        isSupportedPool[_pool] = _supported;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/apps/base/IAppAccountBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IAppAccountBase\\n * @notice Interface for the App Account Base\\n */\\ninterface IAppAccountBase {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tEVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event EtherTransferredToMainAccount(uint256 amount);\\n    event ERC20TransferredToMainAccount(address indexed token, uint256 amount);\\n    event ERC721TransferredToMainAccount(address indexed token, uint256 tokenId);\\n    event ERC1155TransferredToMainAccount(address indexed token, uint256 tokenId, uint256 amount, bytes data);\\n    event ERC1155BatchTransferredToMainAccount(address indexed token, uint256[] _ids, uint256[] _values, bytes _data);\\n    event EtherRecoveredToMainAccount(uint256 amount);\\n    event ERC20RecoveredToMainAccount(address indexed token, uint256 amount);\\n    event ERC721RecoveredToMainAccount(address indexed token, uint256 tokenId);\\n    event ERC1155RecoveredToMainAccount(address indexed token, uint256 tokenId, uint256 amount, bytes data);\\n    event ERC1155BatchRecoveredToMainAccount(address indexed token, uint256[] tokenIds, uint256[] amounts, bytes _data);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error SameAddress();\\n    error InvalidAppBeacon();\\n    error ImplementationMismatch(address implementation, address latestImplementation);\\n    error ETHTransferFailed();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 \\t\\tINITIALIZER\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initialize the app account with the main account and the app beacon.\\n     * @param _mainAccount the address of the main account, this is the owner of the app.\\n     * @param _appBeacon the beacon for the app account.\\n     */\\n    function initialize(address _mainAccount, address _appBeacon) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the app version number of the app account.\\n     * @return A uint64 representing the version of the app.\\n     * @dev NOTE: This number must be updated whenever a new version is deployed.\\n     * The number should always only be incremented by 1.\\n     */\\n    function appVersion() external pure returns (uint64);\\n\\n    /**\\n     * @notice Get the app's main account.\\n     * @return The main account associated with this app.\\n     */\\n    function getMainAccount() external view returns (address);\\n\\n    /**\\n     * @notice Get the app config beacon.\\n     * @return The app config beacon address.\\n     */\\n    function getAppBeacon() external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Transfer Ether to the main account from the app account.\\n     * @param _amount The amount of Ether to transfer.\\n     */\\n    function transferEtherToMainAccount(uint256 _amount) external;\\n\\n    /**\\n     * @notice Transfer ERC20 tokens to the main account from the app account.\\n     * @param _token The address of the ERC20 token.\\n     * @param _amount The amount of tokens to transfer.\\n     */\\n    function transferERC20ToMainAccount(address _token, uint256 _amount) external;\\n\\n    /**\\n     * @notice Transfer ERC721 tokens to the main account from the app account.\\n     * @param _token The address of the ERC721 token.\\n     * @param _tokenId The ID of the ERC721 token.\\n     */\\n    function transferERC721ToMainAccount(address _token, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Transfer ERC1155 tokens to the main account from the app account.\\n     * @param _token The address of the ERC1155 token.\\n     * @param _tokenId The ID of the ERC1155 token.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _data Data to send with the transfer.\\n     */\\n    function transferERC1155ToMainAccount(address _token, uint256 _tokenId, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @notice Transfers batch ERC1155 tokens to the main account from the app account.\\n     * @param _token The address of the ERC1155 token.\\n     * @param _ids The IDs of the ERC1155 tokens.\\n     * @param _amounts The amounts of the ERC1155 tokens.\\n     * @param _data Data to send with the transfer.\\n     */\\n    function transferERC1155BatchToMainAccount(\\n        address _token,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Recovers all ether in the app account to the main account.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverEtherToMainAccount() external;\\n\\n    /**\\n     * @notice Recovers the full balance of an ERC20 token to the main account.\\n     * @param _token The address of the token to be recovered to the main account.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverERC20ToMainAccount(address _token) external;\\n\\n    /**\\n     * @notice Recovers a specified ERC721 token to the main account.\\n     * @param _token The ERC721 token address to recover.\\n     * @param _tokenId The ID of the ERC721 token to recover.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverERC721ToMainAccount(address _token, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Recovers all the tokens of a specified ERC1155 token to the main account.\\n     * @param _token The ERC1155 token address to recover.\\n     * @param _tokenId The id of the token to recover.\\n     * @param _data The data for the transaction.\\n     * @dev Requires the sender to be an authorized recovery party.\\n     */\\n    function recoverERC1155ToMainAccount(address _token, uint256 _tokenId, bytes calldata _data) external;\\n\\n    /**\\n     * @notice Recovers batch ERC1155 tokens to the main account.\\n     * @param _token The address of the ERC1155 token.\\n     * @param _ids The IDs of the ERC1155 tokens.\\n     * @param _values The values of the ERC1155 tokens.\\n     * @param _data Data to send with the transfer.\\n     */\\n    function recoverERC1155BatchToMainAccount(\\n        address _token,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Upgrade the app account to the latest implementation and beacon.\\n     * @param _appBeacon The address of the new app beacon.\\n     * @dev Requires the sender to be the main account.\\n     */\\n    function upgradeAppVersion(address _appBeacon) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/apps/base/IAppBeaconBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IAppBeaconBase\\n * @notice Interface for the App Beacon Base\\n */\\ninterface IAppBeaconBase {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tSTRUCTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Struct containing the config for the app beacon.\\n     * @param appName The name of the app.\\n     * @param latestAppBeacon The address of the latest app beacon.\\n     */\\n    struct AppBeaconConfig {\\n        string appName;\\n        address latestAppBeacon;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error ZeroAddress();\\n    error InvalidAppAccountImplementation();\\n    error InvalidAppBeacon();\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\tEVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event LatestAppImplementationSet(address latestAppImplementation);\\n    event LatestAppBeaconSet(address latestAppBeacon);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the app implementation.\\n     * @return The address of the app implementation.\\n     */\\n    function APP_IMPLEMENTATION() external view returns (address);\\n\\n    /**\\n     * @notice Gets the name of the app associated to the beacon.\\n     * @return The name of the app beacon.\\n     */\\n    function getAppName() external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the app implementation.\\n     * @return The address of the app implementation.\\n     */\\n    function getLatestAppImplementation() external view returns (address);\\n\\n    /**\\n     * @notice Gets the latest beacon address for the app.\\n     * @return The address of the latest app beacon.\\n     */\\n    function getLatestAppBeacon() external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t    MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the latest app beacon address.\\n     * @param _latestAppBeacon The address of the latest app beacon associated with the app.\\n     */\\n    function setLatestAppBeacon(address _latestAppBeacon) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/curve/ICurveStableSwapAppBeacon.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title ICurveStableSwapAppBeacon\\n * @notice Interface for the curve app beacon.\\n */\\ninterface ICurveStableSwapAppBeacon {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t        STRUCTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    struct PoolData {\\n        address pool;\\n        int128 fromTokenIndex;\\n        int128 toTokenIndex;\\n        uint256 amountReceived;\\n        address[] tokens;\\n        uint256[] balances;\\n        uint256[] decimals;\\n        bool isUnderlying;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t    VIEW FUNCTIONS/VARIABLES\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the curve stable swap factory address.\\n     * @return The address of the curve stable swap factory.\\n     */\\n    function curveStableswapFactoryNG() external view returns (address);\\n\\n    /**\\n     * @notice Gets the USDC address.\\n     * @return The address of the USDC token.\\n     */\\n    function USDC() external view returns (address);\\n\\n    /**\\n     * @notice Checks if a pool has been vetted by the council and can be safely used by the app\\n     * @param _pool The address of the pool.\\n     * @return True if the pool is supported, false otherwise.\\n     */\\n    function isSupportedPool(address _pool) external view returns (bool);\\n\\n    /**\\n     * @notice Get the pool data for the given tokens. Data will be empty if type is underyling\\n     * @param _fromToken The address of the token to swap from.\\n     * @param _toToken The address of the token to swap to.\\n     * @return poolData The pool data for the given tokens.\\n     */\\n    function getPoolDatafromTokens(address _fromToken, address _toToken, uint256 _fromAmount)\\n        external\\n        returns (PoolData memory poolData);\\n\\n    /**\\n     * @notice A safety feature to limit the pools that can be used by the app to only vetted and suppported pools\\n     * @dev Only the contract owner can call this function.\\n     * @param _pool The address of the pool.\\n     * @param _supported The supported status of the pool.\\n     */\\n    function setIsSupportedPool(address _pool, bool _supported) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/curve/ICurveStableSwapFactoryNG.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n// from https://github.com/curvefi/stableswap-ng\\n\\n/**\\n * @title ICurveStableSwapFactoryNG\\n * @notice Interface for the curve stable swap factory.\\n */\\ninterface ICurveStableSwapFactoryNG {\\n    /**\\n     * @notice Find an available pool for exchanging two coins\\n     * @param _from Address of coin to be sent\\n     * @param _to Address of coin to be received\\n     * @param i Index value. When multiple pools are available\\n     *        this value is used to return the n'th address.\\n     * @return Pool address\\n     */\\n    function find_pool_for_coins(address _from, address _to, uint256 i) external view returns (address);\\n\\n    /**\\n     * @notice Find an available pool for exchanging two coins\\n     * @param _from Address of coin to be sent\\n     * @param _to Address of coin to be received\\n     * @return Pool address\\n     */\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    /**\\n     * @notice Get the base pool for a given factory metapool\\n     * @param _pool Metapool address\\n     * @return Address of base pool\\n     */\\n    function get_base_pool(address _pool) external view returns (address);\\n\\n    /**\\n     * @notice Get the number of coins in a pool\\n     * @param _pool Pool address\\n     * @return Number of coins\\n     */\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the coins within a pool\\n     * @param _pool Pool address\\n     * @return List of coin addresses\\n     */\\n    function get_coins(address _pool) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get the underlying coins within a pool\\n     * @dev Reverts if a pool does not exist or is not a metapool\\n     * @param _pool Pool address\\n     * @return List of coin addresses\\n     */\\n    function get_underlying_coins(address _pool) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get decimal places for each coin within a pool\\n     * @param _pool Pool address\\n     * @return uint256 list of decimals\\n     */\\n    function get_decimals(address _pool) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get decimal places for each underlying coin within a pool\\n     * @param _pool Pool address\\n     * @return uint256 list of decimals\\n     */\\n    function get_underlying_decimals(address _pool) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get rates for coins within a metapool\\n     * @param _pool Pool address\\n     * @return Rates for each coin, precision normalized to 10**18\\n     */\\n    function get_metapool_rates(address _pool) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get balances for each coin within a pool\\n     * @dev For pools using lending, these are the wrapped coin balances\\n     * @param _pool Pool address\\n     * @return uint256 list of balances\\n     */\\n    function get_balances(address _pool) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get balances for each underlying coin within a metapool\\n     * @param _pool Metapool address\\n     * @return uint256 list of underlying balances\\n     */\\n    function get_underlying_balances(address _pool) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get the amplfication co-efficient for a pool\\n     * @param _pool Pool address\\n     * @return uint256 A\\n     */\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the fees for a pool\\n     * @dev Fees are expressed as integers\\n     * @param _pool Pool address\\n     * @return Pool fee and admin fee as uint256 with 1e10 precision\\n     */\\n    function get_fees(address _pool) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Get the current admin balances (uncollected fees) for a pool\\n     * @param _pool Pool address\\n     * @return List of uint256 admin balances\\n     */\\n    function get_admin_balances(address _pool) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Convert coin addresses to indices for use with pool methods\\n     * @param _pool Pool address\\n     * @param _from Coin address to be used as `i` within a pool\\n     * @param _to Coin address to be used as `j` within a pool\\n     * @return int128 `i`, int128 `j`, boolean indicating if `i` and `j` are underlying coins\\n     */\\n    function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\n\\n    /**\\n     * @notice Get the address of the liquidity gauge contract for a factory pool\\n     * @dev Returns `empty(address)` if a gauge has not been deployed\\n     * @param _pool Pool address\\n     * @return Implementation contract address\\n     */\\n    function get_gauge(address _pool) external view returns (address);\\n\\n    /**\\n     * @notice Get the address of the implementation contract used for a factory pool\\n     * @param _pool Pool address\\n     * @return Implementation contract address\\n     */\\n    function get_implementation_address(address _pool) external view returns (address);\\n\\n    /**\\n     * @notice Verify `_pool` is a metapool\\n     * @param _pool Pool address\\n     * @return True if `_pool` is a metapool\\n     */\\n    function is_meta(address _pool) external view returns (bool);\\n\\n    /**\\n     * @notice Query the asset type of `_pool`\\n     * @param _pool Pool Address\\n     * @return Dynarray of uint8 indicating the pool asset type\\n     *         Asset Types:\\n     *             0. Standard ERC20 token with no additional features\\n     *             1. Oracle - token with rate oracle (e.g. wrapped staked ETH)\\n     *             2. Rebasing - token with rebase (e.g. staked ETH)\\n     *             3. ERC4626 - e.g. sDAI\\n     */\\n    function get_pool_asset_types(address _pool) external view returns (uint8[] memory);\\n\\n    /**\\n     * @notice Deploy a new plain pool\\n     * @param _name Name of the new plain pool\\n     * @param _symbol Symbol for the new plain pool - will be\\n     *                concatenated with factory symbol\\n     * @param _coins List of addresses of the coins being used in the pool.\\n     * @param _A Amplification co-efficient - a lower value here means\\n     *           less tolerance for imbalance within the pool's assets.\\n     *           Suggested values include:\\n     *            * Uncollateralized algorithmic stablecoins: 5-10\\n     *            * Non-redeemable, collateralized assets: 100\\n     *            * Redeemable assets: 200-400\\n     * @param _fee Trade fee, given as an integer with 1e10 precision. The\\n     *             maximum is 1% (100000000). 50% of the fee is distributed to veCRV holders.\\n     * @param _offpeg_fee_multiplier Off-peg fee multiplier\\n     * @param _ma_exp_time Averaging window of oracle. Set as time_in_seconds / ln(2)\\n     *                     Example: for 10 minute EMA, _ma_exp_time is 600 / ln(2) ~= 866\\n     * @param _implementation_idx Index of the implementation to use\\n     * @param _asset_types Asset types for pool, as an integer\\n     * @param _method_ids Array of first four bytes of the Keccak-256 hash of the function signatures\\n     *                    of the oracle addresses that gives rate oracles.\\n     *                    Calculated as: keccak(text=event_signature.replace(\\\" \\\", \\\"\\\"))[:4]\\n     * @param _oracles Array of rate oracle addresses.\\n     * @return Address of the deployed pool\\n     */\\n    function deploy_plain_pool(\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _coins,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _offpeg_fee_multiplier,\\n        uint256 _ma_exp_time,\\n        uint256 _implementation_idx,\\n        uint8[] memory _asset_types,\\n        bytes4[] memory _method_ids,\\n        address[] memory _oracles\\n    ) external returns (address);\\n    /**\\n     * @notice Deploy a new metapool\\n     * @param _base_pool Address of the base pool to use\\n     *                   within the metapool\\n     * @param _name Name of the new metapool\\n     * @param _symbol Symbol for the new metapool - will be\\n     *                concatenated with the base pool symbol\\n     * @param _coin Address of the coin being used in the metapool\\n     * @param _A Amplification co-efficient - a higher value here means\\n     *           less tolerance for imbalance within the pool's assets.\\n     *           Suggested values include:\\n     *            * Uncollateralized algorithmic stablecoins: 5-10\\n     *            * Non-redeemable, collateralized assets: 100\\n     *            * Redeemable assets: 200-400\\n     * @param _fee Trade fee, given as an integer with 1e10 precision. The\\n     *             the maximum is 1% (100000000).\\n     *             50% of the fee is distributed to veCRV holders.\\n     * @param _offpeg_fee_multiplier Off-peg fee multiplier\\n     * @param _ma_exp_time Averaging window of oracle. Set as time_in_seconds / ln(2)\\n     *                     Example: for 10 minute EMA, _ma_exp_time is 600 / ln(2) ~= 866\\n     * @param _implementation_idx Index of the implementation to use\\n     * @param _asset_type Asset type for token, as an integer\\n     * @param _method_id  First four bytes of the Keccak-256 hash of the function signatures\\n     *                    of the oracle addresses that gives rate oracles.\\n     *                    Calculated as: keccak(text=event_signature.replace(\\\" \\\", \\\"\\\"))[:4]\\n     * @param _oracle Rate oracle address.\\n     * @return Address of the deployed pool\\n     */\\n    function deploy_metapool(\\n        address _base_pool,\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _offpeg_fee_multiplier,\\n        uint256 _ma_exp_time,\\n        uint256 _implementation_idx,\\n        uint8 _asset_type,\\n        bytes4 _method_id,\\n        address _oracle\\n    ) external returns (address);\\n    /**\\n     * @notice Deploy a liquidity gauge for a factory pool\\n     * @param _pool Factory pool address to deploy a gauge for\\n     * @return Address of the deployed gauge\\n     */\\n    function deploy_gauge(address _pool) external returns (address);\\n\\n    /**\\n     * @notice Add a base pool to the registry, which may be used in factory metapools\\n     * @dev 1. Only callable by admin\\n     *      2. Rebasing tokens are not allowed in the base pool.\\n     *      3. Do not add base pool which contains native tokens (e.g. ETH).\\n     *      4. As much as possible: use standard ERC20 tokens.\\n     *      Should you choose to deviate from these recommendations, audits are advised.\\n     * @param _base_pool Pool address to add\\n     * @param _base_lp_token LP token of the base pool\\n     * @param _asset_types Asset type for pool, as an integer\\n     * @param _n_coins Number of coins in the pool\\n     */\\n    function add_base_pool(address _base_pool, address _base_lp_token, uint8[] memory _asset_types, uint256 _n_coins) external;\\n\\n    /**\\n     * @notice Set implementation contracts for pools\\n     * @dev Only callable by admin\\n     * @param _implementation_index Implementation index where implementation is stored\\n     * @param _implementation Implementation address to use when deploying plain pools\\n     */\\n    function set_pool_implementations(uint256 _implementation_index, address _implementation) external;\\n\\n    /**\\n     * @notice Set implementation contracts for metapools\\n     * @dev Only callable by admin\\n     * @param _implementation_index Implementation index where implementation is stored\\n     * @param _implementation Implementation address to use when deploying meta pools\\n     */\\n    function set_metapool_implementations(uint256 _implementation_index, address _implementation) external;\\n\\n    /**\\n     * @notice Set implementation contracts for StableSwap Math\\n     * @dev Only callable by admin\\n     * @param _math_implementation Address of the math implementation contract\\n     */\\n    function set_math_implementation(address _math_implementation) external;\\n\\n    /**\\n     * @notice Set implementation contracts for liquidity gauge\\n     * @dev Only callable by admin\\n     * @param _gauge_implementation Address of the gauge blueprint implementation contract\\n     */\\n    function set_gauge_implementation(address _gauge_implementation) external;\\n\\n    /**\\n     * @notice Set implementation contracts for Views methods\\n     * @dev Only callable by admin\\n     * @param _views_implementation Implementation address of views contract\\n     */\\n    function set_views_implementation(address _views_implementation) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/curve/ICurveStableSwapNG.sol\": {\r\n      \"content\": \"//       c=<\\n//        |\\n//        |   ////\\\\    1@2\\n//    @@  |  /___\\\\**   @@@2\\t\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   @@@  |  |~L~ |*   @@@@@@\\t\\t@@@  @@@@@        @@@@    @@@ @@@@    @@@  @@@@@@@@ @@@@ @@@@    @@@ @@@@@@@@@ @@@@   @@@@\\n//  @@@@@ |   \\\\=_/8    @@@@1@@\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@   @@@ @@@@@@@@@ @@@@ @@@@@  @@@@ @@@@@@@@@  @@@@ @@@@\\n// @@@@@@| _ /| |\\\\__ @@@@@@@@2\\t\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@ @@@ @@@@      @@@@ @@@@@@ @@@@ @@@         @@@@@@@\\n// 1@@@@@@|\\\\  \\\\___/)   @@1@@@@@2\\t~~~  ~~~~~  @@@@  ~~@@    ~~~ ~~~~~~~~~~~ ~~~~      ~~~~ ~~~~~~~~~~~ ~@@          @@@@@\\n// 2@@@@@ |  \\\\ \\\\ / |     @@@@@@2\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@@@@@@@@ @@@@@@@@@ @@@@ @@@@@@@@@@@ @@@@@@@@@    @@@@@\\n// 2@@@@  |_  >   <|__    @@1@12\\t@@@  @@@@@  @@@@  @@@@    @@@ @@@@ @@@@@@ @@@@      @@@@ @@@@ @@@@@@ @@@         @@@@@@@\\n// @@@@  / _|  / \\\\/    \\\\   @@1@\\t\\t@@@   @@@   @@@@  @@@@    @@@ @@@@  @@@@@ @@@@      @@@@ @@@@  @@@@@ @@@@@@@@@  @@@@ @@@@\\n//  @@ /  |^\\\\/   |      |   @@1\\t\\t@@@         @@@@  @@@@    @@@ @@@@    @@@ @@@@      @@@@ @@@    @@@@ @@@@@@@@@ @@@@   @@@@\\n//   /     / ---- \\\\ \\\\\\\\\\\\=    @@\\t\\t@@@@@@@@@@@@@@@@@@@@@@\\n//   \\\\___/ --------  ~~    @@@\\n//     @@  | |   | |  --   @@\\n// \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n// from https://github.com/curvefi/stableswap-ng\\n\\n/**\\n * @title ICurveStableSwapNG\\n * @notice Interface for the curve stable swap pool.\\n */\\ninterface ICurveStableSwapNG {\\n    /**\\n     * @notice Calculate the current input dx given output dy\\n     * @dev Index values can be found via the `coins` public getter method\\n     * @param i Index value for the coin to send\\n     * @param j Index value of the coin to receive\\n     * @param dy Amount of `j` being received after exchange\\n     * @return Amount of `i` predicted\\n     */\\n    function get_dx(int128 i, int128 j, uint256 dy) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculate the current output dy given input dx\\n     * @dev Index values can be found via the `coins` public getter method\\n     * @param i Index value for the coin to send\\n     * @param j Index value of the coin to receive\\n     * @param dx Amount of `i` being exchanged\\n     * @return Amount of `j` predicted\\n     */\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculate the amount received when withdrawing a single coin\\n     * @param _burn_amount Amount of LP tokens to burn in the withdrawal\\n     * @param i Index value of the coin to withdraw\\n     * @return Amount of coin received\\n     */\\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the address of the token at the specified index.\\n     * @param i The index of the token.\\n     * @return The address of the token at the specified index.\\n     */\\n    function coins(uint256 i) external view returns (address);\\n\\n    /**\\n     * @notice Returns the number of underlying coins in the pool.\\n     * @return The number of underlying coins in the pool.\\n     */\\n    function N_COINS() external view returns (uint256);\\n\\n    /**\\n     * @notice Perform an exchange between two coins\\n     * @dev Index values can be found via the `coins` public getter method\\n     * @param i Index value for the coin to send\\n     * @param j Index value of the coin to receive\\n     * @param _dx Amount of `i` being exchanged\\n     * @param _min_dy Minimum amount of `j` to receive\\n     * @return Actual amount of `j` received\\n     */\\n    function exchange(int128 i, int128 j, uint256 _dx, uint256 _min_dy) external returns (uint256);\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param _amounts List of amounts of coins to deposit\\n     * @param _min_mint_amount Minimum amount of LP tokens to mint from the deposit\\n     * @return Amount of LP tokens received by depositing\\n     */\\n    function add_liquidity(uint256[] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraw a single coin from the pool\\n     * @param _burn_amount Amount of LP tokens to burn in the withdrawal\\n     * @param i Index value of the coin to withdraw\\n     * @param _min_received Minimum amount of coin to receive\\n     * @return Amount of coin received\\n     */\\n    function remove_liquidity_one_coin(uint256 _burn_amount, int128 i, uint256 _min_received) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraw coins from the pool in an imbalanced amount\\n     * @param _amounts List of amounts of underlying coins to withdraw\\n     * @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\\n     * @return Actual amount of the LP token burned in the withdrawal\\n     */\\n    function remove_liquidity_imbalance(uint256[] memory _amounts, uint256 _max_burn_amount) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraw coins from the pool\\n     * @dev Withdrawal amounts are based on current deposit ratios\\n     * @param _burn_amount Quantity of LP tokens to burn in the withdrawal\\n     * @param _min_amounts Minimum amounts of underlying coins to receive\\n     * @param _receiver Address that receives the withdrawn coins\\n     * @param _claim_admin_fees Whether to claim admin fees\\n     * @return List of amounts of coins that were withdrawn\\n     */\\n    function remove_liquidity(uint256 _burn_amount, uint256[] memory _min_amounts, address _receiver, bool _claim_admin_fees)\\n        external\\n        returns (uint256[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@pythnetwork/entropy-sdk-solidity/=node_modules/@pythnetwork/entropy-sdk-solidity/\",\r\n      \"@synthetixio/core-contracts/=node_modules/@synthetixio/core-contracts/\",\r\n      \"@synthetixio/core-modules/=node_modules/@synthetixio/core-modules/\",\r\n      \"@synthetixio/main/=node_modules/@synthetixio/main/\",\r\n      \"@synthetixio/oracle-manager/=node_modules/@synthetixio/oracle-manager/\",\r\n      \"@synthetixio/perps-market/=node_modules/@synthetixio/perps-market/\",\r\n      \"@synthetixio/spot-market/=node_modules/@synthetixio/spot-market/\",\r\n      \"cannon-std/=lib/cannon-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"wormhole-circle-integration/=lib/wormhole-circle-integration/evm/src/\",\r\n      \"wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/\",\r\n      \"wormhole/=lib/wormhole-circle-integration/evm/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_latestAppImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveStableswapFactoryNG\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAppAccountImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAppBeacon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"latestAppBeacon\",\"type\":\"address\"}],\"name\":\"LatestAppBeaconSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"latestAppImplementation\",\"type\":\"address\"}],\"name\":\"LatestAppImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APP_IMPLEMENTATION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appBeaconConfig\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"appName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"latestAppBeacon\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveStableswapFactoryNG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAppName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAppBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestAppImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"getPoolDatafromTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"fromTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"toTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct ICurveStableSwapAppBeacon.PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupportedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_supported\",\"type\":\"bool\"}],\"name\":\"setIsSupportedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_latestAppBeacon\",\"type\":\"address\"}],\"name\":\"setLatestAppBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CurveStableSwapAppBeacon", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006298551d56f825b3b6c3350d32129ffd3cfb198c00000000000000000000000098d9938ccf62a414a9c8c219fe3ae007164186a30000000000000000000000006a8cbed756804b16e05e741edabd5cb544ae21bf000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}