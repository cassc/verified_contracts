{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/CarbonCreditDescendingPriceAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {HalfLifeCarbonCreditAuction} from \\\"@/libraries/HalfLifeCarbonCreditAuction.sol\\\";\\nimport {ICarbonCreditAuction} from \\\"@/interfaces/ICarbonCreditAuction.sol\\\";\\n/**\\n * @title CarbonCreditDescendingPriceAuction\\n * @notice This contract is a reverse dutch auction for GCC.\\n *         - The price has a half life of 1 week\\n *         - The max that the price can grow is 2x per 24 hours\\n *         - For every sale made, the price increases by the % of the total sold that the sale was\\n *             - For example, if 10% of the available GCC is sold, then the price increases by 10%\\n *             - If 100% of the available GCC is sold, then the price doubles\\n *         - GCC is added to the pool of available GCC linearly over the course of a week\\n *         - When new GCC is added, all pending vesting amounts and the new amount are vested over the course of a week\\n *         - There is no cap on the amount of GCC that can be purchased in a single transaction\\n *         - All GCC donations must be registered by the miner pool contract\\n * @author DavidVorick\\n * @author 0xSimon(twitter) -  0xSimbo(github)\\n */\\n\\ncontract CarbonCreditDescendingPriceAuction is ICarbonCreditAuction {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error CallerNotGCC();\\n    error UserPriceNotHighEnough();\\n    error NotEnoughGCCForSale();\\n    error CannotBuyZeroUnits();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @dev The precision (magnifier) used for calculations\\n    uint256 private constant PRECISION = 1e8;\\n    /// @dev The number of seconds in a day\\n    uint256 private constant ONE_DAY = uint256(1 days);\\n    /// @dev The number of seconds in a week\\n    uint256 private constant ONE_WEEK = uint256(7 days);\\n    /**\\n     * @notice the amount of GCC sold within a single unit (0.000000000001 GCC)\\n     * @dev This is equal to 1e-12 GCC\\n     */\\n    uint256 public constant SALE_UNIT = 1e6;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 immutables                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The GLOW token\\n    IERC20 public immutable GLOW;\\n    /// @notice The GCC token\\n    IERC20 public immutable GCC;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev a variable to keep track of the total amount of GCC that has been fully vested\\n     *         - it's not accurate and should only be used in conjunction with\\n     *             - {totalAmountReceived} to calculate the total supply\\n     *             - as shown in {totalSupply}\\n     */\\n    uint256 internal _pesudoTotalAmountFullyAvailableForSale;\\n\\n    /// @notice The total amount of GLOW received from the miner pool\\n    uint256 public totalAmountReceived;\\n\\n    /// @notice The total number of units of GCC sold\\n    uint256 public totalUnitsSold;\\n\\n    /// @notice The price of GCC 24 hours ago\\n    ///         - this price is not accurate if there have been no sales in the last 24 hours\\n    ///         - it should not be relied on for accurate calculations\\n    uint256 public pseudoPrice24HoursAgo;\\n\\n    /// @dev The price of GCC per sale unit\\n    /// @dev this price is not the actual price, and should be used in conjunction with {getPricePerUnit}\\n    uint256 internal pricePerSaleUnit;\\n\\n    /// @notice The timestamps\\n    Timestamps public timestamps;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev A struct to keep track of the timestamps all in a single slot\\n     * @param lastSaleTimestamp the timestamp of the last sale\\n     * @param lastReceivedTimestamp the timestamp of the last time GCC was received from the miner pool\\n     * @param lastPriceChangeTimestamp the timestamp of the last time the price changed\\n     */\\n    struct Timestamps {\\n        uint64 lastSaleTimestamp;\\n        uint64 lastReceivedTimestamp;\\n        uint64 lastPriceChangeTimestamp;\\n        uint64 firstReceivedTimestamp;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @param glow the GLOW token\\n     * @param gcc the GCC token\\n     * @param startingPrice the starting price of 1 unit of GCC\\n     */\\n    constructor(IERC20 glow, IERC20 gcc, uint256 startingPrice) payable {\\n        GLOW = glow;\\n        GCC = gcc;\\n        pricePerSaleUnit = startingPrice;\\n        pseudoPrice24HoursAgo = startingPrice;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 buy gcc                                    */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function buyGCC(uint256 unitsToBuy, uint256 maxPricePerUnit) external {\\n        if (unitsToBuy == 0) {\\n            _revert(CannotBuyZeroUnits.selector);\\n        }\\n        Timestamps memory _timestamps = timestamps;\\n        uint256 _lastPriceChangeTimestamp = _timestamps.lastPriceChangeTimestamp;\\n        uint256 _pseudoPrice24HoursAgo = pseudoPrice24HoursAgo;\\n        uint256 price = getPricePerUnit();\\n        if (price > maxPricePerUnit) {\\n            _revert(UserPriceNotHighEnough.selector);\\n        }\\n        uint256 gccPurchasing = unitsToBuy * SALE_UNIT;\\n        uint256 glowToTransfer = unitsToBuy * price;\\n\\n        uint256 totalSaleUnitsAvailable = totalSaleUnits();\\n        uint256 saleUnitsLeftForSale = totalSaleUnitsAvailable - totalUnitsSold;\\n\\n        if (saleUnitsLeftForSale < unitsToBuy) {\\n            _revert(NotEnoughGCCForSale.selector);\\n        }\\n\\n        uint256 newPrice = price + (price * (unitsToBuy * PRECISION / saleUnitsLeftForSale) / PRECISION);\\n\\n        //The new price can never grow more than 100% in 24 hours\\n        if (newPrice * PRECISION / _pseudoPrice24HoursAgo > 2 * PRECISION) {\\n            newPrice = _pseudoPrice24HoursAgo * 2;\\n        }\\n        //If it's been more than a day since the last sale, then update the price\\n        //To the price in the current tx\\n        //Also update the last price change timestamp\\n        if (block.timestamp - _lastPriceChangeTimestamp > ONE_DAY) {\\n            pseudoPrice24HoursAgo = price;\\n            _lastPriceChangeTimestamp = block.timestamp;\\n        }\\n\\n        //\\n        pricePerSaleUnit = newPrice;\\n\\n        totalUnitsSold += unitsToBuy;\\n        timestamps = Timestamps({\\n            lastSaleTimestamp: uint64(block.timestamp),\\n            lastReceivedTimestamp: _timestamps.lastReceivedTimestamp,\\n            lastPriceChangeTimestamp: uint64(_lastPriceChangeTimestamp),\\n            firstReceivedTimestamp: _timestamps.firstReceivedTimestamp\\n        });\\n        GLOW.transferFrom(msg.sender, address(this), glowToTransfer);\\n        GCC.transfer(msg.sender, gccPurchasing);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 receive gcc                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function receiveGCC(uint256 amount) external {\\n        if (msg.sender != address(GCC)) {\\n            _revert(CallerNotGCC.selector);\\n        }\\n        Timestamps memory _timestamps = timestamps;\\n        _pesudoTotalAmountFullyAvailableForSale = totalSupply();\\n        timestamps = Timestamps({\\n            lastSaleTimestamp: _timestamps.lastSaleTimestamp,\\n            lastReceivedTimestamp: uint64(block.timestamp),\\n            lastPriceChangeTimestamp: _timestamps.lastPriceChangeTimestamp,\\n            firstReceivedTimestamp: _timestamps.firstReceivedTimestamp == 0\\n                ? uint64(block.timestamp)\\n                : _timestamps.firstReceivedTimestamp\\n        });\\n        totalAmountReceived += amount;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function getPricePerUnit() public view returns (uint256) {\\n        Timestamps memory _timestamps = timestamps;\\n        uint256 _lastSaleTimestamp = _timestamps.lastSaleTimestamp;\\n        uint256 firstReceivedTimestamp = _timestamps.firstReceivedTimestamp;\\n        if (firstReceivedTimestamp == 0) {\\n            return pricePerSaleUnit;\\n        }\\n        if (_lastSaleTimestamp == 0) {\\n            _lastSaleTimestamp = firstReceivedTimestamp;\\n        }\\n        uint256 _pricePerSaleUnit = pricePerSaleUnit;\\n        return\\n            HalfLifeCarbonCreditAuction.calculateHalfLifeValue(_pricePerSaleUnit, block.timestamp - _lastSaleTimestamp);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        Timestamps memory _timestamps = timestamps;\\n        uint256 _lastReceivedTimestamp = _timestamps.lastReceivedTimestamp;\\n        uint256 _totalAmountReceived = totalAmountReceived;\\n        uint256 amountThatNeedsToVest = _totalAmountReceived - _pesudoTotalAmountFullyAvailableForSale;\\n        uint256 timeDiff = _min(ONE_WEEK, block.timestamp - _lastReceivedTimestamp);\\n        return (_pesudoTotalAmountFullyAvailableForSale + amountThatNeedsToVest * timeDiff / ONE_WEEK);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function unitsForSale() external view returns (uint256) {\\n        return totalSaleUnits() - totalUnitsSold;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function totalSaleUnits() public view returns (uint256) {\\n        return totalSupply() / (SALE_UNIT);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                     utils                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @param a the first number\\n     * @param b the second number\\n     * @return smaller - the smaller of the two numbers\\n     */\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? b : a;\\n    }\\n\\n    /**\\n     * @notice More efficiently reverts with a bytes4 selector\\n     * @param selector The selector to revert with\\n     */\\n    function _revert(bytes4 selector) private pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0x0, selector)\\n            revert(0x0, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/libraries/HalfLifeCarbonCreditAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ABDKMath64x64} from \\\"@/libraries/ABDKMath64x64.sol\\\";\\n\\nlibrary HalfLifeCarbonCreditAuction {\\n    /**\\n     * @dev the halving period in seconds (7 days)\\n     * @dev the price of the carbon credit auction decays with a half-life or 7 days\\n     *         - the price will shrink exponentially every 7 days unless there are purchases\\n     */\\n    uint256 constant HALVING_PERIOD = uint256(7 days);\\n\\n    /**\\n     * @notice calculates the value remaining after a given amount of time has elapsed\\n     *         - using a half-life of 52 weeks\\n     * @param initialValue the initial value\\n     * @param elapsedSeconds the number of seconds that have elapsed\\n     * @return value - the value remaining given a half-life of 52 weeks\\n     */\\n    function calculateHalfLifeValue(uint256 initialValue, uint256 elapsedSeconds) public pure returns (uint256) {\\n        if (elapsedSeconds == 0) {\\n            return initialValue;\\n        }\\n        // Convert the half-life from months to seconds\\n        uint256 halfLifeSeconds = HALVING_PERIOD;\\n\\n        // Calculate the ratio of elapsed time to half-life in fixed point format\\n        int128 tOverT =\\n            ABDKMath64x64.div(ABDKMath64x64.fromUInt(elapsedSeconds), ABDKMath64x64.fromUInt(halfLifeSeconds));\\n\\n        // Calculate (1/2)^(t/T) using the fact that e^(ln(0.5)*t/T) = (0.5)^(t/T)\\n        int128 halfPowerTOverT =\\n            ABDKMath64x64.exp(ABDKMath64x64.mul(ABDKMath64x64.ln(ABDKMath64x64.divu(1, 2)), tOverT));\\n\\n        // Calculate the final amount\\n        uint256 finalValue = ABDKMath64x64.mulu(halfPowerTOverT, initialValue);\\n\\n        return finalValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICarbonCreditAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ICarbonCreditAuction {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   state-changing                           */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice receives GCC from the miner pool\\n     * @param amount the amount of GCC to receive\\n     * @dev this function can only be called by the miner pool contract\\n     */\\n    function receiveGCC(uint256 amount) external;\\n    /**\\n     * @notice purchases {unitsToBuy} units of GCC at a maximum price of {maxPricePerUnit} GLOW per unit\\n     * @param unitsToBuy the number of units to buy\\n     * @param maxPricePerUnit the maximum price per unit that the user is willing to pay\\n     */\\n    function buyGCC(uint256 unitsToBuy, uint256 maxPricePerUnit) external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice returns the price per unit of GCC\\n     */\\n    function getPricePerUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total supply of GCC available for sale in WEI\\n     * @dev this is not to be confused with the total units of GCC available for sale\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the number of units of GCC available for sale\\n     */\\n    function unitsForSale() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the cumulative total number of units of GCC that have been sold or are available for sale\\n     */\\n    function totalSaleUnits() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/libraries/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n    * Minimum value signed 64.64-bit fixed point number may have. \\n    */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n    * Maximum value signed 64.64-bit fixed point number may have. \\n    */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(x << 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        unchecked {\\n            return int64(x >> 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = x >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        unchecked {\\n            return int256(x) << 64;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) * y >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        unchecked {\\n            if (x == MIN_64x64) {\\n                require(\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                        && y <= 0x1000000000000000000000000000000000000000000000000\\n                );\\n                return -y << 63;\\n            } else {\\n                bool negativeResult = false;\\n                if (x < 0) {\\n                    x = -x;\\n                    negativeResult = true;\\n                }\\n                if (y < 0) {\\n                    y = -y; // We rely on overflow behavior here\\n                    negativeResult = !negativeResult;\\n                }\\n                uint256 absoluteResult = mulu(x, uint256(y));\\n                if (negativeResult) {\\n                    require(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\n                } else {\\n                    require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                    return int256(absoluteResult);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            int256 result = (int256(x) << 64) / y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x; // We rely on overflow behavior here\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n            if (negativeResult) {\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(absoluteResult); // We rely on overflow behavior here\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divuu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return -x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            return int128((int256(x) + int256(y)) >> 1);\\n        }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 m = int256(x) * int256(y);\\n            require(m >= 0);\\n            require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\n            return int128(sqrtu(uint256(m)));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = absX * absX >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= 0);\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = msb - 64 << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return int128(int256(uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0) {\\n                result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n            }\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return exp_2(int128(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result = (x << 64) / y;\\n            } else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                result += xh == hi >> 128 ? xl / y : 1;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) {\\n                return 0;\\n            } else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x4) r <<= 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@/=src/\",\r\n      \"@solady/=lib/solady/src/\",\r\n      \"@unifapv2/=src/UnifapV2/\",\r\n      \"clones/=lib/clones-with-immutable-args/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@clones/=lib/unifap-v2/lib/clones-with-immutable-args/src/\",\r\n      \"@ds/=lib/unifap-v2/lib/ds-test/src/\",\r\n      \"@solmate/=lib/unifap-v2/lib/solmate/src/\",\r\n      \"@std/=lib/unifap-v2/lib/forge-std/src/\",\r\n      \"abdk-libraries-solidity/=lib/abdk-libraries-solidity/\",\r\n      \"clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\r\n      \"clones/=lib/unifap-v2/lib/clones-with-immutable-args/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solady/=lib/solady/\",\r\n      \"unifap-v2/=lib/unifap-v2/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/libraries/HalfLifeCarbonCreditAuction.sol\": {\r\n        \"HalfLifeCarbonCreditAuction\": \"0xd178525026bafc51d045a2e98b0c79a526d446de\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"glow\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"gcc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotGCC\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBuyZeroUnits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughGCCForSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserPriceNotHighEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GCC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLOW\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unitsToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPricePerUnit\",\"type\":\"uint256\"}],\"name\":\"buyGCC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pseudoPrice24HoursAgo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveGCC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamps\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"lastSaleTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastReceivedTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastPriceChangeTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"firstReceivedTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaleUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnitsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitsForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CarbonCreditDescendingPriceAuction", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000f4fbc617a5733eaaf9af08e1ab816b103388d8b600000000000000000000000021c46173591f39afc1d2b634b74c98f0576a272b00000000000000000000000000000000000000000000000000000000000186a0", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}