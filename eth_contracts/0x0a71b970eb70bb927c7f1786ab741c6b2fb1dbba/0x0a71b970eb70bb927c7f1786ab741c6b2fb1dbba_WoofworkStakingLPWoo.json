{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"WoofWorkLPStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/* STRUCTS */\\n\\nstruct Pool {\\n    uint232 tvl;\\n    uint24 participants;\\n}\\n\\nstruct Option {\\n    uint128 apr;\\n    uint128 range;\\n}\\n\\nstruct Staking {\\n    bool nft;\\n    uint16 tokenId;\\n    uint232 amount;\\n    uint256 end;\\n    uint256 earning;\\n    uint256 revenuePerSecond;\\n    Option option;\\n}\\n\\n/* EVENTS */\\n\\nevent LPSet(address lp);\\nevent WoofSet(address woof);\\nevent WoofworkerStakingDenied();\\n\\nevent WoofworkerStakingAllowed();\\n\\nevent WoofworkerAddressSet(address woofworkerAddress);\\n\\nevent OptionsUpdated(uint128[] aprs, uint128[] ranges);\\n\\nevent StakedWithoutNFT(address indexed wallet, uint256 amount, uint128 apr, uint128 range);\\n\\nevent UnstakeWithoutNFT(address indexed wallet, uint256 burnedAmount, uint256 withdrawnAmount);\\n\\nevent StakedWithNFT(address indexed wallet, uint96 indexed tokenId, uint256 amount, uint128 apr, uint128 range);\\n\\nevent UnstakeWithNFT(address indexed wallet, uint96 indexed tokenId, uint256 burnedAmount, uint256 withdrawnAmount);\\n\\n/* ERRORS */\\n\\nerror NoContracts();\\nerror NotStakedYet();\\nerror AlreadyStaked();\\nerror NothingStaked();\\nerror NotTokenOwner();\\nerror WithdrawFailed();\\nerror NotAvailableYet();\\nerror NotEnoughBalance();\\nerror CoinTransferFailed();\\nerror ExceedsOptionsLimit();\\nerror InvalidWoofworkerId();\\nerror InputsLengthsMismatch();\\nerror WoofworkerAlreadyStaked();\\n\\n/*\\n                                 __       __   ______    ______   ________  __       __   ______   _______   __    __                                           \\n                                |  \\\\  _  |  \\\\ /      \\\\  /      \\\\ |        \\\\|  \\\\  _  |  \\\\ /      \\\\ |       \\\\ |  \\\\  /  \\\\                                          \\n                                | $$ / \\\\ | $$|  $$$$$$\\\\|  $$$$$$\\\\| $$$$$$$$| $$ / \\\\ | $$|  $$$$$$\\\\| $$$$$$$\\\\| $$ /  $$       __                                 \\n                                | $$/  $\\\\| $$| $$  | $$| $$  | $$| $$__    | $$/  $\\\\| $$| $$  | $$| $$__| $$| $$/  $$       |  \\\\                                \\n                                | $$  $$$\\\\ $$| $$  | $$| $$  | $$| $$  \\\\   | $$  $$$\\\\ $$| $$  | $$| $$    $$| $$  $$         \\\\$$                                \\n                                | $$ $$\\\\$$\\\\$$| $$  | $$| $$  | $$| $$$$$   | $$ $$\\\\$$\\\\$$| $$  | $$| $$$$$$$\\\\| $$$$$\\\\         __                                 \\n                                | $$$$  \\\\$$$$| $$__/ $$| $$__/ $$| $$      | $$$$  \\\\$$$$| $$__/ $$| $$  | $$| $$ \\\\$$\\\\       |  \\\\                                \\n                                | $$$    \\\\$$$ \\\\$$    $$ \\\\$$    $$| $$      | $$$    \\\\$$$ \\\\$$    $$| $$  | $$| $$  \\\\$$\\\\       \\\\$$                                \\n                                 \\\\$$      \\\\$$  \\\\$$$$$$   \\\\$$$$$$  \\\\$$       \\\\$$      \\\\$$  \\\\$$$$$$  \\\\$$   \\\\$$ \\\\$$   \\\\$$                                                                                                                                                                                                                                                               \\n     __        _______               __        __       __   ______    ______   ________         ______  ________   ______   __    __  ______  __    __   ______  \\n    |  \\\\      |       \\\\             /  \\\\      |  \\\\  _  |  \\\\ /      \\\\  /      \\\\ |        \\\\       /      \\\\|        \\\\ /      \\\\ |  \\\\  /  \\\\|      \\\\|  \\\\  |  \\\\ /      \\\\ \\n    | $$      | $$$$$$$\\\\           /  $$      | $$ / \\\\ | $$|  $$$$$$\\\\|  $$$$$$\\\\| $$$$$$$$      |  $$$$$$\\\\\\\\$$$$$$$$|  $$$$$$\\\\| $$ /  $$ \\\\$$$$$$| $$\\\\ | $$|  $$$$$$\\\\\\n    | $$      | $$__/ $$          /  $$       | $$/  $\\\\| $$| $$  | $$| $$  | $$| $$__          | $$___\\\\$$  | $$   | $$__| $$| $$/  $$   | $$  | $$$\\\\| $$| $$ __\\\\$$\\n    | $$      | $$    $$         /  $$        | $$  $$$\\\\ $$| $$  | $$| $$  | $$| $$  \\\\          \\\\$$    \\\\   | $$   | $$    $$| $$  $$    | $$  | $$$$\\\\ $$| $$|    \\\\\\n    | $$      | $$$$$$$         /  $$         | $$ $$\\\\$$\\\\$$| $$  | $$| $$  | $$| $$$$$          _\\\\$$$$$$\\\\  | $$   | $$$$$$$$| $$$$$\\\\    | $$  | $$\\\\$$ $$| $$ \\\\$$$$\\n    | $$_____ | $$             /  $$          | $$$$  \\\\$$$$| $$__/ $$| $$__/ $$| $$            |  \\\\__| $$  | $$   | $$  | $$| $$ \\\\$$\\\\  _| $$_ | $$ \\\\$$$$| $$__| $$\\n    | $$     \\\\| $$            |  $$           | $$$    \\\\$$$ \\\\$$    $$ \\\\$$    $$| $$             \\\\$$    $$  | $$   | $$  | $$| $$  \\\\$$\\\\|   $$ \\\\| $$  \\\\$$$ \\\\$$    $$\\n     \\\\$$$$$$$$ \\\\$$             \\\\$$             \\\\$$      \\\\$$  \\\\$$$$$$   \\\\$$$$$$  \\\\$$              \\\\$$$$$$    \\\\$$    \\\\$$   \\\\$$ \\\\$$   \\\\$$ \\\\$$$$$$ \\\\$$   \\\\$$  \\\\$$$$$$ \\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \\n*/\\n\\n/// @title Woofwork Staking $LP / $WOOF (https://steaking.woofwork.io/)\\n/// @author bc.army (https://bc.army/)\\n/// @notice Platform to stake $LP (+ $WOOFWORKER) and earn revenue in $WOOF.\\ncontract WoofworkStakingLPWoof is Ownable, Pausable, ReentrancyGuard {\\n    /* INITIALIZATION */\\n\\n    constructor() Ownable(msg.sender) {\\n    }\\n\\n    /* MAPPINGS */\\n\\n    mapping(uint256 => Option) private _options;\\n    mapping(address => Staking) private _stakings;\\n\\n    /* VARIABLES */\\n\\n    Pool private pool;\\n    bool private _nftStaking;\\n\\n    IERC20 private $LP;\\n    uint96 private constant UNIT_PERCENTAGE = 100;\\n\\n    IERC20 private $WOOF;\\n    uint96 private constant WOOFWORKER_MAX_SUPPLY = 1000;\\n\\n    uint96 private constant YEAR_TIMESTAMP = 365 days;\\n    address private constant PENALTY_ADDRESS = 0xeCE2473567d216715cA5753bCE0ed4aa58256d4a;\\n\\n    IERC721 private $WOOFWORKER;\\n    uint48 private constant OPTIONS_LIMIT = 4;\\n    uint48 private constant PENALTY_PERCENTAGE = 10;\\n\\n    /* MODIFIERS */\\n\\n    modifier canStakeWoofworker() {\\n        if (!_nftStaking) revert NotAvailableYet();\\n        _;\\n    }\\n\\n    modifier isTokenValid(uint256 tokenId) {\\n        if (tokenId == 0 || tokenId > WOOFWORKER_MAX_SUPPLY) {\\n            revert InvalidWoofworkerId();\\n        }\\n        _;\\n    }\\n\\n    modifier isTokenOwner(uint256 tokenId) {\\n        if (msg.sender != $WOOFWORKER.ownerOf(tokenId)) {\\n            revert NotTokenOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier noContracts() {\\n        if (msg.sender != tx.origin) revert NoContracts();\\n        _;\\n    }\\n\\n    modifier checkOptionId(uint256 optionId) {\\n        if (OPTIONS_LIMIT <= optionId) revert ExceedsOptionsLimit();\\n        _;\\n    }\\n\\n    modifier checkBalanceLP(uint256 amount) {\\n        if ($LP.balanceOf(msg.sender) < amount) revert NotEnoughBalance();\\n        _;\\n    }\\n\\n    /* GETTERS */\\n\\n    function getPoolData() public view returns (Pool memory) {\\n        return pool;\\n    }\\n\\n    function getWalletStakingData() public view returns (Staking memory) {\\n        return _stakings[msg.sender];\\n    }\\n\\n    /* SETTERS */\\n\\n    function withdraw() external payable onlyOwner nonReentrant {\\n        (bool success,) = (msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    function setLP(address lp) external payable onlyOwner {\\n        $LP = IERC20(lp);\\n        emit LPSet(lp);\\n    }  \\n\\n    function setWoof(address woof) external payable onlyOwner {\\n        $WOOF = IERC20(woof);\\n        emit WoofSet(woof);\\n    }  \\n\\n    function allowStakingWoofworker() external payable onlyOwner {\\n        _nftStaking = true;\\n        emit WoofworkerStakingAllowed();\\n    }\\n\\n    function denyStakingWoofworker() external payable onlyOwner {\\n        _nftStaking = false;\\n        emit WoofworkerStakingDenied();\\n    }\\n\\n    function setWoofworker(address woofworker) external payable onlyOwner {\\n        $WOOFWORKER = IERC721(woofworker);\\n        emit WoofworkerAddressSet(woofworker);\\n    }\\n\\n    function pause() external payable onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external payable onlyOwner {\\n        _unpause();\\n    }\\n\\n    function updateOptions(uint128[] memory aprs, uint128[] memory ranges) external payable onlyOwner {\\n        uint256 length = aprs.length;\\n        if (length != ranges.length || length != OPTIONS_LIMIT) {\\n            revert InputsLengthsMismatch();\\n        }\\n        for (uint256 i; i < length;) {\\n            _options[i] = Option(aprs[i], ranges[i]);\\n            assembly {\\n                i := add(i, 1)\\n            }\\n        }\\n        emit OptionsUpdated(aprs, ranges);\\n    }\\n\\n    /**\\n     * @dev Stake tokens for the first time.\\n     *\\n     * Requirements:\\n     *\\n     * - '_paused' must be false.\\n     * - 'optionId' must be in range.\\n     * - 'tx.origin' must be 'msg.sender' to avoid contract calls.\\n     * - user LP balance must be equal or greater than 'amount'.\\n     *\\n     * Emits a {StakedWithoutNFT} event.\\n     */\\n    function firstStakeWithoutNFT(uint24 optionId, uint232 amount)\\n        external\\n        payable\\n        noContracts\\n        nonReentrant\\n        whenNotPaused\\n        checkOptionId(optionId)\\n        checkBalanceLP(amount)\\n    {\\n        // Get Staking Data\\n        Staking storage staking = _stakings[msg.sender];\\n\\n        // Check Conditions\\n        if (staking.amount != 0) revert AlreadyStaked();\\n\\n        // Execute Transfers\\n        if (!$LP.transferFrom(msg.sender, address(this), amount)) {\\n            revert CoinTransferFailed();\\n        }\\n\\n        // Get Option Data\\n        Option memory option = _options[optionId];\\n\\n        // Set Local Variables\\n        uint128 apr = option.apr;\\n        uint128 range = option.range;\\n        unchecked {\\n            // Update Staking Data\\n            staking.amount = amount;\\n            staking.option.apr = apr;\\n            staking.option.range = range;\\n            staking.end = block.timestamp + range;\\n            staking.revenuePerSecond = (amount + (amount * apr) / UNIT_PERCENTAGE) / YEAR_TIMESTAMP;\\n\\n            // Update Pool Data\\n            pool.tvl += amount;\\n            ++pool.participants;\\n        }\\n        // Emit Event\\n        emit StakedWithoutNFT(msg.sender, amount, apr, range);\\n    }\\n\\n    /**\\n     * @dev Stake tokens and NFT for the first time.\\n     *\\n     * Requirements:\\n     *\\n     * - '_paused' must be false.\\n     * - 'optionId' must be in range.\\n     * - LP must be not already staked by user.\\n     * - 'tokenId' must exists and 'msg.sender' must be the owner.\\n     * - 'tx.origin' must be 'msg.sender' to avoid contract calls.\\n     * - user LP balance must be equal or greater than 'amount'.\\n     *\\n     * Emits a {StakedWithNFT} event.\\n     */\\n    function firstStakeWithNFT(uint8 optionId, uint16 tokenId, uint232 amount)\\n        external\\n        payable\\n        noContracts\\n        nonReentrant\\n        whenNotPaused\\n        canStakeWoofworker\\n        isTokenValid(tokenId)\\n        isTokenOwner(tokenId)\\n        checkOptionId(optionId)\\n        checkBalanceLP(amount)\\n    {\\n        // Get Staking Data\\n        Staking storage staking = _stakings[msg.sender];\\n\\n        // Check Conditions\\n        if (staking.amount != 0) revert AlreadyStaked();\\n\\n        // Execute Transfers\\n        if (!$LP.transferFrom(msg.sender, address(this), amount)) {\\n            revert CoinTransferFailed();\\n        }\\n        $WOOFWORKER.transferFrom(msg.sender, address(this), tokenId);\\n\\n        // Get Option Data\\n        Option memory option = _options[optionId];\\n\\n        // Set Local Variables\\n        uint128 range = option.range;\\n        uint128 apr = option.apr + ((option.apr * _retrieveTokenBoost(tokenId)) / UNIT_PERCENTAGE);\\n        unchecked {\\n            // Update Staking Data\\n            staking.nft = true;\\n            staking.amount = amount;\\n            staking.option.apr = apr;\\n            staking.tokenId = tokenId;\\n            staking.revenuePerSecond = (amount + (amount * apr) / UNIT_PERCENTAGE) / YEAR_TIMESTAMP;\\n            staking.end = block.timestamp + range;\\n\\n            // Update Pool Data\\n            pool.tvl += amount;\\n            ++pool.participants;\\n        }\\n        // Emit Event\\n        emit StakedWithNFT(msg.sender, tokenId, amount, apr, range);\\n    }\\n\\n    /**\\n     * @dev Add tokens to current staking.\\n     *\\n     * Requirements:\\n     *\\n     * - '_paused' must be false.\\n     * - 'optionId' must be in range.\\n     * - LP must be already staked by user.\\n     * - 'tokenId' must exists and 'msg.sender' must be the owner.\\n     * - 'tx.origin' must be 'msg.sender' to avoid contract calls.\\n     * - user LP balance must be equal or greater than 'amount'.\\n     *\\n     * Emits a {StakedWithoutNFT} event.\\n     */\\n    function secondaryStakeWithoutNFT(uint232 amount)\\n        external\\n        payable\\n        noContracts\\n        nonReentrant\\n        whenNotPaused\\n        checkBalanceLP(amount)\\n    {\\n        // Get Staking Data\\n        Staking storage staking = _stakings[msg.sender];\\n\\n        // Check Conditions\\n        if (staking.amount == 0) revert NotStakedYet();\\n\\n        // Execute Transfers\\n        if (!$LP.transferFrom(msg.sender, address(this), amount)) {\\n            revert CoinTransferFailed();\\n        }\\n\\n        // Set Local Variables\\n        uint256 end = staking.end;\\n        uint128 apr = staking.option.apr;\\n        uint128 range = staking.option.range;\\n        unchecked {\\n            // Update Staking Data\\n            staking.amount += amount;\\n            staking.end = block.timestamp + range;\\n            staking.earning +=\\n                staking.revenuePerSecond * (block.timestamp < end ? range - (end - block.timestamp) : range);\\n\\n            // Update Pool Data\\n            pool.tvl += amount;\\n        }\\n        // Emit Event\\n\\n        emit StakedWithoutNFT(msg.sender, amount, apr, range);\\n    }\\n\\n    /**\\n     * @dev Add tokens and NFT to current staking.\\n     *\\n     * Requirements:\\n     *\\n     * - '_paused' must be false.\\n     * - 'optionId' must be in range.\\n     * - WOOF must be already staked by user.\\n     * - NFT must be not already staked by user.\\n     * - 'tokenId' must exists and 'msg.sender' must be the owner.\\n     * - 'tx.origin' must be 'msg.sender' to avoid contract calls.\\n     * - user WOOF balance must be equal or greater than 'amount'.\\n     *\\n     * Emits a {StakedWithNFT} event.\\n     */\\n    function secondaryStakeWithNFT(uint16 tokenId, uint232 amount)\\n        external\\n        payable\\n        noContracts\\n        nonReentrant\\n        whenNotPaused\\n        canStakeWoofworker\\n        isTokenValid(tokenId)\\n        isTokenOwner(tokenId)\\n        checkBalanceLP(amount)\\n    {\\n        // Get Staking Data\\n        Staking storage staking = _stakings[msg.sender];\\n\\n        // Check Conditions\\n        if (staking.nft) revert WoofworkerAlreadyStaked();\\n        if (staking.amount == 0) revert NotStakedYet();\\n\\n        // Execute Transfers\\n        if (!$LP.transferFrom(msg.sender, address(this), amount)) {\\n            revert CoinTransferFailed();\\n        }\\n        $WOOFWORKER.transferFrom(msg.sender, address(this), tokenId);\\n\\n        // Set Local Variables\\n        uint256 end = staking.end;\\n        uint128 apr = staking.option.apr;\\n        uint128 range = staking.option.range;\\n        uint128 aprBoosted = apr + ((apr * _retrieveTokenBoost(tokenId)) / UNIT_PERCENTAGE);\\n        unchecked {\\n            // Update Staking Data\\n            staking.nft = true;\\n            staking.amount += amount;\\n            staking.tokenId = tokenId;\\n            staking.option.apr = aprBoosted;\\n            staking.end = block.timestamp + range;\\n            staking.earning +=\\n                staking.revenuePerSecond * (block.timestamp < end ? range - (end - block.timestamp) : range);\\n            staking.revenuePerSecond = amount + ((amount * aprBoosted) / UNIT_PERCENTAGE) / YEAR_TIMESTAMP;\\n\\n            // Update Pool Data\\n            pool.tvl += amount;\\n        }\\n        // Emit Event\\n        emit StakedWithNFT(msg.sender, tokenId, amount, apr, range);\\n    }\\n\\n    /**\\n     * @dev Unstake tokens.\\n     *\\n     * Requirements:\\n     *\\n     * - LP must be already staked by user.\\n     * - 'tx.origin' must be 'msg.sender' to avoid contract calls.\\n     *\\n     * Emits a {UnstakeWithNFT} or {UnstakeWithoutNFT} event.\\n     */\\n    function unstake() external payable noContracts nonReentrant {\\n        // Get Staking Data\\n        Staking storage staking = _stakings[msg.sender];\\n\\n        // Check Conditions\\n        if (staking.amount == 0) revert NothingStaked();\\n\\n        // Set Local Variables\\n        uint256 burnedAmount;\\n        uint256 withdrawnAmount;\\n        uint256 amount = staking.amount;\\n\\n        if (block.timestamp < staking.end) {\\n            burnedAmount = amount / PENALTY_PERCENTAGE;\\n            withdrawnAmount = amount - burnedAmount;\\n            if (!$LP.transfer(msg.sender, withdrawnAmount) || !$LP.transfer(PENALTY_ADDRESS, burnedAmount)) {\\n                revert CoinTransferFailed();\\n            }\\n        } else {\\n            if (\\n                !$LP.transfer(msg.sender, amount)\\n                    || !$WOOF.transfer(msg.sender, staking.earning + (staking.revenuePerSecond * staking.option.range))\\n            ) revert CoinTransferFailed();\\n        }\\n\\n        if (staking.nft) {\\n            $WOOFWORKER.transferFrom(address(this), msg.sender, staking.tokenId);\\n            emit UnstakeWithNFT(msg.sender, staking.tokenId, burnedAmount, withdrawnAmount);\\n        } else {\\n            emit UnstakeWithoutNFT(msg.sender, withdrawnAmount, burnedAmount);\\n        }\\n\\n        pool.tvl -= uint232(amount);\\n        --pool.participants;\\n\\n        delete _stakings[msg.sender];\\n    }\\n\\n    /* HELPERS */\\n\\n    function _retrieveTokenBoost(uint256 tokenId) private pure returns (uint128 boost) {\\n        if ((tokenId < 26) || (tokenId > 225 && tokenId < 251)) return 30;\\n        if ((tokenId > 175 && tokenId < 226) || (tokenId > 500 && tokenId < 601)) return 20;\\n        if ((tokenId > 75 && tokenId < 176) || (tokenId > 600 && tokenId < 701)) {\\n            return 10;\\n        }\\n        if ((tokenId > 250 && tokenId < 501) || (tokenId > 750 && tokenId < 1001)) return 5;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsOptionsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputsLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWoofworkerId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoContracts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAvailableYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStakedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingStaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WoofworkerAlreadyStaked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"LPSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"aprs\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"ranges\",\"type\":\"uint128[]\"}],\"name\":\"OptionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"tokenId\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"apr\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"range\",\"type\":\"uint128\"}],\"name\":\"StakedWithNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"apr\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"range\",\"type\":\"uint128\"}],\"name\":\"StakedWithoutNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"tokenId\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"UnstakeWithNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"UnstakeWithoutNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"woof\",\"type\":\"address\"}],\"name\":\"WoofSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"woofworkerAddress\",\"type\":\"address\"}],\"name\":\"WoofworkerAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WoofworkerStakingAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WoofworkerStakingDenied\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowStakingWoofworker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denyStakingWoofworker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"optionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint232\",\"name\":\"amount\",\"type\":\"uint232\"}],\"name\":\"firstStakeWithNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"optionId\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"amount\",\"type\":\"uint232\"}],\"name\":\"firstStakeWithoutNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint232\",\"name\":\"tvl\",\"type\":\"uint232\"},{\"internalType\":\"uint24\",\"name\":\"participants\",\"type\":\"uint24\"}],\"internalType\":\"struct Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWalletStakingData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"nft\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint232\",\"name\":\"amount\",\"type\":\"uint232\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenuePerSecond\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"apr\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"range\",\"type\":\"uint128\"}],\"internalType\":\"struct Option\",\"name\":\"option\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint232\",\"name\":\"amount\",\"type\":\"uint232\"}],\"name\":\"secondaryStakeWithNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint232\",\"name\":\"amount\",\"type\":\"uint232\"}],\"name\":\"secondaryStakeWithoutNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"woof\",\"type\":\"address\"}],\"name\":\"setWoof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"woofworker\",\"type\":\"address\"}],\"name\":\"setWoofworker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"aprs\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"ranges\",\"type\":\"uint128[]\"}],\"name\":\"updateOptions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "WoofworkStakingLPWoof", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}