{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: dotApe/implementations/namehash.sol\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\ncontract apeNamehash {\r\n    function getNamehash(string memory _name) public pure returns (bytes32 namehash) {\r\n        namehash = 0x0000000000000000000000000000000000000000000000000000000000000000;\r\n        namehash = keccak256(\r\n        abi.encodePacked(namehash, keccak256(abi.encodePacked('ape')))\r\n        );\r\n        namehash = keccak256(\r\n        abi.encodePacked(namehash, keccak256(abi.encodePacked(_name)))\r\n        );\r\n    }\r\n\r\n    function getNamehashSubdomain(string memory _name, string memory _subdomain) public pure returns (bytes32 namehash) {\r\n        namehash = 0x0000000000000000000000000000000000000000000000000000000000000000;\r\n        namehash = keccak256(\r\n        abi.encodePacked(namehash, keccak256(abi.encodePacked('ape')))\r\n        );\r\n        namehash = keccak256(\r\n        abi.encodePacked(namehash, keccak256(abi.encodePacked(_name)))\r\n        );\r\n        namehash = keccak256(\r\n        abi.encodePacked(namehash, keccak256(abi.encodePacked(_subdomain)))\r\n        );\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: dotApe/implementations/addressesImplementation.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IApeAddreses {\r\n    function owner() external view returns (address);\r\n    function getDotApeAddress(string memory _label) external view returns (address);\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract apeAddressesImpl {\r\n    address dotApeAddresses;\r\n\r\n    constructor(address addresses_) {\r\n        dotApeAddresses = addresses_;\r\n    }\r\n\r\n    function setAddressesImpl(address addresses_) public onlyOwner {\r\n        dotApeAddresses = addresses_;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return IApeAddreses(dotApeAddresses).owner();\r\n    }\r\n\r\n    function getDotApeAddress(string memory _label) public view returns (address) {\r\n        return IApeAddreses(dotApeAddresses).getDotApeAddress(_label);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegistrar() {\r\n        require(msg.sender == getDotApeAddress(\"registrar\"), \"Ownable: caller is not the registrar\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyErc721() {\r\n        require(msg.sender == getDotApeAddress(\"erc721\"), \"Ownable: caller is not erc721\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTeam() {\r\n        require(msg.sender == getDotApeAddress(\"team\"), \"Ownable: caller is not team\");\r\n        _;\r\n    }\r\n\r\n}\r\n// File: dotApe/implementations/registryImplementation.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IApeRegistry {\r\n    function setRecord(bytes32 _hash, uint256 _tokenId, string memory _name, uint256 expiry_) external;\r\n    function getTokenId(bytes32 _hash) external view returns (uint256);\r\n    function getName(uint256 _tokenId) external view returns (string memory);\r\n    function currentSupply() external view returns (uint256);\r\n    function nextTokenId() external view returns (uint256);\r\n    function addOwner(address address_) external;\r\n    function changeOwner(address address_, uint256 tokenId_) external;\r\n    function getOwner(uint256 tokenId) external view returns (address);\r\n    function getExpiration(uint256 tokenId) external view returns (uint256);\r\n    function changeExpiration(uint256 tokenId, uint256 expiration_) external;\r\n    function setPrimaryName(address address_, uint256 tokenId) external;\r\n    function getPrimaryName(address address_) external view returns (string memory);\r\n    function getPrimaryNameTokenId(address address_) external view returns (uint256);\r\n    function getTxtRecord(uint256 tokenId, string memory label) external view returns (string memory);\r\n    function setTxtRecord(uint256 tokenId, string memory label, string memory record) external;\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract apeRegistryImpl is apeAddressesImpl {\r\n    event PrimaryNameSet(address indexed address_, uint256 indexed tokenId);\r\n\r\n    function setRecord(bytes32 _hash, uint256 _tokenId, string memory _name, uint256 expiry_) internal {\r\n        IApeRegistry(getDotApeAddress(\"registry\")).setRecord(_hash, _tokenId, _name, expiry_);\r\n    }\r\n\r\n    function getTokenId(bytes32 _hash) internal view returns (uint256) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).getTokenId(_hash);\r\n    }\r\n\r\n    function getName(uint256 _tokenId) internal view returns (string memory) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).getName(_tokenId);     \r\n    }\r\n\r\n    function nextTokenId() internal view returns (uint256) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).nextTokenId();\r\n    }\r\n\r\n    function currentSupply() internal view returns (uint256) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).currentSupply();\r\n    }\r\n\r\n    function addOwner(address address_) internal {\r\n        IApeRegistry(getDotApeAddress(\"registry\")).addOwner(address_);\r\n    }\r\n\r\n    function changeOwner(address address_, uint256 tokenId_) internal {\r\n        IApeRegistry(getDotApeAddress(\"registry\")).changeOwner(address_, tokenId_);\r\n    }\r\n\r\n    function getOwner(uint256 tokenId) internal view returns (address) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).getOwner(tokenId);\r\n    }\r\n\r\n    function getExpiration(uint256 tokenId) internal view returns (uint256) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).getExpiration(tokenId);\r\n    }\r\n\r\n    function changeExpiration(uint256 tokenId, uint256 expiration_) internal {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).changeExpiration(tokenId, expiration_);\r\n    }\r\n\r\n    function setPrimaryName(address address_, uint256 tokenId) internal {\r\n        emit PrimaryNameSet(address_, tokenId);\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).setPrimaryName(address_, tokenId);\r\n    }\r\n\r\n    function getPrimaryName(address address_) internal view returns (string memory) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).getPrimaryName(address_);\r\n    }\r\n\r\n    function getPrimaryNameTokenId(address address_) internal view returns (uint256) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).getPrimaryNameTokenId(address_);\r\n    }\r\n\r\n    function getTxtRecord(uint256 tokenId, string memory label) internal view returns (string memory) {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).getTxtRecord(tokenId, label);\r\n    }\r\n\r\n    function setTxtRecord(uint256 tokenId, string memory label, string memory record) internal {\r\n        return IApeRegistry(getDotApeAddress(\"registry\")).setTxtRecord(tokenId, label, record);\r\n    }\r\n}\r\n// File: dotApe/implementations/erc721Implementation.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface apeIERC721 {\r\n    function mint(address to) external;\r\n    function transferExpired(address to, uint256 tokenId) external;\r\n}\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract apeErc721Impl is apeAddressesImpl {\r\n    \r\n    function mint(address to) internal {\r\n        apeIERC721(getDotApeAddress(\"erc721\")).mint(to);\r\n    }\r\n\r\n    function transferExpired(address to, uint256 tokenId) internal {\r\n        apeIERC721(getDotApeAddress(\"erc721\")).transferExpired(to, tokenId);\r\n    }\r\n\r\n    function totalSupply() internal view returns (uint256) {\r\n        return IERC721Enumerable(getDotApeAddress(\"erc721\")).totalSupply();\r\n    }\r\n\r\n}\r\n// File: dotApe/presaleRegistrar.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface priceOracle {\r\n    function getCost(string memory name, uint256 durationInYears) external view returns (uint256);\r\n    function getCostUsd(string memory name, uint256 durationInYears) external view returns (uint256);\r\n    function getCostApecoin(string memory name, uint256 durationInYears) external view returns (uint256);\r\n\r\n}\r\n\r\nabstract contract priceOracleImpl is apeAddressesImpl {\r\n\r\n    function getCost(string memory name, uint256 durationInYears) public view returns (uint256) {\r\n        return priceOracle(getDotApeAddress(\"priceOracle\")).getCost(name, durationInYears);\r\n    }\r\n\r\n    function getCostUsd(string memory name, uint256 durationInYears) public view returns (uint256) {\r\n        return priceOracle(getDotApeAddress(\"priceOracle\")).getCostUsd(name, durationInYears);\r\n    }\r\n\r\n    function getCostApecoin(string memory name, uint256 durationInYears) public view returns (uint256) {\r\n        return priceOracle(getDotApeAddress(\"priceOracle\")).getCostApecoin(name, durationInYears);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\r\n    }\r\n}\r\n\r\npragma solidity 0.8.7;\r\n\r\n\r\nabstract contract Signatures {\r\n\r\n    struct Register {\r\n        string name;\r\n        address address_;\r\n        uint256 durationInYears;\r\n        uint256 cost;\r\n        bool primaryName;\r\n        bytes sig;\r\n        uint256 sigExpiration;\r\n    }\r\n\r\n    struct Extend {\r\n        uint256 tokenId;\r\n        uint256 durationInYears;\r\n        uint256 cost;\r\n        bytes sig;\r\n        uint256 sigExpiration;\r\n    }\r\n     \r\n    function verifySignature(Register memory register_) public view returns(address) {\r\n        require(block.timestamp < register_.sigExpiration, \"Signature has expired\");\r\n        bytes32 message = keccak256(abi.encode(register_.name, register_.address_, register_.durationInYears, register_.cost, register_.primaryName, register_.sigExpiration));\r\n        return recoverSigner(message, register_.sig);\r\n    }\r\n\r\n    function verifySignatureErc20(Register memory register_, address token) public view returns(address) {\r\n        require(block.timestamp < register_.sigExpiration, \"Signature has expired\");\r\n        bytes32 message = keccak256(abi.encode(register_.name, register_.address_, register_.durationInYears, register_.cost, token, register_.primaryName, register_.sigExpiration));\r\n        return recoverSigner(message, register_.sig);\r\n    }\r\n\r\n    function verifySignatureExtend(Extend memory extend_) public view returns(address) {\r\n        require(block.timestamp < extend_.sigExpiration, \"Signature has expired\");\r\n        bytes32 message = keccak256(abi.encode(extend_.tokenId, extend_.durationInYears, extend_.cost, extend_.sigExpiration));\r\n        return recoverSigner(message, extend_.sig);\r\n    }\r\n\r\n   function recoverSigner(bytes32 message, bytes memory sig)\r\n       public\r\n       pure\r\n       returns (address)\r\n     {\r\n       uint8 v;\r\n       bytes32 r;\r\n       bytes32 s;\r\n       (v, r, s) = splitSignature(sig);\r\n       return ecrecover(message, v, r, s);\r\n   }\r\n\r\n   function splitSignature(bytes memory sig)\r\n       internal\r\n       pure\r\n       returns (uint8, bytes32, bytes32)\r\n     {\r\n       require(sig.length == 65);\r\n\r\n       bytes32 r;\r\n       bytes32 s;\r\n       uint8 v;\r\n\r\n       assembly {\r\n           // first 32 bytes, after the length prefix\r\n           r := mload(add(sig, 32))\r\n           // second 32 bytes\r\n           s := mload(add(sig, 64))\r\n           // final byte (first byte of the next 32 bytes)\r\n           v := byte(0, mload(add(sig, 96)))\r\n       }\r\n \r\n       return (v, r, s);\r\n   }\r\n}\r\n\r\ncontract dotApePublicRegistrarV2 is apeErc721Impl, apeRegistryImpl, apeNamehash, priceOracleImpl, Signatures {\r\n\r\n    constructor(address _address) apeAddressesImpl(_address) {\r\n        erc20Accepted[apecoinAddress] = true;\r\n        erc20Accepted[usdtAddress] = true;\r\n        erc20Accepted[wethAddress] = true;\r\n    }\r\n    bool isContractActive = true;\r\n    address apecoinAddress = 0x4d224452801ACEd8B2F0aebE155379bb5D594381;\r\n    address usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    mapping(address => bool) private erc20Accepted;\r\n    uint256 secondsInYears = 365 days;\r\n\r\n    struct RegisterTeam {\r\n        string name;\r\n        address registrant;\r\n        uint256 durationInYears;\r\n    }\r\n\r\n    struct TxtRecord {\r\n        string label;\r\n        string record;\r\n    }\r\n\r\n    struct PrimaryName {\r\n        address address_;\r\n        uint256 tokenId;\r\n    }\r\n\r\n    event Registered(address indexed to, uint256 indexed tokenId, string indexed name, uint256 expiration);\r\n    event Extended(address indexed owner, uint256 indexed tokenId, string indexed name, uint256 previousExpiration, uint256 newExpiration);\r\n\r\n    function register(Register[] memory registerParams) public payable {\r\n        require(isContractActive, \"Contract is not active\");\r\n        require(verifyAllSignatures(registerParams), \"Not signed by signer\");\r\n        require(getTotalCost(registerParams) <= msg.value, \"Value sent is not correct\");\r\n        \r\n        bool[] memory success = new bool[](registerParams.length);\r\n        for(uint256 i=0; i < registerParams.length; i++) {\r\n            success[i] = _register(msg.sender, registerParams[i].name, registerParams[i].durationInYears);\r\n\r\n            if(success[i] && registerParams[i].primaryName) {\r\n                setPrimaryName(msg.sender, getTokenId(getNamehash(registerParams[i].name)));\r\n            }\r\n        }\r\n        settleRefund(registerParams, success);\r\n    }\r\n\r\n    function registerErc20(Register[] memory registerParams, address token) public {\r\n        require(isContractActive, \"Contract is not active\");\r\n        require(verifyAllSignaturesErc20(registerParams, token), \"Not signed by signer\");\r\n        \r\n        receiveErc20(token, msg.sender, getTotalCost(registerParams));\r\n\r\n        bool[] memory success = new bool[](registerParams.length);\r\n        for(uint256 i=0; i < registerParams.length; i++) {\r\n            success[i] = _register(msg.sender, registerParams[i].name, registerParams[i].durationInYears);\r\n\r\n            if(success[i] && registerParams[i].primaryName) {\r\n                setPrimaryName(msg.sender, getTokenId(getNamehash(registerParams[i].name)));\r\n            }\r\n        }\r\n        settleRefundErc20(registerParams, success, token);\r\n    }\r\n\r\n    function getTotalCost(Register[] memory registerParams) internal pure returns (uint256) {\r\n        uint256 total = 0;\r\n        for(uint256 i=0; i < registerParams.length; i++) {\r\n            total = total + registerParams[i].cost;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function verifyAllSignatures(Register[] memory registerParams) internal view returns (bool) {\r\n        for(uint256 i=0; i < registerParams.length; i++) {\r\n            require(verifySignature(registerParams[i]) == getDotApeAddress(\"signer\"), \"Not signed by signer\");\r\n            require(registerParams[i].address_ == msg.sender, \"Caller is authorized\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function verifyAllSignaturesErc20(Register[] memory registerParams, address token) internal view returns (bool) {\r\n        for(uint256 i=0; i < registerParams.length; i++) {\r\n            require(verifySignatureErc20(registerParams[i], token) == getDotApeAddress(\"signer\"), \"Not signed by signer\");\r\n            require(registerParams[i].address_ == msg.sender, \"Caller is authorized\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function registerTeam(RegisterTeam[] memory registerParams) public onlyTeam {\r\n        require(isContractActive, \"Contract is not active\");\r\n        for(uint256 i=0; i < registerParams.length; i++) {\r\n            _register(registerParams[i].registrant, registerParams[i].name, registerParams[i].durationInYears);\r\n        }\r\n    }\r\n    \r\n    function _register(address registrant, string memory name, uint256 durationInYears) internal returns (bool) {\r\n        require(verifyName(name), \"Name not supported\");\r\n        bytes32 namehash = getNamehash(name);\r\n        if(!isRegistered(namehash)) {\r\n            //mint\r\n            mint(registrant);\r\n            uint256 tokenId = currentSupply();\r\n            uint256 expiration = block.timestamp + (durationInYears * secondsInYears);\r\n            setRecord(namehash, tokenId, name, expiration);\r\n\r\n            emit Registered(registrant, tokenId, string(abi.encodePacked(name, \".ape\")), expiration);\r\n            return true;\r\n        } else {\r\n            uint256 tokenId = getTokenId(namehash);\r\n            if(isExpired(tokenId)) {\r\n                //change owner\r\n                transferExpired(registrant, tokenId);\r\n                uint256 expiration = block.timestamp + (durationInYears * secondsInYears);\r\n                changeExpiration(tokenId, expiration);\r\n\r\n                emit Registered(registrant, tokenId, string(abi.encodePacked(name, \".ape\")), expiration);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function extend(Extend[] memory extendParams) public payable {\r\n        require(isContractActive, \"Contract is not active\");\r\n        require(verifyAllSignaturesExtend(extendParams), \"Not signed by signer\");\r\n        require(getTotalCostExtend(extendParams) <= msg.value, \"Value sent is not correct\");\r\n\r\n        for(uint256 i; i < extendParams.length; i++) {\r\n            require(getOwner(extendParams[i].tokenId) == msg.sender, \"Caller not owner\");\r\n            _extend(extendParams[i].tokenId, extendParams[i].durationInYears);\r\n        }\r\n    }\r\n\r\n    function getTotalCostExtend(Extend[] memory extendParams) internal pure returns (uint256) {\r\n        uint256 total = 0;\r\n        for(uint256 i=0; i < extendParams.length; i++) {\r\n            total = total + extendParams[i].cost;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function verifyAllSignaturesExtend(Extend[] memory extendParams) internal view returns (bool) {\r\n        for(uint256 i=0; i < extendParams.length; i++) {\r\n            require(verifySignatureExtend(extendParams[i]) == getDotApeAddress(\"signer\"), \"Not signed by signer\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function extendTeam(Extend[] memory extendParams) public onlyTeam {\r\n        require(isContractActive, \"Contract is not active\");\r\n        for(uint256 i; i < extendParams.length; i++) {\r\n            _extend(extendParams[i].tokenId, extendParams[i].durationInYears);\r\n        }\r\n    }\r\n\r\n    function _extend(uint256 tokenId, uint256 durationInYears) internal {\r\n        require(tokenId <= currentSupply() && tokenId != 0, \"TokenId not registered\");\r\n        require(!isExpired(tokenId), \"TokenId is expired\");\r\n\r\n        uint256 oldExpiration = getExpiration(tokenId);\r\n        uint256 newExpiration = getExpiration(tokenId) + (durationInYears * secondsInYears);\r\n        changeExpiration(tokenId, newExpiration);\r\n\r\n        emit Extended(getOwner(tokenId), tokenId, string(abi.encodePacked(getName(tokenId), \".ape\")), oldExpiration, newExpiration);\r\n    }\r\n\r\n    function setPrimary(uint256 tokenId) public {\r\n        require(getOwner(tokenId) == msg.sender, \"Caller is not the owner\");\r\n        setPrimaryName(msg.sender, tokenId);\r\n    }\r\n\r\n    function setPrimaryTeam(PrimaryName[] memory primaryNames) public onlyTeam {\r\n        for(uint256 i=0; i<primaryNames.length; i++) {\r\n            setPrimaryName(primaryNames[i].address_, primaryNames[i].tokenId);\r\n        }\r\n    }\r\n\r\n    function setTxtRecords(uint256 tokenId, TxtRecord[] memory txtRecords) public {\r\n        require(isContractActive, \"Contract is not active\");\r\n        require(getOwner(tokenId) == msg.sender, \"Caller is not the owner\");\r\n\r\n        for(uint256 i=0; i<txtRecords.length; i++) {\r\n            setTxtRecord(tokenId, txtRecords[i].label, txtRecords[i].record);\r\n        }\r\n    }\r\n\r\n    function verifyName(string memory input) public pure returns (bool) {\r\n        bytes memory stringBytes = bytes(input);\r\n        \r\n        if (stringBytes.length < 3) {\r\n            return false; // String is less than 3 characters\r\n        }\r\n\r\n        for (uint i = 0; i < stringBytes.length; i++) {\r\n            if (stringBytes[i] == \".\" || stringBytes[i] == \" \") {\r\n                return false; // String contains a period or space\r\n            }\r\n\r\n            if (uint8(stringBytes[i]) >= 65 && uint8(stringBytes[i]) <= 90) {\r\n                return false; // String contains uppercase letters\r\n            }\r\n        }\r\n        \r\n        return true; // String is valid and lowercase\r\n    }\r\n\r\n    function isRegistered(bytes32 namehash) public view returns (bool) {\r\n        return getTokenId(namehash) != 0;\r\n    }\r\n\r\n    function isExpired(uint256 tokenId) public view returns (bool) {\r\n        return getExpiration(tokenId) < block.timestamp && getOwner(tokenId) == getDotApeAddress(\"expiredVault\");\r\n    }\r\n\r\n    function isAvailable(string memory name) public view returns (bool) {\r\n        bytes32 namehash = getNamehash(name);\r\n        if(isRegistered(namehash)) {\r\n            uint256 tokenId = getTokenId(namehash);\r\n            if(isExpired(tokenId)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getTimestamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function settleRefund(Register[] memory registerParams, bool[] memory success) internal {\r\n        for(uint256 i; i < registerParams.length; i++) {\r\n            if(!success[i]) {\r\n                payable(msg.sender).transfer(registerParams[i].cost);\r\n            }\r\n        }\r\n    }\r\n\r\n    function settleRefundErc20(Register[] memory registerParams, bool[] memory success, address erc20) internal {\r\n        for(uint256 i; i < registerParams.length; i++) {\r\n            if(!success[i]) {\r\n                sendErc20(erc20, msg.sender, registerParams[i].cost);\r\n            }\r\n        }\r\n    }\r\n\r\n    function receiveErc20(address erc20, address spender, uint256 amount) internal {\r\n        require(amount <= IERC20(erc20).allowance(spender, address(this)), \"Value not allowed by caller\");\r\n        TransferHelper.safeTransferFrom(erc20, spender, address(this), amount);\r\n    }\r\n\r\n    function sendErc20(address erc20, address receiver, uint256 amount) internal {\r\n        require(IERC20(erc20).balanceOf(address(this)) >= amount, \"Balance of contract is less than amount\");\r\n        TransferHelper.safeTransfer(erc20, receiver, amount);\r\n    }\r\n\r\n    function withdraw(address to, uint256 amount) public onlyOwner {\r\n        require(amount <= address(this).balance);\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function withdrawErc20(address to, uint256 amount, address token_) public onlyOwner {\r\n        IERC20 erc20 = IERC20(token_);\r\n        require(amount <= erc20.balanceOf(address(this)), \"Amount exceeds balance.\");\r\n        TransferHelper.safeTransfer(token_, to, amount);\r\n    }\r\n\r\n    function flipContractActive() public onlyOwner {\r\n        isContractActive = !isContractActive;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousExpiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiration\",\"type\":\"uint256\"}],\"name\":\"Extended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PrimaryNameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.Extend[]\",\"name\":\"extendParams\",\"type\":\"tuple[]\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.Extend[]\",\"name\":\"extendParams\",\"type\":\"tuple[]\"}],\"name\":\"extendTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"}],\"name\":\"getCostApecoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"}],\"name\":\"getCostUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getDotApeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getNamehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_subdomain\",\"type\":\"string\"}],\"name\":\"getNamehashSubdomain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"primaryName\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.Register[]\",\"name\":\"registerParams\",\"type\":\"tuple[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"primaryName\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.Register[]\",\"name\":\"registerParams\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"}],\"internalType\":\"struct dotApePublicRegistrarV2.RegisterTeam[]\",\"name\":\"registerParams\",\"type\":\"tuple[]\"}],\"name\":\"registerTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addresses_\",\"type\":\"address\"}],\"name\":\"setAddressesImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setPrimary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct dotApePublicRegistrarV2.PrimaryName[]\",\"name\":\"primaryNames\",\"type\":\"tuple[]\"}],\"name\":\"setPrimaryTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"record\",\"type\":\"string\"}],\"internalType\":\"struct dotApePublicRegistrarV2.TxtRecord[]\",\"name\":\"txtRecords\",\"type\":\"tuple[]\"}],\"name\":\"setTxtRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"verifyName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"primaryName\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.Register\",\"name\":\"register_\",\"type\":\"tuple\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"primaryName\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.Register\",\"name\":\"register_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"verifySignatureErc20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"}],\"internalType\":\"struct Signatures.Extend\",\"name\":\"extend_\",\"type\":\"tuple\"}],\"name\":\"verifySignatureExtend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "dotApePublicRegistrarV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002da159f7841717a9b8bc96a9e652d1be3d6eeec4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6c2dc01ad87291b6f83930315b5016e20e1c2c7f54f609dc7910d2dcf30124a8"}