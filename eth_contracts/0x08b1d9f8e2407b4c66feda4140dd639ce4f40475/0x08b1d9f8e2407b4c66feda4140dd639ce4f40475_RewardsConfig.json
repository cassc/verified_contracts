{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/rewards/RewardsConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRewardsConfig.sol\\\";\\n\\n\\n// Contract owned by the DAO with parameters modifiable only by the DAO\\ncontract RewardsConfig is IRewardsConfig, Ownable\\n    {\\n    event RewardsEmitterDailyPercentChanged(uint256 newRewardsEmitterDailyPercent);\\n    event EmissionsWeeklyPercentChanged(uint256 newEmissionsWeeklyPercent);\\n    event StakingRewardsPercentChanged(uint256 newStakingRewardsPercent);\\n\\n\\t// The target daily percent of rewards distributed by the stakingRewardsEmitter and liquidityRewardsEmitter (from the SALT balance in each emitter contract).\\n\\t// Rewards Emitters distribute SALT rewards over time to the SharedRewards contracts where the rewards can be claimed by users.\\n\\t// Range: .25% to 2.5% with an adjustment of 0.25%\\n\\tuint256 public rewardsEmitterDailyPercentTimes1000 = 750;  // Defaults to 0.75% with a 1000x multiplier\\n\\n\\t// The weekly percent of SALT emissions that will be distributed from Emissions.sol to the Liquidity and xSALT Holder Reward Emitters.\\n\\t// Range: 0.25% to 1.0% with an adjustment of 0.25%\\n\\tuint256 public emissionsWeeklyPercentTimes1000 = 500;  // Defaults to 0.50% with a 1000x multiplier\\n\\n\\t// By default, xSALT holders get 50% and liquidity providers get 50% of emissions and arbitrage profits sent to SaltRewards (after accounting for SALT/USDC rewards)\\n\\t// Range: 25% to 75% with an adjustment of 5%\\n    uint256 public stakingRewardsPercent = 50;\\n\\n\\n\\tfunction changeRewardsEmitterDailyPercent(bool increase) external onlyOwner\\n        {\\n        if (increase)\\n            {\\n            if (rewardsEmitterDailyPercentTimes1000 < 2500)\\n                rewardsEmitterDailyPercentTimes1000 = rewardsEmitterDailyPercentTimes1000 + 250;\\n            }\\n        else\\n            {\\n            if (rewardsEmitterDailyPercentTimes1000 > 250)\\n                rewardsEmitterDailyPercentTimes1000 = rewardsEmitterDailyPercentTimes1000 - 250;\\n            }\\n\\n\\t\\temit RewardsEmitterDailyPercentChanged(rewardsEmitterDailyPercentTimes1000);\\n        }\\n\\n\\tfunction changeEmissionsWeeklyPercent(bool increase) external onlyOwner\\n        {\\n        if (increase)\\n            {\\n            if (emissionsWeeklyPercentTimes1000 < 1000)\\n                emissionsWeeklyPercentTimes1000 = emissionsWeeklyPercentTimes1000 + 250;\\n            }\\n        else\\n            {\\n            if (emissionsWeeklyPercentTimes1000 > 250)\\n                emissionsWeeklyPercentTimes1000 = emissionsWeeklyPercentTimes1000 - 250;\\n            }\\n\\n\\t\\temit EmissionsWeeklyPercentChanged(emissionsWeeklyPercentTimes1000);\\n        }\\n\\n\\n\\tfunction changeStakingRewardsPercent(bool increase) external onlyOwner\\n        {\\n        if (increase)\\n            {\\n            if (stakingRewardsPercent < 75)\\n                stakingRewardsPercent = stakingRewardsPercent + 5;\\n            }\\n        else\\n            {\\n            if (stakingRewardsPercent > 25)\\n                stakingRewardsPercent = stakingRewardsPercent - 5;\\n            }\\n\\n\\t\\temit StakingRewardsPercentChanged(stakingRewardsPercent);\\n        }\\n    }\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/rewards/interfaces/IRewardsConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL 1.1\\npragma solidity =0.8.22;\\n\\n\\ninterface IRewardsConfig\\n\\t{\\n\\tfunction changeRewardsEmitterDailyPercent(bool increase) external; // onlyOwner\\n\\tfunction changeEmissionsWeeklyPercent(bool increase) external; // onlyOwner\\n\\tfunction changeStakingRewardsPercent(bool increase) external; // onlyOwner\\n\\n\\t// Views\\n    function emissionsWeeklyPercentTimes1000() external view returns (uint256);\\n    function rewardsEmitterDailyPercentTimes1000() external view returns (uint256);\\n    function stakingRewardsPercent() external view returns (uint256);\\n    }\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEmissionsWeeklyPercent\",\"type\":\"uint256\"}],\"name\":\"EmissionsWeeklyPercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardsEmitterDailyPercent\",\"type\":\"uint256\"}],\"name\":\"RewardsEmitterDailyPercentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakingRewardsPercent\",\"type\":\"uint256\"}],\"name\":\"StakingRewardsPercentChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"}],\"name\":\"changeEmissionsWeeklyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"}],\"name\":\"changeRewardsEmitterDailyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"}],\"name\":\"changeStakingRewardsPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionsWeeklyPercentTimes1000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsEmitterDailyPercentTimes1000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardsPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardsConfig", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}