{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only owner can call this\"); _; }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0); \r\n        emit OwnershipTransferred(address(0)); \r\n    }\r\n}\r\n\r\ncontract TeamMusk is IERC20, Auth {\r\n    string private constant _name         = \"Team Musk\";\r\n    string private constant _symbol       = \"MUSK\";\r\n    uint8 private constant _decimals      = 18;\r\n    uint256 private constant _totalSupply = 1_000_000_000_000 * (10**_decimals);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isBlackListed;\r\n    mapping (address => bool) private isWhitelisted;\r\n    mapping (address => bool) private _noFees;\r\n\r\n    address payable private _walletMarketing;\r\n    address payable private _walletPrizePool;\r\n    address payable private _walletBuyBack;\r\n    uint256 private constant _taxSwapMin = _totalSupply / 200000;\r\n    uint256 private constant _taxSwapMax = _totalSupply / 500;\r\n  \r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n    uint256 private _tax = 500;\r\n    uint256 private _epochForBoostedPrizePool;\r\n\r\n    bool public limited = true;\r\n    uint256 public maxHoldingAmount = 10_000_000_001 * (10**_decimals); // 1%\r\n    uint256 public minHoldingAmount = 100_000_000 * (10**_decimals); // 0.01%;\r\n    \r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inTaxSwap = true; \r\n        _; \r\n        _inTaxSwap = false; \r\n    }\r\n\r\n    constructor(address cexWallet, address marketingWallet, address buyBackWallet, address prizePoolWallet, address[] memory _users) Auth(msg.sender) { \r\n\r\n        _balances[address(cexWallet)] = (_totalSupply / 100 ) * 5;\r\n        _balances[address(marketingWallet)] = (_totalSupply / 100 ) * 5;\r\n        _balances[address(this)] = (_totalSupply / 100 ) * 90;\r\n\r\n        emit Transfer(address(0), address(cexWallet), _balances[address(cexWallet)]);\r\n        emit Transfer(address(0), address(marketingWallet), _balances[address(marketingWallet)]);\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        \r\n        setMarketingWallet(marketingWallet);\r\n        setBuyBackWallet(buyBackWallet);\r\n        setPrizePoolWallet(prizePoolWallet);\r\n        setWhitelist(_users, true);\r\n\r\n        _noFees[cexWallet] = true;\r\n        _noFees[_walletMarketing] = true;\r\n        _noFees[buyBackWallet] = true;\r\n        _noFees[prizePoolWallet] = true;\r\n        _noFees[_owner] = true;\r\n        _noFees[address(this)] = true;\r\n  \r\n        _epochForBoostedPrizePool = block.timestamp + 12 * 7 * 24 * 3600; // 12 weeks after deployment\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function tax() external view returns (uint256) { return _tax / 100; }\r\n    function prizePoolBoostStart() external view returns (uint256) { return _epochForBoostedPrizePool; }\r\n    function marketingMultisig() external view returns (address) { return _walletMarketing; }\r\n    function BuyBackMultisig() external view returns (address) { return _walletBuyBack; }\r\n    function PrizePoolMultisig() external view returns (address) { return _walletPrizePool; }\r\n    function getPrizePoolBalance() external view returns (uint256){ return address(_walletPrizePool).balance; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(sender), \"Trading not open\");\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        require(!isBlackListed[sender], \"Sender Blacklisted\");\r\n        require(!isBlackListed[recipient], \"Receiver Blacklisted\");\r\n\r\n        if (!_tradingOpen) { require(_noFees[sender], \"Trading not open\"); }\r\n        if ( !_inTaxSwap && _isLP[recipient] ) { _swapTaxAndLiquify(); }\r\n\r\n        if (limited && sender == _primaryLP) {\r\n            require(balanceOf(recipient) + amount <= maxHoldingAmount && balanceOf(recipient) + amount >= minHoldingAmount, \"Forbid\");\r\n            require(isWhitelisted[sender] || isWhitelisted[recipient], \"Forbid\");\r\n        }\r\n\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] -= amount;\r\n        if ( _taxAmount > 0 ) { \r\n            _balances[address(this)] += _taxAmount; \r\n        }\r\n        _balances[recipient] += _transferAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }    \r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)]>0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isLP[_primaryLP] = true;\r\n        _tradingOpen = true;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_noFees[sender]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function setMarketingWallet(address newMarketingWallet) public onlyOwner {\r\n        _walletMarketing = payable(newMarketingWallet);\r\n    }\r\n\r\n    function setPrizePoolWallet(address newPrizePoolWallet) public onlyOwner {\r\n        _walletPrizePool = payable(newPrizePoolWallet);\r\n    }\r\n\r\n    function setBuyBackWallet(address newBuyBackWallet) public onlyOwner {\r\n        _walletBuyBack = payable(newBuyBackWallet);\r\n    }\r\n \r\n    function setBlackList(address[] memory _users, bool set) public onlyOwner {\r\n        for(uint256 i = 0; i < _users.length; i++){\r\n            isBlackListed[_users[i]] = set;\r\n        }\r\n    }\r\n\r\n    function setWhitelist(address[] memory _users, bool set) internal {\r\n        for(uint256 i = 0; i < _users.length; i++){\r\n            isWhitelisted[_users[i]] = set;\r\n        }\r\n    }\r\n\r\n    function setRule(bool _limited, uint256 _maxHoldingAmount, uint256 _minHoldingAmount) external onlyOwner {\r\n        limited = _limited;\r\n        maxHoldingAmount = _maxHoldingAmount;\r\n        minHoldingAmount = _minHoldingAmount;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n\r\n        uint256 taxAmount;\r\n        if ( _tradingOpen && !_noFees[sender] && !_noFees[recipient] ) { \r\n            if ( _isLP[sender] || _isLP[recipient] ) {\r\n                taxAmount = amount * _tax / 10000;\r\n            }\r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradingOpen ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n\r\n            _swapTaxTokensForEth(_taxTokensAvailable);\r\n            uint256 _contractETHBalance = address(this).balance;\r\n\r\n            if(_contractETHBalance > 0) { \r\n\r\n                if(block.timestamp < _epochForBoostedPrizePool){\r\n                    // first 12 weeks \r\n\r\n                    // 50% marketing\r\n                    // 50% prize pool\r\n            \r\n                    bool success;\r\n                    (success,) = _walletMarketing.call{value: (_contractETHBalance / 2)}(\"\");\r\n                    require(success);\r\n\r\n                    (success,) = _walletPrizePool.call{value: (_contractETHBalance / 2)}(\"\");\r\n                    require(success);\r\n\r\n                } else {\r\n                    // after 12 weeks\r\n\r\n                    // 20% marketing\r\n                    // 5% buy back\r\n                    // 75% prize pool\r\n\r\n                    bool success;\r\n                    (success,) = _walletMarketing.call{value: 20 * (_contractETHBalance / 100)}(\"\");\r\n                    require(success);\r\n                    (success,) = _walletBuyBack.call{value: 5 * (_contractETHBalance / 100)}(\"\");\r\n                    require(success);\r\n                    (success,) = _walletPrizePool.call{value: 75 * (_contractETHBalance / 100)}(\"\");\r\n                    require(success);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cexWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prizePoolWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyBackMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PrizePoolMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolBoostStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"setBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrizePoolWallet\",\"type\":\"address\"}],\"name\":\"setPrizePoolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxHoldingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHoldingAmount\",\"type\":\"uint256\"}],\"name\":\"setRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TeamMusk", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a4a7db99f1461b9c0c54103e75b55d2c62ee01280000000000000000000000000436edb02cc99342b698ea9c61187a5630ea50ce000000000000000000000000cbc70996a3e8be98416018ad7a80cd41c2789b80000000000000000000000000aa9afe4a603304e5ffce6b57e91989e6d58db5ba00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000510000000000000000000000005c93c8a772dd479aba2d308ffa4b5e138c265cc7000000000000000000000000307f32fc94c939c7774e6c825077705cbfacf8be00000000000000000000000073b2f4c03b99ffed7051cbc4e7526ec662b686e0000000000000000000000000e1af7c087f04769a4b609e53a610c7a898027fd600000000000000000000000075562a032691757648dfc710454949d5d722e251000000000000000000000000bf12668e599103fb59acd073485a1b3718c345720000000000000000000000001be9f0db8cdd0d85d9b8390c2f0c9c8bbcc48fe00000000000000000000000009ea3dbbfbab65867dc090ed0f881933cabdcf8ab000000000000000000000000f63617f8f513f3c98223d9ff0cfb76b1b0c936c5000000000000000000000000194ed4a9947194ae9498e3ae41404bb8860d866f0000000000000000000000005ed12e5b7fa9dfe0706e5ee2f576be0a6061e19c0000000000000000000000007e86a6f446a62bd173dc2d9940f7150b11a5bb4d00000000000000000000000046e5cd66919e1e6eea23bd7bb88f7be8157ff9eb000000000000000000000000b90701ef3dd2e31ff51c4c6be8b39200a7ca7d8e000000000000000000000000a57c1b106a38f122c9cc4a60f93d3ec376720cae000000000000000000000000cfd0572a2a1c4d2682413b1eb22b4ea4d2639b0b000000000000000000000000e84f69ca068491e599288b243e74773dcb4fff2100000000000000000000000021bf487c699e77c1353ca7a4b9e981390963095a000000000000000000000000c03c883a3aa0e69b2e17e7b8237ad9f6edb33a80000000000000000000000000e3e95f5f37f7aae83052e97fd0c0a21c92a2dff60000000000000000000000000bb6228c08b330787f6920aa418e8867e980719200000000000000000000000068b87198d7376e5c810b5517f7cb4cf195a0b59c000000000000000000000000a615dac43e848fec02502cc332ae600dce7048ef0000000000000000000000002d3ec700c2df3cdef8069962f9a044671ceab40c000000000000000000000000ef949b48eb26fa00323337e080f31299aa6c1a1d000000000000000000000000c9138aa368ecd3589a67848c3914250a48ca4786000000000000000000000000bb427093027b376eadcf7dc9f7b914860b18491c0000000000000000000000006bda37108095273bc84041a1c3286a8deae667d40000000000000000000000007881d5f65e25d0b09fc710c372242dc9c84b4eb50000000000000000000000003a8ac42fa9fac1166e181a05c83fa7883a2463d800000000000000000000000058fa60b6aa040a9445423df83eac78151d83033200000000000000000000000084c37a64d63142286a4b446cba555ec0273cb038000000000000000000000000b3cd92c970893a4447ccc425ed61b3f2991cd15b000000000000000000000000bf1e633d13792365c47efb73be0f5ae47a90dbbd000000000000000000000000c915502cfdb4bec07b4dbf4048923001bd2364a7000000000000000000000000af74374c59feb556f2be8fd442ec82a8cf604a45000000000000000000000000bcef85aabe66cb2b656aaeb1e8be75d6bc11acd2000000000000000000000000ba1f5ac91b1201e1bcddf70b88771360d29b29790000000000000000000000003523f24ec85de35a49af48cfec19300b94ca3ad30000000000000000000000002558587436b192acfc9a464c67f324a335f4478d0000000000000000000000008e395f3f0086e2d0c4ecc5237ac1653280ad381f00000000000000000000000090ca5f690db5f40a1da943c54f97b829a400fde80000000000000000000000001a9b7d803dd7a10f10db2d6680b85631b8f99ecc000000000000000000000000dfa88b3725f9826d8e9e8b5a6aeadb5ea296eace000000000000000000000000546d9abbbcdb1c12b3f9dcf50651cd1ad740c73f0000000000000000000000008565d23da9e807c732366c6e4afd1246d20bb3840000000000000000000000001c4a571be1aeeb38aa4edbf4f2875bd5da250074000000000000000000000000261875cd52b666ee6aac3e2dd47695984129ea00000000000000000000000000b4a863a69aacc5d7cef8fd9075e97bcf0473ac9a0000000000000000000000000a189efe15b1cfc7ff6a33e6b0fd5cefd28e47f5000000000000000000000000001dbe48c3ae66f0652934ff42823e5b77d8e1a00000000000000000000000009ecc977f3194a1ecb9c1dbe7e7ded2ba62c6661000000000000000000000000020a142e2268b0ee54ce34fc01091fd6909fc1ff30000000000000000000000006894afdeb63e8ffb14b71c1f6641b8d733a4057c000000000000000000000000bee8fd66ecc39bcb585f761e4cc25f90ca5af1b600000000000000000000000024bf26fe64cd3298eaf2b5babdf6e58026ae68710000000000000000000000004e3fd722e13d79b627ef2d5ca36492a96654188700000000000000000000000019646b56da97131fc7186eb7727d722bc9c03d8f000000000000000000000000ccb13a97b8517624d491eeddde3bae43bdf3bfa1000000000000000000000000cdb20c78ed7c6c950fb06d6c500336590caba3090000000000000000000000009beaab0210788171fa2db4e1c8b42f6557e2766b00000000000000000000000035124c2cb1c5502a9fab3fcba67aea8885c020b900000000000000000000000061d0d012ef5c1cca9aaf25c12c3dda445df3b5f3000000000000000000000000aba288f6fb62927badfad45a3d50d6ed4aa6a6ae000000000000000000000000387267d8074cd4b13bafa72659ed5ecd4fd4b030000000000000000000000000a46ad451df2e348d91a31b649b0586dda27b334e000000000000000000000000ca9e64959b5653fff6a9bc0d8401778fcca9403b000000000000000000000000fd3411cca57b4c2c94db34352eb7b0a1c375e26b0000000000000000000000002386aa1d97f088b0b2ef6a5c27dacc334cbf1b1c0000000000000000000000008c5eb7ef8c9f991faf0d31149a9eb9aa5cd0dabd00000000000000000000000033bff4de846214d05ed6d40cd39209542424a1eb0000000000000000000000005ac2d17ed44a18d9da9b021197bae5c37b244e9500000000000000000000000071a22ab4d521fd606baf41349566fb6c17e0668e000000000000000000000000e7575210265f173c466c86f102dc3866418cd8c5000000000000000000000000de8cf9d5c332e0e47381bff61c54dffbfb8caad0000000000000000000000000642054333432fed2637bc61e0d6fe6d6107e338500000000000000000000000091ce1d41ce8540406dd4c9dcc84aae43582320d8000000000000000000000000d3e480c32d2d8f9cb10ead712c711b28e0be4aee00000000000000000000000063ea3803722ada631635c790cf3a625b710ad1170000000000000000000000000fefabcf7ef2b3d911b4753e63ecc7851d080d90000000000000000000000000ee6051db28574921ebec11d9298456837fe47514", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://430a3177f5424d168466a8ff2e59f6be0f83fd4599baff75b25de89edf09aa38"}