{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the QRC Protocol.\r\n */\r\ninterface IQRC {\r\n    /**\r\n     * @dev Emitted when receciving QRC Transaction.\r\n     *\r\n     * Note that `Q_signature` must be checked off-line.\r\n     */\r\n    event EntryQRC(uint256 indexed index, bytes32 indexed Q_address, bytes32 Q_message_hash, bytes Q_signature);\r\n\r\n\r\n    /**\r\n     * @dev invoke an QRC transaction from `Q_address`, with message `Q_message` and signature `Q_signature`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {EntryQRC} event.\r\n     */\r\n    function entryQRC(bytes32 Q_address, bytes memory Q_message, bytes calldata Q_signature) payable external returns (bool);\r\n}\r\n\r\ninterface IQRC20 is IQRC {\r\n    /**\r\n     * @dev calculate QRC minting amount.\r\n     *\r\n     * @param totalSupply current total supply of QRC20, given by calcultion from previous QRC txs.\r\n     * @param Q_address bytes32 Q_address that sends the QRC tx.\r\n     * @param nonce uint256 current nonce for the Q_address. (nonce for QRC tx instead of wrapped tx.)\r\n     * @param value uint256 carried value of the corresponding wrapped tx. \r\n     *\r\n     * @return amount uint256 value indicating the amount of minted token.\r\n     *\r\n     * THIS FUNCTION SHALL BE STATIC.\r\n     */\r\n    function mintQRC(uint256 totalSupply, bytes32 Q_address, uint256 nonce, uint256 value) view external returns (uint256 amount);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title WebQ - Web Q contract with gnosis {safe} account as fund receiver.\r\n * @author 0xTroll\r\n */\r\ncontract WebQ is IQRC20 {\r\n\r\n    // Foundation address is safe account.\r\n    address payable public safe;\r\n\r\n    /**\r\n     * @notice Constructor function sets address of fund receiver contract.\r\n     * @param _safe safe account address.\r\n     */\r\n    constructor(address payable _safe) {\r\n\r\n        require(_safe != address(0));\r\n\r\n        safe = _safe;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Total donation donated to Web-Q.fundation.\r\n     */\r\n    uint256 public totalDonation;\r\n\r\n\r\n    /**\r\n     * @notice Current index for QRC transactions.\r\n     */\r\n    uint256 public qrcIndex;\r\n\r\n\r\n    /**\r\n     * @dev Current mintable specical NFT supply.\r\n     */\r\n    uint256 public mintableSupply;\r\n\r\n\r\n    /**\r\n     * @dev Allowner minter for given mintId.\r\n     */\r\n    mapping (uint256=>address) internal allowedMinterForMintId;\r\n\r\n    /**\r\n     * @dev Total donation donated to Web-Q.fundation.\r\n     */\r\n    event Donation(address donor, uint256 amount, uint256 totalDonation);\r\n\r\n    /**\r\n     * @dev Grant spNFT for donors who make considerable contribution.\r\n     */\r\n    event GrantSpNFT(address donor, uint256 mintId);\r\n\r\n\r\n    /**\r\n     * @dev Calculate how much donation required to mint {deltaAmount} spNFT when current supply is {supplyAmount} .\r\n     */\r\n    function donationForSpNfts(uint256 deltaAmount, uint256 supplyAmount) internal pure returns (uint256 donationRequired){\r\n\r\n        uint256 nextAmount = deltaAmount + supplyAmount;\r\n\r\n        \r\n        donationRequired = ((nextAmount**2 - supplyAmount **2) * 25  + (nextAmount - supplyAmount) * 975) * 1e15;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate how much donation required to mint {deltaAmount} spNFT .\r\n     */\r\n    function donationForSpNfts(uint256 deltaAmount) external view returns (uint256 donationRequired){\r\n        donationRequired = donationForSpNfts(deltaAmount, mintableSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Special NFT badges will be rewarded to initial donors to Web-Q.Foundation,\r\n     * @dev {ownerOf} function is for compatiblity with tokenGated ERC721 SeaDrop contract,\r\n     * @dev in order to remeber donors eligible to receive special NFT badges.\r\n     * @dev Only allowedMinter can mint the corresponding NFT.\r\n     * @dev Note that the snapshot of total donation is used as unique marker.\r\n     * @dev Note that the acutal NFT id is decided by the sequence of SeaDrop mingting. \r\n     */\r\n    function ownerOf(uint256 mintId) external view returns (address allowedMinter){\r\n\r\n        allowedMinter = allowedMinterForMintId[mintId];\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Grant {to} with pending special NFT, which can be accessed by ownerOf function with {uniqueMarker} as minting id.\r\n     */\r\n    function _grantSpecialNFT(address to, uint256 mintId) internal {\r\n\r\n        require( to != address(0) );\r\n        \r\n        allowedMinterForMintId[mintId] = to;\r\n\r\n        emit GrantSpNFT(to, mintId);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Handle donation, trying to grant special NFTs.\r\n     * @dev visit https://web-q.foundation for more information.\r\n     */\r\n    function donate(address donor) payable public returns (uint256 donation, uint256 mintable){\r\n        \r\n        //storage -> memory\r\n        mintable = mintableSupply;\r\n\r\n        uint256 _value = msg.value;\r\n        uint256 _threshold;\r\n\r\n        if (_value > 0) {\r\n            emit Donation(donor, _value, totalDonation);\r\n        }\r\n\r\n        while (mintable < 108) {\r\n            _threshold = donationForSpNfts(1, mintable);\r\n            if (_value >= _threshold){\r\n                _value -= _threshold;\r\n                mintable += 1;\r\n                _grantSpecialNFT(donor, mintable);\r\n            } else{\r\n                break;\r\n            }\r\n        }\r\n        \r\n        totalDonation += msg.value;\r\n\r\n        donation = totalDonation;\r\n\r\n        //memory -> storage \r\n        mintableSupply = mintable;\r\n\r\n        (bool success, ) = safe.call{value: msg.value}(\"\");\r\n        \r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of  QRC entry interface.\r\n     * @dev visit https://web-q.foundation for more information.\r\n     * Note that donation is triggered to handle donation.\r\n     */\r\n\r\n    function entryQRC(bytes32 Q_address, bytes memory Q_message, bytes calldata Q_signature) payable external returns (bool){\r\n\r\n        donate(msg.sender);\r\n        \r\n        emit EntryQRC(qrcIndex, Q_address, keccak256(Q_message), Q_signature);\r\n\r\n        qrcIndex += 1;\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev Implementation of mintQRC, according to QRC-20 protocol.\r\n     * @dev visit https://web-q.foundation for more information.\r\n     */\r\n\r\n    function mintQRC(uint256 totalSupply, bytes32 Q_address, uint256 nonce, uint256 value) pure external override returns (uint256 amount){\r\n        Q_address;\r\n        value;\r\n        nonce;\r\n\r\n        uint256 MaxSupply   = 21000000 ether;\r\n        uint256 MintAmount  = 1000 ether; \r\n        uint256 HalveTimes  = 0;\r\n\r\n        if (totalSupply >= MaxSupply){\r\n            return 0;\r\n        }\r\n        while (totalSupply >= (MaxSupply - MaxSupply/(2**HalveTimes))){\r\n            amount = MintAmount/(2**HalveTimes);\r\n            HalveTimes += 1;\r\n        }\r\n        if (totalSupply + amount >= MaxSupply){\r\n            amount = MaxSupply - totalSupply;\r\n        }\r\n    }\r\n\r\n     /**\r\n     * @dev Fund received will be transfered to {safe} account by default.\r\n     */\r\n\r\n    receive() external payable {\r\n        safe.transfer(msg.value);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_safe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDonation\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"Q_address\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"Q_message_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"Q_signature\",\"type\":\"bytes\"}],\"name\":\"EntryQRC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintId\",\"type\":\"uint256\"}],\"name\":\"GrantSpNFT\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintable\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaAmount\",\"type\":\"uint256\"}],\"name\":\"donationForSpNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"donationRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"Q_address\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"Q_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"Q_signature\",\"type\":\"bytes\"}],\"name\":\"entryQRC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"Q_address\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintQRC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"allowedMinter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qrcIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WebQ", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d0a507a12721a2f5332991a0d280b2149c108ee8", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a000491f73f307af52025c9cf4cb4f9c3a78f273f560f2a4f93cfbf1549905e9"}