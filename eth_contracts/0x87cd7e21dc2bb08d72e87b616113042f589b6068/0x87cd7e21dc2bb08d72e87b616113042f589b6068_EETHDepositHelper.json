{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/helpers/EETHDepositHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\npragma abicoder v2;\\n\\nimport {SafeERC20, IERC20, IERC20Permit} from \\\"@oz/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@ozu/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@ozu/utils/ContextUpgradeable.sol\\\";\\n\\nimport {LibPermit} from \\\"@src/lib/Permit.sol\\\";\\nimport {Error} from \\\"@src/lib/Error.sol\\\";\\nimport {IeETH, IweETH} from \\\"@src/interfaces/EtherFi.sol\\\";\\nimport {ICCDMHost} from \\\"@src/interfaces/ICCDMHost.sol\\\";\\nimport {IVault} from \\\"@src/interfaces/vault/IVault.sol\\\";\\n\\nenum RemoteChainType {\\n    /// @dev 421_614\\n    ArbitrumSepolia,\\n    /// @dev 111_55_420\\n    OptimismSepolia,\\n    /// @dev 2_442\\n    PolygonZkEvmCardona,\\n    /// @dev 919\\n    ModeSepolia,\\n    /// @dev 3_441_006\\n    MantaPacificSepolia,\\n    /// @dev 42_161\\n    ArbitrumMainnet,\\n    /// @dev 10\\n    OptimismMainnet,\\n    /// @dev 1_101\\n    PolygonZkEvmMainnet,\\n    /// @dev 34_443\\n    ModeMainnet,\\n    /// @dev 169\\n    MantaPacificMainnet\\n}\\n\\n/// @title EtherFi eETH Deposit / Redeem Helper\\n/// @author Eddy <hong@manythings.xyz>\\n/// @notice implements deposit and redeem for eETH, This includes auto conversion between eETH <-> weETH\\n/// @dev If you want to use permit, you need to load the permit argument in the function\\ncontract EETHDepositHelper is ContextUpgradeable {\\n    using LibPermit for bytes;\\n    using LibPermit for IERC20Permit;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n\\n    IeETH private _eETH;\\n    IweETH private _weETH;\\n\\n    constructor() initializer {}\\n\\n    function initialize(IeETH eETH_, IweETH weETH_) public initializer {\\n        if (address(eETH_) == address(0)) revert Error.InvalidAddress(\\\"eETH\\\");\\n        if (address(weETH_) == address(0)) revert Error.InvalidAddress(\\\"weETH\\\");\\n\\n        _eETH = eETH_;\\n        _weETH = weETH_;\\n    }\\n\\n    // Modifiers\\n\\n    modifier nonZero(uint256 amount) {\\n        if (amount <= 0) {\\n            revert Error.ZeroAmount();\\n        }\\n        _;\\n    }\\n\\n    // View functions\\n\\n    function eETH() external view returns (IeETH) {\\n        return _eETH;\\n    }\\n\\n    function weETH() external view returns (IweETH) {\\n        return _weETH;\\n    }\\n\\n    function previewDepositTo(\\n        RemoteChainType chainType,\\n        address ccdm,\\n        address receiver,\\n        address refundTo,\\n        uint256 amount,\\n        uint256 baseFee\\n    ) public view nonZero(amount) returns (uint256) {\\n        return ICCDMHost(ccdm).previewDeposit(\\n            _convertChainToDomain(chainType), address(_eETH), receiver, refundTo, _weETH.getWeETHByeETH(amount), baseFee\\n        );\\n    }\\n\\n    function previewDepositWeEthTo(\\n        RemoteChainType chainType,\\n        address ccdm,\\n        address receiver,\\n        address refundTo,\\n        uint256 amount,\\n        uint256 baseFee\\n    ) public view nonZero(amount) returns (uint256) {\\n        return ICCDMHost(ccdm).previewDeposit(\\n            _convertChainToDomain(chainType), address(_weETH), receiver, refundTo, amount, baseFee\\n        );\\n    }\\n\\n    // External functions\\n\\n    //=========== deposit eETH\\n\\n    function deposit(uint256 amount, address vault) external nonZero(amount) {\\n        IERC20(_eETH).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _deposit(_wrap(amount), vault);\\n    }\\n\\n    /// @dev deposit with permit\\n    function deposit(uint256 amount, address vault, bytes calldata permitData) external nonZero(amount) {\\n        {\\n            (uint256 deadline, uint8 v, bytes32 r, bytes32 s) = permitData.decodeData();\\n\\n            IERC20Permit(_eETH).trustlessPermit(_msgSender(), address(this), amount, deadline, v, r, s);\\n            IERC20(_eETH).safeTransferFrom(_msgSender(), address(this), amount);\\n        }\\n\\n        _deposit(_wrap(amount), vault);\\n    }\\n\\n    function depositTo(RemoteChainType remoteChain, address ccdm, uint256 amount) external payable nonZero(amount) {\\n        IERC20(_eETH).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _depositTo(remoteChain, ccdm, _wrap(amount), _msgSender(), _msgSender());\\n    }\\n\\n    /// @dev deposit with permit\\n    function depositTo(RemoteChainType remoteChain, address ccdm, uint256 amount, bytes calldata permitData)\\n        external\\n        payable\\n        nonZero(amount)\\n    {\\n        {\\n            (uint256 deadline, uint8 v, bytes32 r, bytes32 s) = permitData.decodeData();\\n\\n            IERC20Permit(_eETH).trustlessPermit(_msgSender(), address(this), amount, deadline, v, r, s);\\n            IERC20(_eETH).safeTransferFrom(_msgSender(), address(this), amount);\\n        }\\n\\n        _depositTo(remoteChain, ccdm, _wrap(amount), _msgSender(), _msgSender());\\n    }\\n\\n    function depositTo(RemoteChainType remoteChain, address ccdm, uint256 amount, address receiver, address refundTo)\\n        external\\n        payable\\n        nonZero(amount)\\n    {\\n        IERC20(_eETH).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _depositTo(remoteChain, ccdm, _wrap(amount), receiver, refundTo);\\n    }\\n\\n    /// @dev deposit with permit\\n    function depositTo(\\n        RemoteChainType remoteChain,\\n        address ccdm,\\n        uint256 amount,\\n        address receiver,\\n        address refundTo,\\n        bytes calldata permitData\\n    ) external payable nonZero(amount) {\\n        {\\n            (uint256 deadline, uint8 v, bytes32 r, bytes32 s) = permitData.decodeData();\\n\\n            IERC20Permit(_eETH).trustlessPermit(_msgSender(), address(this), amount, deadline, v, r, s);\\n            IERC20(_eETH).safeTransferFrom(_msgSender(), address(this), amount);\\n        }\\n\\n        _depositTo(remoteChain, ccdm, _wrap(amount), receiver, refundTo);\\n    }\\n\\n    //=========== deposit weETH\\n\\n    function depositWeEth(uint256 amount, address vault) external nonZero(amount) {\\n        IERC20(_weETH).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _deposit(amount, vault);\\n    }\\n\\n    /// @dev deposit with permit\\n    function depositWeEth(uint256 amount, address vault, bytes calldata permitData) external nonZero(amount) {\\n        {\\n            (uint256 deadline, uint8 v, bytes32 r, bytes32 s) = permitData.decodeData();\\n\\n            IERC20Permit(_weETH).trustlessPermit(_msgSender(), address(this), amount, deadline, v, r, s);\\n            IERC20(_weETH).safeTransferFrom(_msgSender(), address(this), amount);\\n        }\\n\\n        _deposit(amount, vault);\\n    }\\n\\n    function depositWeEthTo(RemoteChainType remoteChain, address ccdm, uint256 amount)\\n        external\\n        payable\\n        nonZero(amount)\\n    {\\n        IERC20(_weETH).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _depositTo(remoteChain, ccdm, amount, _msgSender(), _msgSender());\\n    }\\n\\n    function depositWeEthTo(\\n        RemoteChainType remoteChain,\\n        address ccdm,\\n        uint256 amount,\\n        address receiver,\\n        address refundTo\\n    ) external payable nonZero(amount) {\\n        IERC20(_weETH).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _depositTo(remoteChain, ccdm, amount, receiver, refundTo);\\n    }\\n\\n    function depositWeEthTo(RemoteChainType remoteChain, address ccdm, uint256 amount, bytes calldata permitData)\\n        external\\n        payable\\n        nonZero(amount)\\n    {\\n        {\\n            (uint256 deadline, uint8 v, bytes32 r, bytes32 s) = permitData.decodeData();\\n\\n            IERC20Permit(_weETH).trustlessPermit(_msgSender(), address(this), amount, deadline, v, r, s);\\n            IERC20(_weETH).safeTransferFrom(_msgSender(), address(this), amount);\\n        }\\n\\n        _depositTo(remoteChain, ccdm, amount, _msgSender(), _msgSender());\\n    }\\n\\n    function depositWeEthTo(\\n        RemoteChainType remoteChain,\\n        address ccdm,\\n        uint256 amount,\\n        address receiver,\\n        address refundTo,\\n        bytes calldata permitData\\n    ) external payable nonZero(amount) {\\n        {\\n            (uint256 deadline, uint8 v, bytes32 r, bytes32 s) = permitData.decodeData();\\n\\n            IERC20Permit(_weETH).trustlessPermit(_msgSender(), address(this), amount, deadline, v, r, s);\\n            IERC20(_weETH).safeTransferFrom(_msgSender(), address(this), amount);\\n        }\\n\\n        _depositTo(remoteChain, ccdm, amount, receiver, refundTo);\\n    }\\n\\n    //=========== redeem\\n\\n    function redeem(uint256 amount, address vault) external nonZero(amount) {\\n        IERC20(vault).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _redeem(amount, vault);\\n    }\\n\\n    /// @dev redeem with permit\\n    function redeem(uint256 amount, address vault, bytes calldata permitData) external nonZero(amount) {\\n        (uint256 deadline, uint8 v, bytes32 r, bytes32 s) = permitData.decodeData();\\n\\n        IERC20Permit(vault).trustlessPermit(_msgSender(), address(this), amount, deadline, v, r, s);\\n        IERC20(vault).safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        _redeem(amount, vault);\\n    }\\n\\n    // Internal functions\\n\\n    function _wrap(uint256 amount) internal returns (uint256) {\\n        IERC20(_eETH).forceApprove(address(_weETH), amount);\\n        uint256 weETHAmount = _weETH.wrap(amount);\\n\\n        return weETHAmount;\\n    }\\n\\n    function _convertChainToDomain(RemoteChainType remoteChain) internal pure returns (uint32) {\\n        if (remoteChain == RemoteChainType.ArbitrumMainnet) return 42_161;\\n        if (remoteChain == RemoteChainType.OptimismMainnet) return 10;\\n        if (remoteChain == RemoteChainType.PolygonZkEvmMainnet) return 1_101;\\n        if (remoteChain == RemoteChainType.ModeMainnet) return 34_443;\\n        if (remoteChain == RemoteChainType.MantaPacificMainnet) return 169;\\n\\n        if (remoteChain == RemoteChainType.ArbitrumSepolia) return 421_614;\\n        if (remoteChain == RemoteChainType.OptimismSepolia) return 111_55_420;\\n        if (remoteChain == RemoteChainType.PolygonZkEvmCardona) return 2_442;\\n        if (remoteChain == RemoteChainType.ModeSepolia) return 919;\\n        if (remoteChain == RemoteChainType.MantaPacificSepolia) return 3_441_006;\\n\\n        revert(\\\"EETHDepositHelper: invalid remote chain\\\");\\n    }\\n\\n    function _deposit(uint256 amount, address vault) internal {\\n        uint256 aboutToSpend = IVault(vault).previewDeposit(amount);\\n        IERC20(_weETH).forceApprove(address(vault), aboutToSpend);\\n        IVault(vault).deposit(aboutToSpend, _msgSender());\\n        if (amount > aboutToSpend) IERC20(_weETH).safeTransfer(_msgSender(), amount - aboutToSpend);\\n    }\\n\\n    function _depositTo(RemoteChainType remoteChain, address ccdm, uint256 amount, address receiver, address refundTo)\\n        internal\\n    {\\n        IERC20(_weETH).forceApprove(ccdm, amount);\\n\\n        uint32 domain = _convertChainToDomain(remoteChain);\\n\\n        // precalculate gas needed\\n        uint256 gas = ICCDMHost(ccdm).previewDeposit(domain, address(_weETH), receiver, refundTo, amount, block.basefee);\\n        if (msg.value < gas) {\\n            unchecked {\\n                revert Error.InsufficientFee(gas - msg.value);\\n            }\\n        }\\n\\n        // call ccdm.deposit\\n        ICCDMHost(ccdm).deposit{value: gas}(domain, address(_weETH), receiver, refundTo, amount);\\n\\n        // refund remaining gas\\n        unchecked {\\n            uint256 refund = msg.value - gas;\\n            if (refund > 0) {\\n                (bool ok, bytes memory ret) = payable(_msgSender()).call{value: refund}(\\\"\\\");\\n                if (!ok) {\\n                    revert Error.EthTransferFailed(refund, ret);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _redeem(uint256 amount, address vault) internal {\\n        IVault(vault).redeem(amount, _msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/lib/Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\npragma abicoder v2;\\n\\nimport {IERC20} from \\\"@oz/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"@oz/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\nlibrary LibPermit {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 domain,address verifyingContract)\\\");\\n\\n    function decodeData(bytes calldata data) internal pure returns (uint256 deadline, uint8 v, bytes32 r, bytes32 s) {\\n        deadline = uint256(bytes32(data[0:32]));\\n        v = uint8(data[32]);\\n        r = bytes32(data[33:65]);\\n        s = bytes32(data[65:97]);\\n\\n        return (deadline, v, r, s);\\n    }\\n\\n    function encodeData(uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal pure returns (bytes memory) {\\n        return abi.encodePacked(deadline, v, r, s);\\n    }\\n\\n    function trustlessPermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        // Try permit() before allowance check to advance nonce if possible\\n        try token.permit(owner, spender, value, deadline, v, r, s) {\\n            return;\\n        } catch {\\n            // Permit potentially got frontran. Continue anyways if allowance is sufficient.\\n            if (IERC20(address(token)).allowance(owner, spender) >= value) {\\n                return;\\n            }\\n        }\\n        revert(\\\"Permit failure\\\");\\n    }\\n\\n    function makeDomainSeparator(string memory name, string memory version, uint256 _domain, address _contract)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(EIP712_DOMAIN_TYPE_HASH, name, version, _domain, _contract));\\n    }\\n\\n    function makeStructHash(address _owner, address _spender, uint256 _value, uint256 _nonce, uint256 _deadline)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(PERMIT_TYPEHASH, _owner, _spender, _value, _nonce, _deadline));\\n    }\\n\\n    function toTypedDataHashByAssembly(bytes32 _domainSeparator, bytes32 structHash)\\n        internal\\n        pure\\n        returns (bytes32 data)\\n    {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), _domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    function toTypedDataHash(bytes32 _domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/Error.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\npragma abicoder v2;\\n\\nlibrary Error {\\n    error Halted();\\n    error Unauthorized();\\n    error AssetNotSupportedForCrossChainDeposit(uint32 domain, address asset);\\n\\n    error InsufficientCap();\\n    error InsufficientFee(uint256 lack);\\n    error InsufficientLoad();\\n    error InsufficientResolvedRedeem(uint256 left);\\n    error InsufficientBalance(uint256 left);\\n\\n    error InvalidDomain(uint32 domain);\\n    error InvalidEpoch(string reason);\\n    error InvalidDepositRequest(string reason);\\n\\n    error InvalidMsgLength(uint256 expected, uint256 actual);\\n    error InvalidMsgType(uint8 msgType);\\n    error InvalidVaultType(uint8 vaultType);\\n    error InvalidAddress(string typ);\\n    error InvalidThreshold(string typ);\\n\\n    error MaxRemoteRouterReached(uint32 max);\\n    error VaultAlreadyDisconnected(address vault);\\n    error VaultAlreadyExists(address vault);\\n    error DeploymentFailed(string reason);\\n    error EthTransferFailed(uint256 amount, bytes ret);\\n    error BridgeNotOperational(uint32 domain);\\n    error ZeroAmount();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/EtherFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\npragma abicoder v2;\\n\\nimport {IERC20} from \\\"@oz/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"@oz/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface ILiquidityPool {\\n    struct PermitInput {\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n}\\n\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\\n\\ninterface IeETH is IERC20, IERC20Permit {\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalShares() external view returns (uint256);\\n\\n    function shares(address _user) external view returns (uint256);\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function initialize(address _liquidityPool) external;\\n    function mintShares(address _user, uint256 _share) external;\\n    function burnShares(address _user, uint256 _share) external;\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n    function increaseAllowance(address _spender, uint256 _increaseAmount) external returns (bool);\\n    function decreaseAllowance(address _spender, uint256 _decreaseAmount) external returns (bool);\\n}\\n\\ninterface IweETH is IRateProvider, IERC20, IERC20Permit {\\n    /// @notice Wraps eEth\\n    /// @param _eETHAmount the amount of eEth to wrap\\n    /// @return returns the amount of weEth the user receives\\n    function wrap(uint256 _eETHAmount) external returns (uint256);\\n\\n    /// @notice Wraps eEth with PermitInput struct so user does not have to call approve on eeth contract\\n    /// @param _eETHAmount the amount of eEth to wrap\\n    /// @return returns the amount of weEth the user receives\\n    function wrapWithPermit(uint256 _eETHAmount, ILiquidityPool.PermitInput calldata _permit)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Unwraps weETH\\n    /// @param _weETHAmount the amount of weETH to unwrap\\n    /// @return returns the amount of eEth the user receives\\n    function unwrap(uint256 _weETHAmount) external returns (uint256);\\n\\n    /// @notice Fetches the amount of weEth respective to the amount of eEth sent in\\n    /// @param _eETHAmount amount sent in\\n    /// @return The total number of shares for the specified amount\\n    function getWeETHByeETH(uint256 _eETHAmount) external view returns (uint256);\\n\\n    /// @notice Fetches the amount of eEth respective to the amount of weEth sent in\\n    /// @param _weETHAmount amount sent in\\n    /// @return The total amount for the number of shares sent in\\n    function getEETHByWeETH(uint256 _weETHAmount) external view returns (uint256);\\n\\n    function increaseAllowance(address _spender, uint256 _increaseAmount) external returns (bool);\\n    function decreaseAllowance(address _spender, uint256 _decreaseAmount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICCDMHost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\npragma abicoder v2;\\n\\ninterface ICCDMHost {\\n    function previewDeposit(\\n        uint32 domain,\\n        address token,\\n        address receiver,\\n        address refundTo,\\n        uint256 amount,\\n        uint256 baseFee\\n    ) external view returns (uint256);\\n\\n    function deposit(uint32 domain, address token, address receiver, address refundTo, uint256 amount)\\n        external\\n        payable;\\n\\n    function deposit(\\n        uint32 domain,\\n        address token,\\n        address receiver,\\n        address refundTo,\\n        uint256 amount,\\n        bytes calldata permitData\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\npragma abicoder v2;\\n\\nimport {IERC20Upgradeable} from \\\"@ozu/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nenum Action {\\n    Deposit,\\n    Redeem,\\n    Mint,\\n    Burn,\\n    Transfer\\n}\\n\\nenum VaultType {\\n    Basic,\\n    Rebased\\n}\\n\\ninterface IVault is IERC20Upgradeable {\\n    function vaultType() external view returns (VaultType);\\n    function isHalted(Action action) external view returns (bool);\\n\\n    function previewDeposit(uint256 amount) external view returns (uint256);\\n    function previewRedeem(uint256 amount) external view returns (uint256);\\n\\n    function deposit(uint256 amount, address receiver) external;\\n    function redeem(uint256 amount, address receiver) external;\\n\\n    function halt(Action action) external;\\n    function resume(Action action) external;\\n}\\n\\ninterface ISudoVault is IVault {\\n    function manualDeposit(uint256 amount, address receiver) external returns (uint256);\\n    function manualRedeem(uint256 amount, address receiver) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@src/=src/\",\r\n      \"@script/=script/\",\r\n      \"@test/=test/\",\r\n      \"@std/=lib/forge-std/src/\",\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"@hpl/=node_modules/@hyperlane-xyz/core/contracts/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@oz/=node_modules/@openzeppelin/contracts/\",\r\n      \"@ozu/=node_modules/@openzeppelin/contracts-upgradeable/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@hyperlane-xyz/=node_modules/@hyperlane-xyz/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lack\",\"type\":\"uint256\"}],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typ\",\"type\":\"string\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"depositWeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"depositWeEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"depositWeEthTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWeEthTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"depositWeEthTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"remoteChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"}],\"name\":\"depositWeEthTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eETH\",\"outputs\":[{\"internalType\":\"contract IeETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IeETH\",\"name\":\"eETH_\",\"type\":\"address\"},{\"internalType\":\"contract IweETH\",\"name\":\"weETH_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"chainType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"previewDepositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RemoteChainType\",\"name\":\"chainType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"ccdm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"previewDepositWeEthTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weETH\",\"outputs\":[{\"internalType\":\"contract IweETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EETHDepositHelper", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}