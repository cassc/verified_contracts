{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/pt-v5-tpda-liquidator/src/TpdaLiquidationRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { IERC20 } from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IFlashSwapCallback } from \\\"pt-v5-liquidator-interfaces/IFlashSwapCallback.sol\\\";\\nimport { TpdaLiquidationPair } from \\\"./TpdaLiquidationPair.sol\\\";\\nimport { TpdaLiquidationPairFactory } from \\\"./TpdaLiquidationPairFactory.sol\\\";\\n\\n/// @notice Thrown when the liquidation pair factory is the zero address\\nerror UndefinedTpdaLiquidationPairFactory();\\n\\n/// @notice Throw when the liquidation pair was not created by the liquidation pair factory\\nerror UnknownTpdaLiquidationPair(address liquidationPair);\\n\\n/// @notice Thrown when a swap deadline has passed\\nerror SwapExpired(uint256 deadline);\\n\\n/// @notice Thrown when the router is used as a receiver in a swap by another EOA or contract\\nerror InvalidSender(address sender);\\n\\n/// @title TpdaLiquidationRouter\\n/// @author G9 Software Inc.\\n/// @notice Serves as the user-facing swapping interface for Liquidation Pairs.\\ncontract TpdaLiquidationRouter is IFlashSwapCallback {\\n    using SafeERC20 for IERC20;\\n\\n    /* ============ Events ============ */\\n\\n    /// @notice Emitted when the router is created\\n    event LiquidationRouterCreated(TpdaLiquidationPairFactory indexed liquidationPairFactory);\\n\\n    /// @notice Emitted after a swap occurs\\n    /// @param liquidationPair The pair that was swapped against\\n    /// @param sender The address that initiated the swap\\n    /// @param receiver The address that received the output tokens\\n    /// @param amountOut The amount of output tokens received\\n    /// @param amountInMax The maximum amount of input tokens that could have been used\\n    /// @param amountIn The amount of input tokens that were actually used\\n    /// @param deadline The deadline for the swap\\n    event SwappedExactAmountOut(\\n        TpdaLiquidationPair indexed liquidationPair,\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 amountIn,\\n        uint256 deadline\\n    );\\n\\n    /* ============ Variables ============ */\\n\\n    /// @notice The TpdaLiquidationPairFactory that this router uses.\\n    /// @dev TpdaLiquidationPairs will be checked to ensure they were created by the factory\\n    TpdaLiquidationPairFactory internal immutable _liquidationPairFactory;\\n\\n    /// @notice Constructs a new LiquidationRouter\\n    /// @param liquidationPairFactory_ The factory that pairs will be verified to have been created by\\n    constructor(TpdaLiquidationPairFactory liquidationPairFactory_) {\\n        if (address(liquidationPairFactory_) == address(0)) {\\n            revert UndefinedTpdaLiquidationPairFactory();\\n        }\\n        _liquidationPairFactory = liquidationPairFactory_;\\n\\n        emit LiquidationRouterCreated(liquidationPairFactory_);\\n    }\\n\\n    /* ============ External Methods ============ */\\n\\n    /// @notice Swaps the given amount of output tokens for at most input tokens\\n    /// @param _liquidationPair The pair to swap against\\n    /// @param _receiver The account to receive the output tokens\\n    /// @param _amountOut The exact amount of output tokens expected\\n    /// @param _amountInMax The maximum of input tokens to spend\\n    /// @param _deadline The timestamp that the swap must be completed by\\n    /// @return The actual number of input tokens used\\n    function swapExactAmountOut(\\n        TpdaLiquidationPair _liquidationPair,\\n        address _receiver,\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        uint256 _deadline\\n    ) external onlyTrustedTpdaLiquidationPair(address(_liquidationPair)) returns (uint256) {\\n        if (block.timestamp > _deadline) {\\n            revert SwapExpired(_deadline);\\n        }\\n\\n        uint256 amountIn = _liquidationPair.swapExactAmountOut(\\n            address(this),\\n            _amountOut,\\n            _amountInMax,\\n            abi.encode(msg.sender)\\n        );\\n\\n        IERC20(_liquidationPair.tokenOut()).safeTransfer(_receiver, _amountOut);\\n\\n        emit SwappedExactAmountOut(\\n            _liquidationPair,\\n            msg.sender,\\n            _receiver,\\n            _amountOut,\\n            _amountInMax,\\n            amountIn,\\n            _deadline\\n        );\\n\\n        return amountIn;\\n    }\\n\\n    /// @inheritdoc IFlashSwapCallback\\n    function flashSwapCallback(\\n        address _sender,\\n        uint256 _amountIn,\\n        uint256,\\n        bytes calldata _flashSwapData\\n    ) external override onlyTrustedTpdaLiquidationPair(msg.sender) onlySelf(_sender) {\\n        address _originalSender = abi.decode(_flashSwapData, (address));\\n        IERC20(TpdaLiquidationPair(msg.sender).tokenIn()).safeTransferFrom(\\n            _originalSender,\\n            TpdaLiquidationPair(msg.sender).target(),\\n            _amountIn\\n        );\\n    }\\n\\n    /// @notice Checks that the given pair was created by the factory\\n    /// @param _liquidationPair The pair address to check\\n    modifier onlyTrustedTpdaLiquidationPair(address _liquidationPair) {\\n        if (!_liquidationPairFactory.deployedPairs(_liquidationPair)) {\\n            revert UnknownTpdaLiquidationPair(_liquidationPair);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks that the given address matches this contract\\n    /// @param _sender The address that called the liquidation pair\\n    modifier onlySelf(address _sender) {\\n        if (_sender != address(this)) {\\n            revert InvalidSender(_sender);\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/pt-v5-tpda-liquidator/lib/pt-v5-liquidator-interfaces/src/interfaces/IFlashSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Interface for the flash swap callback\\ninterface IFlashSwapCallback {\\n\\n    /// @notice Called on the token receiver by the LiquidationPair during a liquidation if the flashSwap data length is non-zero\\n    /// @param _sender The address that triggered the liquidation swap\\n    /// @param _amountOut The amount of tokens that were sent to the receiver\\n    /// @param _amountIn The amount of tokens expected to be sent to the target\\n    /// @param _flashSwapData The flash swap data that was passed into the swap function.\\n    function flashSwapCallback(\\n        address _sender,\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        bytes calldata _flashSwapData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/pt-v5-tpda-liquidator/src/TpdaLiquidationPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { IERC20 } from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport { ILiquidationSource } from \\\"pt-v5-liquidator-interfaces/ILiquidationSource.sol\\\";\\nimport { ILiquidationPair } from \\\"pt-v5-liquidator-interfaces/ILiquidationPair.sol\\\";\\nimport { IFlashSwapCallback } from \\\"pt-v5-liquidator-interfaces/IFlashSwapCallback.sol\\\";\\n\\n/// @notice Thrown when the actual swap amount in exceeds the user defined maximum amount in\\n/// @param amountInMax The user-defined max amount in\\n/// @param amountIn The actual amount in\\nerror SwapExceedsMax(uint256 amountInMax, uint256 amountIn);\\n\\n/// @notice Thrown when the amount out requested is greater than the available balance\\n/// @param requested The amount requested to swap\\n/// @param available The amount available to swap\\nerror InsufficientBalance(uint256 requested, uint256 available);\\n\\n/// @notice Thrown when the receiver of the swap is the zero address\\nerror ReceiverIsZero();\\n\\n/// @notice Thrown when the smoothing parameter is 1 or greater\\nerror SmoothingGteOne();\\n\\n// The minimum auction price. This ensures the auction cannot get bricked to zero.\\nuint192 constant MIN_PRICE = 100;\\n\\n/// @title Target Period Dutch Auction Liquidation Pair\\n/// @author G9 Software Inc.\\n/// @notice This contract sells one token for another at a target time interval. The pricing algorithm is designed\\n/// such that the price of the auction is inversely proportional to the time since the last auction.\\n/// auctionPrice = (targetAuctionPeriod / elapsedTimeSinceLastAuction) * lastAuctionPrice\\ncontract TpdaLiquidationPair is ILiquidationPair {\\n\\n    /// @notice Emitted when a swap is made\\n    /// @param sender The sender of the swap\\n    /// @param receiver The receiver of the swap\\n    /// @param amountOut The amount of tokens out\\n    /// @param amountInMax The maximum amount of tokens in\\n    /// @param amountIn The actual amount of tokens in\\n    /// @param flashSwapData The data used for the flash swap\\n    event SwappedExactAmountOut(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256 amountIn,\\n        bytes flashSwapData\\n    );\\n\\n    /// @notice The liquidation source\\n    ILiquidationSource public immutable source;\\n\\n    /// @notice The target time interval between auctions\\n    uint256 public immutable targetAuctionPeriod;\\n\\n    /// @notice The token that is being purchased\\n    IERC20 internal immutable _tokenIn;\\n\\n    /// @notice The token that is being sold\\n    IERC20 internal immutable _tokenOut;\\n\\n    /// @notice The degree of smoothing to apply to the available token balance\\n    uint256 public immutable smoothingFactor;    \\n\\n    /// @notice The time at which the last auction occurred\\n    uint64 public lastAuctionAt;\\n\\n    /// @notice The price of the last auction\\n    uint192 public lastAuctionPrice;\\n\\n    /// @notice Constructors a new TpdaLiquidationPair\\n    /// @param _source The liquidation source\\n    /// @param __tokenIn The token that is being purchased by the source\\n    /// @param __tokenOut The token that is being sold by the source\\n    /// @param _targetAuctionPeriod The target time interval between auctions\\n    /// @param _targetAuctionPrice The first target price of the auction\\n    /// @param _smoothingFactor The degree of smoothing to apply to the available token balance\\n    constructor (\\n        ILiquidationSource _source,\\n        address __tokenIn,\\n        address __tokenOut,\\n        uint64 _targetAuctionPeriod,\\n        uint192 _targetAuctionPrice,\\n        uint256 _smoothingFactor\\n    ) {\\n        if (_smoothingFactor >= 1e18) {\\n            revert SmoothingGteOne();\\n        }\\n\\n        source = _source;\\n        _tokenIn = IERC20(__tokenIn);\\n        _tokenOut = IERC20(__tokenOut);\\n        targetAuctionPeriod = _targetAuctionPeriod;\\n        smoothingFactor = _smoothingFactor;\\n\\n        lastAuctionAt = uint64(block.timestamp);\\n        lastAuctionPrice = _targetAuctionPrice;\\n    }\\n\\n    /// @inheritdoc ILiquidationPair\\n    function tokenIn() external view returns (address) {\\n        return address(_tokenIn);\\n    }\\n\\n    /// @inheritdoc ILiquidationPair\\n    function tokenOut() external view returns (address) {\\n        return address(_tokenOut);\\n    }\\n\\n    /// @inheritdoc ILiquidationPair\\n    function target() external returns (address) {\\n        return source.targetOf(address(_tokenIn));\\n    }\\n\\n    /// @inheritdoc ILiquidationPair\\n    function maxAmountOut() external returns (uint256) {  \\n        return _availableBalance();\\n    }\\n\\n    /// @inheritdoc ILiquidationPair\\n    function swapExactAmountOut(\\n        address _receiver,\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        bytes calldata _flashSwapData\\n    ) external returns (uint256) {\\n        if (_receiver == address(0)) {\\n            revert ReceiverIsZero();\\n        }\\n\\n        uint192 swapAmountIn = _computePrice();\\n\\n        if (swapAmountIn > _amountInMax) {\\n            revert SwapExceedsMax(_amountInMax, swapAmountIn);\\n        }\\n\\n        lastAuctionAt = uint64(block.timestamp);\\n        lastAuctionPrice = swapAmountIn;\\n\\n        uint256 availableOut = _availableBalance();\\n        if (_amountOut > availableOut) {\\n            revert InsufficientBalance(_amountOut, availableOut);\\n        }\\n\\n        bytes memory transferTokensOutData = source.transferTokensOut(\\n            msg.sender,\\n            _receiver,\\n            address(_tokenOut),\\n            _amountOut\\n        );\\n\\n        if (_flashSwapData.length > 0) {\\n            IFlashSwapCallback(_receiver).flashSwapCallback(\\n                msg.sender,\\n                swapAmountIn,\\n                _amountOut,\\n                _flashSwapData\\n            );\\n        }\\n\\n        source.verifyTokensIn(address(_tokenIn), swapAmountIn, transferTokensOutData);\\n\\n        emit SwappedExactAmountOut(msg.sender, _receiver, _amountOut, _amountInMax, swapAmountIn, _flashSwapData);\\n\\n        return swapAmountIn;\\n    }\\n\\n    /// @inheritdoc ILiquidationPair\\n    function computeExactAmountIn(uint256) external view returns (uint256) {\\n        return _computePrice();\\n    }\\n\\n    /// @notice Computes the time at which the given auction price will occur\\n    /// @param price The price of the auction\\n    /// @return The timestamp at which the given price will occur\\n    function computeTimeForPrice(uint256 price) external view returns (uint256) {\\n        // p2/p1 = t/e => e = (t*p1)/p2\\n        return lastAuctionAt + (targetAuctionPeriod * lastAuctionPrice) / price;\\n    }\\n\\n    /// @notice Computes the available balance of the tokens to be sold\\n    /// @return The available balance of the tokens\\n    function _availableBalance() internal returns (uint256) {\\n        return ((1e18 - smoothingFactor) * source.liquidatableBalanceOf(address(_tokenOut))) / 1e18;\\n    }\\n\\n    /// @notice Computes the current auction price\\n    /// @return The current auction price\\n    function _computePrice() internal view returns (uint192) {\\n        uint256 elapsedTime = block.timestamp - lastAuctionAt;\\n        if (elapsedTime == 0) {\\n            return type(uint192).max;\\n        }\\n        uint192 price = uint192((targetAuctionPeriod * lastAuctionPrice) / elapsedTime);\\n\\n        if (price < MIN_PRICE) {\\n            price = MIN_PRICE;\\n        }\\n\\n        return price;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/pt-v5-tpda-liquidator/src/TpdaLiquidationPairFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { ILiquidationSource, TpdaLiquidationPair } from \\\"./TpdaLiquidationPair.sol\\\";\\n\\n/// @title TpdaLiquidationPairFactory\\n/// @author G9 Software Inc.\\n/// @notice Factory contract for deploying TpdaLiquidationPair contracts.\\ncontract TpdaLiquidationPairFactory {\\n    /* ============ Events ============ */\\n\\n    /// @notice Emitted when a new TpdaLiquidationPair is created\\n    /// @param pair The address of the new pair\\n    /// @param source The liquidation source that the pair is using\\n    /// @param tokenIn The input token for the pair\\n    /// @param tokenOut The output token for the pair\\n    /// @param targetAuctionPeriod The duration of auctions\\n    /// @param targetAuctionPrice The minimum auction size in output tokens\\n    /// @param smoothingFactor The 18 decimal smoothing fraction for the liquid balance\\n    event PairCreated(\\n        TpdaLiquidationPair indexed pair,\\n        ILiquidationSource source,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint64 targetAuctionPeriod,\\n        uint192 targetAuctionPrice,\\n        uint256 smoothingFactor\\n    );\\n\\n    /* ============ Variables ============ */\\n\\n    /// @notice Tracks an array of all pairs created by this factory\\n    TpdaLiquidationPair[] public allPairs;\\n\\n    /* ============ Mappings ============ */\\n\\n    /// @notice Mapping to verify if a TpdaLiquidationPair has been deployed via this factory.\\n    mapping(address pair => bool wasDeployed) public deployedPairs;\\n\\n    /// @notice Creates a new TpdaLiquidationPair and registers it within the factory\\n    /// @param _source The liquidation source that the pair will use\\n    /// @param _tokenIn The input token for the pair\\n    /// @param _tokenOut The output token for the pair\\n    /// @param _targetAuctionPeriod The duration of auctions\\n    /// @param _targetAuctionPrice The initial auction price\\n    /// @param _smoothingFactor The degree of smoothing to apply to the available token balance\\n    /// @return The new liquidation pair\\n    function createPair(\\n        ILiquidationSource _source,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint64 _targetAuctionPeriod,\\n        uint192 _targetAuctionPrice,\\n        uint256 _smoothingFactor\\n    ) external returns (TpdaLiquidationPair) {\\n        TpdaLiquidationPair _liquidationPair = new TpdaLiquidationPair(\\n            _source,\\n            _tokenIn,\\n            _tokenOut,\\n            _targetAuctionPeriod,\\n            _targetAuctionPrice,\\n            _smoothingFactor\\n        );\\n\\n        allPairs.push(_liquidationPair);\\n        deployedPairs[address(_liquidationPair)] = true;\\n\\n        emit PairCreated(\\n            _liquidationPair,\\n            _source,\\n            _tokenIn,\\n            _tokenOut,\\n            _targetAuctionPeriod,\\n            _targetAuctionPrice,\\n            _smoothingFactor\\n        );\\n\\n        return _liquidationPair;\\n    }\\n\\n    /// @notice Total number of TpdaLiquidationPair deployed by this factory.\\n    /// @return Number of TpdaLiquidationPair deployed by this factory.\\n    function totalPairs() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/pt-v5-tpda-liquidator/lib/pt-v5-liquidator-interfaces/src/interfaces/ILiquidationSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILiquidationSource {\\n\\n  /**\\n   * @notice Emitted when a new liquidation pair is set for the given `tokenOut`.\\n   * @param tokenOut The token being liquidated\\n   * @param liquidationPair The new liquidation pair for the token\\n   */\\n  event LiquidationPairSet(address indexed tokenOut, address indexed liquidationPair);\\n\\n  /**\\n   * @notice Get the available amount of tokens that can be swapped.\\n   * @param tokenOut Address of the token to get available balance for\\n   * @return uint256 Available amount of `token`\\n   */\\n  function liquidatableBalanceOf(address tokenOut) external returns (uint256);\\n\\n  /**\\n   * @notice Transfers tokens to the receiver\\n   * @param sender Address that triggered the liquidation\\n   * @param receiver Address of the account that will receive `tokenOut`\\n   * @param tokenOut Address of the token being bought\\n   * @param amountOut Amount of token being bought\\n   */\\n  function transferTokensOut(\\n    address sender,\\n    address receiver,\\n    address tokenOut,\\n    uint256 amountOut\\n  ) external returns (bytes memory);\\n\\n  /**\\n   * @notice Verifies that tokens have been transferred in.\\n   * @param tokenIn Address of the token being sold\\n   * @param amountIn Amount of token being sold\\n   * @param transferTokensOutData Data returned by the corresponding transferTokensOut call\\n   */\\n  function verifyTokensIn(\\n    address tokenIn,\\n    uint256 amountIn,\\n    bytes calldata transferTokensOutData\\n  ) external;\\n\\n  /**\\n   * @notice Get the address that will receive `tokenIn`.\\n   * @param tokenIn Address of the token to get the target address for\\n   * @return address Address of the target\\n   */\\n  function targetOf(address tokenIn) external returns (address);\\n\\n  /**\\n   * @notice Checks if a liquidation pair can be used to liquidate the given tokenOut from this source.\\n   * @param tokenOut The address of the token to liquidate\\n   * @param liquidationPair The address of the liquidation pair that is being checked\\n   * @return bool True if the liquidation pair can be used, false otherwise\\n   */\\n  function isLiquidationPair(address tokenOut, address liquidationPair) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/pt-v5-tpda-liquidator/lib/pt-v5-liquidator-interfaces/src/interfaces/ILiquidationPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ILiquidationSource } from \\\"./ILiquidationSource.sol\\\";\\n\\ninterface ILiquidationPair {\\n\\n  /**\\n   * @notice The liquidation source that the pair is using.\\n   * @dev The source executes the actual token swap, while the pair handles the pricing.\\n   */\\n  function source() external returns (ILiquidationSource);\\n\\n  /**\\n   * @notice Returns the token that is used to pay for auctions.\\n   * @return address of the token coming in\\n   */\\n  function tokenIn() external returns (address);\\n\\n  /**\\n   * @notice Returns the token that is being auctioned.\\n   * @return address of the token coming out\\n   */\\n  function tokenOut() external returns (address);\\n\\n  /**\\n   * @notice Get the address that will receive `tokenIn`.\\n   * @return Address of the target\\n   */\\n  function target() external returns (address);\\n\\n  /**\\n   * @notice Gets the maximum amount of tokens that can be swapped out from the source.\\n   * @return The maximum amount of tokens that can be swapped out.\\n   */\\n  function maxAmountOut() external returns (uint256);\\n\\n  /**\\n   * @notice Swaps the given amount of tokens out and ensures the amount of tokens in doesn't exceed the given maximum.\\n   * @dev The amount of tokens being swapped in must be sent to the target before calling this function.\\n   * @param _receiver The address to send the tokens to.\\n   * @param _amountOut The amount of tokens to receive out.\\n   * @param _amountInMax The maximum amount of tokens to send in.\\n   * @param _flashSwapData If non-zero, the _receiver is called with this data prior to\\n   * @return The amount of tokens sent in.\\n   */\\n  function swapExactAmountOut(\\n    address _receiver,\\n    uint256 _amountOut,\\n    uint256 _amountInMax,\\n    bytes calldata _flashSwapData\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Computes the exact amount of tokens to send in for the given amount of tokens to receive out.\\n   * @param _amountOut The amount of tokens to receive out.\\n   * @return The amount of tokens to send in.\\n   */\\n  function computeExactAmountIn(uint256 _amountOut) external returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"prb-math/=lib/pt-v5-prize-pool/lib/prb-math/src/\",\r\n      \"pt-v5-claimer/=lib/pt-v5-claimer/src/\",\r\n      \"pt-v5-draw-manager/=lib/pt-v5-draw-manager/src/\",\r\n      \"pt-v5-prize-pool/=lib/pt-v5-prize-pool/src/\",\r\n      \"pt-v5-rng-witnet/=lib/pt-v5-rng-witnet/src/\",\r\n      \"pt-v5-tpda-liquidator/=lib/pt-v5-tpda-liquidator/src/\",\r\n      \"pt-v5-liquidator-interfaces/=lib/pt-v5-tpda-liquidator/lib/pt-v5-liquidator-interfaces/src/interfaces/\",\r\n      \"pt-v5-twab-controller/=lib/pt-v5-twab-controller/src/\",\r\n      \"pt-v5-twab-rewards/=lib/pt-v5-twab-rewards/src/\",\r\n      \"pt-v5-vault/=lib/pt-v5-vault/src/\",\r\n      \"pt-v5-staking-vault/=lib/pt-v5-staking-vault/src/\",\r\n      \"pt-v5-vault-boost/=lib/pt-v5-vault-boost/src/\",\r\n      \"yield-daddy/=lib/yield-daddy/src/\",\r\n      \"solmate/=lib/yield-daddy/lib/solmate/src/\",\r\n      \"@openzeppelin/contracts/=lib/pt-v5-draw-manager/lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb/test/=lib/pt-v5-vault-boost/lib/prb-math/lib/prb-test/src/\",\r\n      \"brokentoken/=lib/pt-v5-vault/lib/brokentoken/src/\",\r\n      \"create3-factory/=lib/yield-daddy/lib/create3-factory/\",\r\n      \"erc4626-tests/=lib/pt-v5-vault/lib/erc4626-tests/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"owner-manager-contracts/=lib/pt-v5-vault/lib/owner-manager-contracts/contracts/\",\r\n      \"prb-test/=lib/pt-v5-vault-boost/lib/prb-math/lib/prb-test/src/\",\r\n      \"pt-v5-claimable-interface/=lib/pt-v5-vault/lib/pt-v5-claimable-interface/src/\",\r\n      \"ring-buffer-lib/=lib/pt-v5-twab-controller/lib/ring-buffer-lib/src/\",\r\n      \"solady/=lib/pt-v5-rng-witnet/lib/solady/src/\",\r\n      \"uniform-random-number/=lib/pt-v5-prize-pool/lib/uniform-random-number/src/\",\r\n      \"weird-erc20/=lib/pt-v5-vault/lib/brokentoken/lib/weird-erc20/src/\",\r\n      \"witnet-solidity-bridge/=lib/pt-v5-rng-witnet/lib/witnet-solidity-bridge/contracts/\",\r\n      \"witnet/=lib/pt-v5-rng-witnet/lib/witnet-solidity-bridge/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"peephole\": true,\r\n        \"inliner\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract TpdaLiquidationPairFactory\",\"name\":\"liquidationPairFactory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"SwapExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UndefinedTpdaLiquidationPairFactory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidationPair\",\"type\":\"address\"}],\"name\":\"UnknownTpdaLiquidationPair\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract TpdaLiquidationPairFactory\",\"name\":\"liquidationPairFactory\",\"type\":\"address\"}],\"name\":\"LiquidationRouterCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract TpdaLiquidationPair\",\"name\":\"liquidationPair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"SwappedExactAmountOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_flashSwapData\",\"type\":\"bytes\"}],\"name\":\"flashSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TpdaLiquidationPair\",\"name\":\"_liquidationPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TpdaLiquidationRouter", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a99b3a8503260ab32753c382eac297acd4a43908", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}