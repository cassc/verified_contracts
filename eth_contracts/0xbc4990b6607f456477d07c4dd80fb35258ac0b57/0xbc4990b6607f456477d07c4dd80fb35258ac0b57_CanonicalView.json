{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuraBalVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IAuraBalVault {\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function withdrawalPenalty() external view returns (uint256);\\r\\n\\r\\n    function extraRewards(uint256 index) external view returns (address);\\r\\n\\r\\n    function extraRewardsLength() external view returns (uint256);\\r\\n\\r\\n    function totalUnderlying() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function balanceOfUnderlying(address user) external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/sidechain/view/CanonicalView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\r\\nimport { IAuraBalVault } from \\\"../../interfaces/IAuraBalVault.sol\\\";\\r\\n\\r\\ninterface IL1Coordinator {\\r\\n    function balBalance() external view returns (uint256);\\r\\n\\r\\n    function feeDebtOf(uint16) external view returns (uint256);\\r\\n\\r\\n    function settledFeeDebtOf(uint16) external view returns (uint256);\\r\\n\\r\\n    function distributedFeeDebtOf(uint16) external view returns (uint256);\\r\\n\\r\\n    function bridgeDelegates(uint16) external view returns (address);\\r\\n\\r\\n    function l2Coordinators(uint16) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IProxyOFT {\\r\\n    function getCurrentEpoch() external view returns (uint256);\\r\\n\\r\\n    function circulatingSupply() external view returns (uint256);\\r\\n\\r\\n    function inflowLimit() external view returns (uint256);\\r\\n\\r\\n    function outflow(uint256) external view returns (uint256);\\r\\n\\r\\n    function inflow(uint256) external view returns (uint256);\\r\\n\\r\\n    function paused() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IAuraBalProxyOFT {\\r\\n    function totalClaimable(address) external view returns (uint256);\\r\\n\\r\\n    function internalTotalSupply() external view returns (uint256);\\r\\n\\r\\n    function claimable(address, uint16) external view returns (uint256);\\r\\n}\\r\\n\\r\\nstruct L1CoordSidechainData {\\r\\n    uint16 sidechainId;\\r\\n    uint256 bridgeDelegateBalBalance;\\r\\n    uint256 feeDebtOf;\\r\\n    uint256 settledFeeDebtOf;\\r\\n    uint256 distributedFeeDebtOf;\\r\\n    address bridgeDelegate;\\r\\n    address l2Coordinator;\\r\\n}\\r\\n\\r\\nstruct L1CoordData {\\r\\n    uint256 balBalance;\\r\\n}\\r\\n\\r\\nstruct AuraProxyOftData {\\r\\n    uint256 epoch;\\r\\n    uint256 circulatingSupply;\\r\\n    uint256 inflowLimit;\\r\\n    uint256 outflow;\\r\\n    uint256 inflow;\\r\\n    bool paused;\\r\\n    uint256 auraProxyOFTAuraBalance;\\r\\n}\\r\\n\\r\\nstruct AuraBalProxyOftData {\\r\\n    uint256 epoch;\\r\\n    uint256 circulatingSupply;\\r\\n    uint256 inflowLimit;\\r\\n    uint256 outflow;\\r\\n    uint256 inflow;\\r\\n    bool paused;\\r\\n    uint256 totalClaimableAuraBal;\\r\\n    uint256 totalClaimableAura;\\r\\n    uint256 internalTotalSupply;\\r\\n    uint256 auraBalBalance;\\r\\n    uint256 auraBalance;\\r\\n    uint256 auraBalVaultBalance;\\r\\n    uint256 auraBalVaultBalanceOfUnderlying;\\r\\n}\\r\\n\\r\\nstruct AurabalProxySidechainInfo {\\r\\n    uint16 sidechainId;\\r\\n    uint256 claimableAuraBal;\\r\\n    uint256 claimableAura;\\r\\n}\\r\\n\\r\\nstruct CananonicalData {\\r\\n    L1CoordData l1coordinator;\\r\\n    L1CoordSidechainData[] l1CoordinatorSidechainData;\\r\\n    AuraProxyOftData auraProxyOft;\\r\\n    AuraBalProxyOftData aurabalProxyOft;\\r\\n    AurabalProxySidechainInfo[] aurabalProxySidechainData;\\r\\n}\\r\\n\\r\\ncontract CanonicalView {\\r\\n    address public immutable aura;\\r\\n    address public immutable auraProxyOft;\\r\\n    address public immutable auraBalProxyOft;\\r\\n    address public immutable aurabal;\\r\\n    address public immutable aurabalVault;\\r\\n    address public immutable bal;\\r\\n    address public immutable l1Coordinator;\\r\\n\\r\\n    constructor(\\r\\n        address _aura,\\r\\n        address _auraProxyOft,\\r\\n        address _auraBalProxyOft,\\r\\n        address _aurabal,\\r\\n        address _aurabalVault,\\r\\n        address _bal,\\r\\n        address _l1Coordinator\\r\\n    ) {\\r\\n        aura = _aura;\\r\\n        auraProxyOft = _auraProxyOft;\\r\\n        auraBalProxyOft = _auraBalProxyOft;\\r\\n        aurabal = _aurabal;\\r\\n        aurabalVault = _aurabalVault;\\r\\n        bal = _bal;\\r\\n        l1Coordinator = _l1Coordinator;\\r\\n    }\\r\\n\\r\\n    function getL1CoordData() public view returns (L1CoordData memory data) {\\r\\n        data.balBalance = IERC20(bal).balanceOf(l1Coordinator);\\r\\n    }\\r\\n\\r\\n    function getL1CoordSidechainData(uint16 sidechainId) public view returns (L1CoordSidechainData memory data) {\\r\\n        data.sidechainId = sidechainId;\\r\\n        data.feeDebtOf = IL1Coordinator(l1Coordinator).feeDebtOf(sidechainId);\\r\\n        data.settledFeeDebtOf = IL1Coordinator(l1Coordinator).settledFeeDebtOf(sidechainId);\\r\\n        data.distributedFeeDebtOf = IL1Coordinator(l1Coordinator).distributedFeeDebtOf(sidechainId);\\r\\n        data.bridgeDelegate = IL1Coordinator(l1Coordinator).bridgeDelegates(sidechainId);\\r\\n        data.l2Coordinator = IL1Coordinator(l1Coordinator).l2Coordinators(sidechainId);\\r\\n        data.bridgeDelegateBalBalance = IERC20(bal).balanceOf(data.bridgeDelegate);\\r\\n    }\\r\\n\\r\\n    function getAuraProxyOftData() public view returns (AuraProxyOftData memory data) {\\r\\n        IProxyOFT proxyOft = IProxyOFT(auraProxyOft);\\r\\n        data.epoch = proxyOft.getCurrentEpoch();\\r\\n        data.circulatingSupply = proxyOft.circulatingSupply();\\r\\n        data.inflowLimit = proxyOft.inflowLimit();\\r\\n        data.outflow = proxyOft.outflow(data.epoch);\\r\\n        data.inflow = proxyOft.inflow(data.epoch);\\r\\n        data.paused = proxyOft.paused();\\r\\n        data.auraProxyOFTAuraBalance = IERC20(aura).balanceOf(auraProxyOft);\\r\\n    }\\r\\n\\r\\n    function getAuraBalProxyOftData() public view returns (AuraBalProxyOftData memory data) {\\r\\n        IProxyOFT proxyOft = IProxyOFT(auraBalProxyOft);\\r\\n        data.epoch = proxyOft.getCurrentEpoch();\\r\\n        data.circulatingSupply = proxyOft.circulatingSupply();\\r\\n        data.inflowLimit = proxyOft.inflowLimit();\\r\\n        data.outflow = proxyOft.outflow(data.epoch);\\r\\n        data.inflow = proxyOft.inflow(data.epoch);\\r\\n        data.paused = proxyOft.paused();\\r\\n\\r\\n        IAuraBalProxyOFT _auraBalProxyOft = IAuraBalProxyOFT(auraBalProxyOft);\\r\\n        data.totalClaimableAuraBal = _auraBalProxyOft.totalClaimable(aurabal);\\r\\n        data.totalClaimableAura = _auraBalProxyOft.totalClaimable(aura);\\r\\n        data.internalTotalSupply = _auraBalProxyOft.internalTotalSupply();\\r\\n\\r\\n        data.auraBalBalance = IERC20(aurabal).balanceOf(auraBalProxyOft);\\r\\n        data.auraBalance = IERC20(aura).balanceOf(auraBalProxyOft);\\r\\n        data.auraBalVaultBalance = IERC20(aurabalVault).balanceOf(auraBalProxyOft);\\r\\n        data.auraBalVaultBalanceOfUnderlying = IAuraBalVault(aurabalVault).balanceOfUnderlying(auraBalProxyOft);\\r\\n    }\\r\\n\\r\\n    function getAuraBalProxySidechainData(uint16 sidechainId)\\r\\n        public\\r\\n        view\\r\\n        returns (AurabalProxySidechainInfo memory data)\\r\\n    {\\r\\n        data.sidechainId = sidechainId;\\r\\n        IAuraBalProxyOFT _auraBalProxyOft = IAuraBalProxyOFT(auraBalProxyOft);\\r\\n        data.claimableAuraBal = _auraBalProxyOft.claimable(aurabal, sidechainId);\\r\\n        data.claimableAura = _auraBalProxyOft.claimable(aura, sidechainId);\\r\\n    }\\r\\n\\r\\n    function getCanonicalData(uint16[] memory sidechainIds) public view returns (CananonicalData memory data) {\\r\\n        data.l1coordinator = getL1CoordData();\\r\\n        data.auraProxyOft = getAuraProxyOftData();\\r\\n        data.aurabalProxyOft = getAuraBalProxyOftData();\\r\\n\\r\\n        data.l1CoordinatorSidechainData = new L1CoordSidechainData[](sidechainIds.length);\\r\\n        data.aurabalProxySidechainData = new AurabalProxySidechainInfo[](sidechainIds.length);\\r\\n\\r\\n        for (uint256 i = 0; i < sidechainIds.length; i++) {\\r\\n            data.l1CoordinatorSidechainData[i] = getL1CoordSidechainData(sidechainIds[i]);\\r\\n            data.aurabalProxySidechainData[i] = getAuraBalProxySidechainData(sidechainIds[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aura\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auraProxyOft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auraBalProxyOft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aurabal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aurabalVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Coordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aura\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auraBalProxyOft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auraProxyOft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aurabal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aurabalVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuraBalProxyOftData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulatingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outflow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflow\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAuraBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAura\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalVaultBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalVaultBalanceOfUnderlying\",\"type\":\"uint256\"}],\"internalType\":\"struct AuraBalProxyOftData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sidechainId\",\"type\":\"uint16\"}],\"name\":\"getAuraBalProxySidechainData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"sidechainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"claimableAuraBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAura\",\"type\":\"uint256\"}],\"internalType\":\"struct AurabalProxySidechainInfo\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuraProxyOftData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulatingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outflow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflow\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auraProxyOFTAuraBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct AuraProxyOftData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"sidechainIds\",\"type\":\"uint16[]\"}],\"name\":\"getCanonicalData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct L1CoordData\",\"name\":\"l1coordinator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"sidechainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"bridgeDelegateBalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDebtOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settledFeeDebtOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedFeeDebtOf\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgeDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Coordinator\",\"type\":\"address\"}],\"internalType\":\"struct L1CoordSidechainData[]\",\"name\":\"l1CoordinatorSidechainData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulatingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outflow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflow\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auraProxyOFTAuraBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct AuraProxyOftData\",\"name\":\"auraProxyOft\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulatingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outflow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflow\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAuraBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimableAura\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalVaultBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auraBalVaultBalanceOfUnderlying\",\"type\":\"uint256\"}],\"internalType\":\"struct AuraBalProxyOftData\",\"name\":\"aurabalProxyOft\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"sidechainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"claimableAuraBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAura\",\"type\":\"uint256\"}],\"internalType\":\"struct AurabalProxySidechainInfo[]\",\"name\":\"aurabalProxySidechainData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CananonicalData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1CoordData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct L1CoordData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sidechainId\",\"type\":\"uint16\"}],\"name\":\"getL1CoordSidechainData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"sidechainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"bridgeDelegateBalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDebtOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settledFeeDebtOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedFeeDebtOf\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bridgeDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Coordinator\",\"type\":\"address\"}],\"internalType\":\"struct L1CoordSidechainData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Coordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CanonicalView", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000c0c293ce456ff0ed870add98a0828dd4d2903dbf000000000000000000000000b401f0cff9f05d10699c0e2c88a81dd923c1ffff000000000000000000000000df9080b6bfe4630a97a0655c0016e0e9b43a7c68000000000000000000000000616e8bfa43f920657b3497dbf40d6b1a02d4608d000000000000000000000000faa2ed111b4f580fcb85c48e6dc6782dc5fcd7a6000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000aa54f3b282805822419265208e669d12372a3811", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}