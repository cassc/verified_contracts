{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Mintable.sol\\\";\\r\\nimport \\\"./interfaces/IFeeDistributor.sol\\\";\\r\\nimport \\\"./interfaces/IBridge.sol\\\";\\r\\nimport \\\"./management/Constants.sol\\\";\\r\\n\\r\\n/// @title Bridge\\r\\n/// @author Applicature\\r\\n/// @dev This Smart Contract use for transfer coins/erc20 between different blockhains on base ethereum evm\\r\\ncontract Bridge is IBridge, EIP712, Ownable {\\r\\n    using SafeERC20 for IERC20Mintable;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using Address for address payable;\\r\\n\\r\\n    /// @notice Store constant of fee propose time lockup\\r\\n    /// @dev Store value of 1 hour\\r\\n    /// @return Number of percentage 100\\r\\n    uint256 public constant FEE_PROPOSE_TIME_LOCKUP = 1 hours;\\r\\n    uint256 public constant MAX_INITIAL_PERCENTAGE = 1e20;\\r\\n    address public constant NATIVE = address(0);\\r\\n\\r\\n    /// @notice Store hash to withdraw\\r\\n    /// @dev Store computed 256 bit keccak hash\\r\\n    /// @return Computed 256 bit keccak hash\\r\\n    bytes32 public constant CONTAINER_TYPEHASH =\\r\\n        keccak256(\\\"Container(address sender,uint256 chainIdFrom,address token,uint256 amount,uint256 nonce)\\\");\\r\\n\\r\\n    /// @notice Store hash to deposit transaction\\r\\n    /// @dev Store computed 256 bit keccak hash\\r\\n    /// @return Computed 256 bit keccak hash\\r\\n    bytes32 public constant CONTAINER_KYC_TYPEHASH = keccak256(\\\"KycContainer(address sender)\\\");\\r\\n\\r\\n    /// @notice Store hash to withdraw liquidity\\r\\n    /// @dev Store computed 256 bit keccak hash\\r\\n    /// @return Computed 256 bit keccak hash\\r\\n    bytes32 public constant CONTAINER_LIQUIDITY_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"LiquidityContainer(address sender,address token,uint256 deadline,uint256 maxAvailAmount,uint256 nonce)\\\"\\r\\n        );\\r\\n\\r\\n    /// @notice Store bools whether chains are ETH\\r\\n    /// @dev Store bools whether chains are ETH\\r\\n    /// @return Bool if chain id is ETH\\r\\n    mapping(uint256 => bool) public isETHChain;\\r\\n\\r\\n    /// @notice Store token info\\r\\n    /// @dev Store token info with token address key\\r\\n    /// return Token info\\r\\n    mapping(address => TokenInfo) public tokensInfo;\\r\\n\\r\\n    /// @notice Store bools whether chains with tokens are supported\\r\\n    /// @dev Store bools whether chains with tokens are supported\\r\\n    /// @return Bool if token on chain is supported\\r\\n    mapping(uint256 => mapping(address => bool)) public supportedChainsId;\\r\\n\\r\\n    /// @notice Store user liquidity by token\\r\\n    /// @dev Store user liquidity by token\\r\\n    /// @return User liquidity amount\\r\\n    mapping(address => mapping(address => uint256)) public userLiquidity;\\r\\n\\r\\n    /// @notice Store fee recipient address\\r\\n    /// @dev Store fee recipient address that will get fee\\r\\n    /// @return Address of fee recipient\\r\\n    address payable public feeRecipient;\\r\\n\\r\\n    /// @notice Store fee distributor address\\r\\n    /// @dev Store fee distributor address that will distribute fee\\r\\n    /// @return Address of fee distributor\\r\\n    address public feeDistributor;\\r\\n\\r\\n    /// @notice Store address of KYC signer\\r\\n    /// @dev Store address of KYC signer\\r\\n    /// @return KYC signer address\\r\\n    address public kycSigner;\\r\\n\\r\\n    /// @notice Store withdrawer\\r\\n    /// @dev Store address of withdrawer\\r\\n    /// @return Address of withdrawer\\r\\n    address public withdrawer;\\r\\n\\r\\n    /// @notice Store set of registered supported tokens\\r\\n    /// @dev Store set of registered supported tokens\\r\\n    EnumerableSet.AddressSet internal _supportedTokens;\\r\\n\\r\\n    /// @notice Store set of registered signers\\r\\n    /// @dev Store set of registered signers\\r\\n    EnumerableSet.AddressSet internal _signers;\\r\\n\\r\\n    /// @notice Store nonces of recipients\\r\\n    /// @dev Store recipients' nonces to sign deposit transactions\\r\\n    mapping(address => mapping(uint256 => bool)) internal _nonces;\\r\\n\\r\\n    /// @notice Check if sender is withdrawer\\r\\n    /// @dev Check if msg.sender of transaction is a withdrawer\\r\\n    modifier canWithdrawForWithCostRecovery() {\\r\\n        require(_msgSender() == withdrawer, ERROR_ACCESS_DENIED);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initialization\\r\\n    /// @dev Initialize contract, register signers, add supported tokens\\r\\n    /// @param signers_ Address array of signers\\r\\n    /// @param tokenInfos_ Array of tokens info\\r\\n    constructor(\\r\\n        address withdrawer_,\\r\\n        address[] memory signers_,\\r\\n        TokenCreateInfo[] memory tokenInfos_\\r\\n    ) EIP712(\\\"Bridge\\\", \\\"v1\\\") {\\r\\n        _setWithdrawer(withdrawer_);\\r\\n        _addSigners(signers_);\\r\\n        for (uint256 i; i < tokenInfos_.length; i++) {\\r\\n            _addSuportedToken(tokenInfos_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize supported token to chain\\r\\n    /// @dev Initialize supported token to chain\\r\\n    /// @param chainId_ Id of supported chain\\r\\n    /// @param tokenAddress_ Supported token address\\r\\n    /// @param value_ Bool whether support is\\r\\n    function setSupportedChainToToken(\\r\\n        uint256 chainId_,\\r\\n        address tokenAddress_,\\r\\n        bool value_\\r\\n    ) external onlyOwner {\\r\\n        supportedChainsId[chainId_][tokenAddress_] = value_;\\r\\n        emit SetSupportedTokenToChain(tokenAddress_, chainId_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize whether chain is ETH\\r\\n    /// @dev Initialize whether chain is ETH\\r\\n    /// @param chainId_ Chain id\\r\\n    /// @param value_ Bool whether ETH is\\r\\n    function setIsETHChain(uint256 chainId_, bool value_) external onlyOwner {\\r\\n        isETHChain[chainId_] = value_;\\r\\n        emit SetIsETHChain(chainId_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Add signers\\r\\n    /// @dev Add signers to signers set\\r\\n    /// @param signers_ Address array of signers\\r\\n    function addSigners(address[] calldata signers_) external onlyOwner {\\r\\n        _addSigners(signers_);\\r\\n    }\\r\\n\\r\\n    /// @notice Remove signers\\r\\n    /// @dev Remove signers from signers set\\r\\n    /// @param signers_ Address array of signers\\r\\n    function removeSigners(address[] calldata signers_) external onlyOwner {\\r\\n        for (uint256 i; i < signers_.length; i++) {\\r\\n            require(_signers.remove(signers_[i]), ERROR_IS_NOT_EXISTS);\\r\\n        }\\r\\n        require(_signers.length() > 0, ERROR_SIGNERS_CANNOT_BE_EMPTY);\\r\\n    }\\r\\n\\r\\n    /// @notice Set fee recipient\\r\\n    /// @dev Set address of fee recipient\\r\\n    /// @param recipient_ Address of fee recipient\\r\\n    function setFeeRecipient(address payable recipient_) external onlyOwner {\\r\\n        require(recipient_ != address(0), ERROR_INVALID_ADDRESS);\\r\\n        feeRecipient = recipient_;\\r\\n    }\\r\\n\\r\\n    /// @notice Set fee distributor\\r\\n    /// @dev Set address of fee distributor\\r\\n    /// @param distributor_ Address of fee distributor\\r\\n    function setFeeDistributor(address distributor_) external onlyOwner {\\r\\n        feeDistributor = distributor_;\\r\\n    }\\r\\n\\r\\n    /// @notice Set KYC signer\\r\\n    /// @dev Set address of KYC signer\\r\\n    /// @param kycSigner_ Address of KYC signer\\r\\n    function setKycSigner(address kycSigner_) external onlyOwner {\\r\\n        kycSigner = kycSigner_;\\r\\n    }\\r\\n\\r\\n    /// @notice Add supported token\\r\\n    /// @dev Add new token info to supported tokens set\\r\\n    /// @param info_ Token info\\r\\n    function addSupportedToken(TokenCreateInfo calldata info_) external onlyOwner {\\r\\n        _addSuportedToken(info_);\\r\\n    }\\r\\n\\r\\n    /// @notice Propose new fee percentage\\r\\n    /// @dev Propose new fee percentage and time lockup it\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param newFee_ Fee to token\\r\\n    function proposeNewFee(address tokenAddress_, uint256 newFee_) external onlyOwner {\\r\\n        TokenInfo storage info = tokensInfo[tokenAddress_];\\r\\n        require(newFee_ < MAX_INITIAL_PERCENTAGE, ERROR_INCORRECT_FEE);\\r\\n        info.proposeFee = newFee_;\\r\\n        info.proposeTime = block.timestamp + FEE_PROPOSE_TIME_LOCKUP;\\r\\n    }\\r\\n\\r\\n    /// @notice Unlock new fee\\r\\n    /// @dev Set new fee to token\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    function applyPropose(address tokenAddress_) external onlyOwner {\\r\\n        TokenInfo storage info = tokensInfo[tokenAddress_];\\r\\n        require(block.timestamp > info.proposeTime, ERROR_LOCKED_PERIOD);\\r\\n        info.fee = info.proposeFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Remove supported token\\r\\n    /// @dev Remove token info from supported tokens set\\r\\n    /// @param tokenAddress_ Address of token that will be removed\\r\\n    function removeSupportedToken(address tokenAddress_) external onlyOwner {\\r\\n        require(_supportedTokens.remove(tokenAddress_), ERROR_IS_NOT_EXISTS);\\r\\n        emit RemoveSupportedToken(tokenAddress_);\\r\\n    }\\r\\n\\r\\n    /// @notice Add some liquidity amount to token\\r\\n    /// @dev Add some liquidity amount to token\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ Liquidity amount\\r\\n    function addLiquidity(address tokenAddress_, uint256 amount_) external payable override {\\r\\n        uint256 amount = _depositRequire(tokenAddress_, amount_);\\r\\n        if (!_isNative(tokenAddress_)) {\\r\\n            IERC20Mintable(tokenAddress_).safeTransferFrom(_msgSender(), address(this), amount);\\r\\n        }\\r\\n        tokensInfo[tokenAddress_].liquidity += amount;\\r\\n        userLiquidity[tokenAddress_][_msgSender()] += amount;\\r\\n        emit AddLiquidity(_msgSender(), tokenAddress_, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Remove some liquidity amount from token\\r\\n    /// @dev Remove some liquidity amount from token\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ Liquidity amount\\r\\n    /// @param deadline_ Deadline timestamp\\r\\n    /// @param maxAvailAmount_ Maximum available liquidity amount\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdrawLiquidity(\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        uint256 deadline_,\\r\\n        uint256 maxAvailAmount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external override {\\r\\n        require(!_nonces[_msgSender()][nonce_], ERROR_INVALID_NONCE);\\r\\n        require(block.timestamp < deadline_, ERROR_TIME_OUT);\\r\\n        _isValidSigners(\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    CONTAINER_LIQUIDITY_TYPEHASH,\\r\\n                    _msgSender(),\\r\\n                    tokenAddress_,\\r\\n                    deadline_,\\r\\n                    maxAvailAmount_,\\r\\n                    nonce_\\r\\n                )\\r\\n            ),\\r\\n            v_,\\r\\n            r_,\\r\\n            s_\\r\\n        );\\r\\n        _nonces[_msgSender()][nonce_] = true;\\r\\n        {\\r\\n            uint256 liquidityBalance = userLiquidity[tokenAddress_][_msgSender()];\\r\\n            uint256 contractBalance = _isNative(tokenAddress_)\\r\\n                ? address(this).balance\\r\\n                : IERC20Mintable(tokenAddress_).balanceOf(address(this));\\r\\n            uint256 availableAmount = liquidityBalance > contractBalance ? contractBalance : liquidityBalance;\\r\\n            require(amount_ <= availableAmount && amount_ <= maxAvailAmount_ && amount_ != 0, ERROR_WRONG_AMOUNT);\\r\\n        }\\r\\n        tokensInfo[tokenAddress_].liquidity -= amount_;\\r\\n        userLiquidity[tokenAddress_][_msgSender()] -= amount_;\\r\\n        if (_isNative(tokenAddress_)) {\\r\\n            payable(_msgSender()).sendValue(amount_);\\r\\n        } else {\\r\\n            IERC20Mintable(tokenAddress_).safeTransfer(_msgSender(), amount_);\\r\\n        }\\r\\n        emit RemoveLiquidity(_msgSender(), tokenAddress_, amount_);\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit some amount of tokens\\r\\n    /// @dev Transfer amount of tokens and withdraw fee\\r\\n    /// @param chainIdTo_ Chain id to which tokens will be sent\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ The amount of sent tokens\\r\\n    /// @param data_ Data to bytes to emit transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function deposit(\\r\\n        uint256 chainIdTo_,\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        address recipient_,\\r\\n        string memory data_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) external payable override {\\r\\n        require(supportedChainsId[chainIdTo_][tokenAddress_], ERROR_CHAIN_NOT_SUPPORTED);\\r\\n        if (isETHChain[chainIdTo_]) {\\r\\n            require(recipient_ != address(0), ERROR_INVALID_ADDRESS);\\r\\n        } else {\\r\\n            require(bytes(data_).length != 0, ERROR_INCORRECT_DATA);\\r\\n        }\\r\\n        _isValidKYC(tokenAddress_, v_, r_, s_);\\r\\n        uint256 amount = _depositRequire(tokenAddress_, amount_);\\r\\n        uint256 feePercentage = tokensInfo[tokenAddress_].fee;\\r\\n        if (feePercentage > 0) {\\r\\n            uint256 fee = (amount * feePercentage) / MAX_INITIAL_PERCENTAGE;\\r\\n            amount -= fee;\\r\\n            _feeDistribute(tokenAddress_, fee);\\r\\n        }\\r\\n        _transferFrom(tokenAddress_, amount);\\r\\n        emit Deposit(_msgSender(), block.chainid, chainIdTo_, tokenAddress_, amount, recipient_, data_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set withdrawer address\\r\\n    /// @dev Set withdrawer address\\r\\n    /// @param withdrawer_ Withdrawer address\\r\\n    function setWithdrawer(address withdrawer_) external override onlyOwner {\\r\\n        _setWithdrawer(withdrawer_);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw sent tokens amount for recipient\\r\\n    /// @dev Transfer sent tokens amount from other chain to recipient\\r\\n    /// @param reciver_ Address of recipient\\r\\n    /// @param chainIdFrom_ Chain id from which tokens will be sent\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ The amount of sent tokens\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdrawFor(\\r\\n        address reciver_,\\r\\n        uint256 chainIdFrom_,\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external override {\\r\\n        _withdraw(reciver_, chainIdFrom_, tokenAddress_, amount_, false, nonce_, v_, r_, s_);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw sent tokens amount for sender\\r\\n    /// @dev Transfer sent tokens amount from other chain to sender\\r\\n    /// @param chainIdFrom_ Chain id from which tokens will be sent\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ The amount of sent tokens\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdraw(\\r\\n        uint256 chainIdFrom_,\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external override {\\r\\n        _withdraw(_msgSender(), chainIdFrom_, tokenAddress_, amount_, false, nonce_, v_, r_, s_);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw sent coins amount for recipient with cost recovery to sender\\r\\n    /// @dev Transfer sent coins amount from other chain to recipient with cost recovery to sender\\r\\n    /// @param reciver_ Address of recipient\\r\\n    /// @param chainIdFrom_ Chain id from which coins will be sent\\r\\n    /// @param amount_ The amount of sent coins\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdrawForWithCostRecovery(\\r\\n        address reciver_,\\r\\n        uint256 chainIdFrom_,\\r\\n        uint256 amount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external override canWithdrawForWithCostRecovery {\\r\\n        _withdraw(reciver_, chainIdFrom_, NATIVE, amount_, true, nonce_, v_, r_, s_);\\r\\n    }\\r\\n\\r\\n    /// @notice Get supported tokens\\r\\n    /// @dev Get all items from supported tokens set\\r\\n    /// @return list Address array of supported tokens\\r\\n    function getSupportedTokens() external view override returns (address[] memory list) {\\r\\n        uint256 lastIndex = _supportedTokens.length();\\r\\n\\r\\n        list = new address[](lastIndex);\\r\\n\\r\\n        for (uint256 i; i < lastIndex; i++) {\\r\\n            list[i] = _supportedTokens.at(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Get signers\\r\\n    /// @dev Get all items from signers set\\r\\n    /// @return list Address array of signers\\r\\n    function getSignersAddress() external view onlyOwner returns (address[] memory list) {\\r\\n        uint256 lastIndex = _signers.length();\\r\\n        list = new address[](lastIndex);\\r\\n        for (uint256 i; i < lastIndex; i++) {\\r\\n            list[i] = _signers.at(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Define if token is supported\\r\\n    /// @dev Define if token is in set\\r\\n    /// @param tokenAddress_ Address of token that will be checked\\r\\n    /// @return Bool whether token is supported\\r\\n    function isTokenSupported(address tokenAddress_) public view returns (bool) {\\r\\n        return _supportedTokens.contains(tokenAddress_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set withdrawer address\\r\\n    /// @dev Set withdrawer address\\r\\n    /// @param withdrawer_ Withdrawer address\\r\\n    function _setWithdrawer(address withdrawer_) internal {\\r\\n        require(withdrawer_ != address(0), ERROR_INVALID_ADDRESS);\\r\\n        withdrawer = withdrawer_;\\r\\n        emit SetWithdrawer(withdrawer_);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw sent tokens amount for recipient\\r\\n    /// @dev Transfer sent tokens amount from other chain to recipient\\r\\n    /// @param recipient_ Address of recipient\\r\\n    /// @param chainIdFrom_ Chain id from which tokens will be sent\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ The amount of sent tokens\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    function _withdraw(\\r\\n        address recipient_,\\r\\n        uint256 chainIdFrom_,\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        bool isRecovery_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) internal {\\r\\n        uint256 gasBefore = gasleft();\\r\\n        require(isTokenSupported(tokenAddress_), ERROR_TOKEN_NOT_SUPPORTED);\\r\\n        require(!_nonces[recipient_][nonce_], ERROR_INVALID_NONCE);\\r\\n        _isValidSigners(\\r\\n            keccak256(abi.encode(CONTAINER_TYPEHASH, recipient_, chainIdFrom_, tokenAddress_, amount_, nonce_)),\\r\\n            v_,\\r\\n            r_,\\r\\n            s_\\r\\n        );\\r\\n\\r\\n        _nonces[recipient_][nonce_] = true;\\r\\n\\r\\n        uint256 txFee;\\r\\n        if (_isNative(tokenAddress_)) {\\r\\n            txFee = isRecovery_ ? tx.gasprice * (gasBefore - gasleft() + 53350) : 0;\\r\\n            require(amount_ > txFee, ERROR_INSUFFICIENT_AMOUNT);\\r\\n            amount_ -= txFee;\\r\\n            payable(recipient_).sendValue(amount_);\\r\\n            if (txFee > 0) payable(_msgSender()).sendValue(txFee);\\r\\n        } else if (tokensInfo[tokenAddress_].tokenType == TokenType.ERC20) {\\r\\n            IERC20Mintable(tokenAddress_).safeTransfer(recipient_, amount_);\\r\\n        } else {\\r\\n            IERC20Mintable(tokenAddress_).mint(recipient_, amount_);\\r\\n        }\\r\\n        emit Withdraw(recipient_, chainIdFrom_, block.chainid, tokenAddress_, amount_, txFee, nonce_);\\r\\n    }\\r\\n\\r\\n    /// @notice Distribute fee to fee recipient\\r\\n    /// @dev Transfer fee to fee recipient\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    function _feeDistribute(address tokenAddress_, uint256 fee_) internal {\\r\\n        if (_isNative(tokenAddress_)) {\\r\\n            feeRecipient.sendValue(fee_);\\r\\n        } else {\\r\\n            IERC20Mintable(tokenAddress_).safeTransferFrom(_msgSender(), feeRecipient, fee_);\\r\\n        }\\r\\n        if (feeDistributor != address(0)) {\\r\\n            IFeeDistributor(feeDistributor).distributeFee(tokenAddress_, fee_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Send tokens to contract\\r\\n    /// @dev Transfer some token amount to this contract address\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ Amount that should be sent\\r\\n    function _transferFrom(address tokenAddress_, uint256 amount_) internal {\\r\\n        TokenType tokenType = tokensInfo[tokenAddress_].tokenType;\\r\\n        if (_isNative(tokenAddress_)) {\\r\\n            return;\\r\\n        } else if (tokenType == TokenType.ERC20) {\\r\\n            IERC20Mintable(tokenAddress_).safeTransferFrom(_msgSender(), address(this), amount_);\\r\\n        } else if (tokenType == TokenType.ERC20_MINT_BURN_V2) {\\r\\n            IERC20Mintable(tokenAddress_).burnFrom(_msgSender(), amount_);\\r\\n        } else {\\r\\n            IERC20Mintable(tokenAddress_).burn(_msgSender(), amount_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Add signers\\r\\n    /// @dev Add signers to signers set\\r\\n    /// @param signers_ Address array of signers\\r\\n    function _addSigners(address[] memory signers_) internal {\\r\\n        require(signers_.length > 0, ERROR_SIGNERS_CANNOT_BE_EMPTY);\\r\\n        for (uint256 i; i < signers_.length; i++) {\\r\\n            require(signers_[i] != address(0), ERROR_INVALID_ADDRESS);\\r\\n            _signers.add(signers_[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Add supported token\\r\\n    /// @dev Add new token info to supported tokens set\\r\\n    /// @param info_ Token info\\r\\n    function _addSuportedToken(TokenCreateInfo memory info_) internal {\\r\\n        TokenInfo storage info = tokensInfo[info_.token];\\r\\n        bool isNew = _supportedTokens.add(info_.token);\\r\\n        if (isNew) {\\r\\n            require(info_.fee < MAX_INITIAL_PERCENTAGE, ERROR_INCORRECT_FEE);\\r\\n            info.fee = info_.fee;\\r\\n        }\\r\\n        info.needKYC = info_.needKYC;\\r\\n        info.tokenType = info_.tokenType;\\r\\n        emit AddSuportedToken(info_.token, info, !isNew);\\r\\n    }\\r\\n\\r\\n    /// @notice Check if deposit amount is correct\\r\\n    /// @dev Check if deposit amount is correct\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ Amount of tokens\\r\\n    /// @return Token or ETH amount\\r\\n    function _depositRequire(address tokenAddress_, uint256 amount_) internal view returns (uint256) {\\r\\n        require(isTokenSupported(tokenAddress_), ERROR_TOKEN_NOT_SUPPORTED);\\r\\n        require(!(msg.value > 0 && amount_ > 0), ERROR_TWO_AMOUNTS_ENTERED);\\r\\n        uint256 amount = _isNative(tokenAddress_) ? msg.value : amount_;\\r\\n        require(amount > 0, ERROR_AMOUNT_IS_ZERO);\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if KYC is validate\\r\\n    /// @dev Check if recipient is KYC\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function _isValidKYC(\\r\\n        address tokenAddress_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) internal view {\\r\\n        if (tokensInfo[tokenAddress_].needKYC) {\\r\\n            bytes32 structHash = keccak256(abi.encode(CONTAINER_KYC_TYPEHASH, _msgSender()));\\r\\n            bytes32 hash = _hashTypedDataV4(structHash);\\r\\n            address messageSigner = ECDSA.recover(hash, v_, r_, s_);\\r\\n            require(messageSigner == kycSigner, ERROR_KYC_MISSING);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Check if signers is validate\\r\\n    /// @dev Check if signers is validate\\r\\n    /// @param hash_ Bytes hash of structure\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function _isValidSigners(\\r\\n        bytes32 hash_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) internal view {\\r\\n        bytes32 digest = _hashTypedDataV4(hash_);\\r\\n        require(\\r\\n            v_.length == r_.length && r_.length == s_.length && s_.length == _signers.length(),\\r\\n            ERROR_DIFF_ARR_LENGTH\\r\\n        );\\r\\n        for (uint256 i; i < v_.length; i++) {\\r\\n            address messageSigner = ECDSA.recover(digest, v_[i], r_[i], s_[i]);\\r\\n            require(messageSigner == _signers.at(i), ERROR_INVALID_SIGNER);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Check if token is native\\r\\n    /// @dev Check if token address is zero address\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @return Bool whether token is native\\r\\n    function _isNative(address tokenAddress_) internal pure returns (bool) {\\r\\n        return tokenAddress_ == NATIVE;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/// @title IBridge\\r\\n/// @author Applicature\\r\\n/// @notice There is an interface for Bridge Smart Contract that provides transfering\\r\\n/// coins/erc20 between different blockhains on base ethereum evm\\r\\n/// @dev There are provided all events and function prototypes for Bridge SC\\r\\ninterface IBridge {\\r\\n    /// @notice Types' enumeration of token\\r\\n    /// @dev Types' enumeration of token\\r\\n    enum TokenType {\\r\\n        ERC20,\\r\\n        ERC20_MINT_BURN,\\r\\n        ERC20_MINT_BURN_V2\\r\\n    }\\r\\n\\r\\n    /// @notice Structured data type for creating  token info\\r\\n    /// @dev Structured data type for creating  token info\\r\\n    struct TokenCreateInfo {\\r\\n        address token;\\r\\n        bool needKYC;\\r\\n        uint256 fee;\\r\\n        TokenType tokenType;\\r\\n    }\\r\\n\\r\\n    /// @notice Structured data type for variables that store information about token\\r\\n    /// @dev Structured data type for variables that store information about token\\r\\n    struct TokenInfo {\\r\\n        bool needKYC;\\r\\n        uint256 fee;\\r\\n        TokenType tokenType;\\r\\n        uint256 liquidity;\\r\\n        uint256 proposeFee;\\r\\n        uint256 proposeTime;\\r\\n    }\\r\\n\\r\\n    /// @notice Generated when owner sets new address of withdrawer\\r\\n    /// @param withdrawer Address of withdrawer\\r\\n    event SetWithdrawer(address indexed withdrawer);\\r\\n\\r\\n    /// @notice Emit when sender deposits some amount of tokens\\r\\n    /// @dev Emit when sender transfers amount of tokens and withdraw fee\\r\\n    /// @param sender Address of sender\\r\\n    /// @param chainIdFrom Chain id from which tokens will be sent\\r\\n    /// @param chainIdTo Chain id to which tokens will be sent\\r\\n    /// @param token Address of token\\r\\n    /// @param amount The amount of sent tokens\\r\\n    /// @param recipient Address of recipient\\r\\n    /// @param data Data to bytes to emit transaction\\r\\n    event Deposit(\\r\\n        address indexed sender,\\r\\n        uint256 chainIdFrom,\\r\\n        uint256 chainIdTo,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address recipient,\\r\\n        string data\\r\\n    );\\r\\n\\r\\n    /// @notice Emit when recipient withdraws sent tokens amount for recipient\\r\\n    /// @dev Emit when recipient transfers sent tokens amount from other chain to recipient\\r\\n    /// @param sender Address of sender\\r\\n    /// @param chainIdFrom Chain id from which tokens will be sent\\r\\n    /// @param chainIdTo Chain id to which tokens will be sent\\r\\n    /// @param token Address of token\\r\\n    /// @param amount The amount of sent tokens\\r\\n    /// @param txFee Amount of transfered fee to BE address\\r\\n    /// @param nonce Nonce of sender transaction\\r\\n    event Withdraw(\\r\\n        address indexed sender,\\r\\n        uint256 chainIdFrom,\\r\\n        uint256 chainIdTo,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint256 txFee,\\r\\n        uint256 nonce\\r\\n    );\\r\\n\\r\\n    /// @notice Emit when recipient adds some liquidity amount to token\\r\\n    /// @dev Emit when recipient adds some liquidity amount to token\\r\\n    /// @param sender Address of recipient\\r\\n    /// @param token Address of token\\r\\n    /// @param amount Liquidity amount\\r\\n    event AddLiquidity(address indexed sender, address indexed token, uint256 amount);\\r\\n\\r\\n    /// @notice Emit when recipient removes some liquidity amount from token\\r\\n    /// @dev Emit when recipient removes some liquidity amount from token\\r\\n    /// @param sender Address of recipient\\r\\n    /// @param token Address of token\\r\\n    /// @param amount Removed amount\\r\\n    event RemoveLiquidity(address indexed sender, address indexed token, uint256 amount);\\r\\n\\r\\n    /// @notice Emit when owner adds supported token\\r\\n    /// @dev Emit when owner adds new token info to supported tokens set\\r\\n    /// @param token Supported token address\\r\\n    /// @param info Token info\\r\\n    /// @param isUpdate Bool whether it is update info\\r\\n    event AddSuportedToken(address indexed token, TokenInfo info, bool isUpdate);\\r\\n\\r\\n    /// @notice Emit when owner initializes supported token to chain\\r\\n    /// @dev Emit when owner initializes supported token to chain\\r\\n    /// @param token Supported token address\\r\\n    /// @param chainId Id of supported chain\\r\\n    /// @param isSupported Bool whether support is\\r\\n    event SetSupportedTokenToChain(address indexed token, uint256 chainId, bool isSupported);\\r\\n\\r\\n    /// @notice Emit when owner set chain as ETH\\r\\n    /// @dev Emit when owner set chain as ETH\\r\\n    /// @param chainId Chain id\\r\\n    /// @param isETHChain Bool whether chain is ETH\\r\\n    event SetIsETHChain(uint256 chainId, bool isETHChain);\\r\\n\\r\\n    /// @notice Emit when owner removes supported token\\r\\n    /// @dev Emit when owner removes supported token\\r\\n    /// @param token Address of removed token\\r\\n    event RemoveSupportedToken(address indexed token);\\r\\n\\r\\n    /// @notice Emit when recipient withdraw tokens\\r\\n    /// @dev Emit when recipient withdraw tokens\\r\\n    /// @param from The address of recipient\\r\\n    /// @param token Address of token\\r\\n    /// @param amount Amount of tokens\\r\\n    event LogWithdrawToken(address indexed from, address indexed token, uint256 amount);\\r\\n\\r\\n    /// @notice Add some liquidity amount to token\\r\\n    /// @dev Add some liquidity amount to token\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ Liquidity amount\\r\\n    function addLiquidity(address tokenAddress_, uint256 amount_) external payable;\\r\\n\\r\\n    /// @notice Remove some liquidity amount from token\\r\\n    /// @dev Remove some liquidity amount from token\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ Liquidity amount\\r\\n    /// @param deadline_ Deadline timestamp\\r\\n    /// @param maxAvailAmount_ Maximum available liquidity amount\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdrawLiquidity(\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        uint256 deadline_,\\r\\n        uint256 maxAvailAmount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Deposit some amount of tokens\\r\\n    /// @dev Transfer amount of tokens and withdraw fee\\r\\n    /// @param chainIdTo_ Chain id to which tokens will be sent\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ The amount of sent tokens\\r\\n    /// @param data_ Data to bytes to emit transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function deposit(\\r\\n        uint256 chainIdTo_,\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        address recipient_,\\r\\n        string memory data_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Set withdrawer address\\r\\n    /// @dev Set withdrawer address\\r\\n    /// @param withdrawer_ Withdrawer address\\r\\n    function setWithdrawer(address withdrawer_) external;\\r\\n\\r\\n    /// @notice Withdraw sent tokens amount for recipient\\r\\n    /// @dev Transfer sent tokens amount from other chain to recipient\\r\\n    /// @param reciver_ Address of recipient\\r\\n    /// @param chainIdFrom_ Chain id from which tokens will be sent\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ The amount of sent tokens\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdrawFor(\\r\\n        address reciver_,\\r\\n        uint256 chainIdFrom_,\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Withdraw sent coins amount for recipient with cost recovery to sender\\r\\n    /// @dev Transfer sent coins amount from other chain to recipient with cost recovery to sender\\r\\n    /// @param reciver_ Address of recipient\\r\\n    /// @param chainIdFrom_ Chain id from which coins will be sent\\r\\n    /// @param amount_ The amount of sent coins\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdrawForWithCostRecovery(\\r\\n        address reciver_,\\r\\n        uint256 chainIdFrom_,\\r\\n        uint256 amount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Withdraw sent tokens amount for sender\\r\\n    /// @dev Transfer sent tokens amount from other chain to sender\\r\\n    /// @param chainIdFrom_ Chain id from which tokens will be sent\\r\\n    /// @param tokenAddress_ Address of token\\r\\n    /// @param amount_ The amount of sent tokens\\r\\n    /// @param nonce_ Nonce of sender transaction\\r\\n    /// @param v_ Signature parameter\\r\\n    /// @param r_ Signature parameter\\r\\n    /// @param s_ Signature parameter\\r\\n    function withdraw(\\r\\n        uint256 chainIdFrom_,\\r\\n        address tokenAddress_,\\r\\n        uint256 amount_,\\r\\n        uint256 nonce_,\\r\\n        uint8[] calldata v_,\\r\\n        bytes32[] calldata r_,\\r\\n        bytes32[] calldata s_\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Get supported tokens\\r\\n    /// @dev Get all items from supported tokens set\\r\\n    /// @return list Address array of supported tokens\\r\\n    function getSupportedTokens() external view returns (address[] memory list);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard\\r\\n * that allows token holders to mint and destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\ninterface IERC20Mintable is IERC20 {\\r\\n    /**\\r\\n     * @dev Creates `amount` new tokens for `to`.\\r\\n     *\\r\\n     * See {ERC20-_mint}.\\r\\n     */\\r\\n    function mint(address _to, uint256 _value) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n/**\\r\\n * @dev Interface of FeeDistributor.\\r\\n */\\r\\ninterface IFeeDistributor {\\r\\n    /**\\r\\n     * @dev Distributes fee for the token\\r\\n     */\\r\\n    function distributeFee(address token_, uint256 amount_) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/management/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\n//uint256 constant DECIMALS = 10**18;\\r\\nuint256 constant DECIMALS = 18;\\r\\nuint256 constant DECIMALS18 = 1e18;\\r\\n\\r\\nuint256 constant MAX_UINT256 = type(uint256).max;\\r\\nuint256 constant PERCENTAGE_100 = 100 * DECIMALS18;\\r\\nuint256 constant PERCENTAGE_1 = DECIMALS18;\\r\\nuint256 constant MAX_FEE_PERCENTAGE = 99 * DECIMALS18;\\r\\n\\r\\nuint256 constant YEAR_IN_SECONDS = 31556952;\\r\\n\\r\\nstring constant ERROR_ACCESS_DENIED = \\\"0x1\\\";\\r\\nstring constant ERROR_NO_CONTRACT = \\\"0x2\\\";\\r\\nstring constant ERROR_NOT_AVAILABLE = \\\"0x3\\\";\\r\\nstring constant ERROR_KYC_MISSING = \\\"0x4\\\";\\r\\nstring constant ERROR_INVALID_ADDRESS = \\\"0x5\\\";\\r\\nstring constant ERROR_INCORRECT_CALL_METHOD = \\\"0x6\\\";\\r\\nstring constant ERROR_AMOUNT_IS_ZERO = \\\"0x7\\\";\\r\\nstring constant ERROR_HAVENT_ALLOCATION = \\\"0x8\\\";\\r\\nstring constant ERROR_AMOUNT_IS_MORE_TS = \\\"0x9\\\";\\r\\nstring constant ERROR_ERC20_CALL_ERROR = \\\"0xa\\\";\\r\\nstring constant ERROR_DIFF_ARR_LENGTH = \\\"0xb\\\";\\r\\nstring constant ERROR_METHOD_DISABLE = \\\"0xc\\\";\\r\\nstring constant ERROR_SEND_VALUE = \\\"0xd\\\";\\r\\nstring constant ERROR_NOT_ENOUGH_NFT_IDS = \\\"0xe\\\";\\r\\nstring constant ERROR_INCORRECT_FEE = \\\"0xf\\\";\\r\\nstring constant ERROR_WRONG_IMPLEMENT_ADDRESS = \\\"0x10\\\";\\r\\nstring constant ERROR_INVALID_SIGNER = \\\"0x11\\\";\\r\\nstring constant ERROR_NOT_FOUND = \\\"0x12\\\";\\r\\nstring constant ERROR_IS_EXISTS = \\\"0x13\\\";\\r\\nstring constant ERROR_IS_NOT_EXISTS = \\\"0x14\\\";\\r\\nstring constant ERROR_TIME_OUT = \\\"0x15\\\";\\r\\nstring constant ERROR_NFT_NOT_EXISTS = \\\"0x16\\\";\\r\\nstring constant ERROR_MINTING_COMPLETED = \\\"0x17\\\";\\r\\nstring constant ERROR_TOKEN_NOT_SUPPORTED = \\\"0x18\\\";\\r\\nstring constant ERROR_NOT_ENOUGH_NFT_FOR_SALE = \\\"0x19\\\";\\r\\nstring constant ERROR_NOT_ENOUGH_PREVIOUS_NFT = \\\"0x1a\\\";\\r\\nstring constant ERROR_FAIL = \\\"0x1b\\\";\\r\\nstring constant ERROR_MORE_THEN_MAX = \\\"0x1c\\\";\\r\\nstring constant ERROR_VESTING_NOT_START = \\\"0x1d\\\";\\r\\nstring constant ERROR_VESTING_IS_STARTED = \\\"0x1e\\\";\\r\\nstring constant ERROR_IS_SET = \\\"0x1f\\\";\\r\\nstring constant ERROR_ALREADY_CALL_METHOD = \\\"0x20\\\";\\r\\nstring constant ERROR_INCORRECT_DATE = \\\"0x21\\\";\\r\\nstring constant ERROR_IS_NOT_SALE = \\\"0x22\\\";\\r\\nstring constant ERROR_UNPREDICTABLE_MEMBER_ACTION = \\\"0x23\\\";\\r\\nstring constant ERROR_ALREADY_PAID = \\\"0x24\\\";\\r\\nstring constant ERROR_COOLDOWN_IS_NOT_OVER = \\\"0x25\\\";\\r\\nstring constant ERROR_INSUFFICIENT_AMOUNT = \\\"0x26\\\";\\r\\nstring constant ERROR_RESERVES_IS_ZERO = \\\"0x27\\\";\\r\\nstring constant ERROR_TREE_EXISTS = \\\"0x28\\\";\\r\\nstring constant ERROR_TREE_DOESNT_EXIST = \\\"0x29\\\";\\r\\nstring constant ERROR_NOT_DIFFERENT_MEMBERS = \\\"0x2a\\\";\\r\\nstring constant ERROR_NOT_ENOUGH_BALANCE = \\\"0x2b\\\";\\r\\nstring constant ERROR_ALREADY_DISTRIBUTED = \\\"0x2c\\\";\\r\\nstring constant ERROR_INDEX_OUT = \\\"0x2d\\\";\\r\\nstring constant ERROR_NOT_START = \\\"0x2e\\\";\\r\\nstring constant ERROR_ALREADY_CLAIMED = \\\"0x2f\\\";\\r\\nstring constant ERROR_LENGTH_IS_ZERO = \\\"0x30\\\";\\r\\nstring constant ERROR_WRONG_AMOUNT = \\\"0x31\\\";\\r\\nstring constant ERROR_SIGNERS_CANNOT_BE_EMPTY = \\\"0x41\\\";\\r\\nstring constant ERROR_LOCKED_PERIOD = \\\"0x42\\\";\\r\\nstring constant ERROR_INVALID_NONCE = \\\"0x43\\\";\\r\\nstring constant ERROR_CHAIN_NOT_SUPPORTED = \\\"0x44\\\";\\r\\nstring constant ERROR_INCORRECT_DATA = \\\"0x45\\\";\\r\\nstring constant ERROR_TWO_AMOUNTS_ENTERED = \\\"0x46\\\";\\r\\n\\r\\nbytes32 constant KYC_CONTAINER_TYPEHASH = keccak256(\\\"Container(address sender,uint256 deadline)\\\");\\r\\n\\r\\nuint256 constant ROLE_ADMIN = 1;\\r\\nuint256 constant CAN_WITHDRAW_NATIVE = 10;\\r\\n\\r\\n// Managemenet\\r\\nuint256 constant MANAGEMENT_CAN_SET_KYC_WHITELISTED = 3;\\r\\nuint256 constant MANAGEMENT_KYC_SIGNER = 4;\\r\\nuint256 constant MANAGEMENT_WHITELISTED_KYC = 5;\\r\\n\\r\\n// Payment Gateway\\r\\nuint256 constant SHOPS_PAYMENT_PAY_SIGNER = 21;\\r\\nuint256 constant SHOPS_POOL_CAN_WITHDRAW_FOR = 31;\\r\\nuint256 constant SHOPS_MANAGER_BLACK_LIST_PERM = 41;\\r\\nuint256 constant SHOPS_MAGANER_FREEZ_LIST_PERM = 42;\\r\\nuint256 constant SHOPS_MANAGER_CAN_SET_SHOP_ACCESS = 43;\\r\\nuint256 constant SHOPS_MANAGER_CAN_REGISTER_REMOVE_SHOP = 44;\\r\\nuint256 constant SHOPS_MANAGER_CAN_SET_COMMISION = 45;\\r\\n\\r\\n// Public Sale\\r\\nuint256 constant CAN_MINT_TOKENS_TOKEN_PLAN = 100;\\r\\nuint256 constant CAN_BURN_TOKENS_TOKEN_PLAN = 101;\\r\\n\\r\\nuint256 constant CAN_UPDATE_REWARD_REFERRAL_TREE = 120;\\r\\nuint256 constant CAN_CREATE_TREE_REFERRAL_TREE = 121;\\r\\nuint256 constant CAN_UPDATE_CALCULATE_REWARDS_REFERRAL_TREE = 122;\\r\\n\\r\\nuint256 constant CAN_STAKE_FOR_APR_STAKE = 123;\\r\\n\\r\\nuint256 constant CAN_FORWARD_FORWARDER = 124;\\r\\n\\r\\nuint256 constant CAN_DISTRIBUT_BONUS_KRU_DISTRIBUTOR = 140;\\r\\nuint256 constant CAN_CHANGE_BONUS_KRU_BONUS_DISTRIBUTOR = 143;\\r\\n\\r\\nuint256 constant CAN_CHANGE_PURCHASE_INFO = 141;\\r\\nuint256 constant CAN_SET_PLANS_INFO = 142;\\r\\n\\r\\n//KRUExchangeForwarder\\r\\nuint256 constant EXCHANGE_FORWARDER_SIGNER = 151;\\r\\nuint256 constant EXCHANGE_FORWARDER_CAN_SET_ADDRESSES = 152;\\r\\n\\r\\n//KRUDiscountExcange\\r\\nuint256 constant DISCOUNT_EXCHANGE_CAN_SET_VESTING_TYPE = 161;\\r\\nuint256 constant DISCOUNT_EXCHANGE_CAN_SET_SIGNER = 162;\\r\\nuint256 constant DISCOUNT_EXCHANGE_CAN_CLAIM_FOR = 163;\\r\\nuint256 constant DISCOUNT_EXCHANGE_CAN_ISSUE_PURCHASE = 164;\\r\\n\\r\\n//All contracts by all part\\r\\n\\r\\nuint256 constant CONTRACT_MANAGEMENT = 0;\\r\\n\\r\\nuint256 constant CONTRACT_KRU_SHOPS_PAYMENT_PROCCESOR = 2;\\r\\nuint256 constant CONTRACT_KRU_SHOPS_POOL = 3;\\r\\nuint256 constant CONTRACT_KRU_SHOPS_MANAGER = 4;\\r\\n\\r\\nuint256 constant CONTRACT_APR_STAKE = 11;\\r\\nuint256 constant CONTRACT_FUND_FORWARDER = 15;\\r\\nuint256 constant CONTRACT_REFERRAL_TREE = 16;\\r\\nuint256 constant CONTRACT_BONUS_DISTRIBUTOR = 20;\\r\\n\\r\\nuint256 constant CONTRACT_UNISWAP_V2_PAIR = 23;\\r\\nuint256 constant CONTRACT_UNISWAP_V2_ROUTER = 24;\\r\\nuint256 constant CONTRACT_UNISWAP_V2_FACTORY = 25;\\r\\n\\r\\nuint256 constant CONTRACT_WRAPPED_KRU = 26;\\r\\n\\r\\nuint256 constant CONTRACT_KRU_SHOPS_TRESUARY = 100;\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needKYC\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"enum IBridge.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"internalType\":\"struct IBridge.TokenCreateInfo[]\",\"name\":\"tokenInfos_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"needKYC\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"enum IBridge.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposeTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBridge.TokenInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUpdate\",\"type\":\"bool\"}],\"name\":\"AddSuportedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveSupportedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isETHChain\",\"type\":\"bool\"}],\"name\":\"SetIsETHChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"SetSupportedTokenToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"}],\"name\":\"SetWithdrawer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTAINER_KYC_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTAINER_LIQUIDITY_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTAINER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PROPOSE_TIME_LOCKUP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INITIAL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"}],\"name\":\"addSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needKYC\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"enum IBridge.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"internalType\":\"struct IBridge.TokenCreateInfo\",\"name\":\"info_\",\"type\":\"tuple\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"applyPropose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainIdTo_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"data_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignersAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isETHChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee_\",\"type\":\"uint256\"}],\"name\":\"proposeNewFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"}],\"name\":\"removeSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setIsETHChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kycSigner_\",\"type\":\"address\"}],\"name\":\"setKycSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setSupportedChainToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer_\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedChainsId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"needKYC\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"enum IBridge.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainIdFrom_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v_\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s_\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainIdFrom_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v_\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s_\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainIdFrom_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v_\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s_\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawForWithCostRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAvailAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"v_\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s_\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009f55d1c770dcb65f85b8392a73b6690a67d2ad2f000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000009f55d1c770dcb65f85b8392a73b6690a67d2ad2f0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}