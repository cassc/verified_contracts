{"SourceCode": "pragma solidity ^0.8.13;\r\n\r\ninterface IChainlinkFeed {\r\n    function decimals() external view returns (uint8 decimals);\r\n    function latestRoundData() external view returns (uint80 roundId, int256 crvUsdPrice, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\ninterface ICurvePool {\r\n    function price_oracle() external view returns (uint256);\r\n    function last_price() external view returns (uint256);\r\n}\r\n\r\ncontract ConvexCurvePriceFeed is IChainlinkFeed {\r\n    \r\n    IChainlinkFeed public crvToUsd = IChainlinkFeed(0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f);\r\n    ICurvePool public cvxCrvCrvPool = ICurvePool(0x971add32Ea87f10bD192671630be3BE8A11b8623);\r\n    uint public minCrvPerCvxCrvRatio = 10**18 / 2;\r\n\r\n    function decimals() external view returns (uint8){\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the latest round data for the CvxCrv token price feed\r\n     * @dev This function calculates the CvxCrv price in USD by combining the CRV to USD price from a Chainlink oracle and the CvxCrv to CRV ratio from a Curve pool\r\n     * @return roundId The round ID of the Chainlink price feed for CRV to USD\r\n     * @return cvxCrvUsdPrice The latest CvxCrv price in USD\r\n     * @return startedAt The timestamp when the latest round of Chainlink price feed started\r\n     * @return updatedAt The timestamp when the latest round of Chainlink price feed was updated\r\n     * @return answeredInRound The round ID in which the answer was computed\r\n     */\r\n    function latestRoundData() public view returns (uint80, int256, uint256, uint256, uint80){\r\n        (uint80 roundId,int256 crvUsdPrice,uint startedAt,uint updatedAt,uint80 answeredInRound) = crvToUsd.latestRoundData();\r\n        uint crvPerCvxCrv = cvxCrvCrvPool.price_oracle();\r\n        if(crvPerCvxCrv > 10 ** 18){\r\n            //1 CRV can always be traded for 1 CvxCrv, so price for CvxCrv should never be higher than the price of CRV\r\n            crvPerCvxCrv = 10**18;\r\n        } else if (minCrvPerCvxCrvRatio > crvPerCvxCrv) {\r\n            //If price of cvxCrv falls below a certain ratio, we assume something might have gone wrong with the EMA oracle\r\n            //NOTE: This ratio floor is only meant as an intermediate protection, and should be removed as the EMA oracle gains lindy\r\n            crvPerCvxCrv = minCrvPerCvxCrvRatio;\r\n        }\r\n        \r\n        //Divide by 10**8 as crvUsdPrice is 8 decimals\r\n        int256 cvxCrvUsdPrice = crvUsdPrice * int256(crvPerCvxCrv) / 10**8;\r\n        return (roundId, cvxCrvUsdPrice, startedAt, updatedAt, answeredInRound);\r\n    }\r\n\r\n    function latestAnswer() external view returns(uint){\r\n        (,int answer,,,) = latestRoundData();\r\n        uint answerUint = uint(answer);\r\n        return(answerUint);\r\n    }\r\n\r\n    function Price() external view returns(uint){\r\n        (,int answer,,,) = latestRoundData();\r\n        uint answerUint = uint(answer);\r\n        return(answerUint);\r\n    }\r\n\r\n    function latestPrice() external view returns(uint){\r\n        (,int answer,,,) = latestRoundData();\r\n        uint answerUint = uint(answer);\r\n        return(answerUint);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvToUsd\",\"outputs\":[{\"internalType\":\"contract IChainlinkFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvCrvPool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCrvPerCvxCrvRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConvexCurvePriceFeed", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ed4bb044f6d3a5b766a7587f6fc3520750825fd093d9f5b46e73eb93292153c"}