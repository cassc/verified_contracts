{"SourceCode": "// File: IDelegationRegistry.sol\r\n\r\n\r\npragma solidity >=0.8.13;\r\n\r\n/**\r\n * @title IDelegateRegistry\r\n * @custom:version 2.0\r\n * @custom:author foobar (0xfoobar)\r\n * @notice A standalone immutable registry storing delegated permissions from one address to another\r\n */\r\ninterface IDelegateRegistry {\r\n    /// @notice Delegation type, NONE is used when a delegation does not exist or is revoked\r\n    enum DelegationType {\r\n        NONE,\r\n        ALL,\r\n        CONTRACT,\r\n        ERC721,\r\n        ERC20,\r\n        ERC1155\r\n    }\r\n\r\n    /// @notice Struct for returning delegations\r\n    struct Delegation {\r\n        DelegationType type_;\r\n        address to;\r\n        address from;\r\n        bytes32 rights;\r\n        address contract_;\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n    }\r\n\r\n    /// @notice Emitted when an address delegates or revokes rights for their entire wallet\r\n    event DelegateAll(address indexed from, address indexed to, bytes32 rights, bool enable);\r\n\r\n    /// @notice Emitted when an address delegates or revokes rights for a contract address\r\n    event DelegateContract(address indexed from, address indexed to, address indexed contract_, bytes32 rights, bool enable);\r\n\r\n    /// @notice Emitted when an address delegates or revokes rights for an ERC721 tokenId\r\n    event DelegateERC721(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, bool enable);\r\n\r\n    /// @notice Emitted when an address delegates or revokes rights for an amount of ERC20 tokens\r\n    event DelegateERC20(address indexed from, address indexed to, address indexed contract_, bytes32 rights, uint256 amount);\r\n\r\n    /// @notice Emitted when an address delegates or revokes rights for an amount of an ERC1155 tokenId\r\n    event DelegateERC1155(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, uint256 amount);\r\n\r\n    /// @notice Thrown if multicall calldata is malformed\r\n    error MulticallFailed();\r\n\r\n    /**\r\n     * -----------  WRITE -----------\r\n     */\r\n\r\n    /**\r\n     * @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\r\n     * @param data The encoded function data for each of the calls to make to this contract\r\n     * @return results The results from each of the calls passed in via data\r\n     */\r\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\r\n\r\n    /**\r\n     * @notice Allow the delegate to act on behalf of `msg.sender` for all contracts\r\n     * @param to The address to act as delegate\r\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\r\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\r\n     * @return delegationHash The unique identifier of the delegation\r\n     */\r\n    function delegateAll(address to, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\r\n\r\n    /**\r\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific contract\r\n     * @param to The address to act as delegate\r\n     * @param contract_ The contract whose rights are being delegated\r\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\r\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\r\n     * @return delegationHash The unique identifier of the delegation\r\n     */\r\n    function delegateContract(address to, address contract_, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\r\n\r\n    /**\r\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific ERC721 token\r\n     * @param to The address to act as delegate\r\n     * @param contract_ The contract whose rights are being delegated\r\n     * @param tokenId The token id to delegate\r\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\r\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\r\n     * @return delegationHash The unique identifier of the delegation\r\n     */\r\n    function delegateERC721(address to, address contract_, uint256 tokenId, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\r\n\r\n    /**\r\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC20 tokens\r\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\r\n     * @param to The address to act as delegate\r\n     * @param contract_ The address for the fungible token contract\r\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\r\n     * @param amount The amount to delegate, > 0 delegates and 0 revokes\r\n     * @return delegationHash The unique identifier of the delegation\r\n     */\r\n    function delegateERC20(address to, address contract_, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\r\n\r\n    /**\r\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC1155 tokens\r\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\r\n     * @param to The address to act as delegate\r\n     * @param contract_ The address of the contract that holds the token\r\n     * @param tokenId The token id to delegate\r\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\r\n     * @param amount The amount of that token id to delegate, > 0 delegates and 0 revokes\r\n     * @return delegationHash The unique identifier of the delegation\r\n     */\r\n    function delegateERC1155(address to, address contract_, uint256 tokenId, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\r\n\r\n    /**\r\n     * ----------- CHECKS -----------\r\n     */\r\n\r\n    /**\r\n     * @notice Check if `to` is a delegate of `from` for the entire wallet\r\n     * @param to The potential delegate address\r\n     * @param from The potential address who delegated rights\r\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\r\n     * @return valid Whether delegate is granted to act on the from's behalf\r\n     */\r\n    function checkDelegateForAll(address to, address from, bytes32 rights) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Check if `to` is a delegate of `from` for the specified `contract_` or the entire wallet\r\n     * @param to The delegated address to check\r\n     * @param contract_ The specific contract address being checked\r\n     * @param from The cold wallet who issued the delegation\r\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\r\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet or that specific contract\r\n     */\r\n    function checkDelegateForContract(address to, address from, address contract_, bytes32 rights) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Check if `to` is a delegate of `from` for the specific `contract` and `tokenId`, the entire `contract_`, or the entire wallet\r\n     * @param to The delegated address to check\r\n     * @param contract_ The specific contract address being checked\r\n     * @param tokenId The token id for the token to delegating\r\n     * @param from The wallet that issued the delegation\r\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\r\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet, that contract, or that specific tokenId\r\n     */\r\n    function checkDelegateForERC721(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the amount of ERC20 tokens the delegate is granted rights to act on the behalf of\r\n     * @param to The delegated address to check\r\n     * @param contract_ The address of the token contract\r\n     * @param from The cold wallet who issued the delegation\r\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\r\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\r\n     */\r\n    function checkDelegateForERC20(address to, address from, address contract_, bytes32 rights) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the amount of a ERC1155 tokens the delegate is granted rights to act on the behalf of\r\n     * @param to The delegated address to check\r\n     * @param contract_ The address of the token contract\r\n     * @param tokenId The token id to check the delegated amount of\r\n     * @param from The cold wallet who issued the delegation\r\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\r\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\r\n     */\r\n    function checkDelegateForERC1155(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (uint256);\r\n\r\n    /**\r\n     * ----------- ENUMERATIONS -----------\r\n     */\r\n\r\n    /**\r\n     * @notice Returns all enabled delegations a given delegate has received\r\n     * @param to The address to retrieve delegations for\r\n     * @return delegations Array of Delegation structs\r\n     */\r\n    function getIncomingDelegations(address to) external view returns (Delegation[] memory delegations);\r\n\r\n    /**\r\n     * @notice Returns all enabled delegations an address has given out\r\n     * @param from The address to retrieve delegations for\r\n     * @return delegations Array of Delegation structs\r\n     */\r\n    function getOutgoingDelegations(address from) external view returns (Delegation[] memory delegations);\r\n\r\n    /**\r\n     * @notice Returns all hashes associated with enabled delegations an address has received\r\n     * @param to The address to retrieve incoming delegation hashes for\r\n     * @return delegationHashes Array of delegation hashes\r\n     */\r\n    function getIncomingDelegationHashes(address to) external view returns (bytes32[] memory delegationHashes);\r\n\r\n    /**\r\n     * @notice Returns all hashes associated with enabled delegations an address has given out\r\n     * @param from The address to retrieve outgoing delegation hashes for\r\n     * @return delegationHashes Array of delegation hashes\r\n     */\r\n    function getOutgoingDelegationHashes(address from) external view returns (bytes32[] memory delegationHashes);\r\n\r\n    /**\r\n     * @notice Returns the delegations for a given array of delegation hashes\r\n     * @param delegationHashes is an array of hashes that correspond to delegations\r\n     * @return delegations Array of Delegation structs, return empty structs for nonexistent or revoked delegations\r\n     */\r\n    function getDelegationsFromHashes(bytes32[] calldata delegationHashes) external view returns (Delegation[] memory delegations);\r\n\r\n    /**\r\n     * ----------- STORAGE ACCESS -----------\r\n     */\r\n\r\n    /**\r\n     * @notice Allows external contracts to read arbitrary storage slots\r\n     */\r\n    function readSlot(bytes32 location) external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Allows external contracts to read an arbitrary array of storage slots\r\n     */\r\n    function readSlots(bytes32[] calldata locations) external view returns (bytes32[] memory);\r\n}\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC2981.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: tinyERC721_ID.sol\r\n\r\n\r\npragma solidity ^0.8.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror TokenDataQueryForNonexistentToken();\r\nerror OwnerQueryForNonexistentToken();\r\nerror OperatorQueryForNonexistentToken();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror URIQueryForNonexistentToken();\r\n\r\ncontract TinyERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenData {\r\n        address owner;\r\n        bytes12 aux;\r\n    }\r\n\r\n    uint256 private immutable _maxBatchSize;\r\n\r\n    mapping(uint256 => TokenData) private _tokens;\r\n    uint256 private _mintCounter = 50;\r\n    mapping(uint256 => bool) private _claimedTokens;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _maxBatchSize = maxBatchSize_;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        uint256 claimedCount = 0;\r\n        for (uint256 i = 0; i < 50; i++) {\r\n            if (_claimedTokens[i]) {\r\n                claimedCount += 1;\r\n            }\r\n        }\r\n        // _mintCounter starts at 50, so subtract 50 to get the number of tokens minted above ID 49\r\n        return claimedCount + (_mintCounter - 50);\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function balanceOf(\r\n        address owner\r\n    ) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n\r\n        uint256 count = 0;\r\n        // Check claimed tokens in the 0-49 range\r\n        for (uint256 i = 0; i < 50; i++) {\r\n            if (_claimedTokens[i] && _tokens[i].owner == owner) {\r\n                count += 1;\r\n            }\r\n        }\r\n        // Check minted tokens above ID 49\r\n        for (uint256 i = 50; i < _mintCounter; i++) {\r\n            if (_tokens[i].owner == owner) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function _tokenData(\r\n        uint256 tokenId\r\n    ) internal view returns (TokenData storage) {\r\n        if (!_exists(tokenId)) revert TokenDataQueryForNonexistentToken();\r\n\r\n        TokenData storage token = _tokens[tokenId];\r\n        uint256 currentIndex = tokenId;\r\n        while (token.owner == address(0)) {\r\n            unchecked {\r\n                --currentIndex;\r\n            }\r\n            token = _tokens[currentIndex];\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    function ownerOf(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();\r\n        return _tokenData(tokenId).owner;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        TokenData memory token = _tokenData(tokenId);\r\n        address owner = token.owner;\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, token);\r\n    }\r\n\r\n    function getApproved(\r\n        uint256 tokenId\r\n    ) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(\r\n        address operator,\r\n        bool approved\r\n    ) public virtual override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        TokenData memory token = _tokenData(tokenId);\r\n        if (!_isApprovedOrOwner(_msgSender(), tokenId, token))\r\n            revert TransferCallerNotOwnerNorApproved();\r\n\r\n        _transfer(from, to, tokenId, token);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        TokenData memory token = _tokenData(tokenId);\r\n        if (!_isApprovedOrOwner(_msgSender(), tokenId, token))\r\n            revert TransferCallerNotOwnerNorApproved();\r\n\r\n        _safeTransfer(from, to, tokenId, token, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        TokenData memory token,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId, token);\r\n\r\n        if (\r\n            to.isContract() && !_checkOnERC721Received(from, to, tokenId, _data)\r\n        ) revert TransferToNonERC721ReceiverImplementer();\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        if (tokenId < 50) {\r\n            return _claimedTokens[tokenId];\r\n        } else {\r\n            return tokenId < _mintCounter;\r\n        }\r\n    }\r\n\r\n    function _isApprovedOrOwner(\r\n        address spender,\r\n        uint256 tokenId,\r\n        TokenData memory token\r\n    ) internal view virtual returns (bool) {\r\n        address owner = token.owner;\r\n        return (spender == owner ||\r\n            isApprovedForAll(owner, spender) ||\r\n            getApproved(tokenId) == spender);\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal virtual {\r\n        _safeMint(to, quantity, \"\");\r\n    }\r\n\r\n    function _safeMintID(address to, uint256 _id) internal virtual {\r\n        _safeMintID(to, _id, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        uint256 startTokenId = _mintCounter;\r\n        _mint(to, quantity);\r\n\r\n        if (to.isContract()) {\r\n            unchecked {\r\n                for (uint256 i; i < quantity; ++i) {\r\n                    if (\r\n                        !_checkOnERC721Received(\r\n                            address(0),\r\n                            to,\r\n                            startTokenId + i,\r\n                            _data\r\n                        )\r\n                    ) revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _safeMintID(\r\n        address to,\r\n        uint256 _id,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        require(_id < 50, \"ID must be less than 50 for this function\");\r\n        require(!_claimedTokens[_id], \"Token ID already claimed\");\r\n\r\n        _claimedTokens[_id] = true;\r\n        _tokens[_id].owner = to;\r\n        _mintID(to, _id, 1);\r\n        if (to.isContract()) {\r\n            if (!_checkOnERC721Received(address(0), to, _id, _data))\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n        }\r\n    }\r\n\r\n    function _mint(address to, uint256 quantity) internal virtual {\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        uint256 startTokenId = _mintCounter;\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        unchecked {\r\n            for (uint256 i; i < quantity; ++i) {\r\n                if (_maxBatchSize == 0 ? i == 0 : i % _maxBatchSize == 0) {\r\n                    TokenData storage token = _tokens[startTokenId + i];\r\n                    token.owner = to;\r\n                    token.aux = _calculateAux(\r\n                        address(0),\r\n                        to,\r\n                        startTokenId + i,\r\n                        0\r\n                    );\r\n                }\r\n\r\n                emit Transfer(address(0), to, startTokenId + i);\r\n            }\r\n            _mintCounter += quantity;\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    function _mintID(\r\n        address to,\r\n        uint256 _id,\r\n        uint256 quantity\r\n    ) internal virtual {\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        uint256 startTokenId = _id;\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        unchecked {\r\n            for (uint256 i; i < quantity; ++i) {\r\n                if (_maxBatchSize == 0 ? i == 0 : i % _maxBatchSize == 0) {\r\n                    TokenData storage token = _tokens[startTokenId + i];\r\n                    token.owner = to;\r\n                    token.aux = _calculateAux(\r\n                        address(0),\r\n                        to,\r\n                        startTokenId + i,\r\n                        0\r\n                    );\r\n                }\r\n\r\n                emit Transfer(address(0), to, startTokenId + i);\r\n            }\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        TokenData memory token\r\n    ) internal virtual {\r\n        if (token.owner != from) revert TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        _approve(address(0), tokenId, token);\r\n\r\n        unchecked {\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_exists(nextTokenId)) {\r\n                TokenData storage nextToken = _tokens[nextTokenId];\r\n                if (nextToken.owner == address(0)) {\r\n                    nextToken.owner = token.owner;\r\n                    nextToken.aux = token.aux;\r\n                }\r\n            }\r\n        }\r\n\r\n        TokenData storage newToken = _tokens[tokenId];\r\n        newToken.owner = to;\r\n        newToken.aux = _calculateAux(from, to, tokenId, token.aux);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    function _calculateAux(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes12 current\r\n    ) internal view virtual returns (bytes12) {}\r\n\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        TokenData memory token\r\n    ) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(token.owner, to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try\r\n            IERC721Receiver(to).onERC721Received(\r\n                _msgSender(),\r\n                from,\r\n                tokenId,\r\n                _data\r\n            )\r\n        returns (bytes4 retval) {\r\n            return retval == IERC721Receiver.onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: curatedTemplate.sol\r\n\r\n/*\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMNOOXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXO0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMk,'lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc.,kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMNo...cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc...lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMK:....cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc....:0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMk,.....cKMMMMMMMMMMMMMMMMMMMMMMMMMMWKc.....,kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMNd.......cKWMMMMMMMMMMMMMMMMMMMMMMMKkc.......oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMKc........cKMMMMMMMMMMMMMMMMMMMMMMKc'........cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMO,.........cKMMMMMMMMMMMMMMMMMMMMKc..........,OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMWd'..........cKWMMMMMMMMMMMMMMMMMKl............dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMXc...;;.......cKMMMMMMMMMMMMMMMMKc...'co,......cXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMO;..,x0:.......cKMMMMMMMMMMMMMMKl...cxKKc......;OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMWd'..;0W0:.......cKWMMMMMMMMMMMKc...cKWMNo......'xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMXl...lXMW0:.......c0WMMMMMMMMMKl...cKMMMWx'......lXXkxxddddoddddxxxkO0KXXNWWWMMMMMMMMMMM\r\nMMMMMMMMMMMM0;...dWMMW0:.......c0WMMMMMMMKl...cKMMMMMO;......;0k,.'''',,''.......'',;::cxXMMMMMMMMMM\r\nMMMMMMMMMMMWx'..,kMMMMW0:.......c0WMMMMMKl...cKMMMMWWKc......'xXOO00KKKKK00Okdoc,'......cKMMMMMMMMMM\r\nMMMMMMMMMMMXl...:0MMMMMW0:.......:0WMMMKl...cKMMWKkdxKd.......oNMMMMMMMMMMMMMMMWXOd:'...lXMMMMMMMMMM\r\nMMMMMMMMMMM0:...lXMMMMMMWO:.......:0MMKl...cKMWKo,..;0k,......:KMMMMMMMMMMMMMMMMMMWNOc'.oNMMMMMMMMMM\r\nMMMMMMMMMMWx'..'dWMMMMMMMW0:.......:0Kl...cKMNk;....,k0:......,kMMMMMMMMMMMMMMMMMMMMMXl'oNMMMMMMMMMM\r\nMMMMMMMMMMNl...,OMMMMMMMMMW0:.......;;...cKWXo'......dKl.......oNMMMMMMMMMMMMMMMMMMMMM0:dWMMMMMMMMMM\r\nMMMMMMMMMM0:...:KMMMMMMMMMMW0c..........lKMNo'.......oXd'......cKMMMMMMMMMMMMMMMMMMMMMNKXMMMMMMMMMMM\r\nMMMMMMMMMWk,...lXMMMMMMMMMMMWKc........cKMWx,.......,kWk,......,OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMNo...'dWMMMMMMMMMMMMMKl......lKMMK:........:KMK:.......dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMWO;...'xWMMMMMMMMMMMMMMXl'...lKMMWx'........lXMXl.......;OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMNKOOd;.....;dkO0NMMMMMMMMMMMXo''lXMMMNo.........lNW0:........,lxkO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMN0kkkkkkkkkkxxkOXWMMMMMMMMMMMN0ONMMMMNo.........lXWXOkkkkxxxxxxxxxk0WMXOkkkkkkkkkkkkkkkkkOXMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.........:0MMMMMMMMMMMMMMMMMMMMN0OOxl,........,lxO0NMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx'........'xWMMMMMMMMMMMMMMMMMMMMMMMMNd'......'dNMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0:.........:KMMMMMMMMMMMMMMMMMMMMMMMMMk,......'xWMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd'.........oXMMMMMMMMMMMMMMMMMMMMMMMMO,......'kWMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo.........'oXMMMMMMMMMMMMMMMMMMMMMMMO,......'kMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo'.........c0WMMMMMMMMMMMMMMMMMMMMMO,......'kMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx;.........,dXWMMMMMMMMMMMMMMMMMMMO,......'kMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKo;'........;d0NMMMMMMMMMMMMMMMMMO,......'kWMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKOxc'.......':dOKNWMMMMMMMMMMMWk,......'kWMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0xl;'.......,:ldxkO00KK00Od:.......;OMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdl:;''.......''''''....',;cox0NMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXK0OkxxddddddddxxkkO0XNWMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n*/\r\n\r\n// Contract authored by August Rosedale (@augustfr)\r\n// https://miragegallery.ai\r\n\r\npragma solidity ^0.8.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface mirageContracts {\r\n    function balanceOf(\r\n        address owner,\r\n        uint256 _id\r\n    ) external view returns (uint256);\r\n}\r\n\r\ncontract mirageCuratedTemplate is\r\n    TinyERC721,\r\n    ReentrancyGuard,\r\n    Ownable,\r\n    IERC2981\r\n{\r\n    using Strings for uint256;\r\n\r\n    mapping(uint256 => uint256) public sentientClaimed;\r\n\r\n    IDelegateRegistry public immutable registry;\r\n\r\n    uint256 private miragePercentage = 15;\r\n    address private mirageAddress = 0x4a462cbf4902A8D26bF2c6931F12260d8fcEC69e;\r\n\r\n    uint256 private royaltyAmount = 1000;\r\n    address private royaltyAddress = 0xdCB23900d19b808F5510E8bB84E9B6988a797bb2;\r\n\r\n    bool public metadataFrozen;\r\n\r\n    bool public presaleOpen = false;\r\n    bool public publicSaleOpen = false;\r\n    bool public sentientClaimOpen = false;\r\n\r\n    uint256 public maxPerPublicTx = 10;\r\n\r\n    address public admin;\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            msg.sender == admin || msg.sender == owner(),\r\n            \"Only admin or owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    struct ProjectDetails {\r\n        uint256 artworks;\r\n        string artistName;\r\n        string projectDescription;\r\n        string projectName;\r\n        address artistAddress;\r\n        string baseURI;\r\n        string projectWebsite;\r\n        string projectLicense;\r\n        uint256 maxSupply;\r\n        uint256 maxPresale;\r\n        uint256 mintPrice;\r\n        address additionalPayeeAddress;\r\n        uint256 additionalPayeePercentage;\r\n    }\r\n\r\n    ProjectDetails public projectDetails;\r\n\r\n    mirageContracts public membershipContract;\r\n    address private membershipAddress;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _registry,\r\n        address _membershipAddress\r\n    ) TinyERC721(name, symbol, 0) {\r\n        membershipContract = mirageContracts(_membershipAddress);\r\n        membershipAddress = _membershipAddress;\r\n        admin = msg.sender;\r\n        registry = IDelegateRegistry(_registry);\r\n    }\r\n\r\n    function addProjectDetails(\r\n        uint256 _mintPrice,\r\n        string memory _artistName,\r\n        string memory _projectDescription,\r\n        string memory _projectName,\r\n        address _artistAddress,\r\n        string memory _baseURI,\r\n        string memory _projectWebsite,\r\n        string memory _projectLicense,\r\n        uint256 _maxSupply,\r\n        uint256 _maxPresale\r\n    ) public onlyAdmin {\r\n        projectDetails.artworks = 50;\r\n        projectDetails.mintPrice = _mintPrice;\r\n        projectDetails.artistName = _artistName;\r\n        projectDetails.projectDescription = _projectDescription;\r\n        projectDetails.projectName = _projectName;\r\n        projectDetails.artistAddress = _artistAddress;\r\n        projectDetails.baseURI = _baseURI;\r\n        projectDetails.projectWebsite = _projectWebsite;\r\n        projectDetails.projectLicense = _projectLicense;\r\n        projectDetails.maxSupply = _maxSupply;\r\n        projectDetails.maxPresale = _maxPresale;\r\n    }\r\n\r\n    function updateAdminAddress(address _newAdmin) public onlyAdmin {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function setAdditionalPayee(\r\n        address _additionalPayee,\r\n        uint256 _additionalPayeePercentage\r\n    ) external onlyAdmin {\r\n        require(_additionalPayee != address(0), \"Invalid address\");\r\n        require(\r\n            _additionalPayeePercentage <= 100,\r\n            \"Percentage cannot exceed 100\"\r\n        );\r\n        projectDetails.additionalPayeeAddress = _additionalPayee;\r\n        projectDetails.additionalPayeePercentage = _additionalPayeePercentage;\r\n    }\r\n\r\n    function projectTokenInfo()\r\n        public\r\n        view\r\n        returns (\r\n            address artistAddress,\r\n            uint256 pricePerTokenInWei,\r\n            uint256 artworks,\r\n            uint256 maxArtworks,\r\n            uint256 maxEarly,\r\n            address additionalPayee,\r\n            uint256 additionalPayeePercentage,\r\n            bool publicActive,\r\n            bool earlyActive,\r\n            string memory currency\r\n        )\r\n    {\r\n        artistAddress = projectDetails.artistAddress;\r\n        pricePerTokenInWei = projectDetails.mintPrice;\r\n        artworks = projectDetails.artworks;\r\n        maxArtworks = projectDetails.maxSupply;\r\n        maxEarly = projectDetails.maxPresale;\r\n        additionalPayee = projectDetails.additionalPayeeAddress;\r\n        additionalPayeePercentage = projectDetails.additionalPayeePercentage;\r\n        publicActive = publicSaleOpen;\r\n        earlyActive = presaleOpen;\r\n        currency = \"ETH\";\r\n    }\r\n\r\n    function updateMirageAddress(address _newMirageAddress) public onlyAdmin {\r\n        require(_newMirageAddress != address(0), \"Invalid address\");\r\n        mirageAddress = _newMirageAddress;\r\n    }\r\n\r\n    function updateMaxPerPublicTx(uint256 _newAmount) public onlyAdmin {\r\n        maxPerPublicTx = _newAmount;\r\n    }\r\n\r\n    function updateProjectDetails(\r\n        uint256 _mintPrice,\r\n        string memory _artistName,\r\n        string memory _projectDescription,\r\n        string memory _projectName,\r\n        address _artistAddress,\r\n        string memory _baseURI,\r\n        string memory _projectWebsite,\r\n        string memory _projectLicense,\r\n        uint256 _maxSupply,\r\n        uint256 _maxPresale,\r\n        address _additionalPayeeAddress,\r\n        uint256 _additionalPayeePercentage\r\n    ) public onlyAdmin {\r\n        require(!metadataFrozen, \"Metadata is frozen\");\r\n        projectDetails.mintPrice = _mintPrice;\r\n        projectDetails.artistName = _artistName;\r\n        projectDetails.projectDescription = _projectDescription;\r\n        projectDetails.projectName = _projectName;\r\n        projectDetails.artistAddress = _artistAddress;\r\n        projectDetails.baseURI = _baseURI;\r\n        projectDetails.projectWebsite = _projectWebsite;\r\n        projectDetails.projectLicense = _projectLicense;\r\n        projectDetails.maxSupply = _maxSupply;\r\n        projectDetails.maxPresale = _maxPresale;\r\n        projectDetails.additionalPayeeAddress = _additionalPayeeAddress;\r\n        projectDetails.additionalPayeePercentage = _additionalPayeePercentage;\r\n    }\r\n\r\n    function togglePresale() public onlyAdmin {\r\n        presaleOpen = !presaleOpen;\r\n        sentientClaimOpen = true;\r\n    }\r\n\r\n    function togglePublicSale() public onlyAdmin {\r\n        publicSaleOpen = !publicSaleOpen;\r\n        sentientClaimOpen = true;\r\n        presaleOpen = false;\r\n    }\r\n\r\n    function earlyMemberPurchase(\r\n        uint256 _membershipId,\r\n        address _vault\r\n    ) public payable nonReentrant {\r\n        require(\r\n            msg.value >= projectDetails.mintPrice,\r\n            \"Ether sent is insufficient\"\r\n        );\r\n        require(\r\n            projectDetails.artworks - 50 < projectDetails.maxPresale,\r\n            \"Max supply exceeded\"\r\n        );\r\n        require(presaleOpen, \"Presale is not open\");\r\n\r\n        address requester = _vault == msg.sender ? msg.sender : _vault;\r\n        bool isValidDelegate = _vault == msg.sender\r\n            ? true\r\n            : registry.checkDelegateForContract(\r\n                msg.sender,\r\n                _vault,\r\n                membershipAddress,\r\n                \"\"\r\n            );\r\n        require(isValidDelegate, \"Invalid delegate-vault pairing\");\r\n        require(\r\n            membershipContract.balanceOf(requester, _membershipId) > 0,\r\n            \"Membership token missing\"\r\n        );\r\n\r\n        _splitFunds(1);\r\n        projectDetails.artworks += 1;\r\n        _safeMint(requester, 1);\r\n    }\r\n\r\n    function purchase(uint256 numberOfTokens) public payable nonReentrant {\r\n        require(publicSaleOpen, \"Public sale is not open\");\r\n        require(\r\n            numberOfTokens <= maxPerPublicTx,\r\n            \"Exceeds max tokens per transaction\"\r\n        );\r\n        require(\r\n            msg.value >= projectDetails.mintPrice * numberOfTokens,\r\n            \"Insufficient payment\"\r\n        );\r\n        require(\r\n            msg.sender == tx.origin,\r\n            \"Calls must be made directly by a user\"\r\n        );\r\n        require(\r\n            projectDetails.artworks + numberOfTokens <=\r\n                projectDetails.maxSupply,\r\n            \"Would exceed max supply\"\r\n        );\r\n\r\n        _splitFunds(numberOfTokens);\r\n        projectDetails.artworks += numberOfTokens;\r\n        _safeMint(msg.sender, numberOfTokens);\r\n    }\r\n\r\n    function claimSentient(uint256 membershipId, address _vault) public {\r\n        require(membershipId < 50, \"Invalid Sentient ID\");\r\n        require(sentientClaimOpen, \"Sentient claim is not open\");\r\n\r\n        address requester = _vault == msg.sender ? msg.sender : _vault;\r\n        bool isValidDelegate = _vault == msg.sender\r\n            ? true\r\n            : registry.checkDelegateForContract(\r\n                msg.sender,\r\n                _vault,\r\n                membershipAddress,\r\n                \"\"\r\n            );\r\n        require(isValidDelegate, \"Invalid delegate-vault pairing\");\r\n        require(\r\n            membershipContract.balanceOf(requester, membershipId) > 0,\r\n            \"Membership token missing\"\r\n        );\r\n\r\n        _safeMintID(requester, membershipId);\r\n    }\r\n\r\n    function freezeMetadata() public onlyAdmin {\r\n        require(!metadataFrozen, \"Already frozen\");\r\n        metadataFrozen = true;\r\n    }\r\n\r\n    function tokenURI(\r\n        uint256 tokenID\r\n    ) public view override returns (string memory) {\r\n        if (!_exists(tokenID)) revert URIQueryForNonexistentToken();\r\n        return string.concat(projectDetails.baseURI, Strings.toString(tokenID));\r\n    }\r\n\r\n    function updateURI(string memory _baseTokenURI) external onlyAdmin {\r\n        require(!metadataFrozen, \"Metadata is frozen\");\r\n        projectDetails.baseURI = _baseTokenURI;\r\n    }\r\n\r\n    function withdraw() public onlyAdmin {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function _splitFunds(uint256 numberOfTokens) internal {\r\n        if (msg.value == 0) return;\r\n\r\n        uint256 mintCost = projectDetails.mintPrice * numberOfTokens;\r\n        uint256 refund = msg.value - mintCost;\r\n        if (refund > 0) {\r\n            payable(msg.sender).transfer(refund);\r\n        }\r\n\r\n        uint256 mirageAmount = (mintCost * miragePercentage) / 100;\r\n        if (mirageAmount > 0) {\r\n            payable(mirageAddress).transfer(mirageAmount);\r\n        }\r\n\r\n        uint256 remainingFunds = mintCost - mirageAmount;\r\n        uint256 additionalPayeeAmount = 0;\r\n        if (projectDetails.additionalPayeePercentage > 0) {\r\n            additionalPayeeAmount =\r\n                (remainingFunds * projectDetails.additionalPayeePercentage) /\r\n                100;\r\n            if (additionalPayeeAmount > 0) {\r\n                payable(projectDetails.additionalPayeeAddress).transfer(\r\n                    additionalPayeeAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 creatorFunds = remainingFunds - additionalPayeeAmount;\r\n        if (creatorFunds > 0) {\r\n            payable(projectDetails.artistAddress).transfer(creatorFunds);\r\n        }\r\n    }\r\n\r\n    function royaltyInfo(\r\n        uint256 /* tokenId */,\r\n        uint256 salePrice\r\n    ) external view override returns (address receiver, uint256 royaltyFee) {\r\n        uint256 totalRoyalty = (salePrice * royaltyAmount) / 10000;\r\n\r\n        return (royaltyAddress, totalRoyalty);\r\n    }\r\n\r\n    function updateRoyaltyInfo(\r\n        address _royaltyAddress,\r\n        uint256 _royaltyAmount\r\n    ) external onlyAdmin {\r\n        require(_royaltyAmount <= 10000, \"Royalty cannot exceed 100%\");\r\n        royaltyAddress = _royaltyAddress;\r\n        royaltyAmount = _royaltyAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_membershipAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDataQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectWebsite\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectLicense\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPresale\",\"type\":\"uint256\"}],\"name\":\"addProjectDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"claimSentient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_membershipId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"earlyMemberPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerPublicTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipContract\",\"outputs\":[{\"internalType\":\"contract mirageContracts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"artworks\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectWebsite\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectLicense\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPresale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"additionalPayeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"additionalPayeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTokenInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artworks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxArtworks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEarly\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"additionalPayeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"publicActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"earlyActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IDelegateRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentientClaimOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sentientClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalPayeePercentage\",\"type\":\"uint256\"}],\"name\":\"setAdditionalPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxPerPublicTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMirageAddress\",\"type\":\"address\"}],\"name\":\"updateMirageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectWebsite\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectLicense\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPresale\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_additionalPayeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalPayeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateProjectDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyAmount\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "mirageCuratedTemplate", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000447e69651d841bd8d104bed4930000000000000000000000000170227514a274826685bf81aed06e4218175572000000000000000000000000000000000000000000000000000000000000000854484520504f454d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025450000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e0dc43cab54aaa837412013ab8ee8d934ad1881a4efaf8c04994871bf5e7ef85"}