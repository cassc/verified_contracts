{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/alpha/InvestmentAlpha.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../common/Investment.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Every.finance.\\r\\n * @notice Implementation of the contract InvestmentAlpha.\\r\\n */\\r\\n\\r\\ncontract InvestmentAlpha is Investment {\\r\\n    constructor(\\r\\n        address asset_,\\r\\n        address token_,\\r\\n        address management_,\\r\\n        address deposit_,\\r\\n        address withdrawal_,\\r\\n        address admin_, \\r\\n        address assetOracle_\\r\\n    ) Investment(0, asset_, token_, management_, deposit_, withdrawal_, admin_, assetOracle_) {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/HoldTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the contract HoldTime.\\r\\n * It allows to update average hold time of the yield-bearing token.\\r\\n */\\r\\n\\r\\ncontract HoldTime is Ownable {\\r\\n    address public token;\\r\\n    mapping(address => uint256) private holdTimes;\\r\\n\\r\\n    event UpdateToken(address indexed token_);\\r\\n    event UpdateHoldTime(\\r\\n        address indexed account_,\\r\\n        uint256 oldHoldTime_,\\r\\n        uint256 newHoldTime_\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Update token.\\r\\n     * @param token_ token's address\\r\\n     * @notice Emits a {UpdateToken} event indicating the updated token `token_`.\\r\\n     */\\r\\n    function updateToken(address token_) external onlyOwner {\\r\\n        require(token_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(token_ != token, \\\"Every.finance: no change\\\");\\r\\n        token = token_;\\r\\n        emit UpdateToken(token_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update HoldTimes.\\r\\n     * @param account_ account's address.\\r\\n     * @param amount_  token amount.\\r\\n     * Emits a {UpdateHoldTime} event with `account_`, `oldHoldTime_` and `newHoldTime_`.\\r\\n     */\\r\\n    function updateHoldTime(address account_, uint256 amount_) external {\\r\\n        require(msg.sender == token, \\\"Every.finance: caller is not token\\\");\\r\\n        uint256 oldAmount_ = IERC20(token).balanceOf(account_);\\r\\n        uint256 oldHoldTime_ = holdTimes[account_];\\r\\n        uint256 newHoldTime_ = (oldAmount_ *\\r\\n            oldHoldTime_ +\\r\\n            block.timestamp *\\r\\n            amount_) / (oldAmount_ + amount_);\\r\\n        holdTimes[account_] = newHoldTime_;\\r\\n        emit UpdateHoldTime(account_, oldHoldTime_, newHoldTime_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get hold time.\\r\\n     * @param account_ investor's address.\\r\\n     * @return time_ hold time.\\r\\n     */\\r\\n    function getHoldTime(address account_) public view returns (uint256 time_) {\\r\\n        time_ = holdTimes[account_];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/Investment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"../libraries/FeeMinter.sol\\\";\\r\\nimport \\\"./Management.sol\\\";\\r\\nimport \\\"./Proof.sol\\\";\\r\\nimport \\\"./Token.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the contract Investment.\\r\\n * It allows the investor to depositProof/withdraw funds and the manager to validate\\r\\n * the depositProof/withdrawalProof investor requests.\\r\\n */\\r\\n\\r\\ninterface IParity {\\r\\n    function setDepositData(\\r\\n        uint256 amountMinted_,\\r\\n        uint256 amountValidated_,\\r\\n        uint256 id_\\r\\n    ) external;\\r\\n\\r\\n    function setWithdrawalData(\\r\\n        uint256 amountMinted_,\\r\\n        uint256 amountValidated_,\\r\\n        uint256 id_\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract Investment is AccessControlEnumerable, Pausable {\\r\\n    using Math for uint256;\\r\\n    bytes32 public constant PROOF = keccak256(\\\"PROOF\\\");\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n    uint256 public constant MAX_PRICE = type(uint256).max;\\r\\n    uint256 public immutable id;\\r\\n    uint256 public currentEventId;\\r\\n    uint256 public tokenPrice;\\r\\n    uint256 public tokenPriceMean;\\r\\n    uint256 public managementFeeLastTime;\\r\\n    uint256 public depositProofTokenId;\\r\\n    uint256 public withdrawalProofTokenId;\\r\\n    uint256 public eventBatchSize;\\r\\n    uint256 public lastPerformanceFee;\\r\\n    uint256 public lastManagementFee;\\r\\n    uint256 public totalPerformanceFee;\\r\\n    uint256 public totalManagementFee;\\r\\n    address public asset;\\r\\n    address public assetOracle;\\r\\n    Token public token;\\r\\n    Management public management;\\r\\n    Proof public depositProof;\\r\\n    Proof public withdrawalProof;\\r\\n    IParity public managementParity;\\r\\n    event UpdateManagement(address indexed management_);\\r\\n    event UpdateDepositProof(address indexed depositProof_);\\r\\n    event UpdateWithdrawalProof(address indexed withdrawalProof_);\\r\\n    event UpdateManagementParity(address indexed managementParity_);\\r\\n    event UpdateToken(address indexed token_);\\r\\n    event UpdateAsset(address indexed asset_);\\r\\n    event UpdateAssetOracle(address indexed assetOracle_);\\r\\n    event UpdateEventBatchSize(uint256 eventBatchSize_);\\r\\n    event DepositRequest(address indexed account_, uint256 amount_);\\r\\n    event CancelDepositRequest(address indexed account_, uint256 amount_);\\r\\n    event WithdrawalRequest(address indexed account_, uint256 amount_);\\r\\n    event CancelWithdrawalRequest(address indexed account_, uint256 amount_);\\r\\n    event StartNextEvent(uint256 tokenPrice, uint256 currentEventId);\\r\\n\\r\\n    event Validatedeposit(\\r\\n        uint256 indexed tokenId_,\\r\\n        uint256 validatedAmount_,\\r\\n        uint256 mintedAmount_\\r\\n    );\\r\\n    event Validatewithdrawal(\\r\\n        uint256 indexed tokenId_,\\r\\n        uint256 validatedAmount_,\\r\\n        uint256 SentAmount_\\r\\n    );\\r\\n    event MintPerformanceFee(uint256 performanceFee_);\\r\\n    event MintManagementFee(uint256 managementFee_);\\r\\n    event MintOrBurnInvestmentFee(\\r\\n        uint256 amount_,\\r\\n        bool isFee_,\\r\\n        uint256 remainingAmount_\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        uint256 id_,\\r\\n        address asset_,\\r\\n        address token_,\\r\\n        address management_,\\r\\n        address depositProof_,\\r\\n        address withdrawalProof_,\\r\\n        address admin_,\\r\\n        address assetOracle_\\r\\n    ) payable {\\r\\n        require(id_ <= 2, \\\"Every.finance: out of range\\\");\\r\\n        require(token_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(management_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(depositProof_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(\\r\\n            withdrawalProof_ != address(0),\\r\\n            \\\"Every.finance: zero address\\\"\\r\\n        );\\r\\n        require(admin_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(assetOracle_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        id = id_;\\r\\n        token = Token(token_);\\r\\n        management = Management(management_);\\r\\n        depositProof = Proof(depositProof_);\\r\\n        withdrawalProof = Proof(withdrawalProof_);\\r\\n        if (asset_ != address(0)) {\\r\\n            (bool success_, uint8 assetDecimals_) = AssetTransfer\\r\\n                .tryGetAssetDecimals(IERC20(asset_));\\r\\n            require(success_, \\\"Every.finance: no decimal\\\");\\r\\n            require(\\r\\n                assetDecimals_ <= uint8(18),\\r\\n                \\\"Every.finance: max decimal\\\"\\r\\n            );\\r\\n            asset = asset_;\\r\\n            assetOracle = assetOracle_;\\r\\n        }\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\r\\n        _setupRole(PROOF, address(depositProof_));\\r\\n        _setupRole(PROOF, address(withdrawalProof_));\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @dev Update management.\\r\\n     * @param management_ management contract address\\r\\n     * Emits an {UpdateManagement} event indicating the updated management contract.\\r\\n     */\\r\\n    function updateManagement(\\r\\n        address management_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(management_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(\\r\\n            management_ != address(management),\\r\\n            \\\"Every.finance: no change\\\"\\r\\n        );\\r\\n        management = Management(management_);\\r\\n        emit UpdateManagement(management_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update depositProof.\\r\\n     * @param depositProof_ depositProof contract address\\r\\n     * Emits an {UpdateDepositProof} event indicating the updated depositProof contract.\\r\\n     */\\r\\n    function updateDepositProof(\\r\\n        address depositProof_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(depositProof_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(\\r\\n            depositProof_ != address(depositProof),\\r\\n            \\\"Every.finance: no change\\\"\\r\\n        );\\r\\n        _revokeRole(PROOF, address(depositProof));\\r\\n        _grantRole(PROOF, depositProof_);\\r\\n        depositProof = Proof(depositProof_);\\r\\n        emit UpdateDepositProof(depositProof_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update withdrawalProof.\\r\\n     * @param withdrawalProof_ withdrawalProof contract address\\r\\n     * Emits an {UpdateWithdrawalProof} event indicating the updated withdrawalProof contract.\\r\\n     */\\r\\n    function updateWithdrawalProof(\\r\\n        address withdrawalProof_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            withdrawalProof_ != address(0),\\r\\n            \\\"Every.finance: zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            withdrawalProof_ != address(withdrawalProof),\\r\\n            \\\"Every.finance: no change\\\"\\r\\n        );\\r\\n        _revokeRole(PROOF, address(withdrawalProof));\\r\\n        _grantRole(PROOF, withdrawalProof_);\\r\\n        withdrawalProof = Proof(withdrawalProof_);\\r\\n        emit UpdateWithdrawalProof(withdrawalProof_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update managementParity.\\r\\n     * @param managementParity_ ManagementParity contract address\\r\\n     * Emits an {UpdateManagementParity} event indicating the updated ManagementParity contract.\\r\\n     */\\r\\n    function updateManagementParity(\\r\\n        address managementParity_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            managementParity_ != address(0),\\r\\n            \\\"Every.finance: zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            managementParity_ != address(managementParity),\\r\\n            \\\"Every.finance: no change\\\"\\r\\n        );\\r\\n        managementParity = IParity(managementParity_);\\r\\n        emit UpdateManagementParity(managementParity_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the yield-bearing token address.\\r\\n     * @param token_ token's address.\\r\\n     * Emits an {UpdateToken} event indicating the updated token contract.\\r\\n     */\\r\\n    function updateToken(address token_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(token_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(token_ != address(token), \\\"Every.finance: no change\\\");\\r\\n        token = Token(token_);\\r\\n        emit UpdateToken(token_);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Update asset's price oracle.\\r\\n     * @param assetOracle_ asset's price oracle.\\r\\n     * Emits an {UpdateAssetOracle} event indicating the updated token contract.\\r\\n     */\\r\\n\\r\\n    function updateAssetOracle(address assetOracle_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(assetOracle_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(assetOracle_ != assetOracle, \\\"Every.finance: no change\\\");\\r\\n        assetOracle = assetOracle_;\\r\\n        emit UpdateAssetOracle(assetOracle_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the underlying asset that investors can deposit.\\r\\n     * asset's address cannot be updated if there are deposit/withdrawal requests on pending.\\r\\n     * @param asset_ asset's address.\\r\\n     * Emits an {UpdateAsset} event indicating the updated asset `asset_`.\\r\\n     */\\r\\n    function updateAsset(address asset_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(asset != asset_, \\\"Tansformative.Fi: no asset change\\\");\\r\\n        require(\\r\\n            (depositProof.totalAmount() == 0) &&\\r\\n                (withdrawalProof.totalAmount() == 0),\\r\\n            \\\"Every.finance: requests on pending\\\"\\r\\n        );\\r\\n        if (asset_ != address(0)) {\\r\\n            (bool success_, uint8 assetDecimals_) = AssetTransfer\\r\\n                .tryGetAssetDecimals(IERC20(asset_));\\r\\n            require(success_, \\\"Every.finance: no decimal\\\");\\r\\n            require(\\r\\n                assetDecimals_ <= uint8(18),\\r\\n                \\\"Every.finance: max decimal\\\"\\r\\n            );\\r\\n        }\\r\\n        asset = asset_;\\r\\n        emit UpdateAsset(asset_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update eventBatchSize (maximum  number of investors to be validate by batch).\\r\\n     * @param eventBatchSize_  new eventBatchSize number.\\r\\n     * Emits an {UpdateEventBatchSize} event indicating the updated eventBatchSize `eventBatchSize_`.\\r\\n     */\\r\\n    function updateEventBatchSize(\\r\\n        uint256 eventBatchSize_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(eventBatchSize_ != 0, \\\"Every.finance: zero value\\\");\\r\\n        eventBatchSize = eventBatchSize_;\\r\\n        emit UpdateEventBatchSize(eventBatchSize_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update ManagementFeeLastTime.\\r\\n     */\\r\\n    function updateManagementFeeLastTime(uint256 managementFeeLastTime_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        managementFeeLastTime = managementFeeLastTime_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update TokenPriceMean.\\r\\n     */\\r\\n    function updateTokenPriceMean(uint256 tokenPriceMean_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        tokenPriceMean = tokenPriceMean_;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev get the last price of asset.\\r\\n     */\\r\\n    function getAssetPrice() public view returns (uint256, uint256) {\\r\\n        AggregatorV3Interface priceFeed_ = AggregatorV3Interface(assetOracle);\\r\\n            (\\r\\n                ,\\r\\n                /*uint80 roundID*/ int price_ /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n                ,\\r\\n                ,\\r\\n\\r\\n            ) = priceFeed_.latestRoundData();\\r\\n            require(price_ > 0, \\\"Every.finance: invalid price\\\");\\r\\n            uint8 decimals_ = priceFeed_.decimals();\\r\\n            return (uint256(price_), decimals_);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev start new event (manager cycle validation).\\r\\n     * Emits an {UpdateStartNextEvent} event with token price `tokenPrice` and next event id `currentEventId`.\\r\\n     *\\r\\n     */\\r\\n    function startNextEvent() external onlyRole(MANAGER) {\\r\\n        (tokenPrice, ) = management.tokenPrice();\\r\\n        currentEventId += 1;\\r\\n        emit StartNextEvent(tokenPrice, currentEventId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev validate investor deposit requests by the manager.\\r\\n     * The deposit request consists of minting the required amount of yield-bearing token for the investor, and\\r\\n     * decreasing his pending request amount by an equivalent amount.\\r\\n     * If the deposit request is fully validated (the pending request amount is zero), the corresponding proof is burned.\\r\\n     * @param tokenIds_ array of Proof tokens ids.\\r\\n     * @param maxdeposit_  max total amount of deposit asset to validate.\\r\\n     * Emits an {Validatedeposit} event with token id `tokenId_`, validate deposit asset amount\\r\\n     * `amountAsset_` and minted token amount `amountToken_`.\\r\\n     */\\r\\n    function validateDeposits(\\r\\n        uint256[] calldata tokenIds_,\\r\\n        uint256 maxdeposit_\\r\\n    )\\r\\n        external\\r\\n        whenNotPaused\\r\\n        onlyRole(MANAGER)\\r\\n        returns (uint256 newMaxdeposit_)\\r\\n    {\\r\\n        uint256 amountAsset_;\\r\\n        uint256 amountAssetTotal_;\\r\\n        uint256 amountToken_;\\r\\n        uint256 amountTokenTotal_;\\r\\n        uint256 tokenId_;\\r\\n        uint256 size_ = tokenIds_.length;\\r\\n        uint256 totalSupplyToken_ = token.totalSupply();\\r\\n        address owner_;\\r\\n        require(size_ != 0, \\\"Every.finance: size is zero\\\");\\r\\n        require(size_ <= eventBatchSize, \\\"Every.finance: max size\\\");\\r\\n        (uint256 assetPrice_, uint256 decimal_) = getAssetPrice();\\r\\n        for (uint256 i = 0; i < size_; ) {\\r\\n            tokenId_ = tokenIds_[i];\\r\\n            owner_ = depositProof.ownerOf(tokenId_);\\r\\n            require(owner_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n            if (!isValidPrice(depositProof, tokenId_)) {\\r\\n                depositProof.updateEventId(tokenId_, currentEventId);\\r\\n            } else {\\r\\n                if (maxdeposit_ <= amountAssetTotal_) {\\r\\n                    break;\\r\\n                }\\r\\n                depositProof.preValidatePendingRequest(\\r\\n                    tokenId_,\\r\\n                    currentEventId\\r\\n                );\\r\\n                (amountAsset_, , , , ) = depositProof.pendingRequests(tokenId_);\\r\\n                amountAsset_ = Math.min(\\r\\n                    maxdeposit_ - amountAssetTotal_,\\r\\n                    amountAsset_\\r\\n                );\\r\\n                amountToken_ = Math.mulDiv(\\r\\n                    amountAsset_,\\r\\n                    FeeMinter.SCALING_FACTOR * assetPrice_,\\r\\n                    tokenPrice  * (10 ** decimal_)\\r\\n                );\\r\\n                if (\\r\\n                    (owner_ == address(managementParity)) && (amountAsset_ != 0)\\r\\n                ) {\\r\\n                    managementParity.setDepositData(\\r\\n                        amountToken_,\\r\\n                        amountAsset_,\\r\\n                        id\\r\\n                    );\\r\\n                }\\r\\n                unchecked {\\r\\n                    amountAssetTotal_ += amountAsset_;\\r\\n                }\\r\\n                if (amountToken_ != 0) {\\r\\n                    token.mint(owner_, amountToken_);\\r\\n                    amountTokenTotal_ += amountToken_;\\r\\n                }\\r\\n                depositProof.validatePendingRequest(\\r\\n                    tokenId_,\\r\\n                    amountAsset_,\\r\\n                    currentEventId\\r\\n                );\\r\\n\\r\\n                emit Validatedeposit(tokenId_, amountAsset_, amountToken_);\\r\\n            }\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n        unchecked {\\r\\n            newMaxdeposit_ = maxdeposit_ - amountAssetTotal_;\\r\\n        }\\r\\n        if (amountTokenTotal_ != 0) {\\r\\n            tokenPriceMean =\\r\\n                ((totalSupplyToken_ * tokenPriceMean) +\\r\\n                    (amountTokenTotal_ * tokenPrice)) /\\r\\n                (totalSupplyToken_ + amountTokenTotal_);\\r\\n        }\\r\\n        if (managementFeeLastTime == 0) {\\r\\n            managementFeeLastTime = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev validate investor withdrawal requests by the manager.\\r\\n     * The deposit request consists of sending the required amount of asset to the investor, and\\r\\n     * burning the equivalent amount in yield-bearing token.\\r\\n     * If the withdrawal request is fully validated (the pending request amount is zero), the corresponding proof is burned.\\r\\n     * @param tokenIds_ array of Proof tokens ids.\\r\\n     * @param maxwithdrawal_  max total amount of withdrawal to validate.\\r\\n     * Emits an {ValidateWithdrawal} event with token id `tokenId_`, validate withdrawal asset amount\\r\\n     * `amountAsset_` and burned token amount `amountToken_`.\\r\\n     */\\r\\n    function validateWithdrawals(\\r\\n        uint256[] calldata tokenIds_,\\r\\n        uint256 maxwithdrawal_\\r\\n    )\\r\\n        external\\r\\n        whenNotPaused\\r\\n        onlyRole(MANAGER)\\r\\n        returns (uint256 _newMaxwithdrawal)\\r\\n    {\\r\\n        uint256 amountToken_;\\r\\n        uint256 amountTokenTotal_;\\r\\n        uint256 amountAsset_;\\r\\n        uint256 size_ = tokenIds_.length;\\r\\n        uint256 tokenId_;\\r\\n        address owner_;\\r\\n        require(size_ != 0, \\\"Every.finance: size is zero\\\");\\r\\n        require(size_ <= eventBatchSize, \\\"Every.finance: max size\\\");\\r\\n        uint256 amountTotal_ = withdrawalProof.totalAmount();\\r\\n        (uint256 assetPrice_, uint256 decimal_) = getAssetPrice();\\r\\n        for (uint256 i = 0; i < size_; ) {\\r\\n            tokenId_ = tokenIds_[i];\\r\\n            owner_ = withdrawalProof.ownerOf(tokenId_);\\r\\n            require(owner_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n            if (!isValidPrice(withdrawalProof, tokenId_)) {\\r\\n                withdrawalProof.updateEventId(tokenId_, currentEventId);\\r\\n            } else {\\r\\n                withdrawalProof.preValidatePendingRequest(\\r\\n                    tokenId_,\\r\\n                    currentEventId\\r\\n                );\\r\\n                (amountToken_, , , , ) = withdrawalProof.pendingRequests(\\r\\n                    tokenId_\\r\\n                );\\r\\n                amountToken_ = Math.min(\\r\\n                    Math.mulDiv(maxwithdrawal_, amountToken_, amountTotal_),\\r\\n                    amountToken_\\r\\n                );\\r\\n                unchecked {\\r\\n                    amountTokenTotal_ += amountToken_;\\r\\n                }\\r\\n                amountAsset_ = Math.mulDiv(\\r\\n                    amountToken_,\\r\\n                    tokenPrice * (10 ** decimal_),\\r\\n                    FeeMinter.SCALING_FACTOR * assetPrice_\\r\\n                );\\r\\n                if (\\r\\n                    (owner_ == address(managementParity)) && (amountToken_ != 0)\\r\\n                ) {\\r\\n                    managementParity.setWithdrawalData(\\r\\n                        amountAsset_,\\r\\n                        amountToken_,\\r\\n                        id\\r\\n                    );\\r\\n                }\\r\\n                withdrawalProof.validatePendingRequest(\\r\\n                    tokenId_,\\r\\n                    amountToken_,\\r\\n                    currentEventId\\r\\n                );\\r\\n                if (amountAsset_ != 0) {\\r\\n                    AssetTransfer.transfer(owner_, amountAsset_, asset);\\r\\n                }\\r\\n\\r\\n                emit Validatewithdrawal(tokenId_, amountToken_, amountAsset_);\\r\\n            }\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n        unchecked {\\r\\n            _newMaxwithdrawal = maxwithdrawal_ - amountTokenTotal_;\\r\\n        }\\r\\n\\r\\n        if ((amountTokenTotal_) != 0) {\\r\\n            token.burn(address(this), amountTokenTotal_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev make a deposit request by the investor.\\r\\n     * the investor sends an amount of asset to the smart contracts and deposit fee to the treasury.\\r\\n     * the investor receives or updates his deposit Proof {ERC721}.\\r\\n     * @param account_ investor'address.\\r\\n     * @param tokenId_ token id of the deposit Proof (if tokenId_ == 0, then a new token is minted).\\r\\n     * @param amount_ amount of asset to deposit.\\r\\n     * @param minPrice_ minimum price of yield-bearing token to be accepted.\\r\\n     * @param maxPrice_ maximum price of yield-bearing token to be accepted.\\r\\n     * @param maxFee_ maximum deposit fee to be accepted.\\r\\n     * Emits an {DepositRequest} event with account `account_` and  amount `amount_`.\\r\\n     */\\r\\n    function depositRequest(\\r\\n        address account_,\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 minPrice_,\\r\\n        uint256 maxPrice_,\\r\\n        uint256 maxFee_\\r\\n    ) external payable whenNotPaused {\\r\\n        uint256 fee_;\\r\\n        require(amount_ != 0, \\\"Transformative Fi: zero amount\\\");\\r\\n        if (account_ != address(managementParity)) {\\r\\n            require(\\r\\n                amount_ >= management.minDepositAmount(),\\r\\n                \\\"Every.finance: min depositProof Amount\\\"\\r\\n            );\\r\\n            fee_ = getDepositFee(amount_);\\r\\n            require(fee_ <= maxFee_, \\\"Every.finance: max allowed fee\\\");\\r\\n            amount_ -= fee_;\\r\\n        }\\r\\n        require(\\r\\n            (minPrice_ <= maxPrice_) && (maxPrice_ != 0),\\r\\n            \\\"Every.finance: wrong prices\\\"\\r\\n        );\\r\\n        if (tokenId_ == 0) {\\r\\n            depositProofTokenId += 1;\\r\\n            depositProof.mint(\\r\\n                account_,\\r\\n                depositProofTokenId,\\r\\n                amount_,\\r\\n                minPrice_,\\r\\n                maxPrice_,\\r\\n                currentEventId\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                depositProof.ownerOf(tokenId_) == account_,\\r\\n                \\\"Every.finance: account is not owner\\\"\\r\\n            );\\r\\n\\r\\n            if (account_ != _msgSender()) {\\r\\n                (\\r\\n                    ,\\r\\n                    ,\\r\\n                    uint256 minPriceOld_,\\r\\n                    uint256 maxPriceOld_,\\r\\n\\r\\n                ) = depositProof.pendingRequests(tokenId_);\\r\\n                require(\\r\\n                    (minPrice_ == minPriceOld_) && (maxPrice_ == maxPriceOld_),\\r\\n                    \\\"Every.finance: prices don't match\\\"\\r\\n                );\\r\\n            }\\r\\n            depositProof.increasePendingRequest(\\r\\n                tokenId_,\\r\\n                amount_,\\r\\n                minPrice_,\\r\\n                maxPrice_,\\r\\n                currentEventId\\r\\n            );\\r\\n        }\\r\\n        if (asset != address(0)) {\\r\\n            AssetTransfer.transferFrom(\\r\\n                _msgSender(),\\r\\n                address(this),\\r\\n                amount_ + fee_,\\r\\n                IERC20(asset)\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                (msg.value == amount_ + fee_),\\r\\n                \\\"Every.finance: no required amount\\\"\\r\\n            );\\r\\n        }\\r\\n        if (fee_ > 0) {\\r\\n            AssetTransfer.transfer(management.treasury(), fee_, asset);\\r\\n        }\\r\\n        emit DepositRequest(account_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev cancel a deposit request by the investor.\\r\\n     * the investor can cancel a full or partial amount of his deposit.\\r\\n     * the investor burns or updates his deposit Proof {ERC721}.\\r\\n     * @param tokenId_ token id of the deposit Proof (if tokenId_ == 0, then a new token is minted).\\r\\n     * @param amount_ amount of asset to cancel.\\r\\n     * Emits an {CancelDepositRequest} event with the caller and  amount `amount_`.\\r\\n     */\\r\\n    function cancelDepositRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_\\r\\n    ) external whenNotPaused {\\r\\n        require(\\r\\n            management.isCancelDeposit(),\\r\\n            \\\"Every.finance: no deposit cancel\\\"\\r\\n        );\\r\\n        require(amount_ != 0, \\\"Transformative Fi: zero amount\\\");\\r\\n        require(\\r\\n            depositProof.ownerOf(tokenId_) == _msgSender(),\\r\\n            \\\"Every.finance: caller is not owner\\\"\\r\\n        );\\r\\n        depositProof.decreasePendingRequest(tokenId_, amount_, currentEventId);\\r\\n        AssetTransfer.transfer(_msgSender(), amount_, asset);\\r\\n        emit CancelDepositRequest(_msgSender(), amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev make a withdrawal request by the investor.\\r\\n     * the investor sends an amount of yield-bearing token to the smart contracts and withdrawal fee to the treasury.\\r\\n     * the investor receives or updates his withdrawal Proof {ERC721}.\\r\\n     * @param tokenId_ token id of the withdrawal Proof (if tokenId_ == 0, then a new token is minted).\\r\\n     * @param amount_ amount of yield-bearing token to withdraw.\\r\\n     * @param minPrice_ minimum price of yield-bearing token to be accepted.\\r\\n     * @param maxPrice_ maximum price of yield-bearing token to be accepted.\\r\\n     * @param maxFee_ maximum withdrawal fee to be accepted.\\r\\n     * Emits an {WithdrawalRequest} event with account `account_` and  amount `amount_`.\\r\\n     */\\r\\n    function withdrawalRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 minPrice_,\\r\\n        uint256 maxPrice_,\\r\\n        uint256 maxFee_\\r\\n    ) external whenNotPaused {\\r\\n        require(amount_ != 0, \\\"Transformative Fi: zero amount\\\");\\r\\n        uint256 fee_;\\r\\n        require(\\r\\n            token.balanceOf(_msgSender()) >= amount_,\\r\\n            \\\"Transformative Fi: amount exceeds balance\\\"\\r\\n        );\\r\\n        if (_msgSender() != address(managementParity)) {\\r\\n            uint256 holdTime_ = token.getHoldTime(_msgSender());\\r\\n            fee_ =\\r\\n                (management.getWithdrawalFeeRate(holdTime_) * amount_) /\\r\\n                FeeMinter.SCALING_FACTOR;\\r\\n\\r\\n            require(fee_ <= maxFee_, \\\"Every.finance: max allowed fee\\\");\\r\\n            amount_ = amount_ - fee_;\\r\\n        }\\r\\n        require(\\r\\n            (minPrice_ <= maxPrice_) && (maxPrice_ != 0),\\r\\n            \\\"Every.finance: wrong prices\\\"\\r\\n        );\\r\\n        if (tokenId_ == 0) {\\r\\n            withdrawalProofTokenId += 1;\\r\\n            withdrawalProof.mint(\\r\\n                _msgSender(),\\r\\n                withdrawalProofTokenId,\\r\\n                amount_,\\r\\n                minPrice_,\\r\\n                maxPrice_,\\r\\n                currentEventId\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                withdrawalProof.ownerOf(tokenId_) == _msgSender(),\\r\\n                \\\"Every.finance: caller is not owner\\\"\\r\\n            );\\r\\n\\r\\n            withdrawalProof.increasePendingRequest(\\r\\n                tokenId_,\\r\\n                amount_,\\r\\n                minPrice_,\\r\\n                maxPrice_,\\r\\n                currentEventId\\r\\n            );\\r\\n        }\\r\\n        token.transferFrom(_msgSender(), address(this), amount_);\\r\\n        if (fee_ != 0) {\\r\\n            token.transferFrom(_msgSender(), management.treasury(), fee_);\\r\\n        }\\r\\n        emit WithdrawalRequest(_msgSender(), amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev cancel a withdrawal request by the investor.\\r\\n     * the investor can cancel a full or partial amount of his withdrawal.\\r\\n     * the investor burns or updates his withdrawal Proof {ERC721}.\\r\\n     * @param tokenId_ token id of the withdrawal Proof (if tokenId_ == 0, then a new token is minted).\\r\\n     * @param amount_ amount of yield-bearing token to cancel.\\r\\n     * Emits an {CancelWithdrawalRequest} event with the caller and  amount `amount_`.\\r\\n     */\\r\\n    function cancelWithdrawalRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_\\r\\n    ) external whenNotPaused {\\r\\n        require(\\r\\n            management.isCancelWithdrawal(),\\r\\n            \\\"Every.finance: no withdrawal cancel\\\"\\r\\n        );\\r\\n        require(amount_ != 0, \\\"Transformative Fi: zero amount\\\");\\r\\n        require(\\r\\n            withdrawalProof.ownerOf(tokenId_) == _msgSender(),\\r\\n            \\\"Every.finance: caller is not owner\\\"\\r\\n        );\\r\\n        withdrawalProof.decreasePendingRequest(\\r\\n            tokenId_,\\r\\n            amount_,\\r\\n            currentEventId\\r\\n        );\\r\\n        token.transfer(_msgSender(), amount_);\\r\\n        emit CancelWithdrawalRequest(_msgSender(), amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Send asset to the SafeHouse by the manager.\\r\\n     * @param amount_ amount to send.\\r\\n     */\\r\\n    function sendToSafeHouse(\\r\\n        uint256 amount_\\r\\n    ) external whenNotPaused onlyRole(MANAGER) {\\r\\n        require(amount_ != 0, \\\"Every.finance: zero amount\\\");\\r\\n        address safeHouse_ = management.safeHouse();\\r\\n        require(safeHouse_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        AssetTransfer.transfer(safeHouse_, amount_, asset);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev mint Performance fee by the manager\\r\\n     * performance fee are minted in yield-bearing token.\\r\\n     */\\r\\n    function mintPerformanceFee() external onlyRole(MANAGER) {\\r\\n        (uint256 tokenPrice_, ) = management.tokenPrice();\\r\\n        uint256 performanceFeeRate_ = management.performanceFeeRate();\\r\\n        address treasury_ = management.treasury();\\r\\n        uint256 performanceFee_;\\r\\n        (tokenPriceMean, performanceFee_) = FeeMinter.mintPerformanceFee(\\r\\n            tokenPrice_,\\r\\n            tokenPriceMean,\\r\\n            performanceFeeRate_,\\r\\n            treasury_,\\r\\n            address(token)\\r\\n        );\\r\\n        lastPerformanceFee = performanceFee_;\\r\\n        totalPerformanceFee += performanceFee_;\\r\\n        emit MintPerformanceFee(performanceFee_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev mint management fee by the manager\\r\\n     * management fee are minted in yield-bearing token.\\r\\n     */\\r\\n    function mintManagementFee() external onlyRole(MANAGER) {\\r\\n        uint256 managementFeeRate_ = management.managementFeeRate();\\r\\n        address treasury_ = management.treasury();\\r\\n        uint256 managementFee_;\\r\\n        (managementFeeLastTime, managementFee_) = FeeMinter.mintManagementFee(\\r\\n            managementFeeLastTime,\\r\\n            managementFeeRate_,\\r\\n            treasury_,\\r\\n            address(token)\\r\\n        );\\r\\n        lastManagementFee = managementFee_;\\r\\n        totalManagementFee += managementFee_;\\r\\n        emit MintManagementFee(managementFee_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev mint or burn Investment fee by the manager\\r\\n     * Investment fee are minted (negative fee) Or bunred (positive fee) in yield-bearing token.\\r\\n     * @param amount_ amount of negative/positive fee.\\r\\n     * @param isFee_ true if negative fee, false otherwise.\\r\\n     */\\r\\n    function mintOrBurnInvestmentFee(\\r\\n        uint256 amount_,\\r\\n        bool isFee_\\r\\n    ) external payable onlyRole(MANAGER) returns (uint256 remainingAmount_) {\\r\\n        (uint256 tokenPrice_, ) = management.tokenPrice();\\r\\n        address treasury_ = management.treasury();\\r\\n        remainingAmount_ = FeeMinter.MintInvestmentFee(\\r\\n            amount_,\\r\\n            tokenPrice_,\\r\\n            isFee_,\\r\\n            payable(treasury_),\\r\\n            address(token),\\r\\n            asset\\r\\n        );\\r\\n\\r\\n        emit MintOrBurnInvestmentFee(amount_, isFee_, remainingAmount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get deposit fee for a deposit amount `amount_`\\r\\n     * @param amount_ amount in asset to deposit by the investor.\\r\\n     */\\r\\n    function getDepositFee(uint256 amount_) public view returns (uint256) {\\r\\n        return management.getDepositFee(amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get  yield-bearing token price.\\r\\n     */\\r\\n    function getTokenPrice() public view returns (uint256 price_) {\\r\\n        (price_, ) = management.tokenPrice();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev verify if the price bounds of deposit/withdrawal pending request are valid.\\r\\n     * @param proof_ Proof contract'address.\\r\\n     * @param tokenId_  token id of the pending request.\\r\\n     * @return isValid_ true if price bounds are valid , fase otherwise.\\r\\n     */\\r\\n    function isValidPrice(\\r\\n        Proof proof_,\\r\\n        uint256 tokenId_\\r\\n    ) public view returns (bool isValid_) {\\r\\n        (, , uint256 minPrice_, uint256 maxPrice_, ) = proof_.pendingRequests(\\r\\n            tokenId_\\r\\n        );\\r\\n        isValid_ = (minPrice_ <= tokenPrice) && (maxPrice_ >= tokenPrice);\\r\\n    }\\r\\n\\r\\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/Management.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the contract Management.\\r\\n * It allows the manager to set the different parameters of the product.\\r\\n */\\r\\ncontract Management is AccessControlEnumerable {\\r\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\r\\n    bytes32 public constant ORACLE = keccak256(\\\"ORACLE\\\");\\r\\n    uint256 public constant SCALING_FACTOR = 1e8;\\r\\n\\r\\n    struct Fee {\\r\\n        uint256 rate;\\r\\n        uint256 time;\\r\\n    }\\r\\n\\r\\n    struct Price {\\r\\n        uint256 value;\\r\\n        uint256 time;\\r\\n    }\\r\\n\\r\\n    struct DepositFee {\\r\\n        uint256 rate;\\r\\n        uint256 minValue;\\r\\n        uint256 maxValue;\\r\\n    }\\r\\n\\r\\n    uint256 public managementFeeRate;\\r\\n    uint256 public performanceFeeRate;\\r\\n    uint256 public minDepositAmount;\\r\\n    Price public tokenPrice;\\r\\n    DepositFee public depositFee;\\r\\n    Fee[] public withdrawalFee;\\r\\n    bool public isCancelDeposit;\\r\\n    bool public isCancelWithdrawal;\\r\\n    address public treasury;\\r\\n    address public safeHouse;\\r\\n\\r\\n    event UpdateTreasury(address indexed treasury_);\\r\\n    event UpdateSafeHouse(address indexed safeHouse_);\\r\\n    event UpdateIsCancelDeposit(bool iscancelDeposit_);\\r\\n    event UpdateIsCancelWithdrawal(bool isWithdrawalCancel_);\\r\\n    event UpdateDepositFee(uint256 rate_, uint256 minValue_, uint256 maxValue_);\\r\\n    event UpdateManagementFeeRate(uint256 managementFeeRate_);\\r\\n    event UpdatePerformanceFeeRate(uint256 performanceFeeRate_);\\r\\n    event UpdateMinDepositAmount(uint256 minDepositAmount_);\\r\\n    event UpdateTokenPrice(Price price_);\\r\\n    event AddWithdrawalFee(uint256 rate_, uint256 time_);\\r\\n    event UpdateWithdrawalFee(uint256 index_, uint256 rate_, uint256 time_);\\r\\n    event DeleteLastWithdrawalFee(uint256 rate_, uint256 time_);\\r\\n\\r\\n    constructor(address admin_, address manager_, address treasury_) {\\r\\n        require(admin_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(manager_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(treasury_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        treasury = treasury_;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\r\\n        _setupRole(MANAGER, manager_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update treasury.\\r\\n     * @param treasury_.\\r\\n     * Emits an {UpdateTreasury} event indicating the updated treasury `treasury_`.\\r\\n     */\\r\\n    function updateTreasury(\\r\\n        address treasury_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(treasury_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(treasury != treasury_, \\\"Every.finance: no change\\\");\\r\\n        treasury = treasury_;\\r\\n        emit UpdateTreasury(treasury_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update safeHouse.\\r\\n     * @param safeHouse_.\\r\\n     * Emits an {UpdateSafeHouse} event indicating the updated safeHouse `safeHouse_`.\\r\\n     */\\r\\n    function updateSafeHouse(\\r\\n        address safeHouse_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(safeHouse_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(safeHouse != safeHouse_, \\\"Every.finance: no change\\\");\\r\\n        safeHouse = safeHouse_;\\r\\n        emit UpdateSafeHouse(safeHouse_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update isCancelDeposit.\\r\\n     * @param  isCancelDeposit_.\\r\\n     * Emits an {UpdateIsCancelDeposit} event indicating the updated  isCancelDeposit ` isCancelDeposit_`.\\r\\n     */\\r\\n    function updateIsCancelDeposit(\\r\\n        bool isCancelDeposit_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(\\r\\n            isCancelDeposit_ != isCancelDeposit,\\r\\n            \\\"Every.finance: no change\\\"\\r\\n        );\\r\\n        isCancelDeposit = isCancelDeposit_;\\r\\n        emit UpdateIsCancelDeposit(isCancelDeposit_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update isCancelWithdrawal.\\r\\n     * @param  isCancelWithdrawal_.\\r\\n     * Emits an {UpdateIsCancelWithdrawal} event indicating the updated  isCancelWithdrawal ` isCancelWithdrawal_`.\\r\\n     */\\r\\n    function updateIsCancelWithdrawal(\\r\\n        bool isCancelWithdrawal_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(\\r\\n            isCancelWithdrawal_ != isCancelWithdrawal,\\r\\n            \\\"Every.finance: no change\\\"\\r\\n        );\\r\\n        isCancelWithdrawal = isCancelWithdrawal_;\\r\\n        emit UpdateIsCancelWithdrawal(isCancelWithdrawal_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update depositFee.\\r\\n     * @param  rate_.\\r\\n     * @param  minValue_.\\r\\n     * @param  maxValue_.\\r\\n     * Emits an {UpdateDepositFee} event indicating the updated rate `rate_`, min value `minValue_`\\r\\n     * and max value `maxValue_`\\r\\n     */\\r\\n    function updateDepositFee(\\r\\n        uint256 rate_,\\r\\n        uint256 minValue_,\\r\\n        uint256 maxValue_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(rate_ <= SCALING_FACTOR, \\\"Every.finance: out of range\\\");\\r\\n        require(\\r\\n            minValue_ <= maxValue_,\\r\\n            \\\"Every.finance: wrong min max values\\\"\\r\\n        );\\r\\n        depositFee = DepositFee(rate_, minValue_, maxValue_);\\r\\n        emit UpdateDepositFee(rate_, minValue_, maxValue_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update managementFeeRate.\\r\\n     * @param managementFeeRate_.\\r\\n     * Emits an {UpdateManagementFeeRate} event indicating the updated managementFeeRate `managementFeeRate_`.\\r\\n     */\\r\\n\\r\\n    function updateManagementFeeRate(\\r\\n        uint256 managementFeeRate_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(\\r\\n            managementFeeRate_ <= SCALING_FACTOR,\\r\\n            \\\"Every.finance: out of range\\\"\\r\\n        );\\r\\n        managementFeeRate = managementFeeRate_;\\r\\n        emit UpdateManagementFeeRate(managementFeeRate_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update performanceFeeRate.\\r\\n     * @param performanceFeeRate_.\\r\\n     * Emits an {UpdatePerformanceFeeRate} event indicating the updated performanceFeeRate `performanceFeeRate_`.\\r\\n     */\\r\\n\\r\\n    function updatePerformanceFeeRate(\\r\\n        uint256 performanceFeeRate_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(\\r\\n            performanceFeeRate_ <= SCALING_FACTOR,\\r\\n            \\\"Every.finance: out of range\\\"\\r\\n        );\\r\\n        performanceFeeRate = performanceFeeRate_;\\r\\n        emit UpdatePerformanceFeeRate(performanceFeeRate_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update MinDepositAmount.\\r\\n     * @param minDepositAmount_.\\r\\n     * Emits an {UpdateMinDepositAmount} event indicating the updated minDepositAmount `minDepositAmount_`.\\r\\n     */\\r\\n\\r\\n    function updateMinDepositAmount(\\r\\n        uint256 minDepositAmount_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(\\r\\n            depositFee.minValue <= minDepositAmount_,\\r\\n            \\\"Every.finance: lower than min deposit fee\\\"\\r\\n        );\\r\\n        minDepositAmount = minDepositAmount_;\\r\\n        emit UpdateMinDepositAmount(minDepositAmount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update tokenPrice.\\r\\n     * @param price_.\\r\\n     * Emits an {UpdateTokenPrice} event indicating the updated tokenPrice.\\r\\n     */\\r\\n    function updateTokenPrice(uint256 price_) external onlyRole(ORACLE) {\\r\\n        require(price_ != 0, \\\"Every.finance: zero price\\\");\\r\\n        tokenPrice = Price(price_, block.timestamp);\\r\\n        emit UpdateTokenPrice(tokenPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add a new withdrawal fee.\\r\\n     * @param rate_.\\r\\n     * @param time_.\\r\\n     * Emits an {AddWithdrawalFee} event with feeRate `rate_` and feePeriod `time_`.\\r\\n     */\\r\\n\\r\\n    function addWithdrawalFee(\\r\\n        uint256 rate_,\\r\\n        uint256 time_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(rate_ <= SCALING_FACTOR, \\\"Every.finance: out of range\\\");\\r\\n        uint256 size_ = withdrawalFee.length;\\r\\n        if (size_ != 0) {\\r\\n            require(\\r\\n                withdrawalFee[size_ - 1].time < time_,\\r\\n                \\\"Every.finance: times don't match\\\"\\r\\n            );\\r\\n            require(\\r\\n                withdrawalFee[size_ - 1].rate > rate_,\\r\\n                \\\"Every.finance: fee rates don't match\\\"\\r\\n            );\\r\\n        }\\r\\n        withdrawalFee.push(Fee(rate_, time_));\\r\\n        emit AddWithdrawalFee(rate_, time_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update withdrawal fee.\\r\\n     * @param index_ index of array withdrawalFee to be updated.\\r\\n     * @param rate_ new fee.\\r\\n     * @param time_ new period.\\r\\n     * Emits an {UpdateWithdrawalFee} event with `index_`, `rate_`, and 'time_'.\\r\\n     */\\r\\n\\r\\n    function updateWithdrawalFee(\\r\\n        uint256 index_,\\r\\n        uint256 rate_,\\r\\n        uint256 time_\\r\\n    ) external onlyRole(MANAGER) {\\r\\n        require(rate_ <= SCALING_FACTOR, \\\"Every.finance: out of range\\\");\\r\\n        uint256 size_ = withdrawalFee.length;\\r\\n        require(index_ < size_, \\\"Every.finance: out of size\\\");\\r\\n        if (index_ != 0) {\\r\\n            require(\\r\\n                withdrawalFee[index_ - 1].time < time_,\\r\\n                \\\"Every.finance: times don't match\\\"\\r\\n            );\\r\\n            require(\\r\\n                withdrawalFee[index_ - 1].rate > rate_,\\r\\n                \\\"Every.finance: fee rates don't match\\\"\\r\\n            );\\r\\n        }\\r\\n        if (index_ < size_ - 1) {\\r\\n            require(\\r\\n                withdrawalFee[index_ + 1].time > time_,\\r\\n                \\\"Every.finance: times don't match\\\"\\r\\n            );\\r\\n            require(\\r\\n                withdrawalFee[index_ + 1].rate < rate_,\\r\\n                \\\"Every.finance: fee rates don't match\\\"\\r\\n            );\\r\\n        }\\r\\n        withdrawalFee[index_] = Fee(rate_, time_);\\r\\n        emit UpdateWithdrawalFee(index_, rate_, time_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev delete last fee from  withdrawalFee.\\r\\n     * Emits an {DeleteLastWithdrawalFee} event with the removed fee.\\r\\n     */\\r\\n\\r\\n    function deleteLastWithdrawalFee() external onlyRole(MANAGER) {\\r\\n        uint256 size_ = withdrawalFee.length;\\r\\n        require(size_ != 0, \\\"Every.finance. array is empty\\\");\\r\\n        Fee memory fee_ = withdrawalFee[size_ - 1];\\r\\n        withdrawalFee.pop();\\r\\n        emit DeleteLastWithdrawalFee(fee_.rate, fee_.time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculate withdrawal fee rate.\\r\\n     * @param holdTime_ hold time of the yield-bearing tokens.\\r\\n     */\\r\\n\\r\\n    function calculateWithdrawalFeeRate(\\r\\n        uint256 holdTime_\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 size_ = withdrawalFee.length;\\r\\n        require(block.timestamp >= holdTime_, \\\"Every.finance: max time\\\");\\r\\n        uint256 deltaTime_;\\r\\n        unchecked {\\r\\n            deltaTime_ = block.timestamp - holdTime_;\\r\\n        }\\r\\n        if (size_ == 0) {\\r\\n            return 0;\\r\\n        } else if (deltaTime_ <= withdrawalFee[0].time) {\\r\\n            return withdrawalFee[0].rate;\\r\\n        } else if (deltaTime_ > withdrawalFee[size_ - 1].time) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            uint256 time_;\\r\\n            Fee memory fee_;\\r\\n            for (uint256 i = 0; i < size_ - 1; ) {\\r\\n                time_ = withdrawalFee[i].time;\\r\\n                fee_ = withdrawalFee[i + 1];\\r\\n                if ((deltaTime_ > time_) && (deltaTime_ <= fee_.time)) {\\r\\n                    return fee_.rate;\\r\\n                }\\r\\n                unchecked {\\r\\n                    i++;\\r\\n                }\\r\\n            }\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get deposit fee.\\r\\n     * @param amount_ deposit amount.\\r\\n     * @return fee_ deposit fee.\\r\\n     */\\r\\n    function getDepositFee(uint256 amount_) public view returns (uint256 fee_) {\\r\\n        DepositFee memory depositFee_ = depositFee;\\r\\n        fee_ = Math.max(\\r\\n            Math.mulDiv(depositFee_.rate, amount_, SCALING_FACTOR),\\r\\n            depositFee_.minValue\\r\\n        );\\r\\n        fee_ = Math.min(fee_, depositFee_.maxValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get token price.\\r\\n     */\\r\\n    function getTokenPrice() public view returns (Price memory) {\\r\\n        return tokenPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get withdrawal fee rate.\\r\\n     * @param holdTime_ hold time of the yield-bearing tokens.\\r\\n     * @return feeRate_ withdrawal fee rate.\\r\\n     */\\r\\n    function getWithdrawalFeeRate(\\r\\n        uint256 holdTime_\\r\\n    ) public view returns (uint256 feeRate_) {\\r\\n        feeRate_ = calculateWithdrawalFeeRate(holdTime_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get withdrawal fee.\\r\\n     * @param index_ index of array withdrawal fee.\\r\\n     * @return fee_ withdrawal fee.\\r\\n     */\\r\\n    function getWithdrawalFee(\\r\\n        uint256 index_\\r\\n    ) public view returns (Fee memory fee_) {\\r\\n        require(\\r\\n            index_ < withdrawalFee.length,\\r\\n            \\\"Every.finance. out of size\\\"\\r\\n        );\\r\\n        fee_ = withdrawalFee[index_];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get withdrawalFee size.\\r\\n     */\\r\\n\\r\\n    function getWithdrawalFeeSize() public view returns (uint256) {\\r\\n        return withdrawalFee.length;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/Proof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"../libraries/PendingRequest.sol\\\";\\r\\nimport \\\"../interfaces/IMetadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the investor's proof token {ERC721}.\\r\\n * We distinguish between deposit proof token and withdrawal proof token.\\r\\n * The investor receives the deposit/withdrawal proof token when he makes his deposit/withdrawal\\r\\n * request, waiting to be validated by the manager.\\r\\n */\\r\\n\\r\\ncontract Proof is ERC721Enumerable, Ownable, AccessControlEnumerable {\\r\\n    using Strings for uint256;\\r\\n    using PendingRequest for PendingRequestData;\\r\\n\\r\\n    bytes32 public constant INVESTMENT = keccak256(\\\"INVESTMENT\\\");\\r\\n    uint256 public constant TOLERANCE_MAX = 1000; // To handel rounding errors\\r\\n    uint256 public totalAmount;\\r\\n    uint256 public tolerance;\\r\\n    uint8 public immutable id;\\r\\n    bool public isOnChainMetadata;\\r\\n    string public baseURI;\\r\\n    address public investment;\\r\\n    mapping(uint256 => PendingRequestData) public pendingRequests;\\r\\n    mapping(uint256 => uint256) public pendingIdIndex;\\r\\n    uint256[] public pendingIds;\\r\\n    IMetadata public metadata;\\r\\n\\r\\n    event UpdateInvestment(address indexed investment_);\\r\\n    event UpdateMetadata(address indexed metadata_);\\r\\n    event UpdateBaseURI(string baseURI_);\\r\\n    event UpdateTolerance(uint256 tolerance_);\\r\\n    event UpdateIsOnChainMetadata(bool isOnChainMetadata_);\\r\\n    event Mint(address indexed account_, uint256 tokenId_, uint256 amount_);\\r\\n    event Burn(uint256 tokenId_);\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 id_,\\r\\n        address admin_\\r\\n    ) ERC721(name_, symbol_) {\\r\\n        require(id_ <= 1, \\\"Every.finance: out of range\\\");\\r\\n        require(admin_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        id = id_;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get the size of array pendingIds.\\r\\n     */\\r\\n    function getPendingIdsSize() public view returns (uint256) {\\r\\n        return pendingIds.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update investment.\\r\\n     * @param investment_.\\r\\n     * Emits an {UpdateInvestment} event indicating the updated investment `investment_`.\\r\\n     */\\r\\n    function updateInvestment(\\r\\n        address investment_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(investment_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(investment_ != investment, \\\"Every.finance: no change\\\");\\r\\n        _revokeRole(INVESTMENT, investment);\\r\\n        _grantRole(INVESTMENT, investment_);\\r\\n        investment = investment_;\\r\\n        emit UpdateInvestment(investment_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update metadata.\\r\\n     * @param metadata_.\\r\\n     * Emits an {UpdateMetadata} event indicating the updated metadata `metadata_`.\\r\\n     */\\r\\n    function updateMetadata(\\r\\n        address metadata_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(metadata_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(metadata_ != address(metadata), \\\"Every.finance: no change\\\");\\r\\n        metadata = IMetadata(metadata_);\\r\\n        emit UpdateMetadata(metadata_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update baseURI.\\r\\n     * @param uri_ new baseURI.\\r\\n     * Emits an {UpdateBaseURI} event indicating the updated baseURI `uri_`.\\r\\n     */\\r\\n    function setBaseURI(\\r\\n        string calldata uri_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        baseURI = uri_;\\r\\n        emit UpdateBaseURI(uri_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update tolerance.\\r\\n     * @param tolerance_.\\r\\n     * Emits an {UpdateTolerance} event indicating the updated tolerance `tolerance_`.\\r\\n     */\\r\\n    function updateTolerance(\\r\\n        uint256 tolerance_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(tolerance_ <= TOLERANCE_MAX, \\\"Every.finance: tolerance max\\\");\\r\\n        require(tolerance_ != tolerance, \\\"Every.finance: no change\\\");\\r\\n        tolerance = tolerance_;\\r\\n        emit UpdateTolerance(tolerance_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update isOnChainMetadata.\\r\\n     * @param isOnChainMetadata_.\\r\\n     * Emits an {UpdateIsOnChainMetadata} event indicating the updated isOnChainMetadata `isOnChainMetadata_`.\\r\\n     */\\r\\n    function updateIsOnChainMetadata(\\r\\n        bool isOnChainMetadata_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            isOnChainMetadata != isOnChainMetadata_,\\r\\n            \\\"Every.finance: no change\\\"\\r\\n        );\\r\\n        isOnChainMetadata = isOnChainMetadata_;\\r\\n        emit UpdateIsOnChainMetadata(isOnChainMetadata_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev mint a Proof token.\\r\\n     * The investor receives a proof Token when he makes\\r\\n     * a deposit/withdrawal request.\\r\\n     * @param account_ investor's address.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param amount_ amount to mint.\\r\\n     * @param minPrice_ minimum price of the yield-bearing token.\\r\\n     * @param maxPrice_ maximum price  of the yield-bearing token\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     * Emits an {Mint} event with `account_`, `tokenId_`, and `amount`.\\r\\n     */\\r\\n    function mint(\\r\\n        address account_,\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 minPrice_,\\r\\n        uint256 maxPrice_,\\r\\n        uint256 currentEventId_\\r\\n    ) external onlyRole(INVESTMENT) {\\r\\n        _safeMint(account_, tokenId_);\\r\\n        pendingIds.push(tokenId_);\\r\\n        pendingIdIndex[tokenId_] = pendingIds.length - 1;\\r\\n        _increasePendingRequest(\\r\\n            tokenId_,\\r\\n            amount_,\\r\\n            minPrice_,\\r\\n            maxPrice_,\\r\\n            currentEventId_\\r\\n        );\\r\\n        emit Mint(account_, tokenId_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev increase the pending request balance of token `tokenId_` by `amount`.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param amount_ amount to add.\\r\\n     * @param minPrice_ minimum price of the yield-bearing token.\\r\\n     * @param maxPrice_ maximum price  of the yield-bearing token\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n\\r\\n    function increasePendingRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 minPrice_,\\r\\n        uint256 maxPrice_,\\r\\n        uint256 currentEventId_\\r\\n    ) external onlyRole(INVESTMENT) {\\r\\n        _increasePendingRequest(\\r\\n            tokenId_,\\r\\n            amount_,\\r\\n            minPrice_,\\r\\n            maxPrice_,\\r\\n            currentEventId_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev decrease the pending request balance of token `tokenId_` by `amount`.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param amount_ amount to remove.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function decreasePendingRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 currentEventId_\\r\\n    ) external onlyRole(INVESTMENT) {\\r\\n        _decreasePendingRequest(tokenId_, amount_, currentEventId_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update event Id\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param currentEventId_  current event Id.\\r\\n     */\\r\\n    function updateEventId(\\r\\n        uint256 tokenId_,\\r\\n        uint256 currentEventId_\\r\\n    ) external onlyRole(INVESTMENT) {\\r\\n        pendingRequests[tokenId_].updateEventId(currentEventId_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the locked and available pending balances before the manager validation.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function preValidatePendingRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 currentEventId_\\r\\n    ) external onlyRole(INVESTMENT) {\\r\\n        pendingRequests[tokenId_].preValidate(currentEventId_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the locked pending balance after the manager validation.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param amount_  amount to remove from the locked pending balance.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function validatePendingRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 currentEventId_\\r\\n    ) external onlyRole(INVESTMENT) {\\r\\n        pendingRequests[tokenId_].validate(amount_, currentEventId_);\\r\\n        _decreaseTotalAmount(tokenId_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  get tokenURI of token `tokenId`.\\r\\n     * If `isOnChainMetadata`, the token metadata is generated on chain.\\r\\n     *  Otherwise, see {IERC721Metadata-tokenURI}.\\r\\n     * @param tokenId  token id .\\r\\n     */\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n        if (isOnChainMetadata) {\\r\\n            return metadata.render(tokenId);\\r\\n        } else {\\r\\n            string memory string_ = _baseURI();\\r\\n            return\\r\\n                bytes(string_).length > 0\\r\\n                    ? string(abi.encodePacked(string_, tokenId.toString()))\\r\\n                    : \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override(ERC721Enumerable, AccessControlEnumerable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            ERC721Enumerable.supportsInterface(interfaceId) ||\\r\\n            AccessControlEnumerable.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev increase the pending request balance of token `tokenId_` by `amount`.\\r\\n     * This internal function is called when an investor makes a deposit/withdrawal request.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param amount_ amount to add.\\r\\n     * @param minPrice_ minimum price of the yield-bearing token.\\r\\n     * @param maxPrice_ maximum price  of the yield-bearing token\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n\\r\\n    function _increasePendingRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 minPrice_,\\r\\n        uint256 maxPrice_,\\r\\n        uint256 currentEventId_\\r\\n    ) internal {\\r\\n        pendingRequests[tokenId_].increase(\\r\\n            amount_,\\r\\n            minPrice_,\\r\\n            maxPrice_,\\r\\n            currentEventId_\\r\\n        );\\r\\n        totalAmount += amount_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev decrease the pending request balance of token `tokenId_` by `amount`.\\r\\n     * This internal function is called when an investor cancel a deposit/withdrawal request.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * @param amount_ amount to remove.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function _decreasePendingRequest(\\r\\n        uint256 tokenId_,\\r\\n        uint256 amount_,\\r\\n        uint256 currentEventId_\\r\\n    ) internal {\\r\\n        pendingRequests[tokenId_].decrease(amount_, currentEventId_);\\r\\n        _decreaseTotalAmount(tokenId_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev burn token `tokenId_.\\r\\n     * a proof token is burned when its corresponding investor pending request is fully validated by the manager.\\r\\n     * @param tokenId_  id of the token.\\r\\n     * Emits a {Burn} event with `owner_` and `tokenId_ `.\\r\\n     */\\r\\n    function burn(uint256 tokenId_) internal {\\r\\n        _burn(tokenId_);\\r\\n        _deleteId(tokenId_);\\r\\n        emit Burn(tokenId_);\\r\\n    }\\r\\n\\r\\n    function _deleteId(uint256 id_) internal {\\r\\n        uint256 index_ = pendingIdIndex[id_];\\r\\n        uint256 lastId_ = pendingIds[pendingIds.length - 1];\\r\\n        pendingIds[index_] = lastId_;\\r\\n        pendingIds.pop();\\r\\n        pendingIdIndex[lastId_] = index_;\\r\\n        delete pendingIdIndex[id_];\\r\\n        delete pendingRequests[id_];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev decrease totalAmount at least by `amount`.\\r\\n     * This internal function decreases totalAmount at least by `amount` when an investor cancels his\\r\\n     * deposit/withdrawal request `tokenId_` or the manager validates it.\\r\\n     * If the remaining pending request balance of `tokenId_` is lower than `tolerance`,\\r\\n     * the proof token `tokenId_` is burned and this remaining balance amount is removed also from totalAmount.\\r\\n     * @param tokenId_  id of the token.\\r\\n     */\\r\\n    function _decreaseTotalAmount(uint256 tokenId_, uint256 amount_) internal {\\r\\n        uint256 amountToRemove_ = amount_;\\r\\n        uint256 remainingAmount_ = pendingRequests[tokenId_].lockedAmount +\\r\\n            pendingRequests[tokenId_].availableAmount;\\r\\n\\r\\n        if (remainingAmount_ <= tolerance) {\\r\\n            amountToRemove_ += remainingAmount_;\\r\\n            burn(tokenId_);\\r\\n        }\\r\\n        require(totalAmount >= amountToRemove_, \\\"Every.finance: max amount\\\");\\r\\n        unchecked {\\r\\n            totalAmount -= amountToRemove_;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"./HoldTime.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the yield-bearing tokens {ERC20}.\\r\\n */\\r\\n\\r\\ncontract Token is ERC20, AccessControlEnumerable {\\r\\n    bytes32 public constant INVESTMENT = keccak256(\\\"INVESTMENT\\\");\\r\\n    address public investment;\\r\\n    mapping(address => bool) public whitelist;\\r\\n    HoldTime public holdTime;\\r\\n\\r\\n    event UpdateInvestment(address indexed investment_);\\r\\n    event UpdateHoldTime(address indexed holdTime_);\\r\\n    event AddToWhiteList(address indexed address_);\\r\\n    event RemoveFromWhiteList(address indexed address_);\\r\\n    event Mint(address indexed to_, uint256 amount_);\\r\\n    event Burn(address indexed account_, uint256 amount_);\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address holdTime_,\\r\\n        address admin_\\r\\n    ) ERC20(_name, _symbol) {\\r\\n        require(holdTime_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(admin_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\r\\n        holdTime = HoldTime(holdTime_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update investment.\\r\\n     * @param investment_.\\r\\n     * Emits an {UpdateInvestment} event indicating the updated investment `investment_`.\\r\\n     */\\r\\n    function updateInvestment(\\r\\n        address investment_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(investment_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(investment_ != investment, \\\"Every.finance: no change\\\");\\r\\n        _revokeRole(INVESTMENT, investment);\\r\\n        _grantRole(INVESTMENT, investment_);\\r\\n        whitelist[investment] = false;\\r\\n        whitelist[investment_] = true;\\r\\n        investment = investment_;\\r\\n        emit UpdateInvestment(investment_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update holdTime.\\r\\n     * @param holdTime_.\\r\\n     * Emits an {UpdateHoldTime} event indicating the updated holdTime `holdTime_`.\\r\\n     */\\r\\n    function updateHoldTime(\\r\\n        address holdTime_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(holdTime_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(holdTime_ != address(holdTime), \\\"Every.finance: no change\\\");\\r\\n        holdTime = HoldTime(holdTime_);\\r\\n        emit UpdateHoldTime(holdTime_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add `account_` to `whitelist `.\\r\\n     * @param account_ .\\r\\n     * Emits an {AddToWhiteList} event indicating the addedd address `account_`.\\r\\n     */\\r\\n    function addToWhiteList(\\r\\n        address account_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(account_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        require(!whitelist[account_], \\\"Every.finance: address exists\\\");\\r\\n        whitelist[account_] = true;\\r\\n        emit AddToWhiteList(account_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove `account_` from `whitelist `.\\r\\n     * @param account_ .\\r\\n     * Emits an {RemoveFromWhiteList} event indicating the deleted address `account_`.\\r\\n     */\\r\\n    function removeFromWhiteList(\\r\\n        address account_\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            whitelist[account_],\\r\\n            \\\"Every.finance: address doesn't exist\\\"\\r\\n        );\\r\\n        whitelist[account_] = false;\\r\\n        emit RemoveFromWhiteList(account_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev mint `amount_`Token for `to_`\\r\\n     * @param to_ receiver's address.\\r\\n     * @param amount_  amount to mint.\\r\\n     * Emits an {Mint} event with `to_`, and `amount_`.\\r\\n     */\\r\\n    function mint(address to_, uint256 amount_) external onlyRole(INVESTMENT) {\\r\\n        _mint(to_, amount_);\\r\\n        emit Mint(to_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev burn `amount_`Token for `from_`\\r\\n     * @param from_ user's address.\\r\\n     * @param amount_ amount to burn.\\r\\n     * Emits an {Burn} event with `from_`, and `amount_`.\\r\\n     */\\r\\n    function burn(\\r\\n        address from_,\\r\\n        uint256 amount_\\r\\n    ) external onlyRole(INVESTMENT) {\\r\\n        require(amount_ != 0, \\\"Every.finance: zero amount\\\");\\r\\n        _burn(from_, amount_);\\r\\n        emit Burn(from_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get the average token hold time of `account_`\\r\\n     * @param account_  user's address.\\r\\n     * @return time_ average token hold time.\\r\\n     */\\r\\n    function getHoldTime(address account_) public view returns (uint256 time_) {\\r\\n        time_ = holdTime.getHoldTime(account_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the average token hold time for `account_`.\\r\\n     * @param account_ user's address.\\r\\n     * @param amount_  new received token amount.\\r\\n     */\\r\\n\\r\\n    function _updateHoldTime(address account_, uint256 amount_) internal {\\r\\n        require(amount_ != 0, \\\"Every.finance: zero amount\\\");\\r\\n        holdTime.updateHoldTime(account_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning. It permits to update the hold time of the receiver `to_` if :\\r\\n     *  - the receiver's address `from_` is not zero nor whitelisted  and the sender is not whitelisted\\r\\n     * @param from sender's address.\\r\\n     * @param to receiver's address.\\r\\n     * @param amount transferred amount.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        if ((to != address(0)) && (!whitelist[from]) && (!whitelist[to])) {\\r\\n            _updateHoldTime(to, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/Treasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"../libraries/AssetTransfer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Every.finance.\\r\\n * @notice Implementation of Treasury contract.\\r\\n */\\r\\n\\r\\ncontract Treasury is AccessControlEnumerable {\\r\\n    bytes32 public constant WITHDRAWER = keccak256(\\\"WITHDRAWER\\\");\\r\\n\\r\\n    event SendTo(address indexed to_, uint256 amount_, address asset_);\\r\\n\\r\\n    constructor(address admin_) payable {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin_);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @dev Send asset `asset_` from the contract to address `to_`.\\r\\n     * @param to_ receiver.\\r\\n     * @param amount_ amount to send.\\r\\n     * @param asset_ asset's address.\\r\\n     * Emits an {SendTo} event with `to_`, `amount_` and `asset_`.\\r\\n     */\\r\\n\\r\\n    function sendTo(\\r\\n        address to_,\\r\\n        uint256 amount_,\\r\\n        address asset_\\r\\n    ) public onlyRole(WITHDRAWER) {\\r\\n        require(to_ != address(0), \\\"Every.finance: zero address\\\");\\r\\n        AssetTransfer.transfer(to_, amount_, asset_);\\r\\n        emit SendTo(to_, amount_, asset_);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMetadata {\\n    function render(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AssetTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the library AssetTransfer that proposes functions to transfer Ether/ERC20 asset.\\r\\n */\\r\\nlibrary AssetTransfer {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @dev transfer `amount_` of asset `asset_` from `from_` to `to_`.\\r\\n     * @param from_ sender'address.\\r\\n     * @param to_ receiver'address.\\r\\n     * @param amount_ amount to send.\\r\\n     * @param asset_ asset's IERC20 interface to send.Its decimal has to be lower than 18,\\r\\n     * if it is ERC20.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_,\\r\\n        IERC20 asset_\\r\\n    ) internal {\\r\\n        (bool success_, uint8 assetDecimals_) = tryGetAssetDecimals(asset_);\\r\\n        require(success_, \\\"Every.finance: no decimal\\\");\\r\\n        require(assetDecimals_ <= uint8(18), \\\"Every.finance: max decimal\\\");\\r\\n        unchecked {\\r\\n            assetDecimals_ = uint8(18) - assetDecimals_;\\r\\n        }\\r\\n        amount_ = amount_ / 10 ** assetDecimals_;\\r\\n        require(amount_ != 0, \\\"Every.finance: zero amount\\\");\\r\\n        asset_.safeTransferFrom(from_, to_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev transfer `amount_` of asset `asset_` to `to_`.\\r\\n     * @param to_ receiver'address.\\r\\n     * @param amount_ amount to send.\\r\\n     * @param asset_ asset's address to send. Its decimal has to be lower than 18,\\r\\n     * if it is ERC20.\\r\\n     */\\r\\n    function transfer(address to_, uint256 amount_, address asset_) internal {\\r\\n        if (asset_ != address(0)) {\\r\\n            (bool success_, uint8 assetDecimals_) = tryGetAssetDecimals(\\r\\n                IERC20(asset_)\\r\\n            );\\r\\n            require(success_, \\\"Every.finance: no decimal\\\");\\r\\n            assetDecimals_ = uint8(18) - assetDecimals_;\\r\\n            amount_ = amount_ / 10 ** assetDecimals_;\\r\\n            require(amount_ != 0, \\\"Every.finance: zero amount\\\");\\r\\n            IERC20(asset_).safeTransfer(to_, amount_);\\r\\n        } else {\\r\\n            require(\\r\\n                address(this).balance >= amount_,\\r\\n                \\\"Every.finance: amount exceeds balance\\\"\\r\\n            );\\r\\n            payable(to_).transfer(amount_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get asset's decimal.\\r\\n     * @param asset_ asset's IERC20 interface.\\r\\n     */\\r\\n    function tryGetAssetDecimals(\\r\\n        IERC20 asset_\\r\\n    ) internal view returns (bool, uint8) {\\r\\n        (bool success, bytes memory encodedDecimals) = address(asset_)\\r\\n            .staticcall(\\r\\n                abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\r\\n            );\\r\\n        if (success && encodedDecimals.length >= 32) {\\r\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\r\\n            if (returnedDecimals <= type(uint8).max) {\\r\\n                return (true, uint8(returnedDecimals));\\r\\n            }\\r\\n        }\\r\\n        return (false, 0);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/FeeMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./AssetTransfer.sol\\\";\\r\\nimport \\\"../common/Treasury.sol\\\";\\r\\nimport \\\"../common/Token.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the library FeeMinter that proposes functions to calculate and mint different fee.\\r\\n */\\r\\n\\r\\nlibrary FeeMinter {\\r\\n    uint256 public constant SCALING_FACTOR = 1e8;\\r\\n    uint256 public constant SECONDES_PER_YEAR = 365 days;\\r\\n\\r\\n    /**\\r\\n     * @dev calculate and mint performance fee.\\r\\n     * performance fee is generated when the current price is above the average price.\\r\\n     * Performance fee is minted in yield-bearing token for the treasury.\\r\\n     * @param tokenPrice_ current price of the yield-bearing token.\\r\\n     * @param tokenPriceMean_ average price of the yield-bearing token.\\r\\n     * @param performanceFeeRate_ performance fee rate. Its precision factor is SCALING_FACTOR.\\r\\n     * @param treasury_ treasury\\r\\n     * @param token_  yield-bearing token's address.\\r\\n     */\\r\\n    function mintPerformanceFee(\\r\\n        uint256 tokenPrice_,\\r\\n        uint256 tokenPriceMean_,\\r\\n        uint256 performanceFeeRate_,\\r\\n        address treasury_,\\r\\n        address token_\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        Token tokenERC20_ = Token(token_);\\r\\n        uint256 performanceFee_;\\r\\n        if (tokenPrice_ > tokenPriceMean_) {\\r\\n            uint256 deltaPrice_;\\r\\n            unchecked {\\r\\n                deltaPrice_ = tokenPrice_ - tokenPriceMean_;\\r\\n                tokenPriceMean_ = tokenPrice_;\\r\\n            }\\r\\n            performanceFee_ = Math.mulDiv(\\r\\n                tokenERC20_.totalSupply(),\\r\\n                (deltaPrice_ * performanceFeeRate_),\\r\\n                (tokenPrice_ * SCALING_FACTOR)\\r\\n            );\\r\\n\\r\\n            tokenERC20_.mint(treasury_, performanceFee_);\\r\\n        }\\r\\n        return (tokenPriceMean_, performanceFee_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculate and mint management fee.\\r\\n     * management fee is minted in yield-bearing token for the treasury.\\r\\n     * @param managementFeeLastTime_  last time at wich the management fee is calculated.\\r\\n     * @param managementFeeRate_ management fee rate. Its precision factor is SCALING_FACTOR.\\r\\n     * @param treasury_ treasury\\r\\n     * @param token_  yield-bearing token's address.\\r\\n     */\\r\\n    function mintManagementFee(\\r\\n        uint256 managementFeeLastTime_,\\r\\n        uint256 managementFeeRate_,\\r\\n        address treasury_,\\r\\n        address token_\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        uint256 managementFee_;\\r\\n        if (managementFeeLastTime_ != 0) {\\r\\n            Token tokenERC20_ = Token(token_);\\r\\n            uint256 deltaTime_ = block.timestamp - managementFeeLastTime_;\\r\\n            managementFee_ = Math.mulDiv(\\r\\n                tokenERC20_.totalSupply(),\\r\\n                (managementFeeRate_ * deltaTime_),\\r\\n                (SCALING_FACTOR * SECONDES_PER_YEAR)\\r\\n            );\\r\\n            managementFeeLastTime_ = block.timestamp;\\r\\n            tokenERC20_.mint(treasury_, managementFee_);\\r\\n        }\\r\\n        return (managementFeeLastTime_, managementFee_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculate and mint investment fee (ie. slippage fee)\\r\\n     * investment fee is minted in yield-bearing token for the treasury.\\r\\n     * investment fee can be negative (cost: isFee == true) or positive (profit: isFee == false).\\r\\n     * if investment fee is negative, the manager can verify if he can get from the treasury the underlying  asset ,\\r\\n     * and mint for it the equivalent amount in yield-bearing token.\\r\\n     * if investment fee is positive, the manager can verify if he can send to the treasury the underlying  asset ,\\r\\n     * and burn form it the equivalent amount in yield-bearing token.\\r\\n     * @param amount_ amount of fee in yield-bearing token.\\r\\n     * @param tokenPrice_ current token price.\\r\\n     * @param isFee_ true if positive fee, false otherwise.\\r\\n     * @param treasury_ treasury\\r\\n     * @param token_  yield-bearing token's address.\\r\\n     * @param asset_  asset's address.\\r\\n     */\\r\\n    function MintInvestmentFee(\\r\\n        uint256 amount_,\\r\\n        uint256 tokenPrice_,\\r\\n        bool isFee_,\\r\\n        address payable treasury_,\\r\\n        address token_,\\r\\n        address asset_\\r\\n    ) internal returns (uint256) {\\r\\n        require(amount_ != 0, \\\"Every.finance: zero amount\\\");\\r\\n\\r\\n        uint256 assetBalanceTreasury_ = _getBalance(asset_, treasury_);\\r\\n        uint256 tokenBalanceTreasury_ = IERC20(token_).balanceOf(treasury_);\\r\\n\\r\\n        if (isFee_) {\\r\\n            return\\r\\n                _mintNegativeInvestmentFee(\\r\\n                    amount_,\\r\\n                    assetBalanceTreasury_,\\r\\n                    tokenPrice_,\\r\\n                    treasury_,\\r\\n                    address(token_),\\r\\n                    asset_\\r\\n                );\\r\\n        } else {\\r\\n            return\\r\\n                _burnPositiveInvestmentFee(\\r\\n                    amount_,\\r\\n                    tokenBalanceTreasury_,\\r\\n                    tokenPrice_,\\r\\n                    treasury_,\\r\\n                    address(token_),\\r\\n                    asset_\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get asset's balance of the treasury.\\r\\n     * @param asset_  asset's addres.\\r\\n     * @param treasury_ treasury\\r\\n     */\\r\\n    function _getBalance(\\r\\n        address asset_,\\r\\n        address treasury_\\r\\n    ) internal view returns (uint256 balance_) {\\r\\n        if (asset_ == address(0)) {\\r\\n            balance_ = treasury_.balance;\\r\\n        } else {\\r\\n            balance_ = IERC20(asset_).balanceOf(treasury_);\\r\\n\\r\\n            (bool success_, uint8 assetDecimals_) = AssetTransfer\\r\\n                .tryGetAssetDecimals(IERC20(asset_));\\r\\n            require(success_, \\\"Every.finance: no decimal\\\");\\r\\n            require(\\r\\n                assetDecimals_ <= uint8(18),\\r\\n                \\\"Every.finance: max decimal\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                assetDecimals_ = uint8(18) - assetDecimals_;\\r\\n            }\\r\\n            balance_ = balance_ * 10 ** assetDecimals_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculate and mint negative investment fee (ie. slippage fee)\\r\\n     * investment fee is minted in yield-bearing token for the treasury.\\r\\n     * the function verifies if it's possible to get from the treasury the underlying  asset ,\\r\\n     * and mint for it the equivalent amount in yield-bearing token.\\r\\n     * @param amount_ amount of fee in yield-bearing token.\\r\\n     * @param assetBalanceTreasury_ asset's balance of the treasury.\\r\\n     * @param tokenPrice_ current token price.\\r\\n     * @param treasury_ treasury\\r\\n     * @param token_ yield-bearing token's address.\\r\\n     * @param asset_ asset's address.\\r\\n     */\\r\\n    function _mintNegativeInvestmentFee(\\r\\n        uint256 amount_,\\r\\n        uint256 assetBalanceTreasury_,\\r\\n        uint256 tokenPrice_,\\r\\n        address payable treasury_,\\r\\n        address token_,\\r\\n        address asset_\\r\\n    ) internal returns (uint256 remainingAmount_) {\\r\\n        uint256 deltaAmount_ = Math.min(amount_, assetBalanceTreasury_);\\r\\n        if (deltaAmount_ != 0) {\\r\\n            Token tokenERC20_ = Token(token_);\\r\\n            Treasury(treasury_).sendTo(address(this), deltaAmount_, asset_);\\r\\n            uint256 tokenAmount_ = Math.mulDiv(\\r\\n                deltaAmount_,\\r\\n                SCALING_FACTOR,\\r\\n                tokenPrice_\\r\\n            );\\r\\n            tokenERC20_.mint(treasury_, tokenAmount_);\\r\\n            unchecked {\\r\\n                remainingAmount_ = amount_ - deltaAmount_;\\r\\n            }\\r\\n        } else {\\r\\n            remainingAmount_ = amount_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calculate and burn positive investment fee (ie. slippage fee)\\r\\n     * investment fee is burned in yield-bearing token from the treasury.\\r\\n     * the function verifies if it's possible to send to the treasury the underlying  asset ,\\r\\n     * and burn  from it the equivalent amount in yield-bearing token.\\r\\n     * @param amount_ amount of fee in yield-bearing token.\\r\\n     * @param tokenBalanceTreasury_ yield-bearing token's balance of the treasury.\\r\\n     * @param tokenPrice_ current token price.\\r\\n     * @param treasury_ treasury\\r\\n     * @param token_ yield-bearing token's address.\\r\\n     * @param asset_ asset's address.\\r\\n     */\\r\\n    function _burnPositiveInvestmentFee(\\r\\n        uint256 amount_,\\r\\n        uint256 tokenBalanceTreasury_,\\r\\n        uint256 tokenPrice_,\\r\\n        address treasury_,\\r\\n        address token_,\\r\\n        address asset_\\r\\n    ) internal returns (uint256 remainingAmount_) {\\r\\n        uint256 tokenAmount_ = Math.mulDiv(\\r\\n            amount_,\\r\\n            SCALING_FACTOR,\\r\\n            tokenPrice_\\r\\n        );\\r\\n        tokenAmount_ = Math.min(tokenAmount_, tokenBalanceTreasury_);\\r\\n        uint256 deltaAmount_;\\r\\n        if (tokenAmount_ != 0) {\\r\\n            Token tokenERC20_ = Token(token_);\\r\\n            deltaAmount_ = Math.mulDiv(\\r\\n                tokenAmount_,\\r\\n                tokenPrice_,\\r\\n                SCALING_FACTOR\\r\\n            );\\r\\n            AssetTransfer.transfer(treasury_, deltaAmount_, asset_);\\r\\n            tokenERC20_.burn(treasury_, tokenAmount_);\\r\\n        }\\r\\n        unchecked {\\r\\n            remainingAmount_ = amount_ - deltaAmount_;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/PendingRequest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Every.finance Contracts\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nstruct PendingRequestData {\\r\\n    uint256 lockedAmount;\\r\\n    uint256 availableAmount;\\r\\n    uint256 minPrice;\\r\\n    uint256 maxPrice;\\r\\n    uint256 eventId;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the library PendingRequest that proposes functions to update for an investor a struct PendingRequestData.\\r\\n */\\r\\nlibrary PendingRequest {\\r\\n    /**\\r\\n     * @dev Modifier that checks if the new price bounds are valid.\\r\\n     * It reverts when introducing new price bounds during a manager event validation.\\r\\n     * It prevents the investor to modify the price bounds of his deposit/withdrawal request\\r\\n     * during a manager event validation.\\r\\n     */\\r\\n    modifier CheckPrice(\\r\\n        PendingRequestData storage request,\\r\\n        uint256 minPrice_,\\r\\n        uint256 maxPrice_,\\r\\n        uint256 currentEventId_\\r\\n    ) {\\r\\n        if ((request.minPrice != 0) || (request.maxPrice != 0)) {\\r\\n            if (currentEventId_ > request.eventId) {\\r\\n                require(\\r\\n                    (minPrice_ == request.minPrice) &&\\r\\n                        (maxPrice_ == request.maxPrice),\\r\\n                    \\\"Every.finance: price don't match\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that update for an investor his pending request data\\r\\n     * to be synchronized with the current event id.\\r\\n     */\\r\\n    modifier syncWithEventId(\\r\\n        PendingRequestData storage request,\\r\\n        uint256 currentEventId_\\r\\n    ) {\\r\\n        if (currentEventId_ > request.eventId) {\\r\\n            request.lockedAmount += request.availableAmount;\\r\\n            request.availableAmount = 0;\\r\\n            request.eventId = currentEventId_;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev increase a pending request `request` by `amount`.\\r\\n     * This function is called when an investor makes a deposit/withdrawal request.\\r\\n     * @param request  pending request.\\r\\n     * @param amount_ amount to add.\\r\\n     * @param minPrice_ minimum price of the yield-bearing token.\\r\\n     * @param maxPrice_ maximum price  of the yield-bearing token\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function increase(\\r\\n        PendingRequestData storage request,\\r\\n        uint256 amount_,\\r\\n        uint256 minPrice_,\\r\\n        uint256 maxPrice_,\\r\\n        uint256 currentEventId_\\r\\n    )\\r\\n        internal\\r\\n        CheckPrice(request, minPrice_, maxPrice_, currentEventId_)\\r\\n        syncWithEventId(request, currentEventId_)\\r\\n    {\\r\\n        request.availableAmount += amount_;\\r\\n        request.minPrice = minPrice_;\\r\\n        request.maxPrice = maxPrice_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev decrease a pending request `request` by `amount`.\\r\\n     * This function is called when an investor cancels a deposit/withdrawal request.\\r\\n     * @param request  pending request.\\r\\n     * @param amount_ amount to remove.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function decrease(\\r\\n        PendingRequestData storage request,\\r\\n        uint256 amount_,\\r\\n        uint256 currentEventId_\\r\\n    ) internal syncWithEventId(request, currentEventId_) {\\r\\n        require(\\r\\n            request.availableAmount >= amount_,\\r\\n            \\\"Every.finance: max amount\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            request.availableAmount -= amount_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update event Id\\r\\n     *\\r\\n     * @param request pending request.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function updateEventId(\\r\\n        PendingRequestData storage request,\\r\\n        uint256 currentEventId_\\r\\n    ) internal {\\r\\n        request.eventId = currentEventId_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update the locked and available pending balances of `request` before the manager validation.\\r\\n     * @param request pending request.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function preValidate(\\r\\n        PendingRequestData storage request,\\r\\n        uint256 currentEventId_\\r\\n    ) internal syncWithEventId(request, currentEventId_) {}\\r\\n\\r\\n    /**\\r\\n     * @dev decrease the locked pending balance of `request` after the manager validation by `amount`.\\r\\n     * @param request pending request.\\r\\n     * @param currentEventId_  id of the next manager event (process).\\r\\n     */\\r\\n    function validate(\\r\\n        PendingRequestData storage request,\\r\\n        uint256 amount_,\\r\\n        uint256 currentEventId_\\r\\n    ) internal syncWithEventId(request, currentEventId_) {\\r\\n        require(\\r\\n            request.lockedAmount >= amount_,\\r\\n            \\\"Every.finance: max amount\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            request.lockedAmount -= amount_;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"management_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deposit_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawal_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"CancelDepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"CancelWithdrawalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"DepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee_\",\"type\":\"uint256\"}],\"name\":\"MintManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFee_\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount_\",\"type\":\"uint256\"}],\"name\":\"MintOrBurnInvestmentFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee_\",\"type\":\"uint256\"}],\"name\":\"MintPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentEventId\",\"type\":\"uint256\"}],\"name\":\"StartNextEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"name\":\"UpdateAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetOracle_\",\"type\":\"address\"}],\"name\":\"UpdateAssetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositProof_\",\"type\":\"address\"}],\"name\":\"UpdateDepositProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventBatchSize_\",\"type\":\"uint256\"}],\"name\":\"UpdateEventBatchSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"management_\",\"type\":\"address\"}],\"name\":\"UpdateManagement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"managementParity_\",\"type\":\"address\"}],\"name\":\"UpdateManagementParity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"UpdateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalProof_\",\"type\":\"address\"}],\"name\":\"UpdateWithdrawalProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatedAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount_\",\"type\":\"uint256\"}],\"name\":\"Validatedeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatedAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SentAmount_\",\"type\":\"uint256\"}],\"name\":\"Validatewithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROOF\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"cancelDepositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositProof\",\"outputs\":[{\"internalType\":\"contract Proof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositProofTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee_\",\"type\":\"uint256\"}],\"name\":\"depositRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"getDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Proof\",\"name\":\"proof_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"isValidPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"contract Management\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFeeLastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementParity\",\"outputs\":[{\"internalType\":\"contract IParity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFee_\",\"type\":\"bool\"}],\"name\":\"mintOrBurnInvestmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sendToSafeHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNextEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceMean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetOracle_\",\"type\":\"address\"}],\"name\":\"updateAssetOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositProof_\",\"type\":\"address\"}],\"name\":\"updateDepositProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventBatchSize_\",\"type\":\"uint256\"}],\"name\":\"updateEventBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"management_\",\"type\":\"address\"}],\"name\":\"updateManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"managementFeeLastTime_\",\"type\":\"uint256\"}],\"name\":\"updateManagementFeeLastTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managementParity_\",\"type\":\"address\"}],\"name\":\"updateManagementParity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPriceMean_\",\"type\":\"uint256\"}],\"name\":\"updateTokenPriceMean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawalProof_\",\"type\":\"address\"}],\"name\":\"updateWithdrawalProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxdeposit_\",\"type\":\"uint256\"}],\"name\":\"validateDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxdeposit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxwithdrawal_\",\"type\":\"uint256\"}],\"name\":\"validateWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxwithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalProof\",\"outputs\":[{\"internalType\":\"contract Proof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalProofTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee_\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InvestmentAlpha", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000008d769f45c94cea310018d37bd06fc42e7db060ff000000000000000000000000bebbae6f1062e4cd5652b9d8e1b8aecbee993a9e000000000000000000000000f0ad135a657808a3e576183eb647872d901cff020000000000000000000000000518ebdd8de2ceae8eaed1c5cd93234ba14e75d000000000000000000000000029891460a10b0a49f300a7ef1d2d2b4fb4dc59420000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}