{"SourceCode": "//Furnace whispers, secrets burn.\r\n//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFurnace {\r\n    function transfer(address to, uint amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ncontract DND404Deflationary {\r\n    IFurnace public furnaceToken;\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint public burnRate = 3; \r\n    address public owner;\r\n\r\n    event Burned(uint amount);\r\n    event TransferWithBurn(address indexed from, address indexed to, uint totalAmount, uint amountBurned, uint amountTransferred);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only master can call this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    function setDeflationaryToken(address _furnaceAddress) public onlyOwner {\r\n        require(_furnaceAddress != address(0), \"Furnace address cannot be zero\");\r\n        furnaceToken = IFurnace(_furnaceAddress);\r\n    }\r\n\r\n    function transferWithBurn(address to, uint amount) public returns (bool) {\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(furnaceToken.balanceOf(msg.sender) >= amount, \"Insufficient balance\");\r\n\r\n        uint amountToBurn = calculateBurnAmount(amount);\r\n        uint amountToTransfer = amount - amountToBurn;\r\n\r\n        require(furnaceToken.transfer(burnAddress, amountToBurn), \"Burn transfer failed\");\r\n        emit Burned(amountToBurn);\r\n\r\n        require(furnaceToken.transfer(to, amountToTransfer), \"Transfer failed\");\r\n\r\n        emit TransferWithBurn(msg.sender, to, amount, amountToBurn, amountToTransfer);\r\n        return true;\r\n    }\r\n\r\n    function calculateBurnAmount(uint amount) public view returns (uint) {\r\n        return (amount * burnRate) / 100;\r\n    }\r\n\r\n    function setBurnRate(uint newBurnRate) public onlyOwner {\r\n        burnRate = newBurnRate;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransferred\",\"type\":\"uint256\"}],\"name\":\"TransferWithBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"furnaceToken\",\"outputs\":[{\"internalType\":\"contract IFurnace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnRate\",\"type\":\"uint256\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_furnaceAddress\",\"type\":\"address\"}],\"name\":\"setDeflationaryToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferWithBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DND404Deflationary", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8972575cd791058f8ffa0ad80a80dd4fa60a4d3571ba44accb8ff8bae32bcf91"}