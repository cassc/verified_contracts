{"SourceCode": "/* SPDX-License-Identifier: MIT\r\n\r\nAll rights reserved by Slenos Srl Startup Innovativa\r\nNotarized White Paper describing the decentralized system for tokenization of the luxury widespread\r\nHotel in Borgo di Sempronio - Tuscany (Italy)\r\nhttps://app.dedit.io/verification/11da55d94b222ec07e5132c8fdc050582ebc745d60eec33b615823d7cf4ff3d9\r\n\r\nProject site: https://BorgoToken.com\r\nHotel site: https://BorgoDiSempronio.com/\r\n\r\n \r\nilBORGO tokenPriceUSDT\r\nSuper Private sale: 0.80 USDT - LOCKUP 6 MONTHS\r\nPrivate sale: 1.0 USDT - LOCKUP 6 MONTHS\r\nPre sale: 1.2 USDT - LOCKUP 48 hours\r\nPublic Sale 1.3 USDT\r\n\r\nilBorgo token will entitle the holder to convert TOKENS into an equity financial instrument (SFP)*\r\nthat gives the right to participation in the profits of management and any capital gain on the future sale of real estate.\r\n*KYC will be mandatory when converting tokens in SFP\r\n\r\n*/\r\n\r\npragma solidity ^0.8.7;\r\nlibrary SignedSafeMath {\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {        \r\n        return a >= b ? a : b; \r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n/* UniSwap Interface */\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n/*\r\n    UNUSED FUNCTIONS TO SAVE GAS \r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n   \r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    \r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts); */\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    /*\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    /\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);*/\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  /*  \r\n    UNUSED FUNCTIONS TO SAVE GAS \r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    */\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n/*    \r\n\r\n    UNUSED FUNCTIONS TO SAVE GAS \r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n*/\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n \r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance:\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\n\r\n/// @title Reward-Paying Token\r\n/// @author Roger Wu (https://github.com/roger-wu)\r\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\r\n///  to token holders as rewards and allows token holders to withdraw their rewards.\r\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\r\ncontract RewardPayingToken  {\r\n  using SafeMath for uint256;\r\n  using SignedSafeMath for int256;\r\n  using SafeCast for uint256;\r\n  using SafeCast for int256;\r\n\r\n  //  using IterableMapping for IterableMapping.Map;\r\n\r\n  // With `magnitude`, we can properly distribute rewards even if the amount of received ether is small.\r\n  // For more discussion about choosing the value of `magnitude`,\r\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n  uint256 public magnifiedDividendPerShare;\r\n\r\n  // About rewardCorrection:\r\n  // If the token balance of a `_user` is never changed, the reward of `_user` can be computed with:\r\n  //   `rewardOf(_user) = rewardPerShare * balanceOf(_user)`.\r\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n  //   `rewardOf(_user)` should not be changed,\r\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n  // To keep the `rewardOf(_user)` unchanged, we add a correction term:\r\n  //   `rewardOf(_user) = rewardPerShare * balanceOf(_user) + rewardCorrectionOf(_user)`,\r\n  //   where `rewardCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n  //   `rewardCorrectionOf(_user) = rewardPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n  // So now `rewardOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n  mapping(address => int256) public magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnRewards;\r\n  mapping(address => uint256) internal withdrawnNum;\r\n\r\n  uint256 public totalRewardsDistributed;\r\n\r\n  uint256 public totalRewardsCorrection;\r\n\r\n  uint256 public totalRewardsCreated;\r\n\r\n  mapping(address => uint256) public paidRewards;\r\n\r\n  mapping(address => uint256) internal withdrawnDividends; \r\n  \r\n\r\n  \r\n    uint256 public totalDividendsDistributed;\r\n\r\n    uint256 public totalDvidendsCreated;\r\n\r\n    mapping (address => bool) public excludedFromRewards;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n    mapping (address => uint256) public numClaimsAccount;\r\n\r\n    uint256 public rewardInterval = 7 days; \r\n    uint256 public minimumTokenBalanceForRewards =  10 * (10**18);//10 ;\r\n    uint256 public rewardRate = 1000000000;// with 12 decimals divider : 1000000000 -> 0,1%\r\n\r\n    IERC20 public MYTOKEN = IERC20(address(this));\r\n    IERC20 public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    bool public dividendIsOpen = false;//will be activated with the first distribution\r\n    \r\n  /// @notice Distributes ether to token holders as rewards.\r\n  /// @dev It reverts if the total supply of tokens is 0.\r\n  /// It emits the `RewardsDistributed` event if the amount of received ether is greater than 0.\r\n  /// About undistributed ether:\r\n  ///   In each distribution, there is a small amount of ether not distributed,\r\n  ///     the magnified amount of which is\r\n  ///     `(msg.value * magnitude) % totalSupply()`.\r\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\r\n  ///     (de-magnified) in a distribution can be less than 1 wei.\r\n  ///   We can actually keep track of the undistributed USDT in a distribution\r\n  ///     and try to distribute it in the next distribution,\r\n  ///     but keeping track of such data on-chain costs much more than\r\n  ///     the saved ether, so we don't do that.\r\n  \r\n\r\n    function _distributeDividends(uint256 _dividends) internal {// FROM VALUE TO TOKENS\r\n        dividendIsOpen = true;\r\n        USDT.transferFrom(msg.sender, address(this), _dividends);\r\n        uint256 supply = MYTOKEN.totalSupply().sub(totalRewardsCorrection);\r\n\r\n        magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n            (_dividends).mul(magnitude) / supply //ERC20(address(this)).balanceOf(address(this))\r\n        );\r\n        totalDvidendsCreated = totalDvidendsCreated.add(_dividends);\r\n    }\r\n    \r\n    \r\n    \r\n    function _setDevidendStatus(bool _isOn) internal returns (bool )  {\r\n        dividendIsOpen = _isOn;\r\n        return _isOn;\r\n    }\r\n\r\n\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function _withdrawRewardOfUser(address  user) internal returns (uint256) {//RIO EX payable\r\n    uint256 _withdrawableReward = withdrawableRewardOf(user);\r\n    if (_withdrawableReward > 0) {\r\n      withdrawnRewards[user] = withdrawnRewards[user].add(_withdrawableReward);\r\n    \r\n         withdrawnNum[user]++;\r\n\r\n        MYTOKEN.transfer(user, _withdrawableReward);    \r\n\r\n        totalRewardsDistributed = totalRewardsDistributed.add(_withdrawableReward);\r\n        \r\n      return _withdrawableReward;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `RewardWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function _withdrawDividendsOfUser(address  user) internal returns (uint256) {//RIO EX payable\r\n    uint256 _withdrawableDividend = dividendsOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n    \r\n      withdrawnNum[user]++;\r\n\r\n        USDT.transfer(user, _withdrawableDividend);    \r\n\r\n        totalDividendsDistributed = totalDividendsDistributed.add(_withdrawableDividend);\r\n       \r\n      return _withdrawableDividend;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n  /// @notice View the amount of dividends in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividends in wei that `_owner` can withdraw.\r\nfunction accumulativeDividendOf(address _owner) public view returns(uint256) {\r\n      \r\n    uint256 balance = MYTOKEN.balanceOf(_owner).sub(withdrawnRewards[_owner]).add(paidRewards[_owner]);\r\n\r\n    return magnifiedDividendPerShare.mul(balance).toInt256()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256() / magnitude;\r\n  }\r\n\r\n/// @notice View the amount of dividends in wei that an address can withdraw.\r\nfunction dividendsOf(address _owner) public view  returns(uint256) {\r\n    if(excludedFromRewards[_owner]) {\r\n        return 0;\r\n    }\r\n\r\n    (bool check, uint256 rew) = SafeMath.trySub(accumulativeDividendOf(_owner),withdrawnDividends[_owner]);\r\n    if(check){return rew;}else{return 0;}\r\n\r\n}\r\n\r\n  /// @return The amount of reward in wei that `_owner` can withdraw from the beginning or last time claiming\r\n  function rewardOfTime(address _owner) public view  returns(uint256) {\r\n    uint256 balance = MYTOKEN.balanceOf(_owner);\r\n\r\n   uint256 rewards;\r\n        \r\n        (bool check, uint256 period) = SafeMath.trySub(block.timestamp,lastClaimTimes[_owner]);\r\n\r\n        if(check && period.div(rewardInterval) > 0){ //\r\n        \r\n            (bool check1, uint256 rew) = SafeMath.tryDiv((balance * rewardRate),(10 ** 12));\r\n                if(check1){\r\n                uint256 dias = period.div(rewardInterval);\r\n                rewards = rew.mul(dias);\r\n\r\n             }\r\n        }\r\n        return rewards;\r\n  }\r\n\r\n    /* calculate reward for time left from purchases or last claim */\r\n    function withdrawableRewardOf(address _owner) public view  returns(uint256) {\r\n        return rewardOfTime(_owner); \r\n    }\r\n\r\n  /// @return The amount of rewards in wei that `_owner` withdrawn from the beginning\r\n    function withdrawnRewardOf(address _owner) public view  returns(uint256) {\r\n        return withdrawnRewards[_owner];\r\n    }\r\n  /// @return The amount of dividends in wei that `_owner` withdrawn from the beginning\r\n    function withdrawnDividendsOf(address _owner) public view  returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n//last claim date by the holder\r\n    function getLastClaimRewardTime(address _holder) public view returns (uint256) {\r\n       return lastClaimTimes[_holder];\r\n    }\r\n//how many times interval reward is occorred\r\n//for an intervalPeriod setted on 1 day, on the year end the amount will be 365\r\n    function getNumClaimDays(address _holder) public view returns (uint256) {\r\n       return numClaimsAccount[_holder];\r\n    }\r\n    function canClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n\r\n    \treturn block.timestamp.sub(lastClaimTime) >= rewardInterval;\r\n    }\r\n\r\n// PROCESS REWARD DISTRIBUTION\r\n    function processAccount(address account, uint256 lastDistributionDay) internal  returns (bool) {\r\n        \r\n        uint256 iniTime = lastClaimTimes[account];\r\n        if(canClaim(iniTime)) { \r\n        uint256 amount = _withdrawRewardOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n            uint256 dias = (block.timestamp.sub(iniTime)).div(rewardInterval);\r\n            numClaimsAccount[account] = numClaimsAccount[account].add(dias);\r\n\r\n    \t\tlastClaimTimes[account] = lastDistributionDay;\r\n\r\n    \t\treturn true;\r\n    \t    }\r\n      }\r\n\r\n   return false;\r\n    }\r\n   \r\n    function withdrawDividendsOfUser(address account) public {\r\n           if(dividendIsOpen)\r\n            _withdrawDividendsOfUser(account);\r\n    }\r\n     \r\n}\r\n\r\n\r\ncontract BORGO_CROWD_TOKEN is ERC20, RewardPayingToken{\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n        \r\n    using IterableMapping for IterableMapping.Map;\r\n    IterableMapping.Map private tokenHoldersMap;\r\n  \r\n    uint256 public MAX_SUPPLY = 5_480_000 * (10 ** uint256(18));\r\n/* \r\n        ilBORGO tokenPriceUSDT\r\n        Super Private sale: 0.80 USDT - LOCKUP 6 MONTHS\r\n        Private sale: 1.0 USDT - LOCKUP 6 MONTHS\r\n        Pre sale: 1.2 USDT -LOCKUP 48 hours\r\n*/\r\n\r\n    uint256 public tokenPriceUSDT = 80; // = 0.80 USDT  divider 100\r\n    \r\n    uint256 public maxSellTransactionAmount = 500_000 * (10**18);//ANTI-WHALE\r\n\r\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //->mainnet BSC 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;// main BSC 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    bool public mintingIsLive = true;\r\n     \r\n    bool public inRewardsPaused = true;\r\n\r\n    bool public sendAndLiquifyEnabled = false;\r\n\r\n    address public deadWallet = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    uint256 public lastSentToContract; //last reward distribution date\r\n    \r\n    mapping(address => bool) private _isExcludedFromMaxTx;\r\n\r\n    //Admin operation record\r\n    uint256 public withdrawns;\r\n    uint256 public deposits;\r\n\r\n    address public owner;\r\n    mapping (address => bool) public allowedWallet; // wallet allowed to call only mint operations in private sale\r\n\r\n    /* lockup private sale Token \r\n    lockup period is: 6 MONTHS for private sale and 48 HOURS for presale\r\n    */\r\n    bool public isLockupOn = true;\r\n    uint256 lockupTime = 180 days; \r\n    mapping(address => uint256) internal lockedUntil;\r\n\r\n    bool public tradeIsOpen = false;\r\n\r\n    //presale contract address will added to whitelist\r\n    mapping(address => bool) internal _whiteList;\r\n\r\n    /* The function allow Wallet to Mint Tokens payied by bank transfer and credit card */\r\n    function addAllowedWallet(address _wallet, bool isAllowed) public   {\r\n        allowedWallet[_wallet] = isAllowed;\r\n    }\r\n\r\n    //full transfership allowance for public sale\r\n    function openTrade(bool _isOpen) external onlyOwner {\r\n        tradeIsOpen = _isOpen;\r\n    }\r\n    \r\n    function setLockupStatus(bool _isOn) external onlyOwner {\r\n        isLockupOn = _isOn;\r\n    }\r\n\r\n    //change the lockup time for the presale \r\n    function setLockupTime(uint256 _seconds) external onlyOwner {\r\n        lockupTime = _seconds;\r\n    }\r\n    //include expecptions to openTrade\r\n    function includeToWhiteList(address[] memory _users) external onlyOwner {\r\n        for(uint8 i = 0; i < _users.length; i++) {\r\n            _whiteList[_users[i]] = true;\r\n        }\r\n    }\r\n\r\n/* \r\n        ilBORGO tokenPriceUSDT\r\n        Super Private sale: 0.80 USDT - LOCKUP 6 MONTHS\r\n        Private sale: 1.0 USDT - LOCKUP 6 MONTHS\r\n        Pre sale: 1.2 USDT -LOCKUP 48 hours\r\n*/\r\n\r\n    function setTokenPriceUSDT(uint256 _priceX100) external onlyOwner {\r\n        tokenPriceUSDT = _priceX100; // Eg.: 100 = 1 USDT => 1 TOKEN\r\n    }\r\n\r\n\r\n    constructor() ERC20(\"BORGO TOKEN\",\"ilBORGO\") {\r\n        \r\n        owner = msg.sender;\r\n        allowedWallet[owner] = true;\r\n\r\n        _whiteList[owner] = true;\r\n        _whiteList[address(this)] = true;\r\n        \r\n        excludeFromRewards(owner,true);//owner doesn't receive token rewards\r\n        excludeFromRewards(address(this),true);\r\n        excludeFromRewards(0x000000000000000000000000000000000000dEaD,true);\r\n\r\n        // exclude from max tx\r\n        _isExcludedFromMaxTx[owner] = true;\r\n        _isExcludedFromMaxTx[address(this)] = true;\r\n\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender , \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n// Create a UniSwap pair for this new token \r\n    function createLiquidityPool() public onlyOwner  {\r\n        \r\n         uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        excludeFromRewards(address(uniswapV2Router),true);\r\n\r\n    }\r\n\r\n    function setMintingIsLive(bool _isOn) public onlyOwner returns (bool )  {\r\n        mintingIsLive = _isOn;\r\n        return _isOn;\r\n    }\r\n\r\n    function setinRewardsPaused(bool _bool) public onlyOwner {\r\n        inRewardsPaused = _bool;\r\n    }\r\n    \r\n    //admin can set the beginning of token rewards\r\n    function setLastSentToContract(uint256 _date) public onlyOwner {\r\n        lastSentToContract = _date;\r\n    }\r\n\r\n    function excludeFromRewards(address account, bool value) public onlyOwner {\r\n    \texcludedFromRewards[account] = value;\r\n    }\r\n        \r\n    function isExcludedFromRewards(address account) public view returns(bool) {\r\n        return excludedFromRewards[account];\r\n    }\r\n\r\n    /* exclude from anti whale */\r\n    function excludeFromMaxTx(address _address, bool value) public onlyOwner { \r\n        _isExcludedFromMaxTx[_address] = value;\r\n    }\r\n\r\n    function isExcludedFromMaxTx(address account) public view returns(bool) {\r\n        return _isExcludedFromMaxTx[account];\r\n    }\r\n\r\n    function updateUniswapV2Router(address newRouter) public onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(newRouter);\r\n    }\r\n\r\n// external call to claim token rewards\r\n    function claimRewards() external {\r\n        if(\r\n            !inRewardsPaused \r\n        ) {\r\n        sendAndLiquify();\r\n\t\tprocessAccount(msg.sender, lastSentToContract);\r\n        }\r\n    }\r\n   \r\n // external call to withdraw USDT dividends\r\n    function claimDividends() external {\r\n\t\twithdrawDividendsOfUser(msg.sender);     \r\n    }\r\n\r\n\r\n//Enable/disable rewards distribution\r\n    function setSendAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        sendAndLiquifyEnabled = _enabled;\r\n        lastSentToContract = block.timestamp;\r\n    }\r\n\r\n//possible Anti-wales  option\r\n    function setMaxSellTransactionAmount(uint256 newAmount) public onlyOwner \r\n    {\r\n        maxSellTransactionAmount = newAmount;\r\n    }    \r\n    \r\n/* DEFAULT FUNCTIONS */\r\n    function _transfer(address from, address to, uint256 amount) \r\n//    isOpenTrade(from, to) //openTrade lock managing\r\n     internal override \r\n    {\r\n        require(!isLockupOn || lockedUntil[from] < block.timestamp, \"Locked\");\r\n        require(tradeIsOpen || _whiteList[from] || _whiteList[to], \"Not Open\");\r\n\r\n        if(amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if((!_isExcludedFromMaxTx[from]) && (!_isExcludedFromMaxTx[to]))\r\n        {\r\n            require(amount <= maxSellTransactionAmount, \"Sell transfer amount exceeds the maxSellTransactionAmount.\");\r\n        }\r\n       \r\n        setBuyTime(to);  //call before transfer\r\n        \r\n        if(from != address(this)){\r\n\r\n       subCorrection(from,amount);\r\n       addCorrection(to,amount);\r\n            if(!inRewardsPaused ) {\r\n                sendAndLiquify();\r\n                processAccount(from, lastSentToContract);           \r\n            }\r\n         }\r\n         \r\n        super._transfer(from, to, amount);\r\n        \r\n    }\r\n    \r\n/* \r\n    ONLY PURCHASED TOKENS ARE CALCULATED TO RECEIVE DIVIDENDS   \r\n*/\r\n\r\n    function addCorrection(address account,uint256 value) internal {\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256() );\r\n    }\r\n\r\n    function subCorrection(address account,uint256 value) internal {\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256() );\r\n    }\r\n\r\n//mint token for the exact amount of holders\r\n    function sendAndLiquify() public {\r\n        if(!sendAndLiquifyEnabled)return;\r\n        uint256 rewards;\r\n       // uint256 rewardInterval = rewardInterval();\r\n        \r\n        (bool check, uint256 period) = SafeMath.trySub(block.timestamp,lastSentToContract);\r\n\r\n        if(check && period.div(rewardInterval) > 0){ //\r\n        \r\n            (bool check1, uint256 rew) = SafeMath.tryDiv((totalSupply() * rewardRate),(10 ** 12));\r\n                if(check1){\r\n                uint256 dias = period.div(rewardInterval);\r\n                rewards = rew.mul(dias);\r\n               \r\n                if(rewards>0){\r\n                \r\n                totalRewardsCorrection = totalRewardsCorrection.add(rewards);\r\n\r\n                _mint(address(this), rewards);\r\n\r\n                lastSentToContract += dias.mul(rewardInterval);\r\n                \r\n                }\r\n             }\r\n        }\r\n\r\n    }\r\nfunction distributeDividends(uint256 _dividends) public  onlyOwner{\r\n    _distributeDividends(_dividends);\r\n}\r\nfunction setDevidendStatus(bool _isOn) public onlyOwner  { \r\n   _setDevidendStatus(_isOn);\r\n}\r\n//SET FOR FIRST PURCHASE ONLY : to avoid misalignment we set buyTime = last distribution time but with a max of token reward interval\r\n    function setBuyTime(address _holder) internal {\r\n        if(balanceOf(_holder)==0){\r\n            uint256 _time;\r\n            //nel caso non si minti dopo il deploy\r\n            if(totalSupply()==0)lastSentToContract = block.timestamp;\r\n\r\n            if(block.timestamp.sub(lastSentToContract) < rewardInterval){\r\n                _time = lastSentToContract;\r\n            }else{\r\n                _time = block.timestamp;\r\n            }\r\n            \r\n            setBuyTime2(_holder,_time);\r\n        }\r\n\r\n    }\r\n\r\n    function setBuyTime2(address _holder, uint256 _time) internal {\r\n\r\n        lastClaimTimes[_holder] = _time;\r\n    }\r\n    \r\n    function updateRewardInterval(uint256 newRewardInterval) external onlyOwner {\r\n        require(newRewardInterval != rewardInterval, \"ABC_Reward_Tracker: Cannot update RewardInterval to same value\");\r\n        rewardInterval = newRewardInterval;\r\n    }\r\n\r\n    function setMinimumTokenBalanceForRewards(uint256 _minimumTokenBalanceWei) public onlyOwner {\r\n        minimumTokenBalanceForRewards = _minimumTokenBalanceWei;\r\n    }\r\n\r\n\r\n\r\n    /* ilBORGO TOKEN MINTING*/\r\n\r\n     /* PAY WITH ETH */\r\n    function buyToken () public payable returns (bool){//uint256 tokens\r\n        require(mintingIsLive , \"Minting is OFF LINE\");\r\n        uint amount = msg.value;\r\n        require(amount > 0, \"Not enough Tokens to buy\");\r\n        \r\n        address _holder = msg.sender;\r\n        if(!inRewardsPaused ) \r\n        { \r\n            sendAndLiquify();\r\n            processAccount(_holder, lastSentToContract);\r\n        }\r\n    \r\n        uint256 tokens = swapEthToUsdt(amount).mul(100).div(tokenPriceUSDT);\r\n        \r\n        require(totalSupply().add(tokens) <= MAX_SUPPLY,\"MAX SUPPLY reached\");\r\n\r\n        setBuyTime(_holder);  //call before minting\r\n\r\n        _mint(_holder,tokens);\r\n\r\n        addCorrection(_holder,tokens);\r\n        \r\n        if(isLockupOn){\r\n            if(lockedUntil[_holder]==0)lockedUntil[_holder] = block.timestamp + lockupTime;\r\n        }        \r\n        return true;\r\n    }\r\n\r\n    /* PAY WITH USDT : 1 CROWD TOKEN => 1 USDT  */\r\n    function buyTokenUSDT (uint256 amountUSDT) public payable returns (bool){//uint256 tokens\r\n        require(mintingIsLive , \"Minting is OFF LINE\");\r\n        require(amountUSDT > 0, \"Not enough Tokens to buy\");\r\n\r\n        address _holder = msg.sender;\r\n        if(!inRewardsPaused ) { \r\n            sendAndLiquify();\r\n            processAccount(_holder, lastSentToContract);\r\n        }\r\n\r\n        uint256 tokens = amountUSDT.mul(100).div(tokenPriceUSDT);\r\n\r\n        require(totalSupply().add(tokens) <= MAX_SUPPLY,\"MAX SUPPLY reached\");\r\n\r\n        setBuyTime(_holder);  //call before minting\r\n\r\n        USDT.transferFrom(_holder, address(this), amountUSDT);\r\n\r\n        _mint(_holder,tokens);\r\n        \r\n        addCorrection(_holder,tokens);\r\n        \r\n        if(isLockupOn){\r\n            if(lockedUntil[_holder]==0)lockedUntil[_holder] = block.timestamp + lockupTime;\r\n        }       \r\n        return true;\r\n    }\r\n\r\n    /* \r\n    USED FOR:\r\n    - send tokens PURCHASED BY BANK TRANSFER\r\n    - deposit tokens into the presale contract\r\n    */\r\n    function mintTokenADMIN (address _holder, uint256 tokens) public payable returns (bool){\r\n        require(allowedWallet[msg.sender] , \"Not Admin\");\r\n        require(totalSupply().add(tokens) <= MAX_SUPPLY,\"MAX SUPPLY reached\");\r\n\r\n        setBuyTime(_holder);  //call before minting\r\n\r\n        _mint(_holder,tokens);\r\n        \r\n        addCorrection(_holder,tokens);\r\n        \r\n        if(isLockupOn){\r\n            if(lockedUntil[_holder]==0)lockedUntil[_holder] = block.timestamp + lockupTime;\r\n        }\r\n        return true;\r\n    }\r\n\r\n/*  \r\n\r\nilBorgo token will entitle the holder to convert TOKENS into an equity financial instrument (SFP) *\r\nthat gives the right to participation in the profits of management and any capital gain on the future sale of real estate.\r\n* KYC would be needed\r\n\r\n*/\r\n    function convertTokenToStocks (uint256 _tokens) public returns (bool ){\r\n        address _holder = msg.sender;\r\n  \r\n        transfer(owner, _tokens);\r\n \r\n        subCorrection(_holder,_tokens);\r\n        totalRewardsCorrection = totalRewardsCorrection.sub(withdrawnRewards[_holder].add(paidRewards[_holder]));\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /* ADMIN FUNCTIONS TO MANAGE CROWD TOKEN CONTRACT BALANCE*/\r\n    /* USDT CAN ONLY BE SENT ONLY TO PROJECT WALLET*/\r\n    function withdrawUsdtFromContract(uint256 _amount) external  onlyOwner{\r\n        require(USDT.balanceOf(address(this)) >= _amount, \"Request exceed Balance\");\r\n        USDT.transfer(owner, _amount);\r\n        withdrawns = withdrawns.add(_amount);\r\n    }\r\n\r\n    function withdrawUsdtFromContractAll() external  onlyOwner{\r\n        USDT.transfer(owner, USDT.balanceOf(address(this)));\r\n    }\r\n\r\n    function depositUsdtToContract(uint256 _amount) external  {//onlyOwner\r\n        // You need to approve this action from USDT contract before or transfer directly USDT to contract address\r\n        USDT.transferFrom(msg.sender,address(this), _amount);\r\n        deposits = deposits.add(_amount);\r\n    }\r\n\r\n    function withdrawTokenContract(address _token, uint256 _amount) external onlyOwner{\r\n        IERC20(_token).transferFrom(address(this),owner, _amount);\r\n    }\r\n\r\n   \r\n    /*  USED FOR ESTIMATE THE AMOUNT IN THE DAPP */\r\n    function  getAmountOfTokenForEth(uint tokenIn) public virtual view returns (uint256){\r\n      address[] memory path = new address[](2);\r\n        path[1] = WETH;\r\n        path[0] = address(USDT);\r\n      uint[] memory amounts = uniswapV2Router.getAmountsIn(tokenIn,path);\r\n        return amounts[0];\r\n    }\r\n    \r\n    /*  SWAPPING USDT */\r\n    function swapEthToUsdt(uint256 amount) internal returns(uint256){\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = address(USDT);\r\n\r\n        // make the swap\r\n        uint[] memory amounts = uniswapV2Router.swapExactETHForTokens{value: amount}(\r\n            0, // accept any amount of USDT\r\n            path,\r\n            address(this),\r\n            block.timestamp + 30\r\n        );\r\n    return amounts[1];\r\n       \r\n    }\r\n\r\n    function swapEthToUsdtAndSendTo(uint256 amount, address _receiver) internal  {\r\n        if(amount<1)return ;\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = address(USDT);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokens{value: amount}(\r\n            0, // accept any amount of USDT\r\n            path,\r\n            _receiver,\r\n            block.timestamp + 30\r\n        );\r\n       \r\n    }\r\n    \r\n    /* in any case could be changed the WETH-USDT-BUSD contract address */\r\n    function setTokenAddressUSDT(address _contract) public onlyOwner{\r\n        USDT = IERC20(_contract);\r\n    }\r\n\r\n    function setTokenAddressWETH(address _contract) public onlyOwner{\r\n        WETH = _contract;\r\n    }\r\n\r\n/* return contract infos */\r\n    function contractInfo()\r\n        public view returns (\r\n            address _owner,\r\n            string memory _name,\r\n            string memory _symbol,\r\n            uint256 _totalSupply,\r\n            uint256 _totalRewardsDistributed,\r\n            uint256 _rewardInterval,\r\n            uint256 _rewardRate,\r\n            uint256 _lastSentToContract,\r\n            uint256 _totalDividendsDistributed\r\n            ) {\r\n_owner = owner;_name=name();_symbol=symbol();_totalSupply=totalSupply();\r\n_totalRewardsDistributed=totalRewardsDistributed;\r\n_totalDividendsDistributed=totalDividendsDistributed;\r\n_rewardInterval=rewardInterval;_rewardRate=rewardRate;_lastSentToContract=lastSentToContract;\r\n            }\r\n\r\n\r\n//return account infos\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            uint256 balance,\r\n            uint256 _totalRewards,\r\n            uint256 _withdrawableRewards,\r\n            uint256 _lastClaimTime,\r\n            uint256 _nextClaimTime,\r\n            uint256 _numClaims,\r\n            uint256 _withdrawnDividends,\r\n            uint256 _withdrableDividends) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        balance = balanceOf(account);\r\n\r\n        _withdrawableRewards = withdrawableRewardOf(account);\r\n        \r\n        _totalRewards = withdrawnRewards[account].add(rewardOfTime(account));// accumulativeDividendOf(account);\r\n\r\n        _lastClaimTime = lastClaimTimes[account];\r\n\r\n        _nextClaimTime = _lastClaimTime > 0 ?\r\n                                    _lastClaimTime.add(rewardInterval) :\r\n                                    0;\r\n\r\n        _numClaims = numClaimsAccount[account];\r\n        \r\n        _withdrawnDividends = withdrawnDividends[account];\r\n\r\n        _withdrableDividends = dividendsOf(account);\r\n\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256 ,\r\n            uint256 ,\r\n            uint256 ,\r\n            uint256 ,uint256 ,uint256 ,uint256 ,uint256 ,uint256 ) {\r\n\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n    \r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MYTOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"addAllowedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastSentToContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDividendsDistributed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"convertTokenToStocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositUsdtToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"}],\"name\":\"distributeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"index\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawableRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numClaims\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawnDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrableDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOfTokenForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getLastClaimRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getNumClaimDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRewardsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"includeToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLockupOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSentToContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"magnifiedDividendCorrections\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magnifiedDividendPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokenBalanceForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mintTokenADMIN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numClaimsAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paidRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"rewardOfTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOn\",\"type\":\"bool\"}],\"name\":\"setDevidendStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setLastSentToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOn\",\"type\":\"bool\"}],\"name\":\"setLockupStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setLockupTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokenBalanceWei\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOn\",\"type\":\"bool\"}],\"name\":\"setMintingIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSendAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTokenAddressUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTokenAddressWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceX100\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setinRewardsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDvidendsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsCorrection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardInterval\",\"type\":\"uint256\"}],\"name\":\"updateRewardInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawDividendsOfUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUsdtFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUsdtFromContractAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BORGO_CROWD_TOKEN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:6edde75e9e0440e6ec2849de68c969afd24b19d2", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cdfd6ab7d01e9fe7d24ffd50ca2dd048e3bd896aac5a1375206b5e01545bc027"}