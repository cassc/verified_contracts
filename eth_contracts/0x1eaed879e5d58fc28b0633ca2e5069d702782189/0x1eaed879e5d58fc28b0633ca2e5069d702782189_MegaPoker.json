{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\n// The MegaPoker\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract PokingAddresses {\r\n    // OSMs\r\n    address constant btc            = 0xf185d0682d50819263941e5f4EacC763CC5C6C42;\r\n    address constant eth            = 0x81FE72B5A8d1A857d176C3E7d5Bd2679A9B85763;\r\n    address constant gno            = 0xd800ca44fFABecd159c7889c3bf64a217361AEc8;\r\n    address constant reth           = 0xeE7F0b350aA119b3d05DC733a4621a81972f7D47;\r\n    address constant wsteth         = 0xFe7a2aC0B945f12089aEEB6eCebf4F384D9f043F;\r\n\r\n    address constant crvv1ethsteth  = 0xEa508F82728927454bd3ce853171b0e2705880D4;\r\n    address constant guniv3daiusdc1 = 0x7F6d78CC0040c87943a0e0c140De3F77a273bd58;\r\n    address constant guniv3daiusdc2 = 0xcCBa43231aC6eceBd1278B90c3a44711a00F4e93;\r\n    address constant univ2daiusdc   = 0x25D03C2C928ADE19ff9f4FFECc07d991d0df054B;\r\n\r\n    // Spotter\r\n    address constant spotter        = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n}\r\n\r\ncontract MegaPoker is PokingAddresses {\r\n\r\n    uint256 public last;\r\n\r\n    function poke() external {\r\n        bool ok;\r\n\r\n        // poke() = 0x18178358\r\n        (ok,) = btc.call(abi.encodeWithSelector(0x18178358));\r\n        (ok,) = eth.call(abi.encodeWithSelector(0x18178358));\r\n        (ok,) = gno.call(abi.encodeWithSelector(0x18178358));\r\n        (ok,) = reth.call(abi.encodeWithSelector(0x18178358));\r\n        (ok,) = wsteth.call(abi.encodeWithSelector(0x18178358));\r\n\r\n        // poke(bytes32) = 0x1504460f\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"ETH-A\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"ETH-B\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"ETH-C\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"RETH-A\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"WBTC-A\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"WBTC-B\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"WBTC-C\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"WSTETH-A\")));\r\n        (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"WSTETH-B\")));\r\n\r\n        // Daily pokes, i.e. reduced cost pokes\r\n        if (last <= block.timestamp - 1 days) {\r\n            // Poke\r\n            (ok,) = crvv1ethsteth.call(abi.encodeWithSelector(0x18178358));\r\n\r\n            // The GUINIV3DAIUSDCX Oracles are very expensive to poke, and the\r\n            // price should not change frequently, so they are getting poked\r\n            // only once a day.\r\n            (ok,) = guniv3daiusdc1.call(abi.encodeWithSelector(0x18178358));\r\n            (ok,) = guniv3daiusdc2.call(abi.encodeWithSelector(0x18178358));\r\n\r\n            (ok,) = univ2daiusdc.call(abi.encodeWithSelector(0x18178358));\r\n\r\n            // Spotter pokes\r\n            (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"CRVV1ETHSTETH-A\")));\r\n            (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"GUNIV3DAIUSDC1-A\")));\r\n            (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"GUNIV3DAIUSDC2-A\")));\r\n            (ok,) = spotter.call(abi.encodeWithSelector(0x1504460f, bytes32(\"UNIV2DAIUSDC-A\")));\r\n\r\n            last = block.timestamp;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MegaPoker", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc46e5b4fc60c7097184018c5fe977caaffa69bd0bc6117d744b9d08815b0bd5"}