{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/MultiSig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract SecureMultiWallet {\\n    event FundsDeposited(address indexed depositor, uint amount, uint newBalance);\\n    event TransactionSubmitted(\\n        address indexed initiator,\\n        uint indexed txID,\\n        address indexed target,\\n        uint amount,\\n        bytes payload\\n    );\\n    event TransactionConfirmed(address indexed approver, uint indexed txID);\\n    event ConfirmationRevoked(address indexed approver, uint indexed txID);\\n    event TransactionExecuted(address indexed executor, uint indexed txID);\\n\\n    address[] public authorizedUsers;\\n    mapping(address => bool) public isAuthorized;\\n    uint public requiredApprovals;\\n\\n    struct PendingTransaction {\\n        address target;\\n        uint amount;\\n        bytes payload;\\n        bool hasBeenExecuted;\\n        uint approvalCount;\\n    }\\n\\n    // mapping from tx ID => approver => bool\\n    mapping(uint => mapping(address => bool)) public hasConfirmed;\\n\\n    PendingTransaction[] public pendingTransactions;\\n\\n    modifier onlyAuthorized() {\\n        require(isAuthorized[msg.sender], \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    modifier transactionExists(uint _txID) {\\n        require(_txID < pendingTransactions.length, \\\"Transaction not found\\\");\\n        _;\\n    }\\n\\n    modifier notYetExecuted(uint _txID) {\\n        require(!pendingTransactions[_txID].hasBeenExecuted, \\\"Transaction already executed\\\");\\n        _;\\n    }\\n\\n    modifier notYetConfirmed(uint _txID) {\\n        require(!hasConfirmed[_txID][msg.sender], \\\"Transaction already approved\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory _users, uint _requiredApprovals) {\\n        require(_users.length > 0, \\\"Users required\\\");\\n        require(\\n            _requiredApprovals > 0 &&\\n                _requiredApprovals <= _users.length,\\n            \\\"Invalid approval count\\\"\\n        );\\n\\n        for (uint i = 0; i < _users.length; i++) {\\n            address user = _users[i];\\n\\n            require(user != address(0), \\\"Invalid user\\\");\\n            require(!isAuthorized[user], \\\"Duplicate user\\\");\\n\\n            isAuthorized[user] = true;\\n            authorizedUsers.push(user);\\n        }\\n\\n        requiredApprovals = _requiredApprovals;\\n    }\\n\\n    receive() external payable {\\n        emit FundsDeposited(msg.sender, msg.value, address(this).balance);\\n    }\\n\\n    function addTransaction(\\n        address _target,\\n        uint _amount,\\n        bytes memory _payload\\n    ) public onlyAuthorized {\\n        uint txID = pendingTransactions.length;\\n\\n        pendingTransactions.push(\\n            PendingTransaction({\\n                target: _target,\\n                amount: _amount,\\n                payload: _payload,\\n                hasBeenExecuted: false,\\n                approvalCount: 0\\n            })\\n        );\\n\\n        emit TransactionSubmitted(msg.sender, txID, _target, _amount, _payload);\\n    }\\n\\n    function approveTransaction(\\n        uint _txID\\n    ) public onlyAuthorized transactionExists(_txID) notYetExecuted(_txID) notYetConfirmed(_txID) {\\n        PendingTransaction storage pendingTx = pendingTransactions[_txID];\\n        pendingTx.approvalCount += 1;\\n        hasConfirmed[_txID][msg.sender] = true;\\n\\n        emit TransactionConfirmed(msg.sender, _txID);\\n    }\\n\\n    function runTransaction(\\n        uint _txID\\n    ) public onlyAuthorized transactionExists(_txID) notYetExecuted(_txID) {\\n        PendingTransaction storage pendingTx = pendingTransactions[_txID];\\n\\n        require(\\n            pendingTx.approvalCount >= requiredApprovals,\\n            \\\"Insufficient approvals\\\"\\n        );\\n\\n        pendingTx.hasBeenExecuted = true;\\n\\n        (bool success, ) = pendingTx.target.call{value: pendingTx.amount}(\\n            pendingTx.payload\\n        );\\n        require(success, \\\"Transaction execution failed\\\");\\n\\n        emit TransactionExecuted(msg.sender, _txID);\\n    }\\n\\n    function retractApproval(\\n        uint _txID\\n    ) public onlyAuthorized transactionExists(_txID) notYetExecuted(_txID) {\\n        PendingTransaction storage pendingTx = pendingTransactions[_txID];\\n\\n        require(hasConfirmed[_txID][msg.sender], \\\"No prior approval found\\\");\\n\\n        pendingTx.approvalCount -= 1;\\n        hasConfirmed[_txID][msg.sender] = false;\\n\\n        emit ConfirmationRevoked(msg.sender, _txID);\\n    }\\n\\n    function listUsers() public view returns (address[] memory) {\\n        return authorizedUsers;\\n    }\\n\\n    function countTransactions() public view returns (uint) {\\n        return pendingTransactions.length;\\n    }\\n\\n    function fetchTransaction(\\n        uint _txID\\n    )\\n        public\\n        view\\n        returns (\\n            address target,\\n            uint amount,\\n            bytes memory payload,\\n            bool hasBeenExecuted,\\n            uint approvalCount\\n        )\\n    {\\n        PendingTransaction storage pendingTx = pendingTransactions[_txID];\\n\\n        return (\\n            pendingTx.target,\\n            pendingTx.amount,\\n            pendingTx.payload,\\n            pendingTx.hasBeenExecuted,\\n            pendingTx.approvalCount\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_requiredApprovals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txID\",\"type\":\"uint256\"}],\"name\":\"ConfirmationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txID\",\"type\":\"uint256\"}],\"name\":\"TransactionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txID\",\"type\":\"uint256\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"TransactionSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"addTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txID\",\"type\":\"uint256\"}],\"name\":\"approveTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txID\",\"type\":\"uint256\"}],\"name\":\"fetchTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"hasBeenExecuted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"approvalCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTransactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"hasBeenExecuted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"approvalCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredApprovals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txID\",\"type\":\"uint256\"}],\"name\":\"retractApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txID\",\"type\":\"uint256\"}],\"name\":\"runTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SecureMultiWallet", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000007adaafff15af0aa8f6ef5312d6ae270d0c55108e000000000000000000000000fa446e45a4fa68a3032ec7bc1ccaea5630055a47000000000000000000000000f25aaffe769258449261aa651cbe030b3d53cfc70000000000000000000000003294a7f1664e9c6b2caf173d603245c49d65ce38", "EVMVersion": "shanghai", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3218008068a242fbee91d16c56eb70b91b3801962cac8bd3d6928815400cf25"}