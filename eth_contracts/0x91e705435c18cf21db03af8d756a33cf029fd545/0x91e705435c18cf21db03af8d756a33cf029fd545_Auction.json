{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity 0.8.18;\r\n\r\n// Math library from https://github.com/ajna-finance/ajna-core/blob/master/src/libraries/internal/Maths.sol\r\n\r\n/**\r\n    @title  Maths library\r\n    @notice Internal library containing common maths.\r\n */\r\nlibrary Maths {\r\n    uint256 internal constant WAD = 1e18;\r\n    uint256 internal constant RAY = 1e27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + WAD / 2) / WAD;\r\n    }\r\n\r\n    function floorWmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y) / WAD;\r\n    }\r\n\r\n    function ceilWmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + WAD - 1) / WAD;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD + y / 2) / y;\r\n    }\r\n\r\n    function floorWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD) / y;\r\n    }\r\n\r\n    function ceilWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD + y - 1) / y;\r\n    }\r\n\r\n    function ceilDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x + y - 1) / y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function wad(uint256 x) internal pure returns (uint256) {\r\n        return x * WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + RAY / 2) / RAY;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*************************/\r\n    /*** Integer Functions ***/\r\n    /*************************/\r\n\r\n    function maxInt(int256 x, int256 y) internal pure returns (int256) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function minInt(int256 x, int256 y) internal pure returns (int256) {\r\n        return x <= y ? x : y;\r\n    }\r\n}\r\n\r\ncontract Governance {\r\n    /// @notice Emitted when the governance address is updated.\r\n    event GovernanceTransferred(\r\n        address indexed previousGovernance,\r\n        address indexed newGovernance\r\n    );\r\n\r\n    modifier onlyGovernance() {\r\n        _checkGovernance();\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks if the msg sender is the governance.\r\n    function _checkGovernance() internal view virtual {\r\n        require(governance == msg.sender, \"!governance\");\r\n    }\r\n\r\n    /// @notice Address that can set the default base fee and provider\r\n    address public governance;\r\n\r\n    constructor(address _governance) {\r\n        governance = _governance;\r\n\r\n        emit GovernanceTransferred(address(0), _governance);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new address as the governance of the contract.\r\n     * @dev Throws if the caller is not current governance.\r\n     * @param _newGovernance The new governance address.\r\n     */\r\n    function transferGovernance(\r\n        address _newGovernance\r\n    ) external virtual onlyGovernance {\r\n        require(_newGovernance != address(0), \"ZERO ADDRESS\");\r\n        address oldGovernance = governance;\r\n        governance = _newGovernance;\r\n\r\n        emit GovernanceTransferred(oldGovernance, _newGovernance);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ninterface ITaker {\r\n    function auctionTakeCallback(\r\n        bytes32 _auctionId,\r\n        address _sender,\r\n        uint256 _amountTaken,\r\n        uint256 _amountNeeded,\r\n        bytes calldata _data\r\n    ) external;\r\n}\r\n\r\n/// @notice Interface that the optional `hook` contract should implement if the non-standard logic is desired.\r\ninterface IHook {\r\n    function kickable(address _fromToken) external view returns (uint256);\r\n\r\n    function auctionKicked(address _fromToken) external returns (uint256);\r\n\r\n    function preTake(\r\n        address _fromToken,\r\n        uint256 _amountToTake,\r\n        uint256 _amountToPay\r\n    ) external;\r\n\r\n    function postTake(\r\n        address _toToken,\r\n        uint256 _amountTaken,\r\n        uint256 _amountPayed\r\n    ) external;\r\n}\r\n\r\n/**\r\n *   @title Auction\r\n *   @author yearn.fi\r\n *   @notice General use dutch auction contract for token sales.\r\n */\r\ncontract Auction is Governance, ReentrancyGuard {\r\n    using SafeERC20 for ERC20;\r\n\r\n    /// @notice Emitted when a new auction is enabled\r\n    event AuctionEnabled(\r\n        bytes32 auctionId,\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed auctionAddress\r\n    );\r\n\r\n    /// @notice Emitted when an auction is disabled.\r\n    event AuctionDisabled(\r\n        bytes32 auctionId,\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed auctionAddress\r\n    );\r\n\r\n    /// @notice Emitted when auction has been kicked.\r\n    event AuctionKicked(bytes32 auctionId, uint256 available);\r\n\r\n    /// @notice Emitted when any amount of an active auction was taken.\r\n    event AuctionTaken(\r\n        bytes32 auctionId,\r\n        uint256 amountTaken,\r\n        uint256 amountLeft\r\n    );\r\n\r\n    /// @dev Store address and scaler in one slot.\r\n    struct TokenInfo {\r\n        address tokenAddress;\r\n        uint96 scaler;\r\n    }\r\n\r\n    /// @notice Store all the auction specific information.\r\n    struct AuctionInfo {\r\n        TokenInfo fromInfo;\r\n        uint96 kicked;\r\n        address receiver;\r\n        uint128 initialAvailable;\r\n        uint128 currentAvailable;\r\n    }\r\n\r\n    /// @notice Store the hook address and each flag in one slot.\r\n    struct Hook {\r\n        address hook;\r\n        bool kickable;\r\n        bool kick;\r\n        bool preTake;\r\n        bool postTake;\r\n    }\r\n\r\n    uint256 internal constant WAD = 1e18;\r\n\r\n    /// @notice Used for the price decay.\r\n    uint256 internal constant MINUTE_HALF_LIFE =\r\n        0.988514020352896135_356867505 * 1e27; // 0.5^(1/60)\r\n\r\n    /// @notice Struct to hold the info for `want`.\r\n    TokenInfo internal wantInfo;\r\n\r\n    /// @notice Contract to call during write functions.\r\n    Hook internal hook_;\r\n\r\n    /// @notice The amount to start the auction at.\r\n    uint256 public startingPrice;\r\n\r\n    /// @notice The time that each auction lasts.\r\n    uint256 public auctionLength;\r\n\r\n    /// @notice The minimum time to wait between auction 'kicks'.\r\n    uint256 public auctionCooldown;\r\n\r\n    /// @notice Mapping from an auction ID to its struct.\r\n    mapping(bytes32 => AuctionInfo) public auctions;\r\n\r\n    /// @notice Array of all the enabled auction for this contract.\r\n    bytes32[] public enabledAuctions;\r\n\r\n    constructor() Governance(msg.sender) {}\r\n\r\n    /**\r\n     * @notice Initializes the Auction contract with initial parameters.\r\n     * @param _want Address this auction is selling to.\r\n     * @param _hook Address of the hook contract (optional).\r\n     * @param _governance Address of the contract governance.\r\n     * @param _auctionLength Duration of each auction in seconds.\r\n     * @param _auctionCooldown Cooldown period between auctions in seconds.\r\n     * @param _startingPrice Starting price for each auction.\r\n     */\r\n    function initialize(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) external virtual {\r\n        require(auctionLength == 0, \"initialized\");\r\n        require(_want != address(0), \"ZERO ADDRESS\");\r\n        require(_auctionLength != 0, \"length\");\r\n        require(_auctionLength < _auctionCooldown, \"cooldown\");\r\n        require(_startingPrice != 0, \"starting price\");\r\n\r\n        // Cannot have more than 18 decimals.\r\n        uint256 decimals = ERC20(_want).decimals();\r\n        require(decimals <= 18, \"unsupported decimals\");\r\n\r\n        // Set variables\r\n        wantInfo = TokenInfo({\r\n            tokenAddress: _want,\r\n            scaler: uint96(WAD / 10 ** decimals)\r\n        });\r\n\r\n        // If we are using a hook.\r\n        if (_hook != address(0)) {\r\n            // All flags default to true.\r\n            hook_ = Hook({\r\n                hook: _hook,\r\n                kickable: true,\r\n                kick: true,\r\n                preTake: true,\r\n                postTake: true\r\n            });\r\n        }\r\n\r\n        governance = _governance;\r\n        auctionLength = _auctionLength;\r\n        auctionCooldown = _auctionCooldown;\r\n        startingPrice = _startingPrice;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         VIEW METHODS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Get the address of this auctions want token.\r\n     * @return . The want token.\r\n     */\r\n    function want() public view virtual returns (address) {\r\n        return wantInfo.tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the address of the hook if any.\r\n     * @return . The hook.\r\n     */\r\n    function hook() external view virtual returns (address) {\r\n        return hook_.hook;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current status of which hooks are being used.\r\n     * @return . If the kickable hook is used.\r\n     * @return . If the kick hook is used.\r\n     * @return . If the preTake hook is used.\r\n     * @return . If the postTake hook is used.\r\n     */\r\n    function getHookFlags()\r\n        external\r\n        view\r\n        virtual\r\n        returns (bool, bool, bool, bool)\r\n    {\r\n        Hook memory _hook = hook_;\r\n        return (_hook.kickable, _hook.kick, _hook.preTake, _hook.postTake);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the length of the enabled auctions array.\r\n     */\r\n    function numberOfEnabledAuctions() external view virtual returns (uint256) {\r\n        return enabledAuctions.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the unique auction identifier.\r\n     * @param _from The address of the token to sell.\r\n     * @return bytes32 A unique auction identifier.\r\n     */\r\n    function getAuctionId(address _from) public view virtual returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_from, want(), address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves information about a specific auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return _from The address of the token to sell.\r\n     * @return _to The address of the token to buy.\r\n     * @return _kicked The timestamp of the last kick.\r\n     * @return _available The current available amount for the auction.\r\n     */\r\n    function auctionInfo(\r\n        bytes32 _auctionId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            address _from,\r\n            address _to,\r\n            uint256 _kicked,\r\n            uint256 _available\r\n        )\r\n    {\r\n        AuctionInfo memory auction = auctions[_auctionId];\r\n\r\n        return (\r\n            auction.fromInfo.tokenAddress,\r\n            want(),\r\n            auction.kicked,\r\n            auction.kicked + auctionLength > block.timestamp\r\n                ? auction.currentAvailable\r\n                : 0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the pending amount available for the next auction.\r\n     * @dev Defaults to the auctions balance of the from token if no hook.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return uint256 The amount that can be kicked into the auction.\r\n     */\r\n    function kickable(\r\n        bytes32 _auctionId\r\n    ) external view virtual returns (uint256) {\r\n        // If not enough time has passed then `kickable` is 0.\r\n        if (auctions[_auctionId].kicked + auctionCooldown > block.timestamp) {\r\n            return 0;\r\n        }\r\n\r\n        // Check if we have a hook to call.\r\n        Hook memory _hook = hook_;\r\n        if (_hook.kickable) {\r\n            // If so default to the hooks logic.\r\n            return\r\n                IHook(_hook.hook).kickable(\r\n                    auctions[_auctionId].fromInfo.tokenAddress\r\n                );\r\n        } else {\r\n            // Else just use the full balance of this contract.\r\n            return\r\n                ERC20(auctions[_auctionId].fromInfo.tokenAddress).balanceOf(\r\n                    address(this)\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of `want` needed to buy a specific amount of `from`.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _amountToTake The amount of `from` to take in the auction.\r\n     * @return . The amount of `want` needed to fulfill the take amount.\r\n     */\r\n    function getAmountNeeded(\r\n        bytes32 _auctionId,\r\n        uint256 _amountToTake\r\n    ) external view virtual returns (uint256) {\r\n        return\r\n            _getAmountNeeded(\r\n                auctions[_auctionId],\r\n                _amountToTake,\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of `want` needed to buy a specific amount of `from` at a specific timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _amountToTake The amount `from` to take in the auction.\r\n     * @param _timestamp The specific timestamp for calculating the amount needed.\r\n     * @return . The amount of `want` needed to fulfill the take amount.\r\n     */\r\n    function getAmountNeeded(\r\n        bytes32 _auctionId,\r\n        uint256 _amountToTake,\r\n        uint256 _timestamp\r\n    ) external view virtual returns (uint256) {\r\n        return\r\n            _getAmountNeeded(auctions[_auctionId], _amountToTake, _timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the amount of `want` needed to buy `_amountToTake`.\r\n     */\r\n    function _getAmountNeeded(\r\n        AuctionInfo memory _auction,\r\n        uint256 _amountToTake,\r\n        uint256 _timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        return\r\n            // Scale _amountToTake to 1e18\r\n            (_amountToTake *\r\n                _auction.fromInfo.scaler *\r\n                // Price is always 1e18\r\n                _price(\r\n                    _auction.kicked,\r\n                    _auction.initialAvailable * _auction.fromInfo.scaler,\r\n                    _timestamp\r\n                )) /\r\n            1e18 /\r\n            // Scale back down to want.\r\n            wantInfo.scaler;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the price of the auction at the current timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return . The price of the auction.\r\n     */\r\n    function price(bytes32 _auctionId) external view virtual returns (uint256) {\r\n        return price(_auctionId, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the price of the auction at a specific timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _timestamp The specific timestamp for calculating the price.\r\n     * @return . The price of the auction.\r\n     */\r\n    function price(\r\n        bytes32 _auctionId,\r\n        uint256 _timestamp\r\n    ) public view virtual returns (uint256) {\r\n        // Get unscaled price and scale it down.\r\n        return\r\n            _price(\r\n                auctions[_auctionId].kicked,\r\n                auctions[_auctionId].initialAvailable *\r\n                    auctions[_auctionId].fromInfo.scaler,\r\n                _timestamp\r\n            ) / wantInfo.scaler;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate the scaled price based on auction parameters.\r\n     * @param _kicked The timestamp the auction was kicked.\r\n     * @param _available The initial available amount scaled 1e18.\r\n     * @param _timestamp The specific timestamp for calculating the price.\r\n     * @return . The calculated price scaled to 1e18.\r\n     */\r\n    function _price(\r\n        uint256 _kicked,\r\n        uint256 _available,\r\n        uint256 _timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        if (_available == 0) return 0;\r\n\r\n        uint256 secondsElapsed = _timestamp - _kicked;\r\n\r\n        if (secondsElapsed > auctionLength) return 0;\r\n\r\n        // Exponential decay from https://github.com/ajna-finance/ajna-core/blob/master/src/libraries/helpers/PoolHelper.sol\r\n        uint256 hoursComponent = 1e27 >> (secondsElapsed / 3600);\r\n        uint256 minutesComponent = Maths.rpow(\r\n            MINUTE_HALF_LIFE,\r\n            (secondsElapsed % 3600) / 60\r\n        );\r\n        uint256 initialPrice = Maths.wdiv(startingPrice * 1e18, _available);\r\n\r\n        return\r\n            (initialPrice * Maths.rmul(hoursComponent, minutesComponent)) /\r\n            1e27;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Enables a new auction.\r\n     * @dev Uses governance as the receiver.\r\n     * @param _from The address of the token to be auctioned.\r\n     * @return . The unique identifier of the enabled auction.\r\n     */\r\n    function enable(address _from) external virtual returns (bytes32) {\r\n        return enable(_from, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Enables a new auction.\r\n     * @param _from The address of the token to be auctioned.\r\n     * @param _receiver The address that will receive the funds in the auction.\r\n     * @return _auctionId The unique identifier of the enabled auction.\r\n     */\r\n    function enable(\r\n        address _from,\r\n        address _receiver\r\n    ) public virtual onlyGovernance returns (bytes32 _auctionId) {\r\n        address _want = want();\r\n        require(_from != address(0) && _from != _want, \"ZERO ADDRESS\");\r\n        require(\r\n            _receiver != address(0) && _receiver != address(this),\r\n            \"receiver\"\r\n        );\r\n        // Cannot have more than 18 decimals.\r\n        uint256 decimals = ERC20(_from).decimals();\r\n        require(decimals <= 18, \"unsupported decimals\");\r\n\r\n        // Calculate the id.\r\n        _auctionId = getAuctionId(_from);\r\n\r\n        require(\r\n            auctions[_auctionId].fromInfo.tokenAddress == address(0),\r\n            \"already enabled\"\r\n        );\r\n\r\n        // Store all needed info.\r\n        auctions[_auctionId].fromInfo = TokenInfo({\r\n            tokenAddress: _from,\r\n            scaler: uint96(WAD / 10 ** decimals)\r\n        });\r\n        auctions[_auctionId].receiver = _receiver;\r\n\r\n        // Add to the array.\r\n        enabledAuctions.push(_auctionId);\r\n\r\n        emit AuctionEnabled(_auctionId, _from, _want, address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Disables an existing auction.\r\n     * @dev Only callable by governance.\r\n     * @param _from The address of the token being sold.\r\n     */\r\n    function disable(address _from) external virtual {\r\n        disable(_from, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Disables an existing auction.\r\n     * @dev Only callable by governance.\r\n     * @param _from The address of the token being sold.\r\n     * @param _index The index the auctionId is at in the array.\r\n     */\r\n    function disable(\r\n        address _from,\r\n        uint256 _index\r\n    ) public virtual onlyGovernance {\r\n        bytes32 _auctionId = getAuctionId(_from);\r\n\r\n        // Make sure the auction was enabled.\r\n        require(\r\n            auctions[_auctionId].fromInfo.tokenAddress != address(0),\r\n            \"not enabled\"\r\n        );\r\n\r\n        // Remove the struct.\r\n        delete auctions[_auctionId];\r\n\r\n        // Remove the auction ID from the array.\r\n        bytes32[] memory _enabledAuctions = enabledAuctions;\r\n        if (_enabledAuctions[_index] != _auctionId) {\r\n            // If the _index given is not the id find it.\r\n            for (uint256 i = 0; i < _enabledAuctions.length; ++i) {\r\n                if (_enabledAuctions[i] == _auctionId) {\r\n                    _index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Move the id to the last spot if not there.\r\n        if (_index < _enabledAuctions.length - 1) {\r\n            _enabledAuctions[_index] = _enabledAuctions[\r\n                _enabledAuctions.length - 1\r\n            ];\r\n            // Update the array.\r\n            enabledAuctions = _enabledAuctions;\r\n        }\r\n\r\n        // Pop the id off the array.\r\n        enabledAuctions.pop();\r\n\r\n        emit AuctionDisabled(_auctionId, _from, want(), address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Set the flags to be used with hook.\r\n     * @param _kickable If the kickable hook should be used.\r\n     * @param _kick If the kick hook should be used.\r\n     * @param _preTake If the preTake hook should be used.\r\n     * @param _postTake If the postTake should be used.\r\n     */\r\n    function setHookFlags(\r\n        bool _kickable,\r\n        bool _kick,\r\n        bool _preTake,\r\n        bool _postTake\r\n    ) external virtual onlyGovernance {\r\n        address _hook = hook_.hook;\r\n        require(_hook != address(0), \"no hook set\");\r\n\r\n        hook_ = Hook({\r\n            hook: _hook,\r\n            kickable: _kickable,\r\n            kick: _kick,\r\n            preTake: _preTake,\r\n            postTake: _postTake\r\n        });\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                      PARTICIPATE IN AUCTION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Kicks off an auction, updating its status and making funds available for bidding.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return available The available amount for bidding on in the auction.\r\n     */\r\n    function kick(\r\n        bytes32 _auctionId\r\n    ) external virtual nonReentrant returns (uint256 available) {\r\n        address _fromToken = auctions[_auctionId].fromInfo.tokenAddress;\r\n        require(_fromToken != address(0), \"not enabled\");\r\n        require(\r\n            block.timestamp > auctions[_auctionId].kicked + auctionCooldown,\r\n            \"too soon\"\r\n        );\r\n\r\n        Hook memory _hook = hook_;\r\n        // Use hook if defined.\r\n        if (_hook.kick) {\r\n            available = IHook(_hook.hook).auctionKicked(_fromToken);\r\n        } else {\r\n            // Else just use current balance.\r\n            available = ERC20(_fromToken).balanceOf(address(this));\r\n        }\r\n\r\n        require(available != 0, \"nothing to kick\");\r\n\r\n        // Update the auctions status.\r\n        auctions[_auctionId].kicked = uint96(block.timestamp);\r\n        auctions[_auctionId].initialAvailable = uint128(available);\r\n        auctions[_auctionId].currentAvailable = uint128(available);\r\n\r\n        emit AuctionKicked(_auctionId, available);\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @dev Defaults to taking the full amount and sending to the msg sender.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return . The amount of fromToken taken in the auction.\r\n     */\r\n    function take(bytes32 _auctionId) external virtual returns (uint256) {\r\n        return _take(_auctionId, type(uint256).max, msg.sender, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction with a specified maximum amount.\r\n     * @dev Uses the sender's address as the receiver.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @return . The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, msg.sender, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @param _receiver The address that will receive the fromToken.\r\n     * @return _amountTaken The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, _receiver, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @param _receiver The address that will receive the fromToken.\r\n     * @param _data The data signify the callback should be used and sent with it.\r\n     * @return _amountTaken The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver,\r\n        bytes calldata _data\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, _receiver, _data);\r\n    }\r\n\r\n    /// @dev Implements the take of the auction.\r\n    function _take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver,\r\n        bytes memory _data\r\n    ) internal virtual nonReentrant returns (uint256 _amountTaken) {\r\n        AuctionInfo memory auction = auctions[_auctionId];\r\n        // Make sure the auction is active.\r\n        require(\r\n            auction.kicked + auctionLength >= block.timestamp,\r\n            \"not kicked\"\r\n        );\r\n\r\n        // Max amount that can be taken.\r\n        _amountTaken = auction.currentAvailable > _maxAmount\r\n            ? _maxAmount\r\n            : auction.currentAvailable;\r\n\r\n        // Get the amount needed\r\n        uint256 needed = _getAmountNeeded(\r\n            auction,\r\n            _amountTaken,\r\n            block.timestamp\r\n        );\r\n\r\n        require(needed != 0, \"zero needed\");\r\n\r\n        // How much is left in this auction.\r\n        uint256 left;\r\n        unchecked {\r\n            left = auction.currentAvailable - _amountTaken;\r\n        }\r\n        auctions[_auctionId].currentAvailable = uint128(left);\r\n\r\n        Hook memory _hook = hook_;\r\n        if (_hook.preTake) {\r\n            // Use hook if defined.\r\n            IHook(_hook.hook).preTake(\r\n                auction.fromInfo.tokenAddress,\r\n                _amountTaken,\r\n                needed\r\n            );\r\n        }\r\n\r\n        // Send `from`.\r\n        ERC20(auction.fromInfo.tokenAddress).safeTransfer(\r\n            _receiver,\r\n            _amountTaken\r\n        );\r\n\r\n        // If the caller has specified data.\r\n        if (_data.length != 0) {\r\n            // Do the callback.\r\n            ITaker(_receiver).auctionTakeCallback(\r\n                _auctionId,\r\n                msg.sender,\r\n                _amountTaken,\r\n                needed,\r\n                _data\r\n            );\r\n        }\r\n\r\n        // Cache the want address.\r\n        address _want = want();\r\n\r\n        // Pull `want`.\r\n        ERC20(_want).safeTransferFrom(msg.sender, auction.receiver, needed);\r\n\r\n        // Post take hook if defined.\r\n        if (_hook.postTake) {\r\n            IHook(_hook.hook).postTake(_want, _amountTaken, needed);\r\n        }\r\n\r\n        emit AuctionTaken(_auctionId, _amountTaken, left);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"AuctionDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"AuctionEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"AuctionKicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"auctionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLeft\",\"type\":\"uint256\"}],\"name\":\"AuctionTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"}],\"name\":\"auctionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kicked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"auctions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"scaler\",\"type\":\"uint96\"}],\"internalType\":\"struct Auction.TokenInfo\",\"name\":\"fromInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint96\",\"name\":\"kicked\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"initialAvailable\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentAvailable\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enabledAuctions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountToTake\",\"type\":\"uint256\"}],\"name\":\"getAmountNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getAmountNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getAuctionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHookFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"}],\"name\":\"kick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"}],\"name\":\"kickable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfEnabledAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_kickable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_kick\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_preTake\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_postTake\",\"type\":\"bool\"}],\"name\":\"setHookFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"}],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"take\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Auction", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5c7d8975d468206cce82a7bf930d55d1735319deed9140f2ed0162f433146597"}