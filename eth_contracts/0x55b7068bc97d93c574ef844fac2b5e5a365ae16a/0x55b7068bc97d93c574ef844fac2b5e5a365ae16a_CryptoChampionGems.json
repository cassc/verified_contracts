{"SourceCode": "/**\r\n\r\n// This contract has been developped by Crypto Champion Game team.\r\n\r\nAny question? feel free to contact @Trum_dev on telegram!\r\n\r\n _______  _______           _______ _________ _______    _______           _______  _______  _______ _________ _______  _          _______  _______  _______  _______ \r\n(  ____ \\(  ____ )|\\     /|(  ____ )\\__   __/(  ___  )  (  ____ \\|\\     /|(  ___  )(       )(  ____ )\\__   __/(  ___  )( (    /|  (  ____ \\(  ___  )(       )(  ____ \\\r\n| (    \\/| (    )|( \\   / )| (    )|   ) (   | (   ) |  | (    \\/| )   ( || (   ) || () () || (    )|   ) (   | (   ) ||  \\  ( |  | (    \\/| (   ) || () () || (    \\/\r\n| |      | (____)| \\ (_) / | (____)|   | |   | |   | |  | |      | (___) || (___) || || || || (____)|   | |   | |   | ||   \\ | |  | |      | (___) || || || || (__    \r\n| |      |     __)  \\   /  |  _____)   | |   | |   | |  | |      |  ___  ||  ___  || |(_)| ||  _____)   | |   | |   | || (\\ \\) |  | | ____ |  ___  || |(_)| ||  __)   \r\n| |      | (\\ (      ) (   | (         | |   | |   | |  | |      | (   ) || (   ) || |   | || (         | |   | |   | || | \\   |  | | \\_  )| (   ) || |   | || (      \r\n| (____/\\| ) \\ \\__   | |   | )         | |   | (___) |  | (____/\\| )   ( || )   ( || )   ( || )      ___) (___| (___) || )  \\  |  | (___) || )   ( || )   ( || (____/\\\r\n(_______/|/   \\__/   \\_/   |/          )_(   (_______)  (_______/|/     \\||/     \\||/     \\||/       \\_______/(_______)|/    )_)  (_______)|/     \\||/     \\|(_______/\r\n                                                                                                                                                                     \r\nCryptoChampion is an epic mobile/browser NFT blockchain-based game where you can fight, collect, earn and conquer with and against other players.\r\n                                                \r\n                                                \r\nPlay now: https://cryptochampion.game/launcher/\r\nWebsite: https://cryptochampion.game/\r\nWhitepaper: https://whitepaper.cryptochampion.game/\r\nTelegram: https://t.me/CryptoChampionPortal/\r\nTwitter: https://twitter.com/CChampionGame/\r\nInstagram: https://www.instagram.com/cryptochampiongame/\r\nDiscord: https://discord.gg/cryptochampiongame/\r\n\r\n\r\n\r\n\r\n                                                                         -MMMMMMMMMMMMML\"                                                                            \r\n                                                                       'dMd_>><<<<<<<<fM#[                                                                           \r\n                                                                        mMp>>+]?{?????wMj                                                                            \r\n                                                                         #ML>>-?](|(|/MJ                                                                             \r\n                                                                         .Mkf(vZZQQmpWb>                                                                             \r\n                                                                         .mMobbbbwwwqMq                                                                              \r\n                                                                         .pMabbbbwwwqMp                                                                              \r\n                                                                         .*MabbbbwwwqMp'                                                                             \r\n                                                                         .MMobbbbwwwqMbl                                                                             \r\n                                                                         .MMabbbbwwwwMo(                                                                             \r\n                                                                         .WMobbbbwwwwM*u                                                                             \r\n                                                                         .*MobbbbqwwwMMY                                                                             \r\n                                                                         .*MopbbbwwwwMMJ                                                                             \r\n                                                                         .#MobbbbwwwwMMX                                                                             \r\n                                                                         .MMobbbqqqwwMMU                                                                             \r\n                                                                         .MMobbbbqppqMMJ                                                                             \r\n                                                                         .MMabbbbqwwqWMJ                                                                             \r\n                                                                         .MMobbbbqwwwMMJ                                                                             \r\n                                                                         .MMabbbbqwwq#MJ                                                                             \r\n                                                                         'MMobbbbqwww*MJ                                                                             \r\n                                                                         1MMahabY0mqk*MMMQ/(;                                                                        \r\n                                                                    ;cUhMMqxr]~~+[[[(/jOZb#MMMhJc)                                                                   \r\n                                                               \"xZ*MMZ))_+~~~~~~~[]_+[]]]}11uCLq#MMMx                                                                \r\n                                                              <Mv__~~~~~<<~<~?]~~]]][[[[]]][]]][[zQMn                                                                \r\n                                                              {#u~~~~~+--]{uXYkdpakbr]}(()[]]]]]]]/Mn                                                                \r\n +MO|]?????]~:                                               `##CfU0hWMMM#llIIIl!]]?????YWMMM#WbvxcMJ??}Z8##b{??_:                                                   \r\n ?MMMMMMMMMMMMMMMMMMW#Zxfffffj               '+ffffffnq8WMMMMMMMMMMMMaUZ##uuux~l!????]|Xw#MMMMMMMMMMMMMMMMMMMMMMMMMMMpffft'         lbMMMMMMMMMMM&8&kZXrfffffffftfff'\r\n.)MjIl_1||(((((((((nZ*8WMMMMM#;LXYYYYUZ#MMMMMMMMMMMMMMMMMMMMMMMMM]     JMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM&oY|0MMMMMMMMMMMMMMMMMMZUYY/'JMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM#^\r\n'cMjI'..`\"::;;IIIIIIIIIII>?ILMMMMMMMMMMMMMMM#&BbY{_-?/uM##B%M#MMM*,   +pMMMMMMMMMMMMMMMM&q)/t]-?->lllllllllXM<llli+?-????-nb8#MMMMMMMMMplllllllli<+-}f{-----???}aMMX'\r\n`wMrllllllllllllllllllllll~_LMlllllllllllllllllllll++ltMZllll1fdM#:   xMMo!!!!!!?#*(!!!!!!!!1_!!!!!!!!!!!!!YM~!!!!!!!!!!!!!!!!!!!!!i[1Mp!!!!!!!!!!}}!ll!!!!!!' >UMM+ \r\n^*Mr!!!!!!!!!!!!!!!!!!!!!!~{mM!!!!!!!!!!!!!!!!!!!~?!!ifMmii>{1faMMMMMMMMM#iiiiii]#*|iiiiiiii1[iiiiiiiiiiiiiYM+iiiiiiiiiiiiiiiiii<-}+iiMdiiii!!>-}<!!!!!!!!!!i!\"<UMM~ \r\n\"&Mx>>iiiiiiiiiiiiiiiiiiiii-mM>iiiiiiiiiii>>>>>+]>>>>>jMm>~}1]{*MMMMMMMMM#>>>>>>[#*>>>>>>>>1}]tjj/>>>>>>>>UM_>>>>>>>>>>>>>>>~~?>>>>>>Md>>>>_1->>>>>>>>>>>>>>>>~JMM~ \r\n\"WMn<<<<<<<<<)MMMWWWWWWWM*hdoM<<<<<<<_YXCq#WWC?~<<<<<<rMm<]1_<)MMMMMMMMMM#~~~~~~{#*t~~~~~~~#MMMMMMd~~~~~~~~UM-^'\"::,:~~~<~~~++~~~~~~~<Md<_}]_<<<<<<<<<<<<<<<<<<_JMM~ \r\n\"#Mu++++++++_QMMMMMMMMMMMMMMMM+++++~+}#MMMMMMU++++++++xMw?}-++(MMMMMMMMMM#++++++1#*f+++++++#MMMMMMp++++_+++JM#*oakdqwL+++++++umZZZZZZZMb{[_++++rd*MMMMMW-++++++-CM#< \r\n^#Mv-------_]8MMMMMMMMMMMMMMMM-______{MMMMMMMU________nMq}-_--[vQqa88&M#M#_-----)##j-------#MMMMMM(--------CMMMMMMMMWk-__----CWMMMMMMMMb-------zMMMMMMM&?_____-]CMM~ \r\n\"MMc]]]]]]]]}MMMMMMMMMMMMMMMMM???????)MMMMMMMC????????uMq???????????????????????(##r???????#MMMMMM]?????[[?CMMMMMMMMMk???????jkMMMMMMMMb???????XMMMMMMM&[??????[LMOI \r\n\"MMz}}}}[[[[{MMMMMMMMMMMMMMMMM[]][[]](MMMMMMMC]]]]]]]]uMq]]]]]]]]]]]]]][]]]]]]]]|##x[[]][]]#MMMMMo]]]]]][1}LMMMMMMMMMh]]]]]]]1qMMMMMMMMb]]]]]]]YMMMMMMM#}]]]]]]}QM|  \r\n\"MMX{{{{{{{{)MMMMMMMMMMMMMMMMM}}}}}}{{[[[}}}}}}}}}}}I+vMMMwXzv}}}}}}}}}}}}}}}}[[_##x}[}[[}[[[[}}[[[[}}[[[}{LMMMMMMMMMh[[[[}{}}mMMMMMMMMb}}}[[[}YMMMMMMM#{[[[[[[{QM)  \r\n\"MMY11111111OMMMMMMMMMMMMMMMMM1{{{{1{{{{{{{{{{{{{{?I^_cMMMMMMMM#X{{{{{{{{/{}{{{<[##n}{{{{{{{{{{{{{{{{{{{{{10MMMMMMMMMh{}{{{}{}mMMMMMMMMb}{{}}{{UMMMMMMM#1}{{}{{1QM)  \r\n\"MMY))))1111&MMMMMMMMMMMMMMMMM111111111111111111111{1UkMMMMMMMMdj1111111{&MMMMMMMM#n{1{{{{{{{{{{{{{{{{{{{{1QMMMMMMMMMh{11{{{{{wMMMMMMMMk{{{{{{{UMMMMMMM#){{{{{{)0M)  \r\n\"MMY))))))))||||(((|trvYOa#WMM)111111)11)111)11)1uMMMMMMMMMMMMMO)111)11)1#MMMMMMMM#n11111111111111(Z#***MMMMMMMMMMMMMa1111111{wMMMMMMMMk111111111((|(/L#(111111(0#1  \r\n;MMY))))))))))))))))))))))))mM))))))))vwf)))))))))n#MMMMMMMMMMMO)))))))))MMMMMMMMM#n1))))))))uMMMMMMMMMMMMMMMMMMMMMMMa11111111wMMMMMMMMk11111)1))1)11))11111111(0M)  \r\n<MMY))))))))))))))))))))))))mM))))))))vMMx)))))))))vaMMMMMMMMMMO)))))))))MMMMMMMMM#t{))))))))vMMMMMMMMMMMMMMMMMMMMMMMa))))))1{wMMMMMMMMk)[{))))))))))))))))))))(0w<  \r\n/MMY))))))))))))))))))))))))mM()))))))vMMML))))))))1vaMMMMMMMMMO)))))))))MMMMMMMMM#1[))))))))vMMMMMMMMMMMMMMMMMMMMMMMa))))))+>wMMMMMMMMk)iI{)))))))))))))))))))|0c.  \r\nQMMY)))))))))))))))fUZZZZZZZaM()))))))uMMMM0)))))))[])*MMMMMMMMO))))))))|MMMMMMMMM#r1))))))))/OMMMMMMMMMMMMMMMMMMMMMMa))))))[]mMMMMMMMMk)[+{)))))))))))))))))))|0u   \r\nhMMabbbka#MMMMMMMMMMMMMMMMMMMMbbbbbbkk*MMMMMMMMMMMMMMMMMMMMMMMMokkbbbbbbhMMMMMMMMMMabbbbbbkbbboMMMMMMMMMMMMMMMMMMMMMM#bbbbbkkh#MMMMMMMMMMMMMMMMMMMMMWM*ahkbbbbbkou   \r\n&MMMMMMMMMMMMMMMMMMMM&tdMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMp:             .....`i{v%%z   \r\n                       qMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*C/_ll                        \r\n                       qMjv0qmmwwwwwwwoMMMMMMMMMMhdqaM#&WapwwwwwwwwMdwww*MMMhwmZwhMMMMMMMM*qwwwq*MMMMMMMMMMM#W#mwqb*&W#MMMMMMkmmmmdMMMmmmmm*M                        \r\n                       pMttttttttttttfOmttt#MMMMjtt_vXtttttttttttl(#ttt>XMMwfttt\"Xput/////////[(k0Yxt1(/////<(*|||||||||||(+YC|||||QMM|||}{kM                        \r\n                       pMjjjjjjjjjjfjrZwjjf8MMMWxjj-vYjjjjjjjjjjj!/#jjjjIzMmffff\"YQfffffffffff+}hjfttttttttt}/*ttttttttttt|,UL//t//tqMf//?}kM                        \r\n                       pMxxxxxMMMMMM##WwxxxOMMMWuxx?vJxxxxmMM*xxx]|#xxxxx/xxxxrr\"U0rrrvMMMWrrr_{h0whaUrj/iCaaoofjjjfvbhkcft,JQffffffjhwff-}ha                        \r\n                       pMuuuuuMMMMMMMMWquuuv###Mcuu[cCuuunmMM*uuun}#uuunuunnnnnn:CZunnzMMMMunn?)hMMMkXxxf!qMMM*rxxxWMMM&Jxj:C0xrrxxxxx8xx-{h8                        \r\n                       pMcccccMMMMMMMMWpccccccccccccqLcccvqMM#ccccc#cccYcvccvvvvvLmxuvXhhhdvvvvzaMMMwuuur<hMMM*uuuuMMMM&Cux:QOuuuuuuuuuuu-1at                        \r\n                       qMXXXXqMMMMMMMMWpXXXXXXXXXXXXp0XXXXXXXXXXXXX#XXXbpXXJbQXXz0wzzzzzzzzzzzzYaMMMqczzn+WMMM*ccccMMMMWLcu;0ZcccXLcccczc](a^                        \r\n                      .pMUUUUmwwwwwwqd#dUUUCppppUUUUdOUUUUUUUYYUYYU#YYYkMMpoMOYYYOqYYYYYYYQppppoMMMMpYYYXLWMMM*XXXXmmmmqCXc;OwXXXLMhCYYYY(ja                         \r\n                      `pMCCCCCCCCCCCCLdbCCCQMMMMbCCCbZCCJZahhhhwJCJ#CJJkMMMWMZJJJZpJJJJJqUft]rMMMCJJJUUJUUJJJJ#UUUUUUUUUUUYrmqUUUQMM*LUJJruo                         \r\n                      ,dMLLLLLLLLLLLLQdkLLLQmuoMMLLLbmLLLqt\"\";#bLLLMOCLk_l>/MmLLLmpLLLLLpn]]]r#MMLCCCCCCCCCCCC#JCCCCCCJJCJCCmqCCC0#jCM#CCCLo                         \r\n                      <kMMMM#oahhhhhkb*MMMMb^   aMMMMhhhhx    lmhhhhhMM&_IIlxkhaMMMMMMM#ox]?]xWM}bhhhhhhhhao#MMMMMMMMMMMMMMMMMMMMM#/ .hMMohL                         \r\n                                                                    >MMO<Illllll>nwq/]?]]]]]]1OM/.                         .\"~~'       '                             \r\n                                                                    >MMx!lllllI!l>]]]]]]?]]]]?XM*'                                                                   \r\n                                                                    >MM|lll!!llll>?]]]]???]]]]XM#'                                                                   \r\n                                                                    >MM)lllll!~lI>?]]]]???]]]]XMM`                                                                   \r\n                                                                    >MM)IIl!lIIl>--]]]]??]]??]XMM'                                                                   \r\n                                                                    {MM(lll!!lIlli_~_-??]?]]]tkM>                                                                    \r\n                                                                    >MMC>l!!!lll!i_?]??~]?]])h#}                                                                     \r\n                                                                     ]oMmll!!lll!!_]]]]??]]]ah1                                                                      \r\n                                                                      imMb!!illl!l~]]]]]]]?ha]                                                                       \r\n                                                                       ,bMw!llll!l~]]]?]]]qMI                                                                        \r\n                                                                         MMC!!!ll!+]]]?]]0M'                                                                         \r\n                                                                         .wMY>l!!l~]]]]}C#!                                                                          \r\n                                                                          :0MX<!!l~]?]}Uo?                                                                           \r\n                                                                           `vMU!!!+]]]Yb?                                                                            \r\n                                                                             LMO!!~]]Yk>                                                                             \r\n                                                                              xMm!~[XM,                                                                              \r\n                                                                               'MQ~uo.                                                                               \r\n                                                                                l#qpl                                                                                \r\n                                                                                 >J~                                                                                 \r\n\r\n\r\n2021-2024 All rights reserved.\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _createInitialSupply(\r\n        address account,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ncontract CryptoChampionGems is ERC20, Ownable {\r\n    uint256 public maxBuy;\r\n    uint256 public maxSell;\r\n    uint256 public maxWallet;\r\n\r\n    IDexRouter public dexRouter;\r\n    address public lpPair;\r\n\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    address operationsAddress;\r\n    address devAddress;\r\n\r\n    address public teamAddress;\r\n\r\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\r\n    uint256 public blockForPenaltyEnd;\r\n    mapping(address => bool) public boughtEarly;\r\n    uint256 public botsCaught;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    // Anti-bot and anti-whale mappings and variables\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyOperationsFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n    uint256 public buyBurnFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellOperationsFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n    uint256 public sellBurnFee;\r\n\r\n    uint256 public tokensForOperations;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n    uint256 public tokensForBurn;\r\n\r\n    bool private transferFee;\r\n\r\n    /******************/\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event Launched();\r\n\r\n    event RemovedLimits();\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event UpdatedMaxBuyAmount(uint256 newAmount);\r\n\r\n    event UpdatedMaxSellAmount(uint256 newAmount);\r\n\r\n    event UpdatedMaxWalletAmount(uint256 newAmount);\r\n\r\n    event UpdatedOperationsAddress(address indexed newWallet);\r\n\r\n    event MaxTransactionExclusion(address _address, bool excluded);\r\n\r\n    event BuyBackTriggered(uint256 amount);\r\n\r\n    event OwnerForcedSwapBack(uint256 timestamp);\r\n\r\n    event CaughtEarlyBuyer(address sniper);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event TransferForeignToken(address token, uint256 amount);\r\n\r\n    constructor() ERC20(\"CryptoChampionGems\", \"CCG\") {\r\n        address newOwner = msg.sender;\r\n        IDexRouter _dexRouter = IDexRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        dexRouter = _dexRouter;\r\n\r\n        // create pair\r\n        lpPair = IDexFactory(_dexRouter.factory()).createPair(\r\n            address(this),\r\n            _dexRouter.WETH()\r\n        );\r\n        _excludeFromMaxTransaction(address(lpPair), true);\r\n        _setAutomatedMarketMakerPair(address(lpPair), true);\r\n\r\n        uint256 totalSupply = 65 * 1e6 * 1e18;\r\n\r\n        maxBuy = (totalSupply * 1) / 100;\r\n        maxSell = (totalSupply * 1) / 100;\r\n        maxWallet = (totalSupply * 1) / 100;\r\n        swapTokensAtAmount = (totalSupply * 5) / 10000;\r\n\r\n        buyOperationsFee = 10;\r\n        buyLiquidityFee = 0;\r\n        buyDevFee = 15;\r\n        buyBurnFee = 0;\r\n        buyTotalFees =\r\n            buyOperationsFee +\r\n            buyLiquidityFee +\r\n            buyDevFee +\r\n            buyBurnFee;\r\n\r\n        sellOperationsFee = 10;\r\n        sellLiquidityFee = 0;\r\n        sellDevFee = 15;\r\n        sellBurnFee = 0;\r\n        sellTotalFees =\r\n            sellOperationsFee +\r\n            sellLiquidityFee +\r\n            sellDevFee +\r\n            sellBurnFee;\r\n\r\n        _excludeFromMaxTransaction(newOwner, true);\r\n        _excludeFromMaxTransaction(address(this), true);\r\n        _excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        excludeFromFees(newOwner, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        operationsAddress = address(newOwner);\r\n        devAddress = address(newOwner);\r\n\r\n        teamAddress = address(newOwner);\r\n\r\n        _createInitialSupply(newOwner, totalSupply);\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // only enable if no plan to airdrop\r\n\r\n    function golive(uint256 _deadblocks) external onlyOwner {\r\n        require(!tradingActive, \"Cannot reenable trading\");\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n        tradingActiveBlock = block.number;\r\n        blockForPenaltyEnd = tradingActiveBlock + _deadblocks;\r\n        emit Launched();\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n        transferDelayEnabled = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function manageEarly(address wallet, bool flag) external onlyOwner {\r\n        boughtEarly[wallet] = flag;\r\n    }\r\n\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n    }\r\n\r\n    function updateTransferFee(bool _flag) external onlyOwner {\r\n        transferFee = _flag;\r\n    }\r\n\r\n    function updateMaxBuy(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 2) / 1000) / 1e18,\r\n            \"Cannot set max buy amount lower than 0.2%\"\r\n        );\r\n        maxBuy = newNum * (10 ** 18);\r\n        emit UpdatedMaxBuyAmount(maxBuy);\r\n    }\r\n\r\n    function updateMaxSell(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 2) / 1000) / 1e18,\r\n            \"Cannot set max sell amount lower than 0.2%\"\r\n        );\r\n        maxSell = newNum * (10 ** 18);\r\n        emit UpdatedMaxSellAmount(maxSell);\r\n    }\r\n\r\n    function updateMaxWallet(uint256 newNum) external onlyOwner {\r\n        require(\r\n            newNum >= ((totalSupply() * 3) / 1000) / 1e18,\r\n            \"Cannot set max wallet amount lower than 0.3%\"\r\n        );\r\n        maxWallet = newNum * (10 ** 18);\r\n        emit UpdatedMaxWalletAmount(maxWallet);\r\n    }\r\n\r\n    function updateSwapTokens(uint256 newAmount) external onlyOwner {\r\n        require(\r\n            newAmount >= (totalSupply() * 1) / 100000,\r\n            \"Swap amount cannot be lower than 0.001% total supply.\"\r\n        );\r\n        require(\r\n            newAmount <= (totalSupply() * 1) / 1000,\r\n            \"Swap amount cannot be higher than 0.1% total supply.\"\r\n        );\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function _excludeFromMaxTransaction(\r\n        address updAds,\r\n        bool isExcluded\r\n    ) private {\r\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\r\n        emit MaxTransactionExclusion(updAds, isExcluded);\r\n    }\r\n\r\n    function excludeFromMax(address updAds, bool isEx) external onlyOwner {\r\n        if (!isEx) {\r\n            require(\r\n                updAds != lpPair,\r\n                \"Cannot remove uniswap pair from max txn\"\r\n            );\r\n        }\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function setAMM(address pair, bool value) external onlyOwner {\r\n        require(pair != lpPair, \"The pair cannot be removed\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n        _excludeFromMaxTransaction(pair, value);\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _operationsFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _DevFee,\r\n        uint256 _burnFee\r\n    ) external onlyOwner {\r\n        buyOperationsFee = _operationsFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _DevFee;\r\n        buyBurnFee = _burnFee;\r\n        buyTotalFees =\r\n            buyOperationsFee +\r\n            buyLiquidityFee +\r\n            buyDevFee +\r\n            buyBurnFee;\r\n        require(buyTotalFees <= 100, \"Must keep fees at less than 100%\");\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _operationsFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _DevFee,\r\n        uint256 _burnFee\r\n    ) external onlyOwner {\r\n        sellOperationsFee = _operationsFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevFee = _DevFee;\r\n        sellBurnFee = _burnFee;\r\n        sellTotalFees =\r\n            sellOperationsFee +\r\n            sellLiquidityFee +\r\n            sellDevFee +\r\n            sellBurnFee;\r\n        require(sellTotalFees <= 100, \"Must keep fees at less than 100%\");\r\n    }\r\n\r\n    function returnToStandardTax() external onlyOwner {\r\n        sellOperationsFee = 10;\r\n        sellLiquidityFee = 0;\r\n        sellDevFee = 15;\r\n        sellBurnFee = 0;\r\n        sellTotalFees =\r\n            sellOperationsFee +\r\n            sellLiquidityFee +\r\n            sellDevFee +\r\n            sellBurnFee;\r\n        require(sellTotalFees <= 100, \"Must keep fees at less than 100%\");\r\n        buyOperationsFee = 10;\r\n        buyLiquidityFee = 0;\r\n        buyDevFee = 15;\r\n        buyBurnFee = 0;\r\n        buyTotalFees =\r\n            buyOperationsFee +\r\n            buyLiquidityFee +\r\n            buyDevFee +\r\n            buyBurnFee;\r\n        require(buyTotalFees <= 100, \"Must keep fees at less than 100%\");\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"amount must be greater than 0\");\r\n\r\n        if (!tradingActive) {\r\n            require(\r\n                _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                \"Trading is not active.\"\r\n            );\r\n        }\r\n\r\n        if (blockForPenaltyEnd > 0) {\r\n            require(\r\n                !boughtEarly[from] || to == owner() || to == address(0xdead),\r\n                \"Bots cannot transfer tokens in or out except to owner or dead address.\"\r\n            );\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !_isExcludedFromFees[from] &&\r\n                !_isExcludedFromFees[to]\r\n            ) {\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled) {\r\n                    if (to != address(dexRouter) && to != address(lpPair)) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number - 3 &&\r\n                                _holderLastTransferTimestamp[to] <\r\n                                block.number - 3,\r\n                            \"_transfer:: Transfer Delay enabled.  Try again later.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                        _holderLastTransferTimestamp[to] = block.number;\r\n                    }\r\n                }\r\n\r\n                //when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount <= maxBuy,\r\n                        \"Buy transfer amount exceeds the max buy.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Cannot Exceed max wallet\"\r\n                    );\r\n                }\r\n                //when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxSell,\r\n                        \"Sell transfer amount exceeds the max sell.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWallet,\r\n                        \"Cannot Exceed max wallet\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = true;\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // bot/sniper penalty.\r\n            if (\r\n                earlyBuyPenaltyInEffect() &&\r\n                automatedMarketMakerPairs[from] &&\r\n                !automatedMarketMakerPairs[to] &&\r\n                buyTotalFees > 0\r\n            ) {\r\n                if (!boughtEarly[to]) {\r\n                    boughtEarly[to] = true;\r\n                    botsCaught += 1;\r\n                    emit CaughtEarlyBuyer(to);\r\n                }\r\n\r\n                fees = (amount * 99) / 100;\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForOperations += (fees * buyOperationsFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\r\n                tokensForBurn += (fees * buyBurnFee) / buyTotalFees;\r\n            }\r\n            // on sell\r\n            else if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = (amount * sellTotalFees) / 100;\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForOperations +=\r\n                    (fees * sellOperationsFee) /\r\n                    sellTotalFees;\r\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\r\n                tokensForBurn += (fees * sellBurnFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = (amount * buyTotalFees) / 100;\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForOperations += (fees * buyOperationsFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\r\n                tokensForBurn += (fees * buyBurnFee) / buyTotalFees;\r\n            } else if (transferFee) {\r\n                fees = (amount * sellTotalFees) / 100;\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForOperations +=\r\n                    (fees * sellOperationsFee) /\r\n                    sellTotalFees;\r\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\r\n                tokensForBurn += (fees * sellBurnFee) / sellTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function earlyBuyPenaltyInEffect() public view returns (bool) {\r\n        return block.number < blockForPenaltyEnd;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            teamAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        if (tokensForBurn > 0 && balanceOf(address(this)) >= tokensForBurn) {\r\n            _burn(address(this), tokensForBurn);\r\n        }\r\n        tokensForBurn = 0;\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForOperations +\r\n            tokensForDev;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        bool success;\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n\r\n        swapTokensForEth(contractBalance - liquidityTokens);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 ethForLiquidity = ethBalance;\r\n\r\n        uint256 ethForOperations = (ethBalance * tokensForOperations) /\r\n            (totalTokensToSwap - (tokensForLiquidity / 2));\r\n        uint256 ethForDev = (ethBalance * tokensForDev) /\r\n            (totalTokensToSwap - (tokensForLiquidity / 2));\r\n\r\n        ethForLiquidity -= ethForOperations + ethForDev;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForOperations = 0;\r\n        tokensForDev = 0;\r\n        tokensForBurn = 0;\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n        }\r\n\r\n        (success, ) = address(devAddress).call{value: ethForDev}(\"\");\r\n\r\n        (success, ) = address(operationsAddress).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n    function transferForeignToken(\r\n        address _token,\r\n        address _to\r\n    ) external onlyOwner returns (bool _sent) {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        require(_token != address(this), \"Can't withdraw native tokens\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n        emit TransferForeignToken(_token, _contractBalance);\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function setOpsAddress(address _operationsAddress) external onlyOwner {\r\n        require(\r\n            _operationsAddress != address(0),\r\n            \"_operationsAddress address cannot be 0\"\r\n        );\r\n        operationsAddress = payable(_operationsAddress);\r\n    }\r\n\r\n    function setDevAddress(address _devAddress) external onlyOwner {\r\n        require(_devAddress != address(0), \"_devAddress address cannot be 0\");\r\n        devAddress = payable(_devAddress);\r\n    }\r\n\r\n    function setTeamAddress(address _teamAddress) external onlyOwner {\r\n        require(_teamAddress != address(0), \"_teamAddress address cannot be 0\");\r\n        teamAddress = payable(_teamAddress);\r\n    }\r\n\r\n    // force Swap back if slippage issues.\r\n    function forceSwapBack() external onlyOwner {\r\n        require(\r\n            balanceOf(address(this)) >= swapTokensAtAmount,\r\n            \"Can only swap when token amount is at or higher than restriction\"\r\n        );\r\n        swapping = true;\r\n        swapBack();\r\n        swapping = false;\r\n        emit OwnerForcedSwapBack(block.timestamp);\r\n    }\r\n\r\n    // useful for buybacks or to reclaim any ETH on the contract in a way that helps holders.\r\n    function buyBack(uint256 amountInWei) external onlyOwner {\r\n        require(\r\n            amountInWei <= 10 ether,\r\n            \"May not buy more than 10 ETH in a single buy to reduce sandwich attacks\"\r\n        );\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amountInWei\r\n        }(\r\n            0, // accept any amount of Ethereum\r\n            path,\r\n            teamAddress,\r\n            block.timestamp\r\n        );\r\n        emit BuyBackTriggered(amountInWei);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"CaughtEarlyBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedOperationsAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockForPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"buyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadblocks\",\"type\":\"uint256\"}],\"name\":\"golive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"manageEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnToStandardTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellOperationsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationsAddress\",\"type\":\"address\"}],\"name\":\"setOpsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CryptoChampionGems", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae2b9704f0df06859df10353a450fc7fdf04df136958b559f202f8232e4e8a7c"}