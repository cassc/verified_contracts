{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/errors/AddressError.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title Library for address related errors.\\n */\\nlibrary AddressError {\\n    /**\\n     * @dev Thrown when a zero address was passed as a function parameter (0x0000000000000000000000000000000000000000).\\n     */\\n    error ZeroAddress();\\n\\n    /**\\n     * @dev Thrown when an address representing a contract is expected, but no code is found at the address.\\n     * @param contr The address that was expected to be a contract.\\n     */\\n    error NotAContract(address contr);\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/errors/ChangeError.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title Library for change related errors.\\n */\\nlibrary ChangeError {\\n    /**\\n     * @dev Thrown when a change is expected but none is detected.\\n     */\\n    error NoChange();\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/interfaces/IUUPSImplementation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title Contract to be used as the implementation of a Universal Upgradeable Proxy Standard (UUPS) proxy.\\n *\\n * Important: A UUPS proxy requires its upgradeability functions to be in the implementation as opposed to the proxy. This means that if the proxy is upgraded to an implementation that does not support this interface, it will no longer be upgradeable.\\n */\\ninterface IUUPSImplementation {\\n    /**\\n     * @notice Thrown when an incoming implementation will not be able to receive future upgrades.\\n     */\\n    error ImplementationIsSterile(address implementation);\\n\\n    /**\\n     * @notice Thrown intentionally when testing future upgradeability of an implementation.\\n     */\\n    error UpgradeSimulationFailed();\\n\\n    /**\\n     * @notice Emitted when the implementation of the proxy has been upgraded.\\n     * @param self The address of the proxy whose implementation was upgraded.\\n     * @param implementation The address of the proxy's new implementation.\\n     */\\n    event Upgraded(address indexed self, address implementation);\\n\\n    /**\\n     * @notice Allows the proxy to be upgraded to a new implementation.\\n     * @param newImplementation The address of the proxy's new implementation.\\n     * @dev Will revert if `newImplementation` is not upgradeable.\\n     * @dev The implementation of this function needs to be protected by some sort of access control such as `onlyOwner`.\\n     */\\n    function upgradeTo(address newImplementation) external;\\n\\n    /**\\n     * @notice Function used to determine if a new implementation will be able to receive future upgrades in `upgradeTo`.\\n     * @param newImplementation The address of the new implementation being tested for future upgradeability.\\n     * @dev This function will always revert, but will revert with different error messages. The function `upgradeTo` uses this error to determine the future upgradeability of the implementation in question.\\n     */\\n    function simulateUpgradeTo(address newImplementation) external;\\n\\n    /**\\n     * @notice Retrieves the current implementation of the proxy.\\n     * @return The address of the current implementation.\\n     */\\n    function getImplementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/proxy/AbstractProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nabstract contract AbstractProxy {\\n    fallback() external payable {\\n//         gasleft();\\n        _forward();\\n//         gasleft();\\n//         gasAMount = gas1-gas2\\n//         oracle amount(gasAMount)\\n// transfer(oracleamount);\\n    }\\n\\n    receive() external payable {\\n        _forward();\\n    }\\n\\n    function _forward() internal {\\n        address implementation = _getImplementation();\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function _getImplementation() internal view virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/proxy/ProxyStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\ncontract ProxyStorage {\\n    bytes32 private constant _SLOT_PROXY_STORAGE =\\n        keccak256(abi.encode(\\\"io.synthetix.core-contracts.Proxy\\\"));\\n\\n    struct ProxyStore {\\n        address implementation;\\n        bool simulatingUpgrade;\\n    }\\n\\n    function _proxyStore() internal pure returns (ProxyStore storage store) {\\n        bytes32 s = _SLOT_PROXY_STORAGE;\\n        assembly {\\n            store.slot := s\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/proxy/UUPSImplementation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport \\\"../interfaces/IUUPSImplementation.sol\\\";\\nimport \\\"../errors/AddressError.sol\\\";\\nimport \\\"../errors/ChangeError.sol\\\";\\nimport \\\"../utils/AddressUtil.sol\\\";\\nimport \\\"./ProxyStorage.sol\\\";\\n\\nabstract contract UUPSImplementation is IUUPSImplementation, ProxyStorage {\\n    /**\\n     * @inheritdoc IUUPSImplementation\\n     */\\n    function simulateUpgradeTo(address newImplementation) public override {\\n        ProxyStore storage store = _proxyStore();\\n\\n        store.simulatingUpgrade = true;\\n\\n        address currentImplementation = store.implementation;\\n        store.implementation = newImplementation;\\n\\n        (bool rollbackSuccessful, ) = newImplementation.delegatecall(\\n            abi.encodeCall(this.upgradeTo, (currentImplementation))\\n        );\\n\\n        if (!rollbackSuccessful || _proxyStore().implementation != currentImplementation) {\\n            revert UpgradeSimulationFailed();\\n        }\\n\\n        store.simulatingUpgrade = false;\\n\\n        // solhint-disable-next-line reason-string\\n        revert();\\n    }\\n\\n    /**\\n     * @inheritdoc IUUPSImplementation\\n     */\\n    function getImplementation() external view override returns (address) {\\n        return _proxyStore().implementation;\\n    }\\n\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        if (newImplementation == address(0)) {\\n            revert AddressError.ZeroAddress();\\n        }\\n\\n        if (!AddressUtil.isContract(newImplementation)) {\\n            revert AddressError.NotAContract(newImplementation);\\n        }\\n\\n        ProxyStore storage store = _proxyStore();\\n\\n        if (newImplementation == store.implementation) {\\n            revert ChangeError.NoChange();\\n        }\\n\\n        if (!store.simulatingUpgrade && _implementationIsSterile(newImplementation)) {\\n            revert ImplementationIsSterile(newImplementation);\\n        }\\n\\n        store.implementation = newImplementation;\\n\\n        emit Upgraded(address(this), newImplementation);\\n    }\\n\\n    function _implementationIsSterile(\\n        address candidateImplementation\\n    ) internal virtual returns (bool) {\\n        (bool simulationReverted, bytes memory simulationResponse) = address(this).delegatecall(\\n            abi.encodeCall(this.simulateUpgradeTo, (candidateImplementation))\\n        );\\n\\n        return\\n            !simulationReverted &&\\n            keccak256(abi.encodePacked(simulationResponse)) ==\\n            keccak256(abi.encodePacked(UpgradeSimulationFailed.selector));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/proxy/UUPSProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport \\\"./AbstractProxy.sol\\\";\\nimport \\\"./ProxyStorage.sol\\\";\\nimport \\\"../errors/AddressError.sol\\\";\\nimport \\\"../utils/AddressUtil.sol\\\";\\n\\ncontract UUPSProxy is AbstractProxy, ProxyStorage {\\n    constructor(address firstImplementation) {\\n        if (firstImplementation == address(0)) {\\n            revert AddressError.ZeroAddress();\\n        }\\n\\n        if (!AddressUtil.isContract(firstImplementation)) {\\n            revert AddressError.NotAContract(firstImplementation);\\n        }\\n\\n        _proxyStore().implementation = firstImplementation;\\n    }\\n\\n    function _getImplementation() internal view virtual override returns (address) {\\n        return _proxyStore().implementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/utils/AddressUtil.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nlibrary AddressUtil {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/AccountFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { UUPSProxy } from \\\"@synthetixio/core-contracts/contracts/proxy/UUPSProxy.sol\\\";\\nimport { Ownable2Step, Ownable } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport { InitialProxyImplementation } from \\\"../proxy/InitialProxyImplementation.sol\\\";\\n\\nimport { IAccountFactory } from \\\"src/interfaces/accounts/IAccountFactory.sol\\\";\\nimport { IBaseModule } from \\\"src/interfaces/accounts/IBaseModule.sol\\\";\\nimport { IInfinexProtocolConfigBeacon } from \\\"src/interfaces/beacons/IInfinexProtocolConfigBeacon.sol\\\";\\n\\nimport { Error } from \\\"../libraries/Error.sol\\\";\\n\\ncontract AccountFactory is IAccountFactory, Ownable2Step, Initializable {\\n    mapping(address => bool) public createdAccounts;\\n    IInfinexProtocolConfigBeacon public infinexProtocolConfigBeacon;\\n    bool public canPredictAddress;\\n    bool public canCreateAccount;\\n\\n    /**\\n     * @notice constructor function\\n     * @param _owner The owner of the contract\\n     * @dev use msg.sender to guarantee the contract is constructed with the same bytecode on all chains\\n     */\\n    constructor(address _owner) Ownable(_owner) { }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 \\t\\tINITIALIZER\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializer function\\n     * @dev All params are put in the initializer instead of the constructor in order to\\n     * guarantee the contract is constructed with the same bytecode on all chains.\\n     * Do not move these parameters from the initializer into the constructor.\\n     * @param _infinexProtocolConfigBeacon The Infinex Information Beacon address\\n     */\\n    function initialize(address _infinexProtocolConfigBeacon) external onlyOwner initializer {\\n        if (_infinexProtocolConfigBeacon == address(0)) revert Error.NullAddress();\\n\\n        infinexProtocolConfigBeacon = IInfinexProtocolConfigBeacon(_infinexProtocolConfigBeacon);\\n\\n        canPredictAddress = true;\\n        canCreateAccount = true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                        VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the bytecode hash used for the create2 deploy\\n     * @return bytecodeHash The hash of the bytecode of the initial proxy implementation\\n     */\\n    function getPredictAddressBytecodeHash() external view returns (bytes32 bytecodeHash) {\\n        address initialProxyImplementation = infinexProtocolConfigBeacon.getInitialProxyImplementation();\\n        bytecodeHash = keccak256(_getProxyBytecode(initialProxyImplementation));\\n    }\\n\\n    /**\\n     * @notice Predicts the address an account would be deployed at based on a given salt\\n     * @param _salt The unique value used to create a deterministic address\\n     * @return newAccount The predicted address of the account\\n     * @return isAvailable True if the predicted address is available\\n     */\\n    function predictAddress(bytes32 _salt) external view returns (address newAccount, bool isAvailable) {\\n        if (!canPredictAddress) revert Error.PredictAddressDisabled();\\n        address initialProxyImplementation = infinexProtocolConfigBeacon.getInitialProxyImplementation();\\n\\n        newAccount = Create2.computeAddress(_salt, keccak256(_getProxyBytecode(initialProxyImplementation)));\\n        isAvailable = !createdAccounts[newAccount];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                            MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Creates a new deposit account with a deterministic address based on the provided salt\\n     * @param _sudoKey The sudo key\\n     * @return newAccount The address of the newly created deposit account\\n     */\\n    function createAccount(address _sudoKey) external returns (address newAccount) {\\n        if (!canCreateAccount) revert Error.CreateAccountDisabled();\\n        if (_sudoKey == address(0)) revert Error.NullAddress();\\n        bytes32 salt = keccak256(abi.encodePacked(_sudoKey));\\n\\n        address initialProxyImplementation = infinexProtocolConfigBeacon.getInitialProxyImplementation();\\n\\n        /// @dev A new UUPSProxy is deployed using CREATE2 with a default implementation.\\n        /// This ensures that both create2 calls for Trading and Deposit accounts are identical,\\n        /// resulting in both accounts receiving the same address.\\n        newAccount = Create2.deploy(0, salt, _getProxyBytecode(initialProxyImplementation));\\n\\n        createdAccounts[newAccount] = true;\\n\\n        address latestAccountImplementation = infinexProtocolConfigBeacon.getLatestAccountImplementation();\\n\\n        /// @dev Now that the Proxy is deployed, we can replace the default implementation with the account one.\\n        InitialProxyImplementation(newAccount).upgradeTo(latestAccountImplementation);\\n\\n        /// @dev Then, the Account Implementation contract is initialized\\n        IBaseModule(newAccount).initialize(_sudoKey);\\n\\n        emit AccountCreated(newAccount, _sudoKey);\\n    }\\n\\n    /**\\n     * @notice @notice Updates the InfinexProtocolBeacon to the latest from the Infinex Protocol Config Beacon.\\n     * @param _newInfinexProtocolConfigBeacon The address of the new Infinex Protocol Config Beacon\\n     */\\n    function updateInfinexProtocolConfigBeacon(address _newInfinexProtocolConfigBeacon) external onlyOwner {\\n        address latestInfinexProtocolConfigBeacon = infinexProtocolConfigBeacon.getLatestInfinexProtocolConfigBeacon();\\n        if (latestInfinexProtocolConfigBeacon == address(infinexProtocolConfigBeacon)) revert Error.SameAddress();\\n        if (latestInfinexProtocolConfigBeacon == address(0)) revert Error.NullAddress();\\n        if (latestInfinexProtocolConfigBeacon != _newInfinexProtocolConfigBeacon) {\\n            revert Error.ImplementationMismatch(_newInfinexProtocolConfigBeacon, latestInfinexProtocolConfigBeacon);\\n        }\\n\\n        emit FactoryInfinexProtocolBeaconImplementationUpgraded(latestInfinexProtocolConfigBeacon);\\n\\n        infinexProtocolConfigBeacon = IInfinexProtocolConfigBeacon(latestInfinexProtocolConfigBeacon);\\n    }\\n\\n    /**\\n     * @notice Sets whether or not the factory can predict the address of a new account\\n     * @param _canPredictAddress A boolean indicating if the factory can predict the address of a new account\\n     */\\n    function setCanPredictAddress(bool _canPredictAddress) external onlyOwner {\\n        _setCanPredictAddress(_canPredictAddress);\\n    }\\n\\n    /**\\n     * @notice Sets whether or not the factory can create a new account\\n     * @param _canCreateAccount A boolean indicating if the factory can create a new account\\n     */\\n    function setCanCreateAccount(bool _canCreateAccount) external onlyOwner {\\n        _setCanCreateAccount(_canCreateAccount);\\n    }\\n\\n    /**\\n     * @notice Sets whether or not the factory can both predict the address and create a new account\\n     * @param _canPredictAddress A boolean indicating if the factory can predict the address of a new account\\n     * @param _canCreateAccount A boolean indicating if the factory can create a new account\\n     */\\n    function setCanPredictAddressAndCreateAccount(bool _canPredictAddress, bool _canCreateAccount) external onlyOwner {\\n        _setCanPredictAddress(_canPredictAddress);\\n        _setCanCreateAccount(_canCreateAccount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                INTERNAL FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    function _getProxyBytecode(address _implementation) internal pure returns (bytes memory) {\\n        return abi.encodePacked(type(UUPSProxy).creationCode, abi.encode(_implementation));\\n    }\\n\\n    function _setCanPredictAddress(bool _canPredictAddress) internal {\\n        emit CanPredictAddressSet(_canPredictAddress);\\n        canPredictAddress = _canPredictAddress;\\n    }\\n\\n    function _setCanCreateAccount(bool _canCreateAccount) internal {\\n        emit CanCreateAccountSet(_canCreateAccount);\\n        canCreateAccount = _canCreateAccount;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/accounts/utils/RequestTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ncontract RequestTypes {\\n    struct Request {\\n        address _address;\\n        address _address2;\\n        uint256 _uint256;\\n        bytes32 _nonce;\\n        uint32 _uint32;\\n        bool _bool;\\n        bytes4 _selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/accounts/IAccountFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IInfinexProtocolConfigBeacon } from \\\"src/interfaces/beacons/IInfinexProtocolConfigBeacon.sol\\\";\\n\\ninterface IAccountFactory {\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tEVENTS / ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event FactoryInfinexProtocolBeaconImplementationUpgraded(address infinexProtocolConfigBeacon);\\n    event AccountCreated(address indexed account, address indexed sudoKey);\\n    event CanPredictAddressSet(bool canPredictAddress);\\n    event CanCreateAccountSet(bool canCreateAccount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Checks if an account has been created\\n     * @return The account address\\n     */\\n    function createdAccounts(address _account) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the Infinex Protocol Config Beacon address\\n     * @return The address of the Infinex Protocol Config Beacon address\\n     */\\n    function infinexProtocolConfigBeacon() external view returns (IInfinexProtocolConfigBeacon);\\n\\n    /**\\n     * @notice Checks if the factory can predict the address of a new account\\n     * @return True if the factory can predict the address, false otherwise\\n     */\\n    function canPredictAddress() external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the factory can create a new account\\n     * @return True if the factory can create an account, false otherwise\\n     */\\n    function canCreateAccount() external view returns (bool);\\n\\n    /**\\n     * @notice Gets the bytecode hash used for create2 deploy\\n     * @return bytecodeHash The hash of the bytecode of the initial proxy implementation\\n     */\\n    function getPredictAddressBytecodeHash() external view returns (bytes32);\\n\\n    /**\\n     * @notice Predicts the future address of a deposit account based on a given salt\\n     * @param _salt The unique value used to create a deterministic address\\n     * @return newAccount The predicted future address of the deposit account\\n     * @return isAvailable True if the predicted address is available\\n     */\\n    function predictAddress(bytes32 _salt) external view returns (address, bool);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializer function\\n     * @param _infinexProtocolConfigBeacon The Infinex Information Beacon address\\n     */\\n    function initialize(address _infinexProtocolConfigBeacon) external;\\n\\n    /**\\n     * @notice Creates a new deposit account with a deterministic address based on the provided salt\\n     * @param _sudoKey The sudo key\\n     * @return newAccount The address of the newly created deposit account\\n     */\\n    function createAccount(address _sudoKey) external returns (address newAccount);\\n\\n    /**\\n     * @notice Updates the InfinexProtocolBeacon to the latest from the Infinex Protocol Config Beacon.\\n     * @param _newInfinexProtocolConfigBeacon The address of the new Infinex Protocol Config Beacon\\n     */\\n    function updateInfinexProtocolConfigBeacon(address _newInfinexProtocolConfigBeacon) external;\\n\\n    /**\\n     * @notice Sets whether or not the factory can predict the address of a new account\\n     * @param _canPredictAddress A boolean indicating if the factory can predict the address of a new account\\n     */\\n    function setCanPredictAddress(bool _canPredictAddress) external;\\n\\n    /**\\n     * @notice Sets whether or not the factory can create a new account\\n     * @param _canCreateAccount A boolean indicating if the factory can create a new account\\n     */\\n    function setCanCreateAccount(bool _canCreateAccount) external;\\n\\n    /**\\n     * @notice Sets whether or not the factory can both predict the address and create a new account\\n     * @param _canPredictAddress A boolean indicating if the factory can predict the address of a new account\\n     * @param _canCreateAccount A boolean indicating if the factory can create a new account\\n     */\\n    function setCanPredictAddressAndCreateAccount(bool _canPredictAddress, bool _canCreateAccount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/accounts/IBaseModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { RequestTypes } from \\\"src/accounts/utils/RequestTypes.sol\\\";\\n\\ninterface IBaseModule {\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tEVENTS / ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event AccountImplementationUpgraded(address accountImplementation);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 \\t\\tINITIALIZER\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initialize the account with the sudo key\\n     */\\n    function initialize(address _sudoKey) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                    VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Check if the provided nonce is valid\\n     * @param _nonce The nonce to check\\n     * @return A boolean indicating if the nonce is valid\\n     */\\n    function isValidNonce(bytes32 _nonce) external view returns (bool);\\n\\n    /**\\n     * @notice Check if the provided forwarder is trusted\\n     * @param _forwarder The forwarder to check\\n     * @return A boolean indicating if the forwarder is trusted\\n     */\\n    function isTrustedForwarder(address _forwarder) external view returns (bool);\\n\\n    /**\\n     * @notice Get all trusted forwarders\\n     * @return An array of addresses of all trusted forwarders\\n     */\\n    function trustedForwarders() external view returns (address[] memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    \\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n    /**\\n     * @notice Enables or disables an operation key for the account\\n     * @param _operationKey The address of the operation key to be set\\n     * @param _isValid Whether the key is to be set as valid or invalid\\n     * @dev This function requires the sender to be the sudo key holder\\n     */\\n    function setOperationKeyStatus(address _operationKey, bool _isValid) external;\\n\\n    /**\\n     * @notice Enables or disables a recovery key for the account\\n     * @param _recoveryKey The address of the recovery key to be set\\n     * @param _isValid Whether the key is to be set as valid or invalid\\n     * @dev This function requires the sender to be the sudo key holder\\n     */\\n    function setRecoveryKeyStatus(address _recoveryKey, bool _isValid) external;\\n\\n    /**\\n     * @notice Enables or disables a sudo key for the account\\n     * @param _sudoKey The address of the sudo key to be set\\n     * @param _isValid Whether the key is to be set as valid or invalid\\n     * @dev This function requires the sender to be the sudo key holder\\n     */\\n    function setSudoKeyStatus(address _sudoKey, bool _isValid) external;\\n\\n    /**\\n     * @notice Add a new trusted forwarder\\n     * @param _request The Request struct containing:\\n     *  RequestData {\\n     *  address _address; - The address of the new trusted forwarder.\\n     *\\tbytes32 _nonce; - The nonce of the signature\\n     *  }\\n     * @param _signature The required signature for executing the transaction\\n     * Required signature:\\n     * - sudo key\\n     */\\n    function addTrustedForwarder(RequestTypes.Request calldata _request, bytes calldata _signature) external;\\n\\n    /**\\n     * @notice Remove a trusted forwarder\\n     * @param _request The Request struct containing:\\n     *  RequestData {\\n     *  address _address; - The address of the trusted forwarder to be removed.\\n     *\\tbytes32 _nonce; - The nonce of the signature\\n     *  }\\n     * @param _signature The required signature for executing the transaction\\n     * Required signature:\\n     * - sudo key\\n     */\\n    function removeTrustedForwarder(RequestTypes.Request calldata _request, bytes calldata _signature) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/beacons/IInfinexProtocolConfigBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title IInfinexProtocolConfigBeacon\\n * @notice Interface for the Infinex Protocol Config Beacon contract.\\n */\\ninterface IInfinexProtocolConfigBeacon {\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSTRUCTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Struct containing the constructor arguments for the InfinexProtocolConfigBeacon contract\\n     * @param trustedForwarder Address of the trusted forwarder contract\\n     * @param latestAccountImplementation Address of the latest account implementation contract\\n     * @param initialProxyImplementation Address of the initial proxy implementation contract\\n     * @param revenuePool Address of the revenue pool contract\\n     * @param USDC Address of the USDC token contract\\n     * @param minimumUSDCBridgeAmount Minimum amount of USDC required to bridge\\n     * @param circleBridge Address of the Circle bridge contract\\n     * @param circleMinter Address of the Circle minter contract, used for checking the maximum bridge amount\\n     * @param wormholeCircleBridge Address of the Wormhole Circle bridge contract\\n     * @param defaultDestinationCCTPDomain the CCTP domain of the default destination chain.\\n     * @param defaultDestinationWormholeChainId the Wormhole chain id of the default destination chain.\\n     * @param solanaWalletSeed The salt used to generate the Solana account (fixed seed \\\"wallet\\\")\\n     * @param solanaFixedPDASeed The salt used to generate the PDA (Program Derived Address)\\n     * @param solanaWalletProgramAddress The Solana Wallet Program Address\\n     * @param solanaTokenMintAddress The Solana token mint address\\n     * @param solanaTokenProgramAddress The Solana token program address\\n     * @param solanaAssociatedTokenProgramAddress The Solana ATA program address\\n     */\\n    struct InfinexBeaconConstructorArgs {\\n        address trustedForwarder;\\n        address latestAccountImplementation;\\n        address initialProxyImplementation;\\n        address revenuePool;\\n        address USDC;\\n        uint256 minimumUSDCBridgeAmount;\\n        address circleBridge;\\n        address circleMinter;\\n        address wormholeCircleBridge;\\n        uint32 defaultDestinationCCTPDomain;\\n        uint16 defaultDestinationWormholeChainId;\\n        uint16[] supportedWormholeChainIds;\\n        uint32 solanaCCTPDestinationDomain;\\n        bytes solanaWalletSeed;\\n        bytes solanaFixedPDASeed;\\n        bytes32 solanaWalletProgramAddress;\\n        bytes32 solanaTokenMintAddress;\\n        bytes32 solanaTokenProgramAddress;\\n        bytes32 solanaAssociatedTokenProgramAddress;\\n    }\\n\\n    /**\\n     * @notice Struct containing both Circle and Wormhole bridge configuration\\n     * @param minimumUSDCBridgeAmount Minimum amount of USDC required to bridge\\n     * @param circleBridge Address of the Circle bridge contract\\n     * @param circleMinter Address of the Circle minter contract, used for checking the maximum bridge amount\\n     * @param wormholeCircleBridge Address of the Wormhole Circle bridge contract\\n     * @param defaultDestinationCCTPDomain the CCTP domain of the default destination chain.\\n     * @param defaultDestinationWormholeChainId the Wormhole chain id of the default destination chain.\\n     * @dev Chain id is the official chain id for evm chains and documented one for non evm chains.\\n     */\\n    struct BridgeConfiguration {\\n        uint256 minimumUSDCBridgeAmount;\\n        address circleBridge;\\n        address circleMinter;\\n        address wormholeCircleBridge;\\n        uint32 defaultDestinationCCTPDomain;\\n        uint16 defaultDestinationWormholeChainId;\\n    }\\n\\n    /**\\n     * @notice The addresses for implementations referenced by the beacon\\n     * @param initialProxyImplementation The initial proxy implementation address used for account creation to ensure identical cross chain addresses\\n     * @param latestAccountImplementation The latest account implementation address, used for account upgrades and new accounts\\n     * @param latestInfinexProtocolConfigBeacon The latest Infinex Protocol config beacon address, used for pointing account updates to the latest beacon\\n     */\\n    struct ImplementationAddresses {\\n        address initialProxyImplementation;\\n        address latestAccountImplementation;\\n        address latestInfinexProtocolConfigBeacon;\\n    }\\n\\n    /**\\n     * @notice Struct containing the Solana configuration needed to verify addresses\\n     * @param walletSeed The salt used to generate the Solana account (fixed seed \\\"wallet\\\")\\n     * @param fixedPDASeed The salt used to generate the PDA (Program Derived Address)\\n     * @param walletProgramAddress The Solana Wallet Program Address\\n     * @param tokenMintAddress The Solana token mint address\\n     * @param tokenProgramAddress The Solana token address\\n     * @param associatedTokenProgramAddress The Solana ATA program address\\n     */\\n    struct SolanaConfiguration {\\n        bytes walletSeed;\\n        bytes fixedPDASeed;\\n        bytes32 walletProgramAddress;\\n        bytes32 tokenMintAddress;\\n        bytes32 tokenProgramAddress;\\n        bytes32 associatedTokenProgramAddress;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event LatestAccountImplementationSet(address latestAccountImplementation);\\n    event InitialProxyImplementationSet(address initialProxyImplementation);\\n    event RevenuePoolSet(address revenuePool);\\n    event USDCAddressSet(address USDC);\\n    event CircleBridgeParamsSet(address circleBridge, address circleMinter, uint32 defaultDestinationCCTPDomain);\\n    event WormholeCircleBridgeParamsSet(address wormholeCircleBridge, uint16 defaultDestinationWormholeChainId);\\n    event LatestInfinexProtocolConfigBeaconSet(address latestInfinexProtocolConfigBeacon);\\n    event WithdrawalFeeUSDCSet(uint256 withdrawalFee);\\n    event FundsRecoveryStatusSet(bool status);\\n    event MinimumUSDCBridgeAmountSet(uint256 amount);\\n    event WormholeDestinationDomainSet(uint256 indexed chainId, uint16 destinationDomain);\\n    event CircleDestinationDomainSet(uint256 indexed chainId, uint32 destinationDomain);\\n    event TrustedRecoveryKeeperSet(address indexed trustedRecoveryKeeper, bool isTrusted);\\n    event SupportedWormholeChainIdSet(uint16 wormholeChainId, bool status);\\n    event SolanaCCTPDestinationDomainSet(uint32 solanaCCTPDestinationDomain);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\t\\tVARIABLES\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Gets the timestamp the beacon was deployed\\n     * @return The timestamp the beacon was deployed\\n     */\\n    function CREATED_AT() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the trusted forwarder address\\n     * @return The address of the trusted forwarder\\n     */\\n    function TRUSTED_FORWARDER() external view returns (address);\\n\\n    /**\\n     * @notice A platform wide feature flag to enable or disable funds recovery, false by default\\n     * @return True if funds recovery is active\\n     */\\n    function fundsRecoveryActive() external view returns (bool);\\n\\n    /**\\n     * @notice Gets the revenue pool address\\n     * @return The address of the revenue pool\\n     */\\n    function revenuePool() external view returns (address);\\n\\n    /**\\n     * @notice Gets the USDC amount to charge as withdrawal fee\\n     * @return The withdrawal fee in USDC's decimals\\n     */\\n    function withdrawalFeeUSDC() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the USDC address.\\n     * @return The address of the USDC token\\n     */\\n    function USDC() external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Retrieves supported wormhole chain ids.\\n     * @param _wormholeChainId the chain id to check\\n     * @return bool if the chain is supported or not.\\n     */\\n    function isSupportedWormholeChainId(uint16 _wormholeChainId) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the minimum USDC amount that can be bridged.\\n     * @return The minimum USDC bridge amount.\\n     */\\n    function getMinimumUSDCBridgeAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the Circle Bridge parameters.\\n     * @return circleBridge The address of the Circle Bridge contract.\\n     * @return circleMinter The address of the TokenMinter contract.\\n     * @return defaultDestinationCCTPDomain The CCTP domain of the default destination chain.\\n     */\\n    function getCircleBridgeParams()\\n        external\\n        view\\n        returns (address circleBridge, address circleMinter, uint32 defaultDestinationCCTPDomain);\\n\\n    /**\\n     * @notice Retrieves the Circle Bridge address.\\n     * @return The address of the Circle Bridge contract.\\n     */\\n    function getCircleBridge() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the Circle TokenMinter address.\\n     * @return The address of the Circle TokenMinter contract.\\n     */\\n    function getCircleMinter() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the CCTP domain of the destination chain.\\n     * @return The CCTP domain of the default destination chain.\\n     */\\n    function getDefaultDestinationCCTPDomain() external view returns (uint32);\\n\\n    /**\\n     * @notice Retrieves the parameters required for Wormhole bridging.\\n     * @return The address of the Wormhole Circle Bridge contract.\\n     * @return The default wormhole destination domain for the circle bridge contract.\\n     */\\n    function getWormholeCircleBridgeParams() external view returns (address, uint16);\\n\\n    /**\\n     * @notice Retrieves the Wormhole Circle Bridge address.\\n     * @return The address of the Wormhole Circle Bridge contract.\\n     */\\n    function getWormholeCircleBridge() external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the Wormhole chain id for Base, or Ethereum Mainnet if deployed on Base.\\n     * @return The Wormhole chain id of the default destination chain.\\n     */\\n    function getDefaultDestinationWormholeChainId() external view returns (uint16);\\n\\n    /**\\n     * @notice Retrieves the circle CCTP destination domain for solana.\\n     * @return The CCTP destination domain for solana.\\n     */\\n    function getSolanaCCTPDestinationDomain() external view returns (uint32);\\n\\n    /**\\n     * @notice Gets the latest account implementation address.\\n     * @return The address of the latest account implementation.\\n     */\\n    function getLatestAccountImplementation() external view returns (address);\\n\\n    /**\\n     * @notice Gets the initial proxy implementation address.\\n     * @return The address of the initial proxy implementation.\\n     */\\n    function getInitialProxyImplementation() external view returns (address);\\n\\n    /**\\n     * @notice The latest Infinex Protocol config beacon address, used for pointing account updates to the latest beacon.\\n     * @return The address of the latest Infinex Protocol config beacon.\\n     */\\n    function getLatestInfinexProtocolConfigBeacon() external view returns (address);\\n\\n    /**\\n     * @notice Checks if an address is a trusted recovery keeper.\\n     * @param _address The address to check.\\n     * @return True if the address is a trusted recovery keeper, false otherwise.\\n     */\\n    function isTrustedRecoveryKeeper(address _address) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the Solana configuration\\n     * @param walletSeed The salt used to generate the Solana account (fixed seed \\\"wallet\\\")\\n     * @param fixedPDASeed The salt used to generate the PDA (Program Derived Address)\\n     * @param walletProgramAddress The Solana Wallet Program Address\\n     * @param tokenMintAddress The Solana token mint address\\n     * @param tokenProgramAddress The Solana token program address\\n     * @param associatedTokenProgramAddress The Solana ATA program address\\n     */\\n    function getSolanaConfiguration()\\n        external\\n        view\\n        returns (\\n            bytes memory walletSeed,\\n            bytes memory fixedPDASeed,\\n            bytes32 walletProgramAddress,\\n            bytes32 tokenMintAddress,\\n            bytes32 tokenProgramAddress,\\n            bytes32 associatedTokenProgramAddress\\n        );\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t \\t\\t\\t\\t\\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets or unsets a supported wormhole chain id.\\n     * @param _wormholeChainId the wormhole chain id to add or remove.\\n     * @param _status the status of the chain id.\\n     */\\n    function setSupportedWormholeChainId(uint16 _wormholeChainId, bool _status) external;\\n\\n    /**\\n     * @notice Sets the solana CCTP destination domain\\n     * @param _solanaCCTPDestinationDomain the destination domain for circles CCTP USDC bridge.\\n     */\\n    function setSolanaCCTPDestinationDomain(uint32 _solanaCCTPDestinationDomain) external;\\n\\n    /**\\n     * @notice Sets or unsets an address as a trusted recovery keeper.\\n     * @param _address The address to set or unset.\\n     * @param _isTrusted Boolean indicating whether to set or unset the address as a trusted recovery keeper.\\n     */\\n    function setTrustedRecoveryKeeper(address _address, bool _isTrusted) external;\\n\\n    /**\\n     * @notice Sets the funds recovery flag to active.\\n     * @dev Initially only the owner can call this. After 90 days, it can be activated by anyone.\\n     */\\n    function setFundsRecoveryActive() external;\\n\\n    /**\\n     * @notice Sets the revenue pool address.\\n     * @param _revenuePool The revenue pool address.\\n     */\\n    function setRevenuePool(address _revenuePool) external;\\n\\n    /**\\n     * @notice Sets the USDC amount to charge as withdrawal fee.\\n     * @param _withdrawalFeeUSDC The withdrawal fee in USDC's decimals.\\n     */\\n    function setWithdrawalFeeUSDC(uint256 _withdrawalFeeUSDC) external;\\n\\n    /**\\n     * @notice Sets the address of the USDC token contract.\\n     * @param _USDC The address of the USDC token contract.\\n     * @dev Only the contract owner can call this function.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setUSDCAddress(address _USDC) external;\\n\\n    /**\\n     * @notice Sets the minimum USDC amount that can be bridged, in 6 decimals.\\n     * @param _amount The minimum USDC bridge amount.\\n     */\\n    function setMinimumUSDCBridgeAmount(uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the parameters for Circle bridging.\\n     * @param _circleBridge The address of the Circle Bridge contract.\\n     * @param _circleMinter The address of the Circle TokenMinter contract.\\n     * @param _defaultDestinationCCTPDomain The CCTP domain of the default destination chain.\\n     * @dev Circle Destination Domain can be 0 - Ethereum.\\n     */\\n    function setCircleBridgeParams(address _circleBridge, address _circleMinter, uint32 _defaultDestinationCCTPDomain) external;\\n\\n    /**\\n     * @notice Sets the parameters for Wormhole bridging.\\n     * @param _wormholeCircleBridge The address of the Wormhole Circle Bridge contract.\\n     * @param _defaultDestinationWormholeChainId The wormhole domain of the default destination chain.\\n     */\\n    function setWormholeCircleBridgeParams(address _wormholeCircleBridge, uint16 _defaultDestinationWormholeChainId) external;\\n\\n    /**\\n     * @notice Sets the initial proxy implementation address.\\n     * @param _initialProxyImplementation The initial proxy implementation address.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setInitialProxyImplementation(address _initialProxyImplementation) external;\\n\\n    /**\\n     * @notice Sets the latest account implementation address.\\n     * @param _latestAccountImplementation The latest account implementation address.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setLatestAccountImplementation(address _latestAccountImplementation) external;\\n\\n    /**\\n     * @notice Sets the latest Infinex Protocol Config Beacon.\\n     * @param _latestInfinexProtocolConfigBeacon The address of the Infinex Protocol Config Beacon.\\n     * @dev Throws an error if the provided address is the zero address.\\n     */\\n    function setLatestInfinexProtocolConfigBeacon(address _latestInfinexProtocolConfigBeacon) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/Error.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nlibrary Error {\\n    /*///////////////////////////////////////////////////////////////\\n                                            GENERIC\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error AlreadyExists();\\n\\n    error DoesNotExist();\\n\\n    error Unauthorized();\\n\\n    error InvalidLength();\\n\\n    error NotOwner();\\n\\n    error InvalidWormholeChainId();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                            ADDRESS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error ImplementationMismatch(address implementation, address latestImplementation);\\n\\n    error InvalidWithdrawalAddress(address to);\\n\\n    error NullAddress();\\n\\n    error SameAddress();\\n\\n    error InvalidSolanaAddress();\\n\\n    error AddressAlreadySet();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                    AMOUNT / BALANCE\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error InsufficientBalance();\\n\\n    error InsufficientWithdrawalAmount(uint256 amount);\\n\\n    error InsufficientBalanceForFee(uint256 balance, uint256 fee);\\n\\n    error InvalidNonce(bytes32 nonce);\\n\\n    error ZeroValue();\\n\\n    error AmountDeltaZeroValue();\\n\\n    error DecimalsMoreThan18(uint256 decimals);\\n\\n    error InsufficientBridgeAmount();\\n\\n    error BridgeMaxAmountExceeded();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                            ACCOUNT\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error CreateAccountDisabled();\\n\\n    error InvalidKeysForSalt();\\n\\n    error PredictAddressDisabled();\\n\\n    error FundsRecoveryActivationDeadlinePending();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                        KEY MANAGEMENT\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error InvalidRequest();\\n\\n    error InvalidKeySignature(address from);\\n\\n    error KeyAlreadyInvalid();\\n\\n    error KeyAlreadyValid();\\n\\n    error KeyNotFound();\\n\\n    error CannotRemoveLastKey();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                     GAS FEE REBATE\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error InvalidDeductGasFunction(bytes4 sig);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                FEATURE FLAGS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error FundsRecoveryNotActive();\\n}\\n\"\r\n    },\r\n    \"src/proxy/InitialProxyImplementation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { UUPSImplementation } from \\\"@synthetixio/core-contracts/contracts/proxy/UUPSImplementation.sol\\\";\\n\\n/// @dev The below contract is only used as an intermediary implementation contract\\n/// when initializing the proxy to make sure that, when deployed using CREATE2,\\n/// we always get the same contract address as the bytecode is deterministic.\\ncontract InitialProxyImplementation is UUPSImplementation {\\n    function upgradeTo(address newImplementation) public override {\\n        _upgradeTo(newImplementation);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@synthetixio/core-contracts/=node_modules/@synthetixio/core-contracts/\",\r\n      \"@synthetixio/core-modules/=node_modules/@synthetixio/core-modules/\",\r\n      \"@synthetixio/main/=node_modules/@synthetixio/main/\",\r\n      \"@synthetixio/oracle-manager/=node_modules/@synthetixio/oracle-manager/\",\r\n      \"@synthetixio/perps-market/=node_modules/@synthetixio/perps-market/\",\r\n      \"@synthetixio/spot-market/=node_modules/@synthetixio/spot-market/\",\r\n      \"cannon-std/=lib/cannon-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"wormhole-circle-integration/=lib/wormhole-circle-integration/evm/src/\",\r\n      \"wormhole/=lib/wormhole-circle-integration/evm/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Create2FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"Create2InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreateAccountDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"latestImplementation\",\"type\":\"address\"}],\"name\":\"ImplementationMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PredictAddressDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sudoKey\",\"type\":\"address\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canCreateAccount\",\"type\":\"bool\"}],\"name\":\"CanCreateAccountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canPredictAddress\",\"type\":\"bool\"}],\"name\":\"CanPredictAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"infinexProtocolConfigBeacon\",\"type\":\"address\"}],\"name\":\"FactoryInfinexProtocolBeaconImplementationUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCreateAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canPredictAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sudoKey\",\"type\":\"address\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createdAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPredictAddressBytecodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infinexProtocolConfigBeacon\",\"outputs\":[{\"internalType\":\"contract IInfinexProtocolConfigBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_infinexProtocolConfigBeacon\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"predictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canCreateAccount\",\"type\":\"bool\"}],\"name\":\"setCanCreateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canPredictAddress\",\"type\":\"bool\"}],\"name\":\"setCanPredictAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canPredictAddress\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canCreateAccount\",\"type\":\"bool\"}],\"name\":\"setCanPredictAddressAndCreateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newInfinexProtocolConfigBeacon\",\"type\":\"address\"}],\"name\":\"updateInfinexProtocolConfigBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccountFactory", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003f768e3ac5ee75a2f39cfd7d72eb3a40bddb5ecb", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}