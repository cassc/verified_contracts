{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract GodGivETH {\r\n    using SafeMath for uint256;\r\n    IERC20 token;\r\n    address public owner;\r\n    address public god;\r\n    uint counter = 1;\r\n    uint public ETHfund = 0;\r\n    uint public minPercent = 0;\r\n    uint public maxPercent = 30;\r\n    uint public ETHLockDays = 1;\r\n    uint public prayerCost  = 10000 * 10** 9;\r\n    mapping(address => uint) public WorshipperToEth;\r\n    mapping(address => uint) public WorshipperToTime;\r\n    address[] public prayers;\r\n    event Funding(uint value);\r\n    event Pray(address worshipper, uint value);\r\n    event Withdrawal(address worshipper, uint value);\r\n    event Judgement(address worshipper, uint decision, uint value);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGod() {\r\n        require(msg.sender == god, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function fund_god() external payable\r\n    {\r\n        ETHfund = ETHfund + msg.value;\r\n        emit Funding(ETHfund);\r\n    }\r\n\r\n    function withdrawETH() external \r\n    {\r\n        require(WorshipperToEth[msg.sender] > 0,\"No ETH has been giveth\");\r\n        require(WorshipperToTime[msg.sender] + (ETHLockDays * 1 days)  > block.timestamp,\"ETH is still locked and might be taketh away\");\r\n        uint amount = WorshipperToEth[msg.sender];\r\n        WorshipperToEth[msg.sender] = 0;\r\n        payable(msg.sender).transfer(amount);\r\n        emit Withdrawal(msg.sender, amount);\r\n    }\r\n\r\n    function pray(uint amount) external\r\n    {\r\n        uint dec_amount = amount * 10** 9;\r\n        require(dec_amount >= prayerCost,\"Not enough to pray\");\r\n        require(token.balanceOf(msg.sender) >= dec_amount,\"Not enough balance\");\r\n\r\n        bool success = token.transferFrom(msg.sender, address(this), dec_amount);\r\n        require(success, \"Could not transfer token. Missing approval\");\r\n        uint prayers_amount = dec_amount / prayerCost;\r\n        \r\n        for(uint i = 0; i < prayers_amount; i++){\r\n            prayers.push(msg.sender);\r\n        }\r\n        emit Pray(msg.sender, prayers_amount);\r\n    }\r\n\r\n    function getPrayers() external view returns (address[] memory)\r\n    {\r\n        return prayers;\r\n    }\r\n\r\n    function playerAllowance(address worshipper) external view returns (uint)\r\n    {\r\n        return token.allowance(worshipper, address(this));\r\n    }\r\n    \r\n\r\n    function unPray(uint index) external\r\n    {\r\n        require(prayers[index] == msg.sender,\"Not your prayer\");\r\n        prayers[index] = prayers[prayers.length - 1];\r\n        prayers.pop();\r\n        token.transfer(msg.sender, prayerCost);\r\n    }\r\n\r\n\r\n    function judge() external onlyGod()\r\n    {\r\n        uint index = randomBetween(0,prayers.length);\r\n        uint decision_index = randomBetween(0,4);\r\n\r\n        address chosen = prayers[index];\r\n\r\n        uint random_amount = 0;\r\n\r\n        // GivETH\r\n        if(decision_index == 0)\r\n        {\r\n            random_amount = randomBetween(minPercent,ETHfund.mul(maxPercent).div(100));\r\n\r\n            if(random_amount > 0)\r\n            {\r\n                ETHfund -= random_amount;\r\n                WorshipperToEth[chosen] += random_amount;\r\n                WorshipperToTime[chosen] = block.timestamp;\r\n            }\r\n        }\r\n        // Burn Prayer\r\n        if(decision_index == 1)\r\n        {\r\n            prayers[index] = prayers[prayers.length - 1];\r\n            prayers.pop();\r\n\r\n            token.transfer(address(0x0000dead), prayerCost);\r\n        }\r\n        // TakETH away\r\n        if(decision_index == 2)\r\n        {\r\n            if(WorshipperToEth[chosen] > 0)\r\n            {\r\n                random_amount = randomBetween(minPercent,WorshipperToEth[chosen].mul(maxPercent).div(100));\r\n\r\n                WorshipperToEth[chosen] -= random_amount;\r\n                ETHfund += random_amount;\r\n            }\r\n        }\r\n        // Sleep\r\n\r\n        emit Judgement(chosen, decision_index, random_amount);\r\n    }\r\n\r\n    function setTokenAddress(address payable _tokenAddress) external onlyOwner() {\r\n       token = IERC20(address(_tokenAddress));\r\n    }\r\n\r\n    function setLockDays(uint _days) external onlyOwner() {\r\n       ETHLockDays = _days;\r\n    }\r\n    \r\n    function setMinPercent(uint percent) external onlyOwner() {\r\n       minPercent = percent;\r\n    }\r\n\r\n    function setMaxPercent(uint percent) external onlyOwner() {\r\n       maxPercent = percent;\r\n    }\r\n    function setGodAddress(address _godAddress) external onlyOwner() {\r\n       god = _godAddress;\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        (bool success, ) = msg.sender.call{ value: address(this).balance } (\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function withdrawStuckToken() external onlyOwner {\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function randomBetween(uint min, uint max) internal returns (uint) \r\n    {\r\n        counter++;\r\n        uint random = uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty, counter, gasleft()))) % (max - min);\r\n        return random + min;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Funding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worshipper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decision\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Judgement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worshipper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Pray\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worshipper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHLockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHfund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WorshipperToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WorshipperToTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund_god\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"god\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"judge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worshipper\",\"type\":\"address\"}],\"name\":\"playerAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prayerCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_godAddress\",\"type\":\"address\"}],\"name\":\"setGodAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setLockDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMinPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unPray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GodGivETH", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f22e8b148361723c66ca161dbc02610584ede73f64b3dff48697d2562a11d878"}