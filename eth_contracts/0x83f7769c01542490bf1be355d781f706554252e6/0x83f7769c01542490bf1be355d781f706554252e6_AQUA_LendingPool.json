{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"aaa_flattened.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AQUA_LendingPool is Ownable {\\n    struct OrderDetail {\\n        uint256 id;\\n        address payToken;\\n        uint256 payAmount;\\n        address borrowToken;\\n        uint256 borrowedAmount;\\n        uint256 startTime;\\n        uint256 lockPeriod;\\n    }\\n\\n    struct User {\\n        uint256 aquaBalance;\\n        uint256 saquaBalance;\\n        uint256 ethBalance;\\n        mapping(uint256 => OrderDetail) orders;\\n        uint256 orderCount;\\n    }\\n\\n    mapping(address => User) public users;\\n\\n    address public aquaToken;\\n    address public saquaToken;\\n    address public usdtToken;\\n    address public usdcToken;\\n    address public taoToken;\\n\\n    uint256 public totalAqua;\\n    uint256 public totalSaqua;\\n\\n    uint256 public feeInUsd = 50 ;\\n\\n    uint256 public borrowedTotalUsdt;\\n    uint256 public borrowedTotalUsdc;\\n    uint256 public borrowedTotalTao;\\n    uint256 public borrowedTotalEth;\\n\\n    uint256 public constant MARGIN_FACTOR = 2;\\n\\n    uint256 public lockPeriod = 30 days;\\n\\n    event Deposit(address indexed user, uint256 amount, address indexed token);\\n    event Borrow(\\n        address indexed user,\\n        uint256 orderId,\\n        uint256 amount,\\n        address indexed token\\n    );\\n    event Repay(address indexed user, uint256 amount, address indexed token);\\n\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor(\\n        address _aquaToken,\\n        address _saquaToken,\\n        address _usdtToken,\\n        address _usdcToken,\\n        address _taoToken,\\n        address _priceFeed\\n    ) {\\n        aquaToken = _aquaToken;\\n        saquaToken = _saquaToken;\\n        usdtToken = _usdtToken;\\n        usdcToken = _usdcToken;\\n        taoToken = _taoToken;\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n \\n\\n    function setLockPeriod(uint256 _lockPeriod) external onlyOwner {\\n        lockPeriod = _lockPeriod;\\n    }\\n\\n    function getLatestETHPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    function calculateFeeInEth() public view returns (uint256) {\\n        uint256 ethPriceInUsd = getLatestETHPrice();\\n        return (feeInUsd * 10**8) / ethPriceInUsd;\\n    }\\n\\n    function BorrowPool_USDT(uint256 amount, address token) external payable {\\n        uint256 feeInEth = calculateFeeInEth();\\n        require(msg.value >= feeInEth, \\\"Insufficient ETH for fee\\\");\\n        require(token == aquaToken || token == saquaToken, \\\"Invalid token\\\");\\n\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n\\n        User storage user = users[msg.sender];\\n\\n        if (token == aquaToken) {\\n            user.aquaBalance += amount;\\n            totalAqua += amount;\\n        } else if (token == saquaToken) {\\n            user.saquaBalance += amount;\\n            totalSaqua += amount;\\n        }\\n\\n        uint256 orderId = user.orderCount;\\n        uint256 borrowLimit = (amount / MARGIN_FACTOR) / (10**12); // Adjusting for 6 decimals\\n\\n        IERC20(usdtToken).transfer(msg.sender, borrowLimit);\\n        borrowedTotalUsdt += borrowLimit;\\n        user.orders[orderId] = OrderDetail(\\n            orderId,\\n            token,\\n            amount,\\n            usdtToken,\\n            borrowLimit,\\n            block.timestamp,\\n            lockPeriod\\n        );\\n        user.orderCount++;\\n\\n        emit Borrow(msg.sender, orderId, borrowLimit, usdtToken);\\n    }\\n\\n    function BorrowPool_USDC(uint256 amount, address token) external payable {\\n        uint256 feeInEth = calculateFeeInEth();\\n        require(msg.value >= feeInEth, \\\"Insufficient ETH for fee\\\");\\n        require(token == aquaToken || token == saquaToken, \\\"Invalid token\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n\\n        User storage user = users[msg.sender];\\n\\n        if (token == aquaToken) {\\n            user.aquaBalance += amount;\\n            totalAqua += amount;\\n        } else if (token == saquaToken) {\\n            user.saquaBalance += amount;\\n            totalSaqua += amount;\\n        }\\n\\n        uint256 orderId = user.orderCount;\\n        uint256 borrowLimit = (amount / MARGIN_FACTOR) / (10**12); // Adjusting for 6 decimals\\n        IERC20(usdcToken).transfer(msg.sender, borrowLimit);\\n        borrowedTotalUsdc += borrowLimit;\\n        user.orders[orderId] = OrderDetail(\\n            orderId,\\n            token,\\n            amount,\\n            usdcToken,\\n            borrowLimit,\\n            block.timestamp,\\n            lockPeriod\\n        );\\n        user.orderCount++;\\n\\n        emit Borrow(msg.sender, orderId, borrowLimit, usdcToken);\\n    }\\n\\n    function BorrowPool_ETH(uint256 amount, address token) external payable {\\n        uint256 feeInEth = calculateFeeInEth();\\n        require(msg.value >= feeInEth, \\\"Insufficient ETH for fee\\\");\\n        require(token == aquaToken || token == saquaToken, \\\"Invalid token\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n\\n        User storage user = users[msg.sender];\\n\\n        if (token == aquaToken) {\\n            user.aquaBalance += amount;\\n            totalAqua += amount;\\n        } else if (token == saquaToken) {\\n            user.saquaBalance += amount;\\n            totalSaqua += amount;\\n        }\\n\\n        uint256 orderId = user.orderCount;\\n        uint256 ethPriceInUsd = getLatestETHPrice();\\n        uint256 borrowLimitInUsd = (amount / 10**18) / MARGIN_FACTOR;      \\n        uint256 borrowLimitInEth = (borrowLimitInUsd * 10**8) / ethPriceInUsd;  \\n     \\n        payable(msg.sender).transfer(borrowLimitInEth);\\n        borrowedTotalEth += borrowLimitInEth;\\n\\n        user.orders[orderId] = OrderDetail(\\n            orderId,\\n            token,\\n            amount,\\n            address(0),\\n            borrowLimitInEth,\\n            block.timestamp,\\n            lockPeriod\\n        );\\n        user.orderCount++;\\n\\n        emit Borrow(msg.sender, orderId, borrowLimitInEth, address(0));\\n    }\\n\\n    function BorrowPool_TAO(uint256 amount, address token) external payable {\\n        uint256 feeInEth = calculateFeeInEth();\\n        require(msg.value >= feeInEth, \\\"Insufficient ETH for fee\\\");\\n        require(token == aquaToken || token == saquaToken, \\\"Invalid token\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n\\n        User storage user = users[msg.sender];\\n\\n        if (token == aquaToken) {\\n            user.aquaBalance += amount;\\n            totalAqua += amount;\\n        } else if (token == saquaToken) {\\n            user.saquaBalance += amount;\\n            totalSaqua += amount;\\n        }\\n\\n        uint256 orderId = user.orderCount;\\n        uint256 borrowLimit = (amount / MARGIN_FACTOR) / (10**9); // Adjusting for 9 decimals\\n        IERC20(taoToken).transfer(msg.sender, borrowLimit);\\n        borrowedTotalTao += borrowLimit;\\n        user.orders[orderId] = OrderDetail(\\n            orderId,\\n            token,\\n            amount,\\n            taoToken,\\n            borrowLimit,\\n            block.timestamp,\\n            lockPeriod\\n        );\\n        user.orderCount++;\\n\\n        emit Borrow(msg.sender, orderId, borrowLimit, taoToken);\\n    }\\n\\n    function repay_USDT(uint256 orderId) external {\\n        User storage user = users[msg.sender];\\n        OrderDetail memory order = user.orders[orderId];\\n\\n        require(\\n            block.timestamp >= order.startTime + order.lockPeriod,\\n            \\\"Order is locked\\\"\\n        );\\n\\n        uint256 amount = order.borrowedAmount;\\n        IERC20(usdtToken).transferFrom(msg.sender, address(this), amount);\\n\\n        IERC20(order.payToken).transfer(msg.sender, order.payAmount);\\n        delete user.orders[orderId];\\n\\n        emit Repay(msg.sender, amount, usdtToken);\\n    }\\n\\n    function repay_USDC(uint256 orderId) external {\\n        User storage user = users[msg.sender];\\n        OrderDetail memory order = user.orders[orderId];\\n\\n        require(\\n            block.timestamp >= order.startTime + order.lockPeriod,\\n            \\\"Order is locked\\\"\\n        );\\n\\n        uint256 amount = order.borrowedAmount;\\n        IERC20(usdcToken).transferFrom(msg.sender, address(this), amount);\\n\\n        IERC20(order.payToken).transfer(msg.sender, order.payAmount);\\n        delete user.orders[orderId];\\n\\n        emit Repay(msg.sender, amount, usdcToken);\\n    }\\n\\n    function repay_ETH(uint256 orderId) external payable {\\n        User storage user = users[msg.sender];\\n        OrderDetail memory order = user.orders[orderId];\\n\\n        require(\\n            block.timestamp >= order.startTime + order.lockPeriod,\\n            \\\"Order is locked\\\"\\n        );\\n\\n        uint256 amount = order.borrowedAmount;\\n        payable(address(this)).transfer(msg.value);\\n\\n        IERC20(order.payToken).transfer(msg.sender, order.payAmount);\\n        delete user.orders[orderId];\\n\\n        emit Repay(msg.sender, amount, address(0));\\n    }\\n\\n    function getUserOrders(address userAddress)\\n        external\\n        view\\n        returns (OrderDetail[] memory)\\n    {\\n        User storage user = users[userAddress];\\n        OrderDetail[] memory orders = new OrderDetail[](user.orderCount);\\n\\n        for (uint256 i = 0; i < user.orderCount; i++) {\\n            orders[i] = user.orders[i];\\n        }\\n\\n        return orders;\\n    }\\n\\n    function withdrawToken(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(msg.sender, _amount);\\n    }\\n\\n    function withdrawEther(uint256 _amount) external onlyOwner {\\n        payable(msg.sender).transfer(_amount);\\n    }\\n\\n    function setFeeInUsd(uint256 _feeInUsd) external onlyOwner {\\n    feeInUsd = _feeInUsd;\\n}\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aquaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saquaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BorrowPool_ETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BorrowPool_TAO\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BorrowPool_USDC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BorrowPool_USDT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aquaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowedTotalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowedTotalTao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowedTotalUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowedTotalUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateFeeInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct AQUA_LendingPool.OrderDetail[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"repay_ETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"repay_USDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"repay_USDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saquaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInUsd\",\"type\":\"uint256\"}],\"name\":\"setFeeInUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taoToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAqua\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaqua\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aquaBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saquaBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AQUA_LendingPool", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000012f9a180198d91f854f3ca23caf8be1c83ef3b760000000000000000000000004ea095f97d6eb0a8d57a5e9443fd97d63cecef73000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000077e06c9eccf2e797fd462a92b6d7642ef85b0a440000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}