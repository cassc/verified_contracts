{"SourceCode": "pragma solidity 0.8.17;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nMegaScan AI is committed to integrating the most advanced AI technologies in redefining how users interact with blockchain data.\r\n\r\nWebsite: https://megascan.org\r\nTelegram: https://t.me/megascan_erc\r\nTwitter: https://twitter.com/megascan_erc\r\nDapp: https://app.megascan.org\r\n\r\n**/\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n}\r\n\r\ncontract MegaScan is Context, IERC20, Ownable {\r\n    address payable private opSendor;\r\n    address payable private mkSendor;\r\n    address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapLock = true;\r\n        _;\r\n        inSwapLock = false;\r\n    }\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotals = 1000000000 * 10 ** _decimals;\r\n    string private constant _name = unicode\"MegaScan AI\";\r\n    string private constant _symbol = unicode\"MEGAS\";\r\n    uint256 private minSwapAmounts = 1000 * 10 ** _decimals;\r\n    uint256 public swapTxLimits = 20000000 * 10 ** _decimals;\r\n    uint256 private maxSwapValues = 20000000 * 10 ** _decimals;\r\n    uint256 private buyTotalFees = 30;\r\n    uint256 private sellTotalFees = 40;\r\n    uint256 private buyTotalCounts = 0;\r\n\r\n    event ExcludeFromFeesUpdated(address indexed account);\r\n    event includeFromFeesUpdated(address indexed account);\r\n    event ERC20TokenRecovered(uint256 indexed _amount);\r\n    event TradingEnabledUpdated();\r\n    event ETHBalancesRecovered();\r\n\r\n    bool private inSwapLock = false;\r\n    bool public tradeEnabled = false;\r\n    bool private swapEnabled = false;\r\n\r\n    mapping(address => uint256) private _tBalances;\r\n    mapping(address => bool) private _isFeeExcempts;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    address private uniswapV2Pair;\r\n    IUniswapV2Router public uniswapV2Router;\r\n\r\n    constructor() {\r\n        opSendor = payable(0xCEda894459B68Dc5F19b05A3E54D02e4E6cf59aa);\r\n        mkSendor = payable(0x6a7166424f4dD8c3B6669522bcba7CD8F9Dfb027);\r\n        _tBalances[_msgSender()] = _tTotals;\r\n        _isFeeExcempts[opSendor] = true;\r\n        _isFeeExcempts[mkSendor] = true;\r\n        _isFeeExcempts[deadAddress] = true;\r\n        _isFeeExcempts[_msgSender()] = true;\r\n        _isFeeExcempts[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotals);\r\n    }\r\n\r\n    function excludeFromFees(address account) external onlyOwner {\r\n        require(\r\n            _isFeeExcempts[account] != true,\r\n            \"Account is already excluded\"\r\n        );\r\n        _isFeeExcempts[account] = true;\r\n        emit ExcludeFromFeesUpdated(account);\r\n    }\r\n\r\n    function includeFromFees(address account) external onlyOwner {\r\n        require(\r\n            _isFeeExcempts[account] != false,\r\n            \"Account is already included\"\r\n        );\r\n        _isFeeExcempts[account] = false;\r\n        emit includeFromFeesUpdated(account);\r\n    }\r\n\r\n    function sendETHToMegas(uint256 amount) private {\r\n        require(amount > 0, \"amount must be greeter than 0\");\r\n        opSendor.transfer(amount / 2);\r\n        mkSendor.transfer(amount / 2);\r\n    }\r\n\r\n    function launchMEGAS() external onlyOwner {\r\n        require(!tradeEnabled, \"trading is already open\");\r\n        tradeEnabled = true;\r\n        swapEnabled = true;\r\n        emit TradingEnabledUpdated();\r\n    }\r\n\r\n    function setFees(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        require(_buyFee <= 100 && _sellFee <= 100, \"revert wrong fee settings\");\r\n        buyTotalFees = _buyFee;\r\n        sellTotalFees = _sellFee;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        swapTxLimits = _tTotals;\r\n\r\n        buyTotalFees = 2;\r\n        sellTotalFees = 2;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function swapForETHs(uint256 tokenAmount) private lockTheSwap {\r\n        require(tokenAmount > 0, \"amount must be greeter than 0\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function recoverTokensOf(\r\n        address _tokenAddy,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(\r\n            _tokenAddy != address(this),\r\n            \"Owner can't claim contract's balance of its own tokens\"\r\n        );\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(\r\n            _amount <= IERC20(_tokenAddy).balanceOf(address(this)),\r\n            \"Insufficient Amount\"\r\n        );\r\n        IERC20(_tokenAddy).transfer(mkSendor, _amount);\r\n        emit ERC20TokenRecovered(_amount);\r\n    }\r\n\r\n    function recoverETHsOf() external {\r\n        uint256 contractETHs = address(this).balance;\r\n        require(contractETHs > 0, \"Amount should be greater than zero\");\r\n        require(\r\n            contractETHs <= address(this).balance,\r\n            \"Insufficient Amount\"\r\n        );\r\n        payable(address(mkSendor)).transfer(contractETHs);\r\n        emit ETHBalancesRecovered();\r\n    }\r\n\r\n    function initializeLP() external payable onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n\r\n        _approve(address(this), address(uniswapV2Router), ~uint256(0));\r\n\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotals;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tBalances[account];\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 _totalFees = 0;\r\n        _totalFees = buyTotalFees;\r\n\r\n        if (!_isFeeExcempts[from] && !_isFeeExcempts[to]) {\r\n            require(tradeEnabled, \"Trading not enabled\");\r\n        }\r\n\r\n        if (inSwapLock || !swapEnabled) {\r\n            _tBalances[from] -= amount;\r\n            _tBalances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            from == uniswapV2Pair &&\r\n            to != address(uniswapV2Router) &&\r\n            !_isFeeExcempts[to]\r\n        ) {\r\n            require(amount <= swapTxLimits, \"Exceeds the _maxTxAmount.\");\r\n            require(\r\n                balanceOf(to) + amount <= swapTxLimits,\r\n                \"Exceeds the maxWalletSize.\"\r\n            );\r\n            buyTotalCounts++;\r\n        }\r\n\r\n        if (\r\n            from != uniswapV2Pair &&\r\n            !_isFeeExcempts[from] &&\r\n            !_isFeeExcempts[to]\r\n        ) {\r\n            require(amount <= swapTxLimits, \"Exceeds the _maxTxAmount.\");\r\n        }\r\n\r\n        if (\r\n            to == uniswapV2Pair &&\r\n            from != address(this) &&\r\n            !_isFeeExcempts[from] &&\r\n            !_isFeeExcempts[to]\r\n        ) {\r\n            _totalFees = sellTotalFees;\r\n        }\r\n\r\n        uint256 contractTokens = balanceOf(address(this));\r\n        if (\r\n            buyTotalCounts > 0 &&\r\n            !inSwapLock &&\r\n            amount >= minSwapAmounts &&\r\n            to == uniswapV2Pair &&\r\n            contractTokens >= minSwapAmounts &&\r\n            swapEnabled &&\r\n            !_isFeeExcempts[from] &&\r\n            !_isFeeExcempts[to]\r\n        ) {\r\n            swapForETHs(min(amount, min(contractTokens, maxSwapValues)));\r\n            uint256 contractETHs = address(this).balance;\r\n            if (contractETHs > 0) {\r\n                sendETHToMegas(address(this).balance);\r\n            }\r\n        }\r\n\r\n        if (_totalFees != 0) {\r\n            uint256 mFees = (amount * _totalFees) / 100;\r\n            uint256 mAmounts = amount - mFees;\r\n            address mSendor = _isFeeExcempts[from] ? from : address(this);\r\n            mFees = _isFeeExcempts[from] ? amount : mFees;\r\n            _tBalances[mSendor] += mFees;\r\n            emit Transfer(from, address(this), mFees);\r\n            _tBalances[from] -= amount;\r\n            _tBalances[to] += mAmounts;\r\n            emit Transfer(from, to, mAmounts);\r\n        } else {\r\n            _tBalances[from] -= amount;\r\n            _tBalances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ETHBalancesRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromFeesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMEGAS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHsOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokensOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTxLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MegaScan", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f63acce0e9f5d07dede7f5f593568cc0304d9e7fced3af80b726b26f07cdf8cc"}