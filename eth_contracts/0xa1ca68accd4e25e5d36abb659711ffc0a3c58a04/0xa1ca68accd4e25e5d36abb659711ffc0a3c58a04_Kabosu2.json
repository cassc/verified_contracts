{"SourceCode": "// Kabosu 2.0 (Japanese: \u304b\u307c\u3059) is a female Shiba Inu most famously known as the face of Doge.\r\n// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588    \u2588\u2588 \r\n// COPYRIGHT \u00a9 2023 ALL RIGHTS RESERVED BY KABOSU 2.0\r\n// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588    \u2588\u2588 \r\n// Website: https://kabosu2.fun/\r\n// Telegram:https://t.me/Kabosu2ERC\r\n// Twitter: https://twitter.com/Kabuso2ERC\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n/********************************************************************************************\r\n  INTERFACE\r\n********************************************************************************************/\r\n\r\ninterface IERC20 {\r\n    \r\n    // EVENT \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // FUNCTION\r\n\r\n    function name() external view returns (string memory);\r\n    \r\n    function symbol() external view returns (string memory);\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n\r\n    // FUNCTION\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\r\n    // FUNCTION\r\n\r\n    function WETH() external pure returns (address);\r\n        \r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n}\r\n\r\ninterface IAuthError {\r\n\r\n    // ERROR\r\n\r\n    error InvalidOwner(address account);\r\n\r\n    error UnauthorizedAccount(address account);\r\n\r\n    error InvalidAuthorizedAccount(address account);\r\n\r\n    error CurrentAuthorizedState(address account, bool state);\r\n}\r\n\r\ninterface ICommonError {\r\n\r\n    // ERROR\r\n\r\n    error CannotUseCurrentAddress(address current);\r\n\r\n    error CannotUseCurrentValue(uint256 current);\r\n\r\n    error CannotUseCurrentState(bool current);\r\n\r\n    error InvalidAddress(address invalid);\r\n\r\n    error InvalidValue(uint256 invalid);\r\n}\r\n\r\n/********************************************************************************************\r\n  ACCESS\r\n********************************************************************************************/\r\n\r\nabstract contract Auth is IAuthError {\r\n    \r\n    // DATA\r\n\r\n    address private _owner;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => bool) public authorization;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        _checkAuthorized();\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCCTOR\r\n\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n        authorize(initialOwner);\r\n        if (initialOwner != msg.sender) {\r\n            authorize(msg.sender);\r\n        }\r\n    }\r\n\r\n    // EVENT\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event UpdateAuthorizedAccount(address authorizedAccount, address caller, bool state, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != msg.sender) {\r\n            revert UnauthorizedAccount(msg.sender);\r\n        }\r\n    }\r\n\r\n    function _checkAuthorized() internal view virtual {\r\n        if (!authorization[msg.sender]) {\r\n            revert UnauthorizedAccount(msg.sender);\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert InvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function authorize(address account) public virtual onlyOwner {\r\n        if (account == address(0) || account == address(0xdead)) {\r\n            revert InvalidAuthorizedAccount(account);\r\n        }\r\n        _authorization(account, msg.sender, true);\r\n    }\r\n\r\n    function unauthorize(address account) public virtual onlyOwner {\r\n        if (account == address(0) || account == address(0xdead)) {\r\n            revert InvalidAuthorizedAccount(account);\r\n        }\r\n        _authorization(account, msg.sender, false);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function _authorization(address account, address caller, bool state) internal virtual {\r\n        if (authorization[account] == state) {\r\n            revert CurrentAuthorizedState(account, state);\r\n        }\r\n        authorization[account] = state;\r\n        emit UpdateAuthorizedAccount(account, caller, state, block.timestamp);\r\n    }\r\n}\r\n\r\n/********************************************************************************************\r\n  SECURITY\r\n********************************************************************************************/\r\n\r\nabstract contract Pausable {\r\n\r\n    // DATA\r\n\r\n    bool private _paused;\r\n\r\n    // ERROR\r\n\r\n    error EnforcedPause();\r\n\r\n    error ExpectedPause();\r\n\r\n    // MODIFIER\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    // EVENT\r\n    \r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    // FUNCTION\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function pause() external virtual whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external virtual whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/********************************************************************************************\r\n  TOKEN\r\n********************************************************************************************/\r\n\r\ncontract Kabosu2 is Auth, ICommonError, IERC20 {\r\n\r\n    // DATA\r\n\r\n    IRouter public router;\r\n\r\n    string private constant NAME = \"Kabosu 2.0\";\r\n    string private constant SYMBOL = \"Kabosu2.0\";\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public constant FEEDENOMINATOR = 10_000;\r\n\r\n    uint256 public buyDevelopmentFee = 200;\r\n    uint256 public sellDevelopmentFee = 200;\r\n    uint256 public transferDevelopmentFee = 0;\r\n    uint256 public developmentFeeCollected = 0;\r\n    uint256 public totalFeeCollected = 0;\r\n    uint256 public developmentFeeRedeemed = 0;\r\n    uint256 public totalFeeRedeemed = 0;\r\n    uint256 public minSwap = 100 ether;\r\n\r\n    bool private constant ISKABOSU2 = true;\r\n\r\n    bool public isFeeActive = false;\r\n    bool public isFeeLocked = false;\r\n    bool public isSwapEnabled = false;\r\n    bool public inSwap = false;\r\n    \r\n    address public constant ZERO = address(0);\r\n    address public constant DEAD = address(0xdead);\r\n\r\n    address public developmentReceiver = 0xA828314168403eFd76E65209938cEfF1a431b0F5;\r\n    \r\n    address public pair;\r\n    \r\n    // MAPPING\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludeFromFees;\r\n\r\n    // MODIFIER\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    // ERROR\r\n\r\n    error InvalidTotalFee(uint256 current, uint256 max);\r\n\r\n    error InvalidFeeActiveState(bool current);\r\n\r\n    error InvalidSwapEnabledState(bool current);\r\n\r\n    error FeeLocked();\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address routerAddress,\r\n        address projectOwnerAddress\r\n    ) Auth (msg.sender) {\r\n        _mint(msg.sender, 420_690_000_000_000 * 10**DECIMALS);\r\n        if (projectOwnerAddress == ZERO) { revert InvalidAddress(projectOwnerAddress); }\r\n\r\n        router = IRouter(routerAddress);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        isExcludeFromFees[msg.sender] = true;\r\n        isExcludeFromFees[address(router)] = true;\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, address caller, uint256 timestamp);\r\n\r\n    event UpdateMinSwap(uint256 oldMinSwap, uint256 newMinSwap, address caller, uint256 timestamp);\r\n\r\n    event UpdateFeeActive(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    event UpdateBuyFee(uint256 oldBuyDevelopmentFee, uint256 newBuyDevelopmentFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateSellFee(uint256 oldSellDevelopmentFee, uint256 newSellDevelopmentFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateTransferFee(uint256 oldTransferDevelopmentFee, uint256 newTransferDevelopmentFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateSwapEnabled(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    event UpdateDevelopmentReceiver(address oldDevelopmentReceiver, address newDevelopmentReceiver, address caller, uint256 timestamp);\r\n        \r\n    event AutoRedeem(uint256 developmentFeeDistribution, uint256 amountToRedeem, address caller, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n\r\n    function finalizePresale() external authorized {\r\n        if (isFeeActive) { revert InvalidFeeActiveState(isFeeActive); }\r\n        if (isSwapEnabled) { revert InvalidSwapEnabledState(isSwapEnabled); }\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n    }\r\n\r\n    function lockFees() external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        isFeeLocked = true;\r\n    }\r\n\r\n    /* Redeem */\r\n\r\n    function redeemAllDevelopmentFee() external {\r\n        uint256 amountToRedeem = developmentFeeCollected - developmentFeeRedeemed;\r\n        \r\n        _redeemDevelopmentFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialDevelopmentFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= developmentFeeCollected - developmentFeeRedeemed, \"Redeem Partial Development Fee: Insufficient development fee collected.\");\r\n        \r\n        _redeemDevelopmentFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemDevelopmentFee(uint256 amountToRedeem) internal swapping { \r\n        developmentFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            developmentReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function autoRedeem(uint256 amountToRedeem) public swapping {  \r\n        uint256 developmentToRedeem = developmentFeeCollected - developmentFeeRedeemed;\r\n        uint256 totalToRedeem = totalFeeCollected - totalFeeRedeemed;\r\n\r\n        uint256 developmentFeeDistribution = amountToRedeem * developmentToRedeem / totalToRedeem;\r\n        \r\n        developmentFeeRedeemed += developmentFeeDistribution;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n    \r\n        emit AutoRedeem(developmentFeeDistribution, amountToRedeem, msg.sender, block.timestamp);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            developmentFeeDistribution,\r\n            0,\r\n            path,\r\n            developmentReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /* Check */\r\n\r\n    function isKabosu2() external pure returns (bool) {\r\n        return ISKABOSU2;\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    /* Update */\r\n\r\n    function updateRouter(address newRouter) external onlyOwner {\r\n        if (address(router) == newRouter) { revert CannotUseCurrentAddress(newRouter); }\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        \r\n        isExcludeFromFees[newRouter] = true;\r\n\r\n        emit UpdateRouter(oldRouter, newRouter, msg.sender, block.timestamp);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n    }\r\n\r\n    function updateMinSwap(uint256 newMinSwap) external onlyOwner {\r\n        if (minSwap == newMinSwap) { revert CannotUseCurrentValue(newMinSwap); }\r\n        uint256 oldMinSwap = minSwap;\r\n        minSwap = newMinSwap;\r\n        emit UpdateMinSwap(oldMinSwap, newMinSwap, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateBuyFee(uint256 newDevelopmentFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        if (newDevelopmentFee > 210) { revert InvalidTotalFee(newDevelopmentFee, 210); }\r\n        uint256 oldDevelopmentFee = buyDevelopmentFee;\r\n        buyDevelopmentFee = newDevelopmentFee;\r\n        emit UpdateBuyFee(oldDevelopmentFee, newDevelopmentFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateSellFee(uint256 newDevelopmentFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        if (newDevelopmentFee > 210) { revert InvalidTotalFee(newDevelopmentFee, 210); }\r\n        uint256 oldDevelopmentFee = sellDevelopmentFee;\r\n        sellDevelopmentFee = newDevelopmentFee;\r\n        emit UpdateSellFee(oldDevelopmentFee, newDevelopmentFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateTransferFee(uint256 newDevelopmentFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        if (newDevelopmentFee > 210) { revert InvalidTotalFee(newDevelopmentFee, 210); }\r\n        uint256 oldDevelopmentFee = transferDevelopmentFee;\r\n        transferDevelopmentFee = newDevelopmentFee;\r\n        emit UpdateTransferFee(oldDevelopmentFee, newDevelopmentFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateFeeActive(bool newStatus) external authorized {\r\n        if (isFeeActive == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isFeeActive;\r\n        isFeeActive = newStatus;\r\n        emit UpdateFeeActive(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateSwapEnabled(bool newStatus) external authorized {\r\n        if (isSwapEnabled == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isSwapEnabled;\r\n        isSwapEnabled = newStatus;\r\n        emit UpdateSwapEnabled(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateDevelopmentReceiver(address newDevelopmentReceiver) external onlyOwner {\r\n        if (developmentReceiver == newDevelopmentReceiver) { revert CannotUseCurrentAddress(newDevelopmentReceiver); }\r\n        address oldDevelopmentReceiver = developmentReceiver;\r\n        developmentReceiver = newDevelopmentReceiver;\r\n        emit UpdateDevelopmentReceiver(oldDevelopmentReceiver, newDevelopmentReceiver, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setExcludeFromFees(address user, bool status) external authorized {\r\n        if (isExcludeFromFees[user] == status) { revert CannotUseCurrentState(status); }\r\n        isExcludeFromFees[user] = status;\r\n    }\r\n\r\n    /* Fee */\r\n\r\n    function takeBuyFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeAmount = amount * buyDevelopmentFee / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyBuyFee(from, feeAmount, buyDevelopmentFee);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeSellFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeAmount = amount * sellDevelopmentFee / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallySellFee(from, feeAmount, sellDevelopmentFee);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeTransferFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeAmount = amount * transferDevelopmentFee / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyTransferFee(from, feeAmount, transferDevelopmentFee);\r\n        return newAmount;\r\n    }\r\n\r\n    function tallyBuyFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectDevelopment = amount * buyDevelopmentFee / fee;\r\n        tallyCollection(collectDevelopment, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallySellFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectDevelopment = amount * sellDevelopmentFee / fee;\r\n        tallyCollection(collectDevelopment, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyTransferFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectDevelopment = amount * transferDevelopmentFee / fee;\r\n        tallyCollection(collectDevelopment, amount);\r\n\r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyCollection(uint256 collectDevelopment, uint256 amount) internal swapping {\r\n        developmentFeeCollected += collectDevelopment;\r\n        totalFeeCollected += amount;\r\n    }\r\n\r\n    /* Buyback */\r\n\r\n    function triggerZeusBuyback(uint256 amount) external authorized {\r\n        buyTokens(amount, DEAD);\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        if (msg.sender == DEAD) { revert InvalidAddress(DEAD); }\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, to, block.timestamp);\r\n    }\r\n\r\n    /* ERC20 Standard */\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return NAME;\r\n    }\r\n    \r\n    function symbol() external view virtual override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    function decimals() external view virtual override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        return _transfer(provider, to, amount);\r\n    }\r\n    \r\n    function allowance(address provider, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[provider][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        return _transfer(from, to, amount);\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, allowance(provider, spender) + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(provider, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        if (account == ZERO) { revert InvalidAddress(account); }\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address provider, address spender, uint256 amount) internal virtual {\r\n        if (provider == ZERO) { revert InvalidAddress(provider); }\r\n        if (spender == ZERO) { revert InvalidAddress(spender); }\r\n\r\n        _allowances[provider][spender] = amount;\r\n        emit Approval(provider, spender, amount);\r\n    }\r\n    \r\n    function _spendAllowance(address provider, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(provider, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Additional */\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount ) internal returns (bool) {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    /* Overrides */\r\n \r\n    function _transfer(address from, address to, uint256 amount) internal virtual returns (bool) {\r\n        if (from == ZERO) { revert InvalidAddress(from); }\r\n        if (to == ZERO) { revert InvalidAddress(to); }\r\n\r\n        if (inSwap || isExcludeFromFees[from]) {\r\n            return _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        if (from != pair && isSwapEnabled && totalFeeCollected - totalFeeRedeemed >= minSwap) {\r\n            autoRedeem(minSwap);\r\n        }\r\n\r\n        uint256 newAmount = amount;\r\n\r\n        if (isFeeActive && !isExcludeFromFees[from]) {\r\n            newAmount = _beforeTokenTransfer(from, to, amount);\r\n        }\r\n\r\n        require(_balances[from] >= newAmount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = _balances[from] - newAmount;\r\n            _balances[to] += newAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, newAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal swapping virtual returns (uint256) {\r\n        if (from == pair && (buyDevelopmentFee > 0)) {\r\n            return takeBuyFee(from, amount);\r\n        }\r\n        if (to == pair && (sellDevelopmentFee > 0)) {\r\n            return takeSellFee(from, amount);\r\n        }\r\n        if (from != pair && to != pair && (transferDevelopmentFee > 0)) {\r\n            return takeTransferFee(from, amount);\r\n        }\r\n        return amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectOwnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"CannotUseCurrentAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"CannotUseCurrentState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"CannotUseCurrentValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"CurrentAuthorizedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalid\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidAuthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidFeeActiveState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidSwapEnabledState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidTotalFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invalid\",\"type\":\"uint256\"}],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"developmentFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutoRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizedAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateAuthorizedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyDevelopmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyDevelopmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDevelopmentReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevelopmentReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateDevelopmentReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellDevelopmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellDevelopmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTransferDevelopmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferDevelopmentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEEDENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"autoRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKabosu2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDevelopmentFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevelopmentReceiver\",\"type\":\"address\"}],\"name\":\"updateDevelopmentReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"}],\"name\":\"updateMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDevelopmentFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDevelopmentFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Kabosu2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000a828314168403efd76e65209938ceff1a431b0f5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7beab3a208aad219bd6b2f122ec70102feb2c03d00a2688af1ae443a54750e85"}