{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n/* PulseChain Launch King Of The Hill \r\n\r\nWhoever is the last person to enter the competition before the Pulsechain fork will\r\nbe able to chain 100% of the contracts funds on the Pulsechain network.\r\n\r\nThe contract will expire in 1 year. The owner will be able to withdraw funds in 1 year \r\non the Etherem network. If Pulsechain has still not launched in 1 year then a new contract\r\nwill be created and seeded with the funds from this contract.\r\n\r\n*/\r\n\r\ncontract PulseWinner {\r\n\r\n    uint256 public immutable ETHEREUM_CHAIN_ID;\r\n    address public immutable Owner; // The owner can withdraw the contract funds when the expiry date has elapsed\r\n    uint256 public immutable PrizePercentage;\r\n    uint256 public ExpiryDate;\r\n    address public CurrentLeader;\r\n    uint256 public EntryFee;\r\n\r\n    event NewEntry(address indexed addr);\r\n    event PrizeClaimed(address indexed winner);\r\n\r\n    constructor() payable {\r\n        ETHEREUM_CHAIN_ID = block.chainid;\r\n        Owner = msg.sender;\r\n        PrizePercentage = 80;\r\n        ExpiryDate = block.timestamp + (365 * 24 * 60 * 60);     // Set the expiry date to be 1 year in the future from the date of deployment.\r\n        EntryFee = 0.01 ether;\r\n    }\r\n\r\n    function Enter() public payable {\r\n        require(msg.sender != Owner, \"The Owner is not allowed to enter\");\r\n        require(msg.value >= EntryFee, \"Insufficient amount sent for the entry fee.\");\r\n        require(block.timestamp < ExpiryDate, \"The entry expiry date has lapsed. \");\r\n        require(block.chainid == ETHEREUM_CHAIN_ID, \"You can only enter when on the ethereum chain\");\r\n\r\n        CurrentLeader = msg.sender;\r\n        emit NewEntry(msg.sender);\r\n    }\r\n\r\n    function ClaimWinningFunds() external {\r\n        \r\n        if(block.chainid != ETHEREUM_CHAIN_ID) {\r\n            // The only time this happens is if there is a fork of the Ethereum network and there is a new Chain ID. \r\n            // In our case this means that pulsechain has launched and the winner can claim their funds on the pulsechain network.\r\n            payable(CurrentLeader).transfer(address(this).balance);\r\n        }\r\n        else {\r\n            require(block.timestamp >= ExpiryDate, \"The contract has not expired\");\r\n            require(msg.sender == Owner, \"You are not the Owner\");\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    receive() payable external {\r\n        Enter();\r\n    }\r\n\r\n    fallback() payable external {\r\n        Enter();\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ClaimWinningFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CurrentLeader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHEREUM_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ExpiryDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PrizePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PulseWinner", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3b33a677bce82ea465c572007f54d3ee8d2b009d43a37a3882edc3043cf66aa"}