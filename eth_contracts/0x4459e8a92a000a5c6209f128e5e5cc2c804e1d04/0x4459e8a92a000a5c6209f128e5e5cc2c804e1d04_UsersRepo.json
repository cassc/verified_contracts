{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n\\n            delete set._values[lastIndex];\\n            set._values.pop();\\n\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    //======== Bytes32Set ========\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    //======== AddressSet ========\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    //======== UintSet ========\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) public returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LockersRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\nlibrary LockersRepo {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct Head {\\n        uint40 from;\\n        uint40 to;\\n        uint48 expireDate;\\n        uint128 value;\\n    }\\n    struct Body {\\n        address counterLocker;\\n        bytes payload;\\n    }\\n    struct Locker {\\n        Head head;\\n        Body body;\\n    }\\n\\n    struct Repo {\\n        // hashLock => locker\\n        mapping (bytes32 => Locker) lockers;\\n        EnumerableSet.Bytes32Set snList;\\n    }\\n\\n    //#################\\n    //##    Write    ##\\n    //#################\\n\\n    function headSnParser(bytes32 sn) public pure returns (Head memory head) {\\n        uint _sn = uint(sn);\\n        \\n        head = Head({\\n            from: uint40(_sn >> 216),\\n            to: uint40(_sn >> 176),\\n            expireDate: uint48(_sn >> 128),\\n            value: uint128(_sn)\\n        });\\n    }\\n\\n    function codifyHead(Head memory head) public pure returns (bytes32 headSn) {\\n        bytes memory _sn = abi.encodePacked(\\n                            head.from,\\n                            head.to,\\n                            head.expireDate,\\n                            head.value);\\n        assembly {\\n            headSn := mload(add(_sn, 0x20))\\n        }\\n    }\\n\\n    function lockPoints(\\n        Repo storage repo,\\n        Head memory head,\\n        bytes32 hashLock\\n    ) public {\\n        Body memory body;\\n        lockConsideration(repo, head, body, hashLock);        \\n    }\\n\\n    function lockConsideration(\\n        Repo storage repo,\\n        Head memory head,\\n        Body memory body,\\n        bytes32 hashLock\\n    ) public {       \\n        if (repo.snList.add(hashLock)) {            \\n            Locker storage locker = repo.lockers[hashLock];      \\n            locker.head = head;\\n            locker.body = body;\\n        } else revert (\\\"LR.lockConsideration: occupied\\\");\\n    }\\n\\n    function pickupPoints(\\n        Repo storage repo,\\n        bytes32 hashLock,\\n        string memory hashKey,\\n        uint caller\\n    ) public returns(Head memory head) {\\n        \\n        bytes memory key = bytes(hashKey);\\n\\n        require(hashLock == keccak256(key),\\n            \\\"LR.pickupPoints: wrong key\\\");\\n\\n        Locker storage locker = repo.lockers[hashLock];\\n\\n        require(block.timestamp < locker.head.expireDate, \\n            \\\"LR.pickupPoints: locker expired\\\");\\n\\n        bool flag = true;\\n\\n        if (locker.body.counterLocker != address(0)) {\\n            require(locker.head.to == caller, \\n                \\\"LR.pickupPoints: wrong caller\\\");\\n\\n            uint len = key.length;\\n            bytes memory zero = new bytes(32 - (len % 32));\\n\\n            bytes memory payload = abi.encodePacked(locker.body.payload, len, key, zero);\\n            (flag, ) = locker.body.counterLocker.call(payload);\\n        }\\n\\n        if (flag) {\\n            head = locker.head;\\n            delete repo.lockers[hashLock];\\n            repo.snList.remove(hashLock);\\n        }\\n    }\\n\\n    function withdrawDeposit(\\n        Repo storage repo,\\n        bytes32 hashLock,\\n        uint256 caller\\n    ) public returns(Head memory head) {\\n\\n        Locker memory locker = repo.lockers[hashLock];\\n\\n        require(block.timestamp >= locker.head.expireDate, \\n            \\\"LR.withdrawDeposit: locker not expired\\\");\\n\\n        require(locker.head.from == caller, \\n            \\\"LR.withdrawDeposit: wrong caller\\\");\\n\\n        if (repo.snList.remove(hashLock)) {\\n            head = locker.head;\\n            delete repo.lockers[hashLock];\\n        } revert (\\\"LR.withdrawDeposit: locker not exist\\\");\\n    }\\n\\n    //#################\\n    //##    Read     ##\\n    //#################\\n\\n    function getHeadOfLocker(\\n        Repo storage repo,\\n        bytes32 hashLock\\n    ) public view returns (Head memory head) {\\n        return repo.lockers[hashLock].head;\\n    }\\n\\n    function getLocker(\\n        Repo storage repo,\\n        bytes32 hashLock\\n    ) public view returns (Locker memory) {\\n        return repo.lockers[hashLock];\\n    }\\n\\n    function getSnList(\\n        Repo storage repo\\n    ) public view returns (bytes32[] memory ) {\\n        return repo.snList.values();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UsersRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./LockersRepo.sol\\\";\\n\\nlibrary UsersRepo {\\n    using LockersRepo for LockersRepo.Repo;\\n\\n    struct Key {\\n        address pubKey;\\n        uint16 discount;\\n        uint40 gift; \\n        uint40 coupon;\\n    }\\n\\n    struct User {\\n        Key primeKey;\\n        Key backupKey;\\n    }\\n\\n    struct Rule {\\n        uint40 eoaRewards;\\n        uint40 coaRewards;\\n        uint40 floor;\\n        uint16 rate;\\n        uint16 para;\\n    }\\n\\n    struct Repo {\\n        // userNo => User\\n        mapping(uint256 => User) users;\\n        // key => userNo\\n        mapping(address => uint) userNo;\\n        LockersRepo.Repo lockers;       \\n    }\\n\\n    // platformRule: Rule({\\n    //     eoaRewards: users[0].primeKey.gift,\\n    //     coaRewards: users[0].backupKey.gift,\\n    //     floor: users[0].backupKey.coupon,\\n    //     rate: users[0].primeKey.discount,\\n    //     para: users[0].backupKey.discount\\n    // });\\n\\n    // counterOfUers: users[0].primeKey.coupon;\\n\\n    // ####################\\n    // ##    Modifier    ##\\n    // ####################\\n\\n    modifier onlyOwner(Repo storage repo, address msgSender) {\\n        require(msgSender == getOwner(repo), \\n            \\\"UR.mf.OO: not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper(Repo storage repo, address msgSender) {\\n        require(msgSender == getBookeeper(repo), \\n            \\\"UR.mf.OK: not bookeeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPrimeKey(Repo storage repo, address msgSender) {\\n        require(msgSender == repo.users[getUserNo(repo, msgSender)].primeKey.pubKey, \\n            \\\"UR.mf.OPK: not primeKey\\\");\\n        _;\\n    }\\n\\n    // ########################\\n    // ##    Opts Setting    ##\\n    // ########################\\n\\n    function ruleParser(bytes32 sn) public pure \\n        returns(Rule memory rule) \\n    {\\n        uint _sn = uint(sn);\\n\\n        rule = Rule({\\n            eoaRewards: uint40(_sn >> 216),\\n            coaRewards: uint40(_sn >> 176),\\n            floor: uint40(_sn >> 136),\\n            rate: uint16(_sn >> 120),\\n            para: uint16(_sn >> 96)\\n        });\\n    }\\n\\n    function setPlatformRule(Repo storage repo, bytes32 snOfRule, address msgSender) \\n        public onlyOwner(repo, msgSender) onlyPrimeKey(repo, msgSender) \\n    {\\n\\n        Rule memory rule = ruleParser(snOfRule);\\n\\n        User storage opt = repo.users[0];\\n\\n        opt.primeKey.discount = rule.rate;\\n        opt.primeKey.gift = rule.eoaRewards;\\n\\n        opt.backupKey.discount = rule.para;\\n        opt.backupKey.gift = rule.coaRewards;\\n        opt.backupKey.coupon = rule.floor;\\n    }\\n\\n    function getPlatformRule(Repo storage repo) public view \\n        returns (Rule memory rule) \\n    {\\n        User storage opt = repo.users[0];\\n\\n        rule = Rule({\\n            eoaRewards: opt.primeKey.gift,\\n            coaRewards: opt.backupKey.gift,\\n            floor: opt.backupKey.coupon,\\n            rate: opt.primeKey.discount,\\n            para: opt.backupKey.discount\\n        });\\n    }\\n\\n    function transferOwnership(Repo storage repo, address newOwner, address msgSender) \\n        public onlyOwner(repo, msgSender)\\n    {\\n        repo.users[1].primeKey.pubKey = newOwner;\\n    }\\n\\n    function handoverCenterKey(Repo storage repo, address newKeeper, address msgSender) \\n        public onlyKeeper(repo, msgSender) \\n    {\\n        repo.users[1].backupKey.pubKey = newKeeper;\\n    }\\n\\n    // ==== Author Setting ====\\n\\n    function infoParser(bytes32 info) public pure returns(Key memory)\\n    {\\n        uint _info = uint(info);\\n\\n        Key memory out = Key({\\n            pubKey: address(0),\\n            discount: uint16(_info >> 80),\\n            gift: uint40(_info >> 40),\\n            coupon: uint40(_info)\\n        });\\n\\n        return out;\\n    }\\n\\n    function setRoyaltyRule(\\n        Repo storage repo,\\n        bytes32 snOfRoyalty,\\n        address msgSender\\n    ) public onlyPrimeKey(repo, msgSender) {\\n\\n        Key memory rule = infoParser(snOfRoyalty);\\n\\n        uint author = getUserNo(repo, msgSender);\\n        User storage a = repo.users[author];\\n\\n        a.backupKey.discount = rule.discount;\\n        a.backupKey.gift = rule.gift;\\n        a.backupKey.coupon = rule.coupon;\\n\\n    }\\n\\n    function getRoyaltyRule(Repo storage repo, uint author)\\n        public view returns (Key memory) \\n    {\\n        require (author > 0, 'zero author');\\n\\n        Key memory rule = repo.users[author].backupKey;\\n        delete rule.pubKey;\\n\\n        return rule;\\n    }\\n\\n    // ##################\\n    // ##    Points    ##\\n    // ##################\\n\\n    function mintAndLockPoints(Repo storage repo, uint to, uint amt, uint expireDate, bytes32 hashLock, address msgSender) \\n        public onlyOwner(repo, msgSender) returns (LockersRepo.Head memory head)\\n    {\\n        head = _prepareLockerHead(repo, to, amt, expireDate, msgSender);\\n        repo.lockers.lockPoints(head, hashLock);\\n    }\\n\\n    function _prepareLockerHead(\\n        Repo storage repo, \\n        uint to, \\n        uint amt, \\n        uint expireDate, \\n        address msgSender\\n    ) private view returns (LockersRepo.Head memory head) {\\n        uint40 caller = getUserNo(repo, msgSender);\\n\\n        require((amt >> 128) == 0, \\n            \\\"UR.prepareLockerHead: amt overflow\\\");\\n\\n        head = LockersRepo.Head({\\n            from: caller,\\n            to: uint40(to),\\n            expireDate: uint48(expireDate),\\n            value: uint128(amt)\\n        });\\n    }\\n\\n    function lockPoints(Repo storage repo, uint to, uint amt, uint expireDate, bytes32 hashLock, address msgSender) \\n        public onlyPrimeKey(repo, msgSender) returns (LockersRepo.Head memory head)\\n    {\\n        head = _prepareLockerHead(repo, to, amt, expireDate, msgSender);\\n        repo.lockers.lockPoints(head, hashLock);\\n    }\\n\\n    function lockConsideration(\\n        Repo storage repo, \\n        uint to, \\n        uint amt, \\n        uint expireDate, \\n        address counterLocker, \\n        bytes calldata payload, \\n        bytes32 hashLock, \\n        address msgSender\\n    ) public onlyPrimeKey(repo, msgSender) returns (LockersRepo.Head memory head) {\\n        head = _prepareLockerHead(repo, to, amt, expireDate, msgSender);\\n        LockersRepo.Body memory body = LockersRepo.Body({\\n            counterLocker: counterLocker,\\n            payload: payload \\n        });\\n        repo.lockers.lockConsideration(head, body, hashLock);\\n    }\\n\\n    function pickupPoints(\\n        Repo storage repo, \\n        bytes32 hashLock, \\n        string memory hashKey,\\n        address msgSender\\n    ) public returns (LockersRepo.Head memory head) \\n    {\\n        uint caller = getUserNo(repo, msgSender);\\n        head = repo.lockers.pickupPoints(hashLock, hashKey, caller);\\n    }\\n\\n    function withdrawDeposit(\\n        Repo storage repo, \\n        bytes32 hashLock, \\n        address msgSender\\n    ) public onlyPrimeKey(repo, msgSender) returns (LockersRepo.Head memory head) {\\n        uint caller = getUserNo(repo, msgSender);\\n        head = repo.lockers.withdrawDeposit(hashLock, caller);\\n    }\\n\\n    function getLocker(\\n        Repo storage repo,\\n        bytes32 hashLock\\n    ) public view returns (LockersRepo.Locker memory locker) \\n    {\\n        locker = repo.lockers.getLocker(hashLock);\\n    }\\n\\n    function getLocksList(\\n        Repo storage repo\\n    ) public view returns (bytes32[] memory) \\n    {\\n        return repo.lockers.getSnList();\\n    }\\n\\n    // ##########################\\n    // ##    User & Members    ##\\n    // ##########################\\n\\n    // ==== reg user ====\\n\\n    function _increaseCounterOfUsers(Repo storage repo) private returns (uint40) {\\n        repo.users[0].primeKey.coupon++;\\n        return repo.users[0].primeKey.coupon;\\n    }\\n\\n    function regUser(Repo storage repo, address msgSender) public \\n        returns (User memory )\\n    {\\n\\n        require(!isKey(repo, msgSender), \\\"UserRepo.RegUser: used key\\\");\\n\\n        uint seqOfUser = _increaseCounterOfUsers(repo);\\n\\n        repo.userNo[msgSender] = seqOfUser;\\n\\n        User memory user;\\n\\n        user.primeKey.pubKey = msgSender;\\n\\n        Rule memory rule = getPlatformRule(repo);\\n\\n        if (_isContract(msgSender)) {\\n            user.primeKey.discount = 1;\\n            user.primeKey.gift = rule.coaRewards;\\n        } else user.primeKey.gift = rule.eoaRewards;\\n\\n        repo.users[seqOfUser] = user;\\n\\n        return user;\\n    }\\n\\n    function _isContract(address acct) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(acct)\\n        }\\n        return size != 0;\\n    }\\n\\n    function setBackupKey(Repo storage repo, address bKey, address msgSender) \\n        public onlyPrimeKey(repo, msgSender)\\n    {\\n        require (!isKey(repo, bKey), \\\"UR.SBK: used key\\\");\\n\\n        uint caller = getUserNo(repo, msgSender);\\n\\n        User storage user = repo.users[caller];\\n\\n        require(user.backupKey.pubKey == address(0), \\n            \\\"UR.SBK: already set backupKey\\\");\\n        \\n        user.backupKey.pubKey = bKey;\\n\\n        repo.userNo[bKey] = caller;\\n    }\\n\\n    function upgradeBackupToPrime(\\n        Repo storage repo,\\n        address msgSender\\n    ) public {\\n        User storage user = repo.users[getUserNo(repo, msgSender)];\\n        (user.primeKey.pubKey, user.backupKey.pubKey) =\\n            (user.backupKey.pubKey, user.primeKey.pubKey);\\n    }\\n\\n\\n    // ##############\\n    // ## Read I/O ##\\n    // ##############\\n\\n    // ==== options ====\\n\\n    function counterOfUsers(Repo storage repo) public view returns (uint40) {\\n        return repo.users[0].primeKey.coupon;\\n    }\\n\\n    function getOwner(Repo storage repo) public view returns (address) {\\n        return repo.users[1].primeKey.pubKey;\\n    }\\n\\n    function getBookeeper(Repo storage repo) public view returns (address) {\\n        return repo.users[1].backupKey.pubKey;\\n    }\\n\\n    // ==== register ====\\n\\n    function isKey(Repo storage repo, address key) public view returns (bool) {\\n        return repo.userNo[key] > 0;\\n    }\\n\\n    function getUser(Repo storage repo, address msgSender) \\n        public view returns (User memory)\\n    {\\n        return repo.users[getUserNo(repo, msgSender)];\\n    }\\n\\n    function getUserNo(Repo storage repo, address msgSender) \\n        public view returns(uint40) \\n    {\\n        uint40 user = uint40(repo.userNo[msgSender]);\\n\\n        if (user > 0) return user;\\n        else revert (\\\"UR.getUserNo: not registered\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/LockersRepo.sol\": {\r\n        \"LockersRepo\": \"0xc3168a9eeac1e43e151655a5033795cc8fa86f3c\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"info\",\"type\":\"bytes32\"}],\"name\":\"infoParser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pubKey\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"gift\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"coupon\",\"type\":\"uint40\"}],\"internalType\":\"struct UsersRepo.Key\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"ruleParser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"eoaRewards\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"coaRewards\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"floor\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"rate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"para\",\"type\":\"uint16\"}],\"internalType\":\"struct UsersRepo.Rule\",\"name\":\"rule\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "UsersRepo", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}