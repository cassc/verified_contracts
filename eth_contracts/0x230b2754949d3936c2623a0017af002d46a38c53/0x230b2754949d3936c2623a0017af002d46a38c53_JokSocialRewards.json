{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"jokSocialRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/// @title Jok Social Rewards\\r\\n/// @author Andre Costa @ MyWeb3Startup.com\\r\\n\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Context.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/access/Ownable.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address internal _oldOwner;\\r\\n\\r\\n    uint256 internal lastOwnershipTransfer;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the previous owner.\\r\\n     */\\r\\n    function oldOwner() public view virtual returns (address) {\\r\\n        return _oldOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner_ = _owner;\\r\\n        _oldOwner = oldOwner_;\\r\\n        _owner = newOwner;\\r\\n        lastOwnershipTransfer = block.timestamp;\\r\\n        emit OwnershipTransferred(oldOwner_, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n    external\\r\\n    returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title JokSocialRewards\\r\\n * @dev A smart contract for retrieving social rewards in JOK.\\r\\n * The contract enables users to withdraw staked funds and claimed rewards securely using ECDSA signatures.\\r\\n */\\r\\ncontract JokSocialRewards is Ownable {\\r\\n\\r\\n    // ERC-20 token used for staking\\r\\n    IERC20 public jokToken;\\r\\n\\r\\n    // Struct to represent social rewards\\r\\n    struct SocialRewards {\\r\\n        uint256 totalClaimed;\\r\\n        uint256 lastClaimDay;\\r\\n    }\\r\\n\\r\\n    // Mapping to store affiliate commissions for each address\\r\\n    mapping(address => SocialRewards) public socialRewards;\\r\\n\\r\\n    // Address of the staking signer\\r\\n    address public signer = 0x8aaBaf348B299E759D091F17100a95A0F9caD89C;\\r\\n\\r\\n    // Nonce to prevent replay attacks\\r\\n    mapping(address => uint256) public nonce;\\r\\n\\r\\n    // Event emitted on successful withdrawal\\r\\n    event Withdraw(address indexed staker, uint256 earnings);\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor function to initialize the contract.\\r\\n     */\\r\\n    constructor() {\\r\\n        jokToken = IERC20(0xA728Aa2De568766E2Fa4544Ec7A77f79c0bf9F97);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a user to withdraw staked funds and claimed rewards from the contract.\\r\\n     * @param earnings The total amount of staking rewards to be withdrawn.\\r\\n     * @param _v ECDSA signature parameter v.\\r\\n     * @param _r ECDSA signature parameters r.\\r\\n     * @param _s ECDSA signature parameters s.\\r\\n     */\\r\\n\\r\\n\\r\\n      function withdraw(uint256 earnings,string memory message, uint8 _v, bytes32 _r, bytes32 _s) external {\\r\\n        // Validate the ECDSA signature for secure withdrawal\\r\\n        uint256 totalEarnings = earnings;\\r\\n        require(isValidSignature(msg.sender, totalEarnings, message, _v, _r, _s), \\\"Invalid signature!\\\");\\r\\n        uint256 currentDay = getCurrentDay();\\r\\n        // Update affiliate commission information\\r\\n        socialRewards[msg.sender].totalClaimed += earnings;\\r\\n        socialRewards[msg.sender].lastClaimDay = currentDay;\\r\\n\\r\\n        nonce[msg.sender]++;\\r\\n\\r\\n        // Transfer JOK tokens to the user\\r\\n        require(jokToken.transfer(msg.sender, earnings), \\\"Token transfer failed!\\\");\\r\\n\\r\\n        emit Withdraw(msg.sender, earnings);\\r\\n    }\\r\\n\\r\\n    // MISC\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get the current day based on the contract's timestamp.\\r\\n     * @return The current day.\\r\\n     */\\r\\n    function getCurrentDay() public view returns (uint256) {\\r\\n        return block.timestamp / 1 days;\\r\\n    }\\r\\n\\r\\nfunction getMessageHash(\\r\\n        address beneficiary,\\r\\n        uint amount,\\r\\n        string memory message,\\r\\n        uint256 _nonce\\r\\n    ) public view returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(address(this), beneficiary, amount, message, _nonce));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to validate an ECDSA signature for secure staking-related transactions.\\r\\n     * @param beneficiary The address that will receive the transaction result.\\r\\n     * @param amount The total amount involved in the transaction.\\r\\n     * @param _v ECDSA signature parameter v.\\r\\n     * @param _r ECDSA signature parameters r.\\r\\n     * @param _s ECDSA signature parameters s.\\r\\n     * @return A boolean indicating whether the signature is valid.\\r\\n     */\\r\\n\\r\\n     function isValidSignature(address beneficiary, uint256 amount, string memory message, uint8 _v, bytes32 _r, bytes32 _s) internal view returns (bool) {\\r\\n\\r\\n        bytes32 messageHash = getMessageHash(beneficiary, amount, message, nonce[beneficiary]);\\r\\n        // bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\r\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\r\\n\\r\\n        address recoveredSigner = ecrecover(prefixedHash, _v, _r, _s);\\r\\n\\r\\n        return recoveredSigner == signer;\\r\\n    }\\r\\n\\r\\n    // ADMIN\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the address of the signer.\\r\\n     * @dev This function updates the signer address.\\r\\n     * @param _signer The new address of the signer.\\r\\n     */\\r\\n    function setSigner(address _signer) external onlyOwner {\\r\\n        signer = _signer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to set the ERC-20 token used for staking.\\r\\n     * @param _jokToken The new address of the ERC-20 token.\\r\\n     */\\r\\n    function setJokToken(address _jokToken) external onlyOwner {\\r\\n        jokToken = IERC20(_jokToken);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jokToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jokToken\",\"type\":\"address\"}],\"name\":\"setJokToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"socialRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimDay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JokSocialRewards", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}