{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/GatewayProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\nimport {ERC1967} from \\\"./utils/ERC1967.sol\\\";\\nimport {Call} from \\\"./utils/Call.sol\\\";\\nimport {IInitializable} from \\\"./interfaces/IInitializable.sol\\\";\\n\\ncontract GatewayProxy is IInitializable {\\n    error Unauthorized();\\n    error NativeCurrencyNotAccepted();\\n\\n    constructor(address implementation, bytes memory params) {\\n        // Store the address of the implementation contract\\n        ERC1967.store(implementation);\\n        // Initialize storage by calling the implementation's `initialize(bytes)` function\\n        // using `delegatecall`.\\n        (bool success, bytes memory returndata) =\\n            implementation.delegatecall(abi.encodeCall(IInitializable.initialize, params));\\n        Call.verifyResult(success, returndata);\\n    }\\n\\n    // Prevent fallback() from calling `IInitializable.initialize(bytes)` on the implementation contract\\n    function initialize(bytes calldata) external pure {\\n        revert Unauthorized();\\n    }\\n\\n    fallback() external payable {\\n        address implementation = ERC1967.load();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    // Prevent users from unwittingly sending ether to the gateway, as these funds\\n    // would otherwise be lost forever.\\n    receive() external payable {\\n        revert NativeCurrencyNotAccepted();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Initialization of gateway logic contracts\\n */\\ninterface IInitializable {\\n    function initialize(bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"src/utils/Call.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: 2023 OpenZeppelin\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\n// Derived from OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\nlibrary Call {\\n    function verifyResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/ERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\n/// @title Minimal implementation of ERC1967 storage slot\\nlibrary ERC1967 {\\n    // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\n    bytes32 public constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function load() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(_IMPLEMENTATION_SLOT)\\n        }\\n    }\\n\\n    function store(address implementation) internal {\\n        assembly {\\n            sstore(_IMPLEMENTATION_SLOT, implementation)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NativeCurrencyNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GatewayProxy", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000c7c95b98c55a3ba3bd8cb51af85f465fbffba493000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000df64fb6f66900000000000000000000000000000000000000000000000000000000000003e881c5ab2571199e3188135178f3c2c8e2d268be1313d029b30f534fa579b69b79000000000000000000000000000000000000000000000000002e7a027af3a00000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000016345785d8a000100000000000000000000000000000000000000000000000014d1120d7b160000000000000000000000000000d5c71e38be810c7fd996b752f53fd4de1699b789", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xc7c95b98c55a3ba3bd8cb51af85f465fbffba493", "SwarmSource": ""}