{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IStrategy } from './IStrategy.sol';\\n\\ninterface IPool is IERC20 {\\n    error WrongDeposit(uint256 sid, uint256[5] amounts);\\n    error AbsentStrategy(uint256 sid);\\n    error NotStartedStrategy(uint256 sid);\\n    error DisabledStrategy(uint256 sid);\\n    error WrongAmount();\\n    error WrongWithdrawParams(uint256 sid);\\n    error WrongRatio();\\n    error ZeroAddress();\\n    error DuplicatedStrategy();\\n    error IncorrectArguments();\\n    error WrongWithdrawPercent();\\n    error WrongReceiver();\\n    error IncorrectSid();\\n    error WrongTokens();\\n    error WrongDecimalMultipliers();\\n\\n    struct StrategyInfo {\\n        IStrategy strategy;\\n        uint256 startTime;\\n        uint256 minted;\\n        bool enabled;\\n    }\\n\\n    event Deposited(\\n        address indexed depositor,\\n        uint256 deposited,\\n        uint256[5] amounts,\\n        uint256 indexed sid\\n    );\\n\\n    event Withdrawn(address indexed withdrawer, uint256 withdrawn, uint256 indexed sid);\\n\\n    event FailedWithdrawal(address indexed withdrawer, uint256[5] amounts, uint256 withdrawn);\\n\\n    event AddedStrategy(uint256 indexed sid, address indexed strategyAddr, uint256 startTime);\\n    event ClaimedRewards(address indexed receiver, IERC20[] rewardTokens);\\n    event ClaimedExtraGains(address indexed receiver, uint256 amount);\\n    event EnabledStrategy(address indexed pool);\\n    event DisableStrategy(address indexed pool);\\n    event UpdatedToken(\\n        uint256 indexed tid,\\n        address indexed token,\\n        uint256 tokenDecimalMultiplier,\\n        address tokenOld\\n    );\\n\\n    function tokens() external view returns (IERC20[5] memory);\\n\\n    function token(uint256 tid) external view returns (IERC20);\\n\\n    function tokenDecimalsMultipliers() external view returns (uint256[5] memory);\\n\\n    function strategyInfo(uint256 sid) external view returns (StrategyInfo memory);\\n\\n    function claimRewards(address receiver, IERC20[] memory rewardTokens) external;\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function strategyCount() external view returns (uint256);\\n\\n    function deposit(\\n        uint256 sid,\\n        uint256[5] memory amounts,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function depositStrategy(uint256 sid, uint256[5] memory amounts) external returns (uint256);\\n\\n    function withdraw(\\n        uint256 sid,\\n        uint256 stableAmount,\\n        uint256[5] memory minTokenAmounts,\\n        address receiver\\n    ) external;\\n\\n    function mintAndClaimExtraGains(address receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IPool.sol';\\n\\ninterface IPoolController is IERC20 {\\n    function pool() external view returns (IPool);\\n\\n    function deposit(uint256[5] memory amounts, address receiver) external returns (uint256);\\n\\n    function withdraw(\\n        uint256 stableAmount,\\n        uint256[5] memory minTokenAmounts,\\n        address receiver\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStrategy {\\n    function deposit(uint256[5] memory amounts) external returns (uint256);\\n\\n    function withdraw(\\n        address receiver,\\n        uint256 userDepositRatio, // multiplied by 1e18\\n        uint256[5] memory minTokenAmounts\\n    ) external returns (bool);\\n\\n    function withdrawAll(uint256[5] memory minTokenAmounts) external;\\n\\n    function totalHoldings() external view returns (uint256);\\n\\n    function claimRewards(address receiver, IERC20[] memory rewardTokens) external;\\n\\n    function calcTokenAmount(\\n        uint256[5] memory tokenAmounts,\\n        bool isDeposit\\n    ) external view returns (uint256 sharesAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenConverter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ITokenConverter {\\n    function handle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amount,\\n        uint256 minAmountOut\\n    ) external returns (uint256);\\n\\n    function valuate(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokenomics/staking/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IStaking {\\n    // Deposit token\\n    function deposit(uint256 _amount, address _receiver) external;\\n\\n    // Withdraw token\\n    function withdraw(\\n        uint256 _amount,\\n        bool _claimRewards,\\n        address _receiver\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Constants.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nlibrary Constants {\\n    address internal constant CRVUSD_ADDRESS = 0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E;\\n    address internal constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant FRX_ETH_ADDRESS = 0x5E8422345238F34275888049021821E8E08CAa1f;\\n    address internal constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant CVX_ADDRESS = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address internal constant CRV_ADDRESS = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    address internal constant FXS_ADDRESS = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\\n    address internal constant SPELL_ADDRESS = 0x090185f2135308BaD17527004364eBcC2D37e5F6;\\n    address internal constant SDT_ADDRESS = 0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F;\\n    address internal constant SFRXETH_ADDRESS = 0xac3E018457B222d93114458476f3E3416Abbe38F;\\n    // Will be added after deployment of zunUSD v2 pool\\n    address internal constant ZUNUSD_ADDRESS = 0x8C0D76C9B18779665475F3E212D9Ca1Ed6A1A0e6;\\n    // Will be added after deployment of zunUSD v2 pool controller\\n    address internal constant zunUSD_CONTROLLER_ADDRESS =\\n        0x618eee502CDF6b46A2199C21D1411f3F6065c940;\\n    // Will be added after deployment of zunETH v2 pool\\n    address internal constant zunETH_ADDRESS = 0xc2e660C62F72c2ad35AcE6DB78a616215E2F2222;\\n    address internal constant zunETH_CONTROLLER_ADDRESS =\\n        0x54A00DA65c79DDCe24E7fe4691737FD70F7797DF;\\n\\n    address public constant CHAINLINK_FEED_REGISTRY_ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address internal constant CRV_3POOL_ADDRESS = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n    address internal constant CRV_3POOL_LP_ADDRESS = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n    address internal constant CRV_TRICRYPTO2_ADDRESS = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\\n\\n    address internal constant ETH_frxETH_ADDRESS = 0xa1F8A6807c402E4A15ef4EBa36528A3FED24E577;\\n    address internal constant ETH_frxETH_LP_ADDRESS = 0xf43211935C781D5ca1a41d2041F397B8A7366C7A;\\n\\n    address internal constant WETH_frxETH_ADDRESS = 0x9c3B46C0Ceb5B9e304FCd6D88Fc50f7DD24B31Bc;\\n    address internal constant WETH_frxETH_LP_ADDRESS = 0x9c3B46C0Ceb5B9e304FCd6D88Fc50f7DD24B31Bc;\\n\\n    address internal constant CRV_FRAX_USDC_POOL_ADDRESS =\\n        0xDcEF968d416a41Cdac0ED8702fAC8128A64241A2;\\n    address internal constant CRV_FRAX_USDC_POOL_LP_ADDRESS =\\n        0x3175Df0976dFA876431C2E9eE6Bc45b65d3473CC;\\n\\n    address internal constant SDT_CRVUSD_USDT_VAULT_ADDRESS =\\n        0x37b24ac19504C0c6FC1ADc8deb5D24f5C4F6A2f2;\\n    address internal constant CRV_CRVUSD_USDT_LP_ADDRESS =\\n        0x390f3595bCa2Df7d23783dFd126427CCeb997BF4;\\n    address internal constant CRV_CRVUSD_USDT_ADDRESS = 0x390f3595bCa2Df7d23783dFd126427CCeb997BF4;\\n\\n    address internal constant SDT_CRVUSD_USDC_VAULT_ADDRESS =\\n        0xb618EA40cb1F5b08839Ba228C8dd58AC3DCA12F3;\\n    address internal constant CRV_CRVUSD_USDC_LP_ADDRESS =\\n        0x4DEcE678ceceb27446b35C672dC7d61F30bAD69E;\\n    address internal constant CRV_CRVUSD_USDC_ADDRESS = 0x4DEcE678ceceb27446b35C672dC7d61F30bAD69E;\\n\\n    address internal constant CRV_BOOSTER_ADDRESS = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n    address internal constant CRV_STAKING_BOOSTER_ADDRESS = 0xD8Bd5Cdd145ed2197CB16ddB172DF954e3F28659;\\n\\n    address internal constant CRV_ETH_stETH_ADDRESS = 0x21E27a5E5513D6e65C4f830167390997aA84843a;\\n    address internal constant CRV_ETH_stETH_LP_ADDRESS = 0x21E27a5E5513D6e65C4f830167390997aA84843a;\\n    address internal constant CVX_ETH_stETH_REWARDS_ADDRESS =\\n        0x6B27D7BC63F1999D14fF9bA900069ee516669ee8;\\n    uint256 internal constant CVX_ETH_stETH_PID = 177;\\n\\n    address internal constant CRV_zunUSD_crvUSD_ADDRESS =\\n        0x8C24b3213FD851db80245FCCc42c40B94Ac9a745;\\n    address internal constant CRV_zunUSD_crvUSD_LP_ADDRESS =\\n        0x8C24b3213FD851db80245FCCc42c40B94Ac9a745;\\n    address internal constant CVX_zunUSD_crvUSD_REWARDS_ADDRESS =\\n        0xB0408d1477554268Ece9b0a40290C345196fBf1B;\\n    uint256 internal constant CVX_zunUSD_crvUSD_PID = 309;\\n\\n    address internal constant CRV_USDT_crvUSD_ADDRESS = 0x390f3595bCa2Df7d23783dFd126427CCeb997BF4;\\n\\n    address internal constant LLAMALEND_CRV_ADDRESS = 0xCeA18a8752bb7e7817F9AE7565328FE415C0f2cA;\\n    address internal constant SDT_LLAMALEND_CRV_VAULT_ADDRESS =\\n        0xfa6D40573082D797CB3cC378c0837fB90eB043e5;\\n    address internal constant CVX_LLAMALEND_CRV_REWARDS_ADDRESS =\\n        0x4bf2d8484474170bff8a8c34475be3d87dFF28cA;\\n    uint256 internal constant CVX_LLAMALEND_CRV_PID = 325;\\n\\n    address internal constant LLAMALEND_WETH_ADDRESS = 0x5AE28c9197a4a6570216fC7e53E7e0221D7A0FEF;\\n    address internal constant SDT_LLAMALEND_WETH_CRVUSD_VAULT_ADDRESS =\\n        0xADde9073d897743E7004115Fa2452cC959FBF28a;\\n\\n    address internal constant CRV_zunETH_frxETH_ADDRESS =\\n        0x3A65cbaebBFecbeA5D0CB523ab56fDbda7fF9aAA;\\n    address internal constant CRV_zunETH_frxETH_LP_ADDRESS =\\n        0x3A65cbaebBFecbeA5D0CB523ab56fDbda7fF9aAA;\\n    address internal constant CVX_zunETH_frxETH_REWARDS_ADDRESS =\\n        0x756d67A10974Fa0e0cE63F82AF4E7ef0d46d452D;\\n    uint256 internal constant CVX_zunETH_frxETH_PID = 330;\\n\\n    uint256 internal constant CVX_STAKING_zunETH_frxETH_PID = 75;\\n\\n\\n    address internal constant SDT_zunETH_frxETH_VAULT_ADDRESS =\\n        0xAaE1Ae12d4C8b811DDa1188b01be23b4ab7C62D2;\\n\\n    address internal constant SDT_PXETH_WETH_VAULT_ADDRESS = 0x062AdE4F4583fF6b21f6f2c2Ed04eD7037E8B282;\\n    address internal constant CRV_PXETH_WETH_ADDRESS = 0xC8Eb2Cf2f792F77AF0Cd9e203305a585E588179D;\\n    address internal constant CRV_PXETH_WETH_LP_ADDRESS = 0xC8Eb2Cf2f792F77AF0Cd9e203305a585E588179D;\\n\\n    // Will be added after deployment of zunUSD v2 pool and curve pool for zunUSD\\n    address internal constant CRV_zunUSD_crvFRAX_ADDRESS = address(0);\\n    address internal constant CRV_zunUSD_crvFRAX_LP_ADDRESS = address(0);\\n    address internal constant CVX_zunUSD_crvFRAX_REWARDS_ADDRESS = address(0);\\n    uint256 internal constant CVX_zunUSD_crvFRAX_PID = 0;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ZunamiDepositZap3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../interfaces/IPoolController.sol';\\nimport '../interfaces/ITokenConverter.sol';\\nimport '../utils/Constants.sol';\\nimport \\\"../tokenomics/staking/IStaking.sol\\\";\\n\\ncontract ZunamiDepositZap3 {\\n    using SafeERC20 for IERC20;\\n\\n    error ZeroAddress();\\n    error SameAddress();\\n\\n    uint8 public constant POOL_ASSETS = 5;\\n\\n    uint256 constant ZUNAMI_CRVUSD_TOKEN_ID = 3;\\n\\n    uint256 public constant MIN_AMOUNT_DENOMINATOR = 10000;\\n    uint256 public constant MIN_AMOUNT = 9950; // 99.50%\\n\\n    IPool public immutable zunamiPool;\\n    IPoolController public immutable apsController;\\n    IStaking public immutable staking;\\n    ITokenConverter public immutable converter;\\n\\n    constructor(address zunamiPoolAddr, address apsControllerAddr, address stakingAddr, address tokenConverterAddr) {\\n        if (\\n            zunamiPoolAddr == address(0) ||\\n            apsControllerAddr == address(0) ||\\n            stakingAddr == address(0) ||\\n            tokenConverterAddr == address(0)\\n        ) revert ZeroAddress();\\n        zunamiPool = IPool(zunamiPoolAddr);\\n        apsController = IPoolController(apsControllerAddr);\\n        staking = IStaking(stakingAddr);\\n        converter = ITokenConverter(tokenConverterAddr);\\n    }\\n\\n    function deposit(\\n        uint256[POOL_ASSETS] memory amounts,\\n        address receiver\\n    ) external returns (uint256 shares) {\\n        if (receiver == address(0)) {\\n            receiver = msg.sender;\\n        }\\n\\n        IERC20[POOL_ASSETS] memory tokens = zunamiPool.tokens();\\n        uint256[POOL_ASSETS] memory tokenDecimalsMultipliers = zunamiPool\\n            .tokenDecimalsMultipliers();\\n        for (uint256 i = 0; i < amounts.length; ++i) {\\n            uint256 amount = amounts[i];\\n            IERC20 token = tokens[i];\\n            uint256 tokenDecimalsMultiplier = tokenDecimalsMultipliers[i];\\n            if (i == ZUNAMI_CRVUSD_TOKEN_ID) {\\n                token = IERC20(Constants.CRVUSD_ADDRESS);\\n                tokenDecimalsMultiplier = 1;\\n            }\\n            if (address(token) != address(0) && amount > 0) {\\n                token.safeTransferFrom(msg.sender, address(this), amount);\\n                token.safeTransfer(address(converter), amount);\\n                converter.handle(\\n                    address(token),\\n                    address(zunamiPool),\\n                    amount,\\n                    (amount * tokenDecimalsMultiplier * MIN_AMOUNT) / MIN_AMOUNT_DENOMINATOR\\n                );\\n            }\\n        }\\n\\n        uint256 zunStableBalance = zunamiPool.balanceOf(address(this));\\n        IERC20(address(zunamiPool)).safeIncreaseAllowance(address(apsController), zunStableBalance);\\n        apsController.deposit([zunStableBalance, 0, 0, 0, 0], address(this));\\n\\n        uint256 apsLpBalance = apsController.balanceOf(address(this));\\n        IERC20(address(apsController)).safeIncreaseAllowance(address(staking), apsLpBalance);\\n        staking.deposit(apsLpBalance, receiver);\\n\\n        return apsLpBalance;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zunamiPoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"apsControllerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenConverterAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ASSETS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apsController\",\"outputs\":[{\"internalType\":\"contract IPoolController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"contract ITokenConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"amounts\",\"type\":\"uint256[5]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zunamiPool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZunamiDepositZap3", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008c0d76c9b18779665475f3e212d9ca1ed6a1a0e6000000000000000000000000d9f559280c9d308549e84946c0d668a817fccfb5000000000000000000000000280d48e85f712e067a16d6b25e7ffe261c0810bd000000000000000000000000f48a59434609b6e934c2cf091848fa2d28b34bfc", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}