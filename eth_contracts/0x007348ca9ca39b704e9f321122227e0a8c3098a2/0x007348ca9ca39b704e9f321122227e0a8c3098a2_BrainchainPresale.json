{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\n// File: contracts/brainchainpresale.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\ncontract BrainchainPresale is Ownable {\r\n    IERC20 public token;\r\n    IERC20Metadata public tokenMetadata;\r\n    AggregatorV3Interface public priceFeed;\r\n    address public sellerAddress;\r\n    address public paymentAddress;\r\n    uint256 public presaleTokenAmount;\r\n    bool public presaleActive = true;\r\n    uint256 public totalSold = 0;\r\n\r\n    struct Stage {\r\n        uint256 id;\r\n        uint256 bonus;\r\n        uint256 price;\r\n        uint256 start;\r\n        uint256 end;\r\n    }\r\n    mapping(uint256 => Stage) public stages;\r\n    uint256 public maxStage = 4;\r\n    uint256 currentStageId = 0;\r\n\r\n    /***\r\n     * constructor\r\n     */\r\n    constructor(\r\n        address _seller,\r\n        address _payment,\r\n        address _token,\r\n        address _priceFeed\r\n    ) Ownable(msg.sender) {\r\n        token = IERC20(_token);\r\n        tokenMetadata = IERC20Metadata(_token);\r\n        sellerAddress = _seller;\r\n        paymentAddress = _payment;\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n    }\r\n\r\n    /***\r\n     * Get the latest ETH/USD price from the Aggregator\r\n     */\r\n    function getEthToUsdPrice() public view returns (int256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n\r\n        return price;\r\n    }\r\n\r\n    /***\r\n     * Convert ETH to USD based on the latest price from the Aggregator\r\n     */\r\n    function convertEthToUsd(uint256 ethAmount) public view returns (uint256) {\r\n        int256 ethToUsdPrice = getEthToUsdPrice();\r\n\r\n        uint256 usdAmount = (ethAmount * uint256(ethToUsdPrice)) /\r\n            (10**priceFeed.decimals());\r\n        return usdAmount;\r\n    }\r\n\r\n    /***\r\n     * @dev buyToken funtion to buy tokens\r\n     * @param _amount No of tokens to buy\r\n     */\r\n    function buyToken(uint256 _amount) public payable {\r\n        require(presaleActive, \"Presale is not active!\");\r\n        require(_amount >= 0, \"Please enter minimum token!\");\r\n        uint256 _id = getCurrentStageIdActive();\r\n        require(_id > 0, \"Stage info not available!\");\r\n        uint256 _bonus = stages[_id].bonus;\r\n        uint256 _price = stages[_id].price;\r\n        uint256 _start = stages[_id].start;\r\n        uint256 _end = stages[_id].end;\r\n        require(_start <= block.timestamp, \"Presale has not started yet!\");\r\n        require(_end >= block.timestamp, \"Presale end!\");\r\n        uint256 _totalPayUsd = _amount * _price;\r\n        uint256 _ethToUsd = convertEthToUsd(1e18);\r\n        uint256 _totalPayAmount = _totalPayUsd / _ethToUsd;\r\n        require(msg.value >= _totalPayAmount, \"Not enough payment!\");\r\n        uint256 _weiAmount = _amount * 1e18;\r\n        uint256 _bonusAmount = (_amount * _bonus) / 100;\r\n        _bonusAmount *= 1e18;\r\n        uint256 _totalAmount = _weiAmount + _bonusAmount;\r\n        uint256 _tokenDecimals = tokenMetadata.decimals();\r\n        uint256 _subDecimals = 18 - _tokenDecimals;\r\n        uint256 _totalTokenAmount = _totalAmount / (10**_subDecimals);\r\n        require(\r\n            (totalSold + _totalTokenAmount) <= presaleTokenAmount,\r\n            \"Presale token amount exceeds!\"\r\n        );\r\n\r\n        //payment price transfer to seller address\r\n        require(\r\n            payable(sellerAddress).send(msg.value),\r\n            \"Failed to transfer ETH payment!\"\r\n        );\r\n\r\n        //purchased tokens transfer seller address to buyer address\r\n        bool success = token.transferFrom(\r\n            sellerAddress,\r\n            msg.sender,\r\n            _totalTokenAmount\r\n        );\r\n        require(success, \"Failed to transfer token!\");\r\n\r\n        //added to totalSold\r\n        totalSold += _totalTokenAmount;\r\n    }\r\n\r\n    /***\r\n     * @dev update token address\r\n     */\r\n    function setToken(address _token) public onlyOwner {\r\n        require(_token != address(0), \"Token is zero address!\");\r\n        token = IERC20(_token);\r\n        tokenMetadata = IERC20Metadata(_token);\r\n    }\r\n\r\n    /***\r\n     * @dev update price feed address\r\n     */\r\n    function setPriceFeed(address _priceFeed) public onlyOwner {\r\n        require(_priceFeed != address(0), \"Token is zero address!\");\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n    }\r\n\r\n    /***\r\n     * @dev update sellerAddress\r\n     */\r\n    function setSellerAddress(address _seller) public onlyOwner {\r\n        sellerAddress = _seller;\r\n    }\r\n\r\n    /***\r\n     * @dev update paementAddress\r\n     */\r\n    function setPaymentAddress(address _payment) public onlyOwner {\r\n        paymentAddress = _payment;\r\n    }\r\n\r\n    /***\r\n     * @dev update presaleTokenAmount\r\n     * approved token allowance for this presale contract\r\n     */\r\n    function setPresaleTokenAmount() public onlyOwner {\r\n        presaleTokenAmount = token.allowance(sellerAddress, address(this));\r\n    }\r\n\r\n    /***\r\n     * @dev flip presaleActive as true/false\r\n     */\r\n    function flipPresaleActive() public onlyOwner {\r\n        presaleActive = !presaleActive;\r\n    }\r\n\r\n    /***\r\n     * @dev update maximum stage\r\n     */\r\n    function setMaxStage(uint256 _maxStage) public onlyOwner {\r\n        maxStage = _maxStage;\r\n    }\r\n\r\n    /***\r\n     * @dev ading stage info\r\n     */\r\n    function addStage(\r\n        uint256 _bonus,\r\n        uint256 _price,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) public onlyOwner {\r\n        uint256 _id = currentStageId + 1;\r\n        require(_id <= maxStage, \"Maximum stage excceds!\");\r\n        require(_bonus <= 100, \"Bonus should be between 0 and 100\");\r\n        require(_start > 0 && _end > 0, \"Invalid date!\");\r\n        require(_start < _end, \"End date smaller than start!\");\r\n        currentStageId += 1;\r\n        stages[_id].id = _id;\r\n        stages[_id].bonus = _bonus;\r\n        stages[_id].price = _price;\r\n        stages[_id].start = _start;\r\n        stages[_id].end = _end;\r\n    }\r\n\r\n    /***\r\n     * @dev update stage info\r\n     */\r\n    function setStage(\r\n        uint256 _id,\r\n        uint256 _bonus,\r\n        uint256 _price,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) public onlyOwner {\r\n        require(stages[_id].id == _id, \"ID doesn't exist!\");\r\n        require(_bonus <= 100, \"Bonus should be between 0 and 100\");\r\n        require(_start > 0 && _end > 0, \"Invalid date!\");\r\n        require(_start < _end, \"End date smaller than start!\");\r\n        stages[_id].bonus = _bonus;\r\n        stages[_id].price = _price;\r\n        stages[_id].start = _start;\r\n        stages[_id].end = _end;\r\n    }\r\n\r\n    /***\r\n     * @dev get current stage id active\r\n     */\r\n    function getCurrentStageIdActive() public view returns (uint256) {\r\n        uint256 _id = 0;\r\n        if (currentStageId == 0) {\r\n            _id = 0;\r\n        } else {\r\n            for (uint256 i = 1; i <= currentStageId; i++) {\r\n                if (\r\n                    (block.timestamp >= stages[i].start) &&\r\n                    (block.timestamp <= stages[i].end)\r\n                ) {\r\n                    _id = i;\r\n                }\r\n            }\r\n        }\r\n        return _id;\r\n    }\r\n\r\n    /***\r\n     * @dev empty total sold\r\n     */\r\n    function setEmptyTotalSold() public onlyOwner {\r\n        totalSold = 0;\r\n    }\r\n\r\n    /***\r\n     * @dev withdrawFunds functions to get remaining funds transfer to seller address\r\n     */\r\n    function withdrawFunds() public onlyOwner {\r\n        require(\r\n            payable(msg.sender).send(address(this).balance),\r\n            \"Failed withdraw!\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"convertEthToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPresaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStageIdActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthToUsdPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmptyTotalSold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxStage\",\"type\":\"uint256\"}],\"name\":\"setMaxStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"}],\"name\":\"setPaymentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresaleTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"setSellerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMetadata\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BrainchainPresale", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b14a9627a856622c01b4f85b0265e49ac59f3549000000000000000000000000b14a9627a856622c01b4f85b0265e49ac59f3549000000000000000000000000f290921618f203b549cb041af2985a979f3b5ca60000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e81a59beeecd34ec0291623ca0ceaba4c1527cdcfbff984d15c7e25c439c021a"}