{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.4;\n\ninterface IERC721 {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}\n\n/// @title ERC721 Batch Transfer\n/// @author Aleph Retamal (https://github.com/alephao)\n/// @notice Transfer ERC721 tokens in batches to a single wallet or multiple wallets.\n/// @notice To use any of the methods in this contract the user has to approve this contract\n///         to control their tokens using either `setApproveForAll` or `approve` functions from\n//          the ERC721 contract.\ncontract ERC721BatchTransfer {\n    /// @dev 0x5f6f132c\n    error InvalidArguments();\n    /// @dev 0x4c084f14\n    error NotOwnerOfToken();\n    /// @dev 0x48f5c3ed\n    error InvalidCaller();\n\n    event BatchTransferToSingle(\n        address indexed contractAddress,\n        address indexed to,\n        uint256 amount\n    );\n\n    event BatchTransferToMultiple(\n        address indexed contractAddress,\n        uint256 amount\n    );\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() {}\n\n    modifier noZero() {\n        if (msg.sender == address(0)) revert InvalidCaller();\n        _;\n    }\n\n    /// @notice Transfer multiple tokens to the same wallet using the ERC721.transferFrom method\n    /// @notice If you don't know what that means, use the `safeBatchTransferToSingleWallet` method instead\n    /// @param erc721Contract the address of the nft contract\n    /// @param to the address that will receive the nfts\n    /// @param tokenIds the list of tokens that will be transferred\n    function batchTransferToSingleWallet(\n        IERC721 erc721Contract,\n        address to,\n        uint256[] calldata tokenIds\n    ) external noZero {\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ) {\n            uint256 tokenId = tokenIds[i];\n            address owner = erc721Contract.ownerOf(tokenId);\n            if (msg.sender != owner) {\n                revert NotOwnerOfToken();\n            }\n            erc721Contract.transferFrom(owner, to, tokenId);\n            unchecked {\n                ++i;\n            }\n        }\n        emit BatchTransferToSingle(address(erc721Contract), to, length);\n    }\n\n    /// @notice transfer multiple tokens to the same wallet using the `ERC721.safeTransferFrom` method\n    /// @param erc721Contract the address of the nft contract\n    /// @param to the address that will receive the nfts\n    /// @param tokenIds the list of tokens that will be transferred\n    function safeBatchTransferToSingleWallet(\n        IERC721 erc721Contract,\n        address to,\n        uint256[] calldata tokenIds\n    ) external noZero {\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ) {\n            uint256 tokenId = tokenIds[i];\n            address owner = erc721Contract.ownerOf(tokenId);\n            if (msg.sender != owner) {\n                revert NotOwnerOfToken();\n            }\n            erc721Contract.safeTransferFrom(owner, to, tokenId);\n            unchecked {\n                ++i;\n            }\n        }\n        emit BatchTransferToSingle(address(erc721Contract), to, length);\n    }\n\n    /// @notice Transfer multiple tokens to multiple wallets using the ERC721.transferFrom method\n    /// @notice If you don't know what that means, use the `safeBatchTransferToMultipleWallets` method instead\n    /// @notice The tokens in `tokenIds` will be transferred to the addresses in the same position in `tos`\n    /// @notice E.g.: if tos = [0x..1, 0x..2, 0x..3] and tokenIds = [1, 2, 3], then:\n    ///         0x..1 will receive token 1;\n    ///         0x..2 will receive token 2;\n    //          0x..3 will receive token 3;\n    /// @param erc721Contract the address of the nft contract\n    /// @param tos the list of addresses that will receive the nfts\n    /// @param tokenIds the list of tokens that will be transferred\n    function batchTransferToMultipleWallets(\n        IERC721 erc721Contract,\n        address[] calldata tos,\n        uint256[] calldata tokenIds\n    ) external noZero {\n        uint256 length = tokenIds.length;\n        if (tos.length != length) revert InvalidArguments();\n\n        for (uint256 i; i < length; ) {\n            uint256 tokenId = tokenIds[i];\n            address owner = erc721Contract.ownerOf(tokenId);\n            address to = tos[i];\n            if (msg.sender != owner) {\n                revert NotOwnerOfToken();\n            }\n            erc721Contract.transferFrom(owner, to, tokenId);\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit BatchTransferToMultiple(address(erc721Contract), length);\n    }\n\n    /// @notice Transfer multiple tokens to multiple wallets using the ERC721.safeTransferFrom method\n    /// @notice The tokens in `tokenIds` will be transferred to the addresses in the same position in `tos`\n    /// @notice E.g.: if tos = [0x..1, 0x..2, 0x..3] and tokenIds = [1, 2, 3], then:\n    ///         0x..1 will receive token 1;\n    ///         0x..2 will receive token 2;\n    //          0x..3 will receive token 3;\n    /// @param erc721Contract the address of the nft contract\n    /// @param tos the list of addresses that will receive the nfts\n    /// @param tokenIds the list of tokens that will be transferred\n    function safeBatchTransferToMultipleWallets(\n        IERC721 erc721Contract,\n        address[] calldata tos,\n        uint256[] calldata tokenIds\n    ) external noZero {\n        uint256 length = tokenIds.length;\n        if (tos.length != length) revert InvalidArguments();\n\n        for (uint256 i; i < length; ) {\n            uint256 tokenId = tokenIds[i];\n            address owner = erc721Contract.ownerOf(tokenId);\n            address to = tos[i];\n            if (msg.sender != owner) {\n                revert NotOwnerOfToken();\n            }\n            erc721Contract.safeTransferFrom(owner, to, tokenId);\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit BatchTransferToMultiple(address(erc721Contract), length);\n    }\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BatchTransferToMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BatchTransferToSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferToMultipleWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferToSingleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"safeBatchTransferToMultipleWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"safeBatchTransferToSingleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721BatchTransfer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}