// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./file/String.sol";
import "./file/Counters.sol";
import "./file/Address.sol";
import "./file/Ownable.sol";
import "./file/ERC165.sol";
import "./file/ERC721.sol";
import "./file/IAccessControl.sol";
import "./file/AccessControlEnumerable.sol";
import "./file/ERC721Enumerable.sol";

contract FlashStrikerNFT is
    ERC721,
    AccessControlEnumerable,
    ERC721Enumerable,
    Ownable
{
    using Counters for Counters.Counter;
    Counters.Counter private _counts;

    mapping(address => bool) public approvalWhitelists;
    string private _baseTokenURI;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    struct NFTInfo {
        uint256 tokenId;
        uint256 createdDate;
    }

    mapping(uint256 => uint256) public createdDateInfos;

    event TokenMinted(address to, uint256 indexed tokenId);

    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;
        _setupRole(MINTER_ROLE, _msgSender());
        _counts.increment();
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function setNewFactory(address addressFactory) external onlyOwner {
        _setupRole(MINTER_ROLE, addressFactory);
    }

    function getNftFromAddress(address user) public view returns (uint256[] memory){
        uint256 balanceNFT = balanceOf(user);
        uint256[] memory tokens = new uint256[](balanceNFT);      
        for (uint256 i = 0; i < balanceNFT; i++) {
            uint256 tokenId = tokenOfOwnerByIndex(user, i);
            tokens[i] = tokenId;
        }
        return tokens;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mintWithCount(address to) external virtual returns (uint256) {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "NFT: must have minter role to mint"
        );
        uint256 itemId = _counts.current();
        require(!_exists(itemId), "NFT: must have unique tokenId");
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, itemId);
        _counts.increment();
        createdDateInfos[itemId] = block.timestamp;
        emit TokenMinted(to, itemId);
        return itemId;
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator)
        public
        view
        override
        returns (bool)
    {
        if (approvalWhitelists[operator] == true) {
            return true;
        }

        return super.isApprovedForAll(owner, operator);
    }

    /**
     * @dev Allow operation to reduce gas fee.
     */
    function addApprovalWhitelist(address proxy) public onlyOwner {
        require(
            approvalWhitelists[proxy] == false,
            "NFT: invalid proxy address"
        );

        approvalWhitelists[proxy] = true;
    }

    /**
     * @dev Remove operation from approval list.
     */
    function removeApprovalWhitelist(address proxy) public onlyOwner {
        approvalWhitelists[proxy] = false;
    }

    /**
     * @dev Set token URI
     */
    function updateBaseURI(string calldata baseTokenURI) public onlyOwner {
        _baseTokenURI = baseTokenURI;
    }

    /**
     * @dev See {IERC165-_beforeTokenTransfer}.
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}