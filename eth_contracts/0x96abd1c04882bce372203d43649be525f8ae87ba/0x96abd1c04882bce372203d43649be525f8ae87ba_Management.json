{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IManagement {\\r\\n    \\r\\n    function platformFeeAddress() external view returns (address);\\r\\n\\r\\n    function isContractManager(address manager) external view returns (bool);\\r\\n\\r\\n    function isWhiteInvestor(address investor) external view returns (bool);\\r\\n\\r\\n    function isRestrictInvestor(address investor) external view returns (bool);\\r\\n\\r\\n    function isWhiteContract(address contractAddress) external view returns (bool);\\r\\n    \\r\\n    function isBlockInvestor(address investor) external view returns (bool);\\r\\n\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPairFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IPairFactory {\\r\\n\\r\\n    function createAMMPair(\\r\\n        string memory name,\\r\\n        address issuer,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address management,\\r\\n        uint[] memory params\\r\\n    ) external returns(address);\\r\\n\\r\\n    function createOTCPair(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address management,\\r\\n        uint maxOrderAmount,\\r\\n        uint platformFeeRate\\r\\n    ) external returns(address);\\r\\n\\r\\n    function createP2PPair(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        address management,\\r\\n        uint maxOrderAmount,\\r\\n        uint platformFeeRate\\r\\n    ) external returns(address);\\r\\n\\r\\n    function createSecurityToken(\\r\\n        string memory _name, \\r\\n        address issuer,\\r\\n        uint amount,\\r\\n        address management\\r\\n    ) external returns(address);\\r\\n\\r\\n    function setManagement(address _management) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/LManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nlibrary LManagement {\\r\\n    \\r\\n    function distinctOwners(\\r\\n        mapping(address => bool) storage self,\\r\\n        address[] memory addrs\\r\\n    ) external view returns (bool) {\\r\\n        for (uint i = 0; i < addrs.length; i++) {\\r\\n            if (!self[addrs[i]]) {\\r\\n                return false;\\r\\n            }\\r\\n            for (uint j = 0; j < i; j++) {\\r\\n                if (addrs[i] == addrs[j]) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getSigAddress (\\r\\n        bytes32  DOMAIN_SEPARATOR,\\r\\n        bytes32  TYPEHASH,\\r\\n        uint nonce,\\r\\n        address investor,\\r\\n        uint8 v, \\r\\n        bytes32  r, \\r\\n        bytes32  s\\r\\n    ) external pure  returns(address){\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(TYPEHASH, investor, nonce))\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        return recoveredAddress;\\r\\n    }\\r\\n\\r\\n    function getSigManagementAddress (\\r\\n        bytes32  DOMAIN_SEPARATOR,\\r\\n        bytes32  TYPEHASH,\\r\\n        uint nonce,\\r\\n        address[] memory pairs,\\r\\n        address newManagement,\\r\\n        uint8 v, \\r\\n        bytes32  r, \\r\\n        bytes32  s\\r\\n    ) external pure  returns(address){\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(TYPEHASH, pairs,newManagement, nonce))\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        return recoveredAddress;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Management.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.16;\\r\\nimport \\\"./interfaces/IManagement.sol\\\";\\r\\nimport \\\"./interfaces/IPairFactory.sol\\\";\\r\\nimport {LManagement} from \\\"./libraries/LManagement.sol\\\";\\r\\n\\r\\ncontract Management is IManagement {\\r\\n    enum SigTypeEnum {AddWhitelist,RemoveWhitelist,AddRestrictlist,RemoveRestrictlist,\\r\\n        AddManager,RemoveManager,SetContractManager,SetFeeAddress,AddWhiteContract,\\r\\n        RemoveWhiteContract,AddAdmin,RemoveAdmin,SetAmmFactory, SetOTCFactory, \\r\\n        SetP2PFactory,SetSecurityTokenFactory,SetManagement,AddBlocklist,RemoveBlocklist\\r\\n    }\\r\\n\\r\\n    using LManagement for mapping(address => bool);\\r\\n\\r\\n    string public constant name = \\\"Management\\\";\\r\\n\\r\\n    uint private constant requiredCount = 2; //\u6700\u5c0f\u4e2a\u6570\\r\\n    mapping(address => bool) public whiteList;\\r\\n    mapping(address => bool) public restrictList;\\r\\n    mapping(address => bool) public blockList;\\r\\n    mapping(address => bool) public contractList;\\r\\n    mapping(address => bool) public administers;\\r\\n    mapping(address => bool) public managers; //\u7ba1\u7406\u5458\u5730\u5740\\r\\n    address public contractManager; //\u5408\u7ea6\u7ba1\u7406\u5730\u5740\\r\\n    address public override platformFeeAddress; //\u624b\u7eed\u8d39\u5730\u5740\\r\\n\\r\\n    address public ammFactory;\\r\\n    address public otcFactory; \\r\\n    address public p2pFactory;\\r\\n    address public securityTokenFactory;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"AddWhitelist(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant AddWhitelist_TYPEHASH =0xbae36f97ece7ff6d06ff73064049b6deade63e84a39445ca59a9f59d7b0e9d37;\\r\\n    // keccak256(\\\"RemoveWhitelist(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant RemoveWhitelist_TYPEHASH =0x64c10c1478cf7c3721d359e2f78dfa299c48914c2b6eee9faf35f8508efaeb66;\\r\\n    // keccak256(\\\"AddRestrictlist(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant AddRestrictlist_TYPEHASH =0x998c128fd52190b99cc267054dba040f747bb1889483c451e6e62ecec6f6d836;\\r\\n    // keccak256(\\\"RemoveRestrictlist(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant RemoveRestrictlist_TYPEHASH =0x67e02dd9101cb5ec4ba888b64cf2c887af2342ac87015f0d3964de766f752ba3;\\r\\n    // keccak256(\\\"AddManager(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant AddManager_TYPEHASH =0x163ef0b23224e585a532cb21be056017dc5e24df899e899050f87fb0d9d0e6af;\\r\\n    // keccak256(\\\"RemoveManager(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant RemoveManager_TYPEHASH =0x5ec50e1700093b09774f85c99fe10b2181ff7ebf6137116fee769be0f81fa805;\\r\\n    // keccak256(\\\"SetContractManager(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant SetContractManager_TYPEHASH =0xb5f4b13180b35446f001da8d7a0d31d20f8ec9923e348cc5febdad1de8b247a6;\\r\\n    // keccak256(\\\"SetFeeAddress(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant SetFeeAddress_TYPEHASH =0x3dcf3f15c74bb4d23ab46e4d6ad7cb01451ac366ec11b9471bc09f7db736ad9a;\\r\\n    // keccak256(\\\"AddWhiteContract(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant AddWhiteContract_TYPEHASH =0x1c12de27ba3f67de1dcc525f385b6a129320bf3a5498f39609f3162fdff12174;\\r\\n    // keccak256(\\\"RemoveWhiteContract(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant RemoveWhiteContract_TYPEHASH =0x1be7eca310a863b2bb7cd7bec55909338bc6875ad0756ac9ddfa750c868aa176;\\r\\n    // keccak256(\\\"AddBlocklist(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant AddBlocklist_TYPEHASH =0x3d89d6d5d11eb76b63c2c6f18dfb34b3af7acc2d703db73c28069a378ff7aec2;\\r\\n    // keccak256(\\\"RemoveBlocklist(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant RemoveBlocklist_TYPEHASH =0x9cc9d087aba7064e2e525ccec3dcf261b9e6580c2ceefdf3a7ac50a56474f344;\\r\\n    // keccak256(\\\"AddAdmin(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant AddAdmin_TYPEHASH =0xcf8112dd5614e0034cc93ebdb4f9f2022169d42d53deb26955289b3166922bd6;\\r\\n    // keccak256(\\\"RemoveAdmin(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant RemoveAdmin_TYPEHASH =0x7720a4a484039e81f3c0e5fb52777da87964d87481af2590bb33051987c3978d;\\r\\n    // keccak256(\\\"SetAmmFactory(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant SetAmmFactory_TYPEHASH =0x82a5ca036b13d3a4d2434003f390437bc3cca474cb0105d5d00dc876270e886c;\\r\\n    // keccak256(\\\"SetOTCFactory(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant SetOTCFactory_TYPEHASH =0x359c99fc0cb49cd48a2b30e841fa0eb69dd24d1a27568d10de6bbf66a2b682ca;\\r\\n    // keccak256(\\\"SetP2PFactory(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant SetP2PFactory_TYPEHASH =0xbf8bfccdd4104913963fd44789a30b476f07bb27996c4e09368cd28b0ad312f0;\\r\\n    // keccak256(\\\"SetSecurityTokenFactory(address investor,uint256 nonce)\\\");\\r\\n    bytes32 public constant SetSecurityTokenFactory_TYPEHASH =0x907bf65e4c55c6e6b92c6b773f9d37c37ecac28d90231a91f35473e6400203d0;\\r\\n    // keccak256(\\\"SetManagement(address[] memory pairs,address newManagement,uint256 nonce)\\\");\\r\\n    bytes32 public constant SetManagement_TYPEHASH =0xd33bb19e110fdd3dde0f5adcf90869ca157d2bda52f50a3f08594dcbeedb5260;\\r\\n\\r\\n    mapping(SigTypeEnum => bytes32) private typehashMap;\\r\\n    mapping(SigTypeEnum => uint) public nonces;\\r\\n\\r\\n    event AddWhitelistEvent(address indexed from, address indexed addr);\\r\\n    event RemoveWhitelistEvent(address indexed from, address indexed addr);\\r\\n    event AddRestrictlistEvent(address indexed from, address indexed addr);\\r\\n    event RemoveRestrictlistEvent(address indexed from, address indexed addr);\\r\\n    event AddBlocklistEvent(address indexed from, address indexed addr);\\r\\n    event RemoveBlocklistEvent(address indexed from, address indexed addr);\\r\\n    event AddManagerEvent(address indexed from, address indexed addr);\\r\\n    event RemoveManagerEvent(address indexed from, address indexed addr);\\r\\n    event SetContractManagerEvent(address indexed from, address indexed addr);\\r\\n    event SetFeeAddressEvent(address indexed from, address indexed addr);\\r\\n    event AddWhiteContractEvent(address indexed from, address indexed addr);\\r\\n    event RemoveWhiteContractEvent(address indexed from, address indexed addr);\\r\\n    event AddAdminEvent(address indexed from, address indexed addr);\\r\\n    event RemoveAdminEvent(address indexed from, address indexed addr);\\r\\n    event SetAmmFactoryEvent(address indexed from, address _ammFactory);\\r\\n    event SetOTCFactoryEvent(address indexed from, address _otcFactory);\\r\\n    event SetP2PFactoryEvent(address indexed from, address _p2pFactory);\\r\\n    event SetSTFactoryEvent(address indexed from,address _securityTokenFactory);\\r\\n\\r\\n    event CreateSTEvent(address indexed from,address indexed addr,string name,address issuer);\\r\\n    event CreateAMMEvent(address indexed from,address indexed addr,address tokenA,address tokenB,string _name);\\r\\n    event CreateOTCEvent(address indexed from,address indexed addr,address tokenA,address tokenB);\\r\\n    event CreateP2PEvent(address indexed from,address indexed addr,address tokenA,address tokenB);\\r\\n    event SetManagementEvent(address indexed from,address[] pairs,address newManagement);\\r\\n\\r\\n    modifier onlyContractManager() {\\r\\n        require(\\r\\n            msg.sender == contractManager,\\\"Caller is not contract manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address[] memory _admins, address[] memory _factories) {\\r\\n        \\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                ),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n        typehashMap[SigTypeEnum.AddWhitelist] = AddWhitelist_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.RemoveWhitelist] = RemoveWhitelist_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.AddRestrictlist] = AddRestrictlist_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.RemoveRestrictlist] = RemoveRestrictlist_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.AddManager] = AddManager_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.RemoveManager] = RemoveManager_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.SetContractManager ] = SetContractManager_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.SetFeeAddress] = SetFeeAddress_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.AddWhiteContract] = AddWhiteContract_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.RemoveWhiteContract] = RemoveWhiteContract_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.AddAdmin] = AddAdmin_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.RemoveAdmin] = RemoveAdmin_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.SetAmmFactory] = SetAmmFactory_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.SetOTCFactory] = SetOTCFactory_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.SetP2PFactory] = SetP2PFactory_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.SetSecurityTokenFactory ] = SetSecurityTokenFactory_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.SetManagement] = SetManagement_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.AddBlocklist] = AddBlocklist_TYPEHASH;\\r\\n        typehashMap[SigTypeEnum.RemoveBlocklist] = RemoveBlocklist_TYPEHASH;\\r\\n        for (uint256 i = 0; i < _admins.length; i++) {\\r\\n            administers[_admins[i]] = true;\\r\\n        }\\r\\n        ammFactory = _factories[0];\\r\\n        otcFactory = _factories[1];\\r\\n        p2pFactory = _factories[2];\\r\\n        securityTokenFactory = _factories[3];\\r\\n    }\\r\\n\\r\\n    function validSignature(\\r\\n        SigTypeEnum sigType,\\r\\n        mapping(address => bool) storage _managers,address investor,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) private view returns (bool) {\\r\\n        require(vs.length == rs.length);\\r\\n        require(rs.length == ss.length);\\r\\n        require(vs.length >= requiredCount);\\r\\n        address[] memory addrs = new address[](vs.length);\\r\\n        bytes32 typehash = typehashMap[sigType];\\r\\n        uint nonce = nonces[sigType];\\r\\n        for (uint i = 0; i < vs.length; i++) {\\r\\n            addrs[i] = LManagement.getSigAddress(\\r\\n                DOMAIN_SEPARATOR,typehash,nonce,investor,vs[i],rs[i],ss[i]\\r\\n            );\\r\\n        }\\r\\n        require(_managers.distinctOwners(addrs), \\\"managers invalid\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function validManagementSignature(\\r\\n        SigTypeEnum sigType,\\r\\n        mapping(address => bool) storage _managers,\\r\\n        address[] memory pairs,\\r\\n        address newManagement,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) private view returns (bool) {\\r\\n        require(vs.length == rs.length);\\r\\n        require(rs.length == ss.length);\\r\\n        require(vs.length >= requiredCount);\\r\\n        address[] memory addrs = new address[](vs.length);\\r\\n        bytes32 typehash = typehashMap[sigType];\\r\\n        uint nonce = nonces[sigType];\\r\\n        for (uint i = 0; i < vs.length; i++) {\\r\\n            addrs[i] = LManagement.getSigManagementAddress(\\r\\n                DOMAIN_SEPARATOR,typehash,nonce,pairs,newManagement,vs[i],rs[i],ss[i]\\r\\n            );\\r\\n        }\\r\\n        require(_managers.distinctOwners(addrs), \\\"managers invalid\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addWhitelist(\\r\\n        address investor,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.AddWhitelist,managers,investor,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        if (restrictList[investor]) {\\r\\n            restrictList[investor] = false;\\r\\n        }\\r\\n        whiteList[investor] = true;\\r\\n        nonces[SigTypeEnum.AddWhitelist]++;\\r\\n        emit AddWhitelistEvent(address(this), investor);\\r\\n    }\\r\\n\\r\\n    function removeWhitelist(\\r\\n        address investor,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.RemoveWhitelist,managers,investor,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        whiteList[investor] = false;\\r\\n        nonces[SigTypeEnum.RemoveWhitelist]++;\\r\\n        emit RemoveWhitelistEvent(address(this), investor);\\r\\n    }\\r\\n\\r\\n    function addRestrictlist(\\r\\n        address investor,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.AddRestrictlist,managers,investor,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        if (whiteList[investor]) {\\r\\n            whiteList[investor] = false;\\r\\n        }\\r\\n        restrictList[investor] = true;\\r\\n        nonces[SigTypeEnum.AddRestrictlist]++;\\r\\n        emit AddRestrictlistEvent(address(this), investor);\\r\\n    }\\r\\n\\r\\n    function removeRestrictlist(\\r\\n        address investor,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.RemoveRestrictlist,managers,investor,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        restrictList[investor] = false;\\r\\n        nonces[SigTypeEnum.RemoveRestrictlist]++;\\r\\n        emit RemoveRestrictlistEvent(address(this), investor);\\r\\n    }\\r\\n    function addBlocklist(\\r\\n        address investor,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.AddBlocklist,managers,investor,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        blockList[investor] = true;\\r\\n        nonces[SigTypeEnum.AddBlocklist]++;\\r\\n        emit AddBlocklistEvent(address(this), investor);\\r\\n    }\\r\\n\\r\\n    function removeBlocklist(\\r\\n        address investor,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.RemoveBlocklist,managers,investor,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        blockList[investor] = false;\\r\\n        nonces[SigTypeEnum.RemoveBlocklist]++;\\r\\n        emit RemoveBlocklistEvent(address(this), investor);\\r\\n    }\\r\\n    function addManager(\\r\\n        address manager,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.AddManager,administers,manager,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        managers[manager] = true;\\r\\n        nonces[SigTypeEnum.AddManager]++;\\r\\n        emit AddManagerEvent(address(this), manager);\\r\\n    }\\r\\n\\r\\n    function removeManager(\\r\\n        address manager,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.RemoveManager,administers,manager,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        managers[manager] = false;\\r\\n        nonces[SigTypeEnum.RemoveManager]++;\\r\\n        emit RemoveManagerEvent(address(this), manager);\\r\\n    }\\r\\n\\r\\n    function addAdmin(\\r\\n        address manager,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.AddAdmin,administers,manager,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        administers[manager] = true;\\r\\n        nonces[SigTypeEnum.AddAdmin]++;\\r\\n        emit AddAdminEvent(address(this), manager);\\r\\n    }\\r\\n\\r\\n    function removeAdmin(\\r\\n        address manager,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.RemoveAdmin,administers,manager,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        administers[manager] = false;\\r\\n        nonces[SigTypeEnum.RemoveAdmin]++;\\r\\n        emit RemoveAdminEvent(address(this), manager);\\r\\n    }\\r\\n\\r\\n    function setContractManager(\\r\\n        address manager,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.SetContractManager,administers,manager,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        contractManager = manager;\\r\\n        nonces[SigTypeEnum.SetContractManager]++;\\r\\n        emit SetContractManagerEvent(address(this), manager);\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(\\r\\n        address _platformFeeAddress,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.SetFeeAddress,administers,_platformFeeAddress,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        if(platformFeeAddress != address(0)){\\r\\n            whiteList[platformFeeAddress] = false;\\r\\n        }\\r\\n        platformFeeAddress = _platformFeeAddress;\\r\\n        nonces[SigTypeEnum.SetFeeAddress]++;\\r\\n        whiteList[_platformFeeAddress] = true;\\r\\n        emit SetFeeAddressEvent(address(this), _platformFeeAddress);\\r\\n    }\\r\\n\\r\\n    function addWhiteContract(\\r\\n        address contractAddress,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.AddWhiteContract,administers,contractAddress,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        contractList[contractAddress] = true;\\r\\n        nonces[SigTypeEnum.AddWhiteContract]++;\\r\\n        emit AddWhiteContractEvent(address(this), contractAddress);\\r\\n    }\\r\\n\\r\\n    function removeWhiteContract(\\r\\n        address contractAddress,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.RemoveWhiteContract,administers,contractAddress,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        contractList[contractAddress] = false;\\r\\n        nonces[SigTypeEnum.RemoveWhiteContract]++;\\r\\n        emit RemoveWhiteContractEvent(address(this), contractAddress);\\r\\n    }\\r\\n\\r\\n    function setAmmFactory(\\r\\n        address _ammFactoryAddress,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.SetAmmFactory,administers,_ammFactoryAddress,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        ammFactory = _ammFactoryAddress;\\r\\n        nonces[SigTypeEnum.SetAmmFactory]++;\\r\\n        emit SetAmmFactoryEvent(address(this), _ammFactoryAddress);\\r\\n    }\\r\\n\\r\\n    function setOTCFactory(\\r\\n        address _otcFactoryAddress,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.SetOTCFactory,administers,_otcFactoryAddress,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        otcFactory = _otcFactoryAddress;\\r\\n        nonces[SigTypeEnum.SetOTCFactory]++;\\r\\n        emit SetOTCFactoryEvent(address(this), _otcFactoryAddress);\\r\\n    }\\r\\n\\r\\n    function setP2PFactory(\\r\\n        address _p2pFactoryAddress,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.SetP2PFactory,administers,_p2pFactoryAddress,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        p2pFactory = _p2pFactoryAddress;\\r\\n        nonces[SigTypeEnum.SetP2PFactory]++;\\r\\n        emit SetP2PFactoryEvent(address(this), _p2pFactoryAddress);\\r\\n    }\\r\\n\\r\\n    function setSecurityTokenFactory(\\r\\n        address _securityTokenFactoryAddress,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(validSignature(SigTypeEnum.SetSecurityTokenFactory,administers,_securityTokenFactoryAddress,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        securityTokenFactory = _securityTokenFactoryAddress;\\r\\n        nonces[SigTypeEnum.SetSecurityTokenFactory]++;\\r\\n        emit SetSTFactoryEvent(address(this),_securityTokenFactoryAddress);\\r\\n    }\\r\\n\\r\\n    function createSecurityToken(\\r\\n        string memory stName,\\r\\n        address issuer,\\r\\n        uint amount\\r\\n    ) external onlyContractManager {\\r\\n        address contractAddress = IPairFactory(securityTokenFactory)\\r\\n            .createSecurityToken(stName, issuer, amount, address(this));\\r\\n        contractList[contractAddress] = true;\\r\\n        emit CreateSTEvent(address(this), contractAddress, stName, issuer);\\r\\n    }\\r\\n\\r\\n    function createAMMPair(\\r\\n        string memory _name,\\r\\n        address issuer,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint[] memory params\\r\\n    ) external onlyContractManager {\\r\\n        address contractAddress = IPairFactory(ammFactory).createAMMPair(\\r\\n            _name,issuer,tokenA,tokenB,address(this),params);\\r\\n        contractList[contractAddress] = true;\\r\\n        emit CreateAMMEvent(address(this),contractAddress,tokenA,tokenB,_name);\\r\\n    }\\r\\n\\r\\n    function createOTCPair(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint maxOrderAmount,\\r\\n        uint platformFeeRate\\r\\n    ) external onlyContractManager {\\r\\n        address contractAddress = IPairFactory(otcFactory).createOTCPair(\\r\\n            tokenA,tokenB,address(this),maxOrderAmount,platformFeeRate);\\r\\n        contractList[contractAddress] = true;\\r\\n        emit CreateOTCEvent(address(this), contractAddress, tokenA, tokenB);\\r\\n    }\\r\\n\\r\\n    function createP2PPair(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint maxOrderAmount,\\r\\n        uint platformFeeRate\\r\\n    ) external onlyContractManager {\\r\\n        address contractAddress = IPairFactory(p2pFactory).createP2PPair(\\r\\n            tokenA,tokenB,address(this),maxOrderAmount,platformFeeRate);\\r\\n        contractList[contractAddress] = true;\\r\\n        emit CreateP2PEvent(address(this), contractAddress, tokenA, tokenB);\\r\\n    }\\r\\n\\r\\n    function setManagement(\\r\\n        address[] memory pairs,\\r\\n        address newManagement,\\r\\n        uint8[] memory vs,\\r\\n        bytes32[] memory rs,\\r\\n        bytes32[] memory ss\\r\\n    ) external {\\r\\n        require(\\r\\n            validManagementSignature(SigTypeEnum.SetManagement,administers,pairs,newManagement,vs,rs,ss),\\\"invalid signatures\\\");\\r\\n        for (uint i = 0; i < pairs.length; i++) {\\r\\n            address pair = pairs[i];\\r\\n            IPairFactory(pair).setManagement(newManagement);\\r\\n        }\\r\\n        nonces[SigTypeEnum.SetManagement]++;\\r\\n        emit SetManagementEvent(address(this), pairs, newManagement);\\r\\n    }\\r\\n\\r\\n    function isWhiteInvestor(address investor)external view override returns (bool){\\r\\n        return whiteList[investor];\\r\\n    }\\r\\n\\r\\n    function isRestrictInvestor(address investor)external view override returns (bool){\\r\\n        return restrictList[investor];\\r\\n    }\\r\\n    function isBlockInvestor(address investor)external view override returns (bool){\\r\\n        return blockList[investor];\\r\\n    }\\r\\n\\r\\n    function isContractManager(address manager)external view override returns (bool){\\r\\n        if (manager == contractManager) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhiteContract(address contractAddress) external view override returns (bool){ \\r\\n        return contractList[contractAddress];\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/LManagement.sol\": {\r\n        \"LManagement\": \"0xdadca26bc22c8205a15f8c70c7f1d02498d2bd95\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddAdminEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddBlocklistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddManagerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddRestrictlistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddWhiteContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddWhitelistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"CreateAMMEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"CreateOTCEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"CreateP2PEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"CreateSTEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveAdminEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveBlocklistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveManagerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveRestrictlistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveWhiteContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveWhitelistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ammFactory\",\"type\":\"address\"}],\"name\":\"SetAmmFactoryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetContractManagerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeAddressEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManagement\",\"type\":\"address\"}],\"name\":\"SetManagementEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_otcFactory\",\"type\":\"address\"}],\"name\":\"SetOTCFactoryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_p2pFactory\",\"type\":\"address\"}],\"name\":\"SetP2PFactoryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_securityTokenFactory\",\"type\":\"address\"}],\"name\":\"SetSTFactoryEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AddAdmin_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddBlocklist_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddManager_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddRestrictlist_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddWhiteContract_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AddWhitelist_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveAdmin_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveBlocklist_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveManager_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveRestrictlist_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveWhiteContract_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemoveWhitelist_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetAmmFactory_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetContractManager_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetFeeAddress_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetManagement_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetOTCFactory_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetP2PFactory_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetSecurityTokenFactory_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addRestrictlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addWhiteContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"administers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ammFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"createAMMPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"}],\"name\":\"createOTCPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxOrderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeRate\",\"type\":\"uint256\"}],\"name\":\"createP2PPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"stName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createSecurityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isBlockInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isContractManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isRestrictInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isWhiteContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isWhiteInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Management.SigTypeEnum\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otcFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2pFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeRestrictlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeWhiteContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"restrictList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ammFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setAmmFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setContractManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformFeeAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"newManagement\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otcFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setOTCFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_p2pFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setP2PFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securityTokenFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setSecurityTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Management", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000505cbf743e97abc4e6d41397a8b7c3c0de7490510000000000000000000000005b8db39dbaa4ccfada8b66e136a2d780717c5bdf0000000000000000000000001cb22e0599d6689a29e33ba1a7c95f216dd955ff0000000000000000000000004579e8ad5330ede662202725fc2c7d5b4c80e7db00000000000000000000000000000000000000000000000000000000000000040000000000000000000000008a1ce05249fb67cddec08e10b8173fe07080cc4b0000000000000000000000000e407979a4870e8b266ed8d63b5cab9f71b8ce1700000000000000000000000022703d216c7942455987b23c349cf9a2c402e5d100000000000000000000000097b7d09d5af7af8232079cd04d2519e44192b3da", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}