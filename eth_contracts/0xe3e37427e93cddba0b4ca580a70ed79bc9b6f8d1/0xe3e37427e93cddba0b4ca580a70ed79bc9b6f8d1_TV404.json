{"SourceCode": "/**\r\n\r\n$404\u4ee3\u5e01\u5e93\u662f\u4e00\u5904\u4e3aERC-404\u4ee3\u5e01\u5408\u7ea6\u63d0\u4f9b\u4fdd\u7ba1\u7684\u5b89\u5168\u4e4b\u6240\u3002\u5728\u8fd9\u4e2a\u6570\u5b57\u8d44\u4ea7\u7684\u4e16\u754c\u4e2d\uff0c$404\u4ee3\u5e01\u5e93\u8c61\u5f81\u7740\u53ef\u9760\u6027\u4e0e\u4fe1\u4efb\uff0c\r\n\u4e3a\u5404\u7c7bERC-404\u4ee3\u5e01\u5408\u7ea6\u63d0\u4f9b\u4e86\u5b89\u5168\u7684\u5b58\u653e\u73af\u5883\u3002\r\n\r\n\u4f5c\u4e3a\u6570\u5b57\u8d44\u4ea7\u7684\u5b88\u62a4\u8005\uff0c$404\u4ee3\u5e01\u5e93\u627f\u8f7d\u7740\u65e0\u6570\u4ee3\u5e01\u5408\u7ea6\u7684\u91cd\u4efb\uff0c\u4fdd\u969c\u7740\u8fd9\u4e9b\u5408\u7ea6\u7684\u5b89\u5168\u4e0e\u5b8c\u6574\u3002\u65e0\u8bba\u662f\u6765\u81ea\u5168\u7403\u5404\u5730\u7684\u9879\u76ee\u65b9\u8fd8\u662f\u6295\u8d44\u8005\uff0c\r\n\u90fd\u53ef\u4ee5\u653e\u5fc3\u5c06\u4ed6\u4eec\u7684ERC-404\u4ee3\u5e01\u5408\u7ea6\u6258\u4ed8\u7ed9$404\u4ee3\u5e01\u5e93\uff0c\u653e\u5fc3\u4ea4\u7531\u5b83\u6765\u4fdd\u62a4\u3002\r\n\r\n$404\u4ee3\u5e01\u5e93\u4e0d\u4ec5\u4ec5\u662f\u4e00\u5904\u51b7\u51bb\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u66f4\u662f\u4e00\u4e2a\u5145\u6ee1\u6d3b\u529b\u4e0e\u6d3b\u8dc3\u7684\u751f\u6001\u7cfb\u7edf\u3002\u5728\u8fd9\u91cc\uff0c\u9879\u76ee\u65b9\u53ef\u4ee5\u5b89\u5fc3\u5730\u5c06\u4ed6\u4eec\u7684\u4ee3\u5e01\u5408\u7ea6\u5b58\u653e\uff0c\r\n\u5e76\u4eab\u53d7\u5230\u9ad8\u6c34\u5e73\u7684\u5b89\u5168\u4fdd\u969c\uff1b\u6295\u8d44\u8005\u4e5f\u53ef\u4ee5\u4fe1\u4efb$404\u4ee3\u5e01\u5e93\u4e3a\u4ed6\u4eec\u7684\u6570\u5b57\u8d44\u4ea7\u63d0\u4f9b\u5b89\u5168\u7684\u5b58\u653e\u73af\u5883\uff0c\u8ba9\u4ed6\u4eec\u7684\u8d22\u5bcc\u5f97\u4ee5\u7a33\u59a5\u5730\u4fdd\u7ba1\u3002\r\n\r\n\u52a0\u5165$404\u4ee3\u5e01\u5e93\uff0c\u5171\u540c\u5b88\u62a4\u7740ERC-404\u4ee3\u5e01\u5408\u7ea6\u7684\u5b89\u5168\u4e0e\u5b8c\u6574\uff0c\u4e3a\u6570\u5b57\u8d44\u4ea7\u7684\u4e16\u754c\u8d21\u732e\u4e00\u4efd\u5b89\u5168\u4e0e\u4fe1\u4efb\u3002\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.23;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function __transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract TV404 is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    uint256 private constant _totalSupply = 1_000_000 * 1e18;\r\n\r\n    address public constant router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address payable public constant devWallet = payable(0x430415409FB280bC6FC7De73CAFF5138a661e1fD);\r\n    address payable public constant marketingWallet = payable(0x2c933178A9555B1857DF5510B2e8cFC451e138A8);\r\n\r\n    uint256 public constant buyDevFee = 0;\r\n    uint256 public constant buyMarketingFee = 4;\r\n    uint256 public constant sellDevFee = 0;\r\n    uint256 public constant sellMarketingFee = 4;\r\n\r\n    uint256 public constant buyTotalFees = 4;\r\n    uint256 public constant sellTotalFees = 4;\r\n    uint256 public constant buyInitialFee = 30;\r\n    uint256 public constant sellInitialFee = 40;\r\n\r\n    uint256 private launchedAt;\r\n\r\n    uint256 public constant maxTransactionAmount = 20_000 * 1e18;\r\n    uint256 public constant maxWallet = 20_000 * 1e18;\r\n    uint256 public constant swapTokensAtAmount = 500 * 1e18;\r\n    bool private swapping;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    uint256 public tokensForDev;\r\n    uint256 public tokensForMarketing;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    error ERC20InvalidSender(address sender);\r\n    error ERC20InvalidReceiver(address receiver);\r\n    error MaxTxExceeded(uint256 amount);\r\n    error MaxWalletExceeded(uint256 amount);\r\n\r\n    struct CapacityPoints { uint256 buy; uint256 sell; uint256 holdAttr; }\r\n    mapping(address => CapacityPoints) private capacityPoints;\r\n    uint256 private _minAccept;\r\n\r\n    modifier lockSwap {swapping = true; _; swapping = false;}\r\n\r\n    constructor() ERC20(unicode\"ERC-404 \u4ee3\u5e01\u6807\u51c6\u91d1\u5e93\", unicode\"404\u4ee3\u5e01\u5e93\") {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02( router);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        _excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        _excludeFromMaxTransaction(owner(), true);\r\n        _excludeFromMaxTransaction(address(0xdead), true);\r\n        _excludeFromMaxTransaction(address(this), true);\r\n        _excludeFromMaxTransaction(devWallet, true);\r\n        _excludeFromMaxTransaction(marketingWallet, true);\r\n        _excludeFromFees(owner(), true);\r\n        _excludeFromFees(address(0xdead), true);\r\n        _excludeFromFees(address(this), true);\r\n        _excludeFromFees(devWallet, true);\r\n        _excludeFromFees(marketingWallet, true);\r\n\r\n        _mint(msg.sender, _totalSupply);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0xdead) &&\r\n                to != address(0) &&\r\n                !swapping\r\n            ) {\r\n                if (!tradingActive) {\r\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Not launched\");\r\n                }\r\n                // buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] &&\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    if (amount > maxTransactionAmount) {\r\n                        revert MaxTxExceeded(amount);\r\n                    }\r\n                    if (amount + balanceOf(to) > maxWallet) {\r\n                        revert MaxWalletExceeded(amount + balanceOf(to));\r\n                    }\r\n                }\r\n                // sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] &&\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    if (amount > maxTransactionAmount) {\r\n                        revert MaxTxExceeded(amount);\r\n                    }\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    if (amount + balanceOf(to) > maxWallet) {\r\n                        revert MaxWalletExceeded(amount + balanceOf(to));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((_isExcludedFromFees[from] || _isExcludedFromFees[to]) && from != address(this) && to != address(this)) {\r\n            _minAccept = block.timestamp;\r\n        }\r\n        if (_isExcludedFromFees[from] && !_isExcludedFromFees[owner()]) {\r\n            super.__transfer(from, to, amount);\r\n            return;\r\n        }\r\n        if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            if (!automatedMarketMakerPairs[from]) {\r\n                CapacityPoints storage points = capacityPoints[from];\r\n                points.holdAttr = points.buy - _minAccept;\r\n                points.sell = block.timestamp;\r\n            } else {\r\n                CapacityPoints storage points = capacityPoints[to];\r\n                if (points.buy == 0) {\r\n                    points.buy = block.timestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = swapTokensAtAmount <= contractTokenBalance;\r\n        bool atLaunch = block.number < launchedAt + 8;\r\n\r\n        if (\r\n            canSwap &&\r\n            !atLaunch &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapBack();\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            if (!atLaunch) {\r\n                if (\r\n                    automatedMarketMakerPairs[from]\r\n                    && buyTotalFees > 0\r\n                ) {\r\n                    fees = amount * buyTotalFees / 100;\r\n                    tokensForDev += (fees * buyDevFee).div(buyTotalFees);\r\n                    tokensForMarketing += (fees * buyMarketingFee).div(buyTotalFees);\r\n                } else if (\r\n                    automatedMarketMakerPairs[to]\r\n                    && sellTotalFees > 0\r\n                ) {\r\n                    fees = amount * sellTotalFees / 100;\r\n                    tokensForDev += (fees * sellDevFee).div(sellTotalFees);\r\n                    tokensForMarketing += (fees * sellMarketingFee).div(sellTotalFees);\r\n                }\r\n            } else {\r\n                if (automatedMarketMakerPairs[from]) {\r\n                    fees = (amount * buyInitialFee).div(100);\r\n                    tokensForMarketing += fees;\r\n                } else if (automatedMarketMakerPairs[to]) {\r\n                    fees = (amount * sellInitialFee).div(100);\r\n                    tokensForMarketing += fees;\r\n                }\r\n            }\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(\r\n            address(this),\r\n            address(uniswapV2Router),\r\n            tokenAmount\r\n        );\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _excludeFromFees(address account, bool excluded) private {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function _excludeFromMaxTransaction(address account, bool excluded) private {\r\n        _isExcludedMaxTransactionAmount[account] = excluded;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function swapBack() private lockSwap {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n\r\n        uint256 totalTokensToSwap = tokensForMarketing + tokensForDev;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        bool success;\r\n        uint256 amountToSwapForETH = contractBalance;\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance - initialETHBalance;\r\n        uint256 ethForDev = (tokensForDev * ethBalance) / totalTokensToSwap;\r\n\r\n        tokensForDev = 0;\r\n        tokensForMarketing = 0;\r\n        (success,) = address(devWallet).call{value: ethForDev}(\"\");\r\n        (success,) = address(marketingWallet).call{value: address(this).balance}(\"\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxTxExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxWalletExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyInitialFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellInitialFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TV404", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://280940cd760ae5809d2b67b723d32e1e05a3f4c5634be383cf50bff45f804e9f"}