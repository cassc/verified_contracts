{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/protocol/src/rateModels/MinterRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.23;\\n\\nimport { UIntMath } from \\\"../../lib/common/src/libs/UIntMath.sol\\\";\\n\\nimport { IRateModel } from \\\"../interfaces/IRateModel.sol\\\";\\nimport { IMinterRateModel } from \\\"./interfaces/IMinterRateModel.sol\\\";\\nimport { ITTGRegistrar } from \\\"../interfaces/ITTGRegistrar.sol\\\";\\n\\n/**\\n * @title  Minter Rate Model contract set in TTG (Two Token Governance) Registrar and accessed by Minter Gateway.\\n * @author M^0 Labs\\n */\\ncontract MinterRateModel is IMinterRateModel {\\n    /* ============ Variables ============ */\\n\\n    /// @notice The name of parameter in TTG that defines the base minter rate.\\n    bytes32 internal constant _BASE_MINTER_RATE = \\\"base_minter_rate\\\";\\n\\n    /// @notice The maximum allowed rate in basis points.\\n    uint256 public constant MAX_MINTER_RATE = 40_000; // 400%\\n\\n    /// @inheritdoc IMinterRateModel\\n    address public immutable ttgRegistrar;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Constructs the MinterRateModel contract.\\n     * @param ttgRegistrar_ The address of the TTG Registrar contract.\\n     */\\n    constructor(address ttgRegistrar_) {\\n        if ((ttgRegistrar = ttgRegistrar_) == address(0)) revert ZeroTTGRegistrar();\\n    }\\n\\n    /* ============ View/Pure Functions ============ */\\n\\n    /// @inheritdoc IRateModel\\n    function rate() external view returns (uint256 rate_) {\\n        return UIntMath.min256(uint256(ITTGRegistrar(ttgRegistrar).get(_BASE_MINTER_RATE)), MAX_MINTER_RATE);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/protocol/lib/common/src/libs/UIntMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.23;\\n\\n/**\\n * @title  Library to perform safe math operations on uint types\\n * @author M^0 Labs\\n */\\nlibrary UIntMath {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when a passed value is greater than the maximum value of uint16.\\n    error InvalidUInt16();\\n\\n    /// @notice Emitted when a passed value is greater than the maximum value of uint40.\\n    error InvalidUInt40();\\n\\n    /// @notice Emitted when a passed value is greater than the maximum value of uint48.\\n    error InvalidUInt48();\\n\\n    /// @notice Emitted when a passed value is greater than the maximum value of uint112.\\n    error InvalidUInt112();\\n\\n    /// @notice Emitted when a passed value is greater than the maximum value of uint128.\\n    error InvalidUInt128();\\n\\n    /// @notice Emitted when a passed value is greater than the maximum value of uint240.\\n    error InvalidUInt240();\\n\\n    /* ============ Internal View/Pure Functions ============ */\\n\\n    /**\\n     * @notice Casts a given uint256 value to a uint16,\\n     *         ensuring that it is less than or equal to the maximum uint16 value.\\n     * @param  n The value to check.\\n     * @return The value casted to uint16.\\n     */\\n    function safe16(uint256 n) internal pure returns (uint16) {\\n        if (n > type(uint16).max) revert InvalidUInt16();\\n        return uint16(n);\\n    }\\n\\n    /**\\n     * @notice Casts a given uint256 value to a uint40,\\n     *         ensuring that it is less than or equal to the maximum uint40 value.\\n     * @param  n The value to check.\\n     * @return The value casted to uint40.\\n     */\\n    function safe40(uint256 n) internal pure returns (uint40) {\\n        if (n > type(uint40).max) revert InvalidUInt40();\\n        return uint40(n);\\n    }\\n\\n    /**\\n     * @notice Casts a given uint256 value to a uint48,\\n     *         ensuring that it is less than or equal to the maximum uint48 value.\\n     * @param  n The value to check.\\n     * @return The value casted to uint48.\\n     */\\n    function safe48(uint256 n) internal pure returns (uint48) {\\n        if (n > type(uint48).max) revert InvalidUInt48();\\n        return uint48(n);\\n    }\\n\\n    /**\\n     * @notice Casts a given uint256 value to a uint112,\\n     *         ensuring that it is less than or equal to the maximum uint112 value.\\n     * @param  n The value to check.\\n     * @return The value casted to uint112.\\n     */\\n    function safe112(uint256 n) internal pure returns (uint112) {\\n        if (n > type(uint112).max) revert InvalidUInt112();\\n        return uint112(n);\\n    }\\n\\n    /**\\n     * @notice Casts a given uint256 value to a uint128,\\n     *         ensuring that it is less than or equal to the maximum uint128 value.\\n     * @param  n The value to check.\\n     * @return The value casted to uint128.\\n     */\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        if (n > type(uint128).max) revert InvalidUInt128();\\n        return uint128(n);\\n    }\\n\\n    /**\\n     * @notice Casts a given uint256 value to a uint240,\\n     *         ensuring that it is less than or equal to the maximum uint240 value.\\n     * @param  n The value to check.\\n     * @return The value casted to uint240.\\n     */\\n    function safe240(uint256 n) internal pure returns (uint240) {\\n        if (n > type(uint240).max) revert InvalidUInt240();\\n        return uint240(n);\\n    }\\n\\n    /**\\n     * @notice Limits a given uint256 value to the maximum uint32 value.\\n     * @param  n The value to check.\\n     * @return The value limited to within uint32 bounds.\\n     */\\n    function bound32(uint256 n) internal pure returns (uint32) {\\n        return uint32(min256(n, uint256(type(uint32).max)));\\n    }\\n\\n    /**\\n     * @notice Limits a given uint256 value to the maximum uint112 value.\\n     * @param  n The value to check.\\n     * @return The value limited to within uint112 bounds.\\n     */\\n    function bound112(uint256 n) internal pure returns (uint112) {\\n        return uint112(min256(n, uint256(type(uint112).max)));\\n    }\\n\\n    /**\\n     * @notice Limits a given uint256 value to the maximum uint128 value.\\n     * @param  n The value to check.\\n     * @return The value limited to within uint128 bounds.\\n     */\\n    function bound128(uint256 n) internal pure returns (uint128) {\\n        return uint128(min256(n, uint256(type(uint128).max)));\\n    }\\n\\n    /**\\n     * @notice Limits a given uint256 value to the maximum uint240 value.\\n     * @param  n The value to check.\\n     * @return The value limited to within uint240 bounds.\\n     */\\n    function bound240(uint256 n) internal pure returns (uint240) {\\n        return uint240(min256(n, uint256(type(uint240).max)));\\n    }\\n\\n    /**\\n     * @notice Compares two uint32 values and returns the larger one.\\n     * @param  a_  Value to check.\\n     * @param  b_  Value to check.\\n     * @return The larger value.\\n     */\\n    function max32(uint32 a_, uint32 b_) internal pure returns (uint32) {\\n        return a_ > b_ ? a_ : b_;\\n    }\\n\\n    /**\\n     * @notice Compares two uint40 values and returns the larger one.\\n     * @param  a_  Value to check.\\n     * @param  b_  Value to check.\\n     * @return The larger value.\\n     */\\n    function max40(uint40 a_, uint40 b_) internal pure returns (uint40) {\\n        return a_ > b_ ? a_ : b_;\\n    }\\n\\n    /**\\n     * @notice Compares two uint32 values and returns the lesser one.\\n     * @param  a_  Value to check.\\n     * @param  b_  Value to check.\\n     * @return The lesser value.\\n     */\\n    function min32(uint32 a_, uint32 b_) internal pure returns (uint32) {\\n        return a_ < b_ ? a_ : b_;\\n    }\\n\\n    /**\\n     * @notice Compares two uint40 values and returns the lesser one.\\n     * @param  a_  Value to check.\\n     * @param  b_  Value to check.\\n     * @return The lesser value.\\n     */\\n    function min40(uint40 a_, uint40 b_) internal pure returns (uint40) {\\n        return a_ < b_ ? a_ : b_;\\n    }\\n\\n    /**\\n     * @notice Compares two uint240 values and returns the lesser one.\\n     * @param  a_  Value to check.\\n     * @param  b_  Value to check.\\n     * @return The lesser value.\\n     */\\n    function min240(uint240 a_, uint240 b_) internal pure returns (uint240) {\\n        return a_ < b_ ? a_ : b_;\\n    }\\n\\n    /**\\n     * @notice Compares two uint112 values and returns the lesser one.\\n     * @param  a_  Value to check.\\n     * @param  b_  Value to check.\\n     * @return The lesser value.\\n     */\\n    function min112(uint112 a_, uint112 b_) internal pure returns (uint112) {\\n        return a_ < b_ ? a_ : b_;\\n    }\\n\\n    /**\\n     * @notice Compares two uint256 values and returns the lesser one.\\n     * @param  a_  Value to check.\\n     * @param  b_  Value to check.\\n     * @return The lesser value.\\n     */\\n    function min256(uint256 a_, uint256 b_) internal pure returns (uint256) {\\n        return a_ < b_ ? a_ : b_;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/protocol/src/interfaces/IRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.23;\\n\\n/**\\n * @title  Rate Model Interface.\\n * @author M^0 Labs\\n */\\ninterface IRateModel {\\n    /**\\n     * @notice Returns the current yearly rate in BPS.\\n     *         This value does not account for the compounding interest.\\n     */\\n    function rate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/protocol/src/rateModels/interfaces/IMinterRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.23;\\n\\nimport { IRateModel } from \\\"../../interfaces/IRateModel.sol\\\";\\n\\n/**\\n * @title Minter Rate Model Interface.\\n * @author M^0 Labs\\n */\\ninterface IMinterRateModel is IRateModel {\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when TTG Registrar contract address is zero.\\n    error ZeroTTGRegistrar();\\n\\n    /* ============ View/Pure Functions ============ */\\n\\n    /// @notice The TTG Registrar contract address.\\n    function ttgRegistrar() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/protocol/src/interfaces/ITTGRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.23;\\n\\n/**\\n * @title  TTG (Two Token Governance) Registrar interface.\\n * @author M^0 Labs\\n */\\ninterface ITTGRegistrar {\\n    /**\\n     * @notice Key value pair getter.\\n     * @param  key The key to get the value of.\\n     * @return value The value of the key.\\n     */\\n    function get(bytes32 key) external view returns (bytes32 value);\\n\\n    /**\\n     * @notice Checks if the list contains the account.\\n     * @param  list The list to check.\\n     * @param  account The account to check.\\n     * @return True if the list contains the account, false otherwise.\\n     */\\n    function listContains(bytes32 list, address account) external view returns (bool);\\n\\n    /// @notice Returns the vault contract address.\\n    function vault() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"common/=lib/protocol/lib/common/src/\",\r\n      \"contract-test-utils/=lib/ttg/lib/erc20-helper/lib/contract-test-utils/contracts/\",\r\n      \"ds-test/=lib/protocol/lib/solmate/lib/ds-test/src/\",\r\n      \"erc20-helper/=lib/ttg/lib/erc20-helper/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"protocol/=lib/protocol/\",\r\n      \"solmate/=lib/protocol/lib/solmate/src/\",\r\n      \"ttg/=lib/ttg/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ttgRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ZeroTTGRegistrar\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MAX_MINTER_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttgRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MinterRateModel", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000119fbeedd4f4f4298fb59b720d5654442b81ae2c", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}