{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/FeeData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/Constants.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\nimport {MathUtils} from \\\"../libraries/MathUtils.sol\\\";\\n\\nabstract contract FeeData is Initializable, OwnableUpgradeable {\\n\\n    event FeeNumeratorUpdate(uint256 feeNumerator);\\n    event FixedFeeUpdate(uint256 fixedFee);\\n    event ClearFeeTokens();\\n    event SetFeeToken(address feeToken);\\n    event MaxHopsUpdate(uint256 maxHops);\\n    event MaxSwapsUpdate(uint256 maxSwaps);\\n\\n    uint256 private constant MAX_FEE_NUMERATOR = 200;\\n    uint256 private constant MAX_FIXED_FEE = 0.005 ether;\\n\\n    uint256 internal _fixedFee;\\n    uint256 internal _feeNumerator;\\n    uint256 internal _feeDenominator;\\n    uint256 internal _maxHops;\\n    uint256 internal _maxSwaps;\\n\\n    mapping(address => uint256) public feeTokenMap;\\n    address[] public feeTokenKeys;\\n\\n    function initializeFeeData(uint256 fixedFee, address[] calldata feeTokenAddresses) public onlyInitializing {\\n        __Ownable_init();\\n        _fixedFee = fixedFee;\\n        _feeNumerator = 20;\\n        _feeDenominator = 10000;\\n        _maxHops = 10;\\n        _maxSwaps = 10;\\n        _initializeFeeTokens(feeTokenAddresses);\\n    }\\n\\n    function setFeeNumerator(uint256 feeNumerator) external onlyOwner {\\n        if (feeNumerator > MAX_FEE_NUMERATOR) revert Errors.InvalidFeeNumerator();\\n        _feeNumerator = feeNumerator;\\n        emit FeeNumeratorUpdate(_feeNumerator);\\n    }\\n\\n    function setMaxHops(uint256 maxHops) external onlyOwner {\\n        _maxHops = maxHops;\\n        emit MaxHopsUpdate(maxHops);\\n    }\\n\\n    function setMaxSwaps(uint256 maxSwaps) external onlyOwner {\\n        _maxSwaps = maxSwaps;\\n        emit MaxSwapsUpdate(maxSwaps);\\n    }\\n\\n    function setFixedFee(uint256 fixedFee) external onlyOwner {\\n        if (fixedFee > MAX_FIXED_FEE) revert Errors.InvalidFixedFee();\\n        _fixedFee = fixedFee;\\n        emit FixedFeeUpdate(_fixedFee);\\n    }\\n\\n    function setFeeToken(address feeTokenAddress) public onlyOwner {\\n        _setFeeToken(feeTokenAddress);\\n        emit SetFeeToken(feeTokenAddress);\\n    }\\n\\n    function setFeeTokens(address[] calldata feeTokenAddresses) public onlyOwner {\\n        setFeeToken(Constants.NATIVE_ADDRESS);\\n        uint256 length = feeTokenAddresses.length;\\n        for (uint256 i; i < length; ++i) {\\n            setFeeToken(feeTokenAddresses[i]);\\n        }\\n    }\\n\\n    function clearFeeTokens() public onlyOwner {\\n        uint256 length = feeTokenKeys.length;\\n        for (uint256 i; i < length; ++i) {\\n            delete feeTokenMap[feeTokenKeys[i]];\\n        }\\n        while (feeTokenKeys.length != 0) {\\n            feeTokenKeys.pop();\\n        }\\n        emit ClearFeeTokens();\\n    }\\n\\n    function _initializeFeeTokens(address[] calldata feeTokenAddresses) internal {\\n        _setFeeToken(Constants.NATIVE_ADDRESS);\\n        uint256 length = feeTokenAddresses.length;\\n        for (uint256 i; i < length; ++i) {\\n            _setFeeToken(feeTokenAddresses[i]);\\n        }\\n    }\\n\\n    function _setFeeToken(address feeTokenAddress) internal {\\n        feeTokenMap[feeTokenAddress] = 1;\\n        feeTokenKeys.push(feeTokenAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../libraries/Constants.sol\\\";\\nimport { TransferUtils } from \\\"../libraries/TransferUtils.sol\\\";\\nimport { IRewardHandler } from \\\"../interfaces/IRewardHandler.sol\\\";\\n\\nabstract contract TransferHelper is Initializable, OwnableUpgradeable {\\n\\n    event RewardHandlerUpdate(address rewardHandler);\\n    event RewardsActiveUpdate(bool rewardsActiveFlag);\\n\\n    IRewardHandler internal rewardHandler;\\n    address internal _rewardAddress;\\n    uint256 public rewardsActive;\\n\\n    function initializeTransferData(address rewardAddress) public onlyInitializing {\\n        __Ownable_init();\\n        if (rewardAddress == address(0)) revert Errors.InvalidAddress();\\n        _rewardAddress = rewardAddress;\\n        rewardHandler = IRewardHandler(rewardAddress);\\n        rewardsActive = 2;\\n    }\\n\\n    function _transferClaim(address maker, address taker, address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint256 fee, uint8 feeType) internal {\\n        if (tokenB == Constants.NATIVE_ADDRESS) {\\n            TransferUtils._transferETH(_rewardAddress, fee);\\n            TransferUtils._transferETH(maker, amountB);\\n            TransferUtils._transferERC20(tokenA, taker, amountA);\\n            return;\\n        }\\n        else if (tokenA == Constants.NATIVE_ADDRESS) {\\n            uint256 payment = amountA - fee;\\n            TransferUtils._transferETH(_rewardAddress, fee);\\n            TransferUtils._transferETH(taker, payment);\\n            TransferUtils._transferFromERC20(tokenB, taker, maker, amountB);\\n            return;\\n        }\\n        else if (feeType == Constants.FEE_TYPE_TOKEN_B) {\\n            TransferUtils._transferFromERC20(tokenB, taker, _rewardAddress, fee);\\n            TransferUtils._transferFromERC20(tokenB, taker, maker, amountB);\\n            TransferUtils._transferERC20(tokenA, taker, amountA);\\n            _logTokenFee(tokenB, fee);\\n            return;\\n        }\\n        else if (feeType == Constants.FEE_TYPE_TOKEN_A) {\\n            uint256 payment = amountA - fee;\\n            TransferUtils._transferERC20(tokenA, _rewardAddress, fee);\\n            TransferUtils._transferERC20(tokenA, taker, payment);\\n            TransferUtils._transferFromERC20(tokenB, taker, maker, amountB);\\n            _logTokenFee(tokenA, fee);\\n            return;\\n        }\\n        else if (feeType == Constants.FEE_TYPE_ETH_FIXED) {\\n            TransferUtils._transferETH(_rewardAddress, fee);\\n            TransferUtils._transferERC20(tokenA, taker, amountA);\\n            TransferUtils._transferFromERC20(tokenB, taker, maker, amountB);\\n            return;\\n        }\\n        revert Errors.UnknownFeeType(feeType);\\n    }\\n\\n    function _transferFee(address taker, address feeToken, uint256 fee, uint8 feeType) internal {\\n        if (feeType == Constants.FEE_TYPE_ETH_FIXED || feeToken == Constants.NATIVE_ADDRESS) {\\n            TransferUtils._transferETH(_rewardAddress, fee);\\n            return;\\n        }\\n        else if (feeType == Constants.FEE_TYPE_TOKEN_B) {\\n            TransferUtils._transferFromERC20(feeToken, taker, _rewardAddress, fee);\\n            _logTokenFee(feeToken, fee);\\n            return;\\n        }\\n        else if (feeType == Constants.FEE_TYPE_TOKEN_A) {\\n            TransferUtils._transferERC20(feeToken, _rewardAddress, fee);\\n            _logTokenFee(feeToken, fee);\\n            return;\\n        }\\n        revert Errors.UnknownFeeType(feeType);\\n    }\\n\\n    function setRewardHandler(address rewardAddress) external onlyOwner {\\n        if (rewardAddress == address(0)) revert Errors.InvalidAddress();\\n        _rewardAddress = rewardAddress;\\n        rewardHandler = IRewardHandler(rewardAddress);\\n        emit RewardHandlerUpdate(rewardAddress);\\n    }\\n\\n    function setRewardsActive(bool rewardsActiveFlag) external onlyOwner {\\n        rewardsActive = rewardsActiveFlag ? 1 : 2;\\n        emit RewardsActiveUpdate(rewardsActiveFlag);\\n    }\\n\\n    function _logTokenFee(address token, uint256 fee) internal {\\n        if (rewardsActive == 2) return;\\n        if (!rewardHandler.logTokenFee(token, fee)) revert Errors.RewardHandlerLogFailed();\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\ninterface IRewardHandler {\\n\\n    function logTokenFee(address token, uint256 fee) external returns (bool);\\n\\n    function logNativeFee(uint256 fee) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISwapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"../libraries/SwapUtils.sol\\\";\\n\\ninterface ISwapExchange {\\n\\n    event SwapCreated (uint256 indexed swapId, address indexed maker, address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint8 feeType, uint32 start, uint32 expiration, bool partialSwap);\\n    event SwapClaimed (uint256 indexed swapId, address indexed claimant, uint256 amountA, uint256 amountB, uint256 fee, uint8 feeType);\\n    event SwapPartialClaimed (uint256 indexed swapId, address indexed claimant, uint256 amountA, uint256 amountB, uint256 fee, uint8 feeType);\\n    event SwapMultiClaimed (address indexed taker, address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint256 fee, uint8 feeType);\\n    event SwapCancelled (uint256 indexed swapId);\\n    event SwapUpdated (uint256 indexed swapId, uint256 amountA, uint256 amountB, uint32 expiration, bool partialSwap);\\n\\n    function getSwap(uint256 swapId) external view returns (SwapUtils.Swap memory);\\n\\n    function getMaxHops() external view returns (uint256);\\n\\n    function getMaxSwaps() external view returns (uint256);\\n\\n    function getFixedFee() external view returns (uint256);\\n\\n    function getFeeValues() external view returns (uint256[2] memory feeValues);\\n\\n    function getFeeTokens() external view returns (address[] memory);\\n\\n    function createSwap(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint32 duration,\\n        bool partialSwap) external payable returns (bool);\\n\\n    function updateSwap(uint256 swapId, uint256 amountA, uint256 amountB, uint32 duration, bool partialSwap) external returns (bool);\\n\\n    function calculateFeeType(address tokenA, address tokenB) external view returns (uint8 feeType, address feeToken);\\n\\n    function calculateSwapA(uint256 swapId, uint256 netAmountA) external view returns (SwapUtils.SwapCalculation memory);\\n\\n    function calculateSwapNetB(uint256 swapId, uint256 netAmountB) external view returns (SwapUtils.SwapCalculation memory);\\n\\n    function calculateSwapGrossB(uint256 swapId, uint256 grossAmountB) external view returns (SwapUtils.SwapCalculation memory);\\n\\n    function calculateCompleteSwap(uint256 swapId) external view returns (SwapUtils.SwapCalculation memory);\\n\\n    function calculateSwaps(SwapUtils.ClaimInput[] calldata claimInputs) external view returns (SwapUtils.SwapCalculation[] memory, uint256);\\n\\n    function calculateMultiSwap(SwapUtils.MultiClaimInput calldata multiClaimInput) external view returns (SwapUtils.SwapCalculation memory);\\n\\n    function claimSwap(uint256 swapId, uint256 amountA, uint256 amountB) external payable returns (bool);\\n\\n    function claimSwaps(SwapUtils.Claim[] calldata claims) external payable returns (bool);\\n\\n    function claimMultiSwap(SwapUtils.MultiClaim calldata multiClaim) external payable returns (bool);\\n\\n    function cancelSwap(uint256 swapId) external payable returns (bool);\\n\\n    function expireSwap(uint256 swapId) external;\\n\\n    function recoverSwaps(address token, uint256[] calldata swapIds, address recoveryAddress) external payable;\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nlibrary Constants {\\n    uint8 public constant FEE_TYPE_ETH_FIXED = 0;\\n    uint8 public constant FEE_TYPE_TOKEN_A = 1;\\n    uint8 public constant FEE_TYPE_TOKEN_B = 2;\\n    uint32 public constant TWO_YEARS_SECONDS = 2 * 365 * 24 * 60 * 60; // 2 YEARS\\n    address public constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nlibrary Errors {\\n    error UnauthorizedAccess();\\n    error UnknownFeeType(uint8 feeType);\\n    error NotPartialSwap();\\n    error ZeroAmount();\\n    error ExpiredSwap();\\n    error ClaimOwnSwap();\\n    error NotAbandonedSwap();\\n    error InvalidTokenAddress();\\n    error InvalidTokenBalance();\\n    error NativeTransferFailed();\\n    error InvalidAddress();\\n    error InvalidMultiClaimSwapCount(uint256 maxSwaps, uint256 swapCount);\\n    error InvalidSwapCount(uint256 maxSwaps, uint256 swapCount);\\n    error InvalidArguments();\\n    error NonMatchingToken();\\n    error NonMatchingAmount();\\n    error IncorrectNativeAmountSent(uint256 expectedAmount, uint256 actualAmount);\\n    error InvalidClaimAmounts();\\n    error RewardHandlerLogFailed();\\n    error InvalidFeeNumerator();\\n    error InvalidFixedFee();\\n}\"\r\n    },\r\n    \"contracts/libraries/FeeUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"./Constants.sol\\\";\\nimport { MathUtils } from \\\"./MathUtils.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary FeeUtils {\\n\\n    function _calculateFee(uint256 amountA, uint256 amountB, uint8 feeType, uint256 feeValue, uint256 feeDenominator, uint256 fixedFee)\\n    internal pure returns (uint256) {\\n        return _calculateFees(amountA, amountB, feeType, 1, feeValue, feeDenominator, fixedFee);\\n    }\\n\\n    function _calculateFees(uint256 amountA, uint256 amountB, uint8 feeType,  uint256 hops, uint256 feeValue, uint256 feeDenominator, uint256 fixedFee)\\n    internal pure returns (uint256) {\\n        if (feeType == Constants.FEE_TYPE_TOKEN_B) {\\n            return MathUtils._mulDiv(amountB, feeValue, feeDenominator) * hops;\\n        }\\n        if (feeType == Constants.FEE_TYPE_TOKEN_A) {\\n            return MathUtils._mulDiv(amountA, feeValue, feeDenominator) * hops;\\n        }\\n        if (feeType == Constants.FEE_TYPE_ETH_FIXED) {\\n            return fixedFee * hops;\\n        }\\n        revert Errors.UnknownFeeType(feeType);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nlibrary MathUtils {\\n\\n    function _mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256) {\\n        if (b == denominator) return a;\\n        uint256 mulValue = a * b;\\n        return mulValue / denominator;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/SwapUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport { FeeUtils } from \\\"./FeeUtils.sol\\\";\\nimport { MathUtils } from \\\"./MathUtils.sol\\\";\\n\\nlibrary SwapUtils {\\n\\n    struct Swap {\\n        uint256 amountA;\\n        uint256 amountB;\\n        bool isPartial;\\n        uint8 feeType;\\n        uint32 start;\\n        uint32 expiration;\\n        address maker;\\n        address tokenA;\\n        address tokenB;\\n    }\\n\\n    struct Claim {\\n        uint256 swapId;\\n        uint256 amountA;\\n        uint256 amountB;\\n    }\\n\\n    struct MultiClaim {\\n        uint256 amountA;\\n        uint256 amountB;\\n        address tokenA;\\n        address tokenB;\\n        uint256[] swapIds;\\n    }\\n\\n    struct ClaimInput {\\n        uint256 swapId;\\n        uint256 amountB;\\n    }\\n\\n    struct MultiClaimInput {\\n        uint256 amountB;\\n        address tokenA;\\n        address tokenB;\\n        uint256[] swapIds;\\n    }\\n\\n    struct SwapCalculation {\\n        uint256 amountA;\\n        uint256 amountB;\\n        uint256 fee;\\n        uint256 nativeSendAmount;\\n        uint8 feeType;\\n        bool isTokenBNative;\\n        bool isComplete;\\n    }\\n\\n    function _checkSwap(address tokenA, uint256 amountA, address tokenB, uint256 amountB) internal pure {\\n        _checkAddresses(tokenA, tokenB);\\n        if (amountA <= 0) revert Errors.ZeroAmount();\\n        if (amountB <= 0) revert Errors.ZeroAmount();\\n    }\\n\\n    function _checkMultiClaim(MultiClaim memory multiClaim, uint256 maxHops) internal pure {\\n        _checkAddresses(multiClaim.tokenA, multiClaim.tokenB);\\n        if (multiClaim.amountA <= 0) revert Errors.ZeroAmount();\\n        if (multiClaim.amountB <= 0) revert Errors.ZeroAmount();\\n        uint256 length = multiClaim.swapIds.length;\\n        if (length == 0 || length > maxHops) revert Errors.InvalidMultiClaimSwapCount(maxHops, length);\\n    }\\n\\n    function _checkAddresses(address tokenA, address tokenB) internal pure {\\n        if (tokenA == address(0)) revert Errors.InvalidAddress();\\n        if (tokenB == address(0)) revert Errors.InvalidAddress();\\n        if (tokenA == tokenB) revert Errors.InvalidAddress();\\n    }\\n\\n    function _checkIsValid(Swap memory swap, address sender, uint256 timestamp) internal pure {\\n        if (swap.maker == sender) revert Errors.ClaimOwnSwap();\\n        if (swap.expiration < timestamp) revert Errors.ExpiredSwap();\\n        if (swap.amountA <= 0) revert Errors.ZeroAmount();\\n        if (swap.amountB <= 0) revert Errors.ZeroAmount();\\n    }\\n\\n    function _checkIsValueSent(uint256 sentAmount, address token, uint256 amount, uint256 fee, uint8 feeType) internal pure {\\n        if (fee == 0 || amount == 0) revert Errors.ZeroAmount();\\n        if (feeType == Constants.FEE_TYPE_ETH_FIXED) {\\n            if (fee != sentAmount) revert Errors.IncorrectNativeAmountSent(fee, sentAmount);\\n        }\\n        else if (token == Constants.NATIVE_ADDRESS) {\\n            uint256 expectedValue;\\n            unchecked { expectedValue = amount + fee; }\\n            if (expectedValue != sentAmount) revert Errors.IncorrectNativeAmountSent(expectedValue, sentAmount);\\n        }\\n        else if (sentAmount != 0) {\\n            revert Errors.IncorrectNativeAmountSent(0, sentAmount);\\n        }\\n    }\\n\\n    function _calculateSwapA(SwapUtils.Swap memory swap, uint256 amountA, uint256 feeValue, uint256 feeDenominator, uint256 fixedFee)\\n    internal pure returns (SwapCalculation memory) {\\n        if (amountA == 0) revert Errors.ZeroAmount();\\n        if (amountA >= swap.amountA) {\\n            return _calculateCompleteSwap(swap, feeValue, feeDenominator, fixedFee);\\n        }\\n        uint256 netAmountB = MathUtils._mulDiv(swap.amountB, amountA, swap.amountA);\\n        return _calculateSwapNetB(swap, netAmountB, feeValue, feeDenominator, fixedFee);\\n    }\\n\\n    function _calculateSwapGrossB(SwapUtils.Swap memory swap, uint256 grossAmountB, uint256 feeValue, uint256 feeDenominator, uint256 fixedFee)\\n    internal pure returns (SwapCalculation memory) {\\n        if (grossAmountB == 0) revert Errors.ZeroAmount();\\n        uint256 netAmountB;\\n        if (swap.feeType == Constants.FEE_TYPE_TOKEN_B) {\\n            netAmountB = MathUtils._mulDiv(grossAmountB, feeDenominator, (feeDenominator + feeValue));\\n        }\\n        else {\\n            netAmountB = grossAmountB;\\n        }\\n        return _calculateSwapNetB(swap, netAmountB, feeValue, feeDenominator, fixedFee);\\n    }\\n\\n    function _calculateSwapNetB(SwapUtils.Swap memory swap, uint256 netAmountB, uint256 feeValue, uint256 feeDenominator, uint256 fixedFee)\\n    internal pure returns (SwapCalculation memory) {\\n        if (netAmountB == 0) revert Errors.ZeroAmount();\\n        if (netAmountB >= swap.amountB) {\\n            return _calculateCompleteSwap(swap, feeValue, feeDenominator, fixedFee);\\n        }\\n        uint256 netAmountA = MathUtils._mulDiv(swap.amountA, netAmountB, swap.amountB);\\n        return _calculate(swap, netAmountA, netAmountB, false, feeValue, feeDenominator, fixedFee);\\n    }\\n\\n    function _calculateCompleteSwap(SwapUtils.Swap memory swap, uint256 feeValue, uint256 feeDenominator, uint256 fixedFee)\\n    internal pure returns (SwapCalculation memory) {\\n        return _calculate(swap, swap.amountA, swap.amountB, true, feeValue, feeDenominator, fixedFee);\\n    }\\n\\n    function _calculate(SwapUtils.Swap memory swap, uint256 amountA, uint256 amountB, bool complete, uint256 feeValue, uint256 feeDenominator, uint256 fixedFee)\\n    internal pure returns (SwapCalculation memory) {\\n        SwapCalculation memory calculation;\\n        calculation.amountA = amountA;\\n        calculation.amountB = amountB;\\n        calculation.fee = FeeUtils._calculateFee(calculation.amountA, calculation.amountB, swap.feeType, feeValue, feeDenominator, fixedFee);\\n        calculation.feeType = swap.feeType;\\n        calculation.isTokenBNative = swap.tokenB == Constants.NATIVE_ADDRESS;\\n        calculation.isComplete = complete;\\n        calculation.nativeSendAmount = _calculateNativeSendAmount(calculation.amountB, calculation.fee, calculation.feeType, calculation.isTokenBNative);\\n        return calculation;\\n    }\\n\\n    function _calculateNativeSendAmount(uint256 amountB, uint256 fee, uint8 feeType, bool isTokenBNative) internal pure returns (uint256) {\\n        if (isTokenBNative) return amountB + fee;\\n        if (feeType == Constants.FEE_TYPE_ETH_FIXED) return fee;\\n        return 0;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nerror ERC20TransferFailed();\\nerror ERC20FromTransferFailed();\\nerror NativeTransferFailed();\\nerror InvalidERC20Address();\\n\\nlibrary TransferUtils {\\n    using SafeERC20 for IERC20;\\n\\n    function _transfer(address token, address to, uint256 amount) internal {\\n        if (token == Constants.NATIVE_ADDRESS) {\\n            _transferETH(to, amount);\\n        }\\n        else {\\n            _transferERC20(token, to, amount);\\n        }\\n    }\\n\\n    function _transferFrom(address token, address from, address to, uint256 amount) internal {\\n        if (token == Constants.NATIVE_ADDRESS) {\\n            _transferETH(to, amount);\\n        }\\n        else {\\n            _transferFromERC20(token, from, to, amount);\\n        }\\n    }\\n\\n    function _transferERC20(address token, address to, uint256 amount) internal {\\n        IERC20 erc20 = IERC20(token);\\n        if (erc20 == IERC20(address(0))) revert Errors.InvalidTokenAddress();\\n        uint256 initialBalance = erc20.balanceOf(to);\\n        erc20.safeTransfer(to, amount);\\n        uint256 balance = erc20.balanceOf(to);\\n        if (balance < (initialBalance + amount)) revert Errors.InvalidTokenBalance();\\n    }\\n\\n    function _transferFromERC20(address token, address from, address to, uint256 amount) internal {\\n        IERC20 erc20 = IERC20(token);\\n        if (erc20 == IERC20(address(0))) revert Errors.InvalidTokenAddress();\\n        uint256 initialBalance = erc20.balanceOf(to);\\n        erc20.safeTransferFrom(from, to, amount);\\n        uint256 balance = erc20.balanceOf(to);\\n        if (balance < (initialBalance + amount)) revert Errors.InvalidTokenBalance();\\n    }\\n\\n    function _transferETH(address to, uint256 amount) internal {\\n        (bool flag, ) = to.call{value: amount}(\\\"\\\");\\n        if (!flag) revert Errors.NativeTransferFailed();\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/SwapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { ISwapExchange } from \\\"./interfaces/ISwapExchange.sol\\\";\\nimport { SwapUtils } from \\\"./libraries/SwapUtils.sol\\\";\\nimport { MathUtils } from \\\"./libraries/MathUtils.sol\\\";\\nimport { FeeUtils } from \\\"./libraries/FeeUtils.sol\\\";\\nimport \\\"./libraries/Constants.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport { TransferUtils } from \\\"./libraries/TransferUtils.sol\\\";\\nimport { TransferHelper } from \\\"./helpers/TransferHelper.sol\\\";\\nimport { FeeData } from \\\"./helpers/FeeData.sol\\\";\\n\\ncontract SwapExchange is ISwapExchange, TransferHelper, FeeData, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n\\n    mapping(uint256 => SwapUtils.Swap) public swaps;\\n    uint256 public recordCount;\\n\\n    function initialize(address rewardAddress, uint256 fixedFee, address[] calldata feeTokenAddresses) public initializer {\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        TransferHelper.initializeTransferData(rewardAddress);\\n        FeeData.initializeFeeData(fixedFee, feeTokenAddresses);\\n        recordCount = 1;\\n    }\\n\\n    //Getter functions\\n    /// @notice Get swap data for an identifier\\n    /// @param swapId - the specific swap identifier\\n    /// @return Swap struct\\n    function getSwap(uint256 swapId) external view returns (SwapUtils.Swap memory) {\\n        return swaps[swapId];\\n    }\\n\\n    /// @notice The maximum number of swaps in sequence that can be claimed using the claimMultiSwap function.\\n    /// @return the maximum hops value\\n    function getMaxHops() external view returns (uint256) {\\n        return _maxHops;\\n    }\\n\\n    /// @notice The maximum number of individual swaps that can be claimed using the claimSwaps function.\\n    /// @return the maximum swap value\\n    function getMaxSwaps() external view returns (uint256) {\\n        return _maxSwaps;\\n    }\\n\\n    /// @notice The fixed fee amount for swaps where neither token is a fee currency (Fee Type 0)\\n    /// @return the fixed fee in native currency (ETH for example)\\n    function getFixedFee() external view returns (uint256) {\\n        return _fixedFee;\\n    }\\n\\n    /// @notice The fee values used to calculate the fee as a fraction of an amount, e.g. amount * feeNumerator / feeDenominator\\n    /// @return feeValues\\n    function getFeeValues() external view returns (uint256[2] memory feeValues) {\\n        return [_feeNumerator, _feeDenominator];\\n    }\\n\\n    /// @notice An array of all the fee currency addresses used to determine the fee type for a swap.\\n    /// @return array of addresses\\n    function getFeeTokens() external view returns (address[] memory) {\\n        return feeTokenKeys;\\n    }\\n\\n    // Calculation functions\\n    /**\\n    * @notice Util to calculate the fee type based on the two swap tokens. There are 3 distinct fee types:\\n    * Fee Type 2: Token B is a fee currency, the fee is added to the amount the Taker must provide.\\n    * Fee Type 1: ONLY Token A is a fee currency, the fee is deducted from the Token A amount received by the Taker\\n    * Fee Type 0: Neither token is a fee currency, the fee is a fixed native currency amount sent by the Taker e.g. ETH\\n    * The fee token is then either Token B, Token A or the address representing the native currency.\\n    * @param tokenA - the token A address\\n    * @param tokenB - the token B address\\n    * @return feeType\\n    * @return feeToken\\n    */\\n    function calculateFeeType(address tokenA, address tokenB) external view returns (uint8 feeType, address feeToken) {\\n        return _calculateFeeType(tokenA, tokenB);\\n    }\\n\\n    /// @notice Calculate the swap values for a particular A amount (includes fee if Fee Type 1)\\n    /// @param swapId - the swap identifier\\n    /// @param amountA - the amount of A\\n    /// @return a SwapCalculation struct.\\n    function calculateSwapA(uint256 swapId, uint256 amountA) external view returns (SwapUtils.SwapCalculation memory) {\\n        SwapUtils.Swap memory swap = swaps[swapId];\\n        return SwapUtils._calculateSwapA(swap, amountA, _feeNumerator, _feeDenominator, _fixedFee);\\n    }\\n\\n    /// @notice Calculate the swap values for a particular given net B amount, e.g. not including the fee in the amount\\n    /// @param swapId - the swap identifier\\n    /// @param netAmountB - the net amount of B\\n    /// @return a SwapCalculation struct.\\n    function calculateSwapNetB(uint256 swapId, uint256 netAmountB) external view returns (SwapUtils.SwapCalculation memory) {\\n        SwapUtils.Swap memory swap = swaps[swapId];\\n        return SwapUtils._calculateSwapNetB(swap, netAmountB, _feeNumerator, _feeDenominator, _fixedFee);\\n    }\\n\\n    /// @notice Calculate the swap values for a particular given gross B amount, e.g. the fee is included in the amount\\n    /// @param swapId - the swap identifier\\n    /// @param grossAmountB - the gross amount of B\\n    /// @return a SwapCalculation struct.\\n    function calculateSwapGrossB(uint256 swapId, uint256 grossAmountB) external view returns (SwapUtils.SwapCalculation memory) {\\n        SwapUtils.Swap memory swap = swaps[swapId];\\n        return SwapUtils._calculateSwapGrossB(swap, grossAmountB, _feeNumerator, _feeDenominator, _fixedFee);\\n    }\\n\\n    /// @notice Calculate the swap values for a particular complete swap, e.g. taking all the available amountA for the required amountB\\n    /// @param swapId - the swap identifier\\n    /// @return a SwapCalculation struct.\\n    function calculateCompleteSwap(uint256 swapId) external view returns (SwapUtils.SwapCalculation memory) {\\n        SwapUtils.Swap memory swap = swaps[swapId];\\n        return SwapUtils._calculateCompleteSwap(swap, _feeNumerator, _feeDenominator, _fixedFee);\\n    }\\n\\n    /// @notice Calculate the swap values for an array of ClaimInput structs. Each input is used for a calculation for a swap based on a net B amount.\\n    /// @param claimInputs - ClaimInput struct array\\n    /// @return a SwapCalculation array\\n    /// @return a value representing the total amount of native currency required to be sent (can be 0).\\n    function calculateSwaps(SwapUtils.ClaimInput[] calldata claimInputs) external view returns (SwapUtils.SwapCalculation[] memory, uint256) {\\n        uint256 length = claimInputs.length;\\n        if (length == 0 || length > _maxSwaps) revert Errors.InvalidSwapCount(_maxSwaps, length);\\n        SwapUtils.SwapCalculation[] memory array = new SwapUtils.SwapCalculation[](length);\\n        SwapUtils.ClaimInput calldata claimInput;\\n        uint256 totalNativeSendAmount;\\n        for (uint256 i; i < length; ++i) {\\n            claimInput = claimInputs[i];\\n            SwapUtils.Swap memory swap = swaps[claimInput.swapId];\\n            SwapUtils.SwapCalculation memory calculation = SwapUtils._calculateSwapNetB(swap, claimInput.amountB, _feeNumerator, _feeDenominator, _fixedFee);\\n            totalNativeSendAmount += calculation.nativeSendAmount;\\n            array[i] = calculation;\\n        }\\n        return (array, totalNativeSendAmount);\\n    }\\n\\n    /**\\n     * @notice Calculate the swap values for a MultiClaimInput struct. The struct contains the Token A address, Token B address,\\n     * the net amount of B and an array of swap identifiers in reverse order.\\n     * Reverse order implies fulfilling each swap in turn, starting with supplying Token B and using each received Token A\\n     * to supply the next subsequent swap in the chain, finally receiving Token A.\\n     * The fee type is determined based on the Token A and Token B input address values. The fee types of the individual\\n     * swaps in the chain are not used.\\n     * @param multiClaimInput  - MultiClaimInput struct.\\n     * @return a SwapCalculation struct.\\n     */\\n    function calculateMultiSwap(SwapUtils.MultiClaimInput calldata multiClaimInput) external view returns (SwapUtils.SwapCalculation memory) {\\n        uint256 swapIdCount = multiClaimInput.swapIds.length;\\n        if (swapIdCount == 0 || swapIdCount > _maxHops) revert Errors.InvalidMultiClaimSwapCount(_maxHops, swapIdCount);\\n        if (swapIdCount == 1) {\\n            SwapUtils.Swap memory swap = swaps[multiClaimInput.swapIds[0]];\\n            return SwapUtils._calculateSwapNetB(swap, multiClaimInput.amountB, _feeNumerator, _feeDenominator, _fixedFee);\\n        }\\n        uint256 matchAmount = multiClaimInput.amountB;\\n        address matchToken = multiClaimInput.tokenB;\\n        uint256 swapId;\\n        bool complete = true;\\n        for (uint256 i; i < swapIdCount; ++i) {\\n            swapId = multiClaimInput.swapIds[i];\\n            SwapUtils.Swap memory swap = swaps[swapId];\\n            if (swap.tokenB != matchToken) revert Errors.NonMatchingToken();\\n            if (swap.amountB < matchAmount) revert Errors.NonMatchingAmount();\\n            if (matchAmount < swap.amountB) {\\n                if (!swap.isPartial) revert Errors.NotPartialSwap();\\n                matchAmount = MathUtils._mulDiv(swap.amountA, matchAmount, swap.amountB);\\n                complete = false;\\n            }\\n            else {\\n                matchAmount = swap.amountA;\\n            }\\n            matchToken = swap.tokenA;\\n        }\\n        if (matchToken != multiClaimInput.tokenA) revert Errors.NonMatchingToken();\\n        (uint8 feeType,) = _calculateFeeType(multiClaimInput.tokenA, multiClaimInput.tokenB);\\n        uint256 fee = FeeUtils._calculateFees(matchAmount, multiClaimInput.amountB, feeType, swapIdCount, _feeNumerator, _feeDenominator, _fixedFee);\\n        SwapUtils.SwapCalculation memory calculation;\\n        calculation.amountA = matchAmount;\\n        calculation.amountB = multiClaimInput.amountB;\\n        calculation.fee = fee;\\n        calculation.feeType = feeType;\\n        calculation.isTokenBNative = multiClaimInput.tokenB == Constants.NATIVE_ADDRESS;\\n        calculation.isComplete = complete;\\n        calculation.nativeSendAmount = SwapUtils._calculateNativeSendAmount(calculation.amountB, calculation.fee, calculation.feeType, calculation.isTokenBNative);\\n        return calculation;\\n    }\\n\\n    /// @notice Create a new swap between tokens\\n    /// @param tokenA - the address of token A\\n    /// @param tokenB - the address of token B\\n    /// @param amountA - the total amount of A being offered to swap\\n    /// @param amountB - the total amount of B being requested\\n    /// @param duration - the number of seconds the swap will remain active\\n    /// @param partialSwap - true if only part of the swap can be fulfilled\\n    /// @return explicitly returns true if succeeds\\n    function createSwap(address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint32 duration, bool partialSwap)\\n    whenNotPaused nonReentrant external payable returns (bool) {\\n        SwapUtils._checkSwap(tokenA, amountA, tokenB, amountB);\\n        if (tokenA == Constants.NATIVE_ADDRESS) {\\n            if (amountA != msg.value) revert Errors.IncorrectNativeAmountSent(amountA, msg.value);\\n        } else {\\n            TransferUtils._transferFromERC20(tokenA, msg.sender, address(this), amountA);\\n        }\\n        uint32 start = uint32(block.timestamp);\\n        uint32 expiration = start + duration;\\n        (uint8 feeType,) = _calculateFeeType(tokenA, tokenB);\\n        uint256 swapId = recordCount;\\n        unchecked { ++recordCount; }\\n        swaps[swapId] = SwapUtils.Swap({\\n            amountA: amountA,\\n            amountB: amountB,\\n            isPartial: partialSwap,\\n            feeType: feeType,\\n            start: start,\\n            expiration: expiration,\\n            maker: msg.sender,\\n            tokenA: tokenA,\\n            tokenB: tokenB\\n        });\\n        emit SwapCreated(swapId, msg.sender, tokenA, tokenB, amountA, amountB, feeType, start, expiration, partialSwap);\\n        return true;\\n    }\\n\\n    /// @notice Update an individual swap. Only available to the Maker of the swap.\\n    /// @param swapId - the identifier of the swap\\n    /// @param amountA - the amountA that was provided\\n    /// @param amountB - the new amountB that was provided\\n    /// @param expiration - the new expiration\\n    /// @param partialSwap - the new partialSwap indicator\\n    /// @return explicitly returns true if succeeds\\n    function updateSwap(uint256 swapId, uint256 amountA, uint256 amountB, uint32 expiration, bool partialSwap) whenNotPaused nonReentrant external returns (bool) {\\n        SwapUtils.Swap memory swap = swaps[swapId];\\n        if (swap.maker != msg.sender) revert Errors.UnauthorizedAccess();\\n        if (amountA <= 0 || amountB <= 0 || swap.amountA <= 0 || swap.amountB <= 0) revert Errors.ZeroAmount();\\n        if (swap.amountA != amountA) revert Errors.InvalidTokenBalance();\\n        if (expiration < block.timestamp) revert Errors.ExpiredSwap();\\n        if (expiration != swap.expiration) {\\n            swaps[swapId].expiration = expiration;\\n        }\\n        if (partialSwap != swap.isPartial) {\\n            swaps[swapId].isPartial = partialSwap;\\n        }\\n        if (amountB != swap.amountB) {\\n            swaps[swapId].amountB = amountB;\\n        }\\n        emit SwapUpdated(swapId, amountA, amountB, expiration, partialSwap);\\n        return true;\\n    }\\n\\n    /// @notice Claim a single swap atomically, specifying the Token A and Token B amounts. The Taker cannot be the Maker of the swap.\\n    /// @param swapId - the swap identifier\\n    /// @param amountA - the gross amount of A\\n    /// @param amountB - the net amount of B\\n    /// @return explicitly returns true if succeeds\\n    function claimSwap(uint256 swapId, uint256 amountA, uint256 amountB) whenNotPaused nonReentrant external payable returns (bool) {\\n        address taker = msg.sender;\\n        uint256 value = msg.value;\\n        _claimSwap(taker, value, swapId, amountA, amountB);\\n        return true;\\n    }\\n\\n    /// @notice Claim multiple swaps individually as one atomic transaction. There is a limit to how many can be claimed at once (see getMaxSwaps)\\n    /// @param claims - an array of Claim structs\\n    /// @return explicitly returns true if succeeds\\n    function claimSwaps(SwapUtils.Claim[] calldata claims) whenNotPaused nonReentrant external payable returns (bool) {\\n        uint256 length = claims.length;\\n        if (length == 0 || length > _maxSwaps) revert Errors.InvalidSwapCount(_maxSwaps, length);\\n        address taker = msg.sender;\\n        uint256 value = msg.value;\\n        SwapUtils.Claim calldata claim;\\n        uint256 totalNativeSendAmount;\\n        for (uint256 i; i < length; ++i) {\\n            claim = claims[i];\\n            SwapUtils.Swap memory swap = swaps[claim.swapId];\\n            SwapUtils._checkIsValid(swap, taker, block.timestamp);\\n            SwapUtils.SwapCalculation memory calculation = SwapUtils._calculateSwapNetB(swap, claim.amountB, _feeNumerator, _feeDenominator, _fixedFee);\\n            if (!swap.isPartial && !calculation.isComplete) revert Errors.NotPartialSwap();\\n            if (calculation.amountA != claim.amountA || calculation.amountB != claim.amountB) revert Errors.InvalidClaimAmounts();\\n            unchecked { totalNativeSendAmount += calculation.nativeSendAmount; }\\n            if (totalNativeSendAmount > value) revert Errors.IncorrectNativeAmountSent(totalNativeSendAmount, value);\\n            _performSwap(taker, claim.swapId, swap, calculation);\\n        }\\n        if (totalNativeSendAmount != value) revert Errors.IncorrectNativeAmountSent(totalNativeSendAmount, value);\\n        return true;\\n    }\\n\\n    /// @notice Cancel an individual swap. Only available to the Maker of the swap.\\n    /// @param swapId - the identifier of the swap\\n    /// @return explicitly returns true if succeeds\\n    function cancelSwap(uint256 swapId) nonReentrant external payable returns (bool) {\\n        SwapUtils.Swap memory swap = swaps[swapId];\\n        if (swap.maker != msg.sender) revert Errors.UnauthorizedAccess();\\n        if (swap.amountA <= 0 || swap.amountB <= 0) revert Errors.ZeroAmount();\\n        _deleteSwap(swapId);\\n        TransferUtils._transfer(swap.tokenA, msg.sender, swap.amountA);\\n        emit SwapCancelled(swapId);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Claim a sequence of swaps based on a MultiClaim struct atomically. The struct contains the Token A address, Token B address,\\n     * the gross amount of B, the gross amount of A and an array of swap identifiers in reverse order.\\n     * These input values can be exactly calculated using calculateMultiSwap. If the actual values resulting from the swap\\n     * are not exactly equal to the input amounts the swap will fail. You cannot be the Maker of any swaps in the sequence.\\n     * @param multiClaim struct.\\n     * @return true explicitly if it succeeds.\\n     */\\n    function claimMultiSwap(SwapUtils.MultiClaim calldata multiClaim) whenNotPaused nonReentrant external payable returns (bool) {\\n        address taker = msg.sender;\\n        uint256 value = msg.value;\\n        _claimMultiSwap(taker, value, multiClaim);\\n        return true;\\n    }\\n\\n    //Internal implementation functions\\n    function _calculateFeeType(address tokenA, address tokenB) internal view returns (uint8 feeType, address feeToken) {\\n        if (tokenB == Constants.NATIVE_ADDRESS) {\\n            return (Constants.FEE_TYPE_TOKEN_B, tokenB);\\n        }\\n        if (tokenA == Constants.NATIVE_ADDRESS) {\\n            return (Constants.FEE_TYPE_TOKEN_A, tokenA);\\n        }\\n        if (feeTokenMap[tokenB] == 1) {\\n            return (Constants.FEE_TYPE_TOKEN_B, tokenB);\\n        }\\n        if (feeTokenMap[tokenA] == 1) {\\n            return (Constants.FEE_TYPE_TOKEN_A, tokenA);\\n        }\\n        return (Constants.FEE_TYPE_ETH_FIXED, Constants.NATIVE_ADDRESS);\\n    }\\n\\n    function _claimSwap(address taker, uint256 value, uint256 swapId, uint256 amountA, uint256 amountB) internal {\\n        SwapUtils.Swap memory swap = swaps[swapId];\\n        SwapUtils._checkIsValid(swap, taker, block.timestamp);\\n        SwapUtils.SwapCalculation memory calculation = SwapUtils._calculateSwapNetB(swap, amountB, _feeNumerator, _feeDenominator, _fixedFee);\\n        if (!swap.isPartial && !calculation.isComplete) revert Errors.NotPartialSwap();\\n        if (calculation.nativeSendAmount != value) revert Errors.IncorrectNativeAmountSent(calculation.nativeSendAmount, value);\\n        if (calculation.amountA != amountA || calculation.amountB != amountB) revert Errors.InvalidClaimAmounts();\\n        _performSwap(taker, swapId, swap, calculation);\\n    }\\n\\n    function _performSwap(address taker, uint256 swapId, SwapUtils.Swap memory swap, SwapUtils.SwapCalculation memory calculation) internal {\\n        if (calculation.isComplete) {\\n            _deleteSwap(swapId);\\n            _transferClaim(swap.maker, taker, swap.tokenA, swap.tokenB, calculation.amountA, calculation.amountB, calculation.fee, calculation.feeType);\\n            emit SwapClaimed(swapId, taker, calculation.amountA, calculation.amountB, calculation.fee, calculation.feeType);\\n        }\\n        else {\\n            swaps[swapId].amountA = swap.amountA - calculation.amountA;\\n            swaps[swapId].amountB = swap.amountB - calculation.amountB;\\n            _transferClaim(swap.maker, taker, swap.tokenA, swap.tokenB, calculation.amountA, calculation.amountB, calculation.fee, calculation.feeType);\\n            emit SwapPartialClaimed(swapId, taker, calculation.amountA, calculation.amountB, calculation.fee, calculation.feeType);\\n        }\\n    }\\n\\n    function _claimMultiSwap(address taker, uint256 value, SwapUtils.MultiClaim calldata multiClaim) internal {\\n        SwapUtils._checkMultiClaim(multiClaim, _maxHops);\\n        uint256 swapIdCount = multiClaim.swapIds.length;\\n        if (swapIdCount == 1) {\\n            _claimSwap(taker, value, multiClaim.swapIds[0], multiClaim.amountA, multiClaim.amountB);\\n            return;\\n        }\\n        (uint8 feeType, address feeToken) = _calculateFeeType(multiClaim.tokenA, multiClaim.tokenB);\\n        uint256 fee = FeeUtils._calculateFees(multiClaim.amountA, multiClaim.amountB, feeType, swapIdCount, _feeNumerator, _feeDenominator, _fixedFee);\\n        SwapUtils._checkIsValueSent(value, multiClaim.tokenB, multiClaim.amountB, fee, feeType);\\n        uint256 timestamp = block.timestamp;\\n        uint256 matchAmount = multiClaim.amountB;\\n        address matchToken = multiClaim.tokenB;\\n        uint256 swapId;\\n        uint256 amountA;\\n        for (uint256 i; i < swapIdCount; ++i) {\\n            swapId = multiClaim.swapIds[i];\\n            SwapUtils.Swap memory swap = swaps[swapId];\\n            SwapUtils._checkIsValid(swap, taker, timestamp);\\n            if (matchToken != swap.tokenB) revert Errors.NonMatchingToken();\\n            if (matchAmount > swap.amountB) revert Errors.NonMatchingAmount();\\n            if (matchAmount < swap.amountB) {\\n                if (!swap.isPartial) revert Errors.NotPartialSwap();\\n                amountA = MathUtils._mulDiv(swap.amountA, matchAmount, swap.amountB);\\n                swaps[swapId].amountA = swap.amountA - amountA;\\n                swaps[swapId].amountB = swap.amountB - matchAmount;\\n                emit SwapPartialClaimed(swapId, address(this), amountA, matchAmount, 0, swap.feeType);\\n            }\\n            else {\\n                amountA = swap.amountA;\\n                _deleteSwap(swapId);\\n                emit SwapClaimed(swapId, address(this), amountA, matchAmount, 0, swap.feeType);\\n            }\\n            if (i != 0) {\\n                TransferUtils._transfer(matchToken, swap.maker, matchAmount);\\n            }\\n            else { // First time only\\n                TransferUtils._transferFrom(matchToken, taker, swap.maker, matchAmount);\\n            }\\n            matchAmount = amountA;\\n            matchToken = swap.tokenA;\\n        }\\n        if (multiClaim.tokenA != matchToken) revert Errors.NonMatchingToken();\\n        if (multiClaim.amountA != matchAmount) revert Errors.NonMatchingAmount();\\n        uint256 netAmountA = (feeType != Constants.FEE_TYPE_TOKEN_A) ? matchAmount : matchAmount - fee;\\n        _transferFee(taker, feeToken, fee, feeType);\\n        TransferUtils._transfer(multiClaim.tokenA, taker, netAmountA);\\n        emit SwapMultiClaimed(taker, multiClaim.tokenA, multiClaim.tokenB, multiClaim.amountA, multiClaim.amountB, fee, feeType);\\n    }\\n\\n    function _deleteSwap(uint256 swapId) internal {\\n        delete swaps[swapId];\\n    }\\n\\n    // Owner Administration Functions\\n\\n    /// @notice An administration function to expire a swap by setting its expiration value to 0.\\n    /// @param swapId - the identifier of swap\\n    function expireSwap(uint256 swapId) nonReentrant external onlyOwner {\\n        swaps[swapId].expiration = 0;\\n        emit SwapCancelled(swapId);\\n    }\\n\\n    /// @notice Administration function to recover swaps that are at least 2 years old and unclaimed.\\n    /// @param token - the token address to recover\\n    /// @param swapIds - an array of swap identifiers\\n    /// @param recoveryAddress - the address to send the recovered amount\\n    function recoverSwaps(address token, uint256[] calldata swapIds, address recoveryAddress) nonReentrant external payable onlyOwner {\\n        if (recoveryAddress == address(0)) revert Errors.InvalidAddress();\\n        uint256 abandonedStart = block.timestamp - Constants.TWO_YEARS_SECONDS;\\n        uint256 total;\\n        uint256 swapId;\\n        uint256 length = swapIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            swapId = swapIds[i];\\n            SwapUtils.Swap memory swap = swaps[swapId];\\n            if (swap.tokenA != token || swap.start > abandonedStart) continue;\\n            unchecked { total += swap.amountA; }\\n            _deleteSwap(swapId);\\n            emit SwapCancelled(swapId);\\n        }\\n        TransferUtils._transfer(token, recoveryAddress, total);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ClaimOwnSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"IncorrectNativeAmountSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaimAmounts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeNumerator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFixedFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"}],\"name\":\"InvalidMultiClaimSwapCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"}],\"name\":\"InvalidSwapCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonMatchingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonMatchingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPartialSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardHandlerLogFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"UnknownFeeType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClearFeeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeNumeratorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"}],\"name\":\"FixedFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxHops\",\"type\":\"uint256\"}],\"name\":\"MaxHopsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSwaps\",\"type\":\"uint256\"}],\"name\":\"MaxSwapsUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardHandler\",\"type\":\"address\"}],\"name\":\"RewardHandlerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rewardsActiveFlag\",\"type\":\"bool\"}],\"name\":\"RewardsActiveUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"SetFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"SwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"SwapClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"partialSwap\",\"type\":\"bool\"}],\"name\":\"SwapCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"SwapMultiClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"SwapPartialClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"partialSwap\",\"type\":\"bool\"}],\"name\":\"SwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"calculateCompleteSwap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTokenBNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"}],\"internalType\":\"struct SwapUtils.SwapCalculation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"calculateFeeType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"swapIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SwapUtils.MultiClaimInput\",\"name\":\"multiClaimInput\",\"type\":\"tuple\"}],\"name\":\"calculateMultiSwap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTokenBNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"}],\"internalType\":\"struct SwapUtils.SwapCalculation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"}],\"name\":\"calculateSwapA\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTokenBNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"}],\"internalType\":\"struct SwapUtils.SwapCalculation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grossAmountB\",\"type\":\"uint256\"}],\"name\":\"calculateSwapGrossB\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTokenBNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"}],\"internalType\":\"struct SwapUtils.SwapCalculation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netAmountB\",\"type\":\"uint256\"}],\"name\":\"calculateSwapNetB\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTokenBNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"}],\"internalType\":\"struct SwapUtils.SwapCalculation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapUtils.ClaimInput[]\",\"name\":\"claimInputs\",\"type\":\"tuple[]\"}],\"name\":\"calculateSwaps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isTokenBNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"}],\"internalType\":\"struct SwapUtils.SwapCalculation[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"cancelSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"swapIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SwapUtils.MultiClaim\",\"name\":\"multiClaim\",\"type\":\"tuple\"}],\"name\":\"claimMultiSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"claimSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapUtils.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimSwaps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearFeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"partialSwap\",\"type\":\"bool\"}],\"name\":\"createSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"expireSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTokenKeys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTokenMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeValues\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"feeValues\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxHops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSwaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"}],\"name\":\"getSwap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPartial\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"internalType\":\"struct SwapUtils.Swap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"feeTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"feeTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"initializeFeeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"initializeTransferData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"swapIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recoveryAddress\",\"type\":\"address\"}],\"name\":\"recoverSwaps\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTokenAddress\",\"type\":\"address\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"feeTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setFeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"}],\"name\":\"setFixedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHops\",\"type\":\"uint256\"}],\"name\":\"setMaxHops\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSwaps\",\"type\":\"uint256\"}],\"name\":\"setMaxSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"setRewardHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"rewardsActiveFlag\",\"type\":\"bool\"}],\"name\":\"setRewardsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPartial\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"partialSwap\",\"type\":\"bool\"}],\"name\":\"updateSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapExchange", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}