{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/validators/ManagedValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"../interfaces/validators/IManagedValidator.sol\\\";\\n\\nimport \\\"../utils/DefaultAccessControl.sol\\\";\\n\\ncontract ManagedValidator is IManagedValidator {\\n    /// @inheritdoc IManagedValidator\\n    uint256 public constant ADMIN_ROLE_MASK = 1 << 255;\\n    /// @inheritdoc IManagedValidator\\n    bytes32 public constant STORAGE_POSITION =\\n        keccak256(\\\"mellow.lrt.permissions.storage\\\");\\n\\n    modifier authorized() {\\n        requirePermission(msg.sender, address(this), msg.sig);\\n        _;\\n    }\\n\\n    constructor(address admin) {\\n        Storage storage ds = _storage();\\n        ds.userRoles[admin] = ADMIN_ROLE_MASK;\\n    }\\n\\n    function _storage() internal pure returns (Storage storage ds) {\\n        bytes32 position = STORAGE_POSITION;\\n\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function hasPermission(\\n        address user,\\n        address contractAddress,\\n        bytes4 signature\\n    ) public view returns (bool) {\\n        Storage storage s = _storage();\\n        uint256 roleSet = s.userRoles[user] | s.publicRoles;\\n        if ((roleSet & ADMIN_ROLE_MASK) > 0) return true;\\n        if ((roleSet & s.allowAllSignaturesRoles[contractAddress]) > 0)\\n            return true;\\n        if ((roleSet & s.allowSignatureRoles[contractAddress][signature]) > 0)\\n            return true;\\n        return false;\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function requirePermission(\\n        address user,\\n        address contractAddress,\\n        bytes4 signature\\n    ) public view {\\n        if (!hasPermission(user, contractAddress, signature))\\n            revert Forbidden();\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function grantPublicRole(uint8 role) external authorized {\\n        _storage().publicRoles |= 1 << role;\\n        emit PublicRoleGranted(role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function revokePublicRole(uint8 role) external authorized {\\n        _storage().publicRoles &= ~(1 << role);\\n        emit PublicRoleRevoked(role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function grantRole(address user, uint8 role) external authorized {\\n        _storage().userRoles[user] |= 1 << role;\\n        emit RoleGranted(user, role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function revokeRole(address user, uint8 role) external authorized {\\n        _storage().userRoles[user] &= ~(1 << role);\\n        emit RoleRevoked(user, role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function setCustomValidator(\\n        address contractAddress,\\n        address validator\\n    ) external authorized {\\n        if (validator == address(this)) revert Forbidden();\\n        _storage().customValidator[contractAddress] = validator;\\n        emit CustomValidatorSet(contractAddress, validator);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function grantContractRole(\\n        address contractAddress,\\n        uint8 role\\n    ) external authorized {\\n        _storage().allowAllSignaturesRoles[contractAddress] |= 1 << role;\\n        emit ContractRoleGranted(contractAddress, role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function revokeContractRole(\\n        address contractAddress,\\n        uint8 role\\n    ) external authorized {\\n        _storage().allowAllSignaturesRoles[contractAddress] &= ~(1 << role);\\n        emit ContractRoleRevoked(contractAddress, role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function grantContractSignatureRole(\\n        address contractAddress,\\n        bytes4 signature,\\n        uint8 role\\n    ) external authorized {\\n        _storage().allowSignatureRoles[contractAddress][signature] |= 1 << role;\\n        emit ContractSignatureRoleGranted(contractAddress, signature, role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function revokeContractSignatureRole(\\n        address contractAddress,\\n        bytes4 signature,\\n        uint8 role\\n    ) external authorized {\\n        _storage().allowSignatureRoles[contractAddress][signature] &= ~(1 <<\\n            role);\\n        emit ContractSignatureRoleRevoked(contractAddress, signature, role);\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function customValidator(\\n        address contractAddress\\n    ) external view returns (address) {\\n        return _storage().customValidator[contractAddress];\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function userRoles(address user) external view returns (uint256) {\\n        return _storage().userRoles[user];\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function publicRoles() external view returns (uint256) {\\n        return _storage().publicRoles;\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function allowAllSignaturesRoles(\\n        address contractAddress\\n    ) external view returns (uint256) {\\n        return _storage().allowAllSignaturesRoles[contractAddress];\\n    }\\n\\n    /// @inheritdoc IManagedValidator\\n    function allowSignatureRoles(\\n        address contractAddress,\\n        bytes4 selector\\n    ) external view returns (uint256) {\\n        return _storage().allowSignatureRoles[contractAddress][selector];\\n    }\\n\\n    /// @inheritdoc IValidator\\n    function validate(\\n        address from,\\n        address to,\\n        bytes calldata data\\n    ) external view {\\n        if (data.length < 0x4) revert InvalidData();\\n        requirePermission(from, to, bytes4(data[:4]));\\n        address validator = _storage().customValidator[to];\\n        if (validator == address(0)) return;\\n        IValidator(validator).validate(from, to, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/validators/IManagedValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"./IValidator.sol\\\";\\n\\n/**\\n * @title ManagedValidator\\n * @notice A role-based validator that provides control over access permissions.\\n *         Allows role-based management of contract permissions and supports custom validation logic.\\n *\\n *         The primary validator contract of the system, used to check the access permissions of users to call contracts with specified selectors.\\n *         The main function of the contract is hasPermissions(from, to, selector), which checks whether the specified caller \\\"from\\\" has the right to make the call to.call(abi.encodeWithSelector(selector, someData)).\\n *\\n *         Bitwise masks are used to store roles, thus the maximum number of roles in the system is limited to 256 (0-255).\\n *         The system consists of 4 types of roles:\\n *             1. publicRoles - bitmask of public roles available to all users\\n *             2. userRoles - bitmask of roles for the calling user\\n *             3. allowAllSignaturesRoles - bitmask of roles for the called contract\\n *             4. allowSignatureRoles - bitmask of roles for the called contract and specific selector\\n *\\n *         Additionally, the system has a dedicated role - 255 - ADMIN_ROLE, which grants full access to all contract functions without additional checks.\\n *\\n *         Therefore, the hasPermissions algorithm looks like this:\\n *             1. Determine the set of roles possessed by the specified user (userRoles[from] | publicRoles)\\n *             2. If the user has the ADMIN_ROLE role, access is granted ((userRoles[from] | publicRoles) & ADMIN_ROLE_MASK != 0)\\n *             3. If the called contract has at least one role in its corresponding set that matches a role in the user's role set, access is granted (allowAllSignaturesRoles[to] & (publicRoles | userRoles[from]) != 0)\\n *             4. If the called contract with specified function selector have at least one role in their corresponding role sets that matches a role in the user's role set, access is granted (allowSignatureRoles[to][selector] & (publicRoles | userRoles[from]) != 0)\\n *             5. Otherwise, access is denied and the function returns false\\n *\\n *         For greater flexibility, it is possible to set a custom validator for the called contract, which will be used after the standard check of permissions.\\n *         Thus, the validate function checks the presence of permissions as follows:\\n *             1. If the data does not contain at least 4 bytes (required for the selector), the function reverts with an InvalidData error.\\n *             2. If the hasPermissions function returns false, the function reverts with a Forbidden error.\\n *             3. If a custom validator is set for the contract, the validate function of the custom validator is called.\\n */\\ninterface IManagedValidator is IValidator {\\n    /// @dev Errors\\n    error Forbidden();\\n    error InvalidData();\\n\\n    /**\\n     * @notice Storage structure used for maintaining role-based access control data.\\n     */\\n    struct Storage {\\n        /// @dev Maps each user's address to their assigned roles using a bitmask.\\n        mapping(address => uint256) userRoles;\\n        /// @dev A bitmask representing public roles that are accessible by all users.\\n        uint256 publicRoles;\\n        /// @dev Maps each contract's address to a bitmask of roles that allow access to all functions on the contract.\\n        mapping(address => uint256) allowAllSignaturesRoles;\\n        /// @dev Maps each contract's address and function signature to a bitmask of roles that allow access to specific functions.\\n        mapping(address => mapping(bytes4 => uint256)) allowSignatureRoles;\\n        /// @dev Maps each contract's address to the address of a custom validator, if one is set.\\n        mapping(address => address) customValidator;\\n    }\\n\\n    /// @dev A constant representing the admin role bitmask.\\n    function ADMIN_ROLE_MASK() external view returns (uint256);\\n\\n    /// @dev A constant representing the storage position for the role-based data.\\n    function STORAGE_POSITION() external view returns (bytes32);\\n\\n    /**\\n     * @notice Checks whether a user has permission for a specific function on a given contract.\\n     * @param user The address of the user to check.\\n     * @param contractAddress The address of the contract being accessed.\\n     * @param signature The function signature being checked.\\n     * @return `true` if the user has permission, otherwise `false`.\\n     */\\n    function hasPermission(\\n        address user,\\n        address contractAddress,\\n        bytes4 signature\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Ensures that a user has the necessary permissions for the specified function.\\n     * @param user The address of the user being verified.\\n     * @param contractAddress The address of the contract being accessed.\\n     * @param signature The function signature being checked.\\n     * @dev Reverts with `Forbidden` if the user lacks the required permissions.\\n     */\\n    function requirePermission(\\n        address user,\\n        address contractAddress,\\n        bytes4 signature\\n    ) external view;\\n\\n    /**\\n     * @notice Grants a public role.\\n     * @param role The bitmask index of the role to grant.\\n     */\\n    function grantPublicRole(uint8 role) external;\\n\\n    /**\\n     * @notice Revokes a public role, preventing all users from accessing the specified functions.\\n     * @param role The bitmask index of the role to revoke.\\n     */\\n    function revokePublicRole(uint8 role) external;\\n\\n    /**\\n     * @notice Assigns a specific role to a given user.\\n     * @param user The address of the user to assign the role to.\\n     * @param role The bitmask index of the role to assign.\\n     */\\n    function grantRole(address user, uint8 role) external;\\n\\n    /**\\n     * @notice Revokes a specific role from a given user.\\n     * @param user The address of the user to revoke the role from.\\n     * @param role The bitmask index of the role to revoke.\\n     */\\n    function revokeRole(address user, uint8 role) external;\\n\\n    /**\\n     * @notice Sets a custom validator for a specified contract.\\n     * @param contractAddress The address of the contract that will use the custom validator.\\n     * @param validator The address of the custom validator.\\n     * @dev Reverts with `Forbidden` if the validator is set to this contract.\\n     */\\n    function setCustomValidator(\\n        address contractAddress,\\n        address validator\\n    ) external;\\n\\n    /**\\n     * @notice Grants a role for a specified contract.\\n     * @param contractAddress The address of the contract.\\n     * @param role The bitmask index of the role to grant.\\n     */\\n    function grantContractRole(address contractAddress, uint8 role) external;\\n\\n    /**\\n     * @notice Revokes a role from a specified contract.\\n     * @param contractAddress The address of the contract.\\n     * @param role The bitmask index of the role to revoke.\\n     */\\n    function revokeContractRole(address contractAddress, uint8 role) external;\\n\\n    /**\\n     * @notice Grants a role for a specified pair contract-selector.\\n     * @param contractAddress The address of the contract.\\n     * @param signature The function signature.\\n     * @param role The bitmask index of the role to grant.\\n     */\\n    function grantContractSignatureRole(\\n        address contractAddress,\\n        bytes4 signature,\\n        uint8 role\\n    ) external;\\n\\n    /**\\n     * @notice Revokes a role from a specified pair contract-selector.\\n     * @param contractAddress The address of the contract.\\n     * @param signature The function signature.\\n     * @param role The bitmask index of the role to revoke.\\n     */\\n    function revokeContractSignatureRole(\\n        address contractAddress,\\n        bytes4 signature,\\n        uint8 role\\n    ) external;\\n\\n    /**\\n     * @notice Returns the custom validator assigned to a specified contract.\\n     * @param contractAddress The address of the contract.\\n     * @return address of the custom validator.\\n     */\\n    function customValidator(\\n        address contractAddress\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Returns the bitmask representing the roles assigned to a given user.\\n     * @param user The address of the user.\\n     * @return uint256 The bitmask of roles assigned to the user.\\n     */\\n    function userRoles(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the bitmask representing the public roles accessible to all users.\\n     * @return uint256 The bitmask of public roles.\\n     */\\n    function publicRoles() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the bitmask representing roles that allow access to all functions on a specific contract.\\n     * @param contractAddress The address of the contract.\\n     * @return uint256 The bitmask of roles allowing access to all functions on the contract.\\n     */\\n    function allowAllSignaturesRoles(\\n        address contractAddress\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the bitmask representing roles that allow access to specific pair of contract-selector.\\n     * @param contractAddress The address of the contract.\\n     * @param selector The function signature.\\n     * @return The bitmask of roles allowing access to the specified function on the contract.\\n     */\\n    function allowSignatureRoles(\\n        address contractAddress,\\n        bytes4 selector\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Validates access permissions for a user to execute a function on a target contract.\\n     * @param from The address of the user attempting the action.\\n     * @param to The address of the target contract.\\n     * @param data The call data containing the function signature and arguments.\\n     * @dev Reverts with `InvalidData` if the call data is too short.\\n     *      Uses a custom validator if one is configured for the target contract.\\n     */\\n    function validate(\\n        address from,\\n        address to,\\n        bytes calldata data\\n    ) external view;\\n\\n    /**\\n     * @notice Emitted when a public role is granted to a user in the Managed Validator contract.\\n     * @param role The index of the public role.\\n     */\\n    event PublicRoleGranted(uint8 role);\\n\\n    /**\\n     * @notice Emitted when a public role is revoked from a user in the Managed Validator contract.\\n     * @param role The index of the public role.\\n     */\\n    event PublicRoleRevoked(uint8 role);\\n\\n    /**\\n     * @notice Emitted when a role is granted to a user in the Managed Validator contract.\\n     * @param user The address of the user.\\n     * @param role The index of the role.\\n     */\\n    event RoleGranted(address indexed user, uint8 role);\\n\\n    /**\\n     * @notice Emitted when a role is revoked from a user in the Managed Validator contract.\\n     * @param user The address of the user.\\n     * @param role The index of the role.\\n     */\\n    event RoleRevoked(address indexed user, uint8 role);\\n\\n    /**\\n     * @notice Emitted when a custom validator is set for a contract in the Managed Validator contract.\\n     * @param contractAddress The address of the contract.\\n     * @param validator The address of the custom validator.\\n     */\\n    event CustomValidatorSet(\\n        address indexed contractAddress,\\n        address validator\\n    );\\n\\n    /**\\n     * @notice Emitted when a role is granted to a contract in the Managed Validator contract.\\n     * @param contractAddress The address of the contract.\\n     * @param role The index of the role.\\n     */\\n    event ContractRoleGranted(address indexed contractAddress, uint8 role);\\n\\n    /**\\n     * @notice Emitted when a role is revoked from a contract in the Managed Validator contract.\\n     * @param contractAddress The address of the contract.\\n     * @param role The index of the role.\\n     */\\n    event ContractRoleRevoked(address indexed contractAddress, uint8 role);\\n\\n    /**\\n     * @notice Emitted when a role is granted to a pair contract-selector in the Managed Validator contract.\\n     * @param contractAddress The address of the contract.\\n     * @param signature The function signature.\\n     * @param role The index of the role.\\n     */\\n    event ContractSignatureRoleGranted(\\n        address indexed contractAddress,\\n        bytes4 signature,\\n        uint8 role\\n    );\\n\\n    /**\\n     * @notice Emitted when a role is revoked from a pair contract-selector in the Managed Validator contract.\\n     * @param contractAddress The address of the contract.\\n     * @param signature The function signature.\\n     * @param role The index of the role.\\n     */\\n    event ContractSignatureRoleRevoked(\\n        address indexed contractAddress,\\n        bytes4 signature,\\n        uint8 role\\n    );\\n}\\n\"\r\n    },\r\n    \"src/utils/DefaultAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\\\";\\nimport \\\"../interfaces/utils/IDefaultAccessControl.sol\\\";\\n\\ncontract DefaultAccessControl is\\n    IDefaultAccessControl,\\n    AccessControlEnumerable\\n{\\n    bytes32 public constant OPERATOR = keccak256(\\\"operator\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"admin\\\");\\n    bytes32 public constant ADMIN_DELEGATE_ROLE = keccak256(\\\"admin_delegate\\\");\\n\\n    /// @notice Creates a new contract.\\n    /// @param admin Admin of the contract\\n    constructor(address admin) {\\n        if (admin == address(0)) revert AddressZero();\\n\\n        _grantRole(OPERATOR, admin);\\n        _grantRole(ADMIN_ROLE, admin);\\n\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(ADMIN_DELEGATE_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(OPERATOR, ADMIN_DELEGATE_ROLE);\\n    }\\n\\n    /// @inheritdoc IDefaultAccessControl\\n    function isAdmin(address sender) public view returns (bool) {\\n        return\\n            hasRole(ADMIN_ROLE, sender) || hasRole(ADMIN_DELEGATE_ROLE, sender);\\n    }\\n\\n    /// @inheritdoc IDefaultAccessControl\\n    function isOperator(address sender) public view returns (bool) {\\n        return hasRole(OPERATOR, sender);\\n    }\\n\\n    /// @inheritdoc IDefaultAccessControl\\n    function requireAdmin(address sender) external view override {\\n        _requireAdmin(sender);\\n    }\\n\\n    /// @inheritdoc IDefaultAccessControl\\n    function requireAtLeastOperator(address sender) external view override {\\n        _requireAtLeastOperator(sender);\\n    }\\n\\n    function _requireAdmin(address sender) internal view {\\n        if (!isAdmin(sender)) revert Forbidden();\\n    }\\n\\n    function _requireAtLeastOperator(address sender) internal view {\\n        if (!isAdmin(sender) && !isOperator(sender)) revert Forbidden();\\n    }\\n\\n    function _requireAdmin() internal view {\\n        _requireAdmin(msg.sender);\\n    }\\n\\n    function _requireAtLeastOperator() internal view {\\n        _requireAtLeastOperator(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/validators/IValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.25;\\n\\n/**\\n * @title IValidator\\n * @notice Interface defining a generic validator for transaction data.\\n */\\ninterface IValidator {\\n    /**\\n     * @notice Validates a transaction involving two addresses based on the provided calldata.\\n     * @param from The address initiating the transaction.\\n     * @param to The target address of the transaction.\\n     * @param data The transaction data containing the function selector and any necessary parameters.\\n     * @dev Implementers should validate that the transaction is authorized, properly formatted, and adheres to the required business logic.\\n     *      Reverts if the transaction is invalid.\\n     */\\n    function validate(\\n        address from,\\n        address to,\\n        bytes calldata data\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/extensions/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlEnumerable} from \\\"./IAccessControlEnumerable.sol\\\";\\nimport {AccessControl} from \\\"../AccessControl.sol\\\";\\nimport {EnumerableSet} from \\\"../../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool granted = super._grantRole(role, account);\\n        if (granted) {\\n            _roleMembers[role].add(account);\\n        }\\n        return granted;\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        bool revoked = super._revokeRole(role, account);\\n        if (revoked) {\\n            _roleMembers[role].remove(account);\\n        }\\n        return revoked;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/utils/IDefaultAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\\\";\\n\\n/// @notice This is a default access control with 3 roles:\\n///\\n/// - ADMIN: allowed to do anything\\n/// - ADMIN_DELEGATE: allowed to do anything except assigning ADMIN and ADMIN_DELEGATE roles\\n/// - OPERATOR: low-privileged role, generally keeper or some other bot\\ninterface IDefaultAccessControl is IAccessControlEnumerable {\\n    error Forbidden();\\n    error AddressZero();\\n\\n    function OPERATOR() external view returns (bytes32);\\n\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function ADMIN_DELEGATE_ROLE() external view returns (bytes32);\\n\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is admin, `false` otherwise\\n    function isAdmin(address who) external view returns (bool);\\n\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is operator, `false` otherwise\\n    function isOperator(address who) external view returns (bool);\\n\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @dev throws Forbbiden() if the sender does not have the admin or admin_delegate role\\n    function requireAdmin(address who) external view;\\n\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @dev throws Forbbiden() if the sender has no roles\\n    function requireAtLeastOperator(address who) external view;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true\r\n        }\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"ContractRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"ContractRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"ContractSignatureRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"ContractSignatureRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"CustomValidatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"PublicRoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"PublicRoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORAGE_POSITION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"allowAllSignaturesRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"allowSignatureRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"customValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"grantContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"grantContractSignatureRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"grantPublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"requirePermission\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"revokeContractRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"revokeContractSignatureRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"revokePublicRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setCustomValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ManagedValidator", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000188858ac61a74350116d1cb6958fbc509fd6afa1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}