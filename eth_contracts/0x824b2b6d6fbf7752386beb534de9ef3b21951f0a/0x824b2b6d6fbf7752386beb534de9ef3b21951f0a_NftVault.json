{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IApeCoinStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\ninterface IApeCoinStaking {\\n    struct SingleNft {\\n        uint32 tokenId;\\n        uint224 amount;\\n    }\\n\\n    struct PairNft {\\n        uint128 mainTokenId;\\n        uint128 bakcTokenId;\\n    }\\n\\n    struct PairNftDepositWithAmount {\\n        uint32 mainTokenId;\\n        uint32 bakcTokenId;\\n        uint184 amount;\\n    }\\n    struct PairNftWithdrawWithAmount {\\n        uint32 mainTokenId;\\n        uint32 bakcTokenId;\\n        uint184 amount;\\n        bool isUncommit;\\n    }\\n    struct Position {\\n        uint256 stakedAmount;\\n        int256 rewardsDebt;\\n    }\\n\\n    struct Pool {\\n        uint48 lastRewardedTimestampHour;\\n        uint16 lastRewardsRangeIndex;\\n        uint96 stakedAmount;\\n        uint96 accumulatedRewardsPerShare;\\n        TimeRange[] timeRanges;\\n    }\\n\\n    struct TimeRange {\\n        uint48 startTimestampHour;\\n        uint48 endTimestampHour;\\n        uint96 rewardsPerHour;\\n        uint96 capPerPosition;\\n    }\\n\\n    struct PoolWithoutTimeRange {\\n        uint48 lastRewardedTimestampHour;\\n        uint16 lastRewardsRangeIndex;\\n        uint96 stakedAmount;\\n        uint96 accumulatedRewardsPerShare;\\n    }\\n\\n    struct DashboardStake {\\n        uint256 poolId;\\n        uint256 tokenId;\\n        uint256 deposited;\\n        uint256 unclaimed;\\n        uint256 rewards24hr;\\n        DashboardPair pair;\\n    }\\n\\n    struct DashboardPair {\\n        uint256 mainTokenId;\\n        uint256 mainTypePoolId;\\n    }\\n\\n    struct PoolUI {\\n        uint256 poolId;\\n        uint256 stakedAmount;\\n        TimeRange currentTimeRange;\\n    }\\n\\n    struct PairingStatus {\\n        uint248 tokenId;\\n        bool isPaired;\\n    }\\n\\n    function mainToBakc(uint256 poolId_, uint256 mainTokenId_) external view returns (PairingStatus memory);\\n\\n    function bakcToMain(uint256 poolId_, uint256 bakcTokenId_) external view returns (PairingStatus memory);\\n\\n    function nftContracts(uint256 poolId_) external view returns (address);\\n\\n    function rewardsBy(uint256 poolId_, uint256 from_, uint256 to_) external view returns (uint256, uint256);\\n\\n    function apeCoin() external view returns (address);\\n\\n    function getCurrentTimeRangeIndex(Pool memory pool_) external view returns (uint256);\\n\\n    function getTimeRangeBy(uint256 poolId_, uint256 index_) external view returns (TimeRange memory);\\n\\n    function getPoolsUI() external view returns (PoolUI memory, PoolUI memory, PoolUI memory, PoolUI memory);\\n\\n    function getSplitStakes(address address_) external view returns (DashboardStake[] memory);\\n\\n    function stakedTotal(address addr_) external view returns (uint256);\\n\\n    function pools(uint256 poolId_) external view returns (PoolWithoutTimeRange memory);\\n\\n    function nftPosition(uint256 poolId_, uint256 tokenId_) external view returns (Position memory);\\n\\n    function addressPosition(address addr_) external view returns (Position memory);\\n\\n    function pendingRewards(uint256 poolId_, address address_, uint256 tokenId_) external view returns (uint256);\\n\\n    function depositBAYC(SingleNft[] calldata nfts_) external;\\n\\n    function depositMAYC(SingleNft[] calldata nfts_) external;\\n\\n    function depositBAKC(\\n        PairNftDepositWithAmount[] calldata baycPairs_,\\n        PairNftDepositWithAmount[] calldata maycPairs_\\n    ) external;\\n\\n    function depositSelfApeCoin(uint256 amount_) external;\\n\\n    function claimSelfApeCoin() external;\\n\\n    function claimBAYC(uint256[] calldata nfts_, address recipient_) external;\\n\\n    function claimMAYC(uint256[] calldata nfts_, address recipient_) external;\\n\\n    function claimBAKC(PairNft[] calldata baycPairs_, PairNft[] calldata maycPairs_, address recipient_) external;\\n\\n    function withdrawBAYC(SingleNft[] calldata nfts_, address recipient_) external;\\n\\n    function withdrawMAYC(SingleNft[] calldata nfts_, address recipient_) external;\\n\\n    function withdrawBAKC(\\n        PairNftWithdrawWithAmount[] calldata baycPairs_,\\n        PairNftWithdrawWithAmount[] calldata maycPairs_\\n    ) external;\\n\\n    function withdrawSelfApeCoin(uint256 amount_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDelegationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.18;\\n\\n/**\\n * @title An immutable registry contract to be deployed as a standalone primitive\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n *      from here and integrate those permissions into their flow\\n */\\ninterface IDelegationRegistry {\\n    /// @notice Delegation type\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        TOKEN\\n    }\\n\\n    /// @notice Info about a single delegation, used for onchain enumeration\\n    struct DelegationInfo {\\n        DelegationType type_;\\n        address vault;\\n        address delegate;\\n        address contract_;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Info about a single contract-level delegation\\n    struct ContractDelegation {\\n        address contract_;\\n        address delegate;\\n    }\\n\\n    /// @notice Info about a single token-level delegation\\n    struct TokenDelegation {\\n        address contract_;\\n        uint256 tokenId;\\n        address delegate;\\n    }\\n\\n    /// @notice Emitted when a user delegates their entire wallet\\n    event DelegateForAll(address vault, address delegate, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific contract\\n    event DelegateForContract(address vault, address delegate, address contract_, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific token\\n    event DelegateForToken(address vault, address delegate, address contract_, uint256 tokenId, bool value);\\n\\n    /// @notice Emitted when a user revokes all delegations\\n    event RevokeAllDelegates(address vault);\\n\\n    /// @notice Emitted when a user revoes all delegations for a given delegate\\n    event RevokeDelegate(address vault, address delegate);\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for all contracts\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForAll(address delegate, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific contract\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForContract(address delegate, address contract_, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific token\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForToken(address delegate, address contract_, uint256 tokenId, bool value) external;\\n\\n    /**\\n     * @notice Revoke all delegates\\n     */\\n    function revokeAllDelegates() external;\\n\\n    /**\\n     * @notice Revoke a specific delegate for all their permissions\\n     * @param delegate The hotwallet to revoke\\n     */\\n    function revokeDelegate(address delegate) external;\\n\\n    /**\\n     * @notice Remove yourself as a delegate for a specific vault\\n     * @param vault The vault which delegated to the msg.sender, and should be removed\\n     */\\n    function revokeSelf(address vault) external;\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\\n     * @param delegate The delegate that you would like to retrieve delegations for\\n     * @return info Array of DelegationInfo structs\\n     */\\n    function getDelegationsByDelegate(address delegate) external view returns (DelegationInfo[] memory);\\n\\n    /**\\n     * @notice Returns an array of wallet-level delegates for a given vault\\n     * @param vault The cold wallet who issued the delegation\\n     * @return addresses Array of wallet-level delegates for a given vault\\n     */\\n    function getDelegatesForAll(address vault) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault and contract\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault and contract\\n     */\\n    function getDelegatesForContract(address vault, address contract_) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault's token\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract holding the token\\n     * @param tokenId The token id for the token you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault's token\\n     */\\n    function getDelegatesForToken(\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all contract-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of ContractDelegation structs\\n     */\\n    function getContractLevelDelegations(address vault) external view returns (ContractDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all token-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of TokenDelegation structs\\n     */\\n    function getTokenLevelDelegations(address vault) external view returns (TokenDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on the entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForAll(address delegate, address vault) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(address delegate, address vault, address contract_) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForToken(\\n        address delegate,\\n        address vault,\\n        address contract_,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INftVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {EnumerableSetUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC721ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\nimport {IApeCoinStaking} from \\\"./IApeCoinStaking.sol\\\";\\nimport {IDelegationRegistry} from \\\"../interfaces/IDelegationRegistry.sol\\\";\\n\\ninterface INftVault is IERC721ReceiverUpgradeable {\\n    event NftDeposited(address indexed nft, address indexed owner, address indexed staker, uint256[] tokenIds);\\n    event NftWithdrawn(address indexed nft, address indexed owner, address indexed staker, uint256[] tokenIds);\\n\\n    event SingleNftStaked(address indexed nft, address indexed staker, IApeCoinStaking.SingleNft[] nfts);\\n    event PairedNftStaked(\\n        address indexed staker,\\n        IApeCoinStaking.PairNftDepositWithAmount[] baycPairs,\\n        IApeCoinStaking.PairNftDepositWithAmount[] maycPairs\\n    );\\n    event SingleNftUnstaked(address indexed nft, address indexed staker, IApeCoinStaking.SingleNft[] nfts);\\n    event PairedNftUnstaked(\\n        address indexed staker,\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] baycPairs,\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] maycPairs\\n    );\\n\\n    event SingleNftClaimed(address indexed nft, address indexed staker, uint256[] tokenIds, uint256 rewards);\\n    event PairedNftClaimed(\\n        address indexed staker,\\n        IApeCoinStaking.PairNft[] baycPairs,\\n        IApeCoinStaking.PairNft[] maycPairs,\\n        uint256 rewards\\n    );\\n\\n    struct NftStatus {\\n        address owner;\\n        address staker;\\n    }\\n\\n    struct VaultStorage {\\n        // nft address =>  nft tokenId => nftStatus\\n        mapping(address => mapping(uint256 => NftStatus)) nfts;\\n        // nft address => staker address => refund\\n        mapping(address => mapping(address => Refund)) refunds;\\n        // nft address => staker address => position\\n        mapping(address => mapping(address => Position)) positions;\\n        // nft address => staker address => staking nft tokenId array\\n        mapping(address => mapping(address => EnumerableSetUpgradeable.UintSet)) stakingTokenIds;\\n        IApeCoinStaking apeCoinStaking;\\n        IERC20Upgradeable apeCoin;\\n        address bayc;\\n        address mayc;\\n        address bakc;\\n        IDelegationRegistry delegationRegistry;\\n        mapping(address => bool) authorized;\\n    }\\n\\n    struct Refund {\\n        uint256 principal;\\n        uint256 reward;\\n    }\\n    struct Position {\\n        uint256 stakedAmount;\\n        int256 rewardsDebt;\\n    }\\n\\n    function authorise(address addr_, bool authorized_) external;\\n\\n    function stakerOf(address nft_, uint256 tokenId_) external view returns (address);\\n\\n    function ownerOf(address nft_, uint256 tokenId_) external view returns (address);\\n\\n    function refundOf(address nft_, address staker_) external view returns (Refund memory);\\n\\n    function positionOf(address nft_, address staker_) external view returns (Position memory);\\n\\n    function pendingRewards(address nft_, address staker_) external view returns (uint256);\\n\\n    function totalStakingNft(address nft_, address staker_) external view returns (uint256);\\n\\n    function stakingNftIdByIndex(address nft_, address staker_, uint256 index_) external view returns (uint256);\\n\\n    function isStaking(address nft_, address staker_, uint256 tokenId_) external view returns (bool);\\n\\n    // delegate.cash\\n    function hasDelegateCash(\\n        address nft_,\\n        address delegate_,\\n        uint256[] calldata tokenIds_\\n    ) external view returns (bool[] memory delegations);\\n\\n    function setDelegateCash(address delegate_, address nft_, uint256[] calldata tokenIds, bool value) external;\\n\\n    // deposit nft\\n    function depositNft(address nft_, uint256[] calldata tokenIds_, address staker_) external;\\n\\n    // withdraw nft\\n    function withdrawNft(address nft_, uint256[] calldata tokenIds_) external;\\n\\n    // staker withdraw ape coin\\n    function withdrawRefunds(address nft_) external;\\n\\n    // stake\\n    function stakeBaycPool(IApeCoinStaking.SingleNft[] calldata nfts_) external;\\n\\n    function stakeMaycPool(IApeCoinStaking.SingleNft[] calldata nfts_) external;\\n\\n    function stakeBakcPool(\\n        IApeCoinStaking.PairNftDepositWithAmount[] calldata baycPairs_,\\n        IApeCoinStaking.PairNftDepositWithAmount[] calldata maycPairs_\\n    ) external;\\n\\n    // unstake\\n    function unstakeBaycPool(\\n        IApeCoinStaking.SingleNft[] calldata nfts_,\\n        address recipient_\\n    ) external returns (uint256 principal, uint256 rewards);\\n\\n    function unstakeMaycPool(\\n        IApeCoinStaking.SingleNft[] calldata nfts_,\\n        address recipient_\\n    ) external returns (uint256 principal, uint256 rewards);\\n\\n    function unstakeBakcPool(\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] calldata baycPairs_,\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] calldata maycPairs_,\\n        address recipient_\\n    ) external returns (uint256 principal, uint256 rewards);\\n\\n    // claim rewards\\n    function claimBaycPool(uint256[] calldata tokenIds_, address recipient_) external returns (uint256 rewards);\\n\\n    function claimMaycPool(uint256[] calldata tokenIds_, address recipient_) external returns (uint256 rewards);\\n\\n    function claimBakcPool(\\n        IApeCoinStaking.PairNft[] calldata baycPairs_,\\n        IApeCoinStaking.PairNft[] calldata maycPairs_,\\n        address recipient_\\n    ) external returns (uint256 rewards);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ApeStakingLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\nimport {IApeCoinStaking} from \\\"../interfaces/IApeCoinStaking.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ApeStakingLib {\\n    uint256 internal constant APE_COIN_PRECISION = 1e18;\\n    uint256 internal constant SECONDS_PER_HOUR = 3600;\\n    uint256 internal constant SECONDS_PER_MINUTE = 60;\\n\\n    uint256 internal constant APE_COIN_POOL_ID = 0;\\n    uint256 internal constant BAYC_POOL_ID = 1;\\n    uint256 internal constant MAYC_POOL_ID = 2;\\n    uint256 internal constant BAKC_POOL_ID = 3;\\n\\n    function getCurrentTimeRange(\\n        IApeCoinStaking apeCoinStaking_,\\n        uint256 poolId\\n    ) internal view returns (IApeCoinStaking.TimeRange memory) {\\n        (\\n            IApeCoinStaking.PoolUI memory apeCoinPoolUI,\\n            IApeCoinStaking.PoolUI memory baycPoolUI,\\n            IApeCoinStaking.PoolUI memory maycPoolUI,\\n            IApeCoinStaking.PoolUI memory bakcPoolUI\\n        ) = apeCoinStaking_.getPoolsUI();\\n\\n        if (poolId == apeCoinPoolUI.poolId) {\\n            return apeCoinPoolUI.currentTimeRange;\\n        }\\n\\n        if (poolId == baycPoolUI.poolId) {\\n            return baycPoolUI.currentTimeRange;\\n        }\\n\\n        if (poolId == maycPoolUI.poolId) {\\n            return maycPoolUI.currentTimeRange;\\n        }\\n        if (poolId == bakcPoolUI.poolId) {\\n            return bakcPoolUI.currentTimeRange;\\n        }\\n\\n        revert(\\\"invalid pool id\\\");\\n    }\\n\\n    function getNftPoolId(IApeCoinStaking apeCoinStaking_, address nft_) internal view returns (uint256) {\\n        if (nft_ == apeCoinStaking_.nftContracts(BAYC_POOL_ID)) {\\n            return BAYC_POOL_ID;\\n        }\\n\\n        if (nft_ == apeCoinStaking_.nftContracts(MAYC_POOL_ID)) {\\n            return MAYC_POOL_ID;\\n        }\\n        if (nft_ == apeCoinStaking_.nftContracts(BAKC_POOL_ID)) {\\n            return BAKC_POOL_ID;\\n        }\\n        revert(\\\"invalid nft\\\");\\n    }\\n\\n    function getNftPosition(\\n        IApeCoinStaking apeCoinStaking_,\\n        address nft_,\\n        uint256 tokenId_\\n    ) internal view returns (IApeCoinStaking.Position memory) {\\n        return apeCoinStaking_.nftPosition(getNftPoolId(apeCoinStaking_, nft_), tokenId_);\\n    }\\n\\n    function getNftPool(\\n        IApeCoinStaking apeCoinStaking_,\\n        address nft_\\n    ) internal view returns (IApeCoinStaking.PoolWithoutTimeRange memory) {\\n        return apeCoinStaking_.pools(getNftPoolId(apeCoinStaking_, nft_));\\n    }\\n\\n    function getNftRewardsBy(\\n        IApeCoinStaking apeCoinStaking_,\\n        address nft_,\\n        uint256 from_,\\n        uint256 to_\\n    ) internal view returns (uint256, uint256) {\\n        return apeCoinStaking_.rewardsBy(getNftPoolId(apeCoinStaking_, nft_), from_, to_);\\n    }\\n\\n    function bayc(IApeCoinStaking apeCoinStaking_) internal view returns (IERC721) {\\n        return IERC721(apeCoinStaking_.nftContracts(BAYC_POOL_ID));\\n    }\\n\\n    function mayc(IApeCoinStaking apeCoinStaking_) internal view returns (IERC721) {\\n        return IERC721(apeCoinStaking_.nftContracts(MAYC_POOL_ID));\\n    }\\n\\n    function bakc(IApeCoinStaking apeCoinStaking_) internal view returns (IERC721) {\\n        return IERC721(apeCoinStaking_.nftContracts(BAKC_POOL_ID));\\n    }\\n\\n    function getPreviousTimestampHour() internal view returns (uint256) {\\n        return block.timestamp - (getMinute(block.timestamp) * 60 + getSecond(block.timestamp));\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    /// @notice the seconds (0 to 59) of a timestamp\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stakednft/NftVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {EnumerableSetUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {INftVault, IApeCoinStaking, IERC721ReceiverUpgradeable} from \\\"../interfaces/INftVault.sol\\\";\\nimport {IDelegationRegistry} from \\\"../interfaces/IDelegationRegistry.sol\\\";\\n\\nimport {ApeStakingLib} from \\\"../libraries/ApeStakingLib.sol\\\";\\nimport {VaultLogic} from \\\"./VaultLogic.sol\\\";\\n\\ncontract NftVault is INftVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using ApeStakingLib for IApeCoinStaking;\\n\\n    VaultStorage internal _vaultStorage;\\n\\n    modifier onlyApe(address nft_) {\\n        require(\\n            nft_ == _vaultStorage.bayc || nft_ == _vaultStorage.mayc || nft_ == _vaultStorage.bakc,\\n            \\\"NftVault: not ape\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyApeCaller() {\\n        require(\\n            msg.sender == _vaultStorage.bayc || msg.sender == _vaultStorage.mayc || msg.sender == _vaultStorage.bakc,\\n            \\\"NftVault: caller not ape\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(_vaultStorage.authorized[msg.sender], \\\"StNft: caller is not authorized\\\");\\n        _;\\n    }\\n\\n    function initialize(IApeCoinStaking apeCoinStaking_, IDelegationRegistry delegationRegistry_) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        _vaultStorage.apeCoinStaking = apeCoinStaking_;\\n        _vaultStorage.delegationRegistry = delegationRegistry_;\\n        _vaultStorage.apeCoin = IERC20Upgradeable(_vaultStorage.apeCoinStaking.apeCoin());\\n        _vaultStorage.bayc = address(_vaultStorage.apeCoinStaking.bayc());\\n        _vaultStorage.mayc = address(_vaultStorage.apeCoinStaking.mayc());\\n        _vaultStorage.bakc = address(_vaultStorage.apeCoinStaking.bakc());\\n        _vaultStorage.apeCoin.approve(address(_vaultStorage.apeCoinStaking), type(uint256).max);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external view override onlyApeCaller returns (bytes4) {\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    function stakerOf(address nft_, uint256 tokenId_) external view onlyApe(nft_) returns (address) {\\n        return VaultLogic._stakerOf(_vaultStorage, nft_, tokenId_);\\n    }\\n\\n    function ownerOf(address nft_, uint256 tokenId_) external view onlyApe(nft_) returns (address) {\\n        return VaultLogic._ownerOf(_vaultStorage, nft_, tokenId_);\\n    }\\n\\n    function refundOf(address nft_, address staker_) external view onlyApe(nft_) returns (Refund memory) {\\n        return _vaultStorage.refunds[nft_][staker_];\\n    }\\n\\n    function positionOf(address nft_, address staker_) external view onlyApe(nft_) returns (Position memory) {\\n        return _vaultStorage.positions[nft_][staker_];\\n    }\\n\\n    function pendingRewards(address nft_, address staker_) external view onlyApe(nft_) returns (uint256) {\\n        IApeCoinStaking.PoolWithoutTimeRange memory pool = _vaultStorage.apeCoinStaking.getNftPool(nft_);\\n        Position memory position = _vaultStorage.positions[nft_][staker_];\\n\\n        (uint256 rewardsSinceLastCalculated, ) = _vaultStorage.apeCoinStaking.getNftRewardsBy(\\n            nft_,\\n            pool.lastRewardedTimestampHour,\\n            ApeStakingLib.getPreviousTimestampHour()\\n        );\\n        uint256 accumulatedRewardsPerShare = pool.accumulatedRewardsPerShare;\\n\\n        if (\\n            block.timestamp > pool.lastRewardedTimestampHour + ApeStakingLib.SECONDS_PER_HOUR && pool.stakedAmount != 0\\n        ) {\\n            accumulatedRewardsPerShare =\\n                accumulatedRewardsPerShare +\\n                (rewardsSinceLastCalculated * ApeStakingLib.APE_COIN_PRECISION) /\\n                pool.stakedAmount;\\n        }\\n        return\\n            uint256(int256(position.stakedAmount * accumulatedRewardsPerShare) - position.rewardsDebt) /\\n            ApeStakingLib.APE_COIN_PRECISION;\\n    }\\n\\n    function totalStakingNft(address nft_, address staker_) external view returns (uint256) {\\n        return _vaultStorage.stakingTokenIds[nft_][staker_].length();\\n    }\\n\\n    function stakingNftIdByIndex(address nft_, address staker_, uint256 index_) external view returns (uint256) {\\n        return _vaultStorage.stakingTokenIds[nft_][staker_].at(index_);\\n    }\\n\\n    function isStaking(address nft_, address staker_, uint256 tokenId_) external view returns (bool) {\\n        return _vaultStorage.stakingTokenIds[nft_][staker_].contains(tokenId_);\\n    }\\n\\n    function authorise(address addr_, bool authorized_) external override onlyOwner {\\n        _vaultStorage.authorized[addr_] = authorized_;\\n    }\\n\\n    function setDelegateCash(\\n        address delegate_,\\n        address nft_,\\n        uint256[] calldata tokenIds_,\\n        bool value_\\n    ) external override onlyAuthorized onlyApe(nft_) {\\n        require(delegate_ != address(0), \\\"nftVault: invalid delegate\\\");\\n        uint256 tokenId_;\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            tokenId_ = tokenIds_[i];\\n            require(\\n                msg.sender == VaultLogic._ownerOf(_vaultStorage, nft_, tokenId_),\\n                \\\"nftVault: only owner can delegate\\\"\\n            );\\n            _vaultStorage.delegationRegistry.delegateForToken(delegate_, nft_, tokenId_, value_);\\n        }\\n    }\\n\\n    function hasDelegateCash(\\n        address nft_,\\n        address delegate_,\\n        uint256[] calldata tokenIds_\\n    ) external view onlyApe(nft_) returns (bool[] memory delegations) {\\n        delegations = new bool[](tokenIds_.length);\\n        uint256 tokenId_;\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            tokenId_ = tokenIds_[i];\\n            delegations[i] = _vaultStorage.delegationRegistry.checkDelegateForToken(\\n                delegate_,\\n                address(this),\\n                nft_,\\n                tokenId_\\n            );\\n        }\\n    }\\n\\n    function depositNft(\\n        address nft_,\\n        uint256[] calldata tokenIds_,\\n        address staker_\\n    ) external override onlyApe(nft_) onlyAuthorized nonReentrant {\\n        uint256 tokenId_;\\n        uint256 poolId_;\\n        IApeCoinStaking.Position memory position_;\\n        IApeCoinStaking.PairingStatus memory pairingStatus_;\\n\\n        // transfer nft and set permission\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            // block partially stake from official contract\\n            tokenId_ = tokenIds_[i];\\n            position_ = _vaultStorage.apeCoinStaking.getNftPosition(nft_, tokenId_);\\n            require(position_.stakedAmount == 0, \\\"nftVault: nft already staked\\\");\\n\\n            if (nft_ == _vaultStorage.bayc || nft_ == _vaultStorage.mayc) {\\n                poolId_ = _vaultStorage.apeCoinStaking.getNftPoolId(nft_);\\n                pairingStatus_ = _vaultStorage.apeCoinStaking.mainToBakc(poolId_, tokenId_);\\n                // block bayc & mayc which already paired with bakc\\n                require(!pairingStatus_.isPaired, \\\"nftVault: already paired with bakc\\\");\\n            }\\n\\n            IERC721Upgradeable(nft_).safeTransferFrom(msg.sender, address(this), tokenIds_[i]);\\n            _vaultStorage.nfts[nft_][tokenIds_[i]] = NftStatus(msg.sender, staker_);\\n        }\\n        emit NftDeposited(nft_, msg.sender, staker_, tokenIds_);\\n    }\\n\\n    function withdrawNft(\\n        address nft_,\\n        uint256[] calldata tokenIds_\\n    ) external override onlyApe(nft_) onlyAuthorized nonReentrant {\\n        require(tokenIds_.length > 0, \\\"nftVault: invalid tokenIds\\\");\\n        address staker_ = VaultLogic._stakerOf(_vaultStorage, nft_, tokenIds_[0]);\\n        if (nft_ == _vaultStorage.bayc || nft_ == _vaultStorage.mayc) {\\n            VaultLogic._refundSinglePool(_vaultStorage, nft_, tokenIds_);\\n        } else if (nft_ == _vaultStorage.bakc) {\\n            VaultLogic._refundPairingPool(_vaultStorage, tokenIds_);\\n        }\\n        // transfer nft to sender\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            require(\\n                msg.sender == VaultLogic._ownerOf(_vaultStorage, nft_, tokenIds_[i]),\\n                \\\"nftVault: caller must be nft owner\\\"\\n            );\\n            require(\\n                staker_ == VaultLogic._stakerOf(_vaultStorage, nft_, tokenIds_[i]),\\n                \\\"nftVault: staker must be same\\\"\\n            );\\n            delete _vaultStorage.nfts[nft_][tokenIds_[i]];\\n            // transfer nft\\n            IERC721Upgradeable(nft_).safeTransferFrom(address(this), msg.sender, tokenIds_[i]);\\n        }\\n        emit NftWithdrawn(nft_, msg.sender, staker_, tokenIds_);\\n    }\\n\\n    function withdrawRefunds(address nft_) external override onlyApe(nft_) onlyAuthorized nonReentrant {\\n        Refund memory _refund = _vaultStorage.refunds[nft_][msg.sender];\\n        uint256 amount = _refund.principal + _refund.reward;\\n        delete _vaultStorage.refunds[nft_][msg.sender];\\n        _vaultStorage.apeCoin.transfer(msg.sender, amount);\\n    }\\n\\n    function stakeBaycPool(IApeCoinStaking.SingleNft[] calldata nfts_) external override onlyAuthorized nonReentrant {\\n        address nft_ = _vaultStorage.bayc;\\n        uint256 totalStakedAmount = 0;\\n        IApeCoinStaking.SingleNft memory singleNft_;\\n        for (uint256 i = 0; i < nfts_.length; i++) {\\n            singleNft_ = nfts_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, singleNft_.tokenId),\\n                \\\"nftVault: caller must be bayc staker\\\"\\n            );\\n            totalStakedAmount += singleNft_.amount;\\n            _vaultStorage.stakingTokenIds[nft_][msg.sender].add(singleNft_.tokenId);\\n        }\\n        _vaultStorage.apeCoin.transferFrom(msg.sender, address(this), totalStakedAmount);\\n        _vaultStorage.apeCoinStaking.depositBAYC(nfts_);\\n\\n        VaultLogic._increasePosition(_vaultStorage, nft_, msg.sender, totalStakedAmount);\\n\\n        emit SingleNftStaked(nft_, msg.sender, nfts_);\\n    }\\n\\n    function unstakeBaycPool(\\n        IApeCoinStaking.SingleNft[] calldata nfts_,\\n        address recipient_\\n    ) external override onlyAuthorized nonReentrant returns (uint256 principal, uint256 rewards) {\\n        address nft_ = _vaultStorage.bayc;\\n        IApeCoinStaking.SingleNft memory singleNft_;\\n        IApeCoinStaking.Position memory position_;\\n        for (uint256 i = 0; i < nfts_.length; i++) {\\n            singleNft_ = nfts_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, singleNft_.tokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n            principal += singleNft_.amount;\\n            position_ = _vaultStorage.apeCoinStaking.getNftPosition(nft_, singleNft_.tokenId);\\n            if (position_.stakedAmount == singleNft_.amount) {\\n                _vaultStorage.stakingTokenIds[nft_][msg.sender].remove(singleNft_.tokenId);\\n            }\\n        }\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_);\\n        _vaultStorage.apeCoinStaking.withdrawBAYC(nfts_, recipient_);\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_) - rewards - principal;\\n        if (rewards > 0) {\\n            VaultLogic._updateRewardsDebt(_vaultStorage, nft_, msg.sender, rewards);\\n        }\\n\\n        VaultLogic._decreasePosition(_vaultStorage, nft_, msg.sender, principal);\\n\\n        emit SingleNftUnstaked(nft_, msg.sender, nfts_);\\n    }\\n\\n    function claimBaycPool(\\n        uint256[] calldata tokenIds_,\\n        address recipient_\\n    ) external override onlyAuthorized nonReentrant returns (uint256 rewards) {\\n        address nft_ = _vaultStorage.bayc;\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, tokenIds_[i]),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n        }\\n        rewards = _vaultStorage.apeCoin.balanceOf(address(recipient_));\\n        _vaultStorage.apeCoinStaking.claimBAYC(tokenIds_, recipient_);\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_) - rewards;\\n        if (rewards > 0) {\\n            VaultLogic._updateRewardsDebt(_vaultStorage, nft_, msg.sender, rewards);\\n        }\\n        emit SingleNftClaimed(nft_, msg.sender, tokenIds_, rewards);\\n    }\\n\\n    function stakeMaycPool(IApeCoinStaking.SingleNft[] calldata nfts_) external override onlyAuthorized nonReentrant {\\n        address nft_ = _vaultStorage.mayc;\\n        uint256 totalApeCoinAmount = 0;\\n        IApeCoinStaking.SingleNft memory singleNft_;\\n        for (uint256 i = 0; i < nfts_.length; i++) {\\n            singleNft_ = nfts_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, singleNft_.tokenId),\\n                \\\"nftVault: caller must be mayc staker\\\"\\n            );\\n            totalApeCoinAmount += singleNft_.amount;\\n            _vaultStorage.stakingTokenIds[nft_][msg.sender].add(singleNft_.tokenId);\\n        }\\n        _vaultStorage.apeCoin.transferFrom(msg.sender, address(this), totalApeCoinAmount);\\n        _vaultStorage.apeCoinStaking.depositMAYC(nfts_);\\n        VaultLogic._increasePosition(_vaultStorage, nft_, msg.sender, totalApeCoinAmount);\\n\\n        emit SingleNftStaked(nft_, msg.sender, nfts_);\\n    }\\n\\n    function unstakeMaycPool(\\n        IApeCoinStaking.SingleNft[] calldata nfts_,\\n        address recipient_\\n    ) external override onlyAuthorized nonReentrant returns (uint256 principal, uint256 rewards) {\\n        address nft_ = _vaultStorage.mayc;\\n        IApeCoinStaking.SingleNft memory singleNft_;\\n        IApeCoinStaking.Position memory position_;\\n        for (uint256 i = 0; i < nfts_.length; i++) {\\n            singleNft_ = nfts_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, singleNft_.tokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n            principal += singleNft_.amount;\\n            position_ = _vaultStorage.apeCoinStaking.getNftPosition(nft_, singleNft_.tokenId);\\n            if (position_.stakedAmount == singleNft_.amount) {\\n                _vaultStorage.stakingTokenIds[nft_][msg.sender].remove(singleNft_.tokenId);\\n            }\\n        }\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_);\\n\\n        _vaultStorage.apeCoinStaking.withdrawMAYC(nfts_, recipient_);\\n\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_) - rewards - principal;\\n        if (rewards > 0) {\\n            VaultLogic._updateRewardsDebt(_vaultStorage, nft_, msg.sender, rewards);\\n        }\\n\\n        VaultLogic._decreasePosition(_vaultStorage, nft_, msg.sender, principal);\\n\\n        emit SingleNftUnstaked(nft_, msg.sender, nfts_);\\n    }\\n\\n    function claimMaycPool(\\n        uint256[] calldata tokenIds_,\\n        address recipient_\\n    ) external override onlyAuthorized nonReentrant returns (uint256 rewards) {\\n        address nft_ = _vaultStorage.mayc;\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, tokenIds_[i]),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n        }\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_);\\n        _vaultStorage.apeCoinStaking.claimMAYC(tokenIds_, recipient_);\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_) - rewards;\\n        if (rewards > 0) {\\n            VaultLogic._updateRewardsDebt(_vaultStorage, nft_, msg.sender, rewards);\\n        }\\n        emit SingleNftClaimed(nft_, msg.sender, tokenIds_, rewards);\\n    }\\n\\n    function stakeBakcPool(\\n        IApeCoinStaking.PairNftDepositWithAmount[] calldata baycPairs_,\\n        IApeCoinStaking.PairNftDepositWithAmount[] calldata maycPairs_\\n    ) external override onlyAuthorized nonReentrant {\\n        uint256 totalStakedAmount = 0;\\n        IApeCoinStaking.PairNftDepositWithAmount memory pair;\\n        address nft_ = _vaultStorage.bakc;\\n        for (uint256 i = 0; i < baycPairs_.length; i++) {\\n            pair = baycPairs_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, _vaultStorage.bayc, pair.mainTokenId) &&\\n                    msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, pair.bakcTokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n            totalStakedAmount += pair.amount;\\n            _vaultStorage.stakingTokenIds[nft_][msg.sender].add(pair.bakcTokenId);\\n        }\\n\\n        for (uint256 i = 0; i < maycPairs_.length; i++) {\\n            pair = maycPairs_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, _vaultStorage.mayc, pair.mainTokenId) &&\\n                    msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, pair.bakcTokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n            totalStakedAmount += pair.amount;\\n            _vaultStorage.stakingTokenIds[nft_][msg.sender].add(pair.bakcTokenId);\\n        }\\n        _vaultStorage.apeCoin.transferFrom(msg.sender, address(this), totalStakedAmount);\\n        _vaultStorage.apeCoinStaking.depositBAKC(baycPairs_, maycPairs_);\\n\\n        VaultLogic._increasePosition(_vaultStorage, nft_, msg.sender, totalStakedAmount);\\n\\n        emit PairedNftStaked(msg.sender, baycPairs_, maycPairs_);\\n    }\\n\\n    function unstakeBakcPool(\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] calldata baycPairs_,\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] calldata maycPairs_,\\n        address recipient_\\n    ) external override onlyAuthorized nonReentrant returns (uint256 principal, uint256 rewards) {\\n        address nft_ = _vaultStorage.bakc;\\n        IApeCoinStaking.Position memory position_;\\n        IApeCoinStaking.PairNftWithdrawWithAmount memory pair;\\n        for (uint256 i = 0; i < baycPairs_.length; i++) {\\n            pair = baycPairs_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, _vaultStorage.bayc, pair.mainTokenId) &&\\n                    msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, pair.bakcTokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n            position_ = _vaultStorage.apeCoinStaking.getNftPosition(nft_, pair.bakcTokenId);\\n            principal += (pair.isUncommit ? position_.stakedAmount : pair.amount);\\n            if (pair.isUncommit) {\\n                _vaultStorage.stakingTokenIds[nft_][msg.sender].remove(pair.bakcTokenId);\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < maycPairs_.length; i++) {\\n            pair = maycPairs_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, _vaultStorage.mayc, pair.mainTokenId) &&\\n                    msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, pair.bakcTokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n            position_ = _vaultStorage.apeCoinStaking.getNftPosition(nft_, pair.bakcTokenId);\\n            principal += (pair.isUncommit ? position_.stakedAmount : pair.amount);\\n            if (pair.isUncommit) {\\n                _vaultStorage.stakingTokenIds[nft_][msg.sender].remove(pair.bakcTokenId);\\n            }\\n        }\\n        rewards = _vaultStorage.apeCoin.balanceOf(address(this));\\n        _vaultStorage.apeCoinStaking.withdrawBAKC(baycPairs_, maycPairs_);\\n        rewards = _vaultStorage.apeCoin.balanceOf(address(this)) - rewards - principal;\\n        if (rewards > 0) {\\n            VaultLogic._updateRewardsDebt(_vaultStorage, nft_, msg.sender, rewards);\\n        }\\n        VaultLogic._decreasePosition(_vaultStorage, nft_, msg.sender, principal);\\n\\n        _vaultStorage.apeCoin.transfer(recipient_, principal + rewards);\\n\\n        emit PairedNftUnstaked(msg.sender, baycPairs_, maycPairs_);\\n    }\\n\\n    function claimBakcPool(\\n        IApeCoinStaking.PairNft[] calldata baycPairs_,\\n        IApeCoinStaking.PairNft[] calldata maycPairs_,\\n        address recipient_\\n    ) external override onlyAuthorized nonReentrant returns (uint256 rewards) {\\n        address nft_ = _vaultStorage.bakc;\\n        IApeCoinStaking.PairNft memory pair;\\n        for (uint256 i = 0; i < baycPairs_.length; i++) {\\n            pair = baycPairs_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, _vaultStorage.bayc, pair.mainTokenId) &&\\n                    msg.sender == VaultLogic._stakerOf(_vaultStorage, nft_, pair.bakcTokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < maycPairs_.length; i++) {\\n            pair = maycPairs_[i];\\n            require(\\n                msg.sender == VaultLogic._stakerOf(_vaultStorage, _vaultStorage.mayc, pair.mainTokenId) &&\\n                    msg.sender == VaultLogic._stakerOf(_vaultStorage, _vaultStorage.bakc, pair.bakcTokenId),\\n                \\\"nftVault: caller must be nft staker\\\"\\n            );\\n        }\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_);\\n        _vaultStorage.apeCoinStaking.claimBAKC(baycPairs_, maycPairs_, recipient_);\\n        rewards = _vaultStorage.apeCoin.balanceOf(recipient_) - rewards;\\n        if (rewards > 0) {\\n            VaultLogic._updateRewardsDebt(_vaultStorage, nft_, msg.sender, rewards);\\n        }\\n\\n        emit PairedNftClaimed(msg.sender, baycPairs_, maycPairs_, rewards);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/stakednft/VaultLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {EnumerableSetUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {SafeCastUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\nimport {IApeCoinStaking} from \\\"../interfaces/IApeCoinStaking.sol\\\";\\nimport {INftVault} from \\\"../interfaces/INftVault.sol\\\";\\n\\nimport {ApeStakingLib} from \\\"../libraries/ApeStakingLib.sol\\\";\\n\\nlibrary VaultLogic {\\n    event SingleNftUnstaked(address indexed nft, address indexed staker, IApeCoinStaking.SingleNft[] nfts);\\n    event PairedNftUnstaked(\\n        address indexed staker,\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] baycPairs,\\n        IApeCoinStaking.PairNftWithdrawWithAmount[] maycPairs\\n    );\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for uint248;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using ApeStakingLib for IApeCoinStaking;\\n\\n    function _stakerOf(\\n        INftVault.VaultStorage storage _vaultStorage,\\n        address nft_,\\n        uint256 tokenId_\\n    ) internal view returns (address) {\\n        return _vaultStorage.nfts[nft_][tokenId_].staker;\\n    }\\n\\n    function _ownerOf(\\n        INftVault.VaultStorage storage _vaultStorage,\\n        address nft_,\\n        uint256 tokenId_\\n    ) internal view returns (address) {\\n        return _vaultStorage.nfts[nft_][tokenId_].owner;\\n    }\\n\\n    function _increasePosition(\\n        INftVault.VaultStorage storage _vaultStorage,\\n        address nft_,\\n        address staker_,\\n        uint256 stakedAmount_\\n    ) internal {\\n        INftVault.Position storage position_ = _vaultStorage.positions[nft_][staker_];\\n        position_.stakedAmount += stakedAmount_;\\n        position_.rewardsDebt += int256(\\n            stakedAmount_ * _vaultStorage.apeCoinStaking.getNftPool(nft_).accumulatedRewardsPerShare\\n        );\\n    }\\n\\n    function _decreasePosition(\\n        INftVault.VaultStorage storage _vaultStorage,\\n        address nft_,\\n        address staker_,\\n        uint256 stakedAmount_\\n    ) internal {\\n        INftVault.Position storage position_ = _vaultStorage.positions[nft_][staker_];\\n        position_.stakedAmount -= stakedAmount_;\\n        position_.rewardsDebt -= int256(\\n            stakedAmount_ * _vaultStorage.apeCoinStaking.getNftPool(nft_).accumulatedRewardsPerShare\\n        );\\n    }\\n\\n    function _updateRewardsDebt(\\n        INftVault.VaultStorage storage _vaultStorage,\\n        address nft_,\\n        address staker_,\\n        uint256 claimedRewardsAmount_\\n    ) internal {\\n        INftVault.Position storage position_ = _vaultStorage.positions[nft_][staker_];\\n        position_.rewardsDebt += int256(claimedRewardsAmount_ * ApeStakingLib.APE_COIN_PRECISION);\\n    }\\n\\n    struct RefundSinglePoolVars {\\n        uint256 poolId;\\n        uint256 cachedBalance;\\n        uint256 tokenId;\\n        uint256 bakcTokenId;\\n        uint256 stakedAmount;\\n        // refunds\\n        address staker;\\n        uint256 totalPrincipal;\\n        uint256 totalReward;\\n        uint256 totalPairingPrincipal;\\n        uint256 totalPairingReward;\\n        // array\\n        uint256 singleNftIndex;\\n        uint256 singleNftSize;\\n        uint256 pairingNftIndex;\\n        uint256 pairingNftSize;\\n    }\\n\\n    function _refundSinglePool(\\n        INftVault.VaultStorage storage _vaultStorage,\\n        address nft_,\\n        uint256[] calldata tokenIds_\\n    ) external {\\n        require(nft_ == _vaultStorage.bayc || nft_ == _vaultStorage.mayc, \\\"nftVault: not bayc or mayc\\\");\\n        require(tokenIds_.length > 0, \\\"nftVault: invalid tokenIds\\\");\\n\\n        RefundSinglePoolVars memory vars;\\n        IApeCoinStaking.PairingStatus memory pairingStatus;\\n        INftVault.Refund storage refund;\\n\\n        vars.poolId = ApeStakingLib.BAYC_POOL_ID;\\n        if (nft_ == _vaultStorage.mayc) {\\n            vars.poolId = ApeStakingLib.MAYC_POOL_ID;\\n        }\\n        vars.cachedBalance = _vaultStorage.apeCoin.balanceOf(address(this));\\n        vars.staker = _stakerOf(_vaultStorage, nft_, tokenIds_[0]);\\n        require(vars.staker != address(0), \\\"nftVault: invalid staker\\\");\\n\\n        // Calculate the nft array size\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            vars.tokenId = tokenIds_[i];\\n            require(msg.sender == _ownerOf(_vaultStorage, nft_, vars.tokenId), \\\"nftVault: caller must be nft owner\\\");\\n            // make sure the bayc/mayc locked in valult\\n            require(address(this) == IERC721Upgradeable(nft_).ownerOf(vars.tokenId), \\\"nftVault: invalid token id\\\");\\n            require(vars.staker == _stakerOf(_vaultStorage, nft_, vars.tokenId), \\\"nftVault: staker must be same\\\");\\n            vars.stakedAmount = _vaultStorage.apeCoinStaking.nftPosition(vars.poolId, vars.tokenId).stakedAmount;\\n\\n            // Still have ape coin staking in single pool\\n            if (vars.stakedAmount > 0) {\\n                vars.singleNftSize += 1;\\n            }\\n\\n            pairingStatus = _vaultStorage.apeCoinStaking.mainToBakc(vars.poolId, vars.tokenId);\\n            vars.bakcTokenId = pairingStatus.tokenId;\\n            vars.stakedAmount = _vaultStorage\\n                .apeCoinStaking\\n                .nftPosition(ApeStakingLib.BAKC_POOL_ID, vars.bakcTokenId)\\n                .stakedAmount;\\n\\n            //  Still have ape coin staking in pairing pool\\n            if (\\n                pairingStatus.isPaired &&\\n                // make sure the bakc locked in valult\\n                IERC721Upgradeable(_vaultStorage.bakc).ownerOf(vars.bakcTokenId) == address(this) &&\\n                vars.stakedAmount > 0\\n            ) {\\n                vars.pairingNftSize += 1;\\n            }\\n        }\\n\\n        if (vars.singleNftSize > 0) {\\n            IApeCoinStaking.SingleNft[] memory singleNfts_ = new IApeCoinStaking.SingleNft[](vars.singleNftSize);\\n            for (uint256 i = 0; i < tokenIds_.length; i++) {\\n                vars.tokenId = tokenIds_[i];\\n                vars.stakedAmount = _vaultStorage.apeCoinStaking.nftPosition(vars.poolId, vars.tokenId).stakedAmount;\\n                if (vars.stakedAmount > 0) {\\n                    vars.totalPrincipal += vars.stakedAmount;\\n                    singleNfts_[vars.singleNftIndex] = IApeCoinStaking.SingleNft({\\n                        tokenId: vars.tokenId.toUint32(),\\n                        amount: vars.stakedAmount.toUint224()\\n                    });\\n                    vars.singleNftIndex += 1;\\n                    _vaultStorage.stakingTokenIds[nft_][vars.staker].remove(vars.tokenId);\\n                }\\n            }\\n            if (nft_ == _vaultStorage.bayc) {\\n                _vaultStorage.apeCoinStaking.withdrawBAYC(singleNfts_, address(this));\\n            } else {\\n                _vaultStorage.apeCoinStaking.withdrawMAYC(singleNfts_, address(this));\\n            }\\n            vars.totalReward =\\n                _vaultStorage.apeCoin.balanceOf(address(this)) -\\n                vars.cachedBalance -\\n                vars.totalPrincipal;\\n            // refund ape coin for single nft\\n            refund = _vaultStorage.refunds[nft_][vars.staker];\\n            refund.principal += vars.totalPrincipal;\\n            refund.reward += vars.totalReward;\\n\\n            // update bayc&mayc position and debt\\n            if (vars.totalReward > 0) {\\n                _updateRewardsDebt(_vaultStorage, nft_, vars.staker, vars.totalReward);\\n            }\\n            _decreasePosition(_vaultStorage, nft_, vars.staker, vars.totalPrincipal);\\n            emit SingleNftUnstaked(nft_, vars.staker, singleNfts_);\\n        }\\n\\n        if (vars.pairingNftSize > 0) {\\n            IApeCoinStaking.PairNftWithdrawWithAmount[]\\n                memory pairingNfts = new IApeCoinStaking.PairNftWithdrawWithAmount[](vars.pairingNftSize);\\n            IApeCoinStaking.PairNftWithdrawWithAmount[] memory emptyNfts;\\n\\n            for (uint256 i = 0; i < tokenIds_.length; i++) {\\n                vars.tokenId = tokenIds_[i];\\n\\n                pairingStatus = _vaultStorage.apeCoinStaking.mainToBakc(vars.poolId, vars.tokenId);\\n                vars.bakcTokenId = pairingStatus.tokenId;\\n                vars.stakedAmount = _vaultStorage\\n                    .apeCoinStaking\\n                    .nftPosition(ApeStakingLib.BAKC_POOL_ID, vars.bakcTokenId)\\n                    .stakedAmount;\\n                if (\\n                    pairingStatus.isPaired &&\\n                    // make sure the bakc locked in valult\\n                    IERC721Upgradeable(_vaultStorage.bakc).ownerOf(vars.bakcTokenId) == address(this) &&\\n                    vars.stakedAmount > 0\\n                ) {\\n                    vars.totalPairingPrincipal += vars.stakedAmount;\\n                    pairingNfts[vars.pairingNftIndex] = IApeCoinStaking.PairNftWithdrawWithAmount({\\n                        mainTokenId: vars.tokenId.toUint32(),\\n                        bakcTokenId: vars.bakcTokenId.toUint32(),\\n                        amount: vars.stakedAmount.toUint184(),\\n                        isUncommit: true\\n                    });\\n                    vars.pairingNftIndex += 1;\\n                    _vaultStorage.stakingTokenIds[_vaultStorage.bakc][vars.staker].remove(vars.bakcTokenId);\\n                }\\n            }\\n            vars.cachedBalance = _vaultStorage.apeCoin.balanceOf(address(this));\\n\\n            if (nft_ == _vaultStorage.bayc) {\\n                _vaultStorage.apeCoinStaking.withdrawBAKC(pairingNfts, emptyNfts);\\n                emit PairedNftUnstaked(vars.staker, pairingNfts, emptyNfts);\\n            } else {\\n                _vaultStorage.apeCoinStaking.withdrawBAKC(emptyNfts, pairingNfts);\\n                emit PairedNftUnstaked(vars.staker, emptyNfts, pairingNfts);\\n            }\\n            vars.totalPairingReward =\\n                _vaultStorage.apeCoin.balanceOf(address(this)) -\\n                vars.cachedBalance -\\n                vars.totalPairingPrincipal;\\n\\n            // refund ape coin for paring nft\\n            refund = _vaultStorage.refunds[_vaultStorage.bakc][vars.staker];\\n            refund.principal += vars.totalPairingPrincipal;\\n            refund.reward += vars.totalPairingReward;\\n\\n            // update bakc position and debt\\n            if (vars.totalPairingReward > 0) {\\n                _updateRewardsDebt(_vaultStorage, _vaultStorage.bakc, vars.staker, vars.totalPairingReward);\\n            }\\n            _decreasePosition(_vaultStorage, _vaultStorage.bakc, vars.staker, vars.totalPairingPrincipal);\\n        }\\n    }\\n\\n    struct RefundPairingPoolVars {\\n        uint256 cachedBalance;\\n        uint256 tokenId;\\n        uint256 stakedAmount;\\n        // refund\\n        address staker;\\n        uint256 totalPrincipal;\\n        uint256 totalReward;\\n        // array\\n        uint256 baycIndex;\\n        uint256 baycSize;\\n        uint256 maycIndex;\\n        uint256 maycSize;\\n    }\\n\\n    function _refundPairingPool(INftVault.VaultStorage storage _vaultStorage, uint256[] calldata tokenIds_) external {\\n        require(tokenIds_.length > 0, \\\"nftVault: invalid tokenIds\\\");\\n        RefundPairingPoolVars memory vars;\\n        IApeCoinStaking.PairingStatus memory pairingStatus;\\n\\n        vars.staker = _stakerOf(_vaultStorage, _vaultStorage.bakc, tokenIds_[0]);\\n        require(vars.staker != address(0), \\\"nftVault: invalid staker\\\");\\n        vars.cachedBalance = _vaultStorage.apeCoin.balanceOf(address(this));\\n\\n        // Calculate the nft array size\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            vars.tokenId = tokenIds_[i];\\n            require(\\n                msg.sender == _ownerOf(_vaultStorage, _vaultStorage.bakc, vars.tokenId),\\n                \\\"nftVault: caller must be nft owner\\\"\\n            );\\n            // make sure the bakc locked in valult\\n            require(\\n                address(this) == IERC721Upgradeable(_vaultStorage.bakc).ownerOf(vars.tokenId),\\n                \\\"nftVault: invalid token id\\\"\\n            );\\n            require(\\n                vars.staker == _stakerOf(_vaultStorage, _vaultStorage.bakc, vars.tokenId),\\n                \\\"nftVault: staker must be same\\\"\\n            );\\n\\n            vars.stakedAmount = _vaultStorage\\n                .apeCoinStaking\\n                .nftPosition(ApeStakingLib.BAKC_POOL_ID, vars.tokenId)\\n                .stakedAmount;\\n            if (vars.stakedAmount > 0) {\\n                pairingStatus = _vaultStorage.apeCoinStaking.bakcToMain(vars.tokenId, ApeStakingLib.BAYC_POOL_ID);\\n\\n                // make sure the bayc locked in valult\\n                if (\\n                    pairingStatus.isPaired &&\\n                    IERC721Upgradeable(_vaultStorage.bayc).ownerOf(pairingStatus.tokenId) == address(this)\\n                ) {\\n                    vars.baycSize += 1;\\n                } else {\\n                    pairingStatus = _vaultStorage.apeCoinStaking.bakcToMain(vars.tokenId, ApeStakingLib.MAYC_POOL_ID);\\n                    // make sure the mayc locked in valult\\n                    if (\\n                        pairingStatus.isPaired &&\\n                        IERC721Upgradeable(_vaultStorage.mayc).ownerOf(pairingStatus.tokenId) == address(this)\\n                    ) {\\n                        vars.maycSize += 1;\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (vars.baycSize > 0 || vars.maycSize > 0) {\\n            IApeCoinStaking.PairNftWithdrawWithAmount[]\\n                memory baycNfts_ = new IApeCoinStaking.PairNftWithdrawWithAmount[](vars.baycSize);\\n            IApeCoinStaking.PairNftWithdrawWithAmount[]\\n                memory maycNfts_ = new IApeCoinStaking.PairNftWithdrawWithAmount[](vars.maycSize);\\n            for (uint256 i = 0; i < tokenIds_.length; i++) {\\n                vars.tokenId = tokenIds_[i];\\n                vars.stakedAmount = _vaultStorage\\n                    .apeCoinStaking\\n                    .nftPosition(ApeStakingLib.BAKC_POOL_ID, vars.tokenId)\\n                    .stakedAmount;\\n                if (vars.stakedAmount > 0) {\\n                    pairingStatus = _vaultStorage.apeCoinStaking.bakcToMain(vars.tokenId, ApeStakingLib.BAYC_POOL_ID);\\n                    // make sure the bayc locked in valult\\n                    if (\\n                        pairingStatus.isPaired &&\\n                        IERC721Upgradeable(_vaultStorage.bayc).ownerOf(pairingStatus.tokenId) == address(this)\\n                    ) {\\n                        vars.totalPrincipal += vars.stakedAmount;\\n                        baycNfts_[vars.baycIndex] = IApeCoinStaking.PairNftWithdrawWithAmount({\\n                            mainTokenId: pairingStatus.tokenId.toUint32(),\\n                            bakcTokenId: vars.tokenId.toUint32(),\\n                            amount: vars.stakedAmount.toUint184(),\\n                            isUncommit: true\\n                        });\\n                        vars.baycIndex += 1;\\n                        _vaultStorage.stakingTokenIds[_vaultStorage.bakc][vars.staker].remove(vars.tokenId);\\n                    } else {\\n                        pairingStatus = _vaultStorage.apeCoinStaking.bakcToMain(\\n                            vars.tokenId,\\n                            ApeStakingLib.MAYC_POOL_ID\\n                        );\\n                        // make sure the mayc locked in valult\\n                        if (\\n                            pairingStatus.isPaired &&\\n                            IERC721Upgradeable(_vaultStorage.mayc).ownerOf(pairingStatus.tokenId) == address(this)\\n                        ) {\\n                            vars.totalPrincipal += vars.stakedAmount;\\n                            maycNfts_[vars.maycIndex] = IApeCoinStaking.PairNftWithdrawWithAmount({\\n                                mainTokenId: pairingStatus.tokenId.toUint32(),\\n                                bakcTokenId: vars.tokenId.toUint32(),\\n                                amount: vars.stakedAmount.toUint184(),\\n                                isUncommit: true\\n                            });\\n                            vars.maycIndex += 1;\\n                            _vaultStorage.stakingTokenIds[_vaultStorage.bakc][vars.staker].remove(vars.tokenId);\\n                        }\\n                    }\\n                }\\n            }\\n\\n            _vaultStorage.apeCoinStaking.withdrawBAKC(baycNfts_, maycNfts_);\\n            vars.totalReward =\\n                _vaultStorage.apeCoin.balanceOf(address(this)) -\\n                vars.cachedBalance -\\n                vars.totalPrincipal;\\n            // refund ape coin for bakc\\n            INftVault.Refund storage _refund = _vaultStorage.refunds[_vaultStorage.bakc][vars.staker];\\n            _refund.principal += vars.totalPrincipal;\\n            _refund.reward += vars.totalReward;\\n\\n            // update bakc position and debt\\n            if (vars.totalReward > 0) {\\n                _updateRewardsDebt(_vaultStorage, _vaultStorage.bakc, vars.staker, vars.totalReward);\\n            }\\n            _decreasePosition(_vaultStorage, _vaultStorage.bakc, vars.staker, vars.totalPrincipal);\\n            emit PairedNftUnstaked(vars.staker, baycNfts_, maycNfts_);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/stakednft/VaultLogic.sol\": {\r\n        \"VaultLogic\": \"0x744825130fad4aa442fb151e32ef359fe5e26aec\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"NftDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"NftWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"mainTokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bakcTokenId\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.PairNft[]\",\"name\":\"baycPairs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"mainTokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bakcTokenId\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.PairNft[]\",\"name\":\"maycPairs\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"PairedNftClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.PairNftDepositWithAmount[]\",\"name\":\"baycPairs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.PairNftDepositWithAmount[]\",\"name\":\"maycPairs\",\"type\":\"tuple[]\"}],\"name\":\"PairedNftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"},{\"internalType\":\"bool\",\"name\":\"isUncommit\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.PairNftWithdrawWithAmount[]\",\"name\":\"baycPairs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"},{\"internalType\":\"bool\",\"name\":\"isUncommit\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.PairNftWithdrawWithAmount[]\",\"name\":\"maycPairs\",\"type\":\"tuple[]\"}],\"name\":\"PairedNftUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"SingleNftClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.SingleNft[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"}],\"name\":\"SingleNftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"indexed\":false,\"internalType\":\"struct IApeCoinStaking.SingleNft[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"}],\"name\":\"SingleNftUnstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized_\",\"type\":\"bool\"}],\"name\":\"authorise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"mainTokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bakcTokenId\",\"type\":\"uint128\"}],\"internalType\":\"struct IApeCoinStaking.PairNft[]\",\"name\":\"baycPairs_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"mainTokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bakcTokenId\",\"type\":\"uint128\"}],\"internalType\":\"struct IApeCoinStaking.PairNft[]\",\"name\":\"maycPairs_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"claimBakcPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"claimBaycPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"claimMaycPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"}],\"name\":\"depositNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"hasDelegateCash\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"delegations\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IApeCoinStaking\",\"name\":\"apeCoinStaking_\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationRegistry\",\"name\":\"delegationRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"}],\"name\":\"positionOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardsDebt\",\"type\":\"int256\"}],\"internalType\":\"struct INftVault.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"}],\"name\":\"refundOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct INftVault.Refund\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setDelegateCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"}],\"internalType\":\"struct IApeCoinStaking.PairNftDepositWithAmount[]\",\"name\":\"baycPairs_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"}],\"internalType\":\"struct IApeCoinStaking.PairNftDepositWithAmount[]\",\"name\":\"maycPairs_\",\"type\":\"tuple[]\"}],\"name\":\"stakeBakcPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"internalType\":\"struct IApeCoinStaking.SingleNft[]\",\"name\":\"nfts_\",\"type\":\"tuple[]\"}],\"name\":\"stakeBaycPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"internalType\":\"struct IApeCoinStaking.SingleNft[]\",\"name\":\"nfts_\",\"type\":\"tuple[]\"}],\"name\":\"stakeMaycPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"stakerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"stakingNftIdByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"}],\"name\":\"totalStakingNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"},{\"internalType\":\"bool\",\"name\":\"isUncommit\",\"type\":\"bool\"}],\"internalType\":\"struct IApeCoinStaking.PairNftWithdrawWithAmount[]\",\"name\":\"baycPairs_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"mainTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bakcTokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint184\",\"name\":\"amount\",\"type\":\"uint184\"},{\"internalType\":\"bool\",\"name\":\"isUncommit\",\"type\":\"bool\"}],\"internalType\":\"struct IApeCoinStaking.PairNftWithdrawWithAmount[]\",\"name\":\"maycPairs_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"unstakeBakcPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"internalType\":\"struct IApeCoinStaking.SingleNft[]\",\"name\":\"nfts_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"unstakeBaycPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"internalType\":\"struct IApeCoinStaking.SingleNft[]\",\"name\":\"nfts_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"unstakeMaycPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"}],\"name\":\"withdrawRefunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NftVault", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}