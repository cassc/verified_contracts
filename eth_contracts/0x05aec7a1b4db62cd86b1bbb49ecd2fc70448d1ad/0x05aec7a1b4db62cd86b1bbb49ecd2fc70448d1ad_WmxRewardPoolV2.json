{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWomDepositor {\\n    function deposit(uint256 _amount, address _stakeAddress) external returns (bool);\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\\ninterface IWmxLocker {\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    struct LockedBalance {\\n        uint112 amount;\\n        uint32 unlockTime;\\n    }\\n\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n\\n    function balances(address _account) external view returns (uint112 locked, uint32 nextUnlockIndex);\\n\\n    function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards);\\n\\n    function getVotes(address account) external view returns (uint256);\\n\\n    function getPastVotes(address account, uint256 timestamp) external view returns (uint256 votes);\\n\\n    function lockedBalances(address _user) external view returns (\\n        uint256 total,\\n        uint256 unlockable,\\n        uint256 locked,\\n        LockedBalance[] memory lockData\\n    );\\n\\n    function addReward(address _rewardsToken, address _distributor) external;\\n\\n    function approveRewardDistributor(\\n        address _rewardsToken,\\n        address _distributor,\\n        bool _approved\\n    ) external;\\n\\n    function modifyBlacklist(address _account, bool _blacklisted) external;\\n\\n    function setKickIncentive(uint256 _rate, uint256 _delay) external;\\n\\n    function shutdown() external;\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external;\\n}\\n\\ninterface IOwnable {\\n    function transferOwnership(address _newOwner) external;\\n}\\n\\ninterface IRewardsManager {\\n    function onNewRewardToken(address _token) external;\\n}\\n\\ninterface IWmxLockerExt {\\n    struct LockerRewardData {\\n        uint32 periodFinish;\\n        uint32 lastUpdateTime;\\n        uint96 rewardRate;\\n        uint96 rewardPerTokenStored;\\n    }\\n\\n    function rewardData(address token) external view returns (LockerRewardData memory);\\n}\\n\\ninterface IBribeVoter {\\n    function vote(IERC20[] calldata _lpVote, int256[] calldata _deltas) external returns (uint256[][] memory bribeRewards);\\n    function votes(address _user, address _lpToken) external view returns (uint256);\\n    function infos(address _lpToken) external view returns (uint104 supplyBaseIndex, uint104 supplyVoteIndex, uint40 nextEpochStartTime, uint128 claimable, bool whitelist, address gaugeManager, address bribe);\\n    function weights(address _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\\n    function getUserVotes(address _user, address _lpToken) external view returns (uint256);\\n}\\n\\ninterface IMasterWombatRewarder {\\n    function rewardTokens() external view returns (address[] memory tokens);\\n}\\n\\ninterface IExtraRewardsDistributor {\\n    function addReward(address _token, uint256 _amount) external;\\n}\\n\\ninterface IWomDepositorWrapper {\\n    function getMinOut(uint256, uint256) external view returns (uint256);\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        bool,\\n        address _stakeAddress\\n    ) external;\\n}\\n\\ninterface ITokenFactory{\\n    function CreateDepositToken(address) external returns(address);\\n    function CreateBribesVotingToken() external returns(address);\\n}\\n\\ninterface IBribesRewardFactory {\\n    function CreateBribesRewards(address _stakingToken, address _lptoken, bool _callOperatorOnGetReward) external returns (address);\\n}\\n\\ninterface IRewards{\\n    function asset() external returns(address);\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function withdraw(uint256 assets, address receiver, address owner) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(address, uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address _token, address _account) external view returns (uint256);\\n    function updateOperatorData(address operator_, uint256 pid_) external;\\n    function setRewardTokenPaused(address token_, bool paused_) external;\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n    function rewardTokensList() external view returns (address[] memory);\\n    function tokenRewards(address _token) external view returns (address token, uint256 periodFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored, uint256 queuedRewards, uint256 currentRewards, uint256 historicalRewards, bool paused);\\n}\\n\\ninterface IGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n\\n    function rewardInfo(uint256 i) external view returns (IERC20 rewardToken, uint96 tokenPerSec, uint128 accTokenPerShare, uint128 distributedAmount);\\n}\\n\\ninterface IVe {\\n    function vote(address user, int256 voteDelta) external;\\n}\\n\\ninterface INftLocker {\\n    function voteBoost(address _account) external view returns (uint256);\\n}\\n\\ninterface IBribeRewardsPool is IRewards {\\n    function withdrawAndUnwrapFrom(address _from, uint256 _amount, address _claimRecipient) external returns(bool);\\n    function updateBribesConfig(bool _callOperatorOnGetReward) external;\\n    function updateRatioConfig(uint256 _duration, uint256 _maxRewardRatio) external;\\n}\\n\\ninterface ITokenMinter is IERC20 {\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n    function setOperator(address) external;\\n    function updateOperator(address) external;\\n    function getFactAmounMint(uint256 _amount) external view returns(uint256 amount);\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdrawLp(address, address, uint256) external returns (bool);\\n    function withdrawAllLp(address, address) external returns (bool);\\n    function lock(uint256 _lockDays) external;\\n    function releaseLock(uint256 _slot) external returns(uint256);\\n    function getGaugeRewardTokens(address _lptoken, address _gauge) external returns (address[] memory tokens);\\n    function claimCrv(address, uint256) external returns (address[] memory tokens, uint256[] memory balances);\\n    function balanceOfPool(address, address) external view returns (uint256);\\n    function lpTokenToPid(address, address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function depositor() external view returns (address);\\n    function wom() external view returns (address);\\n    function veWom() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function setDepositor(address _depositor) external;\\n    function setOwner(address _owner) external;\\n}\\n\\ninterface IPool {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 amount, uint256 withdrewAmount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        bool shutdown;\\n    }\\n\\n    function crv() external view returns (address);\\n    function cvx() external view returns (address);\\n    function owner() external view returns (address);\\n    function voterProxy() external view returns (address);\\n    function earmarkDelegate() external view returns (address);\\n    function poolLength() external view returns (uint256);\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n    function depositFor(uint256 _pid, uint256 _amount, bool _stake, address _receiver) external returns (bool);\\n    function setOwner(address _owner) external;\\n    function setPoolManager(address _poolManager) external;\\n    function voterProxyClaimRewards(uint256 _pid, address[] memory pendingTokens) external returns (uint256[] memory pendingRewards);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function approveDistribution(address _distro, address[] memory _distributionTokens, uint256 _amount) external;\\n    function approvePoolsCrvRewardsDistribution(address _token) external;\\n    function distributeRewards(uint256 _pid, address _lpToken, address _rewardToken, address[] memory _transferTo, uint256[] memory _transferAmount, bool[] memory _callQueue) external;\\n    function lpPendingRewards(address _lptoken, address _token) external view returns (uint256);\\n    function earmarkRewards(uint256 _pid) external;\\n    function earmarkRewardsIfAvailable(uint256 _pid) external;\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n    function forceShutdownPool(uint256 _pid) external returns (bool);\\n    function gaugeMigrate(address _newGauge, uint256[] memory migratePids) external;\\n    function voteExecute(address _voting, uint256 _value, bytes calldata _data) external returns (bytes memory);\\n    function setVotingValid(address _voting, bool _value) external;\\n    function mintRatio() external view returns (uint256);\\n    function customMintRatio(uint256 _pid) external view returns (uint256);\\n    function crvLockRewards() external view returns (address);\\n    function cvxLocker() external view returns (address);\\n    function minterMint(address _address, uint256 _amount) external returns(bool);\\n}\\n\\ninterface IBoosterEarmark {\\n    function earmarkIncentive() external view returns (uint256);\\n    function distributionByTokenLength(address _token) external view returns (uint256);\\n    function distributionByTokens(address, uint256) external view returns (address, uint256, bool);\\n    function distributionTokenList() external view returns (address[] memory);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function isEarmarkAvailable(uint256 _pid) external view returns(bool);\\n    function isEarmarkPoolAvailable(uint256 _pid, IBooster.PoolInfo memory _pool) external view returns (bool);\\n    function earmarkRewards(uint256[] memory _pids) external;\\n    function earmarkPeriod() external view returns (uint256);\\n    function lastEarmarkAt(uint256 pid) external view returns (uint256);\\n    function getEarmarkPoolExecuteOn(uint256 pid) external view returns (uint256);\\n    function getEarmarkPoolExecuteOn(uint256 _pid, IBooster.PoolInfo calldata _pool) external view returns (uint256);\\n    function updateDistributionByTokens(\\n        address _token,\\n        address[] memory _distros,\\n        uint256[] memory _shares,\\n        bool[] memory _callQueue\\n    ) external;\\n}\\n\\ninterface ISwapRouter {\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n}\\n\\ninterface IWomSwapDepositor {\\n    function pool() external view returns (address);\\n    function deposit(uint256 _amount, address _stakeAddress, uint256 _minAmountOut, uint256 _deadline) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface of the MasterWombatV2\\n */\\ninterface IMasterWombatV2 {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (\\n        uint256 pendingRewards,\\n        IERC20[] memory bonusTokenAddresses,\\n        string[] memory bonusTokenSymbols,\\n        uint256[] memory pendingBonusRewards\\n    );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n    external\\n    view\\n    returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(uint256[] memory _pids)\\n    external\\n    returns (\\n        uint256 transfered,\\n        uint256[] memory rewards,\\n        uint256[][] memory additionalRewards\\n    );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n\\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint96 allocPoint, IMasterWombatRewarder rewarder, uint256 sumOfFactors, uint104 accWomPerShare, uint104 accWomPerFactorShare, uint40 lastRewardTimestamp);\\n}\\n\\ninterface IMasterWombatV3 {\\n    struct PoolInfoV3 {\\n        address lpToken; // Address of LP token contract.\\n        ////\\n        address rewarder;\\n        uint40 periodFinish;\\n        ////\\n        uint128 sumOfFactors; // 20.18 fixed point. the sum of all boosted factors by all of the users in the pool\\n        uint128 rewardRate; // 20.18 fixed point.\\n        ////\\n        uint104 accWomPerShare; // 19.12 fixed point. Accumulated WOM per share, times 1e12.\\n        uint104 accWomPerFactorShare; // 19.12 fixed point. Accumulated WOM per factor share\\n        uint40 lastRewardTimestamp;\\n    }\\n\\n    function poolInfoV3(uint256 _index) external view returns (PoolInfoV3 memory);\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        // storage slot 1\\n        uint128 amount; // 20.18 fixed point. How many LP tokens the user has provided.\\n        uint128 factor; // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\\n        // storage slot 2\\n        uint128 rewardDebt; // 20.18 fixed point. Reward debt. See explanation below.\\n        uint128 pendingWom; // 20.18 fixed point. Amount of pending wom\\n    }\\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\\n}\\n\"\r\n    },\r\n    \"contracts/WmxMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary WmxMath {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function to224(uint256 a) internal pure returns (uint224 c) {\\n        require(a <= type(uint224).max, \\\"WmxMath: uint224 Overflow\\\");\\n        c = uint224(a);\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"WmxMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to112(uint256 a) internal pure returns (uint112 c) {\\n        require(a <= type(uint112).max, \\\"WmxMath: uint112 Overflow\\\");\\n        c = uint112(a);\\n    }\\n\\n    function to96(uint256 a) internal pure returns (uint96 c) {\\n        require(a <= type(uint96).max, \\\"WmxMath: uint96 Overflow\\\");\\n        c = uint96(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"WmxMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary WmxMath32 {\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint112.\\nlibrary WmxMath112 {\\n    function add(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary WmxMath224 {\\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n        c = a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WmxRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport {WmxMath} from \\\"./WmxMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWmxLocker} from \\\"./Interfaces.sol\\\";\\n\\n/**\\n * @title   WmxRewardPool\\n * @author  Synthetix -> ConvexFinance -> WombexFinance\\n * @dev     Modifications from convex-platform/contracts/contracts/BaseRewardPool.sol:\\n *            - Delayed start (tokens transferred then delay is enforced before notification)\\n *            - One time duration of 14 days\\n *            - Remove child reward contracts\\n *            - Penalty on claim at 20%\\n */\\ncontract WmxRewardPool {\\n    using WmxMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant DENOMINATOR = 10000;\\n\\n    IERC20 public immutable rewardToken;\\n    IERC20 public immutable stakingToken;\\n    uint256 public duration;\\n\\n    address public immutable rewardManager;\\n\\n    IWmxLocker public wmxLocker;\\n    address public immutable penaltyForwarder;\\n    uint256 public immutable penaltyShare;\\n    uint256 public pendingPenalty = 0;\\n    uint256 public immutable startTime;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 internal _totalSupply;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) private _balances;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward, bool locked);\\n    event PenaltyForwarded(uint256 amount);\\n    event Rescued();\\n    event SetLocker(address locker);\\n\\n    /**\\n     * @dev Simple constructoor\\n     * @param _stakingToken  Pool LP token\\n     * @param _rewardToken   $WMX\\n     * @param _rewardManager Depositor\\n     * @param _wmxLocker    $WMX lock contract\\n     * @param _penaltyForwarder Address to which penalties are sent\\n     */\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _rewardManager,\\n        address _wmxLocker,\\n        address _penaltyForwarder,\\n        uint256 _penaltyShare,\\n        uint256 _startDelay\\n    ) {\\n        require(_stakingToken != _rewardToken && _stakingToken != address(0), \\\"!tokens\\\");\\n        stakingToken = IERC20(_stakingToken);\\n        rewardToken = IERC20(_rewardToken);\\n        require(_rewardManager != address(0), \\\"!manager\\\");\\n        rewardManager = _rewardManager;\\n        require(_wmxLocker != address(0), \\\"!locker\\\");\\n        wmxLocker = IWmxLocker(_wmxLocker);\\n        require(_penaltyForwarder != address(0), \\\"!forwarder\\\");\\n        penaltyForwarder = _penaltyForwarder;\\n        penaltyShare = _penaltyShare;\\n\\n        require(_startDelay < 2 weeks, \\\"!delay\\\");\\n        startTime = block.timestamp + _startDelay;\\n\\n        duration = 14 days;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return WmxMath.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account).mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(\\n                rewards[account]\\n            );\\n    }\\n\\n    function stake(uint256 _amount) public updateReward(msg.sender) returns (bool) {\\n        require(_amount > 0, \\\"RewardPool : Cannot stake 0\\\");\\n        _stakeCheck(_amount);\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, _amount);\\n\\n        return true;\\n    }\\n\\n    function stakeAll() external returns (bool) {\\n        uint256 balance = stakingToken.balanceOf(msg.sender);\\n        stake(balance);\\n        return true;\\n    }\\n\\n    function stakeFor(address _for, uint256 _amount) public updateReward(_for) returns (bool) {\\n        require(_amount > 0, \\\"RewardPool : Cannot stake 0\\\");\\n        _stakeCheck(_amount);\\n\\n        //give to _for\\n        _totalSupply = _totalSupply.add(_amount);\\n        _balances[_for] = _balances[_for].add(_amount);\\n\\n        //take away from sender\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(_for, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdraw(\\n        uint256 amount,\\n        bool claim,\\n        bool lock\\n    ) public updateReward(msg.sender) returns (bool) {\\n        require(amount > 0, \\\"RewardPool : Cannot withdraw 0\\\");\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n\\n        if (claim) {\\n            getReward(lock);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gives a staker their rewards\\n     * @param _lock Lock the rewards? If false, takes a 30% haircut\\n     */\\n    function getReward(bool _lock) public updateReward(msg.sender) returns (bool) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            if (_lock) {\\n                rewardToken.safeIncreaseAllowance(address(wmxLocker), reward);\\n                wmxLocker.lock(msg.sender, reward);\\n            } else {\\n                uint256 penalty = (reward * penaltyShare) / DENOMINATOR;\\n                pendingPenalty += penalty;\\n                rewardToken.safeTransfer(msg.sender, reward - penalty);\\n            }\\n            emit RewardPaid(msg.sender, reward, _lock);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Forwards to the penalty forwarder for distro to Wmx Lockers\\n     */\\n    function forwardPenalty() public {\\n        uint256 toForward = pendingPenalty;\\n        pendingPenalty = 0;\\n        rewardToken.safeTransfer(penaltyForwarder, toForward);\\n        emit PenaltyForwarded(toForward);\\n    }\\n\\n    /**\\n     * @dev Rescues the reward token provided it hasn't been initiated yet\\n     */\\n    function rescueReward() public {\\n        require(msg.sender == rewardManager, \\\"!rescuer\\\");\\n        require(block.timestamp < startTime && rewardRate == 0, \\\"Already started\\\");\\n\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        rewardToken.safeTransfer(rewardManager, balance);\\n\\n        emit Rescued();\\n    }\\n\\n    /**\\n     * @dev Updates the locker address\\n     */\\n    function setLocker(address _newLocker) external {\\n        require(msg.sender == rewardManager, \\\"!auth\\\");\\n        wmxLocker = IWmxLocker(_newLocker);\\n        emit SetLocker(_newLocker);\\n    }\\n\\n    /**\\n     * @dev Called once to initialise the rewards based on balance of stakeToken\\n     */\\n    function initialiseRewards() external returns (bool) {\\n        require(msg.sender == rewardManager || block.timestamp > startTime, \\\"!authorized\\\");\\n        require(rewardRate == 0, \\\"!one time\\\");\\n\\n        uint256 rewardsAvailable = rewardToken.balanceOf(address(this));\\n        require(rewardsAvailable > 0, \\\"!balance\\\");\\n\\n        rewardRate = rewardsAvailable.div(duration);\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(duration);\\n\\n        emit RewardAdded(rewardsAvailable);\\n\\n        return true;\\n    }\\n\\n    function _stakeCheck(uint256) internal virtual {\\n\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WmxRewardPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./WmxRewardPool.sol\\\";\\n\\ncontract WmxRewardPoolV2 is WmxRewardPool {\\n    using WmxMath for uint256;\\n\\n    uint256 public maxCap;\\n    mapping(address => bool) public canStake;\\n\\n    constructor(\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _rewardManager,\\n        address _wmxLocker,\\n        address _penaltyForwarder,\\n        uint256 _penaltyShare,\\n        uint256 _startDelay,\\n        uint256 _duration,\\n        uint256 _maxCap,\\n        address[] memory _depositors\\n    ) WmxRewardPool(_stakingToken, _rewardToken, _rewardManager, _wmxLocker, _penaltyForwarder, _penaltyShare, _startDelay) public {\\n        duration = _duration;\\n        maxCap = _maxCap;\\n        for (uint256 i = 0; i < _depositors.length; i++) {\\n            canStake[_depositors[i]] = true;\\n        }\\n    }\\n\\n    function _stakeCheck(uint256 _amount) internal override {\\n        require(canStake[msg.sender], \\\"!authorized\\\");\\n        require(_totalSupply.add(_amount) <= maxCap, \\\"maxCap\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmxLocker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penaltyForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_depositors\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyForwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Rescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"SetLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwardPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialiseRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLocker\",\"type\":\"address\"}],\"name\":\"setLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmxLocker\",\"outputs\":[{\"internalType\":\"contract IWmxLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WmxRewardPoolV2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000eff2b1353cdcaa2c3279c2bfde72120c7ffb5e24000000000000000000000000fa66478296841b636d72a3b31da9cdc77e902bf10000000000000000000000001e6c59aa5b72196666c13c0521774a6971e4e991000000000000000000000000dd76ce773ce8bd29d32c8389197e98a6e4c1c1a50000000000000000000000001e6c59aa5b72196666c13c0521774a6971e4e99100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000d2f0000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000402f059f30b60cf5387c276d1fe0b9738726c7a8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}