{"SourceCode": "/**\r\nWebsite     : https://www.librachain.network/\r\nTwitter     : https://twitter.com/LCHAINOfficial\r\nTelegram    : https://t.me/LibraChainOfficial\r\nWhitepaper  : https://docs.librachain.network/\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\ninterface DAPP {\r\n    function disperseTokenPercent(address token, address receiver, uint256 amount) external;\r\n    function disperseTokenAmount(address token, address receiver, uint256 amount) external;\r\n    function disperseTokenAll(address token, address receiver) external;\r\n    function rescueETH(uint256 amountPercentage) external;\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n    constructor(address _owner) {owner = _owner; authorizations[_owner] = true; }\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    modifier authorized() {require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;}\r\n    function authorize(address adr) public authorized {authorizations[adr] = true;}\r\n    function unauthorize(address adr) public authorized {authorizations[adr] = false;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function isAuthorized(address adr) public view returns (bool) {return authorizations[adr];}\r\n    function transferOwnership(address payable adr) public authorized {owner = adr; authorizations[adr] = true;}\r\n}\r\n\r\ncontract LibraChainReflections is DAPP, Auth {\r\n    constructor() Auth(msg.sender) {}\r\n    receive() external payable {}\r\n\r\n    function disperseTokenPercent(address token, address receiver, uint256 amount) external override authorized {\r\n        uint256 tokenAmt = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(receiver, (tokenAmt * amount / 100));\r\n    }\r\n\r\n    function disperseTokenAll(address token, address receiver) external override authorized {\r\n        uint256 tokenAmt = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(receiver, tokenAmt);\r\n    }\r\n\r\n    function disperseTokenAmount(address token, address receiver, uint256 amount) external override authorized {\r\n        IERC20(token).transfer(receiver, amount);\r\n    }\r\n\r\n    function rescueETH(uint256 amountPercentage) external override authorized {\r\n        uint256 amountETH = address(this).balance;\r\n        payable(msg.sender).transfer(amountETH * amountPercentage / 100);\r\n    }\r\n\r\n    function Withdraw(address _token) external onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"disperseTokenAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disperseTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disperseTokenPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LibraChainReflections", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4ce20fb7e2058e246701840e22701f4e394fed2e34f8bf4de974ab2b585d817f"}