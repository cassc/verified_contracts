{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Platform/DAO/DaoProducts/Promotion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IDAO} from \\\"../Dao/interfaces/IDAO.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC20Burnable} from \\\"./interfaces/IERC20Burnable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {Pausable} from \\\"../../../Pausable.sol\\\";\\r\\n\\r\\ncontract Promotion is Pausable {\\r\\n    enum ProposalType {\\r\\n        change_value,\\r\\n        destroy\\r\\n    }\\r\\n    struct Budget {\\r\\n        uint256 uid;\\r\\n        uint256 amount;\\r\\n        uint256 post_price;\\r\\n        uint256 start_time;\\r\\n        uint256 end_time;\\r\\n        bool resolved;\\r\\n    }\\r\\n    struct Voice {\\r\\n        address eth_address;\\r\\n        bool voice;\\r\\n    }\\r\\n    struct Proposal {\\r\\n        uint256 coeficient;\\r\\n        uint256 start_time;\\r\\n        bool resolved;\\r\\n        ProposalType proposal_type;\\r\\n    }\\r\\n\\r\\n    Proposal[] private _proposals;\\r\\n    uint256[] private _active_promotion_ids;\\r\\n\\r\\n    mapping(uint256 => mapping(address => bool)) private _is_voted;\\r\\n    mapping(uint256 => address[]) private _promotion_projects;\\r\\n    mapping(uint256 => address[]) private _promotion_project_owners;\\r\\n    mapping(uint256 => Voice[]) private _voices;\\r\\n\\r\\n    address private _lexor_address;\\r\\n    address private _crystal_address;\\r\\n    uint256 private _crystal_check_period;\\r\\n    uint256 private _price_coef;\\r\\n    Budget[] private _budgets;\\r\\n\\r\\n    constructor(\\r\\n        address crystal_address_,\\r\\n        address lexor_address_,\\r\\n        address owner_of_\\r\\n    ) Pausable(owner_of_) {\\r\\n        _lexor_address = lexor_address_;\\r\\n        _crystal_address = crystal_address_;\\r\\n        _crystal_check_period = block.timestamp + 182 days;\\r\\n        _price_coef = 70000000000;\\r\\n    }\\r\\n\\r\\n    event proposalCreated(\\r\\n        uint256 uid,\\r\\n        uint256 price,\\r\\n        uint256 start_time,\\r\\n        uint256 end_time,\\r\\n        ProposalType proposal_type\\r\\n    );\\r\\n    event voiceSubmited(address eth_address, bool voice);\\r\\n    event proposalResolved(uint256 uid, bool submited);\\r\\n    event created(\\r\\n        uint256 uid,\\r\\n        uint256 budget,\\r\\n        uint256 post_price,\\r\\n        string promotion_id,\\r\\n        string tweet_id,\\r\\n        uint256 start_time,\\r\\n        uint256 end_time,\\r\\n        address[] project_owners,\\r\\n        address[] projects,\\r\\n        bool resolved\\r\\n    );\\r\\n    event resolved(\\r\\n        uint256 uid,\\r\\n        address[] dao_addresses,\\r\\n        uint256[] percentages,\\r\\n        string object_id,\\r\\n        uint256 dao_value,\\r\\n        address[] receivers,\\r\\n        uint256 watcher_value,\\r\\n        uint256 return_value\\r\\n    );\\r\\n    event claimed(\\r\\n        uint256 uid,\\r\\n        address project_address,\\r\\n        uint256 value,\\r\\n        address recipient\\r\\n    );\\r\\n\\r\\n    function createProposal(\\r\\n        uint256 price_,\\r\\n        ProposalType proposal_type_\\r\\n    ) public {\\r\\n        uint256 newProposalUid = _proposals.length;\\r\\n        _proposals.push(\\r\\n            Proposal(price_, block.timestamp, false, proposal_type_)\\r\\n        );\\r\\n        emit proposalCreated(\\r\\n            newProposalUid,\\r\\n            price_,\\r\\n            block.timestamp,\\r\\n            block.timestamp + 5 days,\\r\\n            proposal_type_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function vote(uint256 uid_, bool voice_) public {\\r\\n        require(\\r\\n            !_is_voted[uid_][msg.sender],\\r\\n            \\\"You vote has been submited already\\\"\\r\\n        );\\r\\n        Proposal memory proposal = _proposals[uid_];\\r\\n        require(\\r\\n            block.timestamp < proposal.start_time + 5 days,\\r\\n            \\\"Governance finished\\\"\\r\\n        );\\r\\n        require(\\r\\n            IERC721(_crystal_address).balanceOf(msg.sender) > 0,\\r\\n            \\\"Not enough metaunits for voting\\\"\\r\\n        );\\r\\n        _voices[uid_].push(Voice(msg.sender, voice_));\\r\\n        emit voiceSubmited(msg.sender, voice_);\\r\\n        _is_voted[uid_][msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function resolveProposal(uint256 uid_) public {\\r\\n        Proposal memory proposal = _proposals[uid_];\\r\\n        require(!proposal.resolved, \\\"Already resolved\\\");\\r\\n        require(\\r\\n            block.timestamp < proposal.start_time + 5 days,\\r\\n            \\\"Governance finished\\\"\\r\\n        );\\r\\n        uint256 voices_for = 0;\\r\\n        uint256 voices_against = 0;\\r\\n        for (uint256 i = 0; i < _voices[uid_].length; i++) {\\r\\n            Voice memory voice = _voices[uid_][i];\\r\\n            uint256 balance = IERC721(_crystal_address).balanceOf(\\r\\n                voice.eth_address\\r\\n            );\\r\\n            if (voice.voice) voices_for += balance;\\r\\n            else voices_against += balance;\\r\\n        }\\r\\n        bool submited = voices_for > voices_against;\\r\\n        if (submited) {\\r\\n            if (proposal.proposal_type == ProposalType.change_value) {\\r\\n                _price_coef = proposal.coeficient;\\r\\n            } else if (proposal.proposal_type == ProposalType.destroy) {\\r\\n                IERC20(_lexor_address).transfer(\\r\\n                    _owner_of,\\r\\n                    IERC20(_lexor_address).balanceOf(address(this))\\r\\n                );\\r\\n                selfdestruct(payable(_owner_of));\\r\\n            }\\r\\n        }\\r\\n        emit proposalResolved(uid_, submited);\\r\\n        _proposals[uid_].resolved = true;\\r\\n    }\\r\\n\\r\\n    function getPrice() public view returns (uint256) {\\r\\n        return IERC20(_lexor_address).totalSupply() / _price_coef;\\r\\n    }\\r\\n\\r\\n    function _clearPromotion(uint256 uid) internal {\\r\\n        uint256 len = _active_promotion_ids.length;\\r\\n        for (uint256 i; i < len; i++) {\\r\\n            if (_active_promotion_ids[i] == uid) {\\r\\n                _active_promotion_ids[i] = _active_promotion_ids[len - 1];\\r\\n                _active_promotion_ids.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        address[] memory projects,\\r\\n        address[] memory project_owners,\\r\\n        string memory promotion_id,\\r\\n        string memory tweet_id,\\r\\n        uint256 amount_,\\r\\n        uint256 start_time_,\\r\\n        uint256 period_\\r\\n    ) external notPaused {\\r\\n        require(amount_ >= 10 ether, \\\"Not enough Lexor\\\");\\r\\n        if (_crystal_check_period > block.timestamp)\\r\\n            require(\\r\\n                IERC721(_crystal_address).balanceOf(msg.sender) >= 1,\\r\\n                \\\"008\\\"\\r\\n            );\\r\\n        IERC20(_lexor_address).transferFrom(msg.sender, address(this), amount_);\\r\\n        _promotion_projects[_budgets.length] = projects;\\r\\n        _promotion_project_owners[_budgets.length] = project_owners;\\r\\n        _active_promotion_ids.push(_budgets.length);\\r\\n        _budgets.push(\\r\\n            Budget(\\r\\n                _budgets.length,\\r\\n                amount_,\\r\\n                getPrice(),\\r\\n                start_time_,\\r\\n                start_time_ + period_,\\r\\n                false\\r\\n            )\\r\\n        );\\r\\n        emit created(\\r\\n            _budgets.length - 1,\\r\\n            amount_,\\r\\n            getPrice(),\\r\\n            promotion_id,\\r\\n            tweet_id,\\r\\n            start_time_,\\r\\n            start_time_ + period_,\\r\\n            project_owners,\\r\\n            projects,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claimAll(\\r\\n        address[] calldata project_address,\\r\\n        uint256[] calldata uids,\\r\\n        uint256[] calldata values\\r\\n    ) external {\\r\\n        uint256 len = project_address.length;\\r\\n        for (uint256 i; i < len; i++) {\\r\\n            claim(project_address[i], uids[i], values[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim(address project_address, uint256 uid, uint256 value) public {\\r\\n        Budget memory budget = _budgets[uid];\\r\\n        require(budget.end_time >= block.timestamp, \\\"Already finished\\\");\\r\\n        require(!budget.resolved, \\\"Already resolved\\\");\\r\\n        require(value <= budget.amount, \\\"Amount too big\\\");\\r\\n\\r\\n        uint256 projects_length = _promotion_projects[uid].length;\\r\\n        bool hasAccess;\\r\\n        for (uint256 i; i < projects_length; i++) {\\r\\n            if (_promotion_projects[uid][i] == project_address) {\\r\\n                hasAccess = true;\\r\\n                break; \\r\\n            }\\r\\n        }\\r\\n        require(hasAccess, \\\"Invalid project\\\");\\r\\n        IERC721 project = IERC721(project_address);\\r\\n        require(project.balanceOf(msg.sender) > 0, \\\"Not project participant\\\");\\r\\n        budget.amount -= value;\\r\\n        uint256 burn_amount = value / 10;\\r\\n        uint256 project_owners_length = _promotion_project_owners[uid].length;\\r\\n        uint256 project_owners_share = (4 * value) / (10 * project_owners_length);\\r\\n        IERC20Burnable(_lexor_address).burn(burn_amount);\\r\\n        for (uint256 i; i < project_owners_length; i++) {\\r\\n            IERC20(_lexor_address).transfer(_promotion_project_owners[uid][i], project_owners_share);\\r\\n        }\\r\\n        IERC20(_lexor_address).transfer(msg.sender, value / 2);\\r\\n        emit claimed(uid, project_address, value, msg.sender);\\r\\n        if (budget.amount == 0) budget.resolved = true;\\r\\n        _budgets[uid] = budget;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Platform/DAO/DaoProducts/interfaces/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20Burnable {\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Platform/DAO/Dao/interfaces/IDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAO {\\r\\n    function getDaosByOwner(address owner_of)\\r\\n        external\\r\\n        returns (address[] memory);\\r\\n\\r\\n    function getDaoOwner(address dao_address)\\r\\n        external\\r\\n        returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @author MetaPlayerOne DAO\\r\\n * @title Pausable\\r\\n */\\r\\ncontract Pausable {\\r\\n    address internal _owner_of;\\r\\n    bool internal _paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev setup owner of this contract with paused off state.\\r\\n     */\\r\\n    constructor(address owner_of_) {\\r\\n        _owner_of = owner_of_;\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev modifier which can be used on child contract for checking if contract services are paused.\\r\\n     */\\r\\n    modifier notPaused() {\\r\\n        require(!_paused, \\\"Contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function which setup paused variable.\\r\\n     * @param paused_ new boolean value of paused condition.\\r\\n     */\\r\\n    function setPaused(bool paused_) external {\\r\\n        require(_paused == paused_, \\\"Param has been asigned already\\\");\\r\\n        require(_owner_of == msg.sender, \\\"Permission address\\\");\\r\\n        _paused = paused_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function which setup owner variable.\\r\\n     * @param owner_of_ new owner of contract.\\r\\n     */\\r\\n    function setOwner(address owner_of_) external {\\r\\n        require(_owner_of == msg.sender, \\\"Permission address\\\");\\r\\n        _owner_of = owner_of_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function returns owner of contract.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner_of;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crystal_address_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lexor_address_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_of_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"project_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"post_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"promotion_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tweet_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"project_owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"projects\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"name\":\"created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Promotion.ProposalType\",\"name\":\"proposal_type\",\"type\":\"uint8\"}],\"name\":\"proposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"submited\",\"type\":\"bool\"}],\"name\":\"proposalResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"dao_addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"object_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dao_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"watcher_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"return_value\",\"type\":\"uint256\"}],\"name\":\"resolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eth_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voice\",\"type\":\"bool\"}],\"name\":\"voiceSubmited\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"project_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"uids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"projects\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"project_owners\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"promotion_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tweet_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_time_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period_\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"},{\"internalType\":\"enum Promotion.ProposalType\",\"name\":\"proposal_type_\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid_\",\"type\":\"uint256\"}],\"name\":\"resolveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_of_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voice_\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Promotion", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000072771cfac63092255ab9a7ec03129f05748447090000000000000000000000008c94c68e92640fb8dac8958d128eef9a920f39930000000000000000000000008e66691515badbaca6ee686d74c8ef29e1afe57f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}