{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Filters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport './IFilters.sol';\\nimport './Filters-generated.sol';\\nimport './FilterTraits.sol';\\nimport './Random.sol';\\nimport './RandomCtx.sol';\\nimport './Utils.sol';\\n\\ncontract Filters is IFilters {\\n    using Utils for uint256; \\n\\n    function wrapInGandApplyFilter(string memory svgElement, string memory filterId) internal pure returns (string memory) {\\n        return  string.concat('<g filter=\\\"',string.concat('url(#', filterId, ')'),'\\\">', svgElement, '</g>');\\n    }\\n\\n    // function wrapInGandApplyFilter(string memory svgElement, Traits.FilterType filter) internal pure returns (string memory) {\\n    //     return wrapInGandApplyFilter(svgElement, getFilterId(filter));\\n    // }\\n\\n    // function getFilterId(Traits.FilterType filter) internal pure returns (string memory) {\\n    //     // TODO: replace with just returing enum ID to string\\n    //     if (filter == Traits.FilterType.NONE) return \\\"none\\\";\\n    //     if (filter == Traits.FilterType.GRAYSCALE) return \\\"grayscale\\\";\\n    //     if (filter == Traits.FilterType.SEPIA) return \\\"sepia\\\";\\n    //     return \\\"\\\";\\n    // }\\n    \\n    function randBlendMode(RandomCtx memory rndCtx, bool noDifference) internal pure returns (string memory) {\\n        int256 mode = int8(Random.randWithProbabilities(rndCtx, hex\\\"0A01010101\\\"));\\n\\n        if (mode == 1) return \\\"screen\\\";\\n        if (mode == 2) return \\\"multiply\\\";\\n        if (mode == 3) return \\\"color-burn\\\";\\n\\n        if (noDifference) return \\\"normal\\\";\\n\\n        if (mode == 4) return \\\"difference\\\";\\n\\n        return \\\"normal\\\";           \\n    }\\n\\n    function randomHtmlColor(RandomCtx memory rndCtx) internal pure returns (string memory) {\\n        int256 color = int8(Random.randWithProbabilities(rndCtx, hex\\\"0A01010101\\\"));\\n\\n        if (color == 1) return \\\"#F1E5AC\\\";\\n        if (color == 2) return \\\"#FAEDEB\\\";\\n        if (color == 3) return \\\"#FFE5B4\\\";\\n        if (color == 4) return \\\"#FCE8FF\\\";\\n\\n        return \\\"white\\\";                   \\n    }\\n\\n    // following are to workaround a bug with viaIR, causing Random.sol to be dynamically linked, instead of inlining it\\n    function randUInt32(RandomCtx memory ctx) internal pure returns (uint32) {\\n        return Random.randUInt32(ctx);\\n    }\\n\\n    function randFloat(RandomCtx memory ctx, uint8 decimalPlaces, int256 from, int256 to, int256 denominator) internal pure returns (string memory result) {\\n        return Random.randFloat(ctx, decimalPlaces, from, to, denominator);\\n    }\\n\\n    function randRange(RandomCtx memory ctx, int256 from, int256 to) internal pure returns (int256) {\\n        return Random.randRange(ctx, from, to);\\n    }\\n\\n    function randBool(RandomCtx memory ctx, int256 trueProbability) internal pure returns (bool) {\\n        return Random.randBool(ctx, trueProbability);\\n    }\\n\\n    function generateFilterString(RandomCtx memory rndCtx, FilterType filter, string memory filterId) internal pure returns (string memory) {               \\n        if (filter == FilterType.NONE) return \\\"\\\";\\n        if (filter == FilterType.GRAYSCALE) return FiltersGenerated.createFilter_grayscale(filterId);\\n        if (filter == FilterType.SEPIA) return FiltersGenerated.createFilter_sepia(filterId);\\n        if (filter == FilterType.WATERCOLOR) {\\n            return FiltersGenerated.createFilter_watercolor(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),                // seed 1\\n                uint256(randUInt32(rndCtx)).toString(),                // seed 2\\n                uint256(randRange(rndCtx, 1, 2)).toString(),           // glowRaius\\n                \\\"out\\\",\\n                randFloat(rndCtx, 2, 12, 20, 10),                      // colorK1\\n                randFloat(rndCtx, 2, 30, 70, 100),                     // colorK3\\n                randFloat(rndCtx, 2, 14, 20, 10)\\n            );\\n        }\\n        if (filter == FilterType.WATERCOLOR_BRIGHT) {\\n            if (randBool(rndCtx, 70)) {\\n                string memory operator = \\\"atop\\\";\\n\\n                if (randBool(rndCtx, 50)) {\\n                    if (randBool(rndCtx, 50)) {\\n                        operator = \\\"atop\\\";\\n                    } else {\\n                        operator = \\\"in\\\";\\n                    }\\n                }\\n\\n                return FiltersGenerated.createFilter_watercolor(filterId,\\n                    uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                    uint256(randUInt32(rndCtx)).toString(),              // seed 2\\n                    uint256(randRange(rndCtx, 1, 4)).toString(),         // glowRaius\\n                    operator,\\n                    randFloat(rndCtx, 2, 25, 35, 10),                    // colorK1\\n                    randFloat(rndCtx, 2, 250, 300, 100),                 // colorK3\\n                    \\\"1.4\\\"\\n                );\\n            } else {\\n                string memory operator = \\\"in\\\";\\n\\n                if (randBool(rndCtx, 80)) {\\n                    operator = \\\"atop\\\";\\n                }\\n\\n                return FiltersGenerated.createFilter_watercolor(filterId,\\n                    uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                    uint256(randUInt32(rndCtx)).toString(),              // seed 2\\n                    uint256(randRange(rndCtx, 1, 5)).toString(),         // glowRaius\\n                    operator,\\n                    randFloat(rndCtx, 2, 70, 120, 10),                   // colorK1\\n                    randFloat(rndCtx, 2, 300, 500, 100),                 // colorK3\\n                    randFloat(rndCtx, 2, 7, 18, 10)\\n                );\\n\\n            }\\n        }\\n\\n        if (filter == FilterType.STONE) {\\n            return FiltersGenerated.createFilter_stoneSurface(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                randFloat(rndCtx, 5, 5, 15, 10000),\\n                uint256(randRange(rndCtx, 3, 4)).toString(),  \\n                uint256(randRange(rndCtx, 4, 10)).toString(),  \\n                randomHtmlColor(rndCtx),\\n                uint256(randRange(rndCtx, 4, 10)).toString()\\n            );\\n        }\\n\\n        if (filter == FilterType.SMOKE) {\\n            return FiltersGenerated.createFilter_displacement2(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                randFloat(rndCtx, 2, 2, 3, 100),                     // baseFreq\\n                uint256(randRange(rndCtx, 1, 4)).toString(),         // octaves\\n                uint256(randRange(rndCtx, 30, 50)).toString(),       // scale\\n                \\\"2\\\", \\n                uint256(randRange(rndCtx, 5, 25)).toString(), \\n                randBlendMode(rndCtx, false)\\n            );\\n        }\\n\\n        if (filter == FilterType.DISPLACEMENT) {\\n            return FiltersGenerated.createFilter_displacement3(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                randFloat(rndCtx, 2, 1, 5, 100),                     // baseFreq\\n                \\\"5\\\",                                                 //octaves\\n                uint256(randRange(rndCtx, 1, 10)).toString(),        // blur\\n                uint256(randRange(rndCtx, 40, 80)).toString()        // scale\\n            );\\n        }\\n\\n        if (filter == FilterType.FROZEN) {\\n            return FiltersGenerated.createFilter_displacement2(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                Random.randFloat(rndCtx, 2, 2, 3, 10),                     // baseFreq\\n                uint256(randRange(rndCtx, 1, 4)).toString(),         // octaves\\n                uint256(randRange(rndCtx, 20, 30)).toString(),       // scale\\n                \\\"1\\\", \\\"1\\\", \\n                randBlendMode(rndCtx, false)\\n            );\\n        }\\n\\n        if (filter == FilterType.SPLASH) {\\n            return FiltersGenerated.createFilter_displacement2(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                \\\"0.05\\\",                                              // baseFreq\\n                uint256(randRange(rndCtx, 1, 4)).toString(),         // octaves\\n                uint256(randRange(rndCtx, 80, 100)).toString(),      // scale\\n                uint256(randRange(rndCtx, 1, 4)).toString(),  \\n                uint256(randRange(rndCtx, 3, 10)).toString(),  \\n                randBlendMode(rndCtx, false)\\n            );\\n        }\\n\\n        if (filter == FilterType.RECOLORING) {\\n            string memory fx = randFloat(rndCtx, 4, 1, 10, 1000);\\n            string memory fy = fx;\\n            \\n            // if (Random.randBool(rndCtx, 20)) {\\n            //     fy = Random.randFloat(rndCtx, 4, 1, 10, 1000);\\n            // }\\n\\n            return FiltersGenerated.createFilter_patternRecoloring(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                fx,          \\n                fy\\n            );\\n        }\\n\\n        if (filter == FilterType.SPARKS) {\\n            return FiltersGenerated.createFilter_sparks(filterId,\\n                uint256(randUInt32(rndCtx)).toString(),              // seed 1\\n                randFloat(rndCtx, 4, 1, 10, 1000),          \\n                uint256(randRange(rndCtx, 1, 10)).toString(),\\n                randFloat(rndCtx, 4, 2, 20, 10)   \\n            );\\n        }\\n\\n        if (filter == FilterType.GLASS) {\\n            return FiltersGenerated.createFilter_glass(filterId);\\n        }\\n\\n        if (filter == FilterType.SPREAD) {\\n            return FiltersGenerated.createFilter_spread(filterId,\\n                uint256(randRange(rndCtx, 1, 10)).toString(),\\n                randBlendMode(rndCtx, true)\\n            );\\n        }\\n\\n        if (filter == FilterType.SPREAD_BRIGHT) {\\n            string memory offset = uint256(randRange(rndCtx, 1, 20)).toString();\\n            return FiltersGenerated.createFilter_spreadBright(filterId,\\n                uint256(randRange(rndCtx, 3, 10)).toString(),\\n                offset, offset\\n            );\\n        }\\n\\n        if (filter == FilterType.INNER_OUTLINE) {\\n            return FiltersGenerated.createFilter_innerOutline1(filterId);\\n        }\\n\\n        if (filter == FilterType.COLOR_OUTLINE) {\\n            return FiltersGenerated.createFilter_colorOutlineIn(filterId);\\n        }\\n\\n        if (filter == FilterType.NOISE_SHADOW) {\\n            return FiltersGenerated.createFilter_noiseShadow(filterId,\\n                uint256(randRange(rndCtx, 5, 25)).toString(),\\n                uint256(randRange(rndCtx, 4, 11)).toString()\\n            );\\n        }\\n\\n        if (filter == FilterType.RECOLORING2) {\\n            return FiltersGenerated.createFilter_recolor2(filterId,\\n                randFloat(rndCtx, 4, 1, 20, 1000),        \\n                uint256(randRange(rndCtx, 2, 6)).toString(),\\n                uint256(randUInt32(rndCtx)).toString()\\n            );\\n        }\\n\\n        if (filter == FilterType.CHALK) {\\n            return FiltersGenerated.createFilter_chalk(filterId);\\n        }\\n\\n        if (filter == FilterType.BLACK_OUTLINE) {\\n            return FiltersGenerated.createFilter_blackOutline(filterId,\\n                uint256(randRange(rndCtx, 1, 5)).toString(),\\n                uint256(randRange(rndCtx, 1, 3)).toString(),\\n                uint256(randRange(rndCtx, 8, 10)).toString()\\n            );\\n        }\\n\\n        if (filter == FilterType.HALF_TONE) {\\n            return FiltersGenerated.createFilter_halftone(filterId);\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function generateAllFilterStrings(RandomCtx memory rndCtx, FilterTraits memory filter) external pure override returns (string memory) {\\n        string memory mainFilter = generateFilterString(rndCtx, filter.mainFilterType, \\\"mainF\\\");\\n\\n        string memory postFilter = filter.additonalLighting ? FiltersGenerated.createFilter_light(\\\"postF\\\"): \\\"\\\";\\n        //string memory darkenFilter = filter.darken ? FiltersGenerated.createFilter_brightnessAndSaturation(\\\"darkenF\\\", \\\"1\\\", \\\"1\\\"): \\\"\\\";\\n\\n        return string.concat(mainFilter, \\\" \\\", postFilter);//, \\\" \\\", darkenFilter);\\n    }\\n\\n    function applyAllFilters(FilterTraits memory filter, string memory svgElement) external pure override returns (string memory) {\\n        string memory result = svgElement;\\n        \\n        if (filter.mainFilterType != FilterType.NONE) {\\n            result = wrapInGandApplyFilter(result, \\\"mainF\\\");\\n        }\\n\\n        if (filter.additonalLighting) {\\n            result = wrapInGandApplyFilter(result, \\\"postF\\\");\\n        }\\n\\n        return result;\\n    }        \\n}\"\r\n    },\r\n    \"contracts/IFilters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport './FilterTraits.sol';\\nimport './RandomCtx.sol';\\n\\ninterface IFilters {\\n    function generateAllFilterStrings(RandomCtx memory rndCtx, FilterTraits memory filter) external view returns (string memory);\\n    function applyAllFilters(FilterTraits memory filter, string memory svgElement) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/Filters-generated.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\nimport './SVG.sol';\\n\\n/** AUTOGENERATED - DO NOT MODIFY THIS FILE DIRECTLY */\\n\\nlibrary FiltersGenerated {\\n\\n    function createFilter_watercolor(string memory id, string memory seed1, string memory seed2, string memory glowRadius, string memory compositeOperator, string memory colorK1, string memory colorK3, string memory secondColorK3) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence result=\\\"f0\\\" type=\\\"fractalNoise\\\" baseFrequency=\\\".04\\\" numOctaves=\\\"2\\\" seed=\\\"', seed1, '\\\"/>', \\n            '<feTurbulence result=\\\"f15\\\" type=\\\"fractalNoise\\\" baseFrequency=\\\".2\\\" numOctaves=\\\"3\\\" seed=\\\"', seed2, '\\\"/>', \\n            '<feComposite result=\\\"f17\\\" in=\\\"SourceGraphic\\\" in2=\\\"f0\\\" operator=\\\"arithmetic\\\" k1=\\\"0.5\\\" k2=\\\"0.6\\\" k4=\\\"-.07\\\"/>'\\n            '<feMorphology id=\\\"water\\\" result=\\\"f19\\\" in=\\\"f17\\\" operator=\\\"dilate\\\" radius=\\\"1\\\"/>'\\n            '<feDisplacementMap result=\\\"f19\\\" in=\\\"f19\\\" in2=\\\"f0\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" scale=\\\"2\\\"/>'\\n            '<feDisplacementMap result=\\\"f19\\\" in=\\\"f19\\\" in2=\\\"f15\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" scale=\\\"4\\\"/>'\\n            '<feDisplacementMap result=\\\"f16\\\" in=\\\"f19\\\" in2=\\\"f0\\\" xChannelSelector=\\\"A\\\" yChannelSelector=\\\"A\\\" scale=\\\"6\\\"/>'\\n            '<feGaussianBlur result=\\\"f16\\\" in=\\\"f16\\\" stdDeviation=\\\"1\\\"/>'\\n            '<feComposite result=\\\"f19\\\" in=\\\"f19\\\" in2=\\\"f16\\\" operator=\\\"arithmetic\\\" k1=\\\"1.2\\\" k2=\\\"-.25\\\" k3=\\\"-.25\\\" k4=\\\"0\\\"/>'\\n            '<feDisplacementMap result=\\\"f18\\\" in=\\\"f17\\\" in2=\\\"f0\\\" xChannelSelector=\\\"G\\\" yChannelSelector=\\\"R\\\" scale=\\\"4\\\"/>'\\n            '<feDisplacementMap result=\\\"f18\\\" in=\\\"f18\\\" in2=\\\"f15\\\" xChannelSelector=\\\"A\\\" yChannelSelector=\\\"G\\\" scale=\\\"2\\\"/>'\\n            '<feDisplacementMap result=\\\"f20\\\" in=\\\"f17\\\" in2=\\\"f0\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"A\\\" scale=\\\"16\\\"/>'\\n            '<feMorphology result=\\\"f7\\\" in=\\\"f20\\\" operator=\\\"erode\\\" radius=\\\"', glowRadius, '\\\"/>', \\n            '<feComposite result=\\\"f20\\\" in=\\\"f20\\\" in2=\\\"f7\\\" operator=\\\"', compositeOperator);\\n        result = string.concat(result, '\\\"/>', \\n            '<feGaussianBlur result=\\\"f20\\\" in=\\\"f20\\\" stdDeviation=\\\"1.6\\\"/>'\\n            '<feComposite id=\\\"color\\\" result=\\\"f18\\\" in=\\\"f18\\\" in2=\\\"f20\\\" operator=\\\"arithmetic\\\" k1=\\\"', colorK1, '\\\" k2=\\\"0\\\" k3=\\\"', colorK3, '\\\"/>', \\n            '<feComposite in=\\\"f19\\\" in2=\\\"f18\\\" operator=\\\"arithmetic\\\" k1=\\\"-0.8\\\" k2=\\\"0.8\\\" k3=\\\"', secondColorK3, '\\\"/>', \\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_displacement2(string memory id, string memory seed, string memory baseFreq, string memory octaves, string memory scale, string memory radius, string memory blur, string memory blendMode) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence type=\\\"fractalNoise\\\" seed=\\\"', seed, '\\\" baseFrequency=\\\"', baseFreq, '\\\" numOctaves=\\\"', octaves, '\\\"/>', \\n            '<feDisplacementMap in=\\\"SourceGraphic\\\" xChannelSelector=\\\"G\\\" scale=\\\"', scale, '\\\" result=\\\"f8\\\"/>', \\n            '<feMorphology operator=\\\"dilate\\\" radius=\\\"');\\n        result = string.concat(result, radius, '\\\"/>', \\n            '<feGaussianBlur stdDeviation=\\\"', blur, '\\\"/>', \\n            '<feBlend in2=\\\"f8\\\" mode=\\\"', blendMode, '\\\"/>', \\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_displacement3(string memory id, string memory seed, string memory baseFreq, string memory octaves, string memory blur, string memory scale) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence type=\\\"fractalNoise\\\" seed=\\\"', seed, '\\\" baseFrequency=\\\"', baseFreq, '\\\" numOctaves=\\\"', octaves, '\\\"/>', \\n            '<feGaussianBlur result=\\\"f9\\\" stdDeviation=\\\"', blur, '\\\"/>', \\n            '<feDisplacementMap in2=\\\"f9\\\" in=\\\"SourceGraphic\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"B\\\" scale=\\\"');\\n        result = string.concat(result, scale, '\\\"/>', \\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_patternRecoloring(string memory id, string memory seed, string memory freqX, string memory freqY) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence seed=\\\"', seed, '\\\" baseFrequency=\\\"', freqX, ' ', freqY, '\\\"/>', \\n            '<feColorMatrix values=\\\"0 0 0 2.5 0 0 2.5 0 0 0 0 0 1.5 0 0 0 0 0 0 2.5\\\"/>'\\n            '<feComposite in2=\\\"SourceGraphic\\\" operator=\\\"in\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_stoneSurface(string memory id, string memory seed, string memory baseFreq, string memory diffuse, string memory surfaceScale, string memory color, string memory elevation) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence type=\\\"fractalNoise\\\" seed=\\\"', seed, '\\\" baseFrequency=\\\"', baseFreq, '\\\" numOctaves=\\\"9\\\"/>', \\n            '<feComponentTransfer>'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 .02 .1 .25 .2 .25 .3 .4 .5 .6 .7 .8\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feDiffuseLighting diffuseConstant=\\\"', diffuse, '\\\" surfaceScale=\\\"', surfaceScale, '\\\" lighting-color=\\\"', color);\\n        result = string.concat(result, '\\\">', \\n            '<feDistantLight elevation=\\\"', elevation, '\\\"/>', \\n            '</feDiffuseLighting>'\\n            '<feComposite in2=\\\"SourceGraphic\\\" operator=\\\"in\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_sparks(string memory id, string memory seed, string memory baseFreq, string memory octaves, string memory amplitude) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence type=\\\"fractalNoise\\\" seed=\\\"', seed, '\\\" baseFrequency=\\\"', baseFreq, '\\\" numOctaves=\\\"', octaves, '\\\"/>', \\n            '<feComponentTransfer>'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 1 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feColorMatrix values=\\\"0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1\\\"/>'\\n            '<feComponentTransfer>'\\n            '<feFuncR type=\\\"gamma\\\" exponent=\\\"8\\\"/>'\\n            '<feFuncG type=\\\"gamma\\\" amplitude=\\\"', amplitude, '\\\" exponent=\\\"32\\\"/>', \\n            '<feFuncB type=\\\"gamma\\\" amplitude=\\\".65\\\" exponent=\\\"64\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComposite in2=\\\"SourceGraphic\\\" operator=\\\"in\\\"/>'\\n            '<feBlend in2=\\\"SourceGraphic\\\" mode=\\\"normal\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_light(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feGaussianBlur in=\\\"SourceAlpha\\\" stdDeviation=\\\"3\\\" result=\\\"f9\\\"/>'\\n            '<feSpecularLighting in=\\\"f9\\\" specularExponent=\\\"128\\\" result=\\\"f11\\\" lighting-color=\\\"white\\\">'\\n            '<feDistantLight azimuth=\\\"225\\\" elevation=\\\"70\\\"/>'\\n            '</feSpecularLighting>'\\n            '<feComposite in=\\\"f11\\\" in2=\\\"SourceAlpha\\\" operator=\\\"in\\\" result=\\\"f12\\\"/>'\\n            '<feComposite in=\\\"SourceGraphic\\\" in2=\\\"f12\\\" operator=\\\"arithmetic\\\" k2=\\\"1\\\" k3=\\\"1\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_sepia(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" color-interpolation-filters=\\\"sRGB\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\">', \\n            '<feColorMatrix type=\\\"matrix\\\" values=\\\"0.393 0.769 0.189 0 0 0.349 0.686 0.168 0 0 0.272 0.534 0.131 0 0 0 0 0 1 0\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_grayscale(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" color-interpolation-filters=\\\"sRGB\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\">', \\n            '<feColorMatrix type=\\\"matrix\\\" values=\\\"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_glass(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feBlend result=\\\"f24\\\" mode=\\\"screen\\\" in2=\\\"SourceGraphic\\\"/>'\\n            '<feGaussianBlur stdDeviation=\\\"2\\\" result=\\\"f9\\\"/>'\\n            '<feComposite operator=\\\"xor\\\" in=\\\"f9\\\" in2=\\\"f24\\\" result=\\\"f25\\\"/>'\\n            '<feComposite result=\\\"f26\\\" in=\\\"f25\\\" operator=\\\"xor\\\" in2=\\\"f25\\\"/>'\\n            '<feGaussianBlur result=\\\"f9\\\" stdDeviation=\\\"3\\\" in=\\\"f26\\\"/>'\\n            '<feSpecularLighting result=\\\"f11\\\" specularExponent=\\\"55\\\" specularConstant=\\\"1.5\\\" surfaceScale=\\\"6\\\" in=\\\"f9\\\">'\\n            '<fePointLight z=\\\"20000\\\" y=\\\"-8000\\\" x=\\\"-5000\\\"/>'\\n            '</feSpecularLighting>'\\n            '<feComposite in=\\\"f9\\\" k3=\\\"1\\\" k2=\\\"1.5\\\" operator=\\\"arithmetic\\\" in2=\\\"SourceGraphic\\\" result=\\\"f25\\\"/>'\\n            '<feComposite in=\\\"f11\\\" operator=\\\"atop\\\" in2=\\\"f25\\\" result=\\\"f25\\\"/>'\\n            '<feBlend mode=\\\"multiply\\\" in2=\\\"f25\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_spread(string memory id, string memory blur, string memory blendMode) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feGaussianBlur result=\\\"f27\\\" stdDeviation=\\\"', blur, '\\\" in=\\\"SourceGraphic\\\"/>', \\n            '<feComposite result=\\\"f28\\\" operator=\\\"in\\\" in2=\\\"f27\\\" in=\\\"f27\\\"/>'\\n            '<feComposite result=\\\"f29\\\" operator=\\\"arithmetic\\\" k2=\\\"1\\\" in2=\\\"f28\\\" in=\\\"f28\\\"/>'\\n            '<feColorMatrix values=\\\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 10 0\\\" in=\\\"f29\\\"/>'\\n            '<feGaussianBlur result=\\\"f30\\\" stdDeviation=\\\"1\\\"/>'\\n            '<feColorMatrix result=\\\"f31\\\" values=\\\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 5 -1\\\" in=\\\"f30\\\"/>'\\n            '<feBlend result=\\\"f32\\\" mode=\\\"', blendMode, '\\\" in2=\\\"f31\\\" in=\\\"SourceGraphic\\\"/>', \\n            '<feComposite operator=\\\"in\\\" in2=\\\"f31\\\" in=\\\"f32\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_spreadBright(string memory id, string memory blur, string memory offsetX, string memory offsetY) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feGaussianBlur result=\\\"f9\\\" stdDeviation=\\\"', blur, '\\\"/>', \\n            '<feOffset result=\\\"f33\\\" dx=\\\"', offsetX, '\\\" dy=\\\"', offsetY, '\\\"/>', \\n            '<feComposite in2=\\\"f9\\\" operator=\\\"in\\\" in=\\\"f33\\\" result=\\\"f26\\\"/>'\\n            '<feBlend in2=\\\"f26\\\" mode=\\\"difference\\\" in=\\\"f26\\\" result=\\\"f24\\\"/>'\\n            '<feConvolveMatrix result=\\\"f25\\\" in=\\\"f24\\\" targetX=\\\"0\\\" bias=\\\"0\\\" divisor=\\\"2\\\" kernelMatrix=\\\"-2 0 2 0 4 0 2 0 2\\\" order=\\\"3 3\\\"/>'\\n            '<feComposite in2=\\\"f25\\\" operator=\\\"atop\\\" in=\\\"f26\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_innerOutline1(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feGaussianBlur stdDeviation=\\\"2\\\" in=\\\"SourceAlpha\\\" result=\\\"f9\\\"/>'\\n            '<feComposite in2=\\\"f9\\\" operator=\\\"arithmetic\\\" k1=\\\"-1\\\" k2=\\\"3.2\\\" k4=\\\"-2\\\"/>'\\n            '<feColorMatrix values=\\\"0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 10 0\\\" result=\\\"f26\\\"/>'\\n            '<feComposite in2=\\\"f26\\\" operator=\\\"out\\\" in=\\\"SourceGraphic\\\" result=\\\"f34\\\"/>'\\n            '<feBlend in2=\\\"f34\\\" mode=\\\"darken\\\" in=\\\"f34\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_colorOutlineIn(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feGaussianBlur stdDeviation=\\\"2\\\"/>'\\n            '<feColorMatrix values=\\\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 10 -9\\\" result=\\\"f26\\\"/>'\\n            '<feComposite in2=\\\"f26\\\" operator=\\\"in\\\" in=\\\"SourceGraphic\\\" result=\\\"f35\\\"/>'\\n            '<feFlood in=\\\"f35\\\"/>'\\n            '<feComposite in2=\\\"SourceGraphic\\\" operator=\\\"in\\\" result=\\\"f26\\\"/>'\\n            '<feBlend in2=\\\"f26\\\" mode=\\\"normal\\\" in=\\\"f35\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_recolor2(string memory id, string memory baseFreq, string memory octaves, string memory seed) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feGaussianBlur result=\\\"f9\\\" stdDeviation=\\\"5\\\"/>'\\n            '<feTurbulence baseFrequency=\\\"', baseFreq, '\\\" numOctaves=\\\"', octaves, '\\\" type=\\\"turbulence\\\" result=\\\"f36\\\" seed=\\\"', seed, '\\\"/>', \\n            '<feComposite in2=\\\"f9\\\" operator=\\\"in\\\" in=\\\"f9\\\" result=\\\"f25\\\"/>'\\n            '<feDisplacementMap in2=\\\"f25\\\" scale=\\\"120\\\" xChannelSelector=\\\"A\\\" yChannelSelector=\\\"A\\\" in=\\\"f36\\\" result=\\\"f37\\\"/>'\\n            '<feComposite in2=\\\"f37\\\" operator=\\\"arithmetic\\\" k1=\\\"2\\\" k2=\\\".25\\\" k3=\\\"2.5\\\" in=\\\"SourceGraphic\\\" result=\\\"f25\\\"/>'\\n            '<feComposite in2=\\\"SourceGraphic\\\" operator=\\\"in\\\" in=\\\"f25\\\" result=\\\"f25\\\"/>'\\n            '<feBlend in2=\\\"f25\\\" mode=\\\"screen\\\" result=\\\"f24\\\"/>'\\n            '<feBlend in2=\\\"f24\\\" mode=\\\"multiply\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_chalk(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence result=\\\"f36\\\" numOctaves=\\\"5\\\" seed=\\\"0\\\" type=\\\"fractalNoise\\\" baseFrequency=\\\".4\\\"/>'\\n            '<feOffset dy=\\\"-5\\\" dx=\\\"-5\\\"/>'\\n            '<feDisplacementMap in2=\\\"f36\\\" scale=\\\"30\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\" in=\\\"SourceGraphic\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_noiseShadow(string memory id, string memory stdDeviation, string memory slope) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-50%\\\" y=\\\"-50%\\\" width=\\\"200%\\\" height=\\\"200%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feOffset in=\\\"SourceAlpha\\\" dx=\\\"0\\\" dy=\\\"0\\\" result=\\\"f33\\\"/>'\\n            '<feGaussianBlur in=\\\"f33\\\" stdDeviation=\\\"', stdDeviation, '\\\" result=\\\"f9\\\"/>', \\n            '<feComponentTransfer in=\\\"f9\\\" result=\\\"f38\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\".65 .68 .75 .95 1 1 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f9\\\" in2=\\\"f38\\\" result=\\\"f26\\\"/>'\\n            '<feComponentTransfer in=\\\"f26\\\" result=\\\"f38\\\">'\\n            '<feFuncA type=\\\"linear\\\" slope=\\\"', slope, '\\\"/>', \\n            '</feComponentTransfer>'\\n            '<feColorMatrix in=\\\"f38\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.48 0\\\" result=\\\"f39\\\"/>'\\n            '<feTurbulence result=\\\"f40\\\" type=\\\"fractalNoise\\\" numOctaves=\\\"6\\\" baseFrequency=\\\"1.98\\\" seed=\\\"777\\\"/>'\\n            '<feColorMatrix in=\\\"f40\\\" type=\\\"matrix\\\" values=\\\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 7 -3\\\" result=\\\"f41\\\"/>'\\n            '<feComposite operator=\\\"arithmetic\\\" in=\\\"f39\\\" in2=\\\"f41\\\" k1=\\\"0.51\\\" k2=\\\"0.49\\\" result=\\\"f42\\\"/>'\\n            '<feMerge>'\\n            '<feMergeNode in=\\\"f42\\\"/>'\\n            '<feMergeNode in=\\\"SourceGraphic\\\"/>'\\n            '</feMerge>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_blackOutline(string memory id, string memory stdDeviation, string memory k2, string memory k3) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feGaussianBlur result=\\\"f9\\\" in=\\\"SourceAlpha\\\" stdDeviation=\\\"', stdDeviation, '\\\"/>', \\n            '<feComposite in2=\\\"f9\\\" operator=\\\"arithmetic\\\" k2=\\\"', k2, '\\\" k3=\\\"', k3, '\\\" in=\\\"SourceGraphic\\\" result=\\\"f26\\\"/>', \\n            '<feComposite in2=\\\"f26\\\" operator=\\\"in\\\" in=\\\"f26\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n\\n    function createFilter_halftone(string memory id) internal pure returns (string memory) {\\n        string memory result = string.concat(\\n            '<filter id=\\\"', id, '\\\" x=\\\"-10%\\\" y=\\\"-10%\\\" height=\\\"120%\\\" width=\\\"120%\\\" color-interpolation-filters=\\\"sRGB\\\">', \\n            '<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.7\\\" numOctaves=\\\"8\\\"/>'\\n            '<feColorMatrix type=\\\"saturate\\\" values=\\\"0\\\"/>'\\n            '<feComponentTransfer result=\\\"f43\\\">'\\n            '<feFuncR type=\\\"discrete\\\" tableValues=\\\"0 0 0 0 0 0 0 0 1 1\\\"/>'\\n            '<feFuncG type=\\\"discrete\\\" tableValues=\\\"0 0 0 0 0 0 0 0 1 1\\\"/>'\\n            '<feFuncB type=\\\"discrete\\\" tableValues=\\\"0 0 0 0 0 0 0 0 1 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f43\\\">'\\n            '<feFuncA in=\\\"f43\\\" type=\\\"discrete\\\" tableValues=\\\"1 1 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer result=\\\"f44\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f43\\\">'\\n            '<feFuncA in=\\\"f43\\\" type=\\\"discrete\\\" tableValues=\\\"1 1 1 1 0 0 0 0 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer result=\\\"f45\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f43\\\">'\\n            '<feFuncA in=\\\"f43\\\" type=\\\"discrete\\\" tableValues=\\\"1 1 1 1 1 0 0 0 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer result=\\\"f46\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f43\\\">'\\n            '<feFuncA in=\\\"f43\\\" type=\\\"discrete\\\" tableValues=\\\"1 1 1 1 1 1 0 0 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer result=\\\"f47\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f43\\\">'\\n            '<feFuncA in=\\\"f43\\\" type=\\\"discrete\\\" tableValues=\\\"1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer result=\\\"f48\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f43\\\">'\\n            '<feFuncA in=\\\"f43\\\" type=\\\"discrete\\\" tableValues=\\\"1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer result=\\\"f49\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f43\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 0 1 1 1 1 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer result=\\\"f50\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feColorMatrix in=\\\"SourceGraphic\\\" type=\\\"luminanceToAlpha\\\" result=\\\"neg-lum-map\\\"/>'\\n            '<feComponentTransfer result=\\\"f51\\\">'\\n            '<feFuncA type=\\\"table\\\" tableValues=\\\"1 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f51\\\" result=\\\"f52\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 1 0 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f51\\\" result=\\\"f53\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 0 1 0 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f51\\\" result=\\\"f54\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 0 0 1 0 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f51\\\" result=\\\"f55\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 0 0 0 1 0 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f51\\\" result=\\\"f56\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 0 0 0 0 1 0 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f51\\\" result=\\\"f57\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 0 0 0 0 0 1 0\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComponentTransfer in=\\\"f51\\\" result=\\\"f58\\\">'\\n            '<feFuncA type=\\\"discrete\\\" tableValues=\\\"0 0 0 0 0 0 0 1\\\"/>'\\n            '</feComponentTransfer>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f52\\\" in2=\\\"f44\\\" result=\\\"f59\\\"/>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f53\\\" in2=\\\"f45\\\" result=\\\"f60\\\"/>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f54\\\" in2=\\\"f46\\\" result=\\\"f61\\\"/>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f55\\\" in2=\\\"f47\\\" result=\\\"f62\\\"/>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f56\\\" in2=\\\"f48\\\" result=\\\"f63\\\"/>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f57\\\" in2=\\\"f49\\\" result=\\\"f64\\\"/>'\\n            '<feComposite operator=\\\"in\\\" in=\\\"f58\\\" in2=\\\"f50\\\" result=\\\"f65\\\"/>'\\n            '<feMerge>'\\n            '<feMergeNode in=\\\"f65\\\"/>'\\n            '<feMergeNode in=\\\"f64\\\"/>'\\n            '<feMergeNode in=\\\"f63\\\"/>'\\n            '<feMergeNode in=\\\"f62\\\"/>'\\n            '<feMergeNode in=\\\"f61\\\"/>'\\n            '<feMergeNode in=\\\"f60\\\"/>'\\n            '<feMergeNode in=\\\"f59\\\"/>'\\n            '</feMerge>'\\n            '<feComposite operator=\\\"in\\\" in2=\\\"SourceGraphic\\\"/>'\\n            '</filter>');\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FilterTraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nenum FilterType {\\n    NONE,\\n    GRAYSCALE,\\n    SEPIA,\\n    WATERCOLOR,\\n    WATERCOLOR_BRIGHT,\\n    STONE,\\n    SMOKE,\\n    DISPLACEMENT,\\n    FROZEN,\\n    SPLASH,\\n    RECOLORING,\\n    SPARKS,\\n    GLASS, \\n    SPREAD,\\n    SPREAD_BRIGHT,\\n    INNER_OUTLINE,\\n    COLOR_OUTLINE,\\n    NOISE_SHADOW,\\n    RECOLORING2,\\n    CHALK,\\n    BLACK_OUTLINE,\\n    HALF_TONE\\n}\\n\\nstruct FilterTraits {\\n    FilterType mainFilterType;\\n    bool additonalLighting;\\n    //bool darken;\\n}\"\r\n    },\r\n    \"contracts/Random.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./Division.sol\\\";\\nimport \\\"./RandomCtx.sol\\\";\\n\\nlibrary Random {\\n    function initCtx(uint256 startingSeed) internal pure returns (RandomCtx memory) {\\n        // some 10 digit prime numbers\\n        // 1024243321, 1024383257, 1028910301, 1111111231, 1111211111\\n        // 1317313771, 1500000001, 2999999929, 3333323333, 4332221111 \\n        // 5111111191, 6668999101, 7000000001, 8018018081, 9199999999\\n        return RandomCtx(startingSeed, 5111111191 * startingSeed);      \\n    }\\n\\n    function setSeed(RandomCtx memory ctx, uint256 startingSeed) internal pure {\\n        ctx.seed = startingSeed;\\n    } \\n\\n    // function setSeedFromConract(RandomCtx memory ctx, uint256 startingSeed) internal view {\\n    //     ctx.seed = uint256(keccak256(\\n    //         abi.encode(\\n    //             startingSeed,\\n    //             blockhash(block.number - 1),\\n    //             block.coinbase,\\n    //             block.prevrandao,\\n    //             block.timestamp\\n    //         )\\n    //     ));\\n    // }\\n\\n    function randInt(RandomCtx memory ctx) internal pure returns (uint256) {\\n        ctx.counter++;\\n\\n        ctx.seed = uint256(keccak256(\\n            abi.encode(\\n                ctx.seed, ctx.counter\\n            )\\n        ));\\n        \\n        return ctx.seed;\\n    }\\n\\n    function randUInt32(RandomCtx memory ctx) internal pure returns (uint32) {\\n        return uint32(int32(randRange(ctx, 0, 2147483647))); // positive only to accomodate SEED in SVG\\n    }\\n\\n    function randFloat(RandomCtx memory ctx, uint8 decimalPlaces, int256 from, int256 to, int256 denominator) internal pure returns (string memory result) {\\n        int256 rInt = randRange(ctx, from, to);\\n        result = Division.divisionStr(decimalPlaces, rInt, denominator);\\n    }\\n\\n    function randWithProbabilities(RandomCtx memory ctx, bytes memory probabilities) internal pure returns (uint8) { unchecked {\\n        uint256 probSum = 0;\\n\\n        for (uint8 i = 0; i < probabilities.length; i++) {\\n            probSum += uint256(uint8(probabilities[i]));\\n        }\\n\\n        int256 rnd = Random.randRange(ctx, 1, int256(probSum));\\n\\n        probSum = 0;\\n        for (uint8 i = 0; i < probabilities.length; i++) {\\n            probSum += uint256(uint8(probabilities[i]));\\n\\n            if (int256(probSum) >= rnd) {\\n                return i;\\n            }\\n        }\\n\\n        return 0;\\n    }}\\n\\n    function randRange(RandomCtx memory ctx, int256 from, int256 to) internal pure returns (int256) { unchecked {\\n        if (from > to) {\\n            to = from;\\n        }\\n        uint256 rnd = randInt(ctx);\\n\\n        return from + int256(rnd >> 1) % (to - from + 1);\\n    }}\\n\\n    /**\\n     * \\n     * @param ctx - context\\n     * @param minusProbability - 0 to 100 percents\\n     */\\n    function randSign(RandomCtx memory ctx, int256 minusProbability) internal pure returns (int256) {\\n        if (randRange(ctx, 1, 100) <= minusProbability) {\\n            return -1;\\n        }\\n        return 1;\\n    }\\n\\n\\n    /**\\n     * \\n     * @param ctx - context\\n     * @param trueProbability - 0 to 100 percents\\n     */\\n    function randBool(RandomCtx memory ctx, int256 trueProbability) internal pure returns (bool) {\\n        return (randRange(ctx, 1, 100) <= trueProbability);\\n    }\\n}\"\r\n    },\r\n    \"contracts/RandomCtx.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n    \\nstruct RandomCtx {\\n    uint256 seed;\\n    uint256 counter;\\n}\"\r\n    },\r\n    \"contracts/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nlibrary Utils {\\n    uint256 internal constant MULTIPLIER   = 100000;\\n    uint256 internal constant GOLDEN_RATIO = 161803;\\n\\n    /**\\n      * Compute the largest integer smaller than or equal to the square root of `n`\\n    */\\n    function floorSqrt(uint256 n) internal pure returns (uint256) { unchecked {\\n        if (n > 0) {\\n            uint256 x = n / 2 + 1;\\n            uint256 y = (x + n / x) / 2;\\n            while (x > y) {\\n                x = y;\\n                y = (x + n / x) / 2;\\n            }\\n            return x;\\n        }\\n        return 0;\\n    }}\\n\\n    /**\\n      * Compute the smallest integer larger than or equal to the square root of `n`\\n    */\\n    function ceilSqrt(uint256 n) internal pure returns (uint256) { unchecked {\\n        uint256 x = floorSqrt(n);\\n        return x ** 2 == n ? x : x + 1;\\n    }}\\n\\n    function lerp(int256 targetFrom, int256 targetTo, int256 currentFrom, int256 currentTo, int current) internal pure returns (int256) { unchecked {\\n        int256 t = 0;\\n        int256 divisor = currentTo - currentFrom - 1;\\n        \\n        if (divisor > 0) {\\n            t = (current - currentFrom) * int256(MULTIPLIER) / (divisor);\\n        }\\n\\n        return targetFrom * int256(MULTIPLIER) + t * (targetTo - targetFrom);\\n    }}\\n\\n    function toByteArray(bytes32 _bytes32) internal pure returns (bytes memory result) {\\n        uint8 i = 0;\\n        while(i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return bytesArray;\\n    }\\n\\n    function toString(bytes32 _bytes32) internal pure returns (string memory result) {\\n        return string(toByteArray(_bytes32));\\n    }\\n\\n    /*\\n\\n        Gas Efficient uint/int to string functions\\n        Copied from: https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol\\n\\n    */\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            str := add(mload(0x40), 0x80)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                str := add(str, w) // `sub(str, 1)`.\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory str) {\\n        if (value >= 0) {\\n            return toString(uint256(value));\\n        }\\n        unchecked {\\n            str = toString(uint256(-value));\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let length := mload(str) // Load the string length.\\n            mstore(str, 0x2d) // Store the '-' character.\\n            str := sub(str, 1) // Move back the string pointer by a byte.\\n            mstore(str, add(length, 1)) // Update the string length.\\n        }\\n    }\\n\\n\\n    // /// @dev Returns a concatenated string of `a` and `b`.\\n    // /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    // function concat(string memory a, string memory b)\\n    //     internal\\n    //     pure\\n    //     returns (string memory result)\\n    // {\\n    //     /// @solidity memory-safe-assembly\\n    //     assembly {\\n    //         let w := not(0x1f)\\n    //         result := mload(0x40)\\n    //         let aLength := mload(a)\\n    //         // Copy `a` one word at a time, backwards.\\n    //         for { let o := and(add(aLength, 0x20), w) } 1 {} {\\n    //             mstore(add(result, o), mload(add(a, o)))\\n    //             o := add(o, w) // `sub(o, 0x20)`.\\n    //             if iszero(o) { break }\\n    //         }\\n    //         let bLength := mload(b)\\n    //         let output := add(result, aLength)\\n    //         // Copy `b` one word at a time, backwards.\\n    //         for { let o := and(add(bLength, 0x20), w) } 1 {} {\\n    //             mstore(add(output, o), mload(add(b, o)))\\n    //             o := add(o, w) // `sub(o, 0x20)`.\\n    //             if iszero(o) { break }\\n    //         }\\n    //         let totalLength := add(aLength, bLength)\\n    //         let last := add(add(result, 0x20), totalLength)\\n    //         // Zeroize the slot after the string.\\n    //         mstore(last, 0)\\n    //         // Stores the length.\\n    //         mstore(result, totalLength)\\n    //         // Allocate memory for the length and the bytes,\\n    //         // rounded up to a multiple of 32.\\n    //         mstore(0x40, and(add(last, 0x1f), w))\\n    //     }\\n    // }\\n}\"\r\n    },\r\n    \"contracts/SVG.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./Utils.sol\\\";\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG's with a simple, web-like API.\\nlibrary Svg {\\n    using Utils for uint256;\\n\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('g', _props, _children);\\n    }\\n\\n    function symbol(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('symbol', _props, _children);\\n    }\\n\\n    function defs(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('defs', _props, _children);\\n    }\\n\\n    function use(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('use', _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('path', _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('text', _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('line', _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('circle', _props, _children);\\n    }\\n\\n    function circle(string memory _props) internal pure returns (string memory) {\\n        return el('circle', _props);\\n    }\\n\\n    function rect(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('rect', _props, _children);\\n    }\\n\\n    function rect(string memory _props) internal pure returns (string memory) {\\n        return el('rect', _props);\\n    }\\n\\n    function filter(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('filter', _props, _children);\\n    }\\n\\n    function feColorMatrix(string memory _props) internal pure returns (string memory) {\\n        return el('feColorMatrix', _props);\\n    }\\n\\n    function cdata(string memory _content) internal pure returns (string memory) {\\n        return string.concat('<![CDATA[', _content, ']]>');\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('radialGradient', _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children) internal pure returns (string memory) {\\n        return el('linearGradient', _props, _children);\\n    }\\n\\n    function gradientStop(string memory offset, string memory stopColor, string memory _props) internal pure returns (string memory) {\\n        return\\n            el(\\n                'stop',\\n                string.concat(\\n                    prop('stop-color', stopColor),\\n                    ' ',\\n                    prop('offset', string.concat(offset, '%')),\\n                    ' ',\\n                    _props\\n                )\\n            );\\n    }\\n\\n    function animateTransform(string memory _props) internal pure returns (string memory) {\\n        return el('animateTransform', _props);\\n    }\\n\\n    function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n        return\\n            el(\\n                'image',\\n                string.concat(prop('href', _href), ' ', _props)\\n            );\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(bytes32 _tag, string memory _props, string memory _children) internal pure returns (string memory) {\\n        string memory strTag = Utils.toString(_tag);\\n        \\n        return\\n            string.concat(\\n                '<',\\n                strTag,\\n                ' ',\\n                _props,\\n                '>',\\n                _children,\\n                '</',\\n                strTag,\\n                '>'\\n            );\\n    }\\n\\n\\n    // A generic element, can be used to construct any SVG (or HTML) element without children\\n    function el(bytes32 _tag, string memory _props) internal pure returns (string memory) {\\n        return el(_tag, _props, \\\"\\\");\\n    }\\n\\n    // an SVG attribute\\n    function prop(bytes32 _key, string memory _val) internal pure returns (string memory) {\\n        return string.concat(Utils.toString(_key), '=', '\\\"', _val, '\\\" ');\\n    }\\n\\n    function svgMainElement(uint256 maxDistance, uint16 buffer) internal pure returns (string memory) { unchecked {\\n        maxDistance = 2 * maxDistance * buffer / 100; // 15% buffer;\\n        uint256 xy = maxDistance / 2;\\n    \\n        string memory xyStr = xy.toString();\\n        string memory maxDistStr = maxDistance.toString();\\n\\n        // xyStr = \\\"512\\\";\\n        // maxDistStr = \\\"1024\\\";\\n\\n        return \\n            string.concat(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" '// width=\\\"512px\\\" height=\\\"512px\\\" '   // \\n                'viewBox=\\\"-', xyStr, ' -', xyStr, ' ', maxDistStr, ' ', maxDistStr, '\\\" ', \\n                'style=\\\"background:#eee\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">');\\n    }}\\n}\\n\"\r\n    },\r\n    \"contracts/Division.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Division {\\n    using Utils for int256;\\n\\n    function division(uint8 decimalPlaces, int256 numerator, int256 denominator) pure internal returns(int256 quotient, int256 remainder, string memory result) { unchecked {\\n        int256 factor = int256(10**decimalPlaces);\\n        quotient  = numerator / denominator;\\n        bool rounding = 2 * ((numerator * factor) % denominator) >= denominator;\\n        remainder = (numerator * factor / denominator) % factor;\\n        if (rounding) {\\n            remainder += 1;\\n        }\\n        result = string(abi.encodePacked(quotient.toString(), '.', numToFixedLengthStr(decimalPlaces, remainder)));\\n    }}\\n\\n    function divisionStr(uint8 decimalPlaces, int256 numerator, int256 denominator) pure internal returns(string memory) {\\n        string memory result;\\n        (,,result) = division(decimalPlaces, numerator, denominator);\\n        return result;\\n    }\\n\\n    function numToFixedLengthStr(uint256 decimalPlaces, int256 num) pure internal returns(string memory result) { unchecked {\\n        bytes memory byteString;\\n        for (uint256 i = 0; i < decimalPlaces; i++) {\\n            int256 remainder = num % 10;\\n            byteString = abi.encodePacked(remainder.toString(), byteString);\\n            num = num/10;\\n        }\\n        result = string(byteString);\\n    }}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"erc721a/=node_modules/erc721a/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100,\r\n      \"details\": {\r\n        \"peephole\": true,\r\n        \"inliner\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true,\r\n          \"optimizerSteps\": \"[fv][edjr]T[secxL]d[fv][edjr]T[secxL]d\"\r\n        }\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"enum FilterType\",\"name\":\"mainFilterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"additonalLighting\",\"type\":\"bool\"}],\"internalType\":\"struct FilterTraits\",\"name\":\"filter\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"svgElement\",\"type\":\"string\"}],\"name\":\"applyAllFilters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"internalType\":\"struct RandomCtx\",\"name\":\"rndCtx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum FilterType\",\"name\":\"mainFilterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"additonalLighting\",\"type\":\"bool\"}],\"internalType\":\"struct FilterTraits\",\"name\":\"filter\",\"type\":\"tuple\"}],\"name\":\"generateAllFilterStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Filters", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}