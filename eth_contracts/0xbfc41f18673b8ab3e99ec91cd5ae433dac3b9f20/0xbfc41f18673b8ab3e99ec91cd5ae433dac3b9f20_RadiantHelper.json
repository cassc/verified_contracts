{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IChefIncentivesController {\r\n    // Info about ending time of reward emissions\r\n    struct EndingTime {\r\n        uint256 estimatedTime;\r\n        uint256 lastUpdatedTime;\r\n        uint256 updateCadence;\r\n    }\r\n\r\n    function endingTime() external view returns (EndingTime memory);\r\n}\r\n\r\ncontract RadiantHelper {\r\n\r\n    function estimatedMinusCurrent(address incentivesController)\r\n        external\r\n        view\r\n        returns (uint256 Days, uint256 Hours, uint256 Minutes, uint256 Seconds)\r\n    {\r\n        IChefIncentivesController.EndingTime\r\n            memory endingTime = IChefIncentivesController(incentivesController)\r\n                .endingTime();\r\n        \r\n        uint256 now_ = block.timestamp;\r\n\r\n        Seconds = SafeMath.sub(endingTime.estimatedTime, now_);\r\n\r\n        // 1 day = 24 hours * 60 min * 60 sec\r\n        Days = SafeMath.div(Seconds, 86400);\r\n\r\n        // 1 hour = 60 min * 60 sec\r\n        Hours = SafeMath.div(Seconds, 3600);\r\n\r\n        // 1 min = 60 seconds\r\n        Minutes = SafeMath.div(Seconds, 60);\r\n    }\r\n\r\n    function timestamp() external view returns(uint256 Now){\r\n        Now = block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"}],\"name\":\"estimatedMinusCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Hours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Minutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Now\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RadiantHelper", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5cd964d977c82f279db8fdeb0d178607aca6b3bb97b54bd40eee9342c492ed17"}