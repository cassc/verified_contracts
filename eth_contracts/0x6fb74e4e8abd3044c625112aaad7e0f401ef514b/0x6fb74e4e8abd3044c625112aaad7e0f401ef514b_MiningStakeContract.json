{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract MiningStakeContract {\r\n    IERC20 public stakingToken;\r\n    IERC20 public rewardToken;\r\n\r\n    address public owner;\r\n    uint256 public maxUsers = 50;\r\n    uint256 public STAKE_LIMIT = 500*10**18;\r\n    \r\n    struct Stake {\r\n        uint256 amount;\r\n        bool staked;\r\n        uint256 reward;\r\n    }\r\n\r\n    mapping(address => Stake) public stakes;\r\n    address[] public stakers;\r\n\r\n    constructor(address _stakingToken, address _rewardToken) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardToken = IERC20(_rewardToken);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        require(stakes[msg.sender].staked == false, \"You have already staked\");\r\n        require(_amount == STAKE_LIMIT, \"Invalid staking amount\");\r\n        require(stakers.length < maxUsers, \"Maximum number of users reached\");\r\n\r\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\r\n        stakes[msg.sender] = Stake(_amount, true, 0);\r\n        stakers.push(msg.sender);\r\n    }\r\n\r\n    function unstake() external {\r\n        require(stakes[msg.sender].staked, \"You have not staked\");\r\n\r\n        stakingToken.transfer(msg.sender, stakes[msg.sender].amount);\r\n        stakes[msg.sender].staked = false;\r\n    }\r\n\r\n    function distributeRewards(uint256 _rewardAmount) external {\r\n        require(msg.sender == owner, \"Only the owner can distribute rewards\");\r\n        require(rewardToken.transferFrom(msg.sender, address(this), _rewardAmount), \"Transfer failed\");\r\n        uint256 rewardPerUser = _rewardAmount / stakers.length;\r\n        for (uint i = 0; i < stakers.length; i++) {\r\n            if (stakes[stakers[i]].staked) {\r\n                stakes[stakers[i]].reward += rewardPerUser;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimReward() external {\r\n        uint256 reward = stakes[msg.sender].reward;\r\n        require(reward > 0, \"No rewards to claim\");\r\n        stakes[msg.sender].reward = 0;\r\n        rewardToken.transfer(msg.sender, reward);\r\n    }\r\n\r\n    function claimStuckTokens(address _token) external {\r\n        require(msg.sender == owner, \"Only the owner can claim stuck tokens\");\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner, amount);\r\n    }\r\n\r\n    function setMaxUsers(uint256 _maxUsers) external {\r\n        require(msg.sender == owner, \"Only the owner can set the maximum number of users\");\r\n        maxUsers = _maxUsers;\r\n    }\r\n\r\n    function setStakeLimit(uint256 _newLimit) external {\r\n        require(msg.sender == owner, \"Only the owner can set the maximum number of users\");\r\n        STAKE_LIMIT = _newLimit;\r\n    }\r\n\r\n    function setStakingToken(address _newStakingToken) external {\r\n        require(msg.sender == owner, \"Only the owner can update the staking token\");\r\n        stakingToken = IERC20(_newStakingToken);\r\n    }\r\n\r\n    function setRewardToken(address _newRewardToken) external {\r\n        require(msg.sender == owner, \"Only the owner can update the reward token\");\r\n        rewardToken = IERC20(_newRewardToken);\r\n    }\r\n\r\n    function getStakeInfo(address _user) external view returns (uint256 stakedAmount, bool isStaked, uint256 rewardAmount) {\r\n        Stake storage stakeInfo = stakes[_user];\r\n        return (stakeInfo.amount, stakeInfo.staked, stakeInfo.reward);\r\n    }\r\n\r\n    function getStakersCount() external view returns (uint256) {\r\n        return stakers.length;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STAKE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUsers\",\"type\":\"uint256\"}],\"name\":\"setMaxUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MiningStakeContract", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a849cd6239906f23b63ba34441b73a5c6eba8a000000000000000000000000008afe4055ebc86bd2afb3940c0095c9aca511d852", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5dfb2a746f7dc95b742e2e9af58f9c52a317e97ded71b5fbbdc13ff70227b185"}