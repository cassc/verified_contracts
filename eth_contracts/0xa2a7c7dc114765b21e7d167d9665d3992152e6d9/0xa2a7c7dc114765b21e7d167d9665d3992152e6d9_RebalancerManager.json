{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RebalancerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\n/**\\n * @title RebalancerManager\\n *\\n * @author Fujidao Labs\\n *\\n * @notice  Contract that faciliates rebalancing of the FujiV2 vaults.\\n */\\n\\nimport {IRebalancerManager} from \\\"./interfaces/IRebalancerManager.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\nimport {BorrowingVault} from \\\"./vaults/borrowing/BorrowingVault.sol\\\";\\nimport {IFlasher} from \\\"./interfaces/IFlasher.sol\\\";\\nimport {ILendingProvider} from \\\"./interfaces/ILendingProvider.sol\\\";\\nimport {SystemAccessControl} from \\\"./access/SystemAccessControl.sol\\\";\\nimport {IERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from\\n  \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract RebalancerManager is IRebalancerManager, SystemAccessControl {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Custom errors\\n  error RebalancerManager__rebalanceVault_notValidExecutor();\\n  error RebalancerManager__rebalanceVault_notValidFlasher();\\n  error RebalancerManager__rebalanceVault_invalidAmount();\\n  error RebalancerManager__checkAssetsAmount_invalidAmount();\\n  error RebalancerManager__checkDebtAmount_invalidAmount();\\n  error RebalancerManager__checkLtvChange_invalidAmount();\\n  error RebalancerManager__getFlashloan_flashloanFailed();\\n  error RebalancerManager__getFlashloan_notEmptyEntryPoint();\\n  error RebalancerManager__completeRebalance_invalidEntryPoint();\\n  error RebalancerManager__allowExecutor_noAllowChange();\\n  error RebalancerManager__zeroAddress();\\n\\n  mapping(address => bool) public allowedExecutor;\\n\\n  bytes32 private _entryPoint;\\n\\n  constructor(address chief_) {\\n    __SystemAccessControl_init(chief_);\\n  }\\n\\n  /// @inheritdoc IRebalancerManager\\n  function rebalanceVault(\\n    IVault vault,\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    IFlasher flasher,\\n    bool setToAsActiveProvider\\n  )\\n    external\\n    override\\n    returns (bool success)\\n  {\\n    if (!allowedExecutor[msg.sender]) {\\n      revert RebalancerManager__rebalanceVault_notValidExecutor();\\n    }\\n\\n    if (assets == type(uint256).max) {\\n      assets = from.getDepositBalance(address(vault), vault);\\n    }\\n\\n    _checkAssetsAmount(vault, assets, from);\\n\\n    if (vault.debtAsset() == address(0)) {\\n      // YieldVault\\n      if (assets == 0) {\\n        // Should at least move some assets across providers.\\n        revert RebalancerManager__rebalanceVault_invalidAmount();\\n      }\\n      vault.rebalance(assets, 0, from, to, 0, setToAsActiveProvider);\\n    } else {\\n      if (debt == type(uint256).max) {\\n        debt = from.getBorrowBalance(address(vault), vault);\\n      }\\n\\n      // BorrowingVault\\n      if (assets == 0 && debt == 0) {\\n        // Should at least move some assets or debt across providers.\\n        revert RebalancerManager__rebalanceVault_invalidAmount();\\n      }\\n      _checkDebtAmount(vault, debt, from);\\n      if (!chief.allowedFlasher(address(flasher))) {\\n        revert RebalancerManager__rebalanceVault_notValidFlasher();\\n      }\\n      _checkLtvChange(vault, from, to, assets, debt);\\n      _getFlashloan(vault, assets, debt, from, to, flasher, setToAsActiveProvider);\\n    }\\n\\n    success = true;\\n  }\\n\\n  /// @inheritdoc IRebalancerManager\\n  function allowExecutor(address executor, bool allowed) external override onlyTimelock {\\n    if (executor == address(0)) {\\n      revert RebalancerManager__zeroAddress();\\n    }\\n    if (allowedExecutor[executor] == allowed) {\\n      revert RebalancerManager__allowExecutor_noAllowChange();\\n    }\\n    allowedExecutor[executor] = allowed;\\n    emit AllowExecutor(executor, allowed);\\n  }\\n\\n  /**\\n   * @dev Checks `amount` is < than current asset balance of `vault` at provider `from`.\\n   *\\n   * @param vault address\\n   * @param amount to be rebalanced to check against\\n   * @param from provider address\\n   */\\n  function _checkAssetsAmount(IVault vault, uint256 amount, ILendingProvider from) internal view {\\n    uint256 assetsAtProvider = from.getDepositBalance(address(vault), vault);\\n    if (amount > assetsAtProvider) {\\n      revert RebalancerManager__checkAssetsAmount_invalidAmount();\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks `amount` is < than current debt balance of `vault` at provider `from`.\\n   *\\n   * @param vault address\\n   * @param amount rebalanced to check against\\n   * @param from provider address\\n   */\\n  function _checkDebtAmount(IVault vault, uint256 amount, ILendingProvider from) internal view {\\n    uint256 debtAtProvider = from.getBorrowBalance(address(vault), vault);\\n    if (amount > debtAtProvider) {\\n      revert RebalancerManager__checkDebtAmount_invalidAmount();\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if the rebalance operation will break the current LTV\\n   *\\n   * @param vault address\\n   * @param assets amount to rebalance\\n   * @param debt amount to rebalance\\n   * @param from provider where `assets` and `debt` are\\n   * @param to provider where `assets` and `debt` will be\\n   */\\n  function _checkLtvChange(\\n    IVault vault,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    uint256 assets,\\n    uint256 debt\\n  )\\n    internal\\n    view\\n  {\\n    {\\n      BorrowingVault bvault = BorrowingVault(payable(address(vault)));\\n      uint256 maxLtv = bvault.maxLtv();\\n      uint8 assetDecimals = vault.decimals();\\n      uint8 debtDecimals = bvault.debtDecimals();\\n\\n      // Calculate ltv after rebalance at `from`.\\n      uint256 assetsFrom = from.getDepositBalance(address(bvault), bvault) - assets;\\n      uint256 debtFrom = from.getBorrowBalance(address(bvault), bvault) - debt;\\n\\n      // Calculate ltv after rebalance at `to`.\\n      uint256 assetsTo = to.getDepositBalance(address(bvault), bvault) + assets;\\n      uint256 debtTo = to.getBorrowBalance(address(bvault), bvault) + debt;\\n\\n      uint256 price = bvault.oracle().getPriceOf(bvault.debtAsset(), bvault.asset(), debtDecimals);\\n      uint256 maxBorrowFrom = (assetsFrom * maxLtv * price) / (1e18 * 10 ** assetDecimals);\\n      uint256 maxBorrowTo = (assetsTo * maxLtv * price) / (1e18 * 10 ** assetDecimals);\\n\\n      if (debtFrom > maxBorrowFrom || debtTo > maxBorrowTo) {\\n        revert RebalancerManager__checkLtvChange_invalidAmount();\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets a checkpoint for this address as the flashloan originator.\\n   *\\n   * @param requestorCall bytes sent to flashloan provider\\n   */\\n  function _checkAndSetEntryPoint(bytes memory requestorCall) internal {\\n    if (_entryPoint != \\\"\\\") {\\n      revert RebalancerManager__getFlashloan_notEmptyEntryPoint();\\n    }\\n    _entryPoint = keccak256(abi.encode(requestorCall));\\n  }\\n\\n  /**\\n   * @dev Checks this address is the flashloan originator. This check applies to a\\n   * {BorrowingVault} only.\\n   *\\n   * @param vault being rebalanced\\n   * @param assets amount to rebalance\\n   * @param debt amount to rebalance\\n   * @param from provider address\\n   * @param to provider address\\n   * @param flasher contract address\\n   * @param setToAsActiveProvider boolean to define `to` as active provider\\n   */\\n  function _checkReentry(\\n    IVault vault,\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    IFlasher flasher,\\n    bool setToAsActiveProvider\\n  )\\n    internal\\n    view\\n  {\\n    bytes memory requestorCalldata = abi.encodeWithSelector(\\n      RebalancerManager.completeRebalance.selector,\\n      vault,\\n      assets,\\n      debt,\\n      from,\\n      to,\\n      flasher,\\n      setToAsActiveProvider\\n    );\\n    bytes32 hashCheck = keccak256(abi.encode(requestorCalldata));\\n    if (_entryPoint != hashCheck) {\\n      revert RebalancerManager__completeRebalance_invalidEntryPoint();\\n    }\\n  }\\n\\n  /**\\n   * @dev Initiates flashloan for a rebalancing operation.\\n   *\\n   * @param vault being rebalanced\\n   * @param assets amount to rebalance\\n   * @param debt amount to rebalance\\n   * @param from provider address\\n   * @param to provider address\\n   * @param flasher contract address\\n   * @param setToAsActiveProvider boolean to define `to` as active provider\\n   */\\n  function _getFlashloan(\\n    IVault vault,\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    IFlasher flasher,\\n    bool setToAsActiveProvider\\n  )\\n    internal\\n  {\\n    bytes memory requestorCall = abi.encodeWithSelector(\\n      RebalancerManager.completeRebalance.selector,\\n      vault,\\n      assets,\\n      debt,\\n      from,\\n      to,\\n      flasher,\\n      setToAsActiveProvider\\n    );\\n\\n    _checkAndSetEntryPoint(requestorCall);\\n\\n    address debtAsset = vault.debtAsset();\\n\\n    flasher.initiateFlashloan(debtAsset, debt, address(this), requestorCall);\\n  }\\n\\n  /**\\n   * @notice Callback function that completes execution logic of a rebalance\\n   * operation with a flashloan.\\n   *\\n   * @param vault being rebalanced\\n   * @param assets amount to rebalance\\n   * @param debt amount to rebalance\\n   * @param from provider address\\n   * @param to provider address\\n   * @param flasher contract address\\n   * @param setToAsActiveProvider boolean to define `to` as active provider\\n   *\\n   * @dev Requirements:\\n   * - Must check this address was the flashloan originator.\\n   * - Must clear the check state variable `_entryPoint`.\\n   */\\n  function completeRebalance(\\n    IVault vault,\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    IFlasher flasher,\\n    bool setToAsActiveProvider\\n  )\\n    external\\n    returns (bool success)\\n  {\\n    _checkReentry(vault, assets, debt, from, to, flasher, setToAsActiveProvider);\\n\\n    IERC20 debtAsset = IERC20(vault.debtAsset());\\n\\n    if (debtAsset.balanceOf(address(this)) != debt) {\\n      revert RebalancerManager__getFlashloan_flashloanFailed();\\n    }\\n\\n    debtAsset.safeIncreaseAllowance(address(vault), debt);\\n\\n    uint256 flashloanFee = flasher.computeFlashloanFee(address(debtAsset), debt);\\n\\n    vault.rebalance(assets, debt, from, to, flashloanFee, setToAsActiveProvider);\\n\\n    debtAsset.safeTransfer(address(flasher), debt + flashloanFee);\\n\\n    // Re-initialize the `_entryPoint`.\\n    _entryPoint = \\\"\\\";\\n    success = true;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRebalancerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IRebalancerManager\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface of {RebalancerManager}.\\n */\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ILendingProvider} from \\\"./ILendingProvider.sol\\\";\\nimport {IFlasher} from \\\"./IFlasher.sol\\\";\\n\\ninterface IRebalancerManager {\\n  /**\\n   * @dev Emit when `executor`'s `allowed` state changes.\\n   *\\n   * @param executor whose permission is changing\\n   * @param allowed boolean for new state\\n   */\\n  event AllowExecutor(address indexed executor, bool allowed);\\n\\n  /**\\n   * @notice Rebalance funds of a vault between providers.\\n   *\\n   * @param vault that will be rebalanced\\n   * @param assets amount to be rebalanced\\n   * @param debt amount to be rebalanced (zero if `vault` is a {YieldVault})\\n   * @param from provider address\\n   * @param to provider address\\n   * @param flasher contract address (zero address if `vault` is a {YieldVault})\\n   * @param setToAsActiveProvider boolean if `activeProvider` should change\\n   *\\n   * @dev Requirements:\\n   * - Must only be called by a valid executor.\\n   * - Must check `assets` and `debt` amounts are less than `vault`'s managed amounts.\\n   *\\n   * NOTE: For arguments `assets` and `debt` you can pass `type(uint256).max` in solidity\\n   * to effectively rebalance 100% of both assets and debt from a provider to another.\\n   * Hints:\\n   *  - In ethers.js use `ethers.constants.MaxUint256` to return equivalent BigNumber.\\n   *  - In Foundry using console use $(cast max-uint).\\n   */\\n  function rebalanceVault(\\n    IVault vault,\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    IFlasher flasher,\\n    bool setToAsActiveProvider\\n  )\\n    external\\n    returns (bool success);\\n\\n  /**\\n   * @notice Set `executor` as an authorized address for calling rebalancer operations\\n   * or remove authorization.\\n   *\\n   * @param executor address\\n   * @param allowed boolean\\n   *\\n   * @dev Requirement:\\n   * - Must be called from a timelock.\\n   * - Must emit a `AllowExecutor` event.\\n   */\\n  function allowExecutor(address executor, bool allowed) external;\\n\\n  /**\\n   * @notice Callback function that completes execution logic of a rebalance\\n   * operation with a flashloan.\\n   *\\n   * @param vault being rebalanced\\n   * @param assets amount to rebalance\\n   * @param debt amount to rebalance\\n   * @param from provider address\\n   * @param to provider address\\n   * @param flasher contract address\\n   * @param setToAsActiveProvider boolean to define `to` as active provider\\n   *\\n   * @dev Requirements:\\n   * - Must check this address was the flashloan originator.\\n   * - Must clear the check state variable `_entryPoint`.\\n   */\\n  function completeRebalance(\\n    IVault vault,\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    IFlasher flasher,\\n    bool setToAsActiveProvider\\n  )\\n    external\\n    returns (bool success);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IVault\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface for vaults extending from IERC4326.\\n */\\n\\nimport {IERC4626} from \\\"openzeppelin-contracts/contracts/interfaces/IERC4626.sol\\\";\\nimport {ILendingProvider} from \\\"./ILendingProvider.sol\\\";\\nimport {IFujiOracle} from \\\"./IFujiOracle.sol\\\";\\n\\ninterface IVault is IERC4626 {\\n  /**\\n   * @dev Emit when borrow action occurs.\\n   *\\n   * @param sender who calls {IVault-borrow}\\n   * @param receiver of the borrowed 'debt' amount\\n   * @param owner who will incur the debt\\n   * @param debt amount\\n   * @param shares amount of 'debtShares' received\\n   */\\n  event Borrow(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 debt,\\n    uint256 shares\\n  );\\n\\n  /**\\n   * @dev Emit when payback action occurs.\\n   *\\n   * @param sender address who calls {IVault-payback}\\n   * @param owner address whose debt will be reduced\\n   * @param debt amount\\n   * @param shares amound of 'debtShares' burned\\n   */\\n  event Payback(address indexed sender, address indexed owner, uint256 debt, uint256 shares);\\n\\n  /**\\n   * @dev Emit when the vault is initialized\\n   *\\n   * @param initializer of this vault\\n   *\\n   */\\n  event VaultInitialized(address initializer);\\n\\n  /**\\n   * @dev Emit when the oracle address is changed.\\n   *\\n   * @param newOracle the new oracle address\\n   */\\n  event OracleChanged(IFujiOracle newOracle);\\n\\n  /**\\n   * @dev Emit when the available providers for the vault change.\\n   *\\n   * @param newProviders the new providers available\\n   */\\n  event ProvidersChanged(ILendingProvider[] newProviders);\\n\\n  /**\\n   * @dev Emit when the active provider is changed.\\n   *\\n   * @param newActiveProvider the new active provider\\n   */\\n  event ActiveProviderChanged(ILendingProvider newActiveProvider);\\n\\n  /**\\n   * @dev Emit when the vault is rebalanced.\\n   *\\n   * @param assets amount to be rebalanced\\n   * @param debt amount to be rebalanced\\n   * @param from provider\\n   * @param to provider\\n   */\\n  event VaultRebalance(uint256 assets, uint256 debt, address indexed from, address indexed to);\\n\\n  /**\\n   * @dev Emit when the max LTV is changed.\\n   * See factors: https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   *\\n   * @param newMaxLtv the new max LTV\\n   */\\n  event MaxLtvChanged(uint256 newMaxLtv);\\n\\n  /**\\n   * @dev Emit when the liquidation ratio is changed.\\n   * See factors: https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   *\\n   * @param newLiqRatio the new liquidation ratio\\n   */\\n  event LiqRatioChanged(uint256 newLiqRatio);\\n\\n  /**\\n   * @dev Emit when the minumum amount is changed.\\n   *\\n   * @param newMinAmount the new minimum amount\\n   */\\n  event MinAmountChanged(uint256 newMinAmount);\\n\\n  /**\\n   * @dev Emit when the deposit cap is changed.\\n   *\\n   * @param newDepositCap the new deposit cap of this vault\\n   */\\n  event DepositCapChanged(uint256 newDepositCap);\\n\\n  /*///////////////////////////\\n    Asset management functions\\n  //////////////////////////*/\\n\\n  /**\\n   * @notice Returns the amount of assets owned by `owner`.\\n   *\\n   * @param owner to check balance\\n   *\\n   * @dev This method avoids having to do external conversions from shares to\\n   * assets, since {IERC4626-balanceOf} returns shares.\\n   */\\n  function balanceOfAsset(address owner) external view returns (uint256 assets);\\n\\n  /*///////////////////////////\\n    Debt management functions\\n  //////////////////////////*/\\n\\n  /**\\n   * @notice Returns the decimals for 'debtAsset' of this vault.\\n   *\\n   * @dev Requirements:\\n   * - Must match the 'debtAsset' decimals in ERC20 token.\\n   * - Must return zero in a {YieldVault}.\\n   */\\n  function debtDecimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Returns the address of the underlying token used as debt in functions\\n   * `borrow()`, and `payback()`. Based on {IERC4626-asset}.\\n   *\\n   * @dev Requirements:\\n   * - Must be an ERC-20 token contract.\\n   * - Must not revert.\\n   * - Must return zero in a {YieldVault}.\\n   */\\n  function debtAsset() external view returns (address);\\n\\n  /**\\n   * @notice Returns the amount of debt owned by `owner`.\\n   *\\n   * @param owner to check balance\\n   */\\n  function balanceOfDebt(address owner) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the amount of `debtShares` owned by `owner`.\\n   *\\n   * @param owner to check balance\\n   */\\n  function balanceOfDebtShares(address owner) external view returns (uint256 debtShares);\\n\\n  /**\\n   * @notice Returns the total amount of the underlying debt asset\\n   * that is \u201cmanaged\u201d by this vault. Based on {IERC4626-totalAssets}.\\n   *\\n   * @dev Requirements:\\n   * - Must account for any compounding occuring from yield or interest accrual.\\n   * - Must be inclusive of any fees that are charged against assets in the Vault.\\n   * - Must not revert.\\n   * - Must return zero in a {YieldVault}.\\n   */\\n  function totalDebt() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the amount of shares this vault would exchange for the amount\\n   * of debt assets provided. Based on {IERC4626-convertToShares}.\\n   *\\n   * @param debt to convert into `debtShares`\\n   *\\n   * @dev Requirements:\\n   * - Must not be inclusive of any fees that are charged against assets in the Vault.\\n   * - Must not show any variations depending on the caller.\\n   * - Must not reflect slippage or other on-chain conditions, when performing the actual exchange.\\n   * - Must not revert.\\n   *\\n   * NOTE: This calculation MAY not reflect the \u201cper-user\u201d price-per-share, and instead Must reflect the\\n   * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user Must expect to see when exchanging to and\\n   * from.\\n   */\\n  function convertDebtToShares(uint256 debt) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of debt assets that this vault would exchange for the amount\\n   * of shares provided. Based on {IERC4626-convertToAssets}.\\n   *\\n   * @param shares amount to convert into `debt`\\n   *\\n   * @dev Requirements:\\n   * - Must not be inclusive of any fees that are charged against assets in the Vault.\\n   * - Must not show any variations depending on the caller.\\n   * - Must not reflect slippage or other on-chain conditions, when performing the actual exchange.\\n   * - Must not revert.\\n   *\\n   * NOTE: This calculation MAY not reflect the \u201cper-user\u201d price-per-share, and instead must reflect the\\n   * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user Must expect to see when exchanging to and\\n   * from.\\n   */\\n  function convertToDebt(uint256 shares) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the maximum amount of the debt asset that can be borrowed for the `owner`,\\n   * through a borrow call.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must return a limited value if receiver is subject to some borrow limit.\\n   * - Must return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be borrowed.\\n   * - Must not revert.\\n   */\\n  function maxBorrow(address owner) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the maximum amount of debt that can be payback by the `borrower`.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function maxPayback(address owner) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the maximum amount of debt shares that can be \\\"minted-for-borrowing\\\" by the `borrower`.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function maxMintDebt(address owner) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the maximum amount of debt shares that can be \\\"burned-for-payback\\\" by the `borrower`.\\n   *\\n   * @param owner to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function maxBurnDebt(address owner) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of `debtShares` that borrowing `debt` amount will generate.\\n   *\\n   * @param debt amount to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewBorrow(uint256 debt) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of debt that borrowing `debtShares` amount will generate.\\n   *\\n   * @param shares of debt to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewMintDebt(uint256 shares) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns the amount of `debtShares` that will be burned by paying back\\n   * `debt` amount.\\n   *\\n   * @param debt to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewPayback(uint256 debt) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Returns the amount of debt asset that will be pulled from user, if `debtShares` are\\n   * burned to payback.\\n   *\\n   * @param debt to check\\n   *\\n   * @dev Requirements:\\n   * - Must not revert.\\n   */\\n  function previewBurnDebt(uint256 shares) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Perform a borrow action. Function inspired on {IERC4626-deposit}.\\n   *\\n   * @param debt amount\\n   * @param receiver of the `debt` amount\\n   * @param owner who will incur the `debt` amount\\n   *\\n   * * @dev Mints debtShares to owner by taking a loan of exact amount of underlying tokens.\\n   * Requirements:\\n   * - Must emit the Borrow event.\\n   * - Must revert if owner does not own sufficient collateral to back debt.\\n   * - Must revert if caller is not owner or permissioned operator to act on owner behalf.\\n   */\\n  function borrow(uint256 debt, address receiver, address owner) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Perform a borrow action by minting `debtShares`.\\n   *\\n   * @param shares of debt to mint\\n   * @param receiver of the borrowed amount\\n   * @param owner who will incur the `debt` and whom `debtShares` will be accounted\\n   *\\n   * * @dev Mints `debtShares` to `owner`.\\n   * Requirements:\\n   * - Must emit the Borrow event.\\n   * - Must revert if owner does not own sufficient collateral to back debt.\\n   * - Must revert if caller is not owner or permissioned operator to act on owner behalf.\\n   */\\n  function mintDebt(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  )\\n    external\\n    returns (uint256 debt);\\n\\n  /**\\n   * @notice Burns `debtShares` to `receiver` by paying back loan with exact amount of underlying tokens.\\n   *\\n   * @param debt amount to payback\\n   * @param receiver to whom debt amount is being paid back\\n   *\\n   * @dev Implementations will require pre-erc20-approval of the underlying debt token.\\n   * Requirements:\\n   * - Must emit a Payback event.\\n   */\\n  function payback(uint256 debt, address receiver) external returns (uint256 shares);\\n\\n  /**\\n   * @notice Burns `debtShares` to `owner` by paying back loan by specifying debt shares.\\n   *\\n   * @param shares of debt to payback\\n   * @param owner to whom debt amount is being paid back\\n   *\\n   * @dev Implementations will require pre-erc20-approval of the underlying debt token.\\n   * Requirements:\\n   * - Must emit a Payback event.\\n   */\\n  function burnDebt(uint256 shares, address owner) external returns (uint256 debt);\\n\\n  /*///////////////////\\n    General functions\\n  ///////////////////*/\\n\\n  /**\\n   * @notice Returns the active provider of this vault.\\n   */\\n  function getProviders() external view returns (ILendingProvider[] memory);\\n  /**\\n   * @notice Returns the active provider of this vault.\\n   */\\n  function activeProvider() external view returns (ILendingProvider);\\n\\n  /*/////////////////////////\\n     Rebalancing Function\\n  ////////////////////////*/\\n\\n  /**\\n   * @notice Performs rebalancing of vault by moving funds across providers.\\n   *\\n   * @param assets amount of this vault to be rebalanced\\n   * @param debt amount of this vault to be rebalanced (Note: pass zero if this is a {YieldVault})\\n   * @param from provider\\n   * @param to provider\\n   * @param fee expected from rebalancing operation\\n   * @param setToAsActiveProvider boolean\\n   *\\n   * @dev Requirements:\\n   * - Must check providers `from` and `to` are valid.\\n   * - Must be called from a {RebalancerManager} contract that makes all proper checks.\\n   * - Must revert if caller is not an approved rebalancer.\\n   * - Must emit the VaultRebalance event.\\n   * - Must check `fee` is a reasonable amount.\\n   */\\n  function rebalance(\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    uint256 fee,\\n    bool setToAsActiveProvider\\n  )\\n    external\\n    returns (bool);\\n\\n  /*/////////////////////////\\n     Liquidation Functions\\n  /////////////////////////*/\\n\\n  /**\\n   * @notice Returns the current health factor of 'owner'.\\n   *\\n   * @param owner to get health factor\\n   *\\n   * @dev Requirements:\\n   * - Must return type(uint254).max when 'owner' has no debt.\\n   * - Must revert in {YieldVault}.\\n   *\\n   * 'healthFactor' is scaled up by 1e18. A value below 1e18 means 'owner' is eligable for liquidation.\\n   * See factors: https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   */\\n  function getHealthFactor(address owner) external returns (uint256 healthFactor);\\n\\n  /**\\n   * @notice Returns the liquidation close factor based on 'owner's' health factor.\\n   *\\n   * @param owner of debt position\\n   *\\n   * @dev Requirements:\\n   * - Must return zero if `owner` is not liquidatable.\\n   * - Must revert in {YieldVault}.\\n   */\\n  function getLiquidationFactor(address owner) external returns (uint256 liquidationFactor);\\n\\n  /**\\n   * @notice Performs liquidation of an unhealthy position, meaning a 'healthFactor' below 1e18.\\n   *\\n   * @param owner to be liquidated\\n   * @param receiver of the collateral shares of liquidation\\n   * @param liqCloseFactor percentage of `owner`'s debt to attempt liquidation\\n   *\\n   * @dev Requirements:\\n   * - Must revert if caller is not an approved liquidator.\\n   * - Must revert if 'owner' is not liquidatable.\\n   * - Must emit the Liquidation event.\\n   * - Must liquidate accoring to `liqCloseFactor` but restricted to the following:\\n   *    - Liquidate up to 50% of 'owner' debt when: 100 >= 'healthFactor' > 95.\\n   *    - Liquidate up to 100% of 'owner' debt when: 95 > 'healthFactor'.\\n   * - Must revert in {YieldVault}.\\n   *\\n   * WARNING! It is liquidator's responsability to check if liquidation is profitable.\\n   */\\n  function liquidate(\\n    address owner,\\n    address receiver,\\n    uint256 liqCloseFactor\\n  )\\n    external\\n    returns (uint256 gainedShares);\\n\\n  /*/////////////////////\\n     Setter functions \\n  ////////////////////*/\\n\\n  /**\\n   * @notice Sets the lists of providers of this vault.\\n   *\\n   * @param providers address array\\n   *\\n   * @dev Requirements:\\n   * - Must not contain zero addresses.\\n   */\\n  function setProviders(ILendingProvider[] memory providers) external;\\n\\n  /**\\n   * @notice Sets the active provider for this vault.\\n   *\\n   * @param activeProvider address\\n   *\\n   * @dev Requirements:\\n   * - Must be a provider previously set by `setProviders()`.\\n   * - Must be called from a timelock contract.\\n   *\\n   * WARNING! Changing active provider without a `rebalance()` call\\n   * can result in denial of service for vault users.\\n   */\\n  function setActiveProvider(ILendingProvider activeProvider) external;\\n\\n  /**\\n   * @notice Sets the minimum amount for: `deposit()`, `mint()` and borrow()`.\\n   *\\n   * @param amount to be as minimum.\\n   */\\n  function setMinAmount(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/vaults/borrowing/BorrowingVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\n/**\\n * @title BorrowingVault\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Implementation vault that handles pooled collateralized debt positions.\\n * User state is kept at vaults via token-shares compliant to ERC4626, including\\n * extension for debt asset and their equivalent debtshares.\\n * Debt shares are not transferable.\\n * Slippage protected functions include `borrow()` and `payback()`,\\n * thru an implementation similar to ERC5143.\\n * Setter functions for maximum loan-to-value and liquidation ratio factors\\n * are defined and controlled by timelock.\\n * A primitive liquidation function is implemented along additional view\\n * functions to determine user's health factor.\\n */\\n\\nimport {\\n  IERC20,\\n  IERC20Metadata\\n} from \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IVault} from \\\"../../interfaces/IVault.sol\\\";\\nimport {ILendingProvider} from \\\"../../interfaces/ILendingProvider.sol\\\";\\nimport {IFujiOracle} from \\\"../../interfaces/IFujiOracle.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport {BaseVault} from \\\"../../abstracts/BaseVault.sol\\\";\\nimport {VaultPermissions} from \\\"../VaultPermissions.sol\\\";\\n\\ncontract BorrowingVault is BaseVault {\\n  using Math for uint256;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  /**\\n   * @dev Emitted when a user is liquidated.\\n   *\\n   * @param caller of liquidation\\n   * @param receiver of liquidation bonus\\n   * @param owner whose assets are being liquidated\\n   * @param collateralSold `owner`'s amount of collateral sold during liquidation\\n   * @param debtPaid `owner`'s amount of debt paid back during liquidation\\n   * @param price price of collateral at which liquidation was done\\n   * @param liquidationFactor what % of debt was liquidated\\n   */\\n  event Liquidate(\\n    address indexed caller,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 collateralSold,\\n    uint256 debtPaid,\\n    uint256 price,\\n    uint256 liquidationFactor\\n  );\\n\\n  /// @dev Custom errors\\n  error BorrowingVault__borrow_invalidInput();\\n  error BorrowingVault__borrow_moreThanAllowed();\\n  error BorrowingVault__payback_invalidInput();\\n  error BorrowingVault__beforeTokenTransfer_moreThanMax();\\n  error BorrowingVault__liquidate_invalidInput();\\n  error BorrowingVault__liquidate_positionHealthy();\\n  error BorrowingVault__liquidate_moreThanAllowed();\\n  error BorrowingVault__rebalance_invalidProvider();\\n  error BorrowingVault__borrow_slippageTooHigh();\\n  error BorrowingVault__mintDebt_slippageTooHigh();\\n  error BorrowingVault__payback_slippageTooHigh();\\n  error BorrowingVault__burnDebt_slippageTooHigh();\\n  error BorrowingVault__burnDebtShares_amountExceedsBalance();\\n  error BorrowingVault__initializeVaultShares_assetDebtRatioExceedsMaxLtv();\\n\\n  /*///////////////////\\n   Liquidation controls\\n  ////////////////////*/\\n\\n  uint256 private constant PRECISION_CONSTANT = 1e18;\\n\\n  /// @notice Returns default liquidation close factor: 50% of debt.\\n  uint256 public constant DEFAULT_LIQUIDATION_CLOSE_FACTOR = 0.5e18;\\n\\n  /// @notice Returns max liquidation close factor: 100% of debt.\\n  uint256 public constant MAX_LIQUIDATION_CLOSE_FACTOR = PRECISION_CONSTANT;\\n\\n  /// @notice Returns health factor threshold at which max liquidation can occur.\\n  uint256 public constant FULL_LIQUIDATION_THRESHOLD = 95e16;\\n\\n  /// @notice Returns the penalty factor at which collateral is sold during liquidation: 90% below oracle price.\\n  uint256 public constant LIQUIDATION_PENALTY = 0.9e18;\\n\\n  IERC20Metadata internal immutable _debtAsset;\\n  uint8 internal immutable _debtDecimals;\\n\\n  uint256 public debtSharesSupply;\\n\\n  mapping(address => uint256) internal _debtShares;\\n\\n  IFujiOracle public oracle;\\n\\n  /**\\n   * @dev Factor See: https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme\\n   */\\n\\n  /// @notice Returns the factor defining the maximum loan-to-value a user can take in this vault.\\n  uint256 public maxLtv;\\n\\n  /// @notice Returns the factor defining the loan-to-value at which a user can be liquidated.\\n  uint256 public liqRatio;\\n\\n  /**\\n   * @notice Constructor of a new {BorrowingVault}.\\n   *\\n   * @param asset_ this vault will handle as main asset (collateral)\\n   * @param debtAsset_ this vault will handle as debt asset\\n   * @param oracle_ of {FujiOracle} implementation\\n   * @param chief_ that deploys and controls this vault\\n   * @param name_ string of the token-shares handled in this vault\\n   * @param symbol_ string of the token-shares handled in this vault\\n   * @param providers_ array that will initialize this vault\\n   * @param maxLtv_ initially set in vault\\n   * @param liqRatio_ initially set in vault\\n   *\\n   * @dev Requirements:\\n   * - Must be initialized with a set of providers.\\n   * - Must set first provider in `providers_` array as `activeProvider`.\\n   * - Must initialize `maxLTV` and `liqRatio` with a non-zero value.\\n   * - Must check `maxLTV` Must < `liqRatio`.\\n   * - Must check `debtAsset_` erc20-decimals and `_debtDecimals` of this vault are equal.\\n   */\\n  constructor(\\n    address asset_,\\n    address debtAsset_,\\n    address oracle_,\\n    address chief_,\\n    string memory name_,\\n    string memory symbol_,\\n    ILendingProvider[] memory providers_,\\n    uint256 maxLtv_,\\n    uint256 liqRatio_\\n  )\\n    BaseVault(asset_, chief_, name_, symbol_)\\n  {\\n    _debtAsset = IERC20Metadata(debtAsset_);\\n    _debtDecimals = IERC20Metadata(debtAsset_).decimals();\\n\\n    oracle = IFujiOracle(oracle_);\\n\\n    if (\\n      maxLtv_ == 0 || liqRatio_ == 0 || maxLtv_ < 1e16 || maxLtv_ >= PRECISION_CONSTANT\\n        || liqRatio_ < maxLtv_\\n    ) {\\n      revert BaseVault__setter_invalidInput();\\n    }\\n    maxLtv = maxLtv_;\\n    liqRatio = liqRatio_;\\n\\n    _setProviders(providers_);\\n    _setActiveProvider(providers_[0]);\\n  }\\n\\n  receive() external payable {}\\n\\n  /*//////////////////////////////////////////\\n      Asset management: overrides IERC4626\\n  //////////////////////////////////////////*/\\n\\n  /// @inheritdoc BaseVault\\n  function maxWithdraw(address owner) public view override returns (uint256) {\\n    if (paused(VaultActions.Withdraw)) {\\n      return 0;\\n    }\\n    return _computeFreeAssets(owner);\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function maxRedeem(address owner) public view override returns (uint256) {\\n    if (paused(VaultActions.Withdraw)) {\\n      return 0;\\n    }\\n    return convertToShares(maxWithdraw(owner));\\n  }\\n\\n  /*///////////////////////////////\\n  /// Debt management overrides ///\\n  ///////////////////////////////*/\\n\\n  /**\\n   * @dev Hook before all asset-share transfers.\\n   * Requirements:\\n   * - Must check `from` can move `amount` of shares.\\n   *\\n   * @param from address\\n   * @param to address\\n   * @param amount of shares\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal view override {\\n    /**\\n     * @dev Hook check activated only when called by OZ {ERC20-_transfer}\\n     * User must not be able to transfer asset-shares locked as collateral\\n     */\\n    if (from != address(0) && to != address(0) && amount > maxRedeem(from)) {\\n      revert BorrowingVault__beforeTokenTransfer_moreThanMax();\\n    }\\n  }\\n\\n  /// @inheritdoc IVault\\n  function debtDecimals() public view override returns (uint8) {\\n    return _debtDecimals;\\n  }\\n\\n  /// @inheritdoc IVault\\n  function debtAsset() public view override returns (address) {\\n    return address(_debtAsset);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function balanceOfDebt(address owner) public view override returns (uint256 debt) {\\n    return convertToDebt(_debtShares[owner]);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function balanceOfDebtShares(address owner) external view override returns (uint256 debtShares) {\\n    return _debtShares[owner];\\n  }\\n\\n  /// @inheritdoc IVault\\n  function totalDebt() public view override returns (uint256) {\\n    return _checkProvidersBalance(\\\"getBorrowBalance\\\");\\n  }\\n\\n  /// @inheritdoc IVault\\n  function convertDebtToShares(uint256 debt) public view override returns (uint256 shares) {\\n    return _convertDebtToShares(debt, Math.Rounding.Up);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function convertToDebt(uint256 shares) public view override returns (uint256 debt) {\\n    return _convertToDebt(shares, Math.Rounding.Up);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function maxBorrow(address borrower) public view override returns (uint256) {\\n    if (paused(VaultActions.Borrow)) {\\n      return 0;\\n    }\\n    return _computeMaxBorrow(borrower);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function maxPayback(address borrower) public view override returns (uint256) {\\n    if (paused(VaultActions.Payback)) {\\n      return 0;\\n    }\\n    return previewBurnDebt(maxBurnDebt(borrower));\\n  }\\n\\n  /// @inheritdoc IVault\\n  function maxMintDebt(address borrower) public view override returns (uint256) {\\n    if (paused(VaultActions.Borrow)) {\\n      return 0;\\n    }\\n    return convertDebtToShares(maxBorrow(borrower));\\n  }\\n\\n  /// @inheritdoc IVault\\n  function maxBurnDebt(address borrower) public view override returns (uint256) {\\n    if (paused(VaultActions.Payback)) {\\n      return 0;\\n    }\\n    return _debtShares[borrower];\\n  }\\n\\n  /// @inheritdoc IVault\\n  function previewBorrow(uint256 debt) public view override returns (uint256 shares) {\\n    return _convertDebtToShares(debt, Math.Rounding.Up);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function previewMintDebt(uint256 shares) public view override returns (uint256 debt) {\\n    return _convertToDebt(shares, Math.Rounding.Down);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function previewPayback(uint256 debt) public view override returns (uint256 shares) {\\n    return _convertDebtToShares(debt, Math.Rounding.Down);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function previewBurnDebt(uint256 shares) public view override returns (uint256 debt) {\\n    return _convertToDebt(shares, Math.Rounding.Up);\\n  }\\n\\n  /**\\n   * @notice Slippage protected `borrow()` inspired by EIP5143.\\n   *\\n   * @param debt amount to borrow\\n   * @param receiver address to whom borrowed amount will be transferred\\n   * @param owner address who will incur the debt\\n   * @param maxDebtShares amount that Must be minted in this borrow call\\n   *\\n   * @dev Requirements:\\n   * - Must mint maximum `maxDebtShares` when calling `borrow()`.\\n   */\\n  function borrow(\\n    uint256 debt,\\n    address receiver,\\n    address owner,\\n    uint256 maxDebtShares\\n  )\\n    public\\n    returns (uint256)\\n  {\\n    uint256 receivedDebtShares = borrow(debt, receiver, owner);\\n    if (receivedDebtShares > maxDebtShares) {\\n      revert BorrowingVault__borrow_slippageTooHigh();\\n    }\\n    return receivedDebtShares;\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function borrow(uint256 debt, address receiver, address owner) public override returns (uint256) {\\n    address caller = msg.sender;\\n\\n    uint256 shares = previewBorrow(debt);\\n    _borrowChecks(caller, receiver, owner, debt, shares);\\n    _borrow(caller, receiver, owner, debt, shares);\\n\\n    return shares;\\n  }\\n\\n  /**\\n   * @notice Slippage protected `mintDebt()` inspired by EIP5143.\\n   *\\n   * @param shares of debt to mint\\n   * @param receiver address to whom borrowed amount will be transferred\\n   * @param owner address who will incur the debt\\n   * @param minDebt amount that must be sent to receiver in this call\\n   *\\n   * @dev Requirements:\\n   * - Must transfer at least `minDebt` when calling `mintDebt()`.\\n   */\\n  function mintDebt(\\n    uint256 shares,\\n    address receiver,\\n    address owner,\\n    uint256 minDebt\\n  )\\n    public\\n    returns (uint256)\\n  {\\n    uint256 receivedDebt = mintDebt(shares, receiver, owner);\\n    if (receivedDebt < minDebt) {\\n      revert BorrowingVault__mintDebt_slippageTooHigh();\\n    }\\n    return receivedDebt;\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function mintDebt(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  )\\n    public\\n    override\\n    returns (uint256)\\n  {\\n    uint256 debt = previewMintDebt(shares);\\n    address caller = msg.sender;\\n\\n    _borrowChecks(caller, receiver, owner, debt, shares);\\n    _borrow(caller, receiver, owner, debt, shares);\\n\\n    return debt;\\n  }\\n\\n  /**\\n   * @notice Slippage protected `payback()` inspired by EIP5143.\\n   *\\n   * @param debt amount to payback\\n   * @param owner address whose debt will be reduced\\n   * @param minDebtShares amount that Must be burned in this payback call\\n   *\\n   * @dev Requirements:\\n   * - Must burn at least `minDebtShares` when calling `payback()`.\\n   */\\n  function payback(uint256 debt, address owner, uint256 minDebtShares) public returns (uint256) {\\n    uint256 burnedDebtShares = payback(debt, owner);\\n    if (burnedDebtShares < minDebtShares) {\\n      revert BorrowingVault__payback_slippageTooHigh();\\n    }\\n    return burnedDebtShares;\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function payback(uint256 debt, address owner) public override returns (uint256 shares) {\\n    shares = previewPayback(debt);\\n    (shares,) = _paybackInternal(debt, shares, owner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Slippage protected `burnDebt()` inspired by EIP5143.\\n   *\\n   * @param shares of debt to payback\\n   * @param owner address whose debt will be reduced\\n   * @param maxAmount of debt asset that must be pulled from caller to payback in this call\\n   *\\n   * @dev Requirements:\\n   * - Must pull a maximum of `maxAmount` debt asset when calling `maxAmount()`.\\n   */\\n  function burnDebt(uint256 shares, address owner, uint256 maxAmount) public returns (uint256) {\\n    uint256 maxPulledAmount = burnDebt(shares, owner);\\n    if (maxPulledAmount > maxAmount) {\\n      revert BorrowingVault__burnDebt_slippageTooHigh();\\n    }\\n    return maxPulledAmount;\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function burnDebt(uint256 shares, address owner) public override returns (uint256 debt) {\\n    debt = previewBurnDebt(shares);\\n    (, debt) = _paybackInternal(debt, shares, owner, msg.sender);\\n  }\\n\\n  /*///////////////////////\\n      Borrow allowances \\n  ///////////////////////*/\\n\\n  /// @inheritdoc BaseVault\\n  function borrowAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return VaultPermissions.borrowAllowance(owner, operator, receiver);\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function increaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return VaultPermissions.increaseBorrowAllowance(operator, receiver, byAmount);\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function decreaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return VaultPermissions.decreaseBorrowAllowance(operator, receiver, byAmount);\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function permitBorrow(\\n    address owner,\\n    address receiver,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    public\\n    override\\n  {\\n    VaultPermissions.permitBorrow(owner, receiver, value, deadline, actionArgsHash, v, r, s);\\n  }\\n\\n  /**\\n   * @dev Computes max borrow amount a user can take given their 'asset'\\n   * (collateral) balance and price.\\n   * Requirements:\\n   * - Must read price from {FujiOracle}.\\n   *\\n   * @param borrower to whom to check max borrow amount\\n   */\\n  function _computeMaxBorrow(address borrower) internal view returns (uint256 max) {\\n    uint256 price = oracle.getPriceOf(debtAsset(), asset(), _debtDecimals);\\n    uint256 assetShares = balanceOf(borrower);\\n    uint256 assets = convertToAssets(assetShares);\\n    uint256 debtShares = _debtShares[borrower];\\n    uint256 debt = convertToDebt(debtShares);\\n\\n    uint256 baseUserMaxBorrow = assets.mulDiv(maxLtv * price, 10 ** decimals() * PRECISION_CONSTANT);\\n    max = baseUserMaxBorrow > debt ? baseUserMaxBorrow - debt : 0;\\n  }\\n\\n  /**\\n   * @dev Compute how much free 'assets' a user can withdraw or transfer\\n   * given their `balanceOfDebt()`.\\n   * Requirements:\\n   * - Must be implemented in {BorrowingVault} contract.\\n   * - Must not be implemented in a {YieldVault} contract.\\n   * - Must read price from {FujiOracle}.\\n   *\\n   * @param owner address to whom free assets is being checked\\n   */\\n  function _computeFreeAssets(address owner) internal view returns (uint256 freeAssets) {\\n    uint256 debtShares = _debtShares[owner];\\n    uint256 assets = convertToAssets(balanceOf(owner));\\n\\n    // Handle no debt case.\\n    if (debtShares == 0) {\\n      freeAssets = assets;\\n    } else {\\n      uint256 debt = convertToDebt(debtShares);\\n      uint256 price = oracle.getPriceOf(asset(), debtAsset(), decimals());\\n      uint256 lockedAssets = debt.mulDiv(price * PRECISION_CONSTANT, maxLtv * 10 ** _debtDecimals);\\n\\n      if (lockedAssets == 0) {\\n        // Handle wei level amounts in where 'lockedAssets' < 1 wei.\\n        lockedAssets = 1;\\n      }\\n\\n      freeAssets = assets > lockedAssets ? assets - lockedAssets : 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Conversion function from debt to `debtShares` with support for rounding direction.\\n   * Requirements:\\n   * - Must revert if debt > 0, debtSharesSupply > 0 and totalDebt = 0.\\n   *   (Corresponds to a case where you divide by zero.)\\n   * - Must return `debt` if `debtSharesSupply` == 0.\\n   *\\n   * @param debt amount to convert to `debtShares`\\n   * @param rounding direction of division remainder\\n   */\\n  function _convertDebtToShares(\\n    uint256 debt,\\n    Math.Rounding rounding\\n  )\\n    internal\\n    view\\n    returns (uint256 shares)\\n  {\\n    return debt.mulDiv(debtSharesSupply + 1, totalDebt() + 1, rounding);\\n  }\\n\\n  /**\\n   * @dev Conversion function from `debtShares` to debt with support for rounding direction.\\n   * Requirements:\\n   * - Must return zero if `debtSharesSupply` == 0.\\n   *\\n   * @param shares amount to convert to `debt`\\n   * @param rounding direction of division remainder\\n   */\\n  function _convertToDebt(\\n    uint256 shares,\\n    Math.Rounding rounding\\n  )\\n    internal\\n    view\\n    returns (uint256 assets)\\n  {\\n    uint256 totaldebt = totalDebt();\\n    return shares.mulDiv(totaldebt + 1, debtSharesSupply + 1, rounding);\\n  }\\n\\n  /**\\n   * @dev Perform borrow action at provdier. Borrow/mintDebtShares common workflow.\\n   * Requirements:\\n   * - Must call `activeProvider` in `_executeProviderAction()`.\\n   * - Must emit a Borrow event.\\n   *\\n   * @param caller or operator\\n   * @param receiver to whom borrowed amount is transferred\\n   * @param owner to whom `debtShares` get minted\\n   * @param assets amount of debt\\n   * @param shares amount of `debtShares`\\n   */\\n  function _borrow(\\n    address caller,\\n    address receiver,\\n    address owner,\\n    uint256 assets,\\n    uint256 shares\\n  )\\n    internal\\n    whenNotPaused(VaultActions.Borrow)\\n  {\\n    _mintDebtShares(owner, shares);\\n\\n    _executeProviderAction(assets, \\\"borrow\\\", activeProvider);\\n\\n    _debtAsset.safeTransfer(receiver, assets);\\n\\n    emit Borrow(caller, receiver, owner, assets, shares);\\n  }\\n\\n  /**\\n   * @dev Runs common checks for all \\\"borrow\\\" or \\\"mintDebt\\\" actions in this vault.\\n   * Requirements:\\n   * - Must revert for all conditions not passed.\\n   *\\n   * @param caller msg.sender in this context\\n   * @param receiver of the borrow amount\\n   * @param owner of the debt accountability\\n   * @param debt or borrowed amount of debt asset\\n   * @param shares corresponding to debt\\n   */\\n  function _borrowChecks(\\n    address caller,\\n    address receiver,\\n    address owner,\\n    uint256 debt,\\n    uint256 shares\\n  )\\n    private\\n  {\\n    if (debt == 0 || shares == 0 || receiver == address(0) || owner == address(0)) {\\n      revert BorrowingVault__borrow_invalidInput();\\n    }\\n    if (debt > maxBorrow(owner)) {\\n      revert BorrowingVault__borrow_moreThanAllowed();\\n    }\\n    if (caller != owner) {\\n      _spendBorrowAllowance(owner, caller, receiver, debt);\\n    }\\n  }\\n\\n  /**\\n   * @dev Function to handle common flow for `payback(...)` and `burnDebt(...)`\\n   * It returns the updated `debt` and `shares` values if applicable.\\n   *\\n   * @param debt or borrowed amount of debt asset\\n   * @param shares amount of `debtShares`\\n   * @param owner to whom `debtShares` will bet burned\\n   * @param caller msg.sender\\n   */\\n  function _paybackInternal(\\n    uint256 debt,\\n    uint256 shares,\\n    address owner,\\n    address caller\\n  )\\n    internal\\n    returns (uint256 debt_, uint256 shares_)\\n  {\\n    uint256 remainder;\\n    // `debt`, `shares`are updated if passing more than max amount for `owner`'s debt.\\n    (debt_, shares_, remainder) = _paybackChecks(owner, debt, shares);\\n\\n    _payback(caller, owner, debt_, shares_);\\n\\n    if (remainder > 0) {\\n      /**\\n       * @devSince the `_payback(...) only pulls (erc20) that is needed to payback\\n       * maxAmount, this logic handles excess amount `remainder` by pulling from\\n       * `msg.sender and returning to the `owner` the `remainder`.\\n       */\\n      _debtAsset.safeTransferFrom(caller, owner, remainder);\\n    }\\n  }\\n\\n  /**\\n   * @dev Perform payback action at provider. Payback/burnDebtShares common workflow.\\n   * Requirements:\\n   * - Must call `activeProvider` in `_executeProviderAction()`.\\n   * - Must emit a Payback event.\\n   *\\n   * @param caller msg.sender\\n   * @param owner to whom `debtShares` will bet burned\\n   * @param assets amount of debt\\n   * @param shares amount of `debtShares`\\n   */\\n  function _payback(\\n    address caller,\\n    address owner,\\n    uint256 assets,\\n    uint256 shares\\n  )\\n    internal\\n    whenNotPaused(VaultActions.Payback)\\n  {\\n    _debtAsset.safeTransferFrom(caller, address(this), assets);\\n\\n    _executeProviderAction(assets, \\\"payback\\\", activeProvider);\\n\\n    _burnDebtShares(owner, shares);\\n\\n    emit Payback(caller, owner, assets, shares);\\n  }\\n\\n  /**\\n   * @dev Runs common checks for all \\\"payback\\\" or \\\"burnDebt\\\" actions in this vault.\\n   *  It returns maximum possible debt to payback, shares equivalent, and remainder.\\n   * The `remainder` will be non-zero if the passed `shares` arg exceeds\\n   * the debtShare balance of `owner`.\\n   * Requirements:\\n   * - Must revert for all conditions not passed.\\n   *\\n   * @param owner of the debt accountability\\n   * @param debt or borrowed amount of debt asset\\n   * @param shares of debt being burned\\n   */\\n  function _paybackChecks(\\n    address owner,\\n    uint256 debt,\\n    uint256 shares\\n  )\\n    private\\n    view\\n    returns (uint256 debt_, uint256 shares_, uint256 remainder)\\n  {\\n    if (owner == address(0) || debt == 0 || shares == 0) {\\n      revert BorrowingVault__payback_invalidInput();\\n    }\\n\\n    if (shares > _debtShares[owner]) {\\n      shares_ = _debtShares[owner];\\n      debt_ = shares_.mulDiv(debt, shares, Math.Rounding.Up);\\n      remainder = debt > debt_ ? debt - debt_ : 0;\\n    } else {\\n      shares_ = shares;\\n      debt_ = debt;\\n    }\\n  }\\n\\n  /**\\n   * @dev Common workflow to update state and mint `debtShares`.\\n   *\\n   * @param owner to whom shares get minted\\n   * @param amount of shares\\n   */\\n  function _mintDebtShares(address owner, uint256 amount) internal {\\n    debtSharesSupply += amount;\\n    _debtShares[owner] += amount;\\n  }\\n\\n  /**\\n   * @dev Common workflow to update state and burn `debtShares`.\\n   *\\n   * @param owner to whom shares get burned\\n   * @param amount of shares\\n   */\\n  function _burnDebtShares(address owner, uint256 amount) internal {\\n    uint256 balance = _debtShares[owner];\\n    if (balance < amount) {\\n      revert BorrowingVault__burnDebtShares_amountExceedsBalance();\\n    }\\n    unchecked {\\n      _debtShares[owner] = balance - amount;\\n    }\\n    debtSharesSupply -= amount;\\n  }\\n\\n  /*/////////////////\\n      Rebalancing \\n  /////////////////*/\\n\\n  /// @inheritdoc IVault\\n  function rebalance(\\n    uint256 assets,\\n    uint256 debt,\\n    ILendingProvider from,\\n    ILendingProvider to,\\n    uint256 fee,\\n    bool setToAsActiveProvider\\n  )\\n    external\\n    hasRole(msg.sender, REBALANCER_ROLE)\\n    returns (bool)\\n  {\\n    if (!_isValidProvider(address(from)) || !_isValidProvider(address(to))) {\\n      revert BorrowingVault__rebalance_invalidProvider();\\n    }\\n    if (debt > 0) {\\n      _debtAsset.safeTransferFrom(msg.sender, address(this), debt);\\n      _executeProviderAction(debt, \\\"payback\\\", from);\\n    }\\n    if (assets > 0) {\\n      _executeProviderAction(assets, \\\"withdraw\\\", from);\\n    }\\n\\n    _checkRebalanceFee(fee, debt);\\n\\n    if (assets > 0) {\\n      _executeProviderAction(assets, \\\"deposit\\\", to);\\n    }\\n    if (debt > 0) {\\n      _executeProviderAction(debt + fee, \\\"borrow\\\", to);\\n      _debtAsset.safeTransfer(msg.sender, debt + fee);\\n    }\\n\\n    if (setToAsActiveProvider) {\\n      _setActiveProvider(to);\\n    }\\n\\n    emit VaultRebalance(assets, debt, address(from), address(to));\\n    return true;\\n  }\\n\\n  /*////////////////////\\n       Liquidation  \\n  ////////////////////*/\\n\\n  /// @inheritdoc IVault\\n  function getHealthFactor(address owner) public view returns (uint256 healthFactor) {\\n    uint256 debtShares = _debtShares[owner];\\n    uint256 debt = convertToDebt(debtShares);\\n\\n    if (debt == 0) {\\n      healthFactor = type(uint256).max;\\n    } else {\\n      uint256 assetShares = balanceOf(owner);\\n      uint256 assets = convertToAssets(assetShares);\\n      uint256 price = oracle.getPriceOf(debtAsset(), asset(), _debtDecimals);\\n\\n      healthFactor = (assets * liqRatio * price) / (debt * 10 ** decimals());\\n    }\\n  }\\n\\n  /// @inheritdoc IVault\\n  function getLiquidationFactor(address owner) public view returns (uint256 liquidationFactor) {\\n    uint256 healthFactor = getHealthFactor(owner);\\n\\n    if (healthFactor >= PRECISION_CONSTANT) {\\n      liquidationFactor = 0;\\n    } else if (FULL_LIQUIDATION_THRESHOLD < healthFactor) {\\n      liquidationFactor = DEFAULT_LIQUIDATION_CLOSE_FACTOR; // 50% of owner's debt\\n    } else {\\n      liquidationFactor = MAX_LIQUIDATION_CLOSE_FACTOR; // 100% of owner's debt\\n    }\\n  }\\n\\n  /// @inheritdoc IVault\\n  function liquidate(\\n    address owner,\\n    address receiver,\\n    uint256 liqCloseFactor_\\n  )\\n    external\\n    hasRole(msg.sender, LIQUIDATOR_ROLE)\\n    returns (uint256 gainedShares)\\n  {\\n    if (receiver == address(0)) {\\n      revert BorrowingVault__liquidate_invalidInput();\\n    }\\n\\n    address caller = msg.sender;\\n\\n    uint256 liquidationFactor = getLiquidationFactor(owner);\\n    if (liquidationFactor == 0) {\\n      revert BorrowingVault__liquidate_positionHealthy();\\n    }\\n    if (liqCloseFactor_ > liquidationFactor) {\\n      revert BorrowingVault__liquidate_moreThanAllowed();\\n    }\\n\\n    // Compute debt amount that must be paid by liquidator.\\n    uint256 debt = convertToDebt(_debtShares[owner]);\\n    uint256 debtSharesToCover = Math.mulDiv(_debtShares[owner], liqCloseFactor_, PRECISION_CONSTANT);\\n    uint256 debtToCover = Math.mulDiv(debt, liqCloseFactor_, PRECISION_CONSTANT);\\n\\n    // Compute `gainedShares` amount that the liquidator will receive.\\n    uint256 price = oracle.getPriceOf(debtAsset(), asset(), _debtDecimals);\\n    uint256 discountedPrice = Math.mulDiv(price, LIQUIDATION_PENALTY, PRECISION_CONSTANT);\\n\\n    uint256 gainedAssets = Math.mulDiv(debtToCover, 10 ** _asset.decimals(), discountedPrice);\\n    gainedShares = convertToShares(gainedAssets);\\n\\n    _payback(caller, owner, debtToCover, debtSharesToCover);\\n\\n    // Ensure liquidator receives no more shares than 'owner' owns.\\n    uint256 existingShares = maxRedeem(owner);\\n    if (gainedShares > existingShares) {\\n      gainedShares = existingShares;\\n    }\\n\\n    // Internal share adjusment between 'owner' and 'liquidator'.\\n    _burn(owner, gainedShares);\\n    _mint(receiver, gainedShares);\\n\\n    emit Liquidate(caller, receiver, owner, gainedShares, debtToCover, price, liquidationFactor);\\n  }\\n\\n  /*/////////////////////////\\n      Admin set functions \\n  /////////////////////////*/\\n\\n  /**\\n   * @notice Sets `newOracle` address as the {FujiOracle} for this vault.\\n   *\\n   * @param newOracle address\\n   *\\n   * @dev Requirements:\\n   * - Must not be address zero.\\n   * - Must emit a OracleChanged event.\\n   * - Must be called from a timelock.\\n   */\\n  function setOracle(IFujiOracle newOracle) external onlyTimelock {\\n    if (address(newOracle) == address(0)) {\\n      revert BaseVault__setter_invalidInput();\\n    }\\n    oracle = newOracle;\\n    emit OracleChanged(newOracle);\\n  }\\n\\n  /**\\n   * @notice Sets the maximum loan-to-value factor of this vault.\\n   *\\n   * @param maxLtv_ factor to be set\\n   *\\n   *  @dev See factor\\n   * https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   * Restrictions:\\n   * - Must be called from a timelock.\\n   * - Must be at least 1% (1e16).\\n   * - Must be less than 100% (PRECISION_CONSTANT).\\n   * - Must be less than `liqRation`.\\n   */\\n  function setMaxLtv(uint256 maxLtv_) external onlyTimelock {\\n    if (maxLtv_ < 1e16 || maxLtv_ >= PRECISION_CONSTANT || maxLtv_ >= liqRatio) {\\n      revert BaseVault__setter_invalidInput();\\n    }\\n    maxLtv = maxLtv_;\\n    emit MaxLtvChanged(maxLtv);\\n  }\\n\\n  /**\\n   * @notice Sets the Loan-To-Value liquidation threshold factor of this vault.\\n   *\\n   * @param liqRatio_ factor to be set\\n   *\\n   * @dev See factor\\n   * https://github.com/Fujicracy/CrossFuji/tree/main/packages/protocol#readme.\\n   * Restrictions:\\n   * - Must be called from a timelock.\\n   * - Must be greater than 'maxLTV', and non zero.\\n   * - Must be greater than 2% (2e16).\\n   * - Must be less than 100% (PRECISION_CONSTANT).\\n   */\\n  function setLiqRatio(uint256 liqRatio_) external onlyTimelock {\\n    if (liqRatio_ <= maxLtv || liqRatio_ < 2e16 || liqRatio_ >= PRECISION_CONSTANT) {\\n      revert BaseVault__setter_invalidInput();\\n    }\\n    liqRatio = liqRatio_;\\n    emit LiqRatioChanged(liqRatio);\\n  }\\n\\n  /// @inheritdoc BaseVault\\n  function _setProviders(ILendingProvider[] memory providers) internal override {\\n    uint256 len = providers.length;\\n    for (uint256 i = 0; i < len;) {\\n      if (address(providers[i]) == address(0)) {\\n        revert BaseVault__setter_invalidInput();\\n      }\\n      _asset.forceApprove(\\n        providers[i].approvedOperator(asset(), asset(), debtAsset()), type(uint256).max\\n      );\\n      _debtAsset.forceApprove(\\n        providers[i].approvedOperator(debtAsset(), asset(), debtAsset()), type(uint256).max\\n      );\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    _providers = providers;\\n\\n    emit ProvidersChanged(providers);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IFlasher\\n * @author Fujidao Labs\\n * @notice Defines the interface for all flashloan providers.\\n */\\n\\ninterface IFlasher {\\n  /**\\n   * @notice Initiates a flashloan a this provider.\\n   * @param asset address to be flashloaned.\\n   * @param amount of `asset` to be flashloaned.\\n   * @param requestor address to which flashloan will be facilitated.\\n   * @param requestorCalldata encoded args with selector that will be OPCODE-CALL'ed to `requestor`.\\n   * @dev To encode `params` see examples:\\n   * \u2022 solidity:\\n   *   > abi.encodeWithSelector(contract.transferFrom.selector, from, to, amount);\\n   * \u2022 ethersJS:\\n   *   > contract.interface.encodeFunctionData(\\\"transferFrom\\\", [from, to, amount]);\\n   * \u2022 foundry cast:\\n   *   > cast calldata \\\"transferFrom(address,address,uint256)\\\" from, to, amount\\n   *\\n   * Requirements:\\n   * - MUST implement `_checkAndSetEntryPoint()`\\n   */\\n  function initiateFlashloan(\\n    address asset,\\n    uint256 amount,\\n    address requestor,\\n    bytes memory requestorCalldata\\n  )\\n    external;\\n\\n  /**\\n   * @notice Returns the address from which flashloan for `asset` is sourced.\\n   * @param asset intended to be flashloaned.\\n   * @dev Override at flashloan provider implementation as required.\\n   * Some protocol implementations source flashloans from different contracts\\n   * depending on `asset`.\\n   */\\n  function getFlashloanSourceAddr(address asset) external view returns (address callAddr);\\n\\n  /**\\n   * @notice Returns the expected flashloan fee for `amount`\\n   * of this flashloan provider.\\n   * @param asset to be flashloaned\\n   * @param amount of flashloan\\n   */\\n  function computeFlashloanFee(address asset, uint256 amount) external view returns (uint256 fee);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILendingProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/**\\n * @title ILendingProvider\\n *\\n * @author Fujidao Labs\\n *\\n * @notice  Defines the interface for core engine to perform operations at lending providers.\\n *\\n * @dev Functions are intended to be called in the context of a Vault via delegateCall,\\n * except indicated.\\n */\\n\\ninterface ILendingProvider {\\n  function providerName() external view returns (string memory);\\n  /**\\n   * @notice Returns the operator address that requires ERC20-approval for vault operations.\\n   *\\n   * @param keyAsset address to inquiry operator\\n   * @param asset address of the calling vault\\n   * @param debtAsset address of the calling vault. Note: if {YieldVault} this will be address(0).\\n   *\\n   * @dev Provider implementations may or not require all 3 inputs.\\n   */\\n  function approvedOperator(\\n    address keyAsset,\\n    address asset,\\n    address debtAsset\\n  )\\n    external\\n    view\\n    returns (address operator);\\n\\n  /**\\n   * @notice Performs deposit operation at lending provider on behalf vault.\\n   *\\n   * @param amount amount to deposit\\n   * @param vault IVault calling this function\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   */\\n  function deposit(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   * @notice Performs borrow operation at lending provider on behalf vault.\\n   *\\n   * @param amount amount to borrow\\n   * @param vault IVault calling this function\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   */\\n  function borrow(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   * @notice Performs withdraw operation at lending provider on behalf vault.\\n   * @param amount amount to withdraw\\n   * @param vault IVault calling this function.\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   */\\n  function withdraw(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   *\\n   * @notice Performs payback operation at lending provider on behalf vault.\\n   *\\n   * @param amount amount to payback\\n   * @param vault IVault calling this function.\\n   *\\n   * @dev Requirements:\\n   * - This function should be delegate called in the context of a `vault`.\\n   * - Check there is erc20-approval to `approvedOperator` by the `vault` prior to call.\\n   */\\n  function payback(uint256 amount, IVault vault) external returns (bool success);\\n\\n  /**\\n   * @notice Returns DEPOSIT balance of 'user' at lending provider.\\n   *\\n   * @param user address whom balance is needed\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0).\\n   *\\n   * @dev Requirements:\\n   * - Must not require Vault context.\\n   */\\n  function getDepositBalance(address user, IVault vault) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Returns BORROW balance of 'user' at lending provider.\\n   *\\n   * @param user address whom balance is needed\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0).\\n   *\\n   * @dev Requirements:\\n   * - Must not require Vault context.\\n   */\\n  function getBorrowBalance(address user, IVault vault) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Returns the latest SUPPLY annual percent rate (APR) at lending provider.\\n   *\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0)\\n   *\\n   * @dev Requirements:\\n   * - Must return the rate in ray units (1e27)\\n   * Example 8.5% APR = 0.085 x 1e27 = 85000000000000000000000000\\n   * - Must not require Vault context.\\n   */\\n  function getDepositRateFor(IVault vault) external view returns (uint256 rate);\\n\\n  /**\\n   * @notice Returns the latest BORROW annual percent rate (APR) at lending provider.\\n   *\\n   * @param vault IVault required by some specific providers with multi-markets, otherwise pass address(0)\\n   *\\n   * @dev Requirements:\\n   * - Must return the rate in ray units (1e27)\\n   * Example 8.5% APR = 0.085 x 1e27 = 85000000000000000000000000\\n   * - Must not require Vault context.\\n   */\\n  function getBorrowRateFor(IVault vault) external view returns (uint256 rate);\\n}\\n\"\r\n    },\r\n    \"src/access/SystemAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title SystemAccessControl\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Abstract contract that should be inherited by contract implementations that\\n * call the {Chief} contract for access control checks.\\n */\\n\\nimport {IChief} from \\\"../interfaces/IChief.sol\\\";\\nimport {CoreRoles} from \\\"./CoreRoles.sol\\\";\\n\\ncontract SystemAccessControl is CoreRoles {\\n  /// @dev Custom Errors\\n  error SystemAccessControl__hasRole_missingRole(address caller, bytes32 role);\\n  error SystemAccessControl__onlyTimelock_callerIsNotTimelock();\\n  error SystemAccessControl__onlyHouseKeeper_notHouseKeeper();\\n\\n  IChief public chief;\\n\\n  /**\\n   * @dev Modifier that checks `caller` has `role`.\\n   */\\n  modifier hasRole(address caller, bytes32 role) {\\n    if (!chief.hasRole(role, caller)) {\\n      revert SystemAccessControl__hasRole_missingRole(caller, role);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that checks `msg.sender` has HOUSE_KEEPER_ROLE.\\n   */\\n  modifier onlyHouseKeeper() {\\n    if (!chief.hasRole(HOUSE_KEEPER_ROLE, msg.sender)) {\\n      revert SystemAccessControl__onlyHouseKeeper_notHouseKeeper();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that checks `msg.sender` is the defined `timelock` in {Chief}\\n   * contract.\\n   */\\n  modifier onlyTimelock() {\\n    if (msg.sender != chief.timelock()) {\\n      revert SystemAccessControl__onlyTimelock_callerIsNotTimelock();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Init of a new {SystemAccessControl}.\\n   *\\n   * @param chief_ address\\n   *\\n   * @dev Requirements:\\n   * - Must pass non-zero {Chief} address, that could be checked at child contract.\\n   */\\n  function __SystemAccessControl_init(address chief_) internal {\\n    chief = IChief(chief_);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFujiOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IFujiOracle\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface of the {FujiOracle}.\\n */\\n\\ninterface IFujiOracle {\\n  /**\\n   * @dev Emit when a change in price feed address is done for an `asset`.\\n   *\\n   * @param asset address\\n   * @param newPriceFeedAddress that returns USD price from Chainlink\\n   */\\n  event AssetPriceFeedChanged(address asset, address newPriceFeedAddress);\\n\\n  /**\\n   * @notice Returns the exchange rate between two assets, with price oracle given in\\n   * specified `decimals`.\\n   *\\n   * @param currencyAsset to be used, zero-address for USD\\n   * @param commodityAsset to be used, zero-address for USD\\n   * @param decimals  of the desired price output\\n   *\\n   * @dev Price format is defined as: (amount of currencyAsset per unit of commodityAsset Exchange Rate).\\n   * Requirements:\\n   * - Must check that both `currencyAsset` and `commodityAsset` are set in\\n   *   usdPriceFeeds, otherwise return zero.\\n   */\\n  function getPriceOf(\\n    address currencyAsset,\\n    address commodityAsset,\\n    uint8 decimals\\n  )\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/abstracts/BaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\n/**\\n * @title BaseVault\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Abstract contract that defines the basic common functions and interface\\n * for all vault types. User state is kept in vaults via tokenized shares compliant to ERC4626.\\n * BaseVault defines but does not implement the debt handling functions. Slippage protected\\n * functions are available through ERC5143 extension. The `_providers` of this vault are the\\n * liquidity source for lending, borrowing and/or yielding operations.\\n * Setter functions are controlled by timelock, and roles defined in {SystemAccessControl}.\\n * Pausability in core functions is implemented for emergency cases.\\n * Allowance and approvals for value extracting operations  is possible via\\n * signed messages defined in {VaultPermissions}.\\n * A rebalancing function is implemented to move vault's funds across providers.\\n */\\nimport {ERC20, IERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20Metadata} from\\n  \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport {Address} from \\\"openzeppelin-contracts/contracts/utils/Address.sol\\\";\\nimport {IVault} from \\\"../interfaces/IVault.sol\\\";\\nimport {ILendingProvider} from \\\"../interfaces/ILendingProvider.sol\\\";\\nimport {IERC4626} from \\\"openzeppelin-contracts/contracts/interfaces/IERC4626.sol\\\";\\nimport {VaultPermissions} from \\\"../vaults/VaultPermissions.sol\\\";\\nimport {SystemAccessControl} from \\\"../access/SystemAccessControl.sol\\\";\\nimport {PausableVault} from \\\"./PausableVault.sol\\\";\\n\\nabstract contract BaseVault is ERC20, SystemAccessControl, PausableVault, VaultPermissions, IVault {\\n  using Math for uint256;\\n  using Address for address;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  /// @dev Custom Errors\\n  error BaseVault__constructor_invalidInput();\\n  error BaseVault__initializeVaultShares_alreadyInitialized();\\n  error BaseVault__initializeVaultShares_lessThanMin();\\n  error BaseVault__deposit_invalidInput();\\n  error BaseVault__deposit_moreThanMax();\\n  error BaseVault__deposit_lessThanMin();\\n  error BaseVault__withdraw_invalidInput();\\n  error BaseVault__setter_invalidInput();\\n  error BaseVault__checkRebalanceFee_excessFee();\\n  error BaseVault__deposit_slippageTooHigh();\\n  error BaseVault__mint_slippageTooHigh();\\n  error BaseVault__withdraw_slippageTooHigh();\\n  error BaseVault__redeem_slippageTooHigh();\\n  error BaseVault__useIncreaseWithdrawAllowance();\\n  error BaseVault__useDecreaseWithdrawAllowance();\\n\\n  /**\\n   *  @dev `VERSION` of this vault.\\n   * Software versioning rules are followed: v-0.0.0 (v-MAJOR.MINOR.PATCH)\\n   * Major version when you make incompatible ABI changes\\n   * Minor version when you add functionality in a backwards compatible manner.\\n   * Patch version when you make backwards compatible fixes.\\n   */\\n  string public constant VERSION = string(\\\"0.2.0\\\");\\n\\n  bool public initialized;\\n\\n  IERC20Metadata internal immutable _asset;\\n\\n  uint8 private immutable _decimals;\\n\\n  ILendingProvider[] internal _providers;\\n  ILendingProvider public activeProvider;\\n\\n  uint256 public minAmount;\\n\\n  /**\\n   * @notice Constructor of a new {BaseVault}.\\n   *\\n   * @param asset_ this vault will handle as main asset (collateral)\\n   * @param chief_ that deploys and controls this vault\\n   * @param name_ of the token-shares handled in this vault\\n   * @param symbol_ of the token-shares handled in this vault\\n   *\\n   * @dev Requirements:\\n   * - Must assign `asset_` {ERC20-decimals} and `_decimals` equal.\\n   * - Must check initial `minAmount` is not < 1e6. Refer to https://rokinot.github.io/hatsfinance.\\n   */\\n  constructor(\\n    address asset_,\\n    address chief_,\\n    string memory name_,\\n    string memory symbol_\\n  )\\n    ERC20(name_, symbol_)\\n  {\\n    if (asset_ == address(0) || chief_ == address(0)) {\\n      revert BaseVault__constructor_invalidInput();\\n    }\\n\\n    __SystemAccessControl_init(chief_);\\n    __EIP712_initialize(name_, VERSION);\\n\\n    _asset = IERC20Metadata(asset_);\\n    _decimals = IERC20Metadata(asset_).decimals();\\n    minAmount = 1e6;\\n\\n    // @dev pause all actions that will be unpaused when initializing the vault\\n    _pauseForceAllActions();\\n  }\\n\\n  /**\\n   * @notice Implement at children contract.\\n   *\\n   * @param assets amount to initialize asset shares\\n   *\\n   * Requirements:\\n   * - Must create shares and balance to avoid inflation attack.\\n   * - Must have `assets` be > `minAmount`.\\n   * - Must account any created shares to the {Chief.timelock()}.\\n   * - Must pull assets from msg.sender\\n   * - Must unpause all actions at the end.\\n   * - Must emit a VaultInitialized event.\\n   */\\n  function initializeVaultShares(uint256 assets) public {\\n    if (initialized) {\\n      revert BaseVault__initializeVaultShares_alreadyInitialized();\\n    }\\n    if (assets < minAmount) {\\n      revert BaseVault__initializeVaultShares_lessThanMin();\\n    }\\n    _unpauseForceAllActions();\\n\\n    address timelock = chief.timelock();\\n    _deposit(msg.sender, timelock, assets, assets);\\n\\n    initialized = true;\\n    emit VaultInitialized(msg.sender);\\n  }\\n\\n  /*////////////////////////////////////////////////////\\n      Asset management: allowance {IERC20} overrides \\n      Overrides to handle as `withdrawAllowance`\\n  ///////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Returns the shares amount allowed to transfer from\\n   *  `owner` to `receiver`.\\n   *\\n   * @param owner of the shares\\n   * @param receiver that can receive the shares\\n   *\\n   * @dev Requirements:\\n   * - Must be overriden to call {VaultPermissions-withdrawAllowance}.\\n   */\\n  function allowance(\\n    address owner,\\n    address receiver\\n  )\\n    public\\n    view\\n    override(ERC20, IERC20)\\n    returns (uint256)\\n  {\\n    /// @dev operator = receiver\\n    return convertToShares(withdrawAllowance(owner, receiver, receiver));\\n  }\\n\\n  /**\\n   * @notice Approve allowance of `shares` to `receiver`.\\n   *\\n   * @param receiver to whom share allowance is being set\\n   * @param shares amount of allowance\\n   *\\n   * @dev Recommend to use increase/decrease WithdrawAllowance methods.\\n   * - Must be overriden to call {VaultPermissions-_setWithdrawAllowance}.\\n   * - Must convert `shares` into `assets` amount before calling internal functions.\\n   */\\n  function approve(address receiver, uint256 shares) public override(ERC20, IERC20) returns (bool) {\\n    /// @dev operator = receiver and owner = msg.sender\\n    _setWithdrawAllowance(msg.sender, receiver, receiver, convertToAssets(shares));\\n    emit Approval(msg.sender, receiver, shares);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice This method in OZ erc20-implementation has been disabled in favor of\\n   * {VaultPermissions-increaseWithdrawAllowance()}.\\n   */\\n  function increaseAllowance(address, uint256) public pure override returns (bool) {\\n    revert BaseVault__useIncreaseWithdrawAllowance();\\n  }\\n\\n  /**\\n   * @notice This method in OZ erc20-implementation has been disabled in favor of\\n   * {VaultPermissions-decreaseWithdrawAllowance()}.\\n   */\\n  function decreaseAllowance(address, uint256) public pure override returns (bool) {\\n    revert BaseVault__useDecreaseWithdrawAllowance();\\n  }\\n\\n  /**\\n   * @dev Called during {ERC20-transferFrom} to decrease allowance.\\n   * Requirements:\\n   * - Must be overriden to call {VaultPermissions-_spendWithdrawAllowance}.\\n   * - Must convert `shares` to `assets` before calling internal functions.\\n   * - Must assume msg.sender as the operator.\\n   *\\n   * @param owner of `shares`\\n   * @param spender to whom `shares` will be spent\\n   * @param shares amount to spend\\n   */\\n  function _spendAllowance(address owner, address spender, uint256 shares) internal override {\\n    _spendWithdrawAllowance(owner, msg.sender, spender, convertToAssets(shares));\\n  }\\n\\n  /*//////////////////////////////////////////\\n      Asset management: overrides IERC4626\\n  //////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Returns the number of decimals used to get number representation.\\n   */\\n  function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function asset() public view virtual override returns (address) {\\n    return address(_asset);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function balanceOfAsset(address owner) external view virtual override returns (uint256 assets) {\\n    return convertToAssets(balanceOf(owner));\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function totalAssets() public view virtual override returns (uint256 assets) {\\n    return _checkProvidersBalance(\\\"getDepositBalance\\\");\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\\n    return _convertToShares(assets, Math.Rounding.Down);\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\\n    return _convertToAssets(shares, Math.Rounding.Down);\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function maxDeposit(address) public view virtual override returns (uint256) {\\n    if (paused(VaultActions.Deposit)) {\\n      return 0;\\n    }\\n    return type(uint256).max;\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function maxMint(address) public view virtual override returns (uint256) {\\n    if (paused(VaultActions.Deposit)) {\\n      return 0;\\n    }\\n    return type(uint256).max;\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function maxWithdraw(address owner) public view virtual override returns (uint256);\\n\\n  /// @inheritdoc IERC4626\\n  function maxRedeem(address owner) public view virtual override returns (uint256);\\n\\n  /// @inheritdoc IERC4626\\n  function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n    return _convertToShares(assets, Math.Rounding.Down);\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n    return _convertToAssets(shares, Math.Rounding.Up);\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n    return _convertToShares(assets, Math.Rounding.Up);\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n    return _convertToAssets(shares, Math.Rounding.Down);\\n  }\\n\\n  /**\\n   * @notice Slippage protected `deposit()` per EIP5143.\\n   *\\n   * @param assets amount to be deposited\\n   * @param receiver to whom `assets` amount will be credited\\n   * @param minShares amount expected from this deposit action\\n   *\\n   * @dev Refer to https://eips.ethereum.org/EIPS/eip-5143.\\n   * Requirements:\\n   * - Must mint at least `minShares` when calling `deposit()`.\\n   */\\n  function deposit(\\n    uint256 assets,\\n    address receiver,\\n    uint256 minShares\\n  )\\n    public\\n    virtual\\n    returns (uint256)\\n  {\\n    uint256 receivedShares = deposit(assets, receiver);\\n    if (receivedShares < minShares) {\\n      revert BaseVault__deposit_slippageTooHigh();\\n    }\\n    return receivedShares;\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n    uint256 shares = previewDeposit(assets);\\n\\n    _depositChecks(receiver, assets, shares);\\n    _deposit(msg.sender, receiver, assets, shares);\\n\\n    return shares;\\n  }\\n\\n  /**\\n   * @notice Slippage protected `mint()` per EIP5143.\\n   *\\n   * @param shares amount to mint\\n   * @param receiver to whom `shares` amount will be credited\\n   * @param maxAssets amount that must be credited when calling mint\\n   *\\n   * @dev Refer to https://eips.ethereum.org/EIPS/eip-5143.\\n   * Requirements:\\n   * - Must not pull more than `maxAssets` when calling `mint()`.\\n   */\\n  function mint(\\n    uint256 shares,\\n    address receiver,\\n    uint256 maxAssets\\n  )\\n    public\\n    virtual\\n    returns (uint256)\\n  {\\n    uint256 pulledAssets = mint(shares, receiver);\\n    if (pulledAssets > maxAssets) {\\n      revert BaseVault__mint_slippageTooHigh();\\n    }\\n    return pulledAssets;\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n    uint256 assets = previewMint(shares);\\n\\n    _depositChecks(receiver, assets, shares);\\n    _deposit(msg.sender, receiver, assets, shares);\\n\\n    return assets;\\n  }\\n\\n  /**\\n   * @notice Slippage protected `withdraw()` per EIP5143.\\n   *\\n   * @param assets amount that is being withdrawn\\n   * @param receiver to whom `assets` amount will be transferred\\n   * @param owner to whom `assets` amount will be debited\\n   * @param maxShares amount that shall be burned when calling withdraw\\n   *\\n   * @dev Refer to https://eips.ethereum.org/EIPS/eip-5143.\\n   * If needed to withdraw the maximum amount it is recommended to use\\n   * the non-EIP5143 method.\\n   * Requirements:\\n   * - Must not burn more than `maxShares` when calling `withdraw()`.\\n   */\\n  function withdraw(\\n    uint256 assets,\\n    address receiver,\\n    address owner,\\n    uint256 maxShares\\n  )\\n    public\\n    virtual\\n    returns (uint256)\\n  {\\n    uint256 burnedShares = withdraw(assets, receiver, owner);\\n    if (burnedShares > maxShares) {\\n      revert BaseVault__withdraw_slippageTooHigh();\\n    }\\n    return burnedShares;\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function withdraw(\\n    uint256 assets,\\n    address receiver,\\n    address owner\\n  )\\n    public\\n    override\\n    returns (uint256)\\n  {\\n    uint256 shares = previewWithdraw(assets);\\n    (, shares) = _withdrawInternal(assets, shares, msg.sender, receiver, owner);\\n    return shares;\\n  }\\n\\n  /**\\n   * @notice Slippage protected `redeem()` per EIP5143.\\n   *\\n   * @param shares amount that will be redeemed\\n   * @param receiver to whom asset equivalent of `shares` amount will be transferred\\n   * @param owner of the shares\\n   * @param minAssets amount that `receiver` must expect\\n   *\\n   * @dev Refer to https://eips.ethereum.org/EIPS/eip-5143.\\n   * Requirements:\\n   * - Must  receive at least `minAssets` when calling `redeem()`.\\n   */\\n  function redeem(\\n    uint256 shares,\\n    address receiver,\\n    address owner,\\n    uint256 minAssets\\n  )\\n    public\\n    virtual\\n    returns (uint256)\\n  {\\n    uint256 receivedAssets = redeem(shares, receiver, owner);\\n    if (receivedAssets < minAssets) {\\n      revert BaseVault__redeem_slippageTooHigh();\\n    }\\n    return receivedAssets;\\n  }\\n\\n  /// @inheritdoc IERC4626\\n  function redeem(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  )\\n    public\\n    override\\n    returns (uint256)\\n  {\\n    uint256 assets = previewRedeem(shares);\\n    (assets,) = _withdrawInternal(assets, shares, msg.sender, receiver, owner);\\n    return assets;\\n  }\\n\\n  /**\\n   * @dev Conversion function from `assets` to shares equivalent with support for rounding direction.\\n   * Requirements:\\n   * - Must return zero if `assets` or `totalSupply()` == 0.\\n   * - Must revert if `totalAssets()` is not > 0.\\n   *   (Corresponds to a case where you divide by zero.)\\n   *\\n   * @param assets amount to convert to shares\\n   * @param rounding direction of division remainder\\n   */\\n  function _convertToShares(\\n    uint256 assets,\\n    Math.Rounding rounding\\n  )\\n    internal\\n    view\\n    virtual\\n    returns (uint256 shares)\\n  {\\n    uint256 supply = totalSupply();\\n    return (assets == 0 || supply == 0) ? assets : assets.mulDiv(supply, totalAssets(), rounding);\\n  }\\n\\n  /**\\n   * @dev Conversion function from `shares` to asset type with support for rounding direction.\\n   * Requirements:\\n   * - Must return zero if `totalSupply()` == 0.\\n   *\\n   * @param shares amount to convert to assets\\n   * @param rounding direction of division remainder\\n   */\\n  function _convertToAssets(\\n    uint256 shares,\\n    Math.Rounding rounding\\n  )\\n    internal\\n    view\\n    virtual\\n    returns (uint256 assets)\\n  {\\n    uint256 supply = totalSupply();\\n    return (supply == 0) ? shares : shares.mulDiv(totalAssets(), supply, rounding);\\n  }\\n\\n  /**\\n   * @dev Perform `_deposit()` at provider {IERC4626-deposit}.\\n   * Requirements:\\n   * - Must call `activeProvider` in `_executeProviderAction()`.\\n   * - Must emit a Deposit event.\\n   *\\n   * @param caller or {msg.sender}\\n   * @param receiver to whom `assets` are credited by `shares` amount\\n   * @param assets amount transferred during this deposit\\n   * @param shares amount credited to `receiver` during this deposit\\n   */\\n  function _deposit(\\n    address caller,\\n    address receiver,\\n    uint256 assets,\\n    uint256 shares\\n  )\\n    internal\\n    whenNotPaused(VaultActions.Deposit)\\n  {\\n    _asset.safeTransferFrom(caller, address(this), assets);\\n    _executeProviderAction(assets, \\\"deposit\\\", activeProvider);\\n    _mint(receiver, shares);\\n\\n    emit Deposit(caller, receiver, assets, shares);\\n  }\\n\\n  /**\\n   * @dev Runs common checks for all \\\"deposit\\\" or \\\"mint\\\" actions in this vault.\\n   * Requirements:\\n   * - Must revert for all conditions not passed.\\n   *\\n   * @param receiver of the deposit\\n   * @param assets being deposited\\n   * @param shares being minted for `receiver`\\n   */\\n  function _depositChecks(address receiver, uint256 assets, uint256 shares) private view {\\n    if (receiver == address(0) || assets == 0 || shares == 0) {\\n      revert BaseVault__deposit_invalidInput();\\n    }\\n    if (assets < minAmount) {\\n      revert BaseVault__deposit_lessThanMin();\\n    }\\n  }\\n\\n  /**\\n   * @dev Function to handle common flow for `withdraw(...)` and `reddem(...)`\\n   * It returns the updated `assets_` and `shares_` values if applicable.\\n   *\\n   * @param assets amount transferred during this withraw\\n   * @param shares amount burned to `owner` during this withdraw\\n   * @param caller or {msg.sender}\\n   * @param receiver to whom `assets` amount will be transferred to\\n   * @param owner to whom `shares` will be burned\\n   */\\n  function _withdrawInternal(\\n    uint256 assets,\\n    uint256 shares,\\n    address caller,\\n    address receiver,\\n    address owner\\n  )\\n    internal\\n    returns (uint256 assets_, uint256 shares_)\\n  {\\n    /**\\n     * @dev If passed `assets` argument is greater than the max amount `owner` can withdraw\\n     * the maximum amount withdrawable will be withdrawn and returned from `withdrawChecks(...)`.\\n     */\\n    (assets_, shares_) = _withdrawChecks(caller, receiver, owner, assets, shares);\\n    _withdraw(caller, receiver, owner, assets_, shares_);\\n  }\\n\\n  /**\\n   * @dev Perform `_withdraw()` at provider {IERC4626-withdraw}.\\n   * Requirements:\\n   * - Must call `activeProvider` in `_executeProviderAction()`.\\n   * - Must emit a Withdraw event.\\n   *\\n   * @param caller or {msg.sender}\\n   * @param receiver to whom `assets` amount will be transferred to\\n   * @param owner to whom `shares` will be burned\\n   * @param assets amount transferred during this withraw\\n   * @param shares amount burned to `owner` during this withdraw\\n   */\\n  function _withdraw(\\n    address caller,\\n    address receiver,\\n    address owner,\\n    uint256 assets,\\n    uint256 shares\\n  )\\n    internal\\n    virtual\\n    whenNotPaused(VaultActions.Withdraw)\\n  {\\n    _burn(owner, shares);\\n    _executeProviderAction(assets, \\\"withdraw\\\", activeProvider);\\n    _asset.safeTransfer(receiver, assets);\\n\\n    emit Withdraw(caller, receiver, owner, assets, shares);\\n  }\\n\\n  /**\\n   * @dev Runs common checks for all \\\"withdraw\\\" or \\\"redeem\\\" actions in this vault and returns maximum\\n   * `assets_` and `shares_` to withdraw if passed amounts exceed `owner's` debtShares/debt balance.\\n   * Requirements:\\n   * - Must revert for all conditions not passed.\\n   *\\n   * @param caller in msg.sender context\\n   * @param receiver of the withdrawn assets\\n   * @param owner of the withdrawn assets\\n   * @param assets being withdrawn\\n   * @param shares being burned for `owner`\\n   */\\n  function _withdrawChecks(\\n    address caller,\\n    address receiver,\\n    address owner,\\n    uint256 assets,\\n    uint256 shares\\n  )\\n    private\\n    returns (uint256 assets_, uint256 shares_)\\n  {\\n    if (receiver == address(0) || owner == address(0) || assets == 0 || shares == 0) {\\n      revert BaseVault__withdraw_invalidInput();\\n    }\\n\\n    uint256 maxWithdraw_ = maxWithdraw(owner);\\n    if (assets > maxWithdraw_) {\\n      assets_ = maxWithdraw_;\\n      shares_ = assets_.mulDiv(shares, assets);\\n    } else {\\n      assets_ = assets;\\n      shares_ = shares;\\n    }\\n    if (caller != owner) {\\n      _spendWithdrawAllowance(owner, caller, receiver, assets_);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////\\n      Debt management: based on IERC4626 semantics\\n  //////////////////////////////////////////////////*/\\n\\n  /// @inheritdoc IVault\\n  function debtDecimals() public view virtual override returns (uint8);\\n\\n  /// @inheritdoc IVault\\n  function debtAsset() public view virtual returns (address);\\n\\n  /// @inheritdoc IVault\\n  function balanceOfDebt(address account) public view virtual override returns (uint256 debt);\\n\\n  /// @inheritdoc IVault\\n  function balanceOfDebtShares(address owner)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256 debtShares);\\n\\n  /// @inheritdoc IVault\\n  function totalDebt() public view virtual returns (uint256);\\n\\n  /// @inheritdoc IVault\\n  function convertDebtToShares(uint256 debt) public view virtual returns (uint256 shares);\\n\\n  /// @inheritdoc IVault\\n  function convertToDebt(uint256 shares) public view virtual returns (uint256 debt);\\n\\n  /// @inheritdoc IVault\\n  function maxBorrow(address borrower) public view virtual returns (uint256);\\n\\n  /// @inheritdoc IVault\\n  function maxPayback(address borrower) public view virtual returns (uint256);\\n\\n  /// @inheritdoc IVault\\n  function maxMintDebt(address borrower) public view virtual returns (uint256);\\n\\n  /// @inheritdoc IVault\\n  function maxBurnDebt(address borrower) public view virtual returns (uint256);\\n\\n  /// @inheritdoc IVault\\n  function previewBorrow(uint256 debt) public view virtual returns (uint256 shares);\\n\\n  /// @inheritdoc IVault\\n  function previewMintDebt(uint256 shares) public view virtual returns (uint256 debt);\\n\\n  /// @inheritdoc IVault\\n  function previewPayback(uint256 debt) public view virtual returns (uint256 shares);\\n\\n  /// @inheritdoc IVault\\n  function previewBurnDebt(uint256 shares) public view virtual returns (uint256 debt);\\n\\n  /// @inheritdoc IVault\\n  function borrow(\\n    uint256 debt,\\n    address receiver,\\n    address owner\\n  )\\n    public\\n    virtual\\n    returns (uint256 shares);\\n\\n  /// @inheritdoc IVault\\n  function mintDebt(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  )\\n    public\\n    virtual\\n    returns (uint256 debt);\\n\\n  /// @inheritdoc IVault\\n  function payback(uint256 debt, address owner) public virtual returns (uint256 shares);\\n\\n  /// @inheritdoc IVault\\n  function burnDebt(uint256 shares, address owner) public virtual returns (uint256 debt);\\n\\n  /**\\n   * @notice Returns borrow allowance. See {IVaultPermissions-borrowAllowance}.\\n   *\\n   * @param owner that provides borrow allowance\\n   * @param operator who can process borrow allowance on owner's behalf\\n   * @param receiver who can spend borrow allowance\\n   *\\n   * @dev Requirements:\\n   * - Must be implemented in a {BorrowingVault}, and revert in a {YieldVault}.\\n   */\\n  function borrowAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {}\\n\\n  /**\\n   * @notice Increase borrow allowance. See {IVaultPermissions-decreaseborrowAllowance}.\\n   *\\n   * @param operator who can process borrow allowance on owner's behalf\\n   * @param receiver whom spending borrow allowance is increasing\\n   *\\n   * @dev Requirements:\\n   * - Must be immplemented in a {BorrowingVault}, and revert in a {YieldVault}.\\n   */\\n  function increaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {}\\n\\n  /**\\n   * @notice Decrease borrow allowance. See {IVaultPermissions-decreaseborrowAllowance}.\\n   *\\n   * @param operator address who can process borrow allowance on owner's behalf\\n   * @param receiver address whom spending borrow allowance is decreasing\\n   *\\n   * @dev Requirements:\\n   * - Must be implemented in a {BorrowingVault}, revert in a {YieldVault}.\\n   */\\n  function decreaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {}\\n\\n  /**\\n   * @notice Process signed permit for borrow allowance. See {IVaultPermissions-permitBorrow}.\\n   *\\n   * @param owner address who signed this permit\\n   * @param receiver address whom spending borrow allowance will be set\\n   * @param value amount of borrow allowance\\n   * @param deadline timestamp at when this permit expires\\n   * @param actionArgsHash keccak256 of the abi.encoded(args,actions) to be performed in {BaseRouter._internalBundle}\\n   * @param v signature value\\n   * @param r signature value\\n   * @param s signature value\\n   *\\n   * @dev Requirements:\\n   * - Must be implemented in a {BorrowingVault}, revert in a {YieldVault}.\\n   */\\n  function permitBorrow(\\n    address owner,\\n    address receiver,\\n    uint256 value,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    public\\n    virtual\\n    override\\n  {}\\n\\n  /**\\n   * @dev Compute how much free 'assets' a user can withdraw or transfer\\n   * given their `balanceOfDebt()`.\\n   * Requirements:\\n   * - Must be implemented in {BorrowingVault} contract.\\n   * - Must not be implemented in a {YieldVault} contract.\\n   * - Must read price from {FujiOracle}.\\n   *\\n   * @param owner address to whom free assets is being checked\\n   */\\n  // function _computeFreeAssets(address owner) internal view virtual returns (uint256);\\n\\n  /*//////////////////////////\\n      Fuji Vault functions\\n  //////////////////////////*/\\n\\n  /**\\n   * @dev Execute an action at provider.\\n   *\\n   * @param assets amount handled in this action\\n   * @param name string of the method to call\\n   * @param provider to whom action is being called\\n   */\\n  function _executeProviderAction(\\n    uint256 assets,\\n    string memory name,\\n    ILendingProvider provider\\n  )\\n    internal\\n  {\\n    bytes memory data = abi.encodeWithSignature(\\n      string(abi.encodePacked(name, \\\"(uint256,address)\\\")), assets, address(this)\\n    );\\n    address(provider).functionDelegateCall(\\n      data, string(abi.encodePacked(name, \\\": delegate call failed\\\"))\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns balance of `asset` or `debtAsset` of this vault at all\\n   * listed providers in `_providers` array.\\n   *\\n   * @param method string method to call: \\\"getDepositBalance\\\" or \\\"getBorrowBalance\\\".\\n   */\\n  function _checkProvidersBalance(string memory method) internal view returns (uint256 assets) {\\n    uint256 len = _providers.length;\\n    bytes memory callData = abi.encodeWithSignature(\\n      string(abi.encodePacked(method, \\\"(address,address)\\\")), address(this), address(this)\\n    );\\n    bytes memory returnedBytes;\\n    for (uint256 i = 0; i < len;) {\\n      returnedBytes = address(_providers[i]).functionStaticCall(callData, \\\": balance call failed\\\");\\n      assets += uint256(bytes32(returnedBytes));\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /*////////////////////\\n      Public getters\\n  /////////////////////*/\\n\\n  /**\\n   * @notice Returns the array of providers of this vault.\\n   */\\n  function getProviders() external view returns (ILendingProvider[] memory list) {\\n    list = _providers;\\n  }\\n\\n  /*/////////////////////////\\n       Admin set functions\\n  /////////////////////////*/\\n\\n  /// @inheritdoc IVault\\n  function setProviders(ILendingProvider[] memory providers) external onlyTimelock {\\n    _setProviders(providers);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function setActiveProvider(ILendingProvider activeProvider_) external override onlyTimelock {\\n    _setActiveProvider(activeProvider_);\\n  }\\n\\n  /// @inheritdoc IVault\\n  function setMinAmount(uint256 amount) external override onlyTimelock {\\n    minAmount = amount;\\n    emit MinAmountChanged(amount);\\n  }\\n\\n  /// @inheritdoc PausableVault\\n  function pauseForceAll() external override hasRole(msg.sender, PAUSER_ROLE) {\\n    _pauseForceAllActions();\\n  }\\n\\n  /// @inheritdoc PausableVault\\n  function unpauseForceAll() external override hasRole(msg.sender, UNPAUSER_ROLE) {\\n    _unpauseForceAllActions();\\n  }\\n\\n  /// @inheritdoc PausableVault\\n  function pause(VaultActions action) external virtual override hasRole(msg.sender, PAUSER_ROLE) {\\n    _pause(action);\\n  }\\n\\n  /// @inheritdoc PausableVault\\n  function unpause(VaultActions action)\\n    external\\n    virtual\\n    override\\n    hasRole(msg.sender, UNPAUSER_ROLE)\\n  {\\n    _unpause(action);\\n  }\\n\\n  /**\\n   * @dev Sets the providers of this vault.\\n   * Requirements:\\n   * - Must be implemented at {BorrowingVault} or {YieldVault} level.\\n   * - Must infinite approve erc20 transfers of `asset` or `debtAsset` accordingly.\\n   * - Must emit a ProvidersChanged event.\\n   *\\n   * @param providers array of addresses\\n   */\\n  function _setProviders(ILendingProvider[] memory providers) internal virtual;\\n\\n  /**\\n   * @dev Sets the `activeProvider` of this vault.\\n   * Requirements:\\n   * - Must emit an ActiveProviderChanged event.\\n   *\\n   * @param activeProvider_ address to be set\\n   */\\n  function _setActiveProvider(ILendingProvider activeProvider_) internal {\\n    // @dev skip validity check when setting it for the 1st time\\n    if (!_isValidProvider(address(activeProvider_)) && address(activeProvider) != address(0)) {\\n      revert BaseVault__setter_invalidInput();\\n    }\\n    activeProvider = activeProvider_;\\n    emit ActiveProviderChanged(activeProvider_);\\n  }\\n\\n  /**\\n   * @dev Returns true if `provider` is in `_providers` array.\\n   *\\n   * @param provider address\\n   */\\n  function _isValidProvider(address provider) internal view returns (bool check) {\\n    uint256 len = _providers.length;\\n    for (uint256 i = 0; i < len;) {\\n      if (provider == address(_providers[i])) {\\n        check = true;\\n        break;\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Check rebalance fee is within 10 basis points.\\n   * Requirements:\\n   * - Must be equal to or less than %0.10 (max 10 basis points) of `amount`.\\n   *\\n   * @param fee amount to be checked\\n   * @param amount being rebalanced to check against\\n   */\\n  function _checkRebalanceFee(uint256 fee, uint256 amount) internal pure {\\n    uint256 reasonableFee = (amount * 10) / 10000;\\n    if (fee > reasonableFee) {\\n      revert BaseVault__checkRebalanceFee_excessFee();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/vaults/VaultPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\n/**\\n * @title VaultPermissions\\n *\\n * @author Fujidao Labs\\n *\\n * @notice An abstract contract intended to be inherited by tokenized vaults, that\\n * allow users to modify allowance of a withdraw and/or borrow amount by signing a\\n * structured data {EIP712} message.\\n * This implementation is inspired by EIP2612 used for `ERC20-permit()`.\\n * The use of `permitBorrow()` and `permitWithdraw()` allows for third party contracts\\n * or \\\"operators\\\" to perform actions on behalf users across chains.\\n */\\n\\nimport {IVaultPermissions} from \\\"../interfaces/IVaultPermissions.sol\\\";\\nimport {EIP712} from \\\"../abstracts/EIP712.sol\\\";\\nimport {ECDSA} from \\\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Counters} from \\\"openzeppelin-contracts/contracts/utils/Counters.sol\\\";\\n\\ncontract VaultPermissions is IVaultPermissions, EIP712 {\\n  using Counters for Counters.Counter;\\n\\n  /// @dev Custom Errors\\n  error VaultPermissions__zeroAddress();\\n  error VaultPermissions__expiredDeadline();\\n  error VaultPermissions__invalidSignature();\\n  error VaultPermissions__insufficientWithdrawAllowance();\\n  error VaultPermissions__insufficientBorrowAllowance();\\n  error VaultPermissions__allowanceBelowZero();\\n\\n  /// @dev Allowance mapping structure: owner => operator => receiver => amount.\\n  mapping(address => mapping(address => mapping(address => uint256))) internal _withdrawAllowance;\\n  mapping(address => mapping(address => mapping(address => uint256))) internal _borrowAllowance;\\n\\n  mapping(address => Counters.Counter) private _nonces;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  bytes32 private constant PERMIT_WITHDRAW_TYPEHASH = keccak256(\\n    \\\"PermitWithdraw(uint256 destChainId,address owner,address operator,address receiver,uint256 amount,uint256 nonce,uint256 deadline,bytes32 actionArgsHash)\\\"\\n  );\\n  // solhint-disable-next-line var-name-mixedcase\\n  bytes32 private constant PERMIT_BORROW_TYPEHASH = keccak256(\\n    \\\"PermitBorrow(uint256 destChainId,address owner,address operator,address receiver,uint256 amount,uint256 nonce,uint256 deadline,bytes32 actionArgsHash)\\\"\\n  );\\n\\n  /// @dev Reserve a slot as recommended in OZ {draft-ERC20Permit}.\\n  // solhint-disable-next-line var-name-mixedcase\\n  bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n  /// @inheritdoc IVaultPermissions\\n  function withdrawAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _withdrawAllowance[owner][operator][receiver];\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function borrowAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _borrowAllowance[owner][operator][receiver];\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function increaseWithdrawAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    override\\n    returns (bool)\\n  {\\n    address owner = msg.sender;\\n    _setWithdrawAllowance(\\n      owner, operator, receiver, _withdrawAllowance[owner][operator][receiver] + byAmount\\n    );\\n    return true;\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function decreaseWithdrawAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    override\\n    returns (bool)\\n  {\\n    address owner = msg.sender;\\n    uint256 currentAllowance = _withdrawAllowance[owner][operator][receiver];\\n    if (byAmount > currentAllowance) {\\n      revert VaultPermissions__allowanceBelowZero();\\n    }\\n    unchecked {\\n      _setWithdrawAllowance(owner, operator, receiver, currentAllowance - byAmount);\\n    }\\n    return true;\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function increaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    address owner = msg.sender;\\n    _setBorrowAllowance(\\n      owner, operator, receiver, _borrowAllowance[owner][operator][receiver] + byAmount\\n    );\\n    return true;\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function decreaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    address owner = msg.sender;\\n    uint256 currentAllowance = _borrowAllowance[owner][operator][receiver];\\n    if (byAmount > currentAllowance) {\\n      revert VaultPermissions__allowanceBelowZero();\\n    }\\n    unchecked {\\n      _setBorrowAllowance(owner, operator, receiver, currentAllowance - byAmount);\\n    }\\n    return true;\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function nonces(address owner) public view override returns (uint256) {\\n    return _nonces[owner].current();\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function permitWithdraw(\\n    address owner,\\n    address receiver,\\n    uint256 amount,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    public\\n    override\\n  {\\n    _checkDeadline(deadline);\\n    address operator = msg.sender;\\n    bytes32 structHash;\\n    // Scoped code to avoid \\\"Stack too deep\\\"\\n    {\\n      bytes memory data;\\n      uint256 currentNonce = _useNonce(owner);\\n      {\\n        data = abi.encode(\\n          PERMIT_WITHDRAW_TYPEHASH,\\n          block.chainid,\\n          owner,\\n          operator,\\n          receiver,\\n          amount,\\n          currentNonce,\\n          deadline,\\n          actionArgsHash\\n        );\\n      }\\n      structHash = keccak256(data);\\n    }\\n\\n    _checkSigner(structHash, owner, v, r, s);\\n\\n    _setWithdrawAllowance(owner, operator, receiver, amount);\\n  }\\n\\n  /// @inheritdoc IVaultPermissions\\n  function permitBorrow(\\n    address owner,\\n    address receiver,\\n    uint256 amount,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    public\\n    virtual\\n    override\\n  {\\n    _checkDeadline(deadline);\\n    address operator = msg.sender;\\n    bytes32 structHash;\\n    // Scoped code to avoid \\\"Stack too deep\\\"\\n    {\\n      bytes memory data;\\n      uint256 currentNonce = _useNonce(owner);\\n      {\\n        data = abi.encode(\\n          PERMIT_BORROW_TYPEHASH,\\n          block.chainid,\\n          owner,\\n          operator,\\n          receiver,\\n          amount,\\n          currentNonce,\\n          deadline,\\n          actionArgsHash\\n        );\\n      }\\n      structHash = keccak256(data);\\n    }\\n\\n    _checkSigner(structHash, owner, v, r, s);\\n\\n    _setBorrowAllowance(owner, operator, receiver, amount);\\n  }\\n\\n  /// Internal Functions\\n\\n  /**\\n   * @dev Sets assets `amount` as the allowance of `operator` over the `owner`'s assets.\\n   * This internal function is equivalent to `approve`.\\n   * Requirements:\\n   * - Must only be used in `asset` withdrawal logic.\\n   * - Must check `owner` cannot be the zero address.\\n   * - Much check `operator` cannot be the zero address.\\n   * - Must emits an {WithdrawApproval} event.\\n   *\\n   * @param owner address who is providing `withdrawAllowance`\\n   * @param operator address who is allowed to operate the allowance\\n   * @param receiver address who can spend the allowance\\n   * @param amount of allowance\\n   *\\n   */\\n  function _setWithdrawAllowance(\\n    address owner,\\n    address operator,\\n    address receiver,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    if (owner == address(0) || operator == address(0) || receiver == address(0)) {\\n      revert VaultPermissions__zeroAddress();\\n    }\\n    _withdrawAllowance[owner][operator][receiver] = amount;\\n    emit WithdrawApproval(owner, operator, receiver, amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the borrow allowance of `operator` over the `owner`'s debt.\\n   * This internal function is equivalent to `approve` for debt.\\n   * Requirements:\\n   * - Must  only be used in `debtAsset` borrowing logic.\\n   * - Must check `owner` cannot be the zero address.\\n   * - Much check `operator` cannot be the zero address.\\n   * - Must emit an {BorrowApproval} event.\\n   *\\n   * @param owner address who is providing `borrowAllowance`\\n   * @param operator address who is allowed to operate the allowance\\n   * @param receiver address who can spend the allowance\\n   * @param amount of allowance\\n   *\\n   */\\n  function _setBorrowAllowance(\\n    address owner,\\n    address operator,\\n    address receiver,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    if (owner == address(0) || operator == address(0) || receiver == address(0)) {\\n      revert VaultPermissions__zeroAddress();\\n    }\\n    _borrowAllowance[owner][operator][receiver] = amount;\\n    emit BorrowApproval(owner, operator, receiver, amount);\\n  }\\n\\n  /**\\n   * @dev Spends `withdrawAllowance`.\\n   * Based on OZ {ERC20-spendAllowance} for {BaseVault-assets}.\\n   *\\n   * @param owner address who is spending `withdrawAllowance`\\n   * @param operator address who is allowed to operate the allowance\\n   * @param receiver address who can spend the allowance\\n   * @param amount of allowance\\n   */\\n  function _spendWithdrawAllowance(\\n    address owner,\\n    address operator,\\n    address receiver,\\n    uint256 amount\\n  )\\n    internal\\n  {\\n    uint256 currentAllowance = withdrawAllowance(owner, operator, receiver);\\n    if (currentAllowance != type(uint256).max) {\\n      if (amount > currentAllowance) {\\n        revert VaultPermissions__insufficientWithdrawAllowance();\\n      }\\n      unchecked {\\n        // Enforce to never leave unused allowance, unless allowance set to type(uint256).max\\n        _setWithdrawAllowance(owner, operator, receiver, 0);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Spends 'borrowAllowance`.\\n   * Based on OZ {ERC20-spendAllowance} for assets.\\n   *\\n   * @param owner address who is spending `borrowAllowance`\\n   * @param operator address who is allowed to operate the allowance\\n   * @param receiver address who can spend the allowance\\n   * @param amount of allowance\\n   */\\n  function _spendBorrowAllowance(\\n    address owner,\\n    address operator,\\n    address receiver,\\n    uint256 amount\\n  )\\n    internal\\n    virtual\\n  {\\n    uint256 currentAllowance = _borrowAllowance[owner][operator][receiver];\\n    if (currentAllowance != type(uint256).max) {\\n      if (amount > currentAllowance) {\\n        revert VaultPermissions__insufficientBorrowAllowance();\\n      }\\n      unchecked {\\n        // Enforce to never leave unused allowance, unless allowance set to type(uint256).max\\n        _setBorrowAllowance(owner, operator, receiver, 0);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev \\\"Consume a nonce\\\": return the current amount and increment.\\n   * _Available since v4.1._\\n   *\\n   * @param owner address who uses a permit\\n   */\\n  function _useNonce(address owner) internal returns (uint256 current) {\\n    Counters.Counter storage nonce = _nonces[owner];\\n    current = nonce.current();\\n    nonce.increment();\\n  }\\n\\n  /**\\n   * @dev Reverts if block.timestamp is expired according to `deadline`.\\n   *\\n   * @param deadline timestamp to check\\n   */\\n  function _checkDeadline(uint256 deadline) private view {\\n    if (block.timestamp > deadline) {\\n      revert VaultPermissions__expiredDeadline();\\n    }\\n  }\\n\\n  /**\\n   * @dev Reverts if `presumedOwner` is not signer of `structHash`.\\n   *\\n   * @param structHash of data\\n   * @param presumedOwner address to check\\n   * @param v signature value\\n   * @param r signautre value\\n   * @param s signature value\\n   */\\n  function _checkSigner(\\n    bytes32 structHash,\\n    address presumedOwner,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    internal\\n    view\\n  {\\n    bytes32 digest = _hashTypedDataV4(structHash);\\n    address signer = ECDSA.recover(digest, v, r, s);\\n    if (signer != presumedOwner) {\\n      revert VaultPermissions__invalidSignature();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChief.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IChief\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines interface for {Chief} access control operations.\\n */\\n\\nimport {IAccessControl} from \\\"openzeppelin-contracts/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IChief is IAccessControl {\\n  /// @notice Returns the timelock address of the FujiV2 system.\\n  function timelock() external view returns (address);\\n\\n  /// @notice Returns the address mapper contract address of the FujiV2 system.\\n  function addrMapper() external view returns (address);\\n\\n  /**\\n   * @notice Returns true if `vault` is active.\\n   *\\n   * @param vault to check status\\n   */\\n  function isVaultActive(address vault) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true if `flasher` is an allowed {IFlasher}.\\n   *\\n   * @param flasher address to check\\n   */\\n  function allowedFlasher(address flasher) external view returns (bool);\\n\\n  /**\\n   * @notice Returns true if `swapper` is an allowed {ISwapper}.\\n   *\\n   * @param swapper address to check\\n   */\\n  function allowedSwapper(address swapper) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/access/CoreRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title CoreRoles\\n *\\n * @author Fujidao Labs\\n *\\n * @notice System definition of roles used across FujiV2 contracts.\\n */\\n\\ncontract CoreRoles {\\n  bytes32 public constant HOUSE_KEEPER_ROLE = keccak256(\\\"HOUSE_KEEPER_ROLE\\\");\\n\\n  bytes32 public constant REBALANCER_ROLE = keccak256(\\\"REBALANCER_ROLE\\\");\\n  bytes32 public constant HARVESTER_ROLE = keccak256(\\\"HARVESTER_ROLE\\\");\\n  bytes32 public constant LIQUIDATOR_ROLE = keccak256(\\\"LIQUIDATOR_ROLE\\\");\\n\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  bytes32 public constant UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/abstracts/PausableVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title PausableVault\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Abstract pausable contract developed for granular control over vault actions.\\n * This contract should be inherited by a vault implementation. The code is inspired on\\n * OpenZeppelin-Pausable contract.\\n */\\n\\nimport {IPausableVault} from \\\"../interfaces/IPausableVault.sol\\\";\\n\\nabstract contract PausableVault is IPausableVault {\\n  /// @dev Custom Errors\\n  error PausableVault__requiredNotPaused_actionPaused();\\n  error PausableVault__requiredPaused_actionNotPaused();\\n\\n  mapping(VaultActions => bool) private _actionsPaused;\\n\\n  /**\\n   * @dev Modifier to make a function callable only when `VaultAction` in the contract\\n   * is not paused.\\n   */\\n  modifier whenNotPaused(VaultActions action) {\\n    _requireNotPaused(action);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when `VaultAction` in the contract\\n   * is paused.\\n   */\\n  modifier whenPaused(VaultActions action) {\\n    _requirePaused(action);\\n    _;\\n  }\\n\\n  /// @inheritdoc IPausableVault\\n  function paused(VaultActions action) public view virtual returns (bool) {\\n    return _actionsPaused[action];\\n  }\\n\\n  /// @inheritdoc IPausableVault\\n  function pauseForceAll() external virtual override;\\n\\n  /// @inheritdoc IPausableVault\\n  function unpauseForceAll() external virtual override;\\n\\n  /// @inheritdoc IPausableVault\\n  function pause(VaultActions action) external virtual override;\\n\\n  /// @inheritdoc IPausableVault\\n  function unpause(VaultActions action) external virtual override;\\n\\n  /**\\n   * @dev Throws if the `action` in contract is paused.\\n   *\\n   * @param action Enum: 0-deposit, 1-withdraw, 2-borrow, 3-payback\\n   */\\n  function _requireNotPaused(VaultActions action) private view {\\n    if (_actionsPaused[action]) {\\n      revert PausableVault__requiredNotPaused_actionPaused();\\n    }\\n  }\\n\\n  /**\\n   * @dev Throws if the `action` in contract is not paused.\\n   *\\n   * @param action Enum: 0-deposit, 1-withdraw, 2-borrow, 3-payback\\n   */\\n  function _requirePaused(VaultActions action) private view {\\n    if (!_actionsPaused[action]) {\\n      revert PausableVault__requiredPaused_actionNotPaused();\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets pause state for `action` of this vault.\\n   *\\n   * @param action Enum: 0-deposit, 1-withdraw, 2-borrow, 3-payback\\n   */\\n  function _pause(VaultActions action) internal whenNotPaused(action) {\\n    _actionsPaused[action] = true;\\n    emit Paused(msg.sender, action);\\n  }\\n\\n  /**\\n   * @dev Sets unpause state for `action` of this vault.\\n   *\\n   * @param action Enum: 0-deposit, 1-withdraw, 2-borrow, 3-payback\\n   */\\n  function _unpause(VaultActions action) internal whenPaused(action) {\\n    _actionsPaused[action] = false;\\n    emit Unpaused(msg.sender, action);\\n  }\\n\\n  /**\\n   * @dev Forces set paused state for all `VaultActions`.\\n   */\\n  function _pauseForceAllActions() internal {\\n    _actionsPaused[VaultActions.Deposit] = true;\\n    _actionsPaused[VaultActions.Withdraw] = true;\\n    _actionsPaused[VaultActions.Borrow] = true;\\n    _actionsPaused[VaultActions.Payback] = true;\\n    emit PausedForceAll(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Forces set unpause state for all `VaultActions`.\\n   */\\n  function _unpauseForceAllActions() internal {\\n    _actionsPaused[VaultActions.Deposit] = false;\\n    _actionsPaused[VaultActions.Withdraw] = false;\\n    _actionsPaused[VaultActions.Borrow] = false;\\n    _actionsPaused[VaultActions.Payback] = false;\\n    emit UnpausedForceAll(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVaultPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IVaultPermissions\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface for a vault extended with\\n * signed permit operations for `withdraw()` and `borrow()` allowance.\\n */\\n\\ninterface IVaultPermissions {\\n  /**\\n   * @dev Emitted when `asset` withdraw allowance is set.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param amount of allowance given\\n   */\\n  event WithdrawApproval(address indexed owner, address operator, address receiver, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when `debtAsset` borrow allowance is set.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param amount of allowance given\\n   */\\n  event BorrowApproval(address indexed owner, address operator, address receiver, uint256 amount);\\n\\n  /// @dev Based on {IERC20Permit-DOMAIN_SEPARATOR}.\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external returns (bytes32);\\n\\n  /**\\n   * @notice Returns the current amount of withdraw allowance from `owner` to `receiver` that\\n   * can be executed by `operator`. This is similar to {IERC20-allowance} for BaseVault assets,\\n   * instead of token-shares.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   *\\n   * @dev Requirements:\\n   * - Must replace {IERC4626-allowance} in a vault implementation.\\n   */\\n  function withdrawAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns the current amount of borrow allowance from `owner` to `receiver` that\\n   * can be executed by `operator`. This is similar to {IERC20-allowance} for\\n   * BaseVault-debtAsset.\\n   *\\n   * @param owner who provides allowance\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   */\\n  function borrowAllowance(\\n    address owner,\\n    address operator,\\n    address receiver\\n  )\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Atomically increases the `withdrawAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-increaseAllowance} for assets.\\n   *\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param byAmount to increase withdraw allowance\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {WithdrawApproval} event indicating the updated withdraw allowance.\\n   * - Must check `operator` and `receiver are not zero address.\\n   */\\n  function increaseWithdrawAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @dev Atomically decreases the `withdrawAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-decreaseAllowance} for assets.\\n   *\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param byAmount to decrease withdraw allowance\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {WithdrawApproval} event indicating the updated withdraw allowance.\\n   * - Must check `operator` and `receiver` are not zero address.\\n   * - Must check `operator` and `receiver` have `borrowAllowance` of at least `byAmount`.\\n   *\\n   */\\n  function decreaseWithdrawAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @dev Atomically increases the `borrowAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-increaseAllowance}\\n   * for `debtAsset`.\\n   *\\n   * @param operator address who can execute the use of the allowance\\n   * @param receiver address who can spend the allowance\\n   * @param byAmount to increase borrow allowance\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {BorrowApproval} event indicating the updated borrow allowance.\\n   * - Must check `operator` and `receiver` are not zero address.\\n   */\\n  function increaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @dev Atomically decrease the `borrowAllowance` granted to `receiver` and\\n   * executable by `operator` by the caller. Based on OZ {ERC20-decreaseAllowance}\\n   * for `debtAsset`.\\n   *\\n   * @param operator who can execute the use of the allowance\\n   * @param receiver who can spend the allowance\\n   * @param byAmount to decrease borrow allowance\\n   *\\n   * Requirements:\\n   * - Must emit a {BorrowApproval} event indicating the updated borrow allowance.\\n   * - Must check `operator` and `receiver` are not the zero address.\\n   * - Must check `operator` and `receiver` have `borrowAllowance` of at least `byAmount`.\\n   */\\n  function decreaseBorrowAllowance(\\n    address operator,\\n    address receiver,\\n    uint256 byAmount\\n  )\\n    external\\n    returns (bool);\\n\\n  /**\\n   * @notice Returns the curent used nonces for permits of `owner`.\\n   * Based on OZ {IERC20Permit-nonces}.\\n   *\\n   * @param owner address to check nonces\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Sets `amount` as the `withdrawAllowance` of `receiver` executable by\\n   * caller over `owner`'s tokens, given the `owner`'s signed approval.\\n   * Inspired by {IERC20Permit-permit} for assets.\\n   *\\n   * @param owner providing allowance\\n   * @param receiver who can spend the allowance\\n   * @param amount of allowance\\n   * @param deadline timestamp limit for the execution of signed permit\\n   * @param actionArgsHash keccak256 of the abi.encoded(args,actions) to be performed in {BaseRouter._internalBundle}\\n   * @param v signature value\\n   * @param r signature value\\n   * @param s signature value\\n   *\\n   * @dev Requirements:\\n   * - Must check `deadline` is a timestamp in the future.\\n   * - Must check `receiver` is a non-zero address.\\n   * - Must check that `v`, `r` and `s` are valid `secp256k1` signature for `owner`\\n   *   over EIP712-formatted function arguments.\\n   * - Must check the signature used `owner`'s current nonce (see {nonces}).\\n   * - Must emits an {AssetsApproval} event.\\n   */\\n  function permitWithdraw(\\n    address owner,\\n    address receiver,\\n    uint256 amount,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external;\\n\\n  /**\\n   * @notice Sets `amount` as the `borrowAllowance` of `receiver` executable by caller over\\n   * `owner`'s borrowing powwer, given the `owner`'s signed approval.\\n   * Inspired by {IERC20Permit-permit} for debt.\\n   *\\n   * @param owner address providing allowance\\n   * @param receiver address who can spend the allowance\\n   * @param amount of allowance\\n   * @param deadline timestamp limit for the execution of signed permit\\n   * @param actionArgsHash keccak256 of the abi.encoded(args,actions) to be performed in {BaseRouter._internalBundle}\\n   * @param v signature value\\n   * @param r signature value\\n   * @param s signature value\\n   *\\n   * @dev Requirements:\\n   * - Must emit a {BorrowApproval} event.\\n   * - Must be implemented in a {BorrowingVault}.\\n   * - Must check `deadline` is a timestamp in the future.\\n   * - Must check `receiver` is a non-zero address.\\n   * - Must check that `v`, `r` and `s` are valid `secp256k1` signature for `owner`.\\n   *   over EIP712-formatted function arguments.\\n   * - Must check the signature used `owner`'s current nonce (see {nonces}).\\n   */\\n  function permitBorrow(\\n    address owner,\\n    address receiver,\\n    uint256 amount,\\n    uint256 deadline,\\n    bytes32 actionArgsHash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external;\\n}\\n\"\r\n    },\r\n    \"src/abstracts/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title EIP712\\n *\\n * @author Fujidao Labs\\n *\\n * @notice EIP712 abstract contract for VaultPermissions.\\n *\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and\\n * signing of typed structured data.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that\\n * is used as part of the encoding scheme, and the final step of the encoding to obtain\\n * the message digest that is then signed via ECDSA ({_hashTypedDataV4}).\\n *\\n * A big part of this implementation is inspired from:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol\\n *\\n * The main difference with OZ is that the \\\"chainid\\\" is not included in the domain separator\\n * but in the structHash. The rationale behind is to adapt EIP712 to our cross-chain message\\n * signing: allowing a user on chain A to sign a message that will be verified on chain B.\\n * If we were to include the \\\"chainid\\\" in the domain separator, that would require the user\\n * to switch networks back and forth, because of the limitation: \\\"The user-agent should\\n * refuse signing if it does not match the currently active chain.\\\". That would serously\\n * deteriorate the UX.\\n *\\n * Indeed, EIP712 doesn't forbid it as it states that \\\"Protocol designers only need to\\n * include the fields that make sense for their signing domain.\\\" into the the struct\\n * \\\"EIP712Domain\\\". However, we decided to add a ref to \\\"chainid\\\" in the param salt. Together\\n * with \\\"chainid\\\" in the typeHash, we assume those provide sufficient security guarantees.\\n */\\n\\nimport {ECDSA} from \\\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract EIP712 {\\n  /* solhint-disable var-name-mixedcase */\\n  /**\\n   * @dev Cache the domain separator as an immutable value, but also store\\n   * the chain id that it corresponds to, in order to invalidate the cached\\n   * domain separator if the chain id changes.\\n   */\\n  bytes32 private _CACHED_DOMAIN_SEPARATOR;\\n  uint256 private _CACHED_CHAIN_ID;\\n  address private _CACHED_THIS;\\n\\n  bytes32 private _HASHED_NAME;\\n  bytes32 private _HASHED_VERSION;\\n  bytes32 private _TYPE_HASH;\\n\\n  /**\\n   * @notice initializes the domain separator and parameter caches.\\n   *\\n   * @param name_ of the signing domain, i.e. the name of the DApp or the protocol\\n   * @param version_ of the current major version of the signing domain\\n   *\\n   * @dev The meaning of `name` and `version` is specified in\\n   * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n   * NOTE: These parameters cannot be changed except through a\\n   * xref:learn::upgrading-smart-contracts.adoc[smartcontract upgrade].\\n   */\\n  function __EIP712_initialize(string memory name_, string memory version_) internal {\\n    bytes32 hashedName = keccak256(bytes(name_));\\n    bytes32 hashedVersion = keccak256(bytes(version_));\\n    bytes32 typeHash =\\n      keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\");\\n    _HASHED_NAME = hashedName;\\n    _HASHED_VERSION = hashedVersion;\\n    _CACHED_CHAIN_ID = block.chainid;\\n    _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n    _CACHED_THIS = address(this);\\n    _TYPE_HASH = typeHash;\\n  }\\n\\n  /**\\n   * @dev Returns the domain separator of this contract.\\n   */\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n      return _CACHED_DOMAIN_SEPARATOR;\\n    } else {\\n      return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n    }\\n  }\\n\\n  /**\\n   * @dev Builds and returns domain seperator according to inputs.\\n   *\\n   * @param typeHash cached in this contract\\n   * @param nameHash cahed in this contract\\n   * @param versionHash cached in this contract\\n   */\\n  function _buildDomainSeparator(\\n    bytes32 typeHash,\\n    bytes32 nameHash,\\n    bytes32 versionHash\\n  )\\n    private\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(\\n      abi.encode(\\n        typeHash, nameHash, versionHash, address(this), keccak256(abi.encode(block.chainid))\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @dev Given an already:\\n   * https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct],\\n   * this function returns the hash of the fully encoded EIP712 message for this domain.\\n   *\\n   * This hash can be used together with {ECDSA-recover} to obtain the signer of\\n   * a message. For example:\\n   *\\n   * ```solidity\\n   * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n   *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n   *     mailTo,\\n   *     keccak256(bytes(mailContents))\\n   * )));\\n   * address signer = ECDSA.recover(digest, signature);\\n   * ```\\n   * @param structHash of signed data\\n   */\\n  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n    return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPausableVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IPausableVault\\n *\\n * @author Fujidao Labs\\n *\\n * @notice Defines the interface {PausableVault} contract.\\n */\\n\\ninterface IPausableVault {\\n  enum VaultActions {\\n    Deposit,\\n    Withdraw,\\n    Borrow,\\n    Payback\\n  }\\n\\n  /**\\n   * @dev Emit when pause of `action` is triggered by `account`.\\n   *\\n   * @param account who called the pause\\n   * @param action being paused\\n   */\\n  event Paused(address account, VaultActions action);\\n  /**\\n   * @dev Emit when the pause of `action` is lifted by `account`.\\n   *\\n   * @param account who called the unpause\\n   * @param action being paused\\n   */\\n  event Unpaused(address account, VaultActions action);\\n  /**\\n   * emit\\n   * @dev Emitted when forced pause all `VaultActions` triggered by `account`.\\n   *\\n   * @param account who called all pause\\n   */\\n  event PausedForceAll(address account);\\n  /**\\n   * @dev Emit when forced pause is lifted to all `VaultActions` by `account`.\\n   *\\n   * @param account who called the all unpause\\n   */\\n  event UnpausedForceAll(address account);\\n\\n  /**\\n   * @notice Returns true if the `action` in contract is paused, otherwise false.\\n   *\\n   * @param action to check pause status\\n   */\\n  function paused(VaultActions action) external view returns (bool);\\n\\n  /**\\n   * @notice Force pause state for all `VaultActions`.\\n   *\\n   * @dev Requirements:\\n   * - Must be implemented in child contract with access restriction.\\n   */\\n  function pauseForceAll() external;\\n\\n  /**\\n   * @notice Force unpause state for all `VaultActions`.\\n   *\\n   * @dev Requirements:\\n   * - Must be implemented in child contract with access restriction.\\n   */\\n  function unpauseForceAll() external;\\n\\n  /**\\n   * @notice Set paused state for `action` of this vault.\\n   *\\n   * @param action Enum: 0-deposit, 1-withdraw, 2-borrow, 3-payback\\n   *\\n   * Requirements:\\n   * - The `action` in contract must not be unpaused.\\n   * - Must be implemented in child contract with access restriction.\\n   */\\n  function pause(VaultActions action) external;\\n\\n  /**\\n   * @notice Set unpause state for `action` of this vault.\\n   *\\n   * @param action Enum: 0-deposit, 1-withdraw, 2-borrow, 3-payback\\n   *\\n   * @dev Requirements:\\n   * - The `action` in contract must be paused.\\n   * - Must be implemented in child contract with access restriction.\\n   */\\n  function unpause(VaultActions action) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"nxtp/=lib/nxtp/packages/deployments/contracts/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chief_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RebalancerManager__allowExecutor_noAllowChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__checkAssetsAmount_invalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__checkDebtAmount_invalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__checkLtvChange_invalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__completeRebalance_invalidEntryPoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__getFlashloan_flashloanFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__getFlashloan_notEmptyEntryPoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__rebalanceVault_invalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__rebalanceVault_notValidExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__rebalanceVault_notValidFlasher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalancerManager__zeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"SystemAccessControl__hasRole_missingRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemAccessControl__onlyHouseKeeper_notHouseKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SystemAccessControl__onlyTimelock_callerIsNotTimelock\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowExecutor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HARVESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUSE_KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNPAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chief\",\"outputs\":[{\"internalType\":\"contract IChief\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"contract ILendingProvider\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract ILendingProvider\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IFlasher\",\"name\":\"flasher\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setToAsActiveProvider\",\"type\":\"bool\"}],\"name\":\"completeRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"contract ILendingProvider\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract ILendingProvider\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IFlasher\",\"name\":\"flasher\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"setToAsActiveProvider\",\"type\":\"bool\"}],\"name\":\"rebalanceVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RebalancerManager", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000088ed3b8d03e5a70bf23286872b24cffd76e91922", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}