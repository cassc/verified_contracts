{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SMOK3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: unlicense\\r\\n// File: @openzeppelin/contracts/utils/Context.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\npragma solidity ^0.8.20;\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view virtual {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File: basicRoyaltyNft/access/OwnablePermissions.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\nabstract contract OwnablePermissions is Context {\\r\\n    function _requireCallerIsContractOwner() internal view virtual;\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/access/Ownable.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * The initial owner is set to the address provided by the deployer. This can\\r\\n * later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The caller account is not authorized to perform an operation.\\r\\n     */\\r\\n    error OwnableUnauthorizedAccount(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\r\\n     */\\r\\n    error OwnableInvalidOwner(address owner);\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        if (initialOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            revert OwnableUnauthorizedAccount(_msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: basicRoyaltyNft/access/OwnableBasic.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n\\r\\nabstract contract OwnableBasic is OwnablePermissions, Ownable {\\r\\n    function _requireCallerIsContractOwner() internal view virtual override {\\r\\n        _checkOwner();\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: basicRoyaltyNft/interfaces/IEOARegistry.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\ninterface IEOARegistry is IERC165 {\\r\\n    function isVerifiedEOA(address account) external view returns (bool);\\r\\n}\\r\\n// File: basicRoyaltyNft/utils/TransferPolicy.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nenum AllowlistTypes {\\r\\n    Operators,\\r\\n    PermittedContractReceivers\\r\\n}\\r\\n\\r\\nenum ReceiverConstraints {\\r\\n    None,\\r\\n    NoCode,\\r\\n    EOA\\r\\n}\\r\\n\\r\\nenum CallerConstraints {\\r\\n    None,\\r\\n    OperatorWhitelistEnableOTC,\\r\\n    OperatorWhitelistDisableOTC\\r\\n}\\r\\n\\r\\nenum StakerConstraints {\\r\\n    None,\\r\\n    CallerIsTxOrigin,\\r\\n    EOA\\r\\n}\\r\\n\\r\\nenum TransferSecurityLevels {\\r\\n    Zero,\\r\\n    One,\\r\\n    Two,\\r\\n    Three,\\r\\n    Four,\\r\\n    Five,\\r\\n    Six\\r\\n}\\r\\n\\r\\nstruct TransferSecurityPolicy {\\r\\n    CallerConstraints callerConstraints;\\r\\n    ReceiverConstraints receiverConstraints;\\r\\n}\\r\\n\\r\\nstruct CollectionSecurityPolicy {\\r\\n    TransferSecurityLevels transferSecurityLevel;\\r\\n    uint120 operatorWhitelistId;\\r\\n    uint120 permittedContractReceiversId;\\r\\n}\\r\\n\\r\\n// File: basicRoyaltyNft/interfaces/ITransferSecurityRegistry.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\ninterface ITransferSecurityRegistry {\\r\\n    event AddedToAllowlist(AllowlistTypes indexed kind, uint256 indexed id, address indexed account);\\r\\n    event CreatedAllowlist(AllowlistTypes indexed kind, uint256 indexed id, string indexed name);\\r\\n    event ReassignedAllowlistOwnership(AllowlistTypes indexed kind, uint256 indexed id, address indexed newOwner);\\r\\n    event RemovedFromAllowlist(AllowlistTypes indexed kind, uint256 indexed id, address indexed account);\\r\\n    event SetAllowlist(AllowlistTypes indexed kind, address indexed collection, uint120 indexed id);\\r\\n    event SetTransferSecurityLevel(address indexed collection, TransferSecurityLevels level);\\r\\n\\r\\n    function createOperatorWhitelist(string calldata name) external returns (uint120);\\r\\n    function createPermittedContractReceiverAllowlist(string calldata name) external returns (uint120);\\r\\n    function reassignOwnershipOfOperatorWhitelist(uint120 id, address newOwner) external;\\r\\n    function reassignOwnershipOfPermittedContractReceiverAllowlist(uint120 id, address newOwner) external;\\r\\n    function renounceOwnershipOfOperatorWhitelist(uint120 id) external;\\r\\n    function renounceOwnershipOfPermittedContractReceiverAllowlist(uint120 id) external;\\r\\n    function setTransferSecurityLevelOfCollection(address collection, TransferSecurityLevels level) external;\\r\\n    function setOperatorWhitelistOfCollection(address collection, uint120 id) external;\\r\\n    function setPermittedContractReceiverAllowlistOfCollection(address collection, uint120 id) external;\\r\\n    function addOperatorToWhitelist(uint120 id, address operator) external;\\r\\n    function addPermittedContractReceiverToAllowlist(uint120 id, address receiver) external;\\r\\n    function removeOperatorFromWhitelist(uint120 id, address operator) external;\\r\\n    function removePermittedContractReceiverFromAllowlist(uint120 id, address receiver) external;\\r\\n    function getCollectionSecurityPolicy(address collection) external view returns (CollectionSecurityPolicy memory);\\r\\n    function getWhitelistedOperators(uint120 id) external view returns (address[] memory);\\r\\n    function getPermittedContractReceivers(uint120 id) external view returns (address[] memory);\\r\\n    function isOperatorWhitelisted(uint120 id, address operator) external view returns (bool);\\r\\n    function isContractReceiverPermitted(uint120 id, address receiver) external view returns (bool);\\r\\n}\\r\\n// File: basicRoyaltyNft/interfaces/ITransferValidator.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\ninterface ITransferValidator {\\r\\n    function applyCollectionTransferPolicy(address caller, address from, address to) external view;\\r\\n}\\r\\n// File: basicRoyaltyNft/interfaces/ICreatorTokenTransferValidator.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ninterface ICreatorTokenTransferValidator is ITransferSecurityRegistry, ITransferValidator, IEOARegistry {}\\r\\n// File: basicRoyaltyNft/interfaces/ICreatorToken.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\ninterface ICreatorToken {\\r\\n    event TransferValidatorUpdated(address oldValidator, address newValidator);\\r\\n\\r\\n    function getTransferValidator() external view returns (ICreatorTokenTransferValidator);\\r\\n    function getSecurityPolicy() external view returns (CollectionSecurityPolicy memory);\\r\\n    function getWhitelistedOperators() external view returns (address[] memory);\\r\\n    function getPermittedContractReceivers() external view returns (address[] memory);\\r\\n    function isOperatorWhitelisted(address operator) external view returns (bool);\\r\\n    function isContractReceiverPermitted(address receiver) external view returns (bool);\\r\\n    function isTransferAllowed(address caller, address from, address to) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: basicRoyaltyNft/utils/TransferValidation.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title TransferValidation\\r\\n * @author Limit Break, Inc.\\r\\n * @notice A mix-in that can be combined with ERC-721 contracts to provide more granular hooks.\\r\\n * Openzeppelin's ERC721 contract only provides hooks for before and after transfer.  This allows\\r\\n * developers to validate or customize transfers within the context of a mint, a burn, or a transfer.\\r\\n */\\r\\nabstract contract TransferValidation is Context {\\r\\n    \\r\\n    error ShouldNotMintToBurnAddress();\\r\\n\\r\\n    /// @dev Inheriting contracts should call this function in the _beforeTokenTransfer function to get more granular hooks.\\r\\n    function _validateBeforeTransfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n        bool fromZeroAddress = from == address(0);\\r\\n        bool toZeroAddress = to == address(0);\\r\\n\\r\\n        if(fromZeroAddress && toZeroAddress) {\\r\\n            revert ShouldNotMintToBurnAddress();\\r\\n        } else if(fromZeroAddress) {\\r\\n            _preValidateMint(_msgSender(), to, tokenId, msg.value);\\r\\n        } else if(toZeroAddress) {\\r\\n            _preValidateBurn(_msgSender(), from, tokenId, msg.value);\\r\\n        } else {\\r\\n            _preValidateTransfer(_msgSender(), from, to, tokenId, msg.value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Inheriting contracts should call this function in the _afterTokenTransfer function to get more granular hooks.\\r\\n    function _validateAfterTransfer(address from, address to, uint256 tokenId) internal virtual {\\r\\n        bool fromZeroAddress = from == address(0);\\r\\n        bool toZeroAddress = to == address(0);\\r\\n\\r\\n        if(fromZeroAddress && toZeroAddress) {\\r\\n            revert ShouldNotMintToBurnAddress();\\r\\n        } else if(fromZeroAddress) {\\r\\n            _postValidateMint(_msgSender(), to, tokenId, msg.value);\\r\\n        } else if(toZeroAddress) {\\r\\n            _postValidateBurn(_msgSender(), from, tokenId, msg.value);\\r\\n        } else {\\r\\n            _postValidateTransfer(_msgSender(), from, to, tokenId, msg.value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Optional validation hook that fires before a mint\\r\\n    function _preValidateMint(address caller, address to, uint256 tokenId, uint256 value) internal virtual {}\\r\\n\\r\\n    /// @dev Optional validation hook that fires after a mint\\r\\n    function _postValidateMint(address caller, address to, uint256 tokenId, uint256 value) internal virtual {}\\r\\n\\r\\n    /// @dev Optional validation hook that fires before a burn\\r\\n    function _preValidateBurn(address caller, address from, uint256 tokenId, uint256 value) internal virtual {}\\r\\n\\r\\n    /// @dev Optional validation hook that fires after a burn\\r\\n    function _postValidateBurn(address caller, address from, uint256 tokenId, uint256 value) internal virtual {}\\r\\n\\r\\n    /// @dev Optional validation hook that fires before a transfer\\r\\n    function _preValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 value) internal virtual {}\\r\\n\\r\\n    /// @dev Optional validation hook that fires after a transfer\\r\\n    function _postValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 value) internal virtual {}\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/interfaces/IERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n// File: basicRoyaltyNft/utils/CreatorTokenBase.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title CreatorTokenBase\\r\\n * @author Limit Break, Inc.\\r\\n * @notice CreatorTokenBase is an abstract contract that provides basic functionality for managing token \\r\\n * transfer policies through an implementation of ICreatorTokenTransferValidator. This contract is intended to be used\\r\\n * as a base for creator-specific token contracts, enabling customizable transfer restrictions and security policies.\\r\\n *\\r\\n * <h4>Features:</h4>\\r\\n * <ul>Ownable: This contract can have an owner who can set and update the transfer validator.</ul>\\r\\n * <ul>TransferValidation: Implements the basic token transfer validation interface.</ul>\\r\\n * <ul>ICreatorToken: Implements the interface for creator tokens, providing view functions for token security policies.</ul>\\r\\n *\\r\\n * <h4>Benefits:</h4>\\r\\n * <ul>Provides a flexible and modular way to implement custom token transfer restrictions and security policies.</ul>\\r\\n * <ul>Allows creators to enforce policies such as whitelisted operators and permitted contract receivers.</ul>\\r\\n * <ul>Can be easily integrated into other token contracts as a base contract.</ul>\\r\\n *\\r\\n * <h4>Intended Usage:</h4>\\r\\n * <ul>Use as a base contract for creator token implementations that require advanced transfer restrictions and \\r\\n *   security policies.</ul>\\r\\n * <ul>Set and update the ICreatorTokenTransferValidator implementation contract to enforce desired policies for the \\r\\n *   creator token.</ul>\\r\\n */\\r\\nabstract contract CreatorTokenBase is OwnablePermissions, TransferValidation, ICreatorToken {\\r\\n    \\r\\n    error CreatorTokenBase__InvalidTransferValidatorContract();\\r\\n    error CreatorTokenBase__SetTransferValidatorFirst();\\r\\n\\r\\n    address public constant DEFAULT_TRANSFER_VALIDATOR = address(0x0000721C310194CcfC01E523fc93C9cCcFa2A0Ac);\\r\\n    TransferSecurityLevels public constant DEFAULT_TRANSFER_SECURITY_LEVEL = TransferSecurityLevels.One;\\r\\n    uint120 public constant DEFAULT_OPERATOR_WHITELIST_ID = uint120(1);\\r\\n\\r\\n    ICreatorTokenTransferValidator private transferValidator;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the contract owner to set the transfer validator to the official validator contract\\r\\n     *         and set the security policy to the recommended default settings.\\r\\n     * @dev    May be overridden to change the default behavior of an individual collection.\\r\\n     */\\r\\n    function setToDefaultSecurityPolicy() public virtual {\\r\\n        _requireCallerIsContractOwner();\\r\\n        setTransferValidator(DEFAULT_TRANSFER_VALIDATOR);\\r\\n        ICreatorTokenTransferValidator(DEFAULT_TRANSFER_VALIDATOR).setTransferSecurityLevelOfCollection(address(this), DEFAULT_TRANSFER_SECURITY_LEVEL);\\r\\n        ICreatorTokenTransferValidator(DEFAULT_TRANSFER_VALIDATOR).setOperatorWhitelistOfCollection(address(this), DEFAULT_OPERATOR_WHITELIST_ID);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the contract owner to set the transfer validator to a custom validator contract\\r\\n     *         and set the security policy to their own custom settings.\\r\\n     */\\r\\n    function setToCustomValidatorAndSecurityPolicy(\\r\\n        address validator, \\r\\n        TransferSecurityLevels level, \\r\\n        uint120 operatorWhitelistId, \\r\\n        uint120 permittedContractReceiversAllowlistId) public {\\r\\n        _requireCallerIsContractOwner();\\r\\n\\r\\n        setTransferValidator(validator);\\r\\n\\r\\n        ICreatorTokenTransferValidator(validator).\\r\\n            setTransferSecurityLevelOfCollection(address(this), level);\\r\\n\\r\\n        ICreatorTokenTransferValidator(validator).\\r\\n            setOperatorWhitelistOfCollection(address(this), operatorWhitelistId);\\r\\n\\r\\n        ICreatorTokenTransferValidator(validator).\\r\\n            setPermittedContractReceiverAllowlistOfCollection(address(this), permittedContractReceiversAllowlistId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the contract owner to set the security policy to their own custom settings.\\r\\n     * @dev    Reverts if the transfer validator has not been set.\\r\\n     */\\r\\n    function setToCustomSecurityPolicy(\\r\\n        TransferSecurityLevels level, \\r\\n        uint120 operatorWhitelistId, \\r\\n        uint120 permittedContractReceiversAllowlistId) public {\\r\\n        _requireCallerIsContractOwner();\\r\\n\\r\\n        ICreatorTokenTransferValidator validator = getTransferValidator();\\r\\n        if (address(validator) == address(0)) {\\r\\n            revert CreatorTokenBase__SetTransferValidatorFirst();\\r\\n        }\\r\\n\\r\\n        validator.setTransferSecurityLevelOfCollection(address(this), level);\\r\\n        validator.setOperatorWhitelistOfCollection(address(this), operatorWhitelistId);\\r\\n        validator.setPermittedContractReceiverAllowlistOfCollection(address(this), permittedContractReceiversAllowlistId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the transfer validator for the token contract.\\r\\n     *\\r\\n     * @dev    Throws when provided validator contract is not the zero address and doesn't support \\r\\n     *         the ICreatorTokenTransferValidator interface. \\r\\n     * @dev    Throws when the caller is not the contract owner.\\r\\n     *\\r\\n     * @dev    <h4>Postconditions:</h4>\\r\\n     *         1. The transferValidator address is updated.\\r\\n     *         2. The `TransferValidatorUpdated` event is emitted.\\r\\n     *\\r\\n     * @param transferValidator_ The address of the transfer validator contract.\\r\\n     */\\r\\n    function setTransferValidator(address transferValidator_) public {\\r\\n        _requireCallerIsContractOwner();\\r\\n\\r\\n        bool isValidTransferValidator = false;\\r\\n\\r\\n        if(transferValidator_.code.length > 0) {\\r\\n            try IERC165(transferValidator_).supportsInterface(type(ICreatorTokenTransferValidator).interfaceId) \\r\\n                returns (bool supportsInterface) {\\r\\n                isValidTransferValidator = supportsInterface;\\r\\n            } catch {}\\r\\n        }\\r\\n\\r\\n        if(transferValidator_ != address(0) && !isValidTransferValidator) {\\r\\n            revert CreatorTokenBase__InvalidTransferValidatorContract();\\r\\n        }\\r\\n\\r\\n        emit TransferValidatorUpdated(address(transferValidator), transferValidator_);\\r\\n\\r\\n        transferValidator = ICreatorTokenTransferValidator(transferValidator_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the transfer validator contract address for this token contract.\\r\\n     */\\r\\n    function getTransferValidator() public view override returns (ICreatorTokenTransferValidator) {\\r\\n        return transferValidator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the security policy for this token contract, which includes:\\r\\n     *         Transfer security level, operator whitelist id, permitted contract receiver allowlist id.\\r\\n     */\\r\\n    function getSecurityPolicy() public view override returns (CollectionSecurityPolicy memory) {\\r\\n        if (address(transferValidator) != address(0)) {\\r\\n            return transferValidator.getCollectionSecurityPolicy(address(this));\\r\\n        }\\r\\n\\r\\n        return CollectionSecurityPolicy({\\r\\n            transferSecurityLevel: TransferSecurityLevels.Zero,\\r\\n            operatorWhitelistId: 0,\\r\\n            permittedContractReceiversId: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the list of all whitelisted operators for this token contract.\\r\\n     * @dev    This can be an expensive call and should only be used in view-only functions.\\r\\n     */\\r\\n    function getWhitelistedOperators() public view override returns (address[] memory) {\\r\\n        if (address(transferValidator) != address(0)) {\\r\\n            return transferValidator.getWhitelistedOperators(\\r\\n                transferValidator.getCollectionSecurityPolicy(address(this)).operatorWhitelistId);\\r\\n        }\\r\\n\\r\\n        return new address[](0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the list of permitted contract receivers for this token contract.\\r\\n     * @dev    This can be an expensive call and should only be used in view-only functions.\\r\\n     */\\r\\n    function getPermittedContractReceivers() public view override returns (address[] memory) {\\r\\n        if (address(transferValidator) != address(0)) {\\r\\n            return transferValidator.getPermittedContractReceivers(\\r\\n                transferValidator.getCollectionSecurityPolicy(address(this)).permittedContractReceiversId);\\r\\n        }\\r\\n\\r\\n        return new address[](0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if an operator is whitelisted for this token contract.\\r\\n     * @param operator The address of the operator to check.\\r\\n     */\\r\\n    function isOperatorWhitelisted(address operator) public view override returns (bool) {\\r\\n        if (address(transferValidator) != address(0)) {\\r\\n            return transferValidator.isOperatorWhitelisted(\\r\\n                transferValidator.getCollectionSecurityPolicy(address(this)).operatorWhitelistId, operator);\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a contract receiver is permitted for this token contract.\\r\\n     * @param receiver The address of the receiver to check.\\r\\n     */\\r\\n    function isContractReceiverPermitted(address receiver) public view override returns (bool) {\\r\\n        if (address(transferValidator) != address(0)) {\\r\\n            return transferValidator.isContractReceiverPermitted(\\r\\n                transferValidator.getCollectionSecurityPolicy(address(this)).permittedContractReceiversId, receiver);\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determines if a transfer is allowed based on the token contract's security policy.  Use this function\\r\\n     *         to simulate whether or not a transfer made by the specified `caller` from the `from` address to the `to`\\r\\n     *         address would be allowed by this token's security policy.\\r\\n     *\\r\\n     * @notice This function only checks the security policy restrictions and does not check whether token ownership\\r\\n     *         or approvals are in place. \\r\\n     *\\r\\n     * @param caller The address of the simulated caller.\\r\\n     * @param from   The address of the sender.\\r\\n     * @param to     The address of the receiver.\\r\\n     * @return       True if the transfer is allowed, false otherwise.\\r\\n     */\\r\\n    function isTransferAllowed(address caller, address from, address to) public view override returns (bool) {\\r\\n        if (address(transferValidator) != address(0)) {\\r\\n            try transferValidator.applyCollectionTransferPolicy(caller, from, to) {\\r\\n                return true;\\r\\n            } catch {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pre-validates a token transfer, reverting if the transfer is not allowed by this token's security policy.\\r\\n     *      Inheriting contracts are responsible for overriding the _beforeTokenTransfer function, or its equivalent\\r\\n     *      and calling _validateBeforeTransfer so that checks can be properly applied during token transfers.\\r\\n     *\\r\\n     * @dev Throws when the transfer doesn't comply with the collection's transfer policy, if the transferValidator is\\r\\n     *      set to a non-zero address.\\r\\n     *\\r\\n     * @param caller  The address of the caller.\\r\\n     * @param from    The address of the sender.\\r\\n     * @param to      The address of the receiver.\\r\\n     */\\r\\n    function _preValidateTransfer(\\r\\n        address caller, \\r\\n        address from, \\r\\n        address to, \\r\\n        uint256 /*tokenId*/, \\r\\n        uint256 /*value*/) internal virtual override {\\r\\n        if (address(transferValidator) != address(0)) {\\r\\n            transferValidator.applyCollectionTransferPolicy(caller, from, to);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: basicRoyaltyNft/openzeppelinERC721/ERC721.sol\\r\\n\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/token/ERC721/IERC721.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\r\\n     *   a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\r\\n     *   {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\r\\n     *   a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the address zero.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\r\\n     * reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/utils/math/Math.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/utils/math/SignedMath.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // must be unchecked in order to support `n = type(int256).min`\\r\\n            return uint256(n >= 0 ? n : -n);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/utils/Strings.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File: .deps/npm/@openzeppelin/contracts/token/ERC721/ERC721.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\n\\r\\n library Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _ownerOf(tokenId);\\r\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\r\\n     */\\r\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\r\\n        return _owners[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _ownerOf(tokenId) != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\r\\n\\r\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        unchecked {\\r\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\r\\n            // Given that tokens are minted one by one, it is impossible in practice that\\r\\n            // this ever happens. Might change if we allow batch minting.\\r\\n            // The ERC fails to describe this case.\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\r\\n\\r\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\r\\n        owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\r\\n            // out than the owner initially received through minting and transferring in.\\r\\n            _balances[owner] -= 1;\\r\\n        }\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n\\r\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\r\\n\\r\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\r\\n            // `from`'s balance is the number of token held, which is at least one before the current\\r\\n            // transfer.\\r\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\r\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\r\\n            _balances[from] -= 1;\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(\\r\\n        address owner,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) internal virtual {\\r\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\r\\n     */\\r\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\r\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\r\\n     * - When `from` is zero, the tokens will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     * - `batchSize` is non-zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\r\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\r\\n     * - When `from` is zero, the tokens were minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s tokens were burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     * - `batchSize` is non-zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\r\\n     *\\r\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\r\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\r\\n     * that `ownerOf(tokenId)` is `a`.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\r\\n        _balances[account] += amount;\\r\\n    }\\r\\n}\\r\\n// File: basicRoyaltyNft/token/erc721/ERC721OpenZeppelin.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n\\r\\nabstract contract ERC721OpenZeppelinBase is ERC721 {\\r\\n\\r\\n    // Token name\\r\\n    string internal _contractName;\\r\\n\\r\\n    // Token symbol\\r\\n    string internal _contractSymbol;\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _contractName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _contractSymbol;\\r\\n    }\\r\\n\\r\\n    function _setNameAndSymbol(string memory name_, string memory symbol_) internal {\\r\\n        _contractName = name_;\\r\\n        _contractSymbol = symbol_;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ERC721OpenZeppelin is ERC721OpenZeppelinBase {\\r\\n    constructor(string memory name_, string memory symbol_) ERC721(\\\"\\\", \\\"\\\") {\\r\\n        _setNameAndSymbol(name_, symbol_);\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ERC721OpenZeppelinInitializable is OwnablePermissions, ERC721OpenZeppelinBase {\\r\\n\\r\\n    error ERC721OpenZeppelinInitializable__AlreadyInitializedERC721();\\r\\n\\r\\n    /// @notice Specifies whether or not the contract is initialized\\r\\n    bool private _erc721Initialized;\\r\\n\\r\\n    /// @dev Initializes parameters of ERC721 tokens.\\r\\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\\r\\n    function initializeERC721(string memory name_, string memory symbol_) public {\\r\\n        _requireCallerIsContractOwner();\\r\\n\\r\\n        if(_erc721Initialized) {\\r\\n            revert ERC721OpenZeppelinInitializable__AlreadyInitializedERC721();\\r\\n        }\\r\\n\\r\\n        _erc721Initialized = true;\\r\\n\\r\\n        _setNameAndSymbol(name_, symbol_);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: basicRoyaltyNft/erc721c/ERC721C.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC721C\\r\\n * @author Limit Break, Inc.\\r\\n * @notice Extends OpenZeppelin's ERC721 implementation with Creator Token functionality, which\\r\\n *         allows the contract owner to update the transfer validation logic by managing a security policy in\\r\\n *         an external transfer validation security policy registry.  See {CreatorTokenTransferValidator}.\\r\\n */\\r\\nabstract contract ERC721C is ERC721OpenZeppelin, CreatorTokenBase {\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(ICreatorToken).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @dev Ties the open-zeppelin _beforeTokenTransfer hook to more granular transfer validation logic\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize) internal virtual override {\\r\\n        for (uint256 i = 0; i < batchSize;) {\\r\\n            _validateBeforeTransfer(from, to, firstTokenId + i);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Ties the open-zeppelin _afterTokenTransfer hook to more granular transfer validation logic\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize) internal virtual override {\\r\\n        for (uint256 i = 0; i < batchSize;) {\\r\\n            _validateAfterTransfer(from, to, firstTokenId + i);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC721CInitializable\\r\\n * @author Limit Break, Inc.\\r\\n * @notice Initializable implementation of ERC721C to allow for EIP-1167 proxy clones.\\r\\n */\\r\\nabstract contract ERC721CInitializable is ERC721OpenZeppelinInitializable, CreatorTokenBase {\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(ICreatorToken).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /// @dev Ties the open-zeppelin _beforeTokenTransfer hook to more granular transfer validation logic\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize) internal virtual override {\\r\\n        for (uint256 i = 0; i < batchSize;) {\\r\\n            _validateBeforeTransfer(from, to, firstTokenId + i);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Ties the open-zeppelin _afterTokenTransfer hook to more granular transfer validation logic\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize) internal virtual override {\\r\\n        for (uint256 i = 0; i < batchSize;) {\\r\\n            _validateAfterTransfer(from, to, firstTokenId + i);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n// File: @openzeppelin/contracts/interfaces/IERC2981.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface for the NFT Royalty Standard.\\r\\n *\\r\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\r\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\r\\n */\\r\\ninterface IERC2981 is IERC165 {\\r\\n    /**\\r\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\r\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\r\\n     */\\r\\n    function royaltyInfo(\\r\\n        uint256 tokenId,\\r\\n        uint256 salePrice\\r\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/common/ERC2981.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\r\\n *\\r\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\r\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\r\\n *\\r\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\r\\n * fee is specified in basis points by default.\\r\\n *\\r\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\r\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\r\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\r\\n */\\r\\nabstract contract ERC2981 is IERC2981, ERC165 {\\r\\n    struct RoyaltyInfo {\\r\\n        address receiver;\\r\\n        uint96 royaltyFraction;\\r\\n    }\\r\\n\\r\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\r\\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\\r\\n\\r\\n    /**\\r\\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\\r\\n     */\\r\\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /**\\r\\n     * @dev The default royalty receiver is invalid.\\r\\n     */\\r\\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\\r\\n     */\\r\\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\\r\\n\\r\\n    /**\\r\\n     * @dev The royalty receiver for `tokenId` is invalid.\\r\\n     */\\r\\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\r\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC2981\\r\\n     */\\r\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\\r\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\r\\n\\r\\n        if (royalty.receiver == address(0)) {\\r\\n            royalty = _defaultRoyaltyInfo;\\r\\n        }\\r\\n\\r\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\r\\n\\r\\n        return (royalty.receiver, royaltyAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\r\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\r\\n     * override.\\r\\n     */\\r\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\r\\n        return 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `receiver` cannot be the zero address.\\r\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\r\\n     */\\r\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\r\\n        uint256 denominator = _feeDenominator();\\r\\n        if (feeNumerator > denominator) {\\r\\n            // Royalty fee will exceed the sale price\\r\\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\\r\\n        }\\r\\n        if (receiver == address(0)) {\\r\\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\\r\\n        }\\r\\n\\r\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes default royalty information.\\r\\n     */\\r\\n    function _deleteDefaultRoyalty() internal virtual {\\r\\n        delete _defaultRoyaltyInfo;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `receiver` cannot be the zero address.\\r\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\r\\n     */\\r\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\r\\n        uint256 denominator = _feeDenominator();\\r\\n        if (feeNumerator > denominator) {\\r\\n            // Royalty fee will exceed the sale price\\r\\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\\r\\n        }\\r\\n        if (receiver == address(0)) {\\r\\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\\r\\n        }\\r\\n\\r\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Resets royalty information for the token id back to the global default.\\r\\n     */\\r\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\r\\n        delete _tokenRoyaltyInfo[tokenId];\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: basicRoyaltyNft/programmable-royalties/BasicRoyalties.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title BasicRoyaltiesBase\\r\\n * @author Limit Break, Inc.\\r\\n * @dev Base functionality of an NFT mix-in contract implementing the most basic form of programmable royalties.\\r\\n */\\r\\nabstract contract BasicRoyaltiesBase is ERC2981 {\\r\\n\\r\\n    event DefaultRoyaltySet(address indexed receiver, uint96 feeNumerator);\\r\\n    event TokenRoyaltySet(uint256 indexed tokenId, address indexed receiver, uint96 feeNumerator);\\r\\n\\r\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual override {\\r\\n        super._setDefaultRoyalty(receiver, feeNumerator);\\r\\n        emit DefaultRoyaltySet(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual override {\\r\\n        super._setTokenRoyalty(tokenId, receiver, feeNumerator);\\r\\n        emit TokenRoyaltySet(tokenId, receiver, feeNumerator);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title BasicRoyalties\\r\\n * @author Limit Break, Inc.\\r\\n * @notice Constructable BasicRoyalties Contract implementation.\\r\\n */\\r\\nabstract contract BasicRoyalties is BasicRoyaltiesBase {\\r\\n    constructor(address receiver, uint96 feeNumerator) {\\r\\n        _setDefaultRoyalty(receiver, feeNumerator);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title BasicRoyaltiesInitializable\\r\\n * @author Limit Break, Inc.\\r\\n * @notice Initializable BasicRoyalties Contract implementation to allow for EIP-1167 clones. \\r\\n */\\r\\nabstract contract BasicRoyaltiesInitializable is BasicRoyaltiesBase {}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ncontract SMOK3 is OwnableBasic, Pausable,ERC721C, BasicRoyalties {\\r\\n    uint256 public whitelistMintFee = 0.07 ether;\\r\\n    uint256 public publicMintFee = 0.08 ether;\\r\\n    uint256 public totalNFTs = 800;\\r\\n    uint256 public tokenIdCounter;\\r\\n    uint96 public royaltyFeeNumerator;\\r\\n    uint256 public whitelistMintSTime;\\r\\n    uint256 public whitelistMintETime;\\r\\n    uint256 public publicMintSTime;\\r\\n    uint256 public publicMintETime;\\r\\n    uint256 private _totalSupply;\\r\\n    bool public isTradingEnabled = false;\\r\\naddress public royaltyReceiver;\\r\\n    uint256 public presaleNftsCount;\\r\\n\\r\\n    string private baseUriExtended;\\r\\n\\r\\n    mapping(address => uint256) public publicMinted;\\r\\n\\r\\n    struct PresaleMint {\\r\\n        uint256 nftsAllocated;\\r\\n        uint256 nftsMinted;\\r\\n    }\\r\\n    struct WhitelistMint {\\r\\n        uint256 nftsAllocated;\\r\\n        uint256 nftsMinted;\\r\\n    }\\r\\n    mapping(address => PresaleMint) public PresaleMintInfo;\\r\\n    mapping(address => WhitelistMint) public WhitelistMintInfo;\\r\\n\\r\\n    event whitelistMint(address, uint256);\\r\\n\\r\\n    constructor(\\r\\n        address receiver,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address owner,\\r\\n        uint96 feeNumerator\\r\\n    )\\r\\n        ERC721OpenZeppelin(name, symbol)\\r\\n        BasicRoyalties(receiver, feeNumerator)\\r\\n        Ownable(owner)\\r\\n    {\\r\\n        royaltyReceiver = receiver;\\r\\n        royaltyFeeNumerator = feeNumerator;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721C, ERC2981)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function claimPresaleNft() external whenNotPaused{\\r\\n        uint256 mintableNFTs = PresaleMintInfo[msg.sender].nftsAllocated - PresaleMintInfo[msg.sender].nftsMinted;\\r\\n        if(mintableNFTs == 0) {\\r\\n            revert(\\\"zero claimable\\\");\\r\\n        }\\r\\n        if (tokenIdCounter + mintableNFTs > totalNFTs) {\\r\\n            revert(\\\"mintable NFTs exceeds available nfts\\\");\\r\\n        }\\r\\n\\r\\n        for(uint256 indx; indx < mintableNFTs; ) {\\r\\n            tokenIdCounter++;\\r\\n            _mint(msg.sender, tokenIdCounter);\\r\\n            unchecked {\\r\\n                indx++;\\r\\n                _totalSupply++;\\r\\n            }\\r\\n        }\\r\\n        PresaleMintInfo[msg.sender].nftsMinted += mintableNFTs;\\r\\n    }\\r\\n\\r\\n    function mintWhitelistNFT(uint256 quantity) external payable {\\r\\n        if (tokenIdCounter + quantity > totalNFTs - presaleNftsCount) {\\r\\n            revert(\\\"quantity exceeds available nfts\\\");\\r\\n        }\\r\\n        if (\\r\\n            block.timestamp < whitelistMintSTime ||\\r\\n            block.timestamp > whitelistMintETime\\r\\n        ) {\\r\\n            revert(\\\"ws is not active\\\");\\r\\n        }\\r\\n        if (\\r\\n            WhitelistMintInfo[msg.sender].nftsMinted + quantity >\\r\\n            WhitelistMintInfo[msg.sender].nftsAllocated\\r\\n        ) {\\r\\n            revert(\\\"quantity exceeds allocated nfts\\\");\\r\\n        }\\r\\n        uint256 fee = whitelistMintFee * quantity;\\r\\n        if (msg.value != fee) {\\r\\n            revert(\\\"Insufficient eth sent\\\");\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < quantity; ) {\\r\\n            tokenIdCounter++;\\r\\n            _mint(msg.sender, tokenIdCounter);\\r\\n            unchecked {\\r\\n                i++;\\r\\n                _totalSupply++;\\r\\n            }\\r\\n        }\\r\\n        WhitelistMintInfo[msg.sender].nftsMinted += quantity;\\r\\n        emit whitelistMint(msg.sender, quantity);\\r\\n    }\\r\\n\\r\\n    function mintPublicNFT(uint256 quantity) external payable {\\r\\n        if (tokenIdCounter + quantity > totalNFTs - presaleNftsCount) {\\r\\n            revert(\\\"quantity exceeds available nfts\\\");\\r\\n        }\\r\\n        if (\\r\\n            block.timestamp < publicMintSTime ||\\r\\n            block.timestamp > publicMintETime\\r\\n        ) {\\r\\n            revert(\\\"ps is not active\\\");\\r\\n        }\\r\\n        if (msg.value != publicMintFee * quantity) {\\r\\n            revert(\\\"Insufficient eth sent\\\");\\r\\n        }\\r\\n        publicMinted[msg.sender] += quantity;\\r\\n\\r\\n        for (uint256 i; i < quantity; ) {\\r\\n            tokenIdCounter++;\\r\\n            _mint(msg.sender, tokenIdCounter);\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n        _totalSupply += quantity;\\r\\n    }\\r\\n\\r\\n    function addWhitelistUsers(\\r\\n        address[] calldata users,\\r\\n        uint256[] calldata amount\\r\\n    ) external onlyOwner {\\r\\n        if (users.length != amount.length) {\\r\\n            revert(\\\"arrays musrt be of same length\\\");\\r\\n        }\\r\\n        for (uint256 i; i < users.length; ) {\\r\\n            WhitelistMintInfo[users[i]].nftsAllocated += amount[i];\\r\\n            WhitelistMintInfo[users[i]].nftsMinted = WhitelistMintInfo[users[i]]\\r\\n                .nftsMinted;\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addPresaleUsers(address[] memory users, uint256[] memory amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (users.length != amount.length) {\\r\\n            revert(\\\"array length mismatch\\\");\\r\\n        }\\r\\n        for (uint256 i; i < users.length; ) {\\r\\n            PresaleMintInfo[users[i]].nftsAllocated += amount[i];\\r\\n            presaleNftsCount +=amount[i];\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address addr) external view returns (bool) {\\r\\n        return WhitelistMintInfo[addr].nftsAllocated > 0 ? true : false;\\r\\n    }\\r\\n\\r\\n    function setWhitelistSaleTimestamps(uint256 sTime, uint256 eTime)\\r\\n        external\\r\\n        onlyOwner\\r\\n     {\\r\\n        if (sTime < block.timestamp || eTime < sTime) {\\r\\n            revert(\\\"invalid timestamp\\\");\\r\\n        }\\r\\n        whitelistMintSTime = sTime;\\r\\n        whitelistMintETime = eTime;\\r\\n    }\\r\\n\\r\\n    function setPublicSaleTimestamps(uint256 sTime, uint256 eTime)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (sTime < block.timestamp || eTime < sTime) {\\r\\n            revert(\\\"invalid timestamp\\\");\\r\\n        }\\r\\n        publicMintSTime = sTime;\\r\\n        publicMintETime = eTime;\\r\\n    }\\r\\n\\r\\n    function setWhitelistMintFee(uint256 fee) external onlyOwner {\\r\\n        if (fee == 0) {\\r\\n            revert(\\\"zero fee\\\");\\r\\n        }\\r\\n        whitelistMintFee = fee;\\r\\n    }\\r\\n\\r\\n    function setPublicMintFee(uint256 fee) external onlyOwner {\\r\\n        if (fee == 0) {\\r\\n            revert(\\\"zero fee\\\");\\r\\n        }\\r\\n        publicMintFee = fee;\\r\\n    }\\r\\n\\r\\n    function updateTradingStatus(bool value) external onlyOwner {\\r\\n        isTradingEnabled = value;\\r\\n    }\\r\\n\\r\\n    function setRoyaltyInfo(uint96 feeNumerator,address receiver) external onlyOwner { \\r\\n        royaltyReceiver = receiver;\\r\\n        royaltyFeeNumerator = feeNumerator;\\r\\n        _setDefaultRoyalty(royaltyReceiver, royaltyFeeNumerator);\\r\\n    }\\r\\n    function pause() external  whenNotPaused onlyOwner{\\r\\n        _pause();\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    function unpause() external  whenPaused onlyOwner {\\r\\n        _unpause();\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n    function setBaseUri(string memory _baseUri) external onlyOwner {\\r\\n        baseUriExtended = _baseUri;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function getRemainingMints() external view returns (uint256) {\\r\\n        return totalNFTs - tokenIdCounter;\\r\\n    }\\r\\n\\r\\n    function getWhitelistMintFee() external view returns (uint256) {\\r\\n        return whitelistMintFee;\\r\\n    }\\r\\n\\r\\n    function getPublicMintFee() external view returns (uint256) {\\r\\n        return publicMintFee;\\r\\n    }\\r\\n\\r\\n    function getTotalNFTs() external view returns (uint256) {\\r\\n        return totalNFTs;\\r\\n    }\\r\\n\\r\\n    function getRoyaltyFeeNumerator() external view returns (uint96) {\\r\\n        return royaltyFeeNumerator;\\r\\n    }\\r\\n\\r\\n    function getWhitelistMintStartTime() external view returns (uint256) {\\r\\n        return whitelistMintSTime;\\r\\n    }\\r\\n\\r\\n    function getWhitelistMintEndTime() external view returns (uint256) {\\r\\n        return whitelistMintETime;\\r\\n    }\\r\\n\\r\\n    function getPublicMintStartTime() external view returns (uint256) {\\r\\n        return publicMintSTime;\\r\\n    }\\r\\n\\r\\n    function getPublicMintEndTime() external view returns (uint256) {\\r\\n        return publicMintETime;\\r\\n    }\\r\\n\\r\\n    function getTradingStatus() external view returns (bool) {\\r\\n        return isTradingEnabled;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseUriExtended;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal virtual override {\\r\\n        if (from != address(0) && !isTradingEnabled) {\\r\\n            revert(\\\"transfer disabled\\\");\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < batchSize; ) {\\r\\n            _validateBeforeTransfer(from, to, firstTokenId + i);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawETH(address account) external onlyOwner {\\r\\n        if (account == address(0)) {\\r\\n            revert(\\\"zero withdrawl address\\\");\\r\\n        }\\r\\n        uint256 value = address(this).balance;\\r\\n        (bool success, ) = account.call{value: value}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) public {\\r\\n        if (!_isApprovedOrOwner(_msgSender(), tokenId)) {\\r\\n            revert(\\\"ERC721: caller is not owner nor approved\\\");\\r\\n        }\\r\\n        _burn(tokenId);\\r\\n        _totalSupply -= 1;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CreatorTokenBase__InvalidTransferValidatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenBase__SetTransferValidatorFirst\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidDefaultRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidDefaultRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidTokenRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidTokenRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShouldNotMintToBurnAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"TransferValidatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_OPERATOR_WHITELIST_ID\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_TRANSFER_SECURITY_LEVEL\",\"outputs\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_TRANSFER_VALIDATOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PresaleMintInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftsAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftsMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WhitelistMintInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftsAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftsMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addPresaleUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addWhitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPresaleNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermittedContractReceivers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicMintEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicMintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyFeeNumerator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecurityPolicy\",\"outputs\":[{\"components\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"transferSecurityLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"operatorWhitelistId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"permittedContractReceiversId\",\"type\":\"uint120\"}],\"internalType\":\"struct CollectionSecurityPolicy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferValidator\",\"outputs\":[{\"internalType\":\"contract ICreatorTokenTransferValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistMintEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistMintStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"isContractReceiverPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperatorWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isTransferAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintPublicNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintWhitelistNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleNftsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintETime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintSTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeNumerator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPublicMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eTime\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"operatorWhitelistId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"permittedContractReceiversAllowlistId\",\"type\":\"uint120\"}],\"name\":\"setToCustomSecurityPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"operatorWhitelistId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"permittedContractReceiversAllowlistId\",\"type\":\"uint120\"}],\"name\":\"setToCustomValidatorAndSecurityPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setToDefaultSecurityPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferValidator_\",\"type\":\"address\"}],\"name\":\"setTransferValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setWhitelistMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eTime\",\"type\":\"uint256\"}],\"name\":\"setWhitelistSaleTimestamps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintETime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintSTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SMOK3", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b0ac5912ebd669751612d0fe6f79cc92c333206100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b07ee4aaa7916d305d8fcb1d7aa598acbd648ce800000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000015534d4f4b332047656e6573697320506f74696f6e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000007504f54494f4e5300000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}