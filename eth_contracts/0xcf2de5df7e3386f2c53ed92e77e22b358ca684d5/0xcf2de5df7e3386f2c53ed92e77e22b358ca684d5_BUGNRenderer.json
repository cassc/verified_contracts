{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Renderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ninterface IERC721 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\\ncontract BUGNRenderer {\\n    uint256 private constant _DECIMALS = 10_000;\\n    uint256 private constant _RACE_DECIMALS = 100_000_000;\\n    address private _updaterAddress;\\n    address private _owner;\\n\\n    address private constant _AZUKI_CONTRACT_ADDRESS = 0xED5AF388653567Af2F388E6224dC7C4b3241C544;\\n    address private constant _BAYC_CONTRACT_ADDRESS = 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D;\\n    address private constant _LOOT_CONTRACT_ADDRESS = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\\n    address private constant _DEGODS_CONTRACT_ADDRESS = 0x8821BeE2ba0dF28761AffF119D66390D594CD280;\\n\\n    mapping(uint256 => string) private _tokens;\\n\\n    struct Properties {\\n        string status;\\n        uint256 probability;\\n    }\\n\\n    struct otherProperties {\\n        string[] status;\\n        uint256 probability;\\n    }\\n\\n    Properties[] private _race;\\n    Properties[] private _state;\\n    Properties[] private _nutrition;\\n    Properties[] private _iQ;\\n    Properties[] private _causeOfDeathCyborg;\\n    Properties[] private _causeOfDeathOthers;\\n    Properties[] private _matrix;\\n    Properties[] private _eyes;\\n    Properties[] private _headGeneral;\\n    Properties[] private _ear;\\n    Properties[] private _mouth;\\n    Properties[] private _backgroundGeneral;\\n    Properties[] private _azuki;\\n    Properties[] private _getup;\\n\\n    constructor() {\\n        _owner = msg.sender;\\n\\n        _race.push(Properties(\\\"Cyborg\\\", 100_000));\\n        _race.push(Properties(\\\"Degen\\\", 900_000));\\n        _race.push(Properties(\\\"Erectus\\\", 9_000_000));\\n        _race.push(Properties(\\\"Neanderthals\\\", 9_000_000));\\n        _race.push(Properties(\\\"Sapiens\\\", 81_000_000));\\n\\n        _state.push(Properties(\\\"Alive\\\", 9000));\\n        _state.push(Properties(\\\"Dead\\\", 1000));\\n\\n        _nutrition.push(Properties(\\\"Vegan\\\", 3000));\\n        _nutrition.push(Properties(\\\"Carnivore\\\", 3000));\\n        _nutrition.push(Properties(\\\"Boring Omnivore\\\", 800));\\n        _nutrition.push(Properties(\\\"Keto\\\", 3000));\\n        _nutrition.push(Properties(\\\"Cannibal\\\", 200));\\n\\n        _iQ.push(Properties(\\\"Left\\\", 200));\\n        _iQ.push(Properties(\\\"Right\\\", 200));\\n        _iQ.push(Properties(\\\"Leftish\\\", 1400));\\n        _iQ.push(Properties(\\\"Rightish\\\", 1400));\\n        _iQ.push(Properties(\\\"Room Temperature\\\", 6800));\\n\\n        _causeOfDeathCyborg.push(Properties(\\\"Murder\\\", 4000));\\n        _causeOfDeathCyborg.push(Properties(\\\"Natural Disaster\\\", 4000));\\n        _causeOfDeathCyborg.push(Properties(\\\"Overprocessing\\\", 2000));\\n\\n        _causeOfDeathOthers.push(Properties(\\\"Murder\\\", 3000));\\n        _causeOfDeathOthers.push(Properties(\\\"Disease\\\", 3000));\\n        _causeOfDeathOthers.push(Properties(\\\"Natural Disaster\\\", 1000));\\n        _causeOfDeathOthers.push(Properties(\\\"Overprocessing\\\", 1000));\\n        _causeOfDeathOthers.push(Properties(\\\"Drugs\\\", 1000));\\n        _causeOfDeathOthers.push(Properties(\\\"Dementia\\\", 1800));\\n\\n        _matrix.push(Properties(\\\"Red Pill\\\", 1000));\\n        _matrix.push(Properties(\\\"Blue Pill\\\", 9000));\\n\\n        _eyes.push(Properties(\\\"_eyes1\\\", 4000));\\n        _eyes.push(Properties(\\\"_eyes2\\\", 4000));\\n        _eyes.push(Properties(\\\"_eyes3\\\", 2000));\\n\\n        _headGeneral.push(Properties(\\\"_head1\\\", 1000));\\n        _headGeneral.push(Properties(\\\"_head2\\\", 2000));\\n        _headGeneral.push(Properties(\\\"_head3\\\", 2000));\\n        _headGeneral.push(Properties(\\\"_head4\\\", 2000));\\n        _headGeneral.push(Properties(\\\"_head5\\\", 3000));\\n\\n        _ear.push(Properties(\\\"_ear1\\\", 3333));\\n        _ear.push(Properties(\\\"_ear2\\\", 3333));\\n        _ear.push(Properties(\\\"_ear3\\\", 3334));\\n\\n        _mouth.push(Properties(\\\"_mouth1\\\", 2500));\\n        _mouth.push(Properties(\\\"_mouth2\\\", 2500));\\n        _mouth.push(Properties(\\\"_mouth3\\\", 2500));\\n        _mouth.push(Properties(\\\"_mouth4\\\", 2500));\\n\\n        _backgroundGeneral.push(Properties(\\\"_background1\\\", 6700));\\n        _backgroundGeneral.push(Properties(\\\"_background2\\\", 3300));\\n\\n        _azuki.push(Properties(\\\"Kimono\\\", 5000));\\n        _azuki.push(Properties(\\\"Hoodie\\\", 5000));\\n\\n        _getup.push(Properties(\\\"Naked Gryffindor\\\", 2500));\\n        _getup.push(Properties(\\\"Naked Slytherin\\\", 2500));\\n        _getup.push(Properties(\\\"Naked Ravenclaw\\\", 2500));\\n        _getup.push(Properties(\\\"Naked Hufflepuff\\\", 2500));\\n    }\\n\\n    function _getItem(uint256 tokenId, Properties[] memory prop) internal view returns (string memory) {\\n        return _get(tokenId, prop).status;\\n    }\\n\\n    function _getHoldersReward(uint256 tokenId, uint8 spec) internal view returns (string memory) {\\n        if (spec == 1) {\\n            return _get(tokenId, _azuki).status;\\n        } else if (spec == 2) {\\n            return \\\"Kings Robe\\\";\\n        } else if (spec == 3) {\\n            return \\\"Divine Robe\\\";\\n        } else if (spec == 4) {\\n            return \\\"Mythic War Armor\\\";\\n        } else {\\n            return _get(tokenId, _getup).status;\\n        }\\n    }\\n\\n    string[] private _eyes1 = [\\\"Laser\\\", \\\"Blood\\\", \\\"Black\\\", \\\"Brown\\\", \\\"3D Glasses\\\", \\\"Vision Pro\\\", \\\"Visor\\\", \\\"Hololens\\\"];\\n    string[] private _eyes2 = [\\\"Pirate Patch\\\", \\\"Sleeping Mask\\\", \\\"Conjunctivitis\\\", \\\"Dark shades\\\"];\\n    string[] private _eyes3 = [\\\"Wight\\\", \\\"Ice\\\", \\\"Fire\\\", \\\"Blind\\\", \\\"Blue Ivy\\\", \\\"Cat\\\"];\\n\\n    function _getEyes(uint256 tokenId) internal view returns (string memory) {\\n        string memory _uEyes = _get(tokenId, _eyes).status;\\n        if (Base64.compareStrings(_uEyes, \\\"_eyes1\\\")) {\\n            return\\n                _eyes1[_getRandomNumber(_eyes1.length, string(abi.encodePacked(\\\"uEyes1\\\", Base64.toString(tokenId))))];\\n        } else if (Base64.compareStrings(_uEyes, \\\"_eyes2\\\")) {\\n            return\\n                _eyes2[_getRandomNumber(_eyes2.length, string(abi.encodePacked(\\\"uEyes2\\\", Base64.toString(tokenId))))];\\n        } else {\\n            return\\n                _eyes3[_getRandomNumber(_eyes3.length, string(abi.encodePacked(\\\"uEyes3\\\", Base64.toString(tokenId))))];\\n        }\\n    }\\n\\n    string[] private _head1 = [\\\"Bald\\\", \\\"Beanie\\\", \\\"Scarf\\\"];\\n    string[] private _head2 = [\\\"Feather Bonnet\\\", \\\"Bonnet\\\", \\\"Crown\\\", \\\"Dauphin\\\"];\\n    string[] private _head3 = [\\\"Front Cap\\\", \\\"Back Cap\\\"];\\n    string[] private _head4 = [\\\"Blonde Ponytail\\\", \\\"French Braids\\\", \\\"Dreadlocks\\\", \\\"Bicorne\\\", \\\"Grey Spiky\\\", \\\"Pink Spiky\\\"];\\n    string[] private _head5 = [\\\"Messy hair\\\", \\\"Hair surgery\\\", \\\"Targaryen Hat\\\", \\\"Tyrell cut\\\", \\\"Targaryen blonde\\\"];\\n\\n    function _getHeadGeneral(uint256 tokenId) internal view returns (string memory) {\\n        string memory _uHead = _get(tokenId, _headGeneral).status;\\n        if (Base64.compareStrings(_uHead, \\\"_head1\\\")) {\\n            return\\n                _head1[_getRandomNumber(_head1.length, string(abi.encodePacked(\\\"uHead1\\\", Base64.toString(tokenId))))];\\n        } else if (Base64.compareStrings(_uHead, \\\"_head2\\\")) {\\n            return\\n                _head2[_getRandomNumber(_head2.length, string(abi.encodePacked(\\\"uHead2\\\", Base64.toString(tokenId))))];\\n        } else if (Base64.compareStrings(_uHead, \\\"_head3\\\")) {\\n            return\\n                _head3[_getRandomNumber(_head3.length, string(abi.encodePacked(\\\"uHead3\\\", Base64.toString(tokenId))))];\\n        } else if (Base64.compareStrings(_uHead, \\\"_head4\\\")) {\\n            return\\n                _head4[_getRandomNumber(_head4.length, string(abi.encodePacked(\\\"uHead4\\\", Base64.toString(tokenId))))];\\n        } else {\\n            return\\n                _head5[_getRandomNumber(_head5.length, string(abi.encodePacked(\\\"uHead5\\\", Base64.toString(tokenId))))];\\n        }\\n    }\\n\\n    function _getHeadCyborg() internal pure returns (string memory) {\\n        return \\\"Bald\\\";\\n    }\\n\\n    string[] private _ear1 = [\\\"Cortana\\\", \\\"Siri\\\", \\\"Jarvis\\\", \\\"Friday\\\", \\\"Bard\\\"];\\n    string[] private _ear2 = [\\\"Alexa\\\", \\\"Assistant\\\"];\\n    string[] private _ear3 = [\\\"Sydney\\\", \\\"Clippy\\\", \\\"Sherlock\\\", \\\"Mycroft\\\", \\\"Luddite\\\"];\\n\\n    function _getEar(uint256 tokenId) internal view returns (string memory) {\\n        string memory _uEar = _get(tokenId, _ear).status;\\n        if (Base64.compareStrings(_uEar, \\\"_ear1\\\")) {\\n            return _ear1[_getRandomNumber(_ear1.length, string(abi.encodePacked(\\\"uEar1\\\", Base64.toString(tokenId))))];\\n        } else if (Base64.compareStrings(_uEar, \\\"_ear2\\\")) {\\n            return _ear2[_getRandomNumber(_ear2.length, string(abi.encodePacked(\\\"uEar2\\\", Base64.toString(tokenId))))];\\n        } else {\\n            return _ear3[_getRandomNumber(_ear3.length, string(abi.encodePacked(\\\"uEar3\\\", Base64.toString(tokenId))))];\\n        }\\n    }\\n\\n    string[] private _mouth1 = [\\\"Cigarrete\\\", \\\"Vape\\\", \\\"Sisha\\\"];\\n    string[] private _mouth2 = [\\\"Cheeky Tongue\\\", \\\"White teeth\\\", \\\"Braces\\\", \\\"No teeth\\\", \\\"Baby teeth\\\"];\\n    string[] private _mouth3 = [\\\"Closed\\\", \\\"Open\\\", \\\"Smoke\\\", \\\"Vapor\\\"];\\n    string[] private _mouth4 = [\\\"Red lips smoke\\\", \\\"Red lips cheeky tongue\\\", \\\"Red lips closed\\\"];\\n\\n    function _getMouth(uint256 tokenId) internal view returns (string memory) {\\n        string memory _uMouth = _get(tokenId, _mouth).status;\\n        if (Base64.compareStrings(_uMouth, \\\"_mouth1\\\")) {\\n            return _mouth1[_getRandomNumber(\\n                _mouth1.length, string(abi.encodePacked(\\\"uMouth1\\\", Base64.toString(tokenId)))\\n            )];\\n        } else if (Base64.compareStrings(_uMouth, \\\"_mouth2\\\")) {\\n            return _mouth2[_getRandomNumber(\\n                _mouth2.length, string(abi.encodePacked(\\\"uMouth2\\\", Base64.toString(tokenId)))\\n            )];\\n        } else if (Base64.compareStrings(_uMouth, \\\"_mouth3\\\")) {\\n            return _mouth3[_getRandomNumber(\\n                _mouth3.length, string(abi.encodePacked(\\\"uMouth3\\\", Base64.toString(tokenId)))\\n            )];\\n        } else {\\n            return _mouth4[_getRandomNumber(\\n                _mouth4.length, string(abi.encodePacked(\\\"uMouth4\\\", Base64.toString(tokenId)))\\n            )];\\n        }\\n    }\\n\\n    string[] private _background1 = [\\\"White\\\", \\\"Grey\\\", \\\"Black\\\"];\\n\\n    string[] private _background2 = [\\\"Binary\\\", \\\"Stripe\\\", \\\"Matrix\\\"];\\n\\n    function _getBackgroundGeneral(uint256 tokenId) internal view returns (string memory) {\\n        string memory _uBackground = _get(tokenId, _backgroundGeneral).status;\\n        if (Base64.compareStrings(_uBackground, \\\"_background1\\\")) {\\n            return _background1[_getRandomNumber(\\n                _background1.length, string(abi.encodePacked(\\\"uBackground1\\\", Base64.toString(tokenId)))\\n            )];\\n        } else {\\n            return _background2[_getRandomNumber(\\n                _background2.length, string(abi.encodePacked(\\\"uBackground2\\\", Base64.toString(tokenId)))\\n            )];\\n        }\\n    }\\n\\n    function _getBackgroundCyborg() internal pure returns (string memory) {\\n        return \\\"White\\\";\\n    }\\n\\n    function _getRandomNumber(uint256 range, string memory input) internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input, block.prevrandao))) % range;\\n    }\\n\\n    function _getRace(uint256 tokenId, Properties[] memory sourceArray) internal view returns (string memory) {\\n        uint256 randomNumber = _getRandomNumber(_RACE_DECIMALS, string(abi.encodePacked(Base64.toString(tokenId))));\\n        uint256 cumulativeProbability = 0;\\n\\n        for (uint256 j = 0; j < sourceArray.length; j++) {\\n            cumulativeProbability += sourceArray[j].probability;\\n            if (randomNumber < cumulativeProbability) {\\n                return sourceArray[j].status;\\n            }\\n        }\\n        return sourceArray[0].status;\\n    }\\n\\n    function _get(uint256 tokenId, Properties[] memory sourceArray) internal view returns (Properties memory) {\\n        uint256 randomNumber = _getRandomNumber(_DECIMALS, string(abi.encodePacked(Base64.toString(tokenId))));\\n        uint256 cumulativeProbability = 0;\\n\\n        for (uint256 j = 0; j < sourceArray.length; j++) {\\n            cumulativeProbability += sourceArray[j].probability;\\n            if (randomNumber < cumulativeProbability) {\\n                return sourceArray[j];\\n            }\\n        }\\n        return sourceArray[0];\\n    }\\n\\n    function render(uint256 tokenId) public view returns (string memory) {\\n        return _tokens[tokenId];\\n    }\\n\\n    modifier onlyUpdater() {\\n        require(msg.sender == _updaterAddress);\\n        _;\\n    }\\n\\n    function _checkIfHolder(address _contractAddress) internal view returns (uint8) {\\n        if (_contractAddress == address(0)) {\\n            return 0;\\n        }\\n        IERC721 specialContract = IERC721(_contractAddress);\\n        uint256 held = specialContract.balanceOf(msg.sender);\\n\\n        if (held > 0) {\\n            if (_contractAddress == _AZUKI_CONTRACT_ADDRESS) {\\n                return 1;\\n            } else if (_contractAddress == _BAYC_CONTRACT_ADDRESS) {\\n                return 2;\\n            } else if (_contractAddress == _LOOT_CONTRACT_ADDRESS) {\\n                return 3;\\n            } else if (_contractAddress == _DEGODS_CONTRACT_ADDRESS) {\\n                return 4;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    function save(uint256 tokenId, address _contractAddress) external onlyUpdater {\\n        uint8 spec = _checkIfHolder(_contractAddress);\\n\\n        string memory race = _getRace(tokenId, _race);\\n        string memory causeOfDeath = _getItem(tokenId, _causeOfDeathOthers);\\n        string memory head = _getHeadGeneral(tokenId);\\n        string memory background = _getBackgroundGeneral(tokenId);\\n        if (Base64.compareStrings(race, \\\"Cyborg\\\")) {\\n            causeOfDeath = _getItem(tokenId, _causeOfDeathCyborg);\\n            head = _getHeadCyborg();\\n            background = _getBackgroundCyborg();\\n        }\\n\\n        string[25] memory parts;\\n        {\\n            parts[0] =\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n\\n            parts[1] = race;\\n\\n            parts[2] = '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">';\\n\\n            parts[3] = _getItem(tokenId, _state);\\n\\n            parts[4] = '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">';\\n\\n            parts[5] = _getItem(tokenId, _nutrition);\\n\\n            parts[6] = '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">';\\n\\n            parts[7] = _getItem(tokenId, _iQ);\\n\\n            parts[8] = '</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"base\\\">';\\n\\n            parts[9] = causeOfDeath;\\n\\n            parts[10] = '</text><text x=\\\"10\\\" y=\\\"120\\\" class=\\\"base\\\">';\\n\\n            parts[11] = _getItem(tokenId, _matrix);\\n\\n            parts[12] = '</text><text x=\\\"10\\\" y=\\\"140\\\" class=\\\"base\\\">';\\n\\n            parts[13] = _getEyes(tokenId);\\n\\n            parts[14] = '</text><text x=\\\"10\\\" y=\\\"160\\\" class=\\\"base\\\">';\\n\\n            parts[15] = head;\\n\\n            parts[16] = '</text><text x=\\\"10\\\" y=\\\"180\\\" class=\\\"base\\\">';\\n\\n            parts[17] = _getEar(tokenId);\\n\\n            parts[18] = '</text><text x=\\\"10\\\" y=\\\"200\\\" class=\\\"base\\\">';\\n\\n            parts[19] = _getMouth(tokenId);\\n\\n            parts[20] = '</text><text x=\\\"10\\\" y=\\\"220\\\" class=\\\"base\\\">';\\n\\n            parts[21] = _getHoldersReward(tokenId, spec);\\n\\n            parts[22] = '</text><text x=\\\"10\\\" y=\\\"240\\\" class=\\\"base\\\">';\\n\\n            parts[23] = background;\\n\\n            parts[24] = \\\"</text></svg>\\\";\\n        }\\n        string memory output;\\n        {\\n            output = string(\\n                abi.encodePacked(\\n                    parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]\\n                )\\n            );\\n            output = string(\\n                abi.encodePacked(\\n                    output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]\\n                )\\n            );\\n            output = string(\\n                abi.encodePacked(\\n                    output, parts[17], parts[18], parts[19], parts[20], parts[21], parts[22], parts[23], parts[24]\\n                )\\n            );\\n        }\\n\\n        string[12] memory attributes;\\n        string memory aOutput;\\n        {\\n            attributes[0] = string(abi.encodePacked('[{\\\"trait_type\\\": \\\"Race\\\", \\\"value\\\": \\\"', race, '\\\" },'));\\n            attributes[1] =\\n                string(abi.encodePacked('{\\\"trait_type\\\": \\\"State\\\", \\\"value\\\": \\\"', _getItem(tokenId, _state), '\\\" },'));\\n            attributes[2] = string(\\n                abi.encodePacked('{\\\"trait_type\\\": \\\"Nutrition\\\", \\\"value\\\": \\\"', _getItem(tokenId, _nutrition), '\\\" },')\\n            );\\n            attributes[3] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"IQ\\\", \\\"value\\\": \\\"', _getItem(tokenId, _iQ), '\\\" },'));\\n            attributes[4] =\\n                string(abi.encodePacked('{\\\"trait_type\\\": \\\"Cause Of Death\\\", \\\"value\\\": \\\"', causeOfDeath, '\\\" },'));\\n            // attributes[5] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Matrix\\\", \\\"value\\\": \\\"', _getItem(tokenId,_matrix), '\\\" },'));\\n            attributes[5] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Eyes\\\", \\\"value\\\": \\\"', race, '\\\" },'));\\n            attributes[6] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Head\\\", \\\"value\\\": \\\"', head, '\\\" },'));\\n            attributes[7] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Eyes\\\", \\\"value\\\": \\\"', _getEyes(tokenId), '\\\" },'));\\n            attributes[8] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Ears\\\", \\\"value\\\": \\\"', _getEar(tokenId), '\\\" },'));\\n            attributes[9] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Mouth\\\", \\\"value\\\": \\\"', _getMouth(tokenId), '\\\" },'));\\n            attributes[10] =\\n                string(abi.encodePacked('{\\\"trait_type\\\": \\\"Cloak\\\", \\\"value\\\": \\\"', _getHoldersReward(tokenId, spec), '\\\" },'));\\n            attributes[11] = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Background\\\", \\\"value\\\": \\\"', background, '\\\" }]'));\\n        }\\n        {\\n            aOutput = string(\\n                abi.encodePacked(\\n                    attributes[0],\\n                    attributes[1],\\n                    attributes[2],\\n                    attributes[3],\\n                    attributes[4],\\n                    attributes[5],\\n                    attributes[6],\\n                    attributes[7],\\n                    attributes[8],\\n                    attributes[9],\\n                    attributes[10],\\n                    attributes[11]\\n                )\\n            );\\n        }\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Bug #',\\n                        Base64.toString(tokenId),\\n                        '\\\", \\\"description\\\": \\\"BUGN NFT\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(output)),\\n                        '\\\", \\\"attributes\\\": ',\\n                        aOutput,\\n                        \\\"}\\\"\\n                    )\\n                )\\n            )\\n        );\\n        _tokens[tokenId] = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    function updateRaceProbability(uint256 c, uint256 d, uint256 e, uint256 n, uint256 s) external onlyUpdater {\\n        _race[0] = Properties(\\\"Cyborg\\\", c);    \\n        _race[1] = Properties(\\\"Degen\\\", d);\\n        _race[2] = Properties(\\\"Erectus\\\", e);\\n        _race[3] = Properties(\\\"Neanderthals\\\", n);\\n        _race[4] = Properties(\\\"Sapiens\\\", s);\\n    }\\n\\n    function setUpdaterAddress(address updaterAddress) public {\\n        require(msg.sender == _owner, \\\"No Access\\\");\\n        _updaterAddress = updaterAddress;\\n    }\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    function compareStrings(string memory str1, string memory str2) internal pure returns (bool) {\\n        return keccak256(bytes(str1)) == keccak256(bytes(str2));\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    bytes internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory _table = _TABLE;\\n\\n        assembly {\\n            let _tablePtr := add(_table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for { let i := 0 } lt(i, len) {} {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(_tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(_tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(_tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(_tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"save\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updaterAddress\",\"type\":\"address\"}],\"name\":\"setUpdaterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"updateRaceProbability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BUGNRenderer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}