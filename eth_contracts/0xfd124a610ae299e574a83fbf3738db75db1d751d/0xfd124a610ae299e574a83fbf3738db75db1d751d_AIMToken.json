{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: AIMToken (2).sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\ninterface IERC20USDT {\r\n    function allowance(address owner, address spender) external returns (uint);\r\n\r\n    function transferFrom(address from, address to, uint value) external;\r\n\r\n    function approve(address spender, uint value) external;\r\n\r\n    function totalSupply() external returns (uint);\r\n\r\n    function balanceOf(address who) external returns (uint);\r\n\r\n    function transfer(address to, uint value) external;\r\n}\r\n\r\nerror youDontHaveEnoughUsdtORplasePurchaseMorethan30UsdtToken();\r\nerror transferFaild();\r\nerror roundSupplyLimitExceed();\r\nerror waitForStartingSaleRoud();\r\nerror contractDontHaveUSDT();\r\nerror youDontHaveEnoughTokens();\r\nerror mintingIsNotAllowed();\r\nerror pleaseSendTokenPrice();\r\nerror allRoundsAreFinished();\r\nerror invalidUSDTPrice();\r\nerror pleaseWaitForPreSaleEnd();\r\nerror pleasePurchaseMorethan30Doller();\r\n\r\ncontract AIMToken is ERC20, Ownable {\r\n    uint256 public round;\r\n    uint256 public raisedAmount;\r\n\r\n    uint256 public constant roundLimit = 100_000_000 ether;\r\n\r\n    uint256 public liquidityTokens = 100_000_000 ether;\r\n    uint256 public stakeholdersTokens = 200_000_000 ether;\r\n    uint256 public exchangeTokens = 200_000_000 ether;\r\n\r\n    uint256 public remainingSupply;\r\n\r\n    uint256 conversionRate = 10 ** 12;\r\n\r\n    uint256 public round1Price = 0.005 * 10 ** 6;\r\n    uint256 public round2Price = 0.01 * 10 ** 6;\r\n    uint256 public round3Price = 0.02 * 10 ** 6;\r\n    uint256 public round4Price = 0.04 * 10 ** 6;\r\n    uint256 public round5Price = 0.08 * 10 ** 6;\r\n\r\n    address public liquidityTokensWallet;\r\n    address public stakeholdersTokensWallet;\r\n    address public exchangeTokensWallet;\r\n\r\n    mapping(address => uint256) public soldTokens;\r\n\r\n    event RoundData(\r\n        uint256 _round,\r\n        address _user,\r\n        uint256 _soldToken,\r\n        uint256 _BuywithEth,\r\n        uint256 _BuywithUSDT\r\n    );\r\n\r\n    modifier isListed() {\r\n        if (soldTokens[msg.sender] <= 0) {\r\n            revert youDontHaveEnoughTokens();\r\n        }\r\n        _;\r\n    }\r\n\r\n    IERC20USDT USDTtoken;\r\n\r\n    constructor() ERC20(\"AIMToken\", \"AIM\") {\r\n         stakeholdersTokensWallet = 0xcC6793FAefea61BaBb9E73618c9AB79F194aCb66; //Change Adresses here\r\n        liquidityTokensWallet = 0xAe1AadAbdbd5a0eD1589648E04CF3E488a574298; //Change Adresses here\r\n        exchangeTokensWallet = 0x194773498e690F7f0e8C071938d285707E6e2601; //Change Adresses here\r\n\r\n        _mint(stakeholdersTokensWallet, stakeholdersTokens);\r\n        _mint(liquidityTokensWallet, liquidityTokens);\r\n        _mint(exchangeTokensWallet, exchangeTokens);\r\n\r\n        USDTtoken = IERC20USDT(0xdAC17F958D2ee523a2206206994597C13D831ec7); //0xdAC17F958D2ee523a2206206994597C13D831ec7\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return 1000_000_000 ether;\r\n    }\r\n\r\n    function startTheSale() public onlyOwner {\r\n        _mint(owner(), remainingSupply);\r\n        remainingSupply = 0;\r\n        raisedAmount = 0;\r\n        if (round > 5) {\r\n            revert allRoundsAreFinished();\r\n        }\r\n        round += 1;\r\n        if(round < 6) {\r\n        remainingSupply += roundLimit;\r\n        }\r\n    }\r\n\r\n    // minting tokens function\r\n    function mintByUSDT(uint256 _amount) external {\r\n        if (round == 0) {\r\n            revert waitForStartingSaleRoud();\r\n        }\r\n\r\n        if ((remainingSupply - _amount) < 0) {\r\n            revert roundSupplyLimitExceed();\r\n        }\r\n\r\n        //////// stage one ////////////\r\n        if (round == 1) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(\r\n                _amount,\r\n                round1Price\r\n            );\r\n            if (\r\n                payAmountInUDST < 30*10**6 ||\r\n                USDTtoken.balanceOf(msg.sender) < payAmountInUDST\r\n            ) {\r\n            \r\n                revert youDontHaveEnoughUsdtORplasePurchaseMorethan30UsdtToken();\r\n            }\r\n\r\n            USDTtoken.transferFrom(msg.sender, address(this), payAmountInUDST);\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, 0, payAmountInUDST);\r\n        }\r\n        //////// stage Two ////////////\r\n        else if (round == 2) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(\r\n                _amount,\r\n                round2Price\r\n            );\r\n            if (\r\n                 payAmountInUDST < 30*10**6 ||\r\n                USDTtoken.balanceOf(msg.sender) < payAmountInUDST\r\n            ) {\r\n            \r\n                revert youDontHaveEnoughUsdtORplasePurchaseMorethan30UsdtToken();\r\n            }\r\n            USDTtoken.transferFrom(msg.sender, address(this), payAmountInUDST);\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, 0, payAmountInUDST);\r\n        }\r\n        //////// stage Three ////////////\r\n        else if (round == 3) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(\r\n                _amount,\r\n                round3Price\r\n            );\r\n            if (\r\n                 payAmountInUDST < 30*10**6 ||\r\n                USDTtoken.balanceOf(msg.sender) < payAmountInUDST\r\n            ) {\r\n            \r\n                revert youDontHaveEnoughUsdtORplasePurchaseMorethan30UsdtToken();\r\n            }\r\n            USDTtoken.transferFrom(msg.sender, address(this), payAmountInUDST);\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, 0, payAmountInUDST);\r\n        }\r\n        //////// stage four ////////////\r\n        else if (round == 4) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(\r\n                _amount,\r\n                round4Price\r\n            );\r\n            if (\r\n                 payAmountInUDST < 30*10**6  ||\r\n                USDTtoken.balanceOf(msg.sender) < payAmountInUDST\r\n            ) {\r\n            \r\n                revert youDontHaveEnoughUsdtORplasePurchaseMorethan30UsdtToken();\r\n            }\r\n            USDTtoken.transferFrom(msg.sender, address(this), payAmountInUDST);\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, 0, payAmountInUDST);\r\n        }\r\n        //////// stage five ////////////\r\n        else if (round == 5) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(\r\n                _amount,\r\n                round5Price\r\n            );\r\n            if (\r\n                 payAmountInUDST < 30*10**6 ||\r\n                USDTtoken.balanceOf(msg.sender) < payAmountInUDST\r\n            ) {\r\n            \r\n                revert youDontHaveEnoughUsdtORplasePurchaseMorethan30UsdtToken();\r\n            }\r\n            USDTtoken.transferFrom(msg.sender, address(this), payAmountInUDST);\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, 0, payAmountInUDST);\r\n        } else {\r\n            revert mintingIsNotAllowed();\r\n        }\r\n    }\r\n\r\n    //minting functiion in payable\r\n    function mintByEth(uint256 _amount) external payable {\r\n        if (round == 0) {\r\n            revert waitForStartingSaleRoud();\r\n        }\r\n\r\n        if ((remainingSupply - _amount) < 0) {\r\n            revert roundSupplyLimitExceed();\r\n        }\r\n\r\n        //////// stage one ////////////\r\n        if (round == 1) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(_amount,round1Price);\r\n            if (payAmountInUDST < 30*10**6) {\r\n            \r\n                revert pleasePurchaseMorethan30Doller();\r\n            }\r\n\r\n            uint256 payAmount = sellTokenInETHPrice(_amount, round1Price);\r\n            if (msg.value < payAmount) {\r\n            \r\n                revert pleaseSendTokenPrice();\r\n            }\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, msg.value, payAmountInUDST);\r\n        }\r\n        //////// stage Two ////////////\r\n        else if (round == 2) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(_amount,round2Price);\r\n            if (payAmountInUDST < 30*10**6) {\r\n            \r\n                revert pleasePurchaseMorethan30Doller();\r\n            }\r\n\r\n            uint256 payAmount = sellTokenInETHPrice(_amount, round2Price);\r\n            if (msg.value < payAmount) {\r\n            \r\n                revert pleaseSendTokenPrice();\r\n            }\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, msg.value, payAmountInUDST);\r\n        }\r\n        //////// stage Three ////////////\r\n        else if (round == 3) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(_amount,round3Price);\r\n            if (payAmountInUDST < 30*10**6) {\r\n            \r\n                revert pleasePurchaseMorethan30Doller();\r\n            }\r\n\r\n            uint256 payAmount = sellTokenInETHPrice(_amount, round3Price);\r\n            if (msg.value < payAmount) {\r\n            \r\n                revert pleaseSendTokenPrice();\r\n            }\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, msg.value, payAmountInUDST);\r\n        }\r\n        //////// stage four ////////////\r\n        else if (round == 4) {\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(_amount,round4Price);\r\n            if (payAmountInUDST < 30*10**6) {\r\n            \r\n                revert pleasePurchaseMorethan30Doller();\r\n            }\r\n\r\n            uint256 payAmount = sellTokenInETHPrice(_amount, round4Price);\r\n\r\n            if (msg.value < payAmount) {\r\n            \r\n                revert pleaseSendTokenPrice();\r\n            }\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, msg.value, payAmountInUDST);\r\n        }\r\n        //////// stage five ////////////\r\n        else if (round == 5) {\r\n\r\n            uint256 payAmountInUDST = sellTokenInUDSTPrice(_amount,round5Price);\r\n            if (payAmountInUDST < 30*10**6) {\r\n            \r\n                revert pleasePurchaseMorethan30Doller();\r\n            }\r\n\r\n\r\n            uint256 payAmount = sellTokenInETHPrice(_amount, round5Price);\r\n\r\n            if (msg.value < payAmount) {\r\n            \r\n                revert pleaseSendTokenPrice();\r\n            }\r\n            remainingSupply -= _amount;\r\n            soldTokens[msg.sender] += _amount;\r\n            raisedAmount += payAmountInUDST;\r\n            emit RoundData(round, msg.sender, _amount, msg.value, payAmountInUDST);\r\n        } else {\r\n            revert mintingIsNotAllowed();\r\n        }\r\n    }\r\n\r\n    function getLatestUSDTPrice() public view returns (uint256) {\r\n        //0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46 USDt/ETH Ethereum mainnet\r\n        AggregatorV3Interface USDTPriceFeed = AggregatorV3Interface(\r\n            0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46\r\n        ); // Mainnet contract address for USDT price feed\r\n        (, int256 price, , , ) = USDTPriceFeed.latestRoundData(); // Get the latest USDT price data from Chainlink\r\n\r\n        if (price <= 0) {\r\n            // Ensure that the price is valid\r\n            revert invalidUSDTPrice();\r\n        }\r\n        return uint256(price);\r\n    }\r\n\r\n    //This is withdraw Function, OnlyOwner Can call this Function\r\n    function withdraw() public onlyOwner {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        if (!success) {\r\n            revert transferFaild();\r\n        }\r\n    }\r\n\r\n    //withdraw USDT tokens\r\n    function withdrawUSDT(uint256 _amount) public onlyOwner {\r\n        if (USDTtoken.balanceOf(address(this)) < _amount*10**6) {\r\n            revert contractDontHaveUSDT();\r\n        }\r\n        USDTtoken.transfer(owner(), _amount*10**6);\r\n    }\r\n\r\n    //claiming Tokens\r\n    function claimAIMToken() public isListed {\r\n        if (round < 6) {\r\n            revert pleaseWaitForPreSaleEnd();\r\n        }\r\n\r\n        uint256 amount = soldTokens[msg.sender];\r\n        delete soldTokens[msg.sender];\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n    // //this function sell token in USDT 6 decimal\r\n    // function sellTokenInUDSTPrice(\r\n    //     uint256 _amount,\r\n    //     uint256 _roundPrice\r\n    // ) public view returns (uint256) {\r\n    //     uint256 conversion = _roundPrice * conversionRate;\r\n    //     uint256 tokensAmountPrice = ((conversion * _amount) / 10 ** 18) / 10 ** 12;\r\n    //     return tokensAmountPrice;\r\n    // }\r\n\r\n    // //this function sell token in Ether 18 decimal\r\n    // function sellTokenInETHPrice(\r\n    //     uint256 _amount,\r\n    //     uint256 _roundPrice\r\n    // ) public view returns (uint256) {\r\n    //     uint256 conversion = _roundPrice * conversionRate;\r\n    //     uint256 tokensAmountPrice = ((conversion * _amount) / 10 ** 18) / 10 ** 12;\r\n    //     uint256 amountinEthers = tokensAmountPrice * conversionRate;\r\n    //     //if you want to change hardcode the getLatestUSDTPrice()\r\n    //     uint256 amountInEth = (getLatestUSDTPrice() * amountinEthers) / 10 ** 18;\r\n    //     return amountInEth;\r\n    // }\r\n\r\n\r\n    // This function sells tokens in USDT with 6 decimal places\r\n    function sellTokenInUDSTPrice(uint256 _amount,uint256 _roundPrice) public view returns (uint256) {\r\n        uint256 tokensAmountPrice = calculateTokensAmountPrice(_amount,_roundPrice);\r\n        return tokensAmountPrice;\r\n    }\r\n\r\n    // This function sells tokens in Ether with 18 decimal places\r\n    function sellTokenInETHPrice(uint256 _amount, uint256 _roundPrice) public view returns (uint256) {\r\n        uint256 tokensAmountPrice = calculateTokensAmountPrice(_amount, _roundPrice);\r\n        uint256 amountInEth = calculateAmountInEther(tokensAmountPrice);\r\n        return amountInEth;\r\n    }\r\n\r\n    function calculateTokensAmountPrice(uint256 _amount,uint256 _roundPrice) internal view returns (uint256) {\r\n        uint256 conversion = _roundPrice * conversionRate;\r\n        uint256 tokensAmountPrice = (conversion * _amount) / (10 ** 18 * 10 ** 12);\r\n        return tokensAmountPrice;\r\n    }\r\n\r\n    function calculateAmountInEther(uint256 _tokensAmountPrice) internal view returns (uint256) {\r\n        uint256 amountinEthers = (_tokensAmountPrice * conversionRate) / 10 ** 18;\r\n        uint256 amountInEth = getLatestUSDTPrice() * amountinEthers;\r\n        return amountInEth;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allRoundsAreFinished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"contractDontHaveUSDT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidUSDTPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"mintingIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"pleasePurchaseMorethan30Doller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"pleaseSendTokenPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"pleaseWaitForPreSaleEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"roundSupplyLimitExceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"transferFaild\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"waitForStartingSaleRoud\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"youDontHaveEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"youDontHaveEnoughUsdtORplasePurchaseMorethan30UsdtToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_soldToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_BuywithEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_BuywithUSDT\",\"type\":\"uint256\"}],\"name\":\"RoundData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAIMToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeTokensWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestUSDTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTokensWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintByEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintByUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round1Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round2Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round3Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round4Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round5Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundPrice\",\"type\":\"uint256\"}],\"name\":\"sellTokenInETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundPrice\",\"type\":\"uint256\"}],\"name\":\"sellTokenInUDSTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"soldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholdersTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeholdersTokensWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTheSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AIMToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7e20e10917a85ce7602297309cfadf3fc641957d05671383d71cb0bcd853cf01"}