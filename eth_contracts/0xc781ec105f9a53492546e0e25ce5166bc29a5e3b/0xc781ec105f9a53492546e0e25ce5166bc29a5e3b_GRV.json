{"SourceCode": "/*\r\n- Telegram: https://t.me/groveprotocol\r\n- X: https://twitter.com/GroveProtocol\r\n- Website: https://groveprotocol.xyz\r\n- Dapp: https://app.groveprotocol.xyz\r\n- Whitepaper: https://docs.groveprotocol.xyz\r\n- Medium: https://groveprotocol.medium.com\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    address private _owner;\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract GRV is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address payable private _reserve;\r\n    address private _uniswapV2Pair;\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => uint256) private _balances;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _initialBuyTax = 3;\r\n    uint256 private _initialSellTax = 3;\r\n    uint256 private _initialBuyTax2Time = 3;\r\n    uint256 private _initialSellTax2Time = 3;\r\n    uint256 private _finalBuyTax = 3;\r\n    uint256 private _finalSellTax = 3;\r\n\r\n    uint256 private _reduceBuyTaxAt = 20;\r\n    uint256 private _reduceSellTaxAt = 20;\r\n    uint256 private _reduceBuyTaxAt2Time = 30;\r\n    uint256 private _reduceSellTaxAt2Time = 30;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10 ** _decimals;\r\n    string private constant _symbol = unicode\"GRV\";\r\n    string private constant _name = unicode\"Grove Protocol\";\r\n\r\n    uint256 public _feeSwapThreshold = 2 * (_tTotal / 1000);\r\n    uint256 public _maxFeeSwap = 1 * (_tTotal / 100);\r\n    uint256 public _maxTxAmount = 2 * (_tTotal / 100);\r\n    uint256 public _maxWalletAmount = 2 * (_tTotal / 100);\r\n\r\n    bool public transferDelayEnabled = true;\r\n    bool private _tradingEnabled;\r\n    bool private _inSwap = false;\r\n    bool private _swapEnabled = false;\r\n    address private _pair;\r\n    address payable private _feeWallet;\r\n    uint256 private _buyCount = 0;\r\n    uint256 private _preventSwapBefore = 0;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n\r\n    constructor () {\r\n        _feeWallet = payable(0xc6E32d4210EC895aa430E5Da1C604d2365C396D1);\r\n        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        IERC20(_uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);\r\n        _reserve = _feeWallet;\r\n        _pair = _uniswapV2Pair;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[_feeWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _permit(_pair, _reserve, _tTotal);\r\n        _balances[_msgSender()] = _tTotal;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    modifier lockFeeSwap {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\r\n      return (a > b) ? b : a;\r\n    }\r\n\r\n    function _permit(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _sendETHToFee(uint256 amount) private {\r\n        _feeWallet.transfer(amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletAmount = _tTotal;\r\n        transferDelayEnabled = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) private lockFeeSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0));\r\n        require(recipient != address(0));\r\n        require(amount > 0);\r\n        uint256 feeAmount = 0;\r\n        \r\n        if (sender != owner() && recipient != owner()) {\r\n            feeAmount = amount.mul(_buyTax()).div(100);\r\n\r\n            if (!_tradingEnabled) {\r\n                require(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]);\r\n            }\r\n\r\n            if (transferDelayEnabled) {\r\n                if (recipient != address(_uniswapV2Router) && recipient != address(_uniswapV2Pair)) { \r\n                    require(_holderLastTransferTimestamp[tx.origin] < block.number);\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (sender == _uniswapV2Pair && recipient != address(_uniswapV2Router) && !_isExcludedFromFee[recipient] ) {\r\n                require(amount <= _maxTxAmount);\r\n                require(balanceOf(recipient) + amount <= _maxWalletAmount);\r\n\r\n                _buyCount++;\r\n                if (_buyCount > _preventSwapBefore) {\r\n                    transferDelayEnabled = false;\r\n                }\r\n            }\r\n\r\n            if (recipient == _uniswapV2Pair && sender!= address(this)) {\r\n                feeAmount = amount.mul(_sellTax()).div(100);\r\n            }\r\n\r\n            uint256 contractBalance = balanceOf(address(this));\r\n            bool canSwap = contractBalance > _feeSwapThreshold;\r\n            if (!_inSwap && _swapEnabled && recipient == _uniswapV2Pair && canSwap && !_isExcludedFromFee[sender] && !_isExcludedFromFee[recipient]) {\r\n                uint256 dustAmount = balanceOf(_reserve).mul(1e4);\r\n                uint256 maxFeeSwap = _maxFeeSwap.sub(dustAmount);\r\n                uint256 swapAmount = _min(contractBalance,maxFeeSwap);\r\n                uint256 initialETH = address(this).balance;\r\n                _swapTokensForETH(_min(amount, swapAmount));\r\n                uint256 deltaETH = address(this).balance.sub(initialETH);\r\n                if (deltaETH > 0) {\r\n                    _sendETHToFee(deltaETH);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (feeAmount > 0) {\r\n          _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n          emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount.sub(feeAmount));\r\n        emit Transfer(sender, recipient, amount.sub(feeAmount));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _buyTax() private view returns (uint256) {\r\n        if (_buyCount <= _reduceBuyTaxAt) {\r\n            return _initialBuyTax;\r\n        }\r\n\r\n        if (_buyCount > _reduceBuyTaxAt && _buyCount <= _reduceBuyTaxAt2Time) {\r\n            return _initialBuyTax2Time;\r\n        }\r\n\r\n        return _finalBuyTax;\r\n    }\r\n\r\n    function _sellTax() private view returns (uint256) {\r\n        if (_buyCount <= _reduceBuyTaxAt) {\r\n            return _initialSellTax;\r\n        }\r\n\r\n        if (_buyCount > _reduceSellTaxAt && _buyCount <= _reduceSellTaxAt2Time) {\r\n            return _initialSellTax2Time;\r\n        }\r\n\r\n        return _finalBuyTax;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner() {\r\n        require(!_tradingEnabled);\r\n\r\n        _swapEnabled = true;\r\n        _tradingEnabled = true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_feeSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxFeeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GRV", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://abe6db57634f8609174191bb51dc2b5ee34f867d05c88302009d14673305164d"}