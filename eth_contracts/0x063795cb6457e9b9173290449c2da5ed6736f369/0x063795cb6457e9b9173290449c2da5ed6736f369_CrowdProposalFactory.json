{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IUnion {\r\n    function delegate(address delegatee) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ninterface IUnionGovernor {\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\r\n    function castVote(uint proposalId, uint8 support) external;\r\n}\r\n\r\ncontract CrowdProposal {\r\n    /// @notice The crowd proposal author\r\n    address payable public immutable author;\r\n\r\n    /// @notice Governance proposal data\r\n    address[] public targets;\r\n    uint[] public values;\r\n    string[] public signatures;\r\n    bytes[] public calldatas;\r\n    string public description;\r\n\r\n    /// @notice UNION token contract address\r\n    address public immutable union;\r\n    /// @notice UNION protocol `UnionGovernor` contract address\r\n    address public immutable governor;\r\n\r\n    /// @notice Governance proposal id\r\n    uint public govProposalId;\r\n    /// @notice Terminate flag\r\n    bool public terminated;\r\n\r\n    /// @notice An event emitted when the governance proposal is created\r\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\r\n    /// @notice An event emitted when the crowd proposal is terminated\r\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\r\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\r\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\r\n\r\n    /**\r\n    * @notice Construct crowd proposal\r\n    * @param author_ The crowd proposal author\r\n    * @param targets_ The ordered list of target addresses for calls to be made\r\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures_ The ordered list of function signatures to be called\r\n    * @param calldatas_ The ordered list of calldata to be passed to each call\r\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\r\n    * @param union_ `UNION` token contract address\r\n    * @param governor_ UNION protocol `UnionGovernor` contract address\r\n    */\r\n    constructor(address payable author_,\r\n                address[] memory targets_,\r\n                uint[] memory values_,\r\n                string[] memory signatures_,\r\n                bytes[] memory calldatas_,\r\n                string memory description_,\r\n                address union_,\r\n                address governor_) public {\r\n        author = author_;\r\n\r\n        // Save proposal data\r\n        targets = targets_;\r\n        values = values_;\r\n        signatures = signatures_;\r\n        calldatas = calldatas_;\r\n        description = description_;\r\n\r\n        // Save Union contracts data\r\n        union = union_;\r\n        governor = governor_;\r\n\r\n        terminated = false;\r\n\r\n        // Delegate votes to the crowd proposal\r\n        IUnion(union_).delegate(address(this));\r\n    }\r\n\r\n    /// @notice Create governance proposal\r\n    function propose() external returns (uint) {\r\n        require(govProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\r\n        require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\r\n\r\n        // Create governance proposal and save proposal id\r\n        govProposalId = IUnionGovernor(governor).propose(targets, values, signatures, calldatas, description);\r\n        emit CrowdProposalProposed(address(this), author, govProposalId);\r\n\r\n        return govProposalId;\r\n    }\r\n\r\n    /// @notice Terminate the crowd proposal, send back staked union tokens\r\n    function terminate() external {\r\n        require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\r\n        require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\r\n\r\n        terminated = true;\r\n    \r\n        // Transfer staked union tokens from the crowd proposal contract back to the author\r\n        uint amount = IUnion(union).balanceOf(address(this));\r\n        if(amount > 0){\r\n            IUnion(union).transfer(author, amount);\r\n        }\r\n        emit CrowdProposalTerminated(address(this), author);\r\n    }\r\n\r\n    /// @notice Vote for the governance proposal with all delegated votes\r\n    function vote() external {\r\n        require(govProposalId > 0, 'CrowdProposal::vote: gov proposal has not been created yet');\r\n        // Support the proposal, vote value = 1\r\n        IUnionGovernor(governor).castVote(govProposalId, 1);\r\n\r\n        emit CrowdProposalVoted(address(this), govProposalId);\r\n    }\r\n}\r\n\r\ncontract CrowdProposalFactory {\r\n    /// @notice `UNION` token contract address\r\n    address public immutable union;\r\n    /// @notice Union protocol `UnionGovernor` contract address\r\n    address public immutable governor;\r\n    /// @notice Union protocol `UnionGovernor timelock` contract address\r\n    address public immutable timelock;\r\n    /// @notice Minimum UNION tokens required to create a crowd proposal\r\n    uint public unionStakeAmount;\r\n\r\n    /// @notice An event emitted when a crowd proposal is created\r\n    event CrowdProposalCreated(address indexed proposal, address indexed author, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\r\n\r\n    event StakeAmountChange(uint oldAmount, uint newAmount);\r\n     /**\r\n     * @notice Construct a proposal factory for crowd proposals\r\n     * @param union_ `UNION` token contract address\r\n     * @param governor_ Union protocol `UnionGovernor` contract address\r\n     * @param unionStakeAmount_ The minimum amount of UNION tokes required for creation of a crowd proposal\r\n     */\r\n    constructor(address union_,\r\n                address governor_,\r\n                address timelock_,\r\n                uint unionStakeAmount_) public {\r\n        union = union_;\r\n        governor = governor_;\r\n        timelock = timelock_;\r\n        unionStakeAmount = unionStakeAmount_;\r\n    }\r\n\r\n    function setUnionStakeAmount(uint unionStakeAmount_) external {\r\n        require(msg.sender == timelock, \"only timelock\");\r\n        uint oldUnionStakeAmount = unionStakeAmount;\r\n        unionStakeAmount = unionStakeAmount_;\r\n        emit StakeAmountChange(oldUnionStakeAmount, unionStakeAmount);\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new crowd proposal\r\n    * @notice Call `union.approve(factory_address, unionStakeAmount)` before calling this method\r\n    * @param targets The ordered list of target addresses for calls to be made\r\n    * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures The ordered list of function signatures to be called\r\n    * @param calldatas The ordered list of calldata to be passed to each call\r\n    * @param description The block at which voting begins: holders must delegate their votes prior to this block\r\n    */\r\n    function createCrowdProposal(address[] memory targets,\r\n                                 uint[] memory values,\r\n                                 string[] memory signatures,\r\n                                 bytes[] memory calldatas,\r\n                                 string memory description) external {\r\n        CrowdProposal proposal = new CrowdProposal(msg.sender, targets, values, signatures, calldatas, description, union, governor);\r\n        emit CrowdProposalCreated(address(proposal), msg.sender, targets, values, signatures, calldatas, description);\r\n\r\n        // Stake UNION and force proposal to delegate votes to itself\r\n        if(unionStakeAmount > 0){\r\n            IUnion(union).transferFrom(msg.sender, address(proposal), unionStakeAmount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"union_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unionStakeAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"CrowdProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"StakeAmountChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createCrowdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unionStakeAmount_\",\"type\":\"uint256\"}],\"name\":\"setUnionStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"union\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unionStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CrowdProposalFactory", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005dfe42eea70a3e6f93ee54ed9c321af07a85535c000000000000000000000000e1b3f07a9032f0d3dedf3e96c395a4da74130f6e000000000000000000000000bbd3321f377742c4b3fe458b270c2f271d3294d80000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4b08844743813d2e00d0221b374ec099a19668625d886227aec14cf64ac8901c"}