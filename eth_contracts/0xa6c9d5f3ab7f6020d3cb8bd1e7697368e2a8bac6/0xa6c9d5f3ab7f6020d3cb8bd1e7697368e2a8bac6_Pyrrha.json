{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-02-12\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n    Pyrrha is the daughter of Pandora in Greek mythology.\r\n\r\n    A collection of 1000 stones that Pyrrha and Deucalion turned into human creatures.\r\n    Who knows what these stones can be turned into?\r\n\r\n    Enabled by ERC404X, an experimental variation of ERC404 with improved gas efficiency, persistent IDs and built-in reshuffling.\r\n\r\n    Website: https://pyrrha.build\r\n    Telegram: https://t.me/Pyrrha404X\r\n    Twitter: https://twitter.com/Pyrrha404X\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2806\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2843\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u2887\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2846\u2800\u2800\u2880\u284f\u2818\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287c\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2867\u2800\u2800\u2800\u2800\u2880\u2870\u2801\u2800\u2800\u28fe\u2801\u2800\u28b9\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2803\u2843\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u2847\u2800\u2800\u2800\u2800\u2800\u28a0\u28df\u28c7\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2883\u2800\u2800\u28a8\u2807\u2800\u2800\u2800\u2800\u2800\u2880\u284f\u284c\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u287e\u284f\u2819\u28e6\u2840\u2800\u2800\u28ff\u2803\u2800\u2800\u2800\u28ec\u2842\u2800\u28f8\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u2802\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28a3\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u289f\u2847\u2800\u2800\u2800\u2800\u28b8\u2803\u2803\u2800\u2808\u28b7\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2819\u28c7\u2816\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u285e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2808\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28c7\u2800\u2800\u2800\u2800\u2818\u2800\u2800\u2800\u2800\u28f8\u2800\u2800\u28bf\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f7\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28f7\u28e4\u2840\u2800\u2800\u28a0\u28f4\u2840\u28a0\u284f\u2800\u2800\u2818\u284f\u283b\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u2800\u2800\u2800\u2800\u2800\u28c6\u2800\u2800\u2800\u289b\u28f7\u2819\u28a7\u2840\u2800\u283b\u28ef\u281f\u2800\u2800\u2800\u2800\u2877\u2800\u2818\u28c6\u2800\u2800\u2800\u28a0\u2800\u2800\u2800\u2898\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2827\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2800\u2800\u2800\u2808\u28be\u2847\u2808\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u2887\u2800\u2800\u28b9\u2800\u2800\u2800\u28bc\u2800\u2800\u2800\u286a\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2800\u2800\u2800\u2800\u28fe\u2801\u2800\u28fd\u2800\u2800\u2800\u2800\u2800\u28e0\u287c\u280b\u285c\u2800\u2800\u28fc\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2844\u2800\u2800\u2800\u2800\u2880\u28fc\u2803\u2800\u28f0\u280f\u2800\u2800\u28e0\u28f4\u281e\u280b\u2800\u287c\u2801\u2800\u28f0\u2807\u2800\u2800\u28f8\u2803\u2800\u2800\u28f8\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28c7\u2800\u2800\u2800\u2808\u2847\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u28a0\u28fe\u2807\u2800\u28f0\u280b\u2800\u28e0\u28be\u285f\u2801\u28e0\u2876\u2853\u2801\u2880\u28f4\u280b\u2800\u2800\u2880\u284f\u2800\u2800\u28f0\u283f\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\u28a0\u287f\u2843\u2800\u2800\u28bb\u28c4\u28b0\u28ef\u280f\u28a0\u28be\u28aa\u280f\u2800\u28e0\u281e\u2801\u2800\u2800\u2890\u28cf\u2840\u2800\u28a0\u284f\u2800\u28b9\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u287f\u28c6\u2800\u2800\u2800\u2800\u2800\u28b8\u2803\u2800\u2800\u28ff\u284d\u2800\u2800\u2800\u2800\u2809\u281b\u2800\u2880\u28ef\u2803\u28b8\u2800\u2800\u284f\u2800\u2800\u2880\u2874\u281b\u287f\u2800\u2800\u28b8\u2801\u2800\u2800\u28f7\u2800\u2800\u2800\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u286c\u2803\u2838\u2846\u2800\u2800\u2800\u2800\u2878\u2880\u2800\u2800\u28bf\u2843\u2800\u28b9\u2852\u28a4\u2840\u2800\u2800\u2838\u2847\u2800\u28b8\u2840\u2800\u28a7\u2840\u2800\u28fe\u2801\u2800\u28e7\u2800\u2800\u28aa\u2840\u2800\u2800\u28ff\u2800\u2800\u28a0\u2843\u2800\u2800\u2800\u2800\u2846\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2816\u2800\u2800\u28ff\u2800\u2800\u2800\u28e0\u28d7\u284f\u2800\u2800\u2818\u28c7\u2800\u2808\u2847\u2800\u2819\u28a6\u2840\u28b8\u28e7\u2800\u2800\u28a7\u2800\u2808\u2833\u28c4\u28ff\u2800\u2800\u28b9\u2844\u2800\u28b8\u2842\u2800\u2800\u287f\u2800\u2800\u285e\u2800\u2800\u2800\u2800\u2818\u2804\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ee\u2805\u2800\u2800\u28a0\u284f\u2800\u2800\u28fc\u284f\u28b8\u2847\u2800\u2800\u2800\u28b9\u2846\u2880\u2847\u2800\u2844\u2800\u2831\u28fc\u28fa\u2840\u2800\u284c\u2833\u2844\u2800\u2808\u2819\u2803\u2800\u2800\u28bb\u2844\u2808\u28ff\u2844\u28fc\u2803\u2800\u2870\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u285f\u2800\u2800\u28e0\u281f\u2800\u2800\u2800\u28ff\u2801\u2808\u28e7\u2800\u2800\u2800\u28a0\u2847\u28b8\u2801\u28a0\u2847\u2800\u2800\u28b9\u28c7\u2807\u2800\u28b7\u28a6\u2819\u28a6\u2800\u2800\u28c0\u2800\u2800\u2800\u28b7\u2800\u2818\u281f\u2801\u2880\u28f4\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28c7\u2802\u28b0\u284f\u2800\u2800\u2800\u2800\u28ff\u2890\u2846\u2838\u28c6\u2880\u28f0\u281f\u2880\u284f\u2800\u28f8\u28b3\u2800\u2800\u2838\u280f\u2800\u2800\u28ff\u2803\u2847\u2808\u28b3\u2840\u284f\u28a7\u2800\u2800\u28b8\u2846\u2800\u28e0\u28f6\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28a7\u28d8\u28e7\u2800\u2800\u2800\u2880\u28ff\u2800\u28c7\u2800\u2839\u280b\u2801\u2800\u285c\u2880\u28ae\u2807\u28b8\u2800\u2800\u2800\u2800\u2880\u281e\u2801\u28f0\u2803\u2800\u2800\u28b3\u2803\u2808\u2847\u2800\u28b8\u2847\u28fc\u2873\u28b9\u2841\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281b\u2806\u2800\u2880\u287e\u2801\u28f0\u281f\u2846\u2800\u2800\u2880\u281e\u2800\u28a8\u284f\u28a0\u280f\u2800\u2800\u2800\u28f4\u2803\u2880\u285e\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u28f8\u2801\u28c7\u2807\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u284e\u28f8\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u285e\u2801\u28f0\u287f\u2800\u2818\u2886\u2874\u280b\u2800\u2800\u2818\u2813\u2801\u2800\u2800\u2800\u28b8\u2847\u2800\u2818\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u2803\u28f0\u280f\u2800\u28f7\u2800\u2818\u28c7\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2847\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2820\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u280f\u2801\u287c\u28db\u2843\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u284e\u28ff\u2800\u2800\u2800\u2800\u2838\u28e7\u2800\u2800\u2808\u28a6\u2840\u2800\u2800\u2800\u2800\u28f8\u2880\u285f\u2800\u2800\u28b9\u2844\u2840\u2839\u2846\u2800\u2800\u2800\u2800\u2800\u2808\u2801\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2800\u2800\u2800\u28c4\u2800\u2800\u2800\u28f8\u287b\u2800\u28b8\u28df\u284a\u2800\u2800\u2800\u2800\u2800\u2880\u2854\u2895\u281d\u2879\u2800\u2808\u28bb\u28d6\u2826\u287d\u28c6\u2800\u2800\u2800\u2819\u28a6\u2800\u2800\u2800\u284f\u2838\u28c7\u28c0\u28c0\u28fc\u2803\u2847\u2800\u2839\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u2800\u2800\u28a0\u28ef\u2807\u2800\u28d7\u2834\u2801\u2800\u2800\u2800\u28c0\u2896\u28e5\u281e\u28e1\u281e\u2881\u2864\u2896\u28be\u28bb\u2800\u28f8\u2808\u28b3\u2844\u2800\u2800\u2800\u2833\u2844\u2800\u28a7\u2800\u2808\u2809\u2809\u2880\u28e0\u28f7\u2840\u2800\u2839\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u2847\u2800\u28b8\u284f\u2847\u2800\u287f\u286b\u2800\u2800\u2800\u28a0\u28a3\u280b\u2889\u281e\u2801\u2874\u2801\u2800\u287c\u28b8\u2888\u28d3\u2803\u2800\u2880\u2847\u2800\u2800\u2800\u2800\u2839\u2844\u2800\u2859\u2812\u2812\u2892\u285f\u2809\u2800\u28c7\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f7\u2840\u2808\u28ff\u28e3\u2800\u28a7\u28bf\u2800\u2800\u2800\u28e3\u2807\u2800\u28b8\u2800\u28a0\u2803\u2800\u2800\u28a7\u28b8\u2841\u2808\u2809\u2809\u2831\u2847\u2800\u2800\u2800\u2800\u2880\u2807\u28b0\u28c7\u2800\u2800\u28b8\u2800\u2800\u2800\u28b8\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28e7\u2800\u2818\u28f7\u28e3\u2818\u28ae\u28a7\u2800\u2800\u28ff\u2800\u2800\u2808\u28a7\u2800\u28c6\u2800\u2800\u2808\u2822\u28b5\u28e4\u2800\u2800\u28dc\u2807\u2800\u2800\u2800\u28a0\u281e\u2800\u28cf\u2838\u2844\u2800\u2803\u2800\u2800\u2800\u285e\u2800\u28a0\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28fd\u28c6\u2848\u283b\u28f5\u2848\u283b\u28f7\u2800\u283b\u2844\u2800\u2800\u2800\u2811\u283f\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2860\u280f\u2800\u2800\u2880\u2894\u28c1\u28c0\u2840\u28b8\u2840\u2839\u2844\u2800\u2800\u2800\u28a0\u2807\u2880\u287e\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u285d\u2832\u2836\u282d\u2837\u288e\u2875\u2800\u289d\u28c6\u2800\u2800\u2800\u2800\u2818\u28a6\u2840\u2800\u2800\u2800\u2834\u280b\u2800\u2800\u28b0\u2841\u2800\u2889\u2847\u2809\u281e\u2800\u2800\u28f9\u2800\u2800\u2880\u284e\u2880\u287e\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u283b\u28e6\u2870\u2852\u281a\u2809\u28c4\u2800\u2800\u280b\u2833\u28a6\u2840\u2800\u2800\u2800\u2819\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281a\u2809\u2800\u2800\u2800\u2800\u28e0\u2803\u2800\u2880\u28de\u2874\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u283b\u28dd\u28e6\u2840\u2839\u284d\u2812\u2812\u281a\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u281c\u2881\u28c0\u28f4\u281f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u283b\u28a6\u28fc\u28e6\u2844\u2800\u2800\u2800\u2800\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u28e1\u287e\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2813\u2812\u2812\u281b\u283b\u28a4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u281e\u281b\u2813\u2812\u281a\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2801\u2800\u2800\u2802\u2810\u2800\u2808\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\r\n*/\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    error Unauthorized();\r\n    error InvalidOwner();\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        if (msg.sender != owner) revert Unauthorized();\r\n\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner) {\r\n        if (_owner == address(0x0)) revert InvalidOwner();\r\n\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0x0), _owner);\r\n    }\r\n\r\n    function transferOwnership(address _owner) public virtual onlyOwner {\r\n        if (_owner == address(0x0)) revert InvalidOwner();\r\n\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(msg.sender, _owner);\r\n    }\r\n\r\n    function revokeOwnership() public virtual onlyOwner {\r\n        owner = address(0x0);\r\n\r\n        emit OwnershipTransferred(msg.sender, address(0x0));\r\n    }\r\n}\r\n\r\nabstract contract ERC721Receiver {\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external virtual returns (bytes4) {\r\n        return ERC721Receiver.onERC721Received.selector;\r\n    }\r\n}\r\n\r\nlibrary Packer\r\n{\r\n    struct Data\r\n    {\r\n        uint64 _popFrontIndex;\r\n        uint64 _popFrontSign;\r\n        uint64 _nextInternalIndex;\r\n        uint64 _len;\r\n        mapping(uint256 => uint256) _values;\r\n    }\r\n\r\n    error OutOfBounds();\r\n    error UnevenEdit();\r\n    error InsaneBulk();\r\n\r\n    function push(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 value) internal returns(uint256) {\r\n        unchecked {\r\n            if (self._nextInternalIndex == valuesInElement || self._nextInternalIndex == 0)\r\n            {\r\n                self._values[self._len++] = value;\r\n                self._nextInternalIndex = 1;\r\n            }\r\n            else\r\n            {\r\n                self._values[self._len - 1] += value << (self._nextInternalIndex++ * bitsInValue);\r\n            }\r\n\r\n            return (self._len - 1) * valuesInElement + self._nextInternalIndex - 1;\r\n        }\r\n    }\r\n\r\n    function pushMany(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256[] memory values) internal returns(uint256[] memory) {\r\n        uint256 nextInternalIndex = self._nextInternalIndex;\r\n        uint256 len = self._len;\r\n\r\n        uint256 addLen = values.length;\r\n        uint256[] memory returnIndexes = new uint256[](addLen);\r\n        unchecked {\r\n            uint256 currentValue = self._values[len - 1];\r\n            for (uint256 i = 0; i < addLen; ++i) {\r\n                if (nextInternalIndex == valuesInElement || nextInternalIndex == 0)\r\n                {\r\n                    self._values[len - 1] = currentValue;\r\n                    self._values[len++] = values[i];\r\n                    nextInternalIndex = 1;\r\n\r\n                    currentValue = values[i];\r\n                }\r\n                else\r\n                {\r\n                    currentValue += values[i] << (nextInternalIndex++ * bitsInValue);\r\n                }\r\n\r\n                returnIndexes[i] = (len - 1) * valuesInElement + nextInternalIndex - 1;\r\n            }\r\n\r\n            self._values[len - 1] = currentValue;\r\n        }\r\n\r\n        self._nextInternalIndex = uint64(nextInternalIndex);\r\n        self._len = uint64(len);\r\n\r\n        return returnIndexes;\r\n    }\r\n\r\n    function get(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 index) internal view returns(uint256) {\r\n        unchecked\r\n        {\r\n            if (self._len == 0 || index >= (self._len - 1) * valuesInElement + self._nextInternalIndex) {\r\n                revert OutOfBounds();\r\n            }\r\n\r\n            uint256 arrIndex = index / valuesInElement;\r\n            uint256 internalIndex = index % valuesInElement;\r\n            uint256 number = self._values[arrIndex];\r\n\r\n            if (internalIndex < valuesInElement - 1) {\r\n                number = number >> internalIndex * bitsInValue;\r\n                return number - ((number >> bitsInValue) << bitsInValue);\r\n            }\r\n            else {\r\n                return number >> internalIndex * bitsInValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    function edit(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 index, uint256 value) internal {\r\n        unchecked\r\n        {\r\n            if (self._len == 0 || index >= (self._len - 1) * valuesInElement + self._nextInternalIndex) {\r\n                revert OutOfBounds();\r\n            }\r\n\r\n            _edit(self, valuesInElement, bitsInValue, index, value);\r\n        }\r\n    }\r\n\r\n    function editMany(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256[] memory indexes, uint256[] memory values) internal {\r\n        uint256 len = self._len;\r\n        uint256 editLen = indexes.length;\r\n\r\n        if (editLen != values.length) {\r\n            revert UnevenEdit();\r\n        }\r\n\r\n        if (len == 0) {\r\n            revert OutOfBounds();\r\n        }\r\n        \r\n        unchecked {\r\n            uint256 trueLen = (len - 1) * valuesInElement + self._nextInternalIndex;\r\n\r\n            for (uint256 i = 0; i < editLen; ++i) {\r\n                uint256 index = indexes[i];\r\n                uint256 value = values[i];\r\n            \r\n                if (index >= trueLen) {\r\n                    revert OutOfBounds();\r\n                }\r\n\r\n                _edit(self, valuesInElement, bitsInValue, index, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _edit(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 index, uint256 value) private {\r\n        unchecked {\r\n            uint256 arrIndex = index / valuesInElement;\r\n            uint256 internalIndex = index % valuesInElement;\r\n            uint256 number = self._values[arrIndex];\r\n            uint256 shift = internalIndex * bitsInValue;\r\n\r\n            if (internalIndex < valuesInElement - 1) {\r\n                number = number >> shift;\r\n                uint256 oldValue = number - ((number >> bitsInValue) << bitsInValue);\r\n\r\n                self._values[arrIndex] = self._values[arrIndex] - (oldValue << shift) + (value << shift);\r\n            }\r\n            else {\r\n                self._values[arrIndex] = self._values[arrIndex] - (number >> shift << shift) + (value << shift);\r\n            }\r\n        }\r\n    }\r\n\r\n    function pop(Data storage self, uint256 valuesInElement, uint256 bitsInValue) internal returns(uint256) {\r\n        unchecked\r\n        {\r\n            if (self._len == 0) {\r\n                revert OutOfBounds();\r\n            }\r\n\r\n            uint256 arrIndex = self._len - 1;\r\n            uint256 internalIndex = self._nextInternalIndex - 1;\r\n            uint256 number = self._values[arrIndex];\r\n            uint256 shift = internalIndex * bitsInValue;\r\n            uint256 oldValue = number >> shift;\r\n\r\n            number -= oldValue << shift;\r\n\r\n            if (internalIndex == 0) {\r\n                self._nextInternalIndex = uint64(valuesInElement);\r\n                --self._len;\r\n            }\r\n            else {\r\n                --self._nextInternalIndex;\r\n                self._values[arrIndex] = number;\r\n            }\r\n\r\n            return oldValue;\r\n        }\r\n    }\r\n\r\n    function popMany(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 amount) internal returns(uint256[] memory) {\r\n        uint256 nextInternalIndex = self._nextInternalIndex;\r\n        uint256 len = self._len;\r\n\r\n        unchecked {\r\n            if (len == 0 || amount > (len - 1) * valuesInElement + self._nextInternalIndex) {\r\n                revert OutOfBounds();\r\n            }\r\n        }\r\n\r\n        uint256[] memory returnValues = new uint256[](amount);\r\n        unchecked {\r\n            uint256 number = self._values[len - 1];\r\n            for (uint256 i = 0; i < amount; ++i) {\r\n                uint256 shift = (nextInternalIndex - 1) * bitsInValue;\r\n                uint256 oldValue = number >> shift;\r\n\r\n                number -= oldValue << shift;\r\n\r\n                if (nextInternalIndex == 1) {\r\n                    nextInternalIndex = uint128(valuesInElement);\r\n                    --len;\r\n\r\n                    number = self._values[len - 1];\r\n                }\r\n                else {\r\n                    --nextInternalIndex;\r\n                }\r\n\r\n                returnValues[i] = oldValue;\r\n            }\r\n\r\n            if (len > 0) {\r\n                self._values[len - 1] = number;\r\n            }\r\n        }\r\n\r\n        self._nextInternalIndex = uint64(nextInternalIndex);\r\n        self._len = uint64(len);\r\n\r\n        return returnValues;\r\n    }\r\n\r\n    function pull(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 index) internal returns(uint256) {\r\n        uint256 len = self._len;\r\n        if (len == 0) {\r\n            revert OutOfBounds();\r\n        }\r\n        \r\n        unchecked\r\n        {\r\n            uint256 lastIndex = (len - 1) * valuesInElement + self._nextInternalIndex - 1;\r\n\r\n            if (index == lastIndex) {\r\n                return pop(self, valuesInElement, bitsInValue);\r\n            }\r\n\r\n            return _pull(self, valuesInElement, bitsInValue, index);\r\n        }\r\n    }\r\n\r\n    function pullFront(Data storage self, uint256 valuesInElement, uint256 bitsInValue) internal returns(uint256) {\r\n        uint256 len = self._len;\r\n        if (len == 0) {\r\n            revert OutOfBounds();\r\n        }\r\n        \r\n        unchecked\r\n        {\r\n            uint256 lastIndex = (len - 1) * valuesInElement + self._nextInternalIndex - 1;\r\n            uint256 index = _nextPullFrontIndex(self, uint64(lastIndex));\r\n\r\n            if (index == lastIndex) {\r\n                return pop(self, valuesInElement, bitsInValue);\r\n            }\r\n\r\n            return _pull(self, valuesInElement, bitsInValue, index);\r\n        }\r\n    }\r\n\r\n    function pullFrontMany(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 amount) internal returns(uint256[] memory) {\r\n        uint256 len = self._len;\r\n        if (len == 0) {\r\n            revert OutOfBounds();\r\n        }\r\n        \r\n        uint256[] memory returnValues = new uint256[](amount);\r\n        unchecked\r\n        {\r\n            uint256 lastIndex = (len - 1) * valuesInElement + self._nextInternalIndex - 1;\r\n\r\n            if (amount > lastIndex + 1) {\r\n                revert OutOfBounds();\r\n            }\r\n\r\n            for (uint256 i = 0; i < amount; ++i) {\r\n                uint256 index = _nextPullFrontIndex(self, uint64(lastIndex));\r\n\r\n                if (index == lastIndex) {\r\n                    returnValues[i] = pop(self, valuesInElement, bitsInValue);\r\n                    --lastIndex;\r\n                    continue;\r\n                }\r\n\r\n                returnValues[i] = _pull(self, valuesInElement, bitsInValue, index);\r\n                --lastIndex;\r\n            }\r\n\r\n            return returnValues;\r\n        }\r\n    }\r\n\r\n    function _nextPullFrontIndex(Data storage self, uint64 lastIndex) private returns(uint256) {\r\n        unchecked {\r\n            uint64 index = self._popFrontIndex;\r\n            if (self._popFrontSign == 1) {\r\n                if (index < lastIndex) {\r\n                    ++index;\r\n                }\r\n                else {\r\n                    self._popFrontSign = 0;\r\n                    index = lastIndex;\r\n                }\r\n            }\r\n            else {\r\n                if (index > 0) {\r\n                    --index;\r\n                }\r\n                else {\r\n                    self._popFrontSign = 1;\r\n                    index = 0;\r\n                }\r\n            }\r\n\r\n            self._popFrontIndex = index;\r\n\r\n            return index;\r\n        }\r\n    }\r\n\r\n    function _pull(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 index) private returns(uint256) {\r\n        unchecked {\r\n            uint256 arrIndex = index / valuesInElement;\r\n            uint256 internalIndex = index % valuesInElement;\r\n\r\n            uint256 number = self._values[arrIndex];\r\n            uint256 shift = internalIndex * bitsInValue;\r\n            uint256 lastValue = pop(self, valuesInElement, bitsInValue);\r\n\r\n            uint256 oldValue;\r\n            if (internalIndex < valuesInElement - 1) {\r\n                number = number >> shift;\r\n                oldValue = number - ((number >> bitsInValue) << bitsInValue);\r\n            }\r\n            else {\r\n                oldValue = number >> shift;\r\n            }\r\n\r\n            self._values[arrIndex] = self._values[arrIndex] - (oldValue << shift) + (lastValue << shift);\r\n\r\n            return oldValue;\r\n        }\r\n    }\r\n\r\n    function length(Data storage self, uint256 valuesInElement) internal view returns(uint256) {\r\n        unchecked {\r\n            if (self._len == 0) {\r\n                return 0;\r\n            }\r\n\r\n            return (self._len - 1) * valuesInElement + self._nextInternalIndex;\r\n        }\r\n    }\r\n    \r\n    function getBulk(Data storage self, uint256 valuesInElement, uint256 bitsInValue, uint256 indexFrom, uint256 indexTo) internal view returns(uint256[] memory) {\r\n        if (indexFrom > indexTo || indexFrom > 2 ** 32 || indexTo > 2 ** 32) {\r\n            revert InsaneBulk();\r\n        }\r\n\r\n        unchecked\r\n        {\r\n            uint256 len = indexTo - indexFrom + 1;\r\n\r\n            if (self._len == 0 || indexFrom + len - 1 >= (self._len - 1) * valuesInElement + self._nextInternalIndex) {\r\n                revert OutOfBounds();\r\n            }\r\n\r\n            uint256[] memory result = new uint256[](len);\r\n\r\n            uint256 arrIndex = indexFrom / valuesInElement;\r\n            uint256 internalIndex = indexFrom % valuesInElement;\r\n            uint256 number = self._values[arrIndex];\r\n\r\n            uint256 counterIndex;\r\n            while (counterIndex < len) {\r\n                if (internalIndex < valuesInElement - 1) {\r\n                    uint256 temp = number >> internalIndex * bitsInValue;\r\n                    result[counterIndex] = temp - ((temp >> bitsInValue) << bitsInValue);\r\n\r\n                    ++internalIndex;\r\n                }\r\n                else {\r\n                    result[counterIndex] = number >> internalIndex * bitsInValue;\r\n\r\n                    ++arrIndex;\r\n                    internalIndex = 0;\r\n                    number = self._values[arrIndex];\r\n                }\r\n\r\n                ++counterIndex;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getWhole(Data storage self, uint256 index) internal view returns(uint256) {\r\n        return self._values[index];\r\n    }\r\n}\r\n\r\nabstract contract ERC404XStorage {\r\n    using Packer for Packer.Data;\r\n\r\n    uint256 public immutable bIV;\r\n    uint256 public immutable vIE;\r\n\r\n    /// @dev Array of owned ids in native representation\r\n    mapping(address => Packer.Data) public _owned;\r\n\r\n    /// @dev Tracks indices for the _owned mapping\r\n    Packer.Data internal _ownedIndex;\r\n\r\n    Packer.Data public _burned;\r\n\r\n    /// @dev Addresses whitelisted from minting / burning for gas savings (pairs, routers, etc)\r\n    mapping(address => uint256) internal _erc721TransferExempt;\r\n\r\n    constructor(uint256 _max) {\r\n        uint256 _bitsInValue = Math.log2(_max + 1);\r\n        if (2 ** _bitsInValue < _max + 1) {\r\n            ++_bitsInValue;\r\n        }\r\n\r\n        require(_bitsInValue > 0 && _bitsInValue <= 18, \"ERC404X: 18 bits is a hard maximum, 15 bits is a recommended maximum\");\r\n\r\n        bIV = _bitsInValue;\r\n        vIE = 256 / _bitsInValue;\r\n\r\n        _ownedIndex.push(vIE, bIV, 0);\r\n    }\r\n\r\n    function getOwned(address account, uint256 indexFrom, uint256 indexTo) external view returns(uint256[] memory) {\r\n        uint256 len = _owned[account].length(vIE);\r\n        if (len == 0) {\r\n            return new uint256[](1);\r\n        }\r\n\r\n        if (_erc721TransferExempt[account] == 1) {\r\n            if (indexFrom >= len) {\r\n                return new uint256[](1);\r\n            }\r\n            \r\n            unchecked {\r\n                if (indexTo >= len) {\r\n                    indexTo = len - 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return _owned[account].getBulk(vIE, bIV, indexFrom, indexTo);\r\n    }\r\n\r\n    function getAllOwned(address account) external view returns(uint256[] memory) {\r\n        uint256 len = _owned[account].length(vIE);\r\n        if (len == 0) {\r\n            return new uint256[](1);\r\n        }\r\n\r\n        unchecked {\r\n            return _owned[account].getBulk(vIE, bIV, 0, len - 1);\r\n        }\r\n    }\r\n\r\n    function getBurned(uint256 indexFrom, uint256 indexTo) external view returns(uint256[] memory) {\r\n        uint256 len = _burned.length(vIE);\r\n        if (len == 0) {\r\n            return new uint256[](1);\r\n        }\r\n\r\n        if (indexFrom >= len) {\r\n            return new uint256[](1);\r\n        }\r\n        \r\n        unchecked {\r\n            if (indexTo >= len) {\r\n                indexTo = len - 1;\r\n            }\r\n        }\r\n\r\n        return _burned.getBulk(vIE, bIV, indexFrom, indexTo);\r\n    }\r\n\r\n    function getAllBurned() external view returns(uint256[] memory) {\r\n        uint256 len = _burned.length(vIE);\r\n        if (len == 0) {\r\n            return new uint256[](1);\r\n        }\r\n        \r\n        unchecked {\r\n            return _burned.getBulk(vIE, bIV, 0, len - 1);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @notice ERC404X\r\n///         A gas-efficient, mixed ERC20 / ERC721 implementation\r\n///         with native liquidity and fractionalization.\r\n///\r\n///         An upgraded iteration of ERC404 for increased gas efficiency and built-in reshuffler.\r\n///\r\n/// @dev    In order to support full functionality of ERC20 and ERC721\r\n///         supply assumptions are made that slightly constraint usage.\r\n///         Ensure decimals are sufficiently large (standard 18 recommended)\r\n///         as ids are effectively encoded in the lowest range of amounts.\r\n///\r\n///         NFTs are spent on ERC20 functions in a FILO queue, this is by\r\n///         design.\r\n///\r\nabstract contract ERC404X is ERC165, IERC721, IERC721Metadata, IERC721Enumerable, Ownable, ERC404XStorage {\r\n    using Packer for Packer.Data;\r\n\r\n    // Events\r\n    event ERC20Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n    event ERC721Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 indexed id\r\n    );\r\n\r\n    // Errors\r\n    error NotFound();\r\n    error AlreadyExists();\r\n    error InvalidRecipient();\r\n    error InvalidSender();\r\n    error UnsafeRecipient();\r\n\r\n    // Metadata\r\n    /// @dev Token name\r\n    string public name;\r\n\r\n    /// @dev Token symbol\r\n    string public symbol;\r\n\r\n    /// @dev Decimals for fractional representation\r\n    uint8 public immutable decimals;\r\n\r\n    /// @dev Total supply in fractionalized representation\r\n    uint256 public immutable totalSupply;\r\n\r\n    /// @dev Current mint counter, monotonically increasing to ensure accurate ownership\r\n    uint256 public minted;\r\n\r\n    // Mappings\r\n    /// @dev Balance of user in fractional representation\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    /// @dev Allowance of user in fractional representation\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /// @dev Approval in native representaion\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    /// @dev Approval for all in native representation\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /// @dev Owner of id in native representation\r\n    mapping(uint256 => address) internal _ownerOf;\r\n\r\n    mapping(uint256 => uint256) private _reshuffleTempAlreadyEdited;\r\n    mapping(uint256 => uint256) private _reshuffleTempNotEditedYet;\r\n\r\n    uint256 immutable unit;\r\n\r\n    // Constructor\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalNativeSupply,\r\n        address _owner\r\n    ) Ownable(_owner) ERC404XStorage(_totalNativeSupply) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalNativeSupply * (10 ** decimals);\r\n\r\n        balanceOf[_owner] = totalSupply;\r\n\r\n        _erc721TransferExempt[_owner] = 1;\r\n\r\n        unit = 10 ** decimals;\r\n    }\r\n\r\n    /// @notice Initialization function to set pairs / etc\r\n    ///         saving gas by avoiding mint / burn on unnecessary targets\r\n    function setERC721TransferExempt(address target, bool state) public onlyOwner {\r\n        _erc721TransferExempt[target] = state ? 1 : 0;\r\n    }\r\n\r\n    function erc721TransferExempt(address target) public view returns(bool) {\r\n        return _erc721TransferExempt[target] == 1 ? true : false;\r\n    }\r\n\r\n    /// @notice Function to find owner of a given native token\r\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\r\n        owner = _ownerOf[id];\r\n\r\n        if (owner == address(0x0) || owner == address(0x1)) {\r\n            revert NotFound();\r\n        }\r\n    }\r\n\r\n    /// @notice tokenURI must be implemented by child contract\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /// @notice Function for token approvals\r\n    /// @dev This function assumes id / native if amount less than or equal to current max id\r\n    function approve(\r\n        address spender,\r\n        uint256 amountOrId\r\n    ) public virtual {\r\n        if (amountOrId <= minted && amountOrId > 0) {\r\n            address owner = _ownerOf[amountOrId];\r\n\r\n            if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\r\n                revert Unauthorized();\r\n            }\r\n\r\n            getApproved[amountOrId] = spender;\r\n\r\n            emit Approval(owner, spender, amountOrId);\r\n        } else {\r\n            allowance[msg.sender][spender] = amountOrId;\r\n\r\n            emit Approval(msg.sender, spender, amountOrId);\r\n        }\r\n    }\r\n\r\n    /// @notice Function native approvals\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    /// @notice Function for mixed transfers\r\n    /// @dev This function assumes id / native if amount less than or equal to current max id\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amountOrId\r\n    ) public virtual {\r\n        if (amountOrId <= minted) {\r\n            if (from != _ownerOf[amountOrId]) {\r\n                revert InvalidSender();\r\n            }\r\n\r\n            if (to == address(0x0) || to == address(0x1)) {\r\n                revert InvalidRecipient();\r\n            }\r\n\r\n            if (\r\n                msg.sender != from &&\r\n                !isApprovedForAll[from][msg.sender] &&\r\n                msg.sender != getApproved[amountOrId]\r\n            ) {\r\n                revert Unauthorized();\r\n            }\r\n\r\n            balanceOf[from] -= unit;\r\n\r\n            unchecked {\r\n                balanceOf[to] += unit;\r\n            }\r\n\r\n            _ownerOf[amountOrId] = to;\r\n            delete getApproved[amountOrId];\r\n\r\n            uint256 originalOwnedIndex = _ownedIndex.get(vIE, bIV, amountOrId);\r\n\r\n            uint256 updatedId = _owned[from].pull(vIE, bIV, originalOwnedIndex);\r\n            uint256 pushedIndex = _owned[to].push(vIE, bIV, amountOrId);\r\n\r\n            _ownedIndex.edit(vIE, bIV, updatedId, originalOwnedIndex);\r\n            _ownedIndex.edit(vIE, bIV, amountOrId, pushedIndex);\r\n\r\n            emit Transfer(from, to, amountOrId);\r\n            emit ERC20Transfer(from, to, unit);\r\n        } else {\r\n            uint256 allowed = allowance[from][msg.sender];\r\n\r\n            if (allowed != type(uint256).max)\r\n                allowance[from][msg.sender] = allowed - amountOrId;\r\n\r\n            _transfer(from, to, amountOrId);\r\n        }\r\n    }\r\n\r\n    /// @notice Function for fractional transfers\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        return _transfer(msg.sender, to, amount);\r\n    }\r\n\r\n    /// @notice Function for native transfers with contract support\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (\r\n            to.code.length != 0 &&\r\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, \"\") !=\r\n            ERC721Receiver.onERC721Received.selector\r\n        ) {\r\n            revert UnsafeRecipient();\r\n        }\r\n    }\r\n\r\n    /// @notice Function for native transfers with contract support and callback data\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        if (\r\n            to.code.length != 0 &&\r\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, data) !=\r\n            ERC721Receiver.onERC721Received.selector\r\n        ) {\r\n            revert UnsafeRecipient();\r\n        }\r\n    }\r\n\r\n    /// @notice Internal function for fractional transfers\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (to == address(0x0) || to == address(0x1)) {\r\n            revert InvalidRecipient();\r\n        }\r\n\r\n        uint256 balanceBeforeSender = balanceOf[from];\r\n        uint256 balanceBeforeReceiver = balanceOf[to];\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        uint256 toBurn = (balanceBeforeSender / unit) - (balanceOf[from] / unit);\r\n        uint256 toMint = (balanceOf[to] / unit) - (balanceBeforeReceiver / unit);\r\n\r\n        // if the address was unwhitelisted and has less NFTs to burn than its floored ERC-20 balance\r\n        if (_erc721TransferExempt[from] == 0) {\r\n            uint256 fromLen = _owned[from].length(vIE);\r\n            if (fromLen < toBurn) {\r\n                bulkMint(fromLen - toBurn, to);              \r\n            }\r\n        }\r\n\r\n        if (_erc721TransferExempt[from] == 0 && _erc721TransferExempt[to] == 0) {\r\n            uint256 toTransfer = Math.min(toBurn, toMint);\r\n            bulkTransfer(toTransfer, from, to);\r\n\r\n            if (toBurn > toMint) {\r\n                _burn(from);\r\n            }\r\n            else if (toMint > toBurn) {\r\n                _mint(to);\r\n            }\r\n        }\r\n        else if (_erc721TransferExempt[from] == 1 && _erc721TransferExempt[to] == 0) {\r\n            // if the address is whitelisted but has tokens, treat it as a regular transfer\r\n            uint256 fromLen = _owned[from].length(vIE);\r\n            if (fromLen > 0) {\r\n                toBurn = Math.min(toBurn, fromLen);\r\n                uint256 toTransfer = Math.min(toBurn, toMint);\r\n                bulkTransfer(toTransfer, from, to);\r\n                \r\n                if (toMint >= toTransfer) {\r\n                    toMint -= toTransfer;\r\n                }\r\n                else {\r\n                    toMint = 0;\r\n                }\r\n\r\n                if (toBurn > toTransfer) {\r\n                    _burn(from);\r\n                }\r\n            }\r\n\r\n            bulkMint(toMint, to);\r\n        }\r\n        else if (_erc721TransferExempt[from] == 0 && _erc721TransferExempt[to] == 1) {\r\n            bulkBurn(toBurn, from);\r\n        }\r\n\r\n        emit ERC20Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function bulkTransfer(uint256 toTransfer, address from, address to) internal virtual {\r\n        if (toTransfer == 1) {\r\n            uint256 id = _owned[from].pop(vIE, bIV);\r\n            uint256 pushedIndex = _owned[to].push(vIE, bIV, id);\r\n\r\n            _ownerOf[id] = to;\r\n            _ownedIndex.edit(vIE, bIV, id, pushedIndex);\r\n            delete getApproved[id];\r\n\r\n            emit Transfer(from, to, id);\r\n        }\r\n        else if (toTransfer > 0) {\r\n            uint256[] memory ids = _owned[from].popMany(vIE, bIV, toTransfer);\r\n            uint256[] memory indexes = _owned[to].pushMany(vIE, bIV, ids);\r\n\r\n            _ownedIndex.editMany(vIE, bIV, ids, indexes);\r\n\r\n            unchecked {\r\n                for (uint256 i = 0; i < toTransfer; ++i) {\r\n                    uint256 id = ids[i];\r\n\r\n                    _ownerOf[id] = to;\r\n                    delete getApproved[id];\r\n\r\n                    emit Transfer(from, to, id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function bulkMint(uint256 toMint, address to) internal virtual {\r\n        if (toMint == 1) {\r\n            _mint(to);\r\n        }\r\n        else if (toMint > 0) {\r\n            unchecked {\r\n                if (minted < totalSupply / unit) {\r\n                    for (uint256 i = 0; i < toMint; ++i) {\r\n                        _mint(to);\r\n                    }\r\n                }\r\n                else {\r\n                    uint256[] memory ids = _burned.pullFrontMany(vIE, bIV, toMint);\r\n                    uint256[] memory indexes = _owned[to].pushMany(vIE, bIV, ids);\r\n\r\n                    _ownedIndex.editMany(vIE, bIV, ids, indexes);\r\n\r\n                    for (uint256 i = 0; i < toMint; ++i) {\r\n                        uint256 id = ids[i];\r\n\r\n                        _ownerOf[id] = to;\r\n\r\n                        emit Transfer(address(0x1), to, id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _mint(address to) internal virtual {\r\n        uint256 id;\r\n        if (minted < totalSupply / unit) {\r\n            id = ++minted;\r\n            _ownedIndex.push(vIE, bIV, _owned[to].push(vIE, bIV, id));\r\n\r\n             emit Transfer(_ownerOf[id], to, id);\r\n        }\r\n        else {\r\n            id = _burned.pullFront(vIE, bIV);\r\n            _ownedIndex.edit(vIE, bIV, id, _owned[to].push(vIE, bIV, id));\r\n\r\n            emit Transfer(address(0x1), to, id);\r\n        }\r\n\r\n        _ownerOf[id] = to;\r\n    }\r\n\r\n    function bulkBurn(uint256 toBurn, address from) internal virtual {\r\n        if (toBurn == 1) {\r\n            _burn(from);\r\n        }\r\n        else if (toBurn > 0) {\r\n            uint256[] memory ids = _owned[from].popMany(vIE, bIV, toBurn);\r\n            _burned.pushMany(vIE, bIV, ids);\r\n\r\n            unchecked {\r\n                for (uint256 i = 0; i < toBurn; ++i) {\r\n                    uint256 id = ids[i];\r\n\r\n                    _ownerOf[id] = address(0x1);\r\n                    delete getApproved[id];\r\n\r\n                    emit Transfer(from, address(0x1), id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burn(address from) internal virtual {\r\n        uint256 id = _owned[from].pop(vIE, bIV);\r\n\r\n        _burned.push(vIE, bIV, id);\r\n\r\n        _ownerOf[id] = address(0x1);\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, address(0x1), id);\r\n    }\r\n\r\n    function reshuffle(uint256[] memory indexesToEdit, uint256[] memory valuesToPlace, uint256[] memory currentIndexes) public virtual {\r\n        uint256 len = indexesToEdit.length;\r\n        require(len == valuesToPlace.length && len == currentIndexes.length, \"ERC404X: reshuffle input length mismatch\");\r\n\r\n        Packer.Data storage data = _owned[msg.sender];\r\n\r\n        unchecked {\r\n            for (uint256 i = 0; i < len; ++i) {\r\n                require(data.get(vIE, bIV, currentIndexes[i]) == valuesToPlace[i], \"ERC404X: reshuffle input contains wrong value\");\r\n            }\r\n        }\r\n\r\n        uint256 editedLen;\r\n        uint256 notEditedLen;\r\n        unchecked {\r\n            for (uint256 i = 0; i < len; ++i) {\r\n                uint256 indexToEdit = indexesToEdit[i];\r\n                uint256 currentIndex = currentIndexes[i];\r\n\r\n                if (_reshuffleTempNotEditedYet[indexToEdit] == 0) {\r\n                    _reshuffleTempAlreadyEdited[indexToEdit] = 1;\r\n                    ++editedLen;\r\n                }\r\n                else {\r\n                    _reshuffleTempNotEditedYet[indexToEdit] = 0;\r\n                    --notEditedLen;\r\n                }\r\n\r\n                if (_reshuffleTempAlreadyEdited[currentIndex] == 0) {\r\n                    _reshuffleTempNotEditedYet[currentIndex] = 1;\r\n                    ++notEditedLen;\r\n                }\r\n                else {\r\n                    _reshuffleTempAlreadyEdited[currentIndex] = 0;\r\n                    --editedLen;\r\n                }\r\n            }\r\n        }\r\n\r\n        data.editMany(vIE, bIV, indexesToEdit, valuesToPlace);\r\n        _ownedIndex.editMany(vIE, bIV, currentIndexes, indexesToEdit);\r\n\r\n        require(editedLen == 0 && notEditedLen == 0, \"ERC404X: reshuffle input incorrect\");\r\n    }\r\n\r\n    function _setNameSymbol(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) internal {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n    \r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view override returns (uint256) {\r\n        if (_erc721TransferExempt[owner] == 1) {\r\n            if (index >= _owned[owner].length(vIE)) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return _owned[owner].get(vIE, bIV, index);\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) external pure override returns (uint256) {\r\n        index;\r\n        return 0;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\ncontract Pyrrha is ERC404X {\r\n    string public dataURI;\r\n    string public baseTokenURI;\r\n\r\n    constructor() ERC404X(\"Pyrrha\", \"PYRRHA\", 18, 1000, msg.sender) {\r\n        dataURI = \"https://pyrrha.build/pixelated/\";\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function setDataURI(string memory _dataURI) public onlyOwner {\r\n        dataURI = _dataURI;\r\n    }\r\n\r\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\r\n        baseTokenURI = _tokenURI;\r\n    }\r\n\r\n    function setNameSymbol(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) public onlyOwner {\r\n        _setNameSymbol(_name, _symbol);\r\n    }\r\n\r\n    function tokenURI(uint256 id) public view override returns (string memory) {\r\n        if (bytes(baseTokenURI).length > 0) {\r\n            return string.concat(baseTokenURI, Strings.toString(id));\r\n        } else {\r\n            uint256 seed = uint256(keccak256(abi.encodePacked(id + 1))) % 100;\r\n            string memory image;\r\n            string memory _color;\r\n            string memory _shape;\r\n\r\n            if (seed < 25) {\r\n                _color = \"Brown\";\r\n            } else if (seed < 50) {\r\n                _color = \"Yellow\";\r\n            } else if (seed < 75) {\r\n                _color = \"Blue\";\r\n            } else if (seed < 85) {\r\n                _color = \"Green\";\r\n            } else if (seed < 95) {\r\n                _color = \"Purple\";\r\n            } else {\r\n                _color = \"Red\";\r\n            }\r\n\r\n            unchecked {\r\n                seed = uint256(keccak256(abi.encodePacked(seed + id + 1))) % 100;\r\n            }\r\n\r\n            _shape = Strings.toString(seed % 9 + 1);\r\n\r\n            image = string.concat(string.concat(string.concat(_color, '_'), _shape), '.jpg');\r\n\r\n            string memory jsonPreImage = string.concat(\r\n                string.concat(\r\n                    string.concat('{\"name\": \"Pyrrha #', Strings.toString(id)),\r\n                    '\",\"description\":\"A collection of 1000 stones that Pyrrha and Deucalion turned into human creatures. Who knows what these stones can be turned into? Enabled by ERC404X, an experimental variation of ERC404 with improved gas efficiency, persistent IDs and built-in reshuffling.\",\"external_url\":\"https://pyrrha.build\",\"image\":\"'\r\n                ),\r\n                string.concat(dataURI, image)\r\n            );\r\n            string memory jsonPostImage = string.concat(\r\n                '\",\"attributes\":[{\"trait_type\":\"Color\",\"value\":\"',_color\r\n            );\r\n            jsonPostImage = string.concat(jsonPostImage, '\"},{\"trait_type\":\"Shape type\",\"value\":\"',_shape);\r\n            string memory jsonPostTraits = '\"}]}';\r\n\r\n            return\r\n                string.concat(\r\n                    \"data:application/json;utf8,\",\r\n                    string.concat(\r\n                        string.concat(jsonPreImage, jsonPostImage),\r\n                        jsonPostTraits\r\n                    )\r\n                );\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsaneBulk\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnevenEdit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burned\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_popFrontIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_popFrontSign\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nextInternalIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_len\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_owned\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_popFrontIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_popFrontSign\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nextInternalIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_len\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bIV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"erc721TransferExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBurned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllOwned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexTo\",\"type\":\"uint256\"}],\"name\":\"getBurned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexTo\",\"type\":\"uint256\"}],\"name\":\"getOwned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexesToEdit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesToPlace\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentIndexes\",\"type\":\"uint256[]\"}],\"name\":\"reshuffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dataURI\",\"type\":\"string\"}],\"name\":\"setDataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setERC721TransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vIE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Pyrrha", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4dd904d705db6e758eaf6767cb0c317db6f17f95ba39aad4c4d1b56e08e928b3"}