{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Comptroller/LiquityMath.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nlibrary LiquityMath {\\n  using SafeMath for uint;\\n\\n  uint internal constant DECIMAL_PRECISION = 1e18;\\n\\n  /* Precision for Nominal ICR (independent of price). Rationale for the value:\\n   *\\n   * - Making it \u201ctoo high\u201d could lead to overflows.\\n   * - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\n   *\\n   * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\n   * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\n   *\\n   */\\n  uint internal constant NICR_PRECISION = 1e20;\\n\\n  function _min(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a < _b) ? _a : _b;\\n  }\\n\\n  function _max(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a : _b;\\n  }\\n\\n  /*\\n   * Multiply two decimal numbers and use normal rounding rules:\\n   * -round product up if 19'th mantissa digit >= 5\\n   * -round product down if 19'th mantissa digit < 5\\n   *\\n   * Used only inside the exponentiation, _decPow().\\n   */\\n  function decMul(uint x, uint y) internal pure returns (uint decProd) {\\n    uint prod_xy = x.mul(y);\\n\\n    decProd = prod_xy.add(DECIMAL_PRECISION / 2).div(DECIMAL_PRECISION);\\n  }\\n\\n  /*\\n   * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\n   *\\n   * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\n   *\\n   * Called by two functions that represent time in units of minutes:\\n   * 1) TroveManager._calcDecayedBaseRate\\n   * 2) CommunityIssuance._getCumulativeIssuanceFraction\\n   *\\n   * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\n   * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\n   *\\n   * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\n   * negligibly different from just passing the cap, since:\\n   *\\n   * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\n   * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\n   */\\n  function _decPow(uint _base, uint _minutes) internal pure returns (uint) {\\n    if (_minutes > 525600000) {\\n      _minutes = 525600000;\\n    } // cap to avoid overflow\\n\\n    if (_minutes == 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n\\n    uint y = DECIMAL_PRECISION;\\n    uint x = _base;\\n    uint n = _minutes;\\n\\n    // Exponentiation-by-squaring\\n    while (n > 1) {\\n      if (n % 2 == 0) {\\n        x = decMul(x, x);\\n        n = n.div(2);\\n      } else {\\n        // if (n % 2 != 0)\\n        y = decMul(x, y);\\n        x = decMul(x, x);\\n        n = (n.sub(1)).div(2);\\n      }\\n    }\\n\\n    return decMul(x, y);\\n  }\\n\\n  function _getAbsoluteDifference(uint _a, uint _b) internal pure returns (uint) {\\n    return (_a >= _b) ? _a.sub(_b) : _b.sub(_a);\\n  }\\n\\n  function _computeNominalCR(uint _coll, uint _debt) internal pure returns (uint) {\\n    if (_debt > 0) {\\n      return _coll.mul(NICR_PRECISION).div(_debt);\\n    }\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    else {\\n      // if (_debt == 0)\\n      return 2 ** 256 - 1;\\n    }\\n  }\\n\\n  function _computeCR(uint _coll, uint _debt, uint _price) internal pure returns (uint) {\\n    if (_debt > 0) {\\n      uint newCollRatio = _coll.mul(_price).div(_debt);\\n\\n      return newCollRatio;\\n    }\\n    // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\n    else {\\n      // if (_debt == 0)\\n      return 2 ** 256 - 1;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Comptroller/RedemptionManager.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n\\nimport '../Interfaces/IRedemptionManager.sol';\\nimport '../Interfaces/IComptroller.sol';\\nimport './SortedBorrows.sol';\\nimport '../Interfaces/IPriceOracle.sol';\\nimport './LiquityMath.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '../Exponential/ExponentialNoErrorNew.sol';\\nimport '../SumerErrors.sol';\\nimport '../Interfaces/IEIP712.sol';\\n\\ncontract RedemptionManager is\\n  AccessControlEnumerableUpgradeable,\\n  IRedemptionManager,\\n  ExponentialNoErrorNew,\\n  SumerErrors\\n{\\n  // deprecated, leaving to keep storage layout the same\\n  IComptroller public comptroller;\\n\\n  /*\\n   * Half-life of 12h. 12h = 720 min\\n   * (1/2) = d^720 => d = (1/2)^(1/720)\\n   */\\n  uint public constant DECIMAL_PRECISION = 1e18;\\n  uint public constant SECONDS_IN_ONE_MINUTE = 60;\\n  uint public constant MINUTE_DECAY_FACTOR = 999037758833783000;\\n  uint public constant REDEMPTION_FEE_FLOOR = (DECIMAL_PRECISION / 1000) * 5; // 0.5%\\n  uint public constant MAX_BORROWING_FEE = (DECIMAL_PRECISION / 100) * 5; // 5%\\n\\n  /*\\n   * BETA: 18 digit decimal. Parameter by which to divide the redeemed fraction, in order to calc the new base rate from a redemption.\\n   * Corresponds to (1 / ALPHA) in the white paper.\\n   */\\n  uint public constant BETA = 2;\\n\\n  // deprecated field\\n  // leave it here for compatibility for storage layout\\n  uint public baseRate;\\n\\n  // deprecated field\\n  // leave it here for compatibility for storage layout\\n  // The timestamp of the latest fee operation (redemption or new LUSD issuance)\\n  uint public lastFeeOperationTime;\\n\\n  mapping(address => uint) public baseRateMap;\\n\\n  // The timestamp of the latest fee operation (redemption or new LUSD issuance)\\n  mapping(address => uint) public lastFeeOperationTimeMap;\\n\\n  address public redemptionSigner;\\n\\n  event BaseRateUpdated(address asset, uint _baseRate);\\n  event LastFeeOpTimeUpdated(address asset, uint256 timestamp);\\n  event NewComptroller(address oldComptroller, address newComptroller);\\n  event NewRedemptionSigner(address oldSigner, address newSigner);\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _admin, address _redemptionSigner) external initializer {\\n    redemptionSigner = _redemptionSigner;\\n    emit NewRedemptionSigner(address(0), redemptionSigner);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n  }\\n\\n  function setComptroller(IComptroller _comptroller) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (!_comptroller.isComptroller()) {\\n      revert InvalidComptroller();\\n    }\\n    address oldComptroller = address(comptroller);\\n    comptroller = _comptroller;\\n    emit NewComptroller(oldComptroller, address(comptroller));\\n  }\\n\\n  function setRedemptionSigner(address signer) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    address oldSigner = redemptionSigner;\\n    if (signer == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    redemptionSigner = signer;\\n    emit NewRedemptionSigner(oldSigner, redemptionSigner);\\n  }\\n\\n  // function setSortedBorrows(ISortedBorrows _sortedBorrows) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n  //   require(sortedBorrows.isSortedBorrows(), 'invalid sorted borrows');\\n  //   sortedBorrows = _sortedBorrows;\\n  // }\\n\\n  /*\\n   * This function has two impacts on the baseRate state variable:\\n   * 1) decays the baseRate based on time passed since last redemption or LUSD borrowing operation.\\n   * then,\\n   * 2) increases the baseRate based on the amount redeemed, as a proportion of total supply\\n   */\\n  function updateBaseRateFromRedemption(address asset, uint redeemAmount, uint _totalSupply) internal returns (uint) {\\n    uint newBaseRate = _calcNewBaseRate(asset, redeemAmount, _totalSupply);\\n    _updateBaseRate(asset, newBaseRate);\\n    _updateLastFeeOpTime(asset);\\n\\n    return newBaseRate;\\n  }\\n\\n  function _minutesPassedSinceLastFeeOp(address asset) internal view returns (uint) {\\n    return (block.timestamp - lastFeeOperationTimeMap[asset]) / SECONDS_IN_ONE_MINUTE;\\n  }\\n\\n  function getCurrentRedemptionRate(address asset, uint redeemAmount, uint _totalSupply) public view returns (uint) {\\n    return _calcRedemptionRate(_calcNewBaseRate(asset, redeemAmount, _totalSupply));\\n  }\\n\\n  function _calcNewBaseRate(address asset, uint redeemAmount, uint _totalSupply) internal view returns (uint) {\\n    if (_totalSupply <= 0) {\\n      return DECIMAL_PRECISION;\\n    }\\n    // require(msg.sender == address(comptroller), 'only comptroller');\\n    uint decayedBaseRate = _calcDecayedBaseRate(asset);\\n\\n    /* Convert the drawn ETH back to LUSD at face value rate (1 LUSD:1 USD), in order to get\\n     * the fraction of total supply that was redeemed at face value. */\\n    uint redeemedLUSDFraction = (redeemAmount * DECIMAL_PRECISION) / _totalSupply;\\n\\n    uint newBaseRate = decayedBaseRate + (redeemedLUSDFraction / BETA);\\n    newBaseRate = LiquityMath._min(newBaseRate, DECIMAL_PRECISION); // cap baseRate at a maximum of 100%\\n    //assert(newBaseRate <= DECIMAL_PRECISION); // This is already enforced in the line above\\n    assert(newBaseRate > 0); // Base rate is always non-zero after redemption\\n    return newBaseRate;\\n  }\\n\\n  function _calcDecayedBaseRate(address asset) internal view returns (uint) {\\n    uint minutesPassed = _minutesPassedSinceLastFeeOp(asset);\\n    uint decayFactor = LiquityMath._decPow(MINUTE_DECAY_FACTOR, minutesPassed);\\n\\n    return (baseRateMap[asset] * decayFactor) / DECIMAL_PRECISION;\\n  }\\n\\n  // function _getRedemptionFee(uint _ETHDrawn) internal view returns (uint) {\\n  //   return _calcRedemptionFee(getRedemptionRate(), _ETHDrawn);\\n  // }\\n\\n  function getRedemptionRate(address asset) public view returns (uint) {\\n    return _calcRedemptionRate(baseRateMap[asset]);\\n  }\\n\\n  function _calcRedemptionRate(uint _baseRate) internal pure returns (uint) {\\n    return\\n      LiquityMath._min(\\n        REDEMPTION_FEE_FLOOR + _baseRate,\\n        DECIMAL_PRECISION // cap at a maximum of 100%\\n      );\\n  }\\n\\n  function calcActualRepayAndSeize(\\n    uint256 redeemAmount,\\n    address provider,\\n    address cToken,\\n    address csuToken\\n  ) public returns (uint256, uint256, uint256, uint256) {\\n    ICToken(cToken).accrueInterest();\\n    ICToken(csuToken).accrueInterest();\\n\\n    (uint256 depositBalance, , uint256 cExRateMantissa, ) = ICToken(cToken).getAccountSnapshot(provider);\\n\\n    if (depositBalance <= 0) {\\n      return (0, 0, 0, 0);\\n    }\\n\\n    uint256 borrowBalance = ICToken(csuToken).borrowBalanceCurrent(provider);\\n    if (borrowBalance <= 0) {\\n      return (0, 0, 0, 0);\\n    }\\n\\n    uint256 cash = ICToken(cToken).getCash();\\n    if (cash <= 0) {\\n      return (0, 0, 0, 0);\\n    }\\n\\n    // get price for csuToken\\n    uint256 suPriceMantissa = comptroller.getUnderlyingPriceNormalized(csuToken);\\n\\n    // get price for cToken\\n    uint256 cPriceMantissa = comptroller.getUnderlyingPriceNormalized(cToken);\\n\\n    uint256 providerCollateralVal = (cPriceMantissa * depositBalance * cExRateMantissa) / expScale;\\n    uint256 providerLiabilityVal = (suPriceMantissa * borrowBalance);\\n    uint256 maxRepayable = LiquityMath._min(providerCollateralVal, providerLiabilityVal) / suPriceMantissa;\\n    uint256 actualRepay = 0;\\n    uint256 actualSeize = 0;\\n    if (redeemAmount <= maxRepayable) {\\n      actualRepay = redeemAmount;\\n      actualSeize = (suPriceMantissa * redeemAmount * expScale) / cPriceMantissa / cExRateMantissa;\\n    } else {\\n      actualRepay = maxRepayable;\\n      if (providerCollateralVal <= providerLiabilityVal) {\\n        actualSeize = depositBalance;\\n      } else {\\n        actualSeize = (providerLiabilityVal * expScale) / cPriceMantissa / cExRateMantissa;\\n      }\\n    }\\n\\n    uint256 maxSeize = (cash * expScale) / cExRateMantissa;\\n    // if there's not enough cash, re-calibrate repay/seize\\n    if (maxSeize < actualSeize) {\\n      actualSeize = maxSeize;\\n      actualRepay = (cPriceMantissa * actualSeize * cExRateMantissa) / suPriceMantissa / expScale;\\n    }\\n\\n    return (actualRepay, actualSeize, suPriceMantissa, cPriceMantissa);\\n  }\\n\\n  // function hasNoProvider(address _asset) external view returns (bool) {\\n  //   return sortedBorrows.isEmpty(_asset);\\n  // }\\n\\n  // function getFirstProvider(address _asset) external view returns (address) {\\n  //   return sortedBorrows.getFirst(_asset);\\n  // }\\n\\n  // function getNextProvider(address _asset, address _id) external view returns (address) {\\n  //   return sortedBorrows.getNext(_asset, _id);\\n  // }\\n\\n  // Updates the baseRate state variable based on time elapsed since the last redemption or LUSD borrowing operation.\\n  function decayBaseRateFromBorrowing(address asset) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    uint decayedBaseRate = _calcDecayedBaseRate(asset);\\n    assert(decayedBaseRate <= DECIMAL_PRECISION); // The baseRate can decay to 0\\n\\n    baseRateMap[asset] = decayedBaseRate;\\n    emit BaseRateUpdated(asset, decayedBaseRate);\\n\\n    _updateLastFeeOpTime(asset);\\n  }\\n\\n  function _updateBaseRate(address asset, uint newBaseRate) internal {\\n    // Update the baseRate state variable\\n    baseRateMap[asset] = newBaseRate;\\n    emit BaseRateUpdated(asset, newBaseRate);\\n  }\\n\\n  // Update the last fee operation time only if time passed >= decay interval. This prevents base rate griefing.\\n  function _updateLastFeeOpTime(address asset) internal {\\n    uint timePassed = block.timestamp - lastFeeOperationTimeMap[asset];\\n\\n    if (timePassed >= SECONDS_IN_ONE_MINUTE) {\\n      lastFeeOperationTimeMap[asset] = block.timestamp;\\n      emit LastFeeOpTimeUpdated(asset, block.timestamp);\\n    }\\n  }\\n\\n  function redeemFaceValueWithProviderPreview(\\n    address redeemer,\\n    address provider,\\n    address cToken,\\n    address csuToken,\\n    uint256 redeemAmount,\\n    uint256 redemptionRateMantissa\\n  ) external returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n    if (redeemer == provider) {\\n      return (0, 0, 0, 0, 0, 0);\\n    }\\n\\n    (uint256 actualRepay, uint256 actualSeize, uint256 repayPrice, uint256 seizePrice) = calcActualRepayAndSeize(\\n      redeemAmount,\\n      provider,\\n      cToken,\\n      csuToken\\n    );\\n    if (actualRepay <= 0 || actualSeize <= 0) {\\n      return (0, 0, 0, repayPrice, seizePrice, 0);\\n    }\\n    // uint256 redemptionRateMantissa = getCurrentRedemptionRate(csuToken, actualRepay, ICToken(csuToken).totalBorrows());\\n    // uint256 collateralRateMantissa = getCollateralRate(cToken, csuToken);\\n    uint256 protocolSeizeTokens = (actualSeize * redemptionRateMantissa) / expScale;\\n    // .mul_( Exp({mantissa: collateralRateMantissa}));\\n    actualSeize = actualSeize - protocolSeizeTokens;\\n    return (\\n      actualRepay,\\n      actualSeize,\\n      protocolSeizeTokens,\\n      repayPrice,\\n      seizePrice,\\n      redemptionRateMantissa\\n      // collateralRateMantissa\\n    );\\n  }\\n\\n  function redeemFaceValueWithProvider(\\n    address redeemer,\\n    address provider,\\n    address cToken,\\n    address csuToken,\\n    uint256 redeemAmount,\\n    uint256 redemptionRateMantissa\\n  ) internal returns (uint256) {\\n    (uint256 actualRepay, uint256 actualSeize, , ) = calcActualRepayAndSeize(redeemAmount, provider, cToken, csuToken);\\n    if (actualRepay <= 0 || actualSeize <= 0) {\\n      return 0;\\n    }\\n    ICToken(csuToken).executeRedemption(redeemer, provider, actualRepay, cToken, actualSeize, redemptionRateMantissa);\\n    return actualRepay;\\n  }\\n\\n  function redeemFaceValueWithPermit(\\n    address csuToken,\\n    uint256 amount,\\n    address[] memory providers,\\n    uint256 providersDeadline,\\n    bytes memory providersSignature,\\n    uint256 permitDeadline,\\n    bytes memory permitSignature\\n  ) external {\\n    address underlying = ICToken(csuToken).underlying();\\n    IEIP712(underlying).permit(msg.sender, csuToken, amount, permitDeadline, permitSignature);\\n    return redeemFaceValue(csuToken, amount, providers, providersDeadline, providersSignature);\\n  }\\n\\n  // function permit(address[] memory providers, uint256 deadline, bytes memory signature) public pure returns (address) {\\n  //   bytes32 hash = keccak256(abi.encodePacked(deadline, providers));\\n  //   bytes memory prefixedMessage = abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n', '32', hash);\\n\\n  //   address signer = ECDSAUpgradeable.recover(keccak256(prefixedMessage), signature);\\n  //   return signer;\\n  // }\\n\\n  /**\\n   * @notice Redeems csuToken with face value\\n   * @param csuToken The market to do the redemption\\n   * @param amount The amount of csuToken being redeemed to the market in exchange for collateral\\n   */\\n  function redeemFaceValue(\\n    address csuToken,\\n    uint256 amount,\\n    address[] memory providers,\\n    uint256 deadline,\\n    bytes memory signature\\n  ) public {\\n    if (ICToken(csuToken).isCToken() || !comptroller.isListed(csuToken)) {\\n      revert InvalidSuToken();\\n    }\\n    if (redemptionSigner == address(0)) {\\n      revert RedemptionSignerNotInitialized();\\n    }\\n\\n    if (signature.length != 65) {\\n      revert InvalidSignatureLength();\\n    }\\n\\n    if (block.timestamp >= deadline) {\\n      revert ExpiredSignature();\\n    }\\n\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    bytes32 hash = keccak256(abi.encodePacked(deadline, providers, chainId));\\n    bytes memory prefixedMessage = abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n', '32', hash);\\n    address signer = ECDSAUpgradeable.recover(keccak256(prefixedMessage), signature);\\n    if (signer != redemptionSigner) {\\n      revert InvalidSignatureForRedeemFaceValue();\\n    }\\n\\n    (, uint8 suGroupId, ) = comptroller.markets(csuToken);\\n    uint256 actualRedeem = 0;\\n\\n    updateBaseRateFromRedemption(csuToken, amount, ICToken(csuToken).totalBorrows());\\n    uint256 redemptionRateMantissa = getRedemptionRate(csuToken);\\n    uint256 targetRedeemAmount = amount;\\n    for (uint256 p = 0; p < providers.length && targetRedeemAmount > 0; ++p) {\\n      address provider = providers[p];\\n      address[] memory assets = comptroller.getAssetsIn(provider);\\n      if (msg.sender == provider) {\\n        continue;\\n      }\\n\\n      // redeem face value with homo collateral\\n      for (uint256 i = 0; i < assets.length && targetRedeemAmount > 0; ++i) {\\n        // only cToken is allowed to be collateral\\n        if (!ICToken(assets[i]).isCToken()) {\\n          continue;\\n        }\\n        (, uint8 cGroupId, ) = comptroller.markets(assets[i]);\\n        if (cGroupId == suGroupId) {\\n          actualRedeem = redeemFaceValueWithProvider(\\n            msg.sender,\\n            provider,\\n            assets[i],\\n            csuToken,\\n            targetRedeemAmount,\\n            redemptionRateMantissa\\n          );\\n          if (actualRedeem < targetRedeemAmount) {\\n            targetRedeemAmount = targetRedeemAmount - actualRedeem;\\n          } else {\\n            targetRedeemAmount = 0;\\n          }\\n        }\\n      }\\n\\n      // redeem face value with hetero collateral\\n      for (uint256 i = 0; i < assets.length && targetRedeemAmount > 0; ++i) {\\n        // only cToken is allowed to be collateral\\n        if (!ICToken(assets[i]).isCToken()) {\\n          continue;\\n        }\\n\\n        (, uint8 cGroupId, ) = comptroller.markets(assets[i]);\\n        if (cGroupId != suGroupId) {\\n          actualRedeem = redeemFaceValueWithProvider(\\n            msg.sender,\\n            provider,\\n            assets[i],\\n            csuToken,\\n            targetRedeemAmount,\\n            redemptionRateMantissa\\n          );\\n          if (actualRedeem < targetRedeemAmount) {\\n            targetRedeemAmount = targetRedeemAmount - actualRedeem;\\n          } else {\\n            targetRedeemAmount = 0;\\n          }\\n        }\\n      }\\n    }\\n\\n    if (targetRedeemAmount > 0) {\\n      revert NoRedemptionProvider();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Comptroller/SortedBorrows.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\nimport '../Interfaces/ISortedBorrows.sol';\\nimport '../Interfaces/ICTokenExternal.sol';\\nimport '../Interfaces/IComptroller.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\n\\n/*\\n * A sorted doubly linked list with nodes sorted in descending order.\\n *\\n * Nodes map to active Vessels in the system - the ID property is the address of a Vessel owner.\\n * Nodes are ordered according to their current borrow balance (NBB),\\n *\\n * The list optionally accepts insert position hints.\\n *\\n * NBBs are computed dynamically at runtime, and not stored on the Node. This is because NBBs of active Vessels\\n * change dynamically as liquidation events occur.\\n *\\n * The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the NBBs of all active Vessels,\\n * but maintains their order. A node inserted based on current NBB will maintain the correct position,\\n * relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not changed.\\n * Thus, Nodes remain sorted by current NBB.\\n *\\n * Nodes need only be re-inserted upon a Vessel operation - when the owner adds or removes collateral or debt\\n * to their position.\\n *\\n * The list is a modification of the following audited SortedDoublyLinkedList:\\n * https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol\\n *\\n *\\n * Changes made in the Gravita implementation:\\n *\\n * - Keys have been removed from nodes\\n *\\n * - Ordering checks for insertion are performed by comparing an NBB argument to the current NBB, calculated at runtime.\\n *   The list relies on the property that ordering by ICR is maintained as the ETH:USD price varies.\\n *\\n * - Public functions with parameters have been made internal to save gas, and given an external wrapper function for external access\\n */\\ncontract SortedBorrows is AccessControlEnumerableUpgradeable, ISortedBorrows {\\n  string public constant NAME = 'SortedBorrows';\\n\\n  // Information for the list\\n  struct Data {\\n    address head; // Head of the list. Also the node in the list with the largest NBB\\n    address tail; // Tail of the list. Also the node in the list with the smallest NBB\\n    uint256 size; // Current size of the list\\n    // Depositor address => node\\n    mapping(address => Node) nodes; // Track the corresponding ids for each node in the list\\n  }\\n\\n  // Collateral type address => ordered list\\n  mapping(address => Data) public data;\\n\\n  address public redemptionManager;\\n\\n  // --- Initializer ---\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _admin) external initializer {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n  }\\n\\n  function setRedemptionManager(address _redemptionManager) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    redemptionManager = _redemptionManager;\\n  }\\n\\n  /*\\n   * @dev Add a node to the list\\n   * @param _id Node's id\\n   * @param _NBB Node's NBB\\n   * @param _prevId Id of previous node for the insert position\\n   * @param _nextId Id of next node for the insert position\\n   */\\n\\n  function insert(address _asset, address _id, uint256 _NBB, address _prevId, address _nextId) external override {\\n    _requireCallerIsRedemptionManager();\\n    _insert(_asset, _id, _NBB, _prevId, _nextId);\\n  }\\n\\n  function _insert(address _asset, address _id, uint256 _NBB, address _prevId, address _nextId) internal {\\n    Data storage assetData = data[_asset];\\n\\n    // List must not already contain node\\n    require(!_contains(assetData, _id), 'SortedBorrows: List already contains the node');\\n    // Node id must not be null\\n    require(_id != address(0), 'SortedBorrows: Id cannot be zero');\\n    // NBB must be non-zero\\n    require(_NBB != 0, 'SortedBorrows: NBB must be positive');\\n\\n    address prevId = _prevId;\\n    address nextId = _nextId;\\n\\n    if (!_validInsertPosition(_asset, _NBB, prevId, nextId)) {\\n      // Sender's hint was not a valid insert position\\n      // Use sender's hint to find a valid insert position\\n      (prevId, nextId) = _findInsertPosition(_asset, _NBB, prevId, nextId);\\n    }\\n\\n    Node storage node = assetData.nodes[_id];\\n    node.exists = true;\\n\\n    if (prevId == address(0) && nextId == address(0)) {\\n      // Insert as head and tail\\n      assetData.head = _id;\\n      assetData.tail = _id;\\n    } else if (prevId == address(0)) {\\n      // Insert before `prevId` as the head\\n      node.nextId = assetData.head;\\n      assetData.nodes[assetData.head].prevId = _id;\\n      assetData.head = _id;\\n    } else if (nextId == address(0)) {\\n      // Insert after `nextId` as the tail\\n      node.prevId = assetData.tail;\\n      assetData.nodes[assetData.tail].nextId = _id;\\n      assetData.tail = _id;\\n    } else {\\n      // Insert at insert position between `prevId` and `nextId`\\n      node.nextId = nextId;\\n      node.prevId = prevId;\\n      assetData.nodes[prevId].nextId = _id;\\n      assetData.nodes[nextId].prevId = _id;\\n    }\\n\\n    assetData.size = assetData.size + 1;\\n    emit NodeAdded(_asset, _id, _NBB);\\n  }\\n\\n  function remove(address _asset, address _id) external override {\\n    _requireCallerIsRedemptionManager();\\n    _remove(_asset, _id);\\n  }\\n\\n  /*\\n   * @dev Remove a node from the list\\n   * @param _id Node's id\\n   */\\n  function _remove(address _asset, address _id) internal {\\n    Data storage assetData = data[_asset];\\n\\n    // List must contain the node\\n    require(_contains(assetData, _id), 'SortedBorrows: List does not contain the id');\\n\\n    Node storage node = assetData.nodes[_id];\\n    if (assetData.size > 1) {\\n      // List contains more than a single node\\n      if (_id == assetData.head) {\\n        // The removed node is the head\\n        // Set head to next node\\n        assetData.head = node.nextId;\\n        // Set prev pointer of new head to null\\n        assetData.nodes[assetData.head].prevId = address(0);\\n      } else if (_id == assetData.tail) {\\n        // The removed node is the tail\\n        // Set tail to previous node\\n        assetData.tail = node.prevId;\\n        // Set next pointer of new tail to null\\n        assetData.nodes[assetData.tail].nextId = address(0);\\n      } else {\\n        // The removed node is neither the head nor the tail\\n        // Set next pointer of previous node to the next node\\n        assetData.nodes[node.prevId].nextId = node.nextId;\\n        // Set prev pointer of next node to the previous node\\n        assetData.nodes[node.nextId].prevId = node.prevId;\\n      }\\n    } else {\\n      // List contains a single node\\n      // Set the head and tail to null\\n      assetData.head = address(0);\\n      assetData.tail = address(0);\\n    }\\n\\n    delete assetData.nodes[_id];\\n    assetData.size = assetData.size - 1;\\n    emit NodeRemoved(_asset, _id);\\n  }\\n\\n  /*\\n   * @dev Re-insert the node at a new position, based on its new NBB\\n   * @param _id Node's id\\n   * @param _newNBB Node's new NBB\\n   * @param _prevId Id of previous node for the new insert position\\n   * @param _nextId Id of next node for the new insert position\\n   */\\n  function reInsert(address _asset, address _id, uint256 _newNBB, address _prevId, address _nextId) external override {\\n    _requireCallerIsRedemptionManager();\\n    // List must contain the node\\n    require(contains(_asset, _id), 'SortedBorrows: List does not contain the id');\\n    // NBB must be non-zero\\n    require(_newNBB != 0, 'SortedBorrows: NBB must be positive');\\n\\n    // Remove node from the list\\n    _remove(_asset, _id);\\n\\n    _insert(_asset, _id, _newNBB, _prevId, _nextId);\\n  }\\n\\n  /*\\n   * @dev Checks if the list contains a node\\n   */\\n  function contains(address _asset, address _id) public view override returns (bool) {\\n    return data[_asset].nodes[_id].exists;\\n  }\\n\\n  function _contains(Data storage _dataAsset, address _id) internal view returns (bool) {\\n    return _dataAsset.nodes[_id].exists;\\n  }\\n\\n  /*\\n   * @dev Checks if the list is empty\\n   */\\n  function isEmpty(address _asset) public view override returns (bool) {\\n    return data[_asset].size == 0;\\n  }\\n\\n  /*\\n   * @dev Returns the current size of the list\\n   */\\n  function getSize(address _asset) external view override returns (uint256) {\\n    return data[_asset].size;\\n  }\\n\\n  /*\\n   * @dev Returns the first node in the list (node with the largest NBB)\\n   */\\n  function getFirst(address _asset) external view override returns (address) {\\n    return data[_asset].head;\\n  }\\n\\n  /*\\n   * @dev Returns the last node in the list (node with the smallest NBB)\\n   */\\n  function getLast(address _asset) external view override returns (address) {\\n    return data[_asset].tail;\\n  }\\n\\n  /*\\n   * @dev Returns the next node (with a smaller NBB) in the list for a given node\\n   * @param _id Node's id\\n   */\\n  function getNext(address _asset, address _id) external view override returns (address) {\\n    return data[_asset].nodes[_id].nextId;\\n  }\\n\\n  /*\\n   * @dev Returns the previous node (with a larger NBB) in the list for a given node\\n   * @param _id Node's id\\n   */\\n  function getPrev(address _asset, address _id) external view override returns (address) {\\n    return data[_asset].nodes[_id].prevId;\\n  }\\n\\n  /*\\n   * @dev Check if a pair of nodes is a valid insertion point for a new node with the given NBB\\n   * @param _NBB Node's NBB\\n   * @param _prevId Id of previous node for the insert position\\n   * @param _nextId Id of next node for the insert position\\n   */\\n  function validInsertPosition(\\n    address _asset,\\n    uint256 _NBB,\\n    address _prevId,\\n    address _nextId\\n  ) external view override returns (bool) {\\n    return _validInsertPosition(_asset, _NBB, _prevId, _nextId);\\n  }\\n\\n  function _validInsertPosition(\\n    address _asset,\\n    uint256 _NBB,\\n    address _prevId,\\n    address _nextId\\n  ) internal view returns (bool) {\\n    if (_prevId == address(0) && _nextId == address(0)) {\\n      // `(null, null)` is a valid insert position if the list is empty\\n      return isEmpty(_asset);\\n    } else if (_prevId == address(0)) {\\n      // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\\n      return data[_asset].head == _nextId && _NBB >= ICToken(_asset).borrowBalanceStored(_nextId);\\n    } else if (_nextId == address(0)) {\\n      // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\\n      return data[_asset].tail == _prevId && _NBB <= ICToken(_asset).borrowBalanceStored(_prevId);\\n    } else {\\n      // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and `_NBB` falls between the two nodes' NBBs\\n      return\\n        data[_asset].nodes[_prevId].nextId == _nextId &&\\n        ICToken(_asset).borrowBalanceStored(_prevId) >= _NBB &&\\n        _NBB >= ICToken(_asset).borrowBalanceStored(_nextId);\\n    }\\n  }\\n\\n  /*\\n   * @dev Descend the list (larger NBBs to smaller NBBs) to find a valid insert position\\n   * @param _vesselManager VesselManager contract, passed in as param to save SLOAD\u2019s\\n   * @param _NBB Node's NBB\\n   * @param _startId Id of node to start descending the list from\\n   */\\n  function _descendList(address _asset, uint256 _NBB, address _startId) internal view returns (address, address) {\\n    Data storage assetData = data[_asset];\\n\\n    // If `_startId` is the head, check if the insert position is before the head\\n    if (assetData.head == _startId && _NBB >= ICToken(_asset).borrowBalanceStored(_startId)) {\\n      return (address(0), _startId);\\n    }\\n\\n    address prevId = _startId;\\n    address nextId = assetData.nodes[prevId].nextId;\\n\\n    // Descend the list until we reach the end or until we find a valid insert position\\n    while (prevId != address(0) && !_validInsertPosition(_asset, _NBB, prevId, nextId)) {\\n      prevId = assetData.nodes[prevId].nextId;\\n      nextId = assetData.nodes[prevId].nextId;\\n    }\\n\\n    return (prevId, nextId);\\n  }\\n\\n  /*\\n   * @dev Ascend the list (smaller NBBs to larger NBBs) to find a valid insert position\\n   * @param _vesselManager VesselManager contract, passed in as param to save SLOAD\u2019s\\n   * @param _NBB Node's NBB\\n   * @param _startId Id of node to start ascending the list from\\n   */\\n  function _ascendList(address _asset, uint256 _NBB, address _startId) internal view returns (address, address) {\\n    Data storage assetData = data[_asset];\\n\\n    // If `_startId` is the tail, check if the insert position is after the tail\\n    if (assetData.tail == _startId && _NBB <= ICToken(_asset).borrowBalanceStored(_startId)) {\\n      return (_startId, address(0));\\n    }\\n\\n    address nextId = _startId;\\n    address prevId = assetData.nodes[nextId].prevId;\\n\\n    // Ascend the list until we reach the end or until we find a valid insertion point\\n    while (nextId != address(0) && !_validInsertPosition(_asset, _NBB, prevId, nextId)) {\\n      nextId = assetData.nodes[nextId].prevId;\\n      prevId = assetData.nodes[nextId].prevId;\\n    }\\n\\n    return (prevId, nextId);\\n  }\\n\\n  /*\\n   * @dev Find the insert position for a new node with the given NBB\\n   * @param _NBB Node's NBB\\n   * @param _prevId Id of previous node for the insert position\\n   * @param _nextId Id of next node for the insert position\\n   */\\n  function findInsertPosition(\\n    address _asset,\\n    uint256 _NBB,\\n    address _prevId,\\n    address _nextId\\n  ) external view override returns (address, address) {\\n    return _findInsertPosition(_asset, _NBB, _prevId, _nextId);\\n  }\\n\\n  function _findInsertPosition(\\n    address _asset,\\n    uint256 _NBB,\\n    address _prevId,\\n    address _nextId\\n  ) internal view returns (address, address) {\\n    address prevId = _prevId;\\n    address nextId = _nextId;\\n\\n    if (prevId != address(0)) {\\n      if (!contains(_asset, prevId) || _NBB > ICToken(_asset).borrowBalanceStored(prevId)) {\\n        // `prevId` does not exist anymore or now has a smaller NBB than the given NBB\\n        prevId = address(0);\\n      }\\n    }\\n\\n    if (nextId != address(0)) {\\n      if (!contains(_asset, nextId) || _NBB < ICToken(_asset).borrowBalanceStored(nextId)) {\\n        // `nextId` does not exist anymore or now has a larger NBB than the given NBB\\n        nextId = address(0);\\n      }\\n    }\\n\\n    if (prevId == address(0) && nextId == address(0)) {\\n      // No hint - descend list starting from head\\n      return _descendList(_asset, _NBB, data[_asset].head);\\n    } else if (prevId == address(0)) {\\n      // No `prevId` for hint - ascend list starting from `nextId`\\n      return _ascendList(_asset, _NBB, nextId);\\n    } else if (nextId == address(0)) {\\n      // No `nextId` for hint - descend list starting from `prevId`\\n      return _descendList(_asset, _NBB, prevId);\\n    } else {\\n      // Descend list starting from `prevId`\\n      return _descendList(_asset, _NBB, prevId);\\n    }\\n  }\\n\\n  // --- 'require' functions ---\\n\\n  function _requireCallerIsRedemptionManager() internal view {\\n    require(msg.sender == redemptionManager, 'only redemption manager');\\n  }\\n\\n  function isSortedBorrows() external pure returns (bool) {\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Exponential/ExponentialNoErrorNew.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoErrorNew {\\n  uint constant expScale = 1e18;\\n  uint constant doubleScale = 1e36;\\n\\n  struct Exp {\\n    uint mantissa;\\n  }\\n\\n  struct Double {\\n    uint mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2 ** 224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2 ** 32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function add_(uint a, uint b) internal pure returns (uint) {\\n    return a + b;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n  }\\n\\n  function sub_(uint a, uint b) internal pure returns (uint) {\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n  }\\n\\n  function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: mul_(a.mantissa, b)});\\n  }\\n\\n  function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n  }\\n\\n  function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: mul_(a.mantissa, b)});\\n  }\\n\\n  function mul_(uint a, Double memory b) internal pure returns (uint) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint a, uint b) internal pure returns (uint) {\\n    return a * b;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n  }\\n\\n  function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n    return Exp({mantissa: div_(a.mantissa, b)});\\n  }\\n\\n  function div_(uint a, Exp memory b) internal pure returns (uint) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n  }\\n\\n  function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(a.mantissa, b)});\\n  }\\n\\n  function div_(uint a, Double memory b) internal pure returns (uint) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint a, uint b) internal pure returns (uint) {\\n    return a / b;\\n  }\\n\\n  function fraction(uint a, uint b) internal pure returns (Double memory) {\\n    return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nenum Version {\\n  V0,\\n  V1,\\n  V2, // packed asset group\\n  V3, // added interMintRate into asset group\\n  V4 // use interMintSwitch instead of interMintRate\\n}\\n\\nstruct GroupVar {\\n  uint8 groupId;\\n  uint256 cDepositVal;\\n  uint256 cBorrowVal;\\n  uint256 suDepositVal;\\n  uint256 suBorrowVal;\\n  uint256 intraCRate;\\n  uint256 intraMintRate;\\n  uint256 intraSuRate;\\n  uint256 interCRate;\\n  uint256 interSuRate;\\n}\\n\\n/// @notice AssetGroup, contains information of groupName and rateMantissas\\nstruct AssetGroupDeprecated {\\n  uint8 groupId;\\n  string groupName;\\n  uint256 intraCRateMantissa;\\n  uint256 intraMintRateMantissa;\\n  uint256 intraSuRateMantissa;\\n  uint256 interCRateMantissa;\\n  uint256 interSuRateMantissa;\\n  bool exist;\\n}\\n\\n/// @notice NewAssetGroup, contains information of groupName and rateMantissas\\nstruct CompactAssetGroup {\\n  uint8 groupId;\\n  uint16 intraCRatePercent;\\n  uint16 intraMintRatePercent;\\n  uint16 intraSuRatePercent;\\n  uint16 interCRatePercent;\\n  uint16 interSuRatePercent;\\n}\\n\\nstruct GlobalConfig {\\n  uint16 closeFactorPercent; // percent decimals(4)\\n  uint32 minCloseValue; // usd value decimals(0)\\n  uint32 minSuBorrowValue; // usd value decimals(0)\\n  uint32 minWaitBeforeLiquidatable; // seconds decimals(0)\\n  uint8 largestGroupId;\\n}\\n\\nstruct MarketConfig {\\n  bool mintPaused;\\n  bool borrowPaused;\\n  bool transferPaused;\\n  bool seizePaused;\\n  uint120 borrowCap; //\\n  uint120 supplyCap;\\n}\\n\\nstruct LiquidationIncentive {\\n  uint16 heteroPercent;\\n  uint16 homoPercent;\\n  uint16 sutokenPercent;\\n}\\n\\ninterface IComptroller {\\n  /*** Assets You Are In ***/\\n  function isComptroller() external view returns (bool);\\n\\n  function markets(address) external view returns (bool, uint8, bool);\\n\\n  function getAllMarkets() external view returns (address[] memory);\\n\\n  function oracle() external view returns (address);\\n\\n  function redemptionManager() external view returns (address);\\n\\n  function enterMarkets(address[] calldata cTokens) external;\\n\\n  function exitMarket(address cToken) external;\\n\\n  // function getAssetsIn(address) external view returns (ICToken[] memory);\\n  function claimSumer(address) external;\\n\\n  function compAccrued(address) external view returns (uint256);\\n\\n  function getAssetsIn(address account) external view returns (address[] memory);\\n\\n  function timelock() external view returns (address);\\n\\n  function getUnderlyingPriceNormalized(address cToken) external view returns (uint256);\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external;\\n\\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external;\\n  // function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\\n\\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external;\\n  function borrowVerify(address borrower, uint borrowAmount) external;\\n\\n  function repayBorrowAllowed(address cToken, address payer, address borrower, uint256 repayAmount) external;\\n  // function repayBorrowVerify(\\n  //   address cToken,\\n  //   address payer,\\n  //   address borrower,\\n  //   uint repayAmount,\\n  //   uint borrowerIndex\\n  // ) external;\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external;\\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint seizeTokens\\n  ) external;\\n\\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function liquidationIncentive() external view returns (LiquidationIncentive memory);\\n\\n  function isListed(address asset) external view returns (bool);\\n\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount\\n  ) external view returns (uint256, uint256);\\n\\n  // function _getMarketBorrowCap(address cToken) external view returns (uint256);\\n\\n  /// @notice Emitted when an action is paused on a market\\n  event ActionPaused(address cToken, string action, bool pauseState);\\n\\n  /// @notice Emitted when borrow cap for a cToken is changed\\n  event NewBorrowCap(address indexed cToken, uint256 newBorrowCap);\\n\\n  /// @notice Emitted when borrow cap guardian is changed\\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n  /// @notice Emitted when pause guardian is changed\\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n  event RemoveAssetGroup(uint8 indexed groupId, uint8 equalAssetsGroupNum);\\n\\n  function assetGroup(uint8 groupId) external view returns (CompactAssetGroup memory);\\n\\n  function marketConfig(address cToken) external view returns (MarketConfig memory);\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external view;\\n  // function liquidateBorrowVerify(\\n  //   address cTokenBorrowed,\\n  //   address cTokenCollateral,\\n  //   address liquidator,\\n  //   address borrower,\\n  //   uint repayAmount,\\n  //   uint seizeTokens\\n  // ) external;\\n\\n  function globalConfig() external view returns (GlobalConfig memory);\\n\\n  function interMintAllowed() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ICTokenExternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICToken {\\n  function comptroller() external view returns (address);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function borrowIndex() external view returns (uint256);\\n\\n  function totalBorrows() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function isCToken() external view returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function getAccountSnapshot(address account) external view returns (uint256, uint256, uint256, uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  function isCEther() external view returns (bool);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function getCurrentVotes(address account) external view returns (uint96);\\n\\n  function delegates(address) external view returns (address);\\n\\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n\\n  function isDeprecated() external view returns (bool);\\n\\n  function executeRedemption(\\n    address redeemer,\\n    address provider,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeAmount,\\n    uint256 redemptionRateMantissa\\n  ) external returns (uint256);\\n\\n  function discountRateMantissa() external view returns (uint256);\\n\\n  function accrueInterest() external returns (uint256);\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenCollateral,\\n    uint256 actualRepayAmount\\n  ) external view returns (uint256, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IEIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IEIP712 {\\n  function permit(address owner, address spender, uint256 value, uint256 deadline, bytes memory signature) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IPriceOracle {\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(address cToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the underlying price of cToken asset (normalized)\\n   * = getUnderlyingPrice * (10 ** (18 - cToken.decimals))\\n   */\\n  function getUnderlyingPriceNormalized(address cToken_) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IRedemptionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport './IPriceOracle.sol';\\n\\ninterface IRedemptionManager {\\n  function calcActualRepayAndSeize(\\n    uint256 redeemAmount,\\n    address provider,\\n    address cToken,\\n    address csuToken\\n  ) external returns (uint256, uint256, uint256, uint256);\\n\\n  // function updateSortedBorrows(address csuToken, address borrower) external;\\n\\n  function getRedemptionRate(address asset) external view returns (uint);\\n\\n  function getCurrentRedemptionRate(address asset, uint redeemAmount, uint _totalSupply) external returns (uint);\\n\\n  function redeemFaceValueWithProviderPreview(\\n    address redeemer,\\n    address provider,\\n    address cToken,\\n    address csuToken,\\n    uint256 redeemAmount,\\n    uint256 redemptionRateMantissa\\n  ) external returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n\\n  function redeemFaceValue(\\n    address csuToken,\\n    uint256 amount,\\n    address[] memory providers,\\n    uint256 deadline,\\n    bytes memory signature\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/ISortedBorrows.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface ISortedBorrows {\\n  // Information for a node in the list\\n  struct Node {\\n    bool exists;\\n    address nextId; // Id of next node (smaller NBB) in the list\\n    address prevId; // Id of previous node (larger NBB) in the list\\n  }\\n\\n  // --- Events ---\\n\\n  event NodeAdded(address indexed _asset, address _id, uint256 _NICR);\\n  event NodeRemoved(address indexed _asset, address _id);\\n\\n  // --- Functions ---\\n\\n  function insert(address _asset, address _id, uint256 _ICR, address _prevId, address _nextId) external;\\n\\n  function remove(address _asset, address _id) external;\\n\\n  function reInsert(address _asset, address _id, uint256 _newICR, address _prevId, address _nextId) external;\\n\\n  function contains(address _asset, address _id) external view returns (bool);\\n\\n  function isEmpty(address _asset) external view returns (bool);\\n\\n  function getSize(address _asset) external view returns (uint256);\\n\\n  function getFirst(address _asset) external view returns (address);\\n\\n  function getLast(address _asset) external view returns (address);\\n\\n  function getNext(address _asset, address _id) external view returns (address);\\n\\n  function getPrev(address _asset, address _id) external view returns (address);\\n\\n  function validInsertPosition(\\n    address _asset,\\n    uint256 _ICR,\\n    address _prevId,\\n    address _nextId\\n  ) external view returns (bool);\\n\\n  function findInsertPosition(\\n    address _asset,\\n    uint256 _ICR,\\n    address _prevId,\\n    address _nextId\\n  ) external view returns (address, address);\\n\\n  function isSortedBorrows() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/SumerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract SumerErrors {\\n  error PriceError();\\n\\n  error RedemptionSignerNotInitialized();\\n  error NotEnoughForSeize();\\n  error NoRedemptionProvider();\\n  error MarketNotListed();\\n  error InsufficientShortfall();\\n  error TooMuchRepay();\\n  error InvalidMinSuBorrowValue();\\n  error BorrowValueMustBeLargerThanThreshold(uint256 usdThreshold);\\n  error MarketAlreadyListed();\\n  error InvalidAddress();\\n  error InvalidGroupId();\\n  error InvalidCloseFactor();\\n  error InvalidSuToken();\\n  error InvalidSignatureLength();\\n  error ExpiredSignature();\\n  error SenderMustBeCToken();\\n  error MintPaused();\\n  error BorrowPaused();\\n  error TransferPaused();\\n  error SeizePaused();\\n  error InsufficientCollateral();\\n  error EitherAssetOrDebtMustBeZeroInGroup(\\n    uint8 groupId,\\n    uint256 cDepositVal,\\n    uint256 suDepositVal,\\n    uint256 cBorrowVal,\\n    uint256 suBorrowVal\\n  );\\n  error EitherAssetOrDebtMustBeZero();\\n\\n  error OnlyAdminOrPauser();\\n\\n  // general errors\\n  error OnlyAdmin();\\n  error OnlyPendingAdmin();\\n  error OnlyRedemptionManager();\\n  error OnlyListedCToken();\\n  error OnlyCToken();\\n  error UnderlyingBalanceError();\\n  error MarketCanOnlyInitializeOnce();\\n  error CantSweepUnderlying();\\n  error TokenTransferInFailed();\\n  error TokenTransferOutFailed();\\n  error TransferNotAllowed();\\n  error TokenInOrAmountInMustBeZero();\\n  error AddReservesOverflow();\\n  error RedeemTransferOutNotPossible();\\n  error BorrowCashNotAvailable();\\n  error ReduceReservesCashNotAvailable();\\n  error InvalidDiscountRate();\\n  error InvalidExchangeRate();\\n  error InvalidReduceAmount();\\n  error InvalidReserveFactor();\\n  error InvalidComptroller();\\n  error InvalidInterestRateModel();\\n  error InvalidAmount();\\n  error InvalidInput();\\n  error BorrowAndDepositBackFailed();\\n  error InvalidSignatureForRedeemFaceValue();\\n\\n  error BorrowCapReached();\\n  error SupplyCapReached();\\n  error ComptrollerMismatch();\\n\\n  error MintMarketNotFresh();\\n  error BorrowMarketNotFresh();\\n  error RepayBorrowMarketNotFresh();\\n  error RedeemMarketNotFresh();\\n  error LiquidateMarketNotFresh();\\n  error LiquidateCollateralMarketNotFresh();\\n  error ReduceReservesMarketNotFresh();\\n  error SetInterestRateModelMarketNotFresh();\\n  error AddReservesMarketNotFresh();\\n  error SetReservesFactorMarketNotFresh();\\n  error CantExitMarketWithNonZeroBorrowBalance();\\n\\n  error InvalidTimestamp();\\n\\n  // error\\n  error NotCToken();\\n  error NotSuToken();\\n\\n  // error in liquidateBorrow\\n  error LiquidateBorrow_RepayAmountIsZero();\\n  error LiquidateBorrow_RepayAmountIsMax();\\n  error LiquidateBorrow_LiquidatorIsBorrower();\\n  error LiquidateBorrow_SeizeTooMuch();\\n\\n  // error in seize\\n  error Seize_LiquidatorIsBorrower();\\n\\n  // error in protected mint\\n  error ProtectedMint_OnlyAllowAssetsInTheSameGroup();\\n\\n  error RedemptionSeizeTooMuch();\\n\\n  error MinDelayNotReached();\\n\\n  error NotLiquidatableYet();\\n\\n  error InvalidBlockNumber();\\n  error ZeroAddressNotAllowed();\\n  error InterMintNotAllowed();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddReservesMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddReservesOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowAndDepositBackFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowCapReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdThreshold\",\"type\":\"uint256\"}],\"name\":\"BorrowValueMustBeLargerThanThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantExitMarketWithNonZeroBorrowBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantSweepUnderlying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ComptrollerMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EitherAssetOrDebtMustBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"groupId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cDepositVal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suDepositVal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cBorrowVal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suBorrowVal\",\"type\":\"uint256\"}],\"name\":\"EitherAssetOrDebtMustBeZeroInGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientShortfall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterMintNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBlockNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCloseFactor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidComptroller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDiscountRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExchangeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidGroupId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInterestRateModel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinSuBorrowValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReduceAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReserveFactor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureForRedeemFaceValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSuToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateBorrow_LiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateBorrow_RepayAmountIsMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateBorrow_RepayAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateBorrow_SeizeTooMuch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCollateralMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketAlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketCanOnlyInitializeOnce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketNotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinDelayNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRedemptionProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughForSeize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatableYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSuToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminOrPauser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyListedCToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRedemptionManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectedMint_OnlyAllowAssetsInTheSameGroup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemTransferOutNotPossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionSeizeTooMuch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionSignerNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepayBorrowMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SeizePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Seize_LiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderMustBeCToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetInterestRateModelMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReservesFactorMarketNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyCapReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenInOrAmountInMustBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferInFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferOutFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchRepay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderlyingBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"name\":\"BaseRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LastFeeOpTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"NewRedemptionSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BORROWING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINUTE_DECAY_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_ONE_MINUTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseRateMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"csuToken\",\"type\":\"address\"}],\"name\":\"calcActualRepayAndSeize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"decayBaseRateFromBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"getCurrentRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_redemptionSigner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeOperationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFeeOperationTimeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"csuToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"providers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeemFaceValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"csuToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"providers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"providersDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"providersSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitSignature\",\"type\":\"bytes\"}],\"name\":\"redeemFaceValueWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"csuToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRateMantissa\",\"type\":\"uint256\"}],\"name\":\"redeemFaceValueWithProviderPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"name\":\"setComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setRedemptionSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RedemptionManager", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}