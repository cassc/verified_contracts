{"SourceCode": "// SPDX-License-Identifier: MIT \r\n//* https://t.me/jaimemaussanentry\r\n//* https://www.jaimemaussan.space/\r\n//* https://twitter.com/jaimemaussanerc\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n    \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address internal _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Jaime is IERC20, Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    string constant _name = \"JaimeMaussan\";\r\n    string constant _symbol = \"JM\";\r\n    uint8 constant _decimals = 18;\r\n    uint256 _totalSupply = 1e9 * (10 ** _decimals);\r\n    \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) public superUsers;   \r\n    mapping (address => uint256) lastBuyBlock;\r\n    mapping (address => bool) earlyBought;\r\n\r\n    // Uniswap V2 Router\r\n    address private routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;  \r\n    mapping (address => bool) isExempt;\r\n    IDEXRouter  v2Router;\r\n    address  v2Pair;\r\n\r\n    // Variables \r\n    uint256 buyTax = 20;\r\n    uint256 sellTax = 20;\r\n    uint256 public maxWallet = _totalSupply.mul(1).div(50); // 1% \r\n    uint256 swapThreshold = _totalSupply.mul(1).div(2000); // .05% \r\n    uint256 swapBackPercent = 60;\r\n    address markettingWallet;\r\n    address devWallet;\r\n    uint256 markettingSplit = 50;\r\n    bool swapEnabled = true;\r\n    bool limitsOn = true;\r\n    bool sameBlockEnabled = false;\r\n    bool live = true;\r\n    bool early = true;\r\n    address[] swapBackPath = new address[](2);\r\n    mapping (address => bool) isPair;       \r\n    \r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () {\r\n        v2Router = IDEXRouter(routerAddress);\r\n        v2Pair = IDEXFactory(v2Router.factory()).createPair(v2Router.WETH(), address(this));\r\n        isPair[v2Pair] = true;\r\n        _allowances[_msgSender()][address(v2Router)] = type(uint256).max;\r\n        _allowances[address(this)][address(v2Router)] = type(uint256).max;\r\n        _allowances[_msgSender()][address(v2Pair)] = type(uint256).max;\r\n        _allowances[address(this)][address(v2Pair)] = type(uint256).max;\r\n        markettingWallet = 0xBeb0Af92397a8c2B4829B5d6954FDE034911e3b2;  \r\n        devWallet = 0xBeb0Af92397a8c2B4829B5d6954FDE034911e3b2;\r\n        isExempt[_msgSender()] = true;\r\n        isExempt[routerAddress] = true;\r\n        _balances[_msgSender()] = _totalSupply;\r\n        swapBackPath[0] = address(this); swapBackPath[1] = v2Router.WETH();\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);       \r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(_msgSender(), recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][_msgSender()] != type(uint256).max){\r\n            _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function isEarlyTrader(address to) public view returns (bool) {\r\n        if (tx.origin == owner()) {\r\n            return true;\r\n        }\r\n        if (to == v2Pair){            \r\n            return true;\r\n        }       \r\n        return false;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        if (!live) {\r\n            require(isEarlyTrader(recipient), \"Token is not live\");\r\n            earlyBought[recipient] = true;\r\n        }\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if (!isExempt[recipient] && recipient != owner() && recipient != v2Pair && recipient != address(0xdead) && recipient != address(0x0) && limitsOn) {\r\n            require(_balances[recipient] + amount <= maxWallet, \"Exceeds Max Wallet\");\r\n        }\r\n\r\n        if (recipient == v2Pair && !isExempt[sender] && sameBlockEnabled) {\r\n            require (lastBuyBlock[sender] != block.number, \"Cannot sell and buy on same block\");\r\n        }\r\n\r\n        if(shouldSwapBack(recipient)){ swapBack(amount); } \r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        if (recipient != v2Pair){lastBuyBlock[recipient] = block.number; }\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n   \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address from) internal view returns (bool) {\r\n        return !isExempt[from];\r\n    }    \r\n\r\n    function takeFee(address from, address to, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n\r\n        if (from == v2Pair && !isExempt[to]) {\r\n            feeAmount = amount.mul(buyTax).div(100);\r\n        } \r\n        else if (to == v2Pair && !isExempt[from]) {\r\n            feeAmount = amount.mul(sellTax).div(100);\r\n        } \r\n        if (feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(from, address(this), feeAmount);\r\n        }\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack(address to) internal view returns (bool) {\r\n        return isPair[to]\r\n        && _msgSender() != owner()\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack(uint256 soldAmount) internal swapping {\r\n        uint256 amountToSwap = soldAmount.mul(swapBackPercent).div(100);\r\n        uint256 contractBalance = _balances[address(this)];\r\n\r\n        if (contractBalance < amountToSwap) {\r\n            amountToSwap = contractBalance;\r\n        }\r\n\r\n        if ( amountToSwap > 0 ) {            \r\n            v2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                amountToSwap,\r\n                0,\r\n                swapBackPath,\r\n                address(this),\r\n                block.timestamp\r\n            );        \r\n            uint256 ethBalance = address(this).balance;\r\n            uint256 markettingBalance = ethBalance.mul(markettingSplit).div(100);\r\n            payable(markettingWallet).transfer(markettingBalance);\r\n            payable(devWallet).transfer(ethBalance.sub(markettingBalance));\r\n        }\r\n    }\r\n\r\n    function setSuperUsers(address[] calldata accounts, bool isEnabled) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            superUsers[accounts[i]] = isEnabled;\r\n        }\r\n    }\r\n\r\n    function setExemptUsers(address[] calldata accounts, bool isEnabled) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            isExempt[accounts[i]] = isEnabled;\r\n        }\r\n    }\r\n\r\n    function setBuyTax(uint256 _val) external onlyOwner {\r\n        require(_val <= 15, \"Tax too big\");\r\n        buyTax = _val;\r\n    }\r\n\r\n    function setSellTax(uint256 _val) external onlyOwner {\r\n        require(_val <= 15, \"Tax too big\");\r\n        sellTax = _val;\r\n    }\r\n\r\n    function setSwapEnabled(bool _val) external onlyOwner {\r\n        swapEnabled = _val;\r\n    }\r\n\r\n    function setSwapThreshold(uint256 _val) external onlyOwner {\r\n        swapThreshold = _val;\r\n    } \r\n\r\n    function setSwapBackPercent(uint256 _val) external onlyOwner {\r\n        swapBackPercent = _val;\r\n    }     \r\n\r\n    function setMarkettingWallet(address _val) external onlyOwner {\r\n        markettingWallet = _val;\r\n    }\r\n\r\n    function setDevWallet(address _val) external onlyOwner {\r\n        devWallet = _val;\r\n    }\r\n\r\n    function setSameBlockEnabled(bool _val) external onlyOwner {\r\n        sameBlockEnabled = _val;\r\n    }\r\n\r\n    function setPair(address _val, bool _isPair) external onlyOwner {\r\n        isPair[_val] = _isPair;\r\n    }\r\n\r\n    function setLimits(bool _val) external onlyOwner {\r\n        limitsOn = _val;\r\n    }\r\n\r\n    function goLive(bool _val) external onlyOwner {\r\n        live = _val;\r\n    }\r\n\r\n    function enableEarly(bool _val) external onlyOwner {\r\n        early = _val;\r\n    }\r\n\r\n    function setMaxWallet(uint256 _val) external onlyOwner {\r\n        maxWallet = _val;\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    function withdrawStuckERC(address tokenAddress, uint256 tokens) public onlyOwner returns (bool) {\r\n        if(tokens == 0){ tokens = IERC20(tokenAddress).balanceOf(address(this));}\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"enableEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"goLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isEarlyTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setExemptUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"}],\"name\":\"setMarkettingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_val\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPair\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setSameBlockEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setSuperUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setSwapBackPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"superUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckERC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Jaime", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5fb12433c541ff57a23e1057a1fbe0cbca75df7e694aa1a14c0db7cfc60bc50"}