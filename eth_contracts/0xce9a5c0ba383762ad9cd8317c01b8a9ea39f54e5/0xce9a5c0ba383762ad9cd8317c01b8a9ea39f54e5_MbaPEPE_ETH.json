{"SourceCode": "{{\r\n  \"sources\": {\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\ninterface IERC20 {\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address to, uint256 amount) external returns (bool);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"CF_ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nimport \\\"./CF_Common.sol\\\";\\r\\n\\r\\nabstract contract CF_ERC20 is CF_Common {\\r\\n  string internal _name;\\r\\n  string internal _symbol;\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n  function name() external view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function symbol() external view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function decimals() external view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return _balance[account];\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) public view returns (uint256) {\\r\\n    return _allowance[owner][spender];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool) {\\r\\n    _approve(msg.sender, spender, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transfer(address to, uint256 amount) external returns (bool) {\\r\\n    _transfer(msg.sender, to, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool) {\\r\\n    _spendAllowance(from, msg.sender, amount);\\r\\n    _transfer(from, to, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n    unchecked {\\r\\n      _approve(msg.sender, spender, allowance(msg.sender, spender) + addedValue);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n    uint256 currentAllowance = allowance(msg.sender, spender);\\r\\n\\r\\n    require(currentAllowance >= subtractedValue, \\\"Negative allowance\\\");\\r\\n\\r\\n    unchecked {\\r\\n      _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    _allowance[owner][spender] = amount;\\r\\n\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  function _spendAllowance(address owner, address spender, uint256 amount) internal {\\r\\n    uint256 currentAllowance = allowance(owner, spender);\\r\\n\\r\\n    require(currentAllowance >= amount, \\\"Insufficient allowance\\\");\\r\\n\\r\\n    unchecked {\\r\\n      _approve(owner, spender, currentAllowance - amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _transfer(address from, address to, uint256 amount) internal virtual {\\r\\n    require(from != address(0) && to != address(0), \\\"Transfer from/to zero address\\\");\\r\\n    require(_balance[from] >= amount, \\\"Exceeds balance\\\");\\r\\n\\r\\n    if (amount > 0) {\\r\\n      unchecked {\\r\\n        _balance[from] -= amount;\\r\\n        _balance[to] += amount;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, amount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"CF_Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\nabstract contract CF_Common {\\r\\n  string internal constant _version = \\\"1.0.3\\\";\\r\\n\\r\\n  mapping(address => uint256) internal _balance;\\r\\n  mapping(address => mapping(address => uint256)) internal _allowance;\\r\\n  mapping(address => bool) internal _whitelisted;\\r\\n\\r\\n  bool internal immutable _initialized;\\r\\n\\r\\n  uint8 internal immutable _decimals;\\r\\n  uint24 internal constant _denominator = 1000;\\r\\n  uint24 internal _maxBalancePercent;\\r\\n  uint256 internal _totalSupply;\\r\\n  uint256 internal _totalBurned;\\r\\n  uint256 internal _maxBalanceAmount;\\r\\n\\r\\n  struct Renounced {\\r\\n    bool Whitelist;\\r\\n    bool MaxBalance;\\r\\n  }\\r\\n\\r\\n  Renounced internal _renounced;\\r\\n\\r\\n  function _percentage(uint256 amount, uint256 bps) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return (amount * bps) / (100 * uint256(_denominator));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _timestamp() internal view returns (uint32) {\\r\\n    unchecked {\\r\\n      return uint32(block.timestamp % 2**32);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function denominator() external pure returns (uint24) {\\r\\n    return _denominator;\\r\\n  }\\r\\n\\r\\n  function version() external pure returns (string memory) {\\r\\n    return _version;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"CF_Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./CF_Common.sol\\\";\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nabstract contract CF_Ownable is CF_Common {\\r\\n  address internal _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == msg.sender, \\\"Unauthorized\\\");\\r\\n\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function owner() external view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  function renounceOwnership() external onlyOwner {\\r\\n    _renounced.Whitelist = true;\\r\\n    _renounced.MaxBalance = true;\\r\\n\\r\\n    _transferOwnership(address(0));\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) external onlyOwner {\\r\\n    require(newOwner != address(0));\\r\\n\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  function _transferOwnership(address newOwner) internal {\\r\\n    address oldOwner = _owner;\\r\\n    _owner = newOwner;\\r\\n\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"CF_Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nimport \\\"./CF_Common.sol\\\";\\r\\nimport \\\"./CF_ERC20.sol\\\";\\r\\n\\r\\nabstract contract CF_Burnable is CF_Common, CF_ERC20 {\\r\\n  /// @notice Total amount of tokens burned so far\\r\\n  function totalBurned() external view returns (uint256) {\\r\\n    return _totalBurned;\\r\\n  }\\r\\n\\r\\n  function burn(uint256 amount) external {\\r\\n    _burn(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function burnFrom(address account, uint256 amount) external {\\r\\n    _spendAllowance(account, msg.sender, amount);\\r\\n    _burn(account, amount);\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) internal virtual {\\r\\n    require(_balance[account] >= amount, \\\"Exceeds balance\\\");\\r\\n\\r\\n    unchecked {\\r\\n      _balance[account] -= amount;\\r\\n      _totalSupply -= amount;\\r\\n      _totalBurned += amount;\\r\\n    }\\r\\n\\r\\n    emit Transfer(account, address(0xdEaD), amount);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"MbaPEPE_ETH.sol\": {\r\n      \"content\": \"/*\\n\\n  MbaPEPE\\n\\n  The only true legend of MbaPEPE on the Ethereum chain. Hala Madrid ! Allez France !\\n  \\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport \\\"./CF_Common.sol\\\";\\nimport \\\"./CF_Ownable.sol\\\";\\nimport \\\"./CF_ERC20.sol\\\";\\nimport \\\"./CF_Recoverable.sol\\\";\\nimport \\\"./CF_Burnable.sol\\\";\\nimport \\\"./CF_Whitelist.sol\\\";\\nimport \\\"./CF_MaxBalance.sol\\\";\\n\\ncontract MbaPEPE_ETH is CF_Common, CF_Ownable, CF_ERC20, CF_Recoverable, CF_Burnable, CF_Whitelist, CF_MaxBalance {\\n  constructor() {\\n    _name = unicode\\\"MbaPEPE\\\";\\n    _symbol = unicode\\\"MPEPE\\\";\\n    _decimals = 18;\\n    _totalSupply = 201219980000000000000000000000; // 201,219,980,000 MPEPE\\n    _transferOwnership(0x9E14f8D80Df1c1806cDDe24c672b2d052418AFc7);\\n    _transferInitialSupply(0x9E14f8D80Df1c1806cDDe24c672b2d052418AFc7, 100000); // 100%\\n    _initialWhitelist([ 0x9E14f8D80Df1c1806cDDe24c672b2d052418AFc7 ]);\\n\\n    _initialized = true;\\n  }\\n\\n  function _transfer(address from, address to, uint256 amount) internal virtual override {\\n    if (to == address(0xdEaD)) {\\n      _burn(from, amount);\\n\\n      return;\\n    }\\n\\n    if (amount > 0 && !_whitelisted[from] && !_whitelisted[to] && from != address(this) && to != address(this)) {\\n      unchecked {\\n        require(_maxBalanceAmount == 0 || to == address(this) || _balance[to] + amount <= _maxBalanceAmount, \\\"Exceeds maxBalance\\\");\\n      }\\n    }\\n\\n    super._transfer(from, to, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal virtual override {\\n    super._burn(account, amount);\\n\\n    _setMaxBalancePercent(_maxBalancePercent);\\n  }\\n\\n  function _transferInitialSupply(address account, uint24 percent) private {\\n    require(!_initialized);\\n\\n    uint256 amount = _percentage(_totalSupply, uint256(percent));\\n\\n    _balance[account] = amount;\\n\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /// @notice Returns a list specifying the renounce status of each feature\\n  function renounced() external view returns (bool Whitelist, bool MaxBalance) {\\n    return (_renounced.Whitelist, _renounced.MaxBalance);\\n  }\\n\\n  /// @notice Returns basic information about this Smart-Contract\\n  function info() external view returns (string memory name, string memory symbol, uint8 decimals, address owner, uint256 totalSupply, string memory version) {\\n    return (_name, _symbol, _decimals, _owner, _totalSupply, _version);\\n  }\\n\\n  receive() external payable { }\\n  fallback() external payable { }\\n}\\n\\n/*\\n   ________          _       ______           __                  \\n  / ____/ /_  ____ _(_)___  / ____/___ ______/ /_____  _______  __\\n / /   / __ \\\\/ __ `/ / __ \\\\/ /_  / __ `/ ___/ __/ __ \\\\/ ___/ / / /\\n/ /___/ / / / /_/ / / / / / __/ / /_/ / /__/ /_/ /_/ / /  / /_/ / \\n\\\\____/_/ /_/\\\\__,_/_/_/ /_/_/    \\\\__,_/\\\\___/\\\\__/\\\\____/_/   \\\\__, /  \\n                                                         /____/   \\n\\n  Smart-Contract generated by ChainFactory.app\\n\\n  By using this Smart-Contract generated by ChainFactory.app, you\\n  acknowledge and agree that ChainFactory shall not be liable for\\n  any damages arising from the use of this Smart-Contract,\\n  including but not limited to any damages resulting from any\\n  malicious or illegal use of the Smart-Contract by any third\\n  party or by the owner.\\n\\n  The owner of the Smart-Contract generated by ChainFactory.app\\n  agrees not to misuse the Smart-Contract, including but not\\n  limited to:\\n\\n  - Using the Smart-Contract to engage in any illegal or\\n    fraudulent activity, including but not limited to scams,\\n    theft, or money laundering.\\n\\n  - Using the Smart-Contract in any manner that could cause harm\\n    to others, including but not limited to disrupting financial\\n    markets or causing financial loss to others.\\n\\n  - Using the Smart-Contract to infringe upon the intellectual\\n    property rights of others, including but not limited to\\n    copyright, trademark, or patent infringement.\\n\\n  The owner of the Smart-Contract generated by ChainFactory.app\\n  acknowledges that any misuse of the Smart-Contract may result in\\n  legal action, and agrees to indemnify and hold harmless\\n  ChainFactory from any and all claims, damages, or expenses\\n  arising from any such misuse.\\n\\n*/\\n\"\r\n    },\r\n    \"CF_Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nimport \\\"./CF_Common.sol\\\";\\r\\nimport \\\"./CF_Ownable.sol\\\";\\r\\n\\r\\nabstract contract CF_Whitelist is CF_Common, CF_Ownable {\\r\\n  event Whitelisted(address indexed account, bool status);\\r\\n  event RenouncedWhitelist();\\r\\n\\r\\n  /// @notice Permanently renounce and prevent the owner from being able to update the whitelist\\r\\n  /// @dev Existing entries will continue to be effective\\r\\n  function renounceWhitelist() external onlyOwner {\\r\\n    _renounced.Whitelist = true;\\r\\n\\r\\n    emit RenouncedWhitelist();\\r\\n  }\\r\\n\\r\\n  /// @notice Check if an address is whitelisted\\r\\n  /// @param account Address to check\\r\\n  function isWhitelisted(address account) external view returns (bool) {\\r\\n    return _whitelisted[account];\\r\\n  }\\r\\n\\r\\n  /// @notice Add or remove an address from the whitelist\\r\\n  /// @param status True for adding, False for removing\\r\\n  function whitelist(address account, bool status) public onlyOwner {\\r\\n    _whitelist(account, status);\\r\\n  }\\r\\n\\r\\n  function _whitelist(address account, bool status) internal {\\r\\n    require(!_renounced.Whitelist);\\r\\n    require(account != address(0) && account != address(0xdEaD));\\r\\n\\r\\n\\r\\n    _whitelisted[account] = status;\\r\\n\\r\\n    emit Whitelisted(account, status);\\r\\n  }\\r\\n\\r\\n  /// @notice Add or remove multiple addresses from the whitelist\\r\\n  /// @param status True for adding, False for removing\\r\\n  function whitelist(address[] calldata accounts, bool status) external onlyOwner {\\r\\n    unchecked {\\r\\n      uint256 cnt = accounts.length;\\r\\n\\r\\n      for (uint256 i; i < cnt; i++) { _whitelist(accounts[i], status); }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _initialWhitelist(address[1] memory accounts) internal {\\r\\n    require(!_initialized);\\r\\n\\r\\n    unchecked {\\r\\n      for (uint256 i; i < 1; i++) { _whitelist(accounts[i], true); }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"CF_MaxBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nimport \\\"./CF_Common.sol\\\";\\r\\nimport \\\"./CF_Ownable.sol\\\";\\r\\n\\r\\nabstract contract CF_MaxBalance is CF_Common, CF_Ownable {\\r\\n  event SetMaxBalancePercent(uint24 percent);\\r\\n  event RenouncedMaxBalance();\\r\\n\\r\\n  /// @notice Permanently renounce and prevent the owner from being able to update the max. balance\\r\\n  /// @dev Existing settings will continue to be effective\\r\\n  function renounceMaxBalance() external onlyOwner {\\r\\n    _renounced.MaxBalance = true;\\r\\n\\r\\n    emit RenouncedMaxBalance();\\r\\n  }\\r\\n\\r\\n  /// @notice Percentage of the max. balance per wallet, depending on total supply\\r\\n  function getMaxBalancePercent() external view returns (uint24) {\\r\\n    return _maxBalancePercent;\\r\\n  }\\r\\n\\r\\n  /// @notice Set the max. percentage of a wallet balance, depending on total supply\\r\\n  /// @param percent Desired percentage, multiplied by denominator (min. 0.1% of total supply, 0 to disable)\\r\\n  function setMaxBalancePercent(uint24 percent) external onlyOwner {\\r\\n    require(!_renounced.MaxBalance);\\r\\n\\r\\n    unchecked {\\r\\n      require(percent == 0 || (percent >= 100 && percent <= 100 * _denominator));\\r\\n    }\\r\\n\\r\\n    _setMaxBalancePercent(percent);\\r\\n\\r\\n    emit SetMaxBalancePercent(percent);\\r\\n  }\\r\\n\\r\\n  function _setMaxBalancePercent(uint24 percent) internal {\\r\\n    _maxBalancePercent = percent;\\r\\n    _maxBalanceAmount = percent > 0 ? _percentage(_totalSupply, uint256(percent)) : 0;\\r\\n\\r\\n    if (!_initialized) { emit SetMaxBalancePercent(percent); }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"CF_Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.25;\\n\\nimport \\\"./CF_Common.sol\\\";\\nimport \\\"./CF_Ownable.sol\\\";\\n\\nabstract contract CF_Recoverable is CF_Common, CF_Ownable {\\n  /// @notice Recovers a misplaced amount of an ERC-20 token sitting in the contract balance\\n  /// @dev Beware of scam tokens!\\n  /// @param token Address of the ERC-20 token\\n  /// @param to Recipient\\n  /// @param amount Amount to be transferred\\n  function recoverERC20(address token, address to, uint256 amount) external onlyOwner {\\n    IERC20(token).transfer(to, amount);\\n  }\\n\\n  /// @notice Recovers a misplaced amount of native tokens sitting in the contract balance\\n  /// @param to Recipient\\n  /// @param amount Amount of native tokens to be transferred\\n  function recoverNative(address payable to, uint256 amount) external onlyOwner {\\n    (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n\\n    require(success);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"runs\": 200,\r\n      \"enabled\": true\r\n    },\r\n    \"evmVersion\": \"cancun\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RenouncedMaxBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RenouncedWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"percent\",\"type\":\"uint24\"}],\"name\":\"SetMaxBalancePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBalancePercent\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMaxBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"Whitelist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"MaxBalance\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"percent\",\"type\":\"uint24\"}],\"name\":\"setMaxBalancePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MbaPEPE_ETH", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "cancun", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}