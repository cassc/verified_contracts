{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nhttps://linktr.ee/predictcrypto\r\n\r\n*/\r\n\r\npragma solidity =0.8.24;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    address internal ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(ZERO);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != ZERO, \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract PREDICTCRYPTO is IERC20, Ownable {\r\n    address private immutable WETH;\r\n    address public immutable pair;\r\n    IDEXRouter public constant router =\r\n        IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    string private constant _name = \"Predict Crypto\";\r\n    string private constant _symbol = \"PREAI\";\r\n    uint8 private constant _decimals = 18;\r\n    uint8 private constant ANTI_BOT_BLOCKS = 100;\r\n    uint16 private constant ANTI_BOT_BUY_AI = 900;\r\n    uint16 private constant ANTI_BOT_SELL_AI = 2400;\r\n    uint16 private constant ANTI_BOT_BUY_LP = 100;\r\n    uint16 private constant ANTI_BOT_SELL_LP = 100;\r\n    uint16 private constant MAX_FEE = 500;\r\n    uint16 private constant DENOMINATOR = 10000;\r\n    uint256 private constant TOTAL_SUPPLY = 1 * 10 ** 10 * (10 ** _decimals);\r\n    uint256 private constant MINIMUM_SWAP_LIMIT = 10_000 ether;\r\n\r\n    uint256 public swapThreshold = TOTAL_SUPPLY / 1000; // Starting at 0.1%\r\n    uint256[2] public taxesCollected = [0, 0];\r\n\r\n    uint32 public launchedAt;\r\n    address public liquidityPool = DEAD;\r\n    // All fees are in basis points (100 = 1%)\r\n    uint16 private _buyAi = 300;\r\n    uint16 private _sellAi = 300;\r\n    uint16 private _buyLP = 200;\r\n    uint16 private _sellLP = 200;\r\n    address public marketingWallet = 0x41267eE8F02312bd9AF8622806b092892974304a;\r\n    bool private _inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingOpen = false;\r\n    bool public isBlacklistFunctionAvailable = true;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _blacklist;\r\n    mapping(address => bool) public isFeeExempt;\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    //Event Logs\r\n    event LiquidityPoolUpdated(address indexed _newPool);\r\n    event MarketingWalletUpdated(address indexed _newWallet);\r\n    event BuyFeesUpdated(uint16 _newAi, uint16 _newLp);\r\n    event SellFeesUpdated(uint16 _neAi, uint16 _newLp);\r\n    event StuckETHCleared(uint256 _amount);\r\n    event StuckTokensCleared(address _token, uint256 _amount);\r\n    event FeeExemptionChanged(address indexed _exemptWallet, bool _exempt);\r\n    event SwapbackSettingsChanged(bool _enabled, uint256 _newSwapbackAmount);\r\n    event Blacklisted(address indexed _wallet, bool _status);\r\n    event BlacklistDisabled();\r\n    event LaunchSequenceStarted();\r\n    event StuckETH(uint256 _amount);\r\n\r\n    error InvalidAddress();\r\n    error InvalidAmount();\r\n    error InvalidFee();\r\n    error Unavailable();\r\n    error TransferFromZeroAddress();\r\n    error TransferToZeroAddress();\r\n\r\n    constructor() {\r\n        WETH = router.WETH();\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[marketingWallet] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        _balances[owner()] = TOTAL_SUPPLY;\r\n\r\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\r\n    }\r\n\r\n    function blacklistAddress(\r\n        address _wallet,\r\n        bool _status\r\n    ) external onlyOwner {\r\n        if (!isBlacklistFunctionAvailable) revert Unavailable();\r\n        if (_wallet == address(0) || _wallet == pair) revert InvalidAddress();\r\n        _blacklist[_wallet] = _status;\r\n        emit Blacklisted(_wallet, _status);\r\n    }\r\n\r\n    function disableBlacklist() external onlyOwner {\r\n        /// @dev permanently disables any future changes to the blacklist\r\n        if (!isBlacklistFunctionAvailable) revert Unavailable();\r\n        isBlacklistFunctionAvailable = false;\r\n        emit BlacklistDisabled();\r\n    }\r\n\r\n    function launchSequence() external onlyOwner {\r\n        if (launchedAt != 0) revert Unavailable();\r\n        launchedAt = uint32(block.number);\r\n        tradingOpen = true;\r\n        emit LaunchSequenceStarted();\r\n    }\r\n\r\n    function getCirculatingSupply() external view returns (uint256) {\r\n        return TOTAL_SUPPLY - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(\r\n        address holder,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function baseBuyFee() external view returns (uint16) {\r\n        return _buyAi + _buyLP;\r\n    }\r\n\r\n    function baseSellFee() external view returns (uint16) {\r\n        return _sellAi + _sellLP;\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    //Transfer Functions\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        if (sender == address(0)) revert TransferFromZeroAddress();\r\n        if (recipient == address(0)) revert TransferToZeroAddress();\r\n        if (amount == 0) revert InvalidAmount();\r\n        if (_inSwapAndLiquify) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (_blacklist[sender] || _blacklist[recipient]) revert Unavailable();\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (!tradingOpen) revert Unavailable();\r\n        _balances[sender] -= amount;\r\n        uint256 finalAmount = amount;\r\n        if (sender == pair) {\r\n            finalAmount = _handleBuyTax(sender, amount);\r\n        } else if (recipient == pair) {\r\n            if (\r\n                swapAndLiquifyEnabled &&\r\n                taxesCollected[0] + taxesCollected[1] >= swapThreshold\r\n            ) {\r\n                _swapBack();\r\n            }\r\n            finalAmount = _handleSellTax(sender, amount);\r\n        }\r\n        _balances[recipient] += finalAmount;\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    //Tax Functions\r\n\r\n    function _handleBuyTax(\r\n        address sender,\r\n        uint256 amount\r\n    ) private returns (uint256) {\r\n        bool chargeBaseFee = _chargeBaseFee();\r\n        uint16 buyAi = chargeBaseFee ? _buyAi : ANTI_BOT_BUY_AI;\r\n        uint16 buyLP = chargeBaseFee ? _buyLP : ANTI_BOT_BUY_LP;\r\n        uint256 aiTaxB = (amount * buyAi) / DENOMINATOR;\r\n        uint256 lpTaxB = (amount * buyLP) / DENOMINATOR;\r\n        return amount - _handleTaxCollection(sender, aiTaxB, lpTaxB);\r\n    }\r\n\r\n    function _handleSellTax(\r\n        address sender,\r\n        uint256 amount\r\n    ) private returns (uint256) {\r\n        bool chargeBaseFee = _chargeBaseFee();\r\n        uint16 sellAi = chargeBaseFee ? _sellAi : ANTI_BOT_SELL_AI;\r\n        uint16 sellLP = chargeBaseFee ? _sellLP : ANTI_BOT_SELL_LP;\r\n        uint256 aiTaxS = (amount * sellAi) / DENOMINATOR;\r\n        uint256 lpTaxS = (amount * sellLP) / DENOMINATOR;\r\n        return amount - _handleTaxCollection(sender, aiTaxS, lpTaxS);\r\n    }\r\n\r\n    function _chargeBaseFee() private view returns (bool) {\r\n        /// @dev launchedAt will always be > 0 at this point\r\n        return launchedAt + ANTI_BOT_BLOCKS < block.number;\r\n    }\r\n\r\n    function _handleTaxCollection(\r\n        address sender,\r\n        uint256 ai,\r\n        uint256 lp\r\n    ) private returns (uint256 tax) {\r\n        taxesCollected[0] += ai;\r\n        taxesCollected[1] += lp;\r\n        tax = ai + lp;\r\n        _balances[address(this)] += tax;\r\n        emit Transfer(sender, address(this), tax);\r\n        return tax;\r\n    }\r\n\r\n    //LP and Swapback Functions\r\n    function _swapTokensForETH(\r\n        uint256 tokenAmount\r\n    ) private lockTheSwap returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        approve(address(this), tokenAmount);\r\n        uint256 ethBefore = address(this).balance;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        return address(this).balance - ethBefore;\r\n    }\r\n\r\n    function _addLiquidity(\r\n        uint256 tokenAmount,\r\n        uint256 ETHAmount\r\n    ) private lockTheSwap {\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityPool,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapBack() private {\r\n        uint256 aiShare = taxesCollected[0];\r\n        uint256 lpShare = taxesCollected[1];\r\n        uint256 totalTax = aiShare + lpShare;\r\n        uint256 tokensForLiquidity = lpShare / 2;\r\n        uint256 amountToSwap = totalTax - tokensForLiquidity;\r\n\r\n        uint256 ethReceived = _swapTokensForETH(amountToSwap);\r\n\r\n        uint256 ETHForLiquidity = (ethReceived * tokensForLiquidity) /\r\n            amountToSwap;\r\n        uint256 ETHForAi = ethReceived - ETHForLiquidity;\r\n\r\n        if (ETHForAi != 0) {\r\n            _transferETHToMarketing(ETHForAi);\r\n        }\r\n        if (ETHForLiquidity != 0) {\r\n            _addLiquidity(tokensForLiquidity, ETHForLiquidity);\r\n        }\r\n        delete taxesCollected;\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        _swapBack();\r\n    }\r\n\r\n    // Update/Change Functions\r\n\r\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n        emit FeeExemptionChanged(holder, exempt);\r\n    }\r\n\r\n    function setMarketingWallet(address newMarketingWallet) external onlyOwner {\r\n        if (newMarketingWallet == address(0)) revert InvalidAddress();\r\n        isFeeExempt[marketingWallet] = false;\r\n        marketingWallet = newMarketingWallet;\r\n        isFeeExempt[newMarketingWallet] = true;\r\n        emit MarketingWalletUpdated(newMarketingWallet);\r\n    }\r\n\r\n    function setLiquidityPool(address newLiquidityPool) external onlyOwner {\r\n        if (newLiquidityPool == address(0)) revert InvalidAddress();\r\n        liquidityPool = newLiquidityPool;\r\n        emit LiquidityPoolUpdated(newLiquidityPool);\r\n    }\r\n\r\n    function changeSwapBackSettings(\r\n        bool enableSwapback,\r\n        uint256 newSwapbackLimit\r\n    ) external onlyOwner {\r\n        if (newSwapbackLimit < MINIMUM_SWAP_LIMIT) revert InvalidAmount();\r\n        swapAndLiquifyEnabled = enableSwapback;\r\n        swapThreshold = newSwapbackLimit;\r\n        emit SwapbackSettingsChanged(enableSwapback, newSwapbackLimit);\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint16 newBuyAiFee,\r\n        uint16 newBuyLpFee,\r\n        uint16 newSellAiFee,\r\n        uint16 newSellLpFee\r\n    ) external onlyOwner {\r\n        uint16 totalNewBuyFee = newBuyAiFee + newBuyLpFee;\r\n        uint16 totalNewSellFee = newSellAiFee + newSellLpFee;\r\n        if (totalNewBuyFee > MAX_FEE || totalNewSellFee > MAX_FEE)\r\n            revert InvalidFee();\r\n        _buyAi = newBuyAiFee;\r\n        _buyLP = newBuyLpFee;\r\n        _sellAi = newSellAiFee;\r\n        _sellLP = newSellLpFee;\r\n        emit BuyFeesUpdated(newBuyAiFee, newBuyLpFee);\r\n        emit SellFeesUpdated(newSellAiFee, newSellLpFee);\r\n    }\r\n\r\n    function clearStuckETH() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance == 0) revert InvalidAmount();\r\n        _transferETHToMarketing(contractETHBalance);\r\n        emit StuckETHCleared(contractETHBalance);\r\n    }\r\n\r\n    function clearStuckTokens(IERC20 token) external onlyOwner {\r\n        if (address(token) == address(0)) revert InvalidAddress();\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (balance == 0) revert InvalidAmount();\r\n        if (address(token) == address(this)) {\r\n            delete taxesCollected;\r\n        }\r\n        token.transfer(marketingWallet, balance);\r\n        emit StuckTokensCleared(address(token), balance);\r\n    }\r\n\r\n    function _transferETHToMarketing(uint256 amount) private {\r\n        (bool success, ) = marketingWallet.call{value: amount}(\"\");\r\n        if (!success) {\r\n            /// @dev owner can claim ETH via clearStuckETH()\r\n            emit StuckETH(amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unavailable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BlacklistDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_newAi\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_newLp\",\"type\":\"uint16\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_exemptWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LaunchSequenceStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_neAi\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_newLp\",\"type\":\"uint16\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StuckETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StuckETHCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StuckTokensCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newSwapbackAmount\",\"type\":\"uint256\"}],\"name\":\"SwapbackSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBuyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSellFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapbackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clearStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBlacklistFunctionAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taxesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newBuyAiFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newBuyLpFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newSellAiFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newSellLpFee\",\"type\":\"uint16\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PREDICTCRYPTO", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26022cda82d067f03c2ca264084db5d503de4fc9e0700d3361d3178dae57640b"}