{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n    import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n    import \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n    import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n    import {IStakingContract} from \\\"./IStakingContract.sol\\\";\\n\\t\\ncontract StakingContract is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\tIERC20 public token;\\n    IERC20 public stakingToken;\\n    uint256 public currentPrice;\\n    uint256 private _batchSize;\\n    address public owner;\\n    mapping(address => bool) public isStaker;\\n    mapping(address => uint256) private stakerIndex;\\n    mapping(address => StakerInfo) public stakers;\\n    mapping(address => Stake) public stakes;\\n    address[] public activeStakers;\\n\\tmapping (address => Stakeholder) public stakeholders;\\n    uint256 public constant annualInterestRate = 100;\\n    uint256 public constant basisPoint = 10000;\\n    uint256 public constant secondsInYear = 365 * 24 * 60 * 60;\\n/**\\n * @title Stake\\n * @dev Structure to store stake information.\\n */\\nstruct Stake {\\n    // The amount staked.\\n    uint256 amount;\\n    \\n    // Timestamp when staking started.\\n    uint256 stakingTimestamp;\\n    \\n    // The amount in USDT staked.\\n    uint256 amountInUSDT;\\n    \\n    // Staking period in seconds.\\n    uint256 stakingPeriod;\\n}\\n\\n/**\\n * @title StakerInfo\\n * @dev Structure to store information about stakers.\\n */\\nstruct StakerInfo {\\n    // Index of the staker.\\n    uint256 index;\\n    \\n    // Flag indicating staker's activity.\\n    bool isActive;\\n}\\n\\n/**\\n * @title Stakeholder\\n * @dev Structure to store information about a stakeholder.\\n */\\nstruct Stakeholder {\\n    // Balance of the stakeholder.\\n    uint balance;\\n    \\n    // Accrued interest on the stake.\\n    uint accruedInterest;\\n    \\n    // Flag indicating the existence of the stakeholder.\\n    bool exists;\\n}\\n\\n/*\\n * @title Constructor\\n * @dev Initializes the contract with the specified token address.\\n * @param _tokenAddress The address of the ERC20 token contract.\\n */\\nconstructor(address _tokenAddress) {\\n    // Set the contract owner to the sender of the transaction.\\n    owner = msg.sender;\\n    \\n    // Initialize the token contract with the provided address.\\n    token = IERC20(_tokenAddress);\\n}\\n\\n/*\\n * @title onlyOwner Modifier\\n * @dev Modifier to restrict access to functions only to the contract owner.\\n * @dev Reverts the transaction if the sender is not the contract owner.\\n */\\nmodifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Not the contract owner\\\");\\n    _;\\n}\\n\\n/*\\n * @title depositTokens\\n * @dev Deposits tokens into the contract.\\n * @param amount The amount of tokens to deposit.\\n * @dev Only accessible by the contract owner.\\n * @dev Reverts the transaction if the token transfer fails.\\n */\\nfunction depositTokens(uint256 amount) external onlyOwner {\\n    require(token.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\n}\\n\\n/*\\n * @title withdrawTokens\\n * @dev Withdraws tokens from the contract.\\n * @param amount The amount of tokens to withdraw.\\n * @dev Only accessible by the contract owner.\\n * @dev Reverts the transaction if the token transfer fails.\\n */\\nfunction withdrawTokens(uint256 amount) external onlyOwner {\\n    require(token.transfer(msg.sender, amount), \\\"Transfer failed\\\");\\n}\\n\\n/*\\n * @title setTokenAddress\\n * @dev Sets a new token address for the contract.\\n * @param _newTokenAddress The address of the new ERC20 token contract.\\n * @dev Only accessible by the contract owner.\\n * @dev Reverts the transaction if the new token address is the zero address.\\n */\\nfunction setTokenAddress(address _newTokenAddress) external onlyOwner {\\n    require(_newTokenAddress != address(0), \\\"New token address cannot be the zero address\\\");\\n    token = IERC20(_newTokenAddress);\\n}\\n\\n/*\\n * @title transferOwnership\\n * @dev Transfers ownership of the contract to a new address.\\n * @param newOwner The address of the new owner.\\n * @dev Only accessible by the contract owner.\\n * @dev Reverts the transaction if the new owner address is the zero address.\\n */\\nfunction transferOwnership(address newOwner) public onlyOwner {\\n    require(newOwner != address(0), \\\"New owner cannot be the zero address\\\");\\n    owner = newOwner;\\n}\\n\\n/*\\n * @title setStakingToken\\n * @dev Sets the staking token for the contract.\\n * @param _stakingToken The address of the staking token contract.\\n * @dev Reverts the transaction if the staking token is already set.\\n * @dev This function can be called by anyone.\\n */\\nfunction setStakingToken(IERC20 _stakingToken) external {\\n    require(address(stakingToken) == address(0), \\\"Staking token is already set\\\");\\n    stakingToken = _stakingToken;\\n}\\n\\n/*\\n * @title stake\\n * @dev Allows a user to stake tokens for a specified period.\\n * @param _amount The amount of tokens to stake.\\n * @param _stakingPeriod The duration of the stake in seconds.\\n * @dev Reverts the transaction if the amount is not greater than 0 or if the staking token allowance is insufficient.\\n * @dev Emits a Staked event after successfully staking tokens.\\n */\\nfunction stake(uint256 _amount, uint256 _stakingPeriod) external nonReentrant {\\n    require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n    require(stakingToken.allowance(msg.sender, address(this)) >= _amount, \\\"Insufficient staking\\\");\\n    \\n    // Calculate the amount in USDT based on the current price\\n    uint256 amountInUSDT = (_amount * currentPrice) / 1e18;\\n\\n    // Get staker information\\n    StakerInfo storage staker = stakers[msg.sender];\\n\\n    if (staker.isActive) {\\n        // Update existing stake\\n        Stake storage userStake = stakes[msg.sender];\\n        userStake.amount += _amount;\\n        userStake.amountInUSDT += amountInUSDT;\\n        // Update stakingTimestamp and stakingPeriod\\n        userStake.stakingTimestamp = block.timestamp;\\n        userStake.stakingPeriod = _stakingPeriod;\\n    } else {\\n        // Create a new stake\\n        staker.isActive = true;\\n        staker.index = activeStakers.length;\\n        activeStakers.push(msg.sender);\\n        stakerIndex[msg.sender] = activeStakers.length - 1;\\n        stakes[msg.sender] = Stake({\\n            amount: _amount,\\n            stakingTimestamp: block.timestamp,\\n            amountInUSDT: amountInUSDT,\\n            stakingPeriod: _stakingPeriod\\n        });\\n    }\\n\\n    // Transfer tokens from the user to the contract\\n    stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n    \\n    // Emit Staked event\\n    emit Staked(msg.sender, _amount, amountInUSDT, block.timestamp, _stakingPeriod);\\n}\\n\\n/*\\n * @title unstake\\n * @dev Allows a staker to unstake their tokens.\\n * @dev Reverts the transaction if the sender is not a staker.\\n * @dev Calls the internal _claimAndUnstake function to process the unstaking.\\n */\\nfunction unstake() external nonReentrant {\\n    require(isStaker[msg.sender], \\\"Not a staker\\\");\\n    _claimAndUnstake(msg.sender);\\n}\\n\\n\\n/*\\n * @title _claimAndUnstake\\n * @dev Internal function to claim rewards and unstake tokens for a specified user.\\n * @param _user The address of the user.\\n * @return rewardInTokens The amount of rewards claimed in tokens.\\n * @dev Sets the user as a non-staker, removes their staking information, and emits an Unstaked event.\\n */\\nfunction _claimAndUnstake(address _user) private returns (uint256 rewardInTokens) {\\n    // Calculate and transfer rewards to the user\\n    rewardInTokens = _calculateAndTransferReward(_user);\\n    \\n    // Mark the user as a non-staker\\n    isStaker[_user] = false;\\n    \\n    // Remove the user from the active stakers list\\n    _removeStaker(_user);\\n    \\n    // Emit Unstaked event\\n    emit Unstaked(_user, stakes[_user].amount, rewardInTokens, block.timestamp);\\n}\\n\\n/*\\n * @title _removeStaker\\n * @dev Internal function to remove a staker from the active stakers list.\\n * @param _staker The address of the staker to be removed.\\n * @dev Updates the active stakers list and staker index mapping.\\n */\\nfunction _removeStaker(address _staker) internal {\\n    // Get the index of the staker in the active stakers list\\n    uint256 index = stakerIndex[_staker];\\n    \\n    // If the staker is not the last one in the list, move the last staker to its position\\n    if (index < activeStakers.length - 1) {\\n        address lastStaker = activeStakers[activeStakers.length - 1];\\n        activeStakers[index] = lastStaker;\\n        stakerIndex[lastStaker] = index;\\n    }\\n    \\n    // Remove the last staker from the list\\n    activeStakers.pop();\\n    \\n    // Delete the staker index mapping\\n    delete stakerIndex[_staker];\\n}\\n\\n/*\\n * @title _calculateAndTransferReward\\n * @dev Internal function to calculate and transfer rewards to a specified user.\\n * @param _user The address of the user.\\n * @return totalAmountInTokens The total amount of tokens to be transferred as rewards.\\n * @dev Reverts the transaction if no active stake is found for the user, if there are insufficient funds in the contract, or if there are insufficient tokens in the user's balance.\\n * @dev Transfers the total amount of tokens to the user and deletes their stake information.\\n */\\nfunction _calculateAndTransferReward(address _user) private returns (uint256) {\\n    // Get the user's stake information\\n    Stake storage userStake = stakes[_user];\\n    \\n    // Ensure that the user has an active stake\\n    require(userStake.amount > 0, \\\"No active stake found\\\");\\n\\n    // Calculate the total amount of tokens to be transferred as rewards\\n    uint256 totalAmountInTokens = userStake.amount;\\n    \\n    // Ensure that the contract has sufficient funds to cover the reward\\n    require(stakingToken.balanceOf(address(this)) >= totalAmountInTokens, \\\"Insufficient funds in contract\\\");\\n    \\n    // Ensure that the user has sufficient tokens in their balance to receive the reward\\n    require(stakingToken.balanceOf(_user) >= totalAmountInTokens, \\\"Insufficient tokens in balance\\\");\\n\\t\\n    // Transfer the total amount of tokens to the user\\n    stakingToken.safeTransfer(_user, totalAmountInTokens);\\n    \\n    // Delete the user's stake information\\n    delete stakes[_user];\\n\\n    return totalAmountInTokens;\\n}\\n\\n/*\\n * @title calculateTotalInterestAndUpdate\\n * @dev Calculates the total interest accrued for active stakers and updates their stake information.\\n * @param _currentPrice The current price of the token in USDT.\\n * @return totalInterest The total interest accrued in tokens.\\n * @dev Only accessible by the main token contract.\\n * @dev Emits an InterestPaid event for each staker who receives interest.\\n */\\nfunction calculateTotalInterestAndUpdate(uint256 _currentPrice) external returns (uint256 totalInterest) {\\n    // Ensure that the caller is the main token contract\\n    require(msg.sender == address(stakingToken), \\\"Only the main token contract\\\");\\n    \\n    // Update the current price of the token\\n    currentPrice = _currentPrice;\\n    \\n    // Initialize total interest to 0\\n    totalInterest = 0;\\n    \\n    // Initialize the start index for batch processing\\n    uint256 startIndex = 0;\\n\\n    // Iterate over active stakers in batches\\n    while (startIndex < activeStakers.length) {\\n        // Calculate the end index for the current batch\\n        uint256 endIndex = startIndex + _batchSize;\\n        if (endIndex > activeStakers.length) {\\n            endIndex = activeStakers.length;\\n        }\\n\\n        // Iterate over stakers in the current batch\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            address staker = activeStakers[i];\\n            Stake storage userStake = stakes[staker];\\n\\n            // Check if the staker has an active stake\\n            if (userStake.amount > 0) {\\n                // Calculate the time duration of the stake\\n                uint256 timeStaked = block.timestamp - userStake.stakingTimestamp;\\n                \\n                // Calculate the interest accrued in USDT\\n                uint256 rewardInUSDT = (userStake.amountInUSDT * annualInterestRate / basisPoint) * timeStaked / secondsInYear;\\n                \\n                // Convert the interest from USDT to tokens based on the current price\\n                uint256 rewardInTokens = (rewardInUSDT * 1e18) / _currentPrice;\\n\\n                // Update the stake information for the staker\\n                userStake.stakingTimestamp = block.timestamp;\\n                userStake.amountInUSDT += rewardInUSDT;\\n                \\n                // Increment the total interest accrued\\n                totalInterest += rewardInTokens;\\n                \\n                // Emit an InterestPaid event for the staker\\n                emit InterestPaid(staker, rewardInTokens);\\n            }\\n        }\\n\\n        // Update the start index for the next batch\\n        startIndex = endIndex;\\n    }\\n\\n    return totalInterest;\\n}\\n\\n/*\\n * @title calculateReward\\n * @dev Calculates the reward accrued for a specified user based on their stake information.\\n * @param _user The address of the user.\\n * @return reward The reward accrued in tokens.\\n * @dev Returns 0 if the user has no active stake or if the staking timestamp is 0.\\n */\\nfunction calculateReward(address _user) public view returns (uint256) {\\n    // Retrieve the stake information for the user\\n    Stake memory userStake = stakes[_user];\\n    \\n    // Check if the user has an active stake\\n    if (userStake.amount == 0 || userStake.stakingTimestamp == 0) {\\n        return 0;\\n    }\\n    \\n    // Calculate the time duration of the stake\\n    uint256 timeStaked = block.timestamp - userStake.stakingTimestamp;\\n    \\n    // Calculate the reward accrued based on the stake information\\n    uint256 reward = (userStake.amountInUSDT * annualInterestRate * timeStaked) / (basisPoint * secondsInYear);\\n    \\n    return reward;\\n}\\n\\n/*\\n * @title InterestPaid\\n * @dev Event emitted when interest is paid to a staker.\\n * @param user The address of the staker.\\n * @param interestAmount The amount of interest paid in tokens.\\n */\\nevent InterestPaid(address indexed user, uint256 interestAmount);\\n\\n/*\\n * @title Staked\\n * @dev Event emitted when tokens are staked by a user.\\n * @param user The address of the user.\\n * @param amount The amount of tokens staked.\\n * @param amountInUSDT The equivalent amount in USDT.\\n * @param timestamp The timestamp when staking occurred.\\n * @param stakingPeriod The duration of the stake in seconds.\\n */\\nevent Staked(address indexed user, uint256 amount, uint256 amountInUSDT, uint256 timestamp, uint256 stakingPeriod);\\n\\n/*\\n * @title Unstaked\\n * @dev Event emitted when tokens are unstaked by a user.\\n * @param user The address of the user.\\n * @param amount The amount of tokens unstaked.\\n * @param reward The reward received by the user.\\n * @param timestamp The timestamp when unstaking occurred.\\n */\\nevent Unstaked(address indexed user, uint256 amount, uint256 reward, uint256 timestamp);\\n}\"\r\n    },\r\n    \"contracts/IStakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n\\ninterface IStakingContract {\\n    function calculateTotalInterestAndUpdate(uint256 currentPrice, uint256 transactionVolume) external returns (uint256);\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"name\":\"InterestPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSDT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"annualInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"name\":\"calculateTotalInterestAndUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsInYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a74fd910a6dcc844ba42839108a7a72aa2ee2c24", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}