{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"remappings\": []\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { Lib } from \\\"./libraries/Lib.sol\\\";\\nimport { TransferHelper } from \\\"./libraries/TransferHelper.sol\\\";\\nimport { IToken } from \\\"./interfaces/IToken.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\nimport { IFactory } from \\\"./interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"./interfaces/IPair.sol\\\";\\nimport { Router } from \\\"./abstract/Router.sol\\\";\\nimport { IGenerator } from \\\"./interfaces/IGenerator.sol\\\";\\n\\ncontract Factory is Initializable, Router {\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n    * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n    * `onlyInitializing` functions can be used to initialize parent contracts.\\n    * Called only by the Router contract during the creation of the Factory.\\n     */\\n    function initialize(address _generator) external initializer() {\\n        require(_generator != address(0), \\\"F:IA\\\");\\n        generator = _generator;\\n        router = _generator;\\n        WETH = IGenerator(_generator).WRAPPED_ETH();\\n    }\\n\\n    /**\\n     * @dev Create a new pair for two tokens.\\n     */\\n    function createPair(\\n        address tokenA, \\n        address tokenB\\n    ) external returns (address pair) {\\n        pair = IGenerator(generator).createPair(tokenA, tokenB);\\n        allPairs.push(pair);\\n        (address token0, address token1) = Lib.sortsBefore(tokenA, tokenB);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n    \\n    /**\\n     * @dev create a new pair for two tokens with a fee taker.\\n     */\\n    function createSwap2Pair(\\n        address tokenA, \\n        address tokenB,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair) {\\n        pair = IGenerator(generator).createSwap2Pair(tokenA, tokenB, feeTaker, takeFeeIn);\\n        allPairs.push(pair);\\n        (address token0, address token1) = Lib.sortsBefore(tokenA, tokenB);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    /**\\n     * @dev Create a new pair for two tokens with liquidity. The pair may be created with a fee taker.\\n     */\\n    function createPairWithLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountA,\\n        uint amountB,\\n        address to,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair) {\\n        IGenerator gen = IGenerator(generator);\\n        pair = gen.createPairWithLiquidity(tokenA, tokenB, amountA, amountB, to, feeTaker, takeFeeIn);\\n        allPairs.push(pair);\\n        (address token0, address token1) = Lib.sortsBefore(tokenA, tokenB);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        IPair(pair).mint(to);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n\\ninterface IGenerator {\\n    struct Info {\\n        address owner;\\n        uint16 burnFee;\\n        address burnToken;\\n        uint16 teamFee;\\n        address teamAddress;\\n        uint16 lpFee;\\n        address referrer;\\n        uint16 referFee;\\n        uint16 labFee;\\n    }\\n    function allowLoans() external view returns (bool);\\n    function isPair(address) external view returns (bool);\\n    function borrowFee() external view returns (uint16);\\n    function factoryInfo(address) external view returns (Info memory);\\n    function pairFees(address pair) external view returns (Info memory);\\n    function LAB_FEE() external view returns (uint16);\\n    function FEE_DENOMINATOR() external view returns (uint16);\\n    function stables(address) external view returns (bool);\\n    function pairs(address factory, address token0, address token1) external view returns (address);\\n    function getPairs(address[] calldata path) external  view returns (address[] memory _pairs);\\n    function maxSwap2Fee(uint16 f) external view returns (uint16);\\n    function swapInternal(\\n        address[] calldata _pairs,\\n        address caller,\\n        address to\\n    ) external returns (uint256 amountOut);\\n    function WRAPPED_ETH() external view returns (address);\\n    function createPair(\\n        address tokenA, \\n        address tokenB\\n    ) external returns (address pair);\\n     function createSwap2Pair(\\n        address tokenA, \\n        address tokenB,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair);\\n    function createPairWithLiquidity(\\n        address tokenA, \\n        address tokenB,\\n        uint amountA,\\n        uint amountB,\\n        address to,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair);\\n    function isFactory(address) external returns (bool);\\n    function tokens(address) external returns (address[] memory);\\n}\"\r\n    },\r\n    \"contracts/abstract/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IGenerator } from \\\"../interfaces/IGenerator.sol\\\";\\nimport { IPair } from \\\"../interfaces/IPair.sol\\\";\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\nimport { IRouter } from \\\"../interfaces/IRouter.sol\\\";\\nimport { TransferHelper } from \\\"../libraries/TransferHelper.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract Router is IFactory, IRouter {\\n\\n    address public router;\\n    address public generator;\\n    address public WETH;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n    \\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, \\\"E\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n    \\n    address[] public allPairs;\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(address tokenA, address tokenB) public view override(IFactory, IRouter) returns (address) {\\n        return IGenerator(generator).pairs(address(this), tokenA, tokenB);\\n    }\\n\\n    function getPairs(address[] calldata path) public view virtual returns (address[] memory _pairs) {\\n        return IGenerator(generator).getPairs(path);\\n    }\\n\\n    /**\\n     * @dev Gets the amounts that will be returned by pairs created by this contract given an `amountIn` and `caller`.\\n     */\\n    function getAmountsOut(\\n        uint amountIn, \\n        address[] memory path,\\n        address caller\\n    ) external view returns (\\n        uint[] memory\\n    ) {\\n        uint[] memory amounts = new uint[](path.length - 1);\\n        uint l = path.length - 1;\\n        for (uint i; i < l; i++) {\\n            address pair = getPair(path[i],path[i + 1]);\\n            amounts[i] = uint(IPair(pair).amountOut(path[i], i == 0 ? amountIn : amounts[i-1], caller));\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @dev Gets the amounts that will be required by pairs created by this contract given an `amountOut` and `caller`.\\n     */\\n    function getAmountsIn(\\n        uint amountOut, \\n        address[] memory path,\\n        address caller\\n    ) public view returns (\\n        uint[] memory\\n    ) {\\n        uint[] memory amounts = new uint[](path.length - 1);\\n        for (uint i = path.length; i > 1; i--) {\\n            address pair = getPair(path[i - 2],path[i-1]);\\n            amounts[i-2] = uint(IPair(pair).amountIn(path[i-1], i == path.length ? amountOut : amounts[i-1], caller));\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @dev Add liquidity to a pair created by this contract. If the pair does not exist, it will be created.\\n     */\\n     function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (\\n        uint amountA, \\n        uint amountB, \\n        uint liquidity\\n    ) {\\n        IGenerator gen = IGenerator(generator);\\n        address pair = gen.pairs(address(this), tokenA,tokenB);\\n        if (pair == address(0)) pair = IFactory(address(this)).createPair(tokenA, tokenB);\\n        IPair ipair = IPair(pair);\\n        address token0 = ipair.token0();\\n        (uint reserve0, uint reserve1,) = ipair.getReserves();\\n        (uint reserveA, uint reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        bool hasLiquidity = (reserve0 > 0) || (reserve1 > 0);\\n        amountA = hasLiquidity ? amountBDesired * reserveA / reserveB : amountADesired;\\n        amountB = hasLiquidity ? amountADesired * reserveB / reserveA : amountBDesired;\\n        require(amountA <= amountADesired, \\\"IA\\\");\\n        require(amountB <= amountBDesired, \\\"IB\\\");\\n        require(amountA >= amountAMin, \\\"IAA\\\");\\n        require(amountB >= amountBMin, \\\"IBA\\\"); \\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = ipair.mint(to);\\n    }\\n\\n    /**\\n     * @dev Add liquidity to a pair created by this contract with ETH. If the pair does not exist, it will be created.\\n     */\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) returns (\\n        uint amountA, \\n        uint amountB, \\n        uint liquidity\\n    ) {\\n        IGenerator gen = IGenerator(generator);\\n        uint amountADesired = amountTokenDesired;\\n        uint amountAMin = amountTokenMin;\\n        uint amountBDesired = msg.value;\\n        uint amountBMin = amountETHMin;\\n        address pair = gen.pairs(address(this), token, WETH);\\n        if (pair == address(0)) pair = IFactory(address(this)).createPair(WETH, token);\\n        IPair ipair = IPair(pair);\\n        address token0 = ipair.token0();\\n        (uint reserve0, uint reserve1,) = ipair.getReserves();\\n        (uint reserveA, uint reserveB) = token == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        bool hasLiquidity = (reserve0 > 0) || (reserve1 > 0);\\n        amountA = hasLiquidity ? amountBDesired * reserveA / reserveB : amountADesired;\\n        amountB = hasLiquidity ? amountADesired * reserveB / reserveA : amountBDesired;\\n        require(amountA <= amountADesired, \\\"IA\\\");\\n        require(amountB <= amountBDesired, \\\"IB\\\");\\n        require(amountA >= amountAMin, \\\"IAA\\\");\\n        require(amountB >= amountBMin, \\\"IBA\\\");\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountA);\\n        IWETH(WETH).deposit{value: amountB}();\\n        TransferHelper.safeTransfer(WETH, pair, amountB);\\n        liquidity = ipair.mint(to);\\n        if (msg.value > amountB) TransferHelper.safeTransferETH(msg.sender, msg.value - amountB);\\n    }\\n\\n    /**\\n     * @dev Remove liquidity from a pair created by this contract.\\n     */\\n     function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = getPair(tokenA, tokenB);\\n        require(pair != address(0), \\\"F:NE\\\");\\n        TransferHelper.safeTransferFrom(pair, msg.sender, pair, liquidity); // send liquidity to pair\\n        IPair ipair = IPair(pair);\\n        (uint amount0, uint amount1) = ipair.burn(to);\\n        address token0 = ipair.token0();\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"F:IAA\\\");\\n        require(amountB >= amountBMin, \\\"F:IBA\\\");\\n    }\\n\\n    /**\\n     * @dev Remove liquidity from a pair created by this contract and receive ETH.\\n     */\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n\\n\\n    /**\\n     * @dev Internal swap function used by the public swap functions.\\n     */\\n    function _swap(address[] memory pairs, address caller, address to) internal returns (uint) {\\n        return IGenerator(generator).swapInternal(pairs, caller, to);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) {\\n        address[] memory _pairs = getPairs(path);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint amountOut = _swap(_pairs, msg.sender, to);\\n        require(amountOut >= amountOutMin, \\\"IO\\\");\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) {\\n        address[] memory _pairs = getPairs(path);\\n        uint amountIn = getAmountsIn(amountOut, path, msg.sender)[0];\\n        require(amountIn <= amountInMax, \\\"EI\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint _amountOut = _swap(_pairs, msg.sender, to);\\n        require(_amountOut >= amountOut, \\\"IO\\\");\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        if (path[1] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        uint amountIn = getAmountsIn(amountOut, path, msg.sender)[0];\\n        require(amountIn <= amountInMax, \\\"EI\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint _amountOut = _swap(_pairs, msg.sender, address(this));\\n        require(_amountOut >= amountOut, \\\"IO\\\");\\n        IWETH(WETH).withdraw(_amountOut);\\n        TransferHelper.safeTransferETH(to, _amountOut);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) {\\n        if (path[1] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint amountOut = _swap(_pairs, msg.sender, address(this));\\n        require(amountOut >= amountOutMin, \\\"IO\\\");\\n        IWETH(WETH).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) public payable ensure(deadline) {\\n        _swapExactETHForTokens(amountOutMin, path, to);\\n    }\\n\\n    function _swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to) internal {\\n        if (path[0] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        uint value = msg.value;\\n        IWETH(WETH).deposit{value: value}();\\n        TransferHelper.safeTransfer(path[0], _pairs[0], value);\\n        uint amountOut = _swap(_pairs, msg.sender, to);\\n        require(amountOut >= amountOutMin, \\\"IO\\\");\\n    }\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable ensure(deadline) {\\n        if (path[0] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        uint amountIn = getAmountsIn(amountOut, path, msg.sender)[0];\\n        require(msg.value >= amountIn, \\\"EI\\\");\\n        IWETH(WETH).deposit{value: amountIn}();\\n        TransferHelper.safeTransfer(path[0], _pairs[0], amountIn);\\n        if (msg.value > amountIn) TransferHelper.safeTransferETH(msg.sender, msg.value - amountIn);\\n        uint _amountOut = _swap(_pairs, msg.sender, to);\\n        require(_amountOut >= amountOut, \\\"IO\\\");\\n    }\\n\\n     function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n     function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) {\\n        _swapExactETHForTokens(amountOutMin, path, to);\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n     function swapTokensForExactTokensSupportingFeeOnTransferTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        swapTokensForExactTokens(amountOut, amountInMax, path, to, deadline);\\n    }\\n\\n    /**\\n     * @dev Swap tokens for tokens.\\n     * Supports multiple pairs.\\n     */\\n    function swap(\\n        address input,\\n        uint amountIn,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        IPair pair = IPair(__pairs[0]);\\n        bool z = pair.token0() == input;\\n        if (!z && pair.token1() != input) revert(\\\"II\\\");\\n        TransferHelper.safeTransferFrom(input, msg.sender, __pairs[0], amountIn);\\n        uint amountOut = _swap(__pairs, msg.sender, to);\\n        require(amountOut >= minOutput, \\\"IO\\\");\\n    }\\n\\n    /**\\n     * @dev Swap tokens for tokens.\\n     * Supports multiple pairs.\\n     */\\n    function swapWithETH(\\n        address input,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) {\\n        uint amountIn = msg.value;\\n        address weth = WETH;\\n        require(input == weth, \\\"EO\\\");\\n        IPair pair = IPair(__pairs[0]);\\n        bool z = pair.token0() == input;\\n        if (!z && pair.token1() != input) revert(\\\"II\\\");\\n        IWETH(weth).deposit{value: amountIn}();\\n        TransferHelper.safeTransfer(input, __pairs[0], amountIn);\\n        uint amountOut = _swap(__pairs, msg.sender, to);\\n        require(amountOut >= minOutput, \\\"IO\\\");\\n    }\\n\\n    /**\\n     * @dev Swap tokens for tokens.\\n     * Supports multiple pairs.\\n     */\\n    function swapForETH(\\n        address input,\\n        uint amountIn,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        IPair pair = IPair(__pairs[0]);\\n        bool z = pair.token0() == input;\\n        if (!z && pair.token1() != input) revert(\\\"II\\\");\\n        address weth = WETH;\\n        pair = IPair(__pairs[__pairs.length - 1]);\\n        z = pair.token0() == weth;\\n        if (!z && pair.token1() != weth) revert(\\\"EO\\\");\\n        TransferHelper.safeTransferFrom(input, msg.sender, __pairs[0], amountIn);\\n        uint amountOut = _swap(__pairs, msg.sender, address(this));\\n        require(amountOut >= minOutput, \\\"IO\\\");\\n        IWETH(weth).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    struct Fees {\\n        uint amount0;\\n        uint amount1;\\n    }\\n    function collect(address, address) external;\\n    function feeBalances(address) external view returns (Fees memory);\\n    function initialize(address factory, address token0, address token1, address _feeTaker, address _takeFeeIn) external;\\n    function amountIn(address output, uint _amountOut, address caller) external view returns (uint _amountIn);\\n    function amountOut(address input, uint _amountIn, address caller) external view returns (uint _amountOut);\\n    function swap(\\n        address to,\\n        address caller,\\n        address factory\\n    ) external returns (uint);\\n    function borrow(address to, uint _amountOut, bool isToken0, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (\\n        uint112 _reserve0, \\n        uint112 _reserve1, \\n        uint32 _blockTimestampLast\\n    );\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function factory() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IFactory {\\n    function router() external view returns (address);\\n    function initialize(address) external;\\n    function allPairs(uint) external view returns (address);\\n    function getPair(address tokenA, address tokenB) external view returns (address);\\n    function allPairsLength() external view returns (uint);\\n    function createPair(\\n        address tokenA, \\n        address tokenB\\n    ) external returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function balanceOf(address account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IToken {\\n    function addPair(address pair, address token) external;\\n    function handleFee() external;\\n    function getTotalFee(address) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n) internal {\\n    // bytes4(keccak256(bytes('approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper::safeApprove: approve failed\\\"\\n    );\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: transferFrom failed\\\"\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value:value}(\\\"\\\");\\n    require(success, \\\"Transfer failed.\\\");\\n  }\\n}\"\r\n    },\r\n    \"contracts/libraries/Lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Lib {\\n    function sortsBefore(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IERC20 {\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n\\ninterface IRouter {\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swap(\\n        address input,\\n        uint amountIn,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function getPair(address, address) external returns (address);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFeeIn\",\"type\":\"address\"}],\"name\":\"createPairWithLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFeeIn\",\"type\":\"address\"}],\"name\":\"createSwap2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_generator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Factory", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://307e8e30924919a3676d733e148aef5f3f385cca1569b1cb76b7d79a0437c3c1"}