{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts-BatchDepositWithELRVault/BatchDepositWithELRVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IBatchDepositWithELRVault.sol\\\";\\n\\ncontract BatchDepositWithELRVault is IBatchDepositWithELRVault, Ownable {\\n    address public immutable depositContract;\\n\\n    /// @notice Constant value\\n    uint256 public constant DEPOSIT_AMOUNT = 32 ether;\\n    \\n    /// @notice Maximum number of validators activated for a single transaction\\n    uint256 public maxPerDeposit;\\n\\n    /// @notice Determine if the pubkey is used\\n    mapping(bytes32 => bool) internal existingPubKeys;\\n\\n    constructor(address _depositContract, uint256 _maxPerDeposit) payable {\\n        depositContract = _depositContract;\\n        maxPerDeposit = _maxPerDeposit;\\n    }\\n\\n    /// @dev update maxPerDeposit\\n    /// @param newMaxPerDeposit new maxPerDeposit value\\n    function updateMaxPerDeposit(uint256 newMaxPerDeposit) external onlyOwner {\\n        if(newMaxPerDeposit == 0) revert ZeroValueSet();\\n        if(newMaxPerDeposit == maxPerDeposit) revert RepeatSetup();\\n        maxPerDeposit = newMaxPerDeposit; \\n        emit UpdateMaxPerDeposit(newMaxPerDeposit);\\n    }\\n\\n    /// @dev batch deposit ETH to ETH2 depositContract\\n    /// @param pubkeys array of publickey\\n    /// @param withdrawalCredentials array of withdrawal_credential\\n    /// @param signatures array of signature\\n    /// @param depositDataRoots array of depositDataRoot\\n    /// @param tag user`s tag\\n    function batchDeposit(\\n        uint256 quantity,\\n        bytes[] calldata pubkeys, \\n        bytes[] calldata withdrawalCredentials, \\n        bytes[] calldata signatures,\\n        bytes32[] calldata depositDataRoots,\\n        bytes32 tag\\n        ) public payable {\\n        if(quantity > maxPerDeposit) revert ExceedingMaxLimit();\\n        if(msg.value != quantity * DEPOSIT_AMOUNT) revert InvalidETHAmount();\\n        if(pubkeys.length != quantity) revert PubkeysCountError(); \\n        if(withdrawalCredentials.length != quantity) revert WithdrawalCredentialsCountError();\\n        if(signatures.length != quantity) revert SignaturesCountError(); \\n        if(depositDataRoots.length != quantity) revert DepositDataRootsCountError();\\n\\n        for(uint256 i = 0; i < quantity; ) {\\n            if(existingPubKeys[keccak256(pubkeys[i])]) revert PubkeyUsed();\\n            existingPubKeys[keccak256(pubkeys[i])] = true;\\n            IDepositContract(depositContract).deposit{value: DEPOSIT_AMOUNT}(pubkeys[i], abi.encodePacked(withdrawalCredentials[i]), signatures[i], depositDataRoots[i]);\\n\\n            unchecked { ++i; }\\n        }\\n\\n        emit BatchDeposited(msg.sender, tag, pubkeys, msg.value);\\n    }\\n\\n    /// @dev sweep ETH in this contract \\n    /// @param receiver receiver address\\n    function sweep(address receiver) public onlyOwner {\\n        if(address(receiver) == address(0)) revert ZeroValueSet();\\n        uint256 currentBalance = address(this).balance;\\n        if(currentBalance == 0) revert InvalidETHAmount();\\n        (bool sent, ) = payable(receiver).call{value: currentBalance}(\\\"\\\");\\n        require(sent, \\\"failed\\\");\\n\\n        emit Swept(msg.sender, receiver, currentBalance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/contracts-BatchDepositWithELRVault/interfaces/IBatchDepositWithELRVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n \\ninterface IBatchDepositWithELRVault {\\n\\n    /// @notice Thrown when zero value is set \\n    error ZeroValueSet();\\n\\n    /// @notice Thrown when values are set repeatedly\\n    error RepeatSetup();\\n    \\n    /// @notice Thrown when ETH amount error which is deposited\\n    error InvalidETHAmount();\\n\\n    /// @notice The number of validators activated by a user at a time must not exceed the maxPerDeposit\\n    error ExceedingMaxLimit();\\n\\n    /// @notice Thrown when Pubkeys' amount error\\n    error PubkeysCountError();\\n\\n    /// @notice Thrown when WithdrawalCredentials' amount error\\n    error WithdrawalCredentialsCountError();\\n\\n    /// @notice Thrown when Signatures' amount error\\n    error SignaturesCountError();\\n\\n    /// @notice Thrown when DepositDataRoots' amount error\\n    error DepositDataRootsCountError();\\n\\n    /// @notice Thrown when single pubkey is used twice\\n    error PubkeyUsed();\\n\\n    /// @notice Thrown when single pubkey length error\\n    error PubkeyLengthError();\\n\\n    /// @notice Thrown when single withdrawalCredential length error\\n    error WithdrawalCredentialLengthError();\\n\\n    /// @notice Thrown when single signature length error\\n    error SignatureLengthError();\\n\\n    event BatchDeposited(address indexed addr, bytes32 tag, bytes[] pubKeys, uint256 totalETHDeposited);\\n    \\n    event UpdateMaxPerDeposit(uint256 newMaxPerDeposit);\\n\\n    event Swept(address indexed operator, address indexed receiver, uint256 ETHAmount);\\n}\"\r\n    },\r\n    \"contracts/contracts-BatchDepositWithELRVault/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDepositContract {\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DepositDataRootsCountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedingMaxLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PubkeyLengthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PubkeyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PubkeysCountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepeatSetup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureLengthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignaturesCountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalCredentialLengthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalCredentialsCountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubKeys\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalETHDeposited\",\"type\":\"uint256\"}],\"name\":\"BatchDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETHAmount\",\"type\":\"uint256\"}],\"name\":\"Swept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPerDeposit\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxPerDeposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"depositDataRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxPerDeposit\",\"type\":\"uint256\"}],\"name\":\"updateMaxPerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BatchDepositWithELRVault", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000000000000000000000000000000000000000000032", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}