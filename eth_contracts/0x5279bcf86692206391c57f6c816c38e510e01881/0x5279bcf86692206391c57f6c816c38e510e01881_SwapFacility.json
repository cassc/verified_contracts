{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/SwapFacility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/utils/SafeTransferLib.sol\\\";\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {IWhitelist} from \\\"./interfaces/IWhitelist.sol\\\";\\nimport {ISwapFacility} from \\\"./interfaces/ISwapFacility.sol\\\";\\nimport {ISwapRecipient} from \\\"./interfaces/ISwapRecipient.sol\\\";\\nimport {IBloomPool, State} from \\\"./interfaces/IBloomPool.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract SwapFacility is ISwapFacility, Owned {\\n    using SafeTransferLib for ERC20;\\n    // =================== Storage ===================\\n\\n    /// @notice Underlying token\\n    address public immutable underlyingToken;\\n\\n    /// @notice Billy token\\n    address public immutable billyToken;\\n\\n    /// @notice Price oracle for underlying token\\n    address public immutable underlyingTokenOracle;\\n    uint256 public immutable underlyingScale;\\n\\n    /// @notice Price oracle for billy token\\n    address public immutable billyTokenOracle;\\n    uint256 public immutable billyScale;\\n\\n    /// @dev Minimum value of the stable asset (denominated in the oracle's decimals).\\n    uint256 internal immutable MIN_STABLE_VALUE;\\n\\n    /// @dev Maximum fair value of the t-bill asset (denominated in the oracle's decimals).\\n    uint256 internal immutable MAX_BILLY_VALUE;\\n\\n    /// @notice Whitelist contract\\n    IWhitelist public immutable whitelist;\\n\\n    /// @notice Spread in basis points\\n    uint256 public immutable spread;\\n\\n    /// @dev Pool address\\n    address public immutable pool;\\n\\n    uint256 internal constant ORACLE_STALE_THRESHOLD = 1 hours;\\n    uint256 internal constant BPS = 1e4;\\n    uint256 internal constant MAX_SPREAD = 0.1e4; // 10%\\n\\n    /// @dev Current swap stage\\n    /// 0: Not started\\n    /// 1: Underlying -> Billy swap initiated\\n    /// 2: Underlying -> Billy swap completed\\n    /// 3: Billy -> Underlying swap initiated\\n    /// 4: Billy -> Underlying swap completed\\n    uint8 internal _stage;\\n\\n    /// @dev Total swap amount\\n    uint256 internal _swapAmount;\\n\\n    /// @dev Total out amount\\n    uint256 internal _totalAmount;\\n\\n    // =================== Errors ===================\\n\\n    /// @notice Invalid Token\\n    error InvalidToken();\\n\\n    /// @notice Not Pool\\n    error NotPool();\\n\\n    /// @notice Not Whitelisted\\n    error NotWhitelisted();\\n\\n    /// @dev Oracle reported negative `answer`.\\n    error OracleAnswerNegative();\\n\\n    /// @dev Oracle response is more than `ORACLE_STALE_THRESHOLD` old.\\n    error OracleStale();\\n\\n    /// @dev Given `spread` parameter is >=100%\\n    error InvalidSpread();\\n\\n    error ExtremePrice();\\n\\n    // =================== Events ===================\\n\\n    /// @notice Swap Event\\n    /// @param inToken In token address\\n    /// @param outToken Out token address\\n    /// @param inAmount In token amount\\n    /// @param user To address\\n    event Swap(address inToken, address outToken, uint256 inAmount, uint256 outAmount, address indexed user);\\n\\n    // =================== Modifiers ===================\\n\\n    modifier onlyWhitelisted(bytes32[] calldata proof) {\\n        if (msg.sender != pool && !IWhitelist(whitelist).isWhitelisted(msg.sender, proof)) {\\n            revert NotWhitelisted();\\n        }\\n        _;\\n    }\\n\\n    // =================== Functions ===================\\n\\n    /// @notice SwapFacility Constructor\\n    /// @param _underlyingToken Underlying token address\\n    /// @param _billyToken Billy token address\\n    /// @param _underlyingTokenOracle Price oracle for underlying token\\n    /// @param _billyTokenOracle Price oracle for billy token\\n    /// @param _whitelist Whitelist contract\\n    /// @param _spread Spread price\\n    /// @param _minStableValue Minimum value of the stable asset (denominated in the oracle's decimals)\\n    /// @param _maxBillyValue Maximum fair value of the t-bill asset (denominated in the oracle's decimals)\\n    constructor(\\n        address _underlyingToken,\\n        address _billyToken,\\n        address _underlyingTokenOracle,\\n        address _billyTokenOracle,\\n        IWhitelist _whitelist,\\n        uint256 _spread,\\n        address _pool,\\n        uint256 _minStableValue,\\n        uint256 _maxBillyValue\\n    ) Owned(msg.sender) {\\n        if (_spread > MAX_SPREAD) revert InvalidSpread();\\n        underlyingToken = _underlyingToken;\\n        billyToken = _billyToken;\\n        underlyingTokenOracle = _underlyingTokenOracle;\\n\\n        // Get token and oracle decimals to see the scale required to balance out.\\n        uint256 underlyingExp = IOracle(_underlyingTokenOracle).decimals() + ERC20(_underlyingToken).decimals();\\n        uint256 billyExp = IOracle(_billyTokenOracle).decimals() + ERC20(_billyToken).decimals();\\n        // The two `{...}Exp` variables represent the zeros in the scale values, can cancel out\\n        // early to minimize overflows:\\n        (underlyingExp, billyExp) =\\n            underlyingExp > billyExp ? (underlyingExp - billyExp, uint256(0)) : (uint256(0), billyExp - underlyingExp);\\n\\n        underlyingScale = 10 ** underlyingExp;\\n        billyTokenOracle = _billyTokenOracle;\\n        billyScale = 10 ** billyExp;\\n        whitelist = _whitelist;\\n        spread = _spread;\\n        pool = _pool;\\n        MIN_STABLE_VALUE = _minStableValue;\\n        MAX_BILLY_VALUE = _maxBillyValue;\\n    }\\n\\n    /// @notice Swap tokens UNDERLYING <-> BILLY\\n    /// @param _inToken In token address\\n    /// @param _outToken Out token address\\n    /// @param _inAmount In token amount\\n    /// @param _proof Whitelist proof\\n    function swap(address _inToken, address _outToken, uint256 _inAmount, bytes32[] calldata _proof)\\n        external\\n        onlyWhitelisted(_proof)\\n    {\\n        if (_stage == 0) {\\n            if (_inToken != underlyingToken || _outToken != billyToken) {\\n                revert InvalidToken();\\n            }\\n            if (pool != msg.sender) revert NotPool();\\n            _stage = 1;\\n            _swapAmount = _inAmount;\\n        } else if (_stage == 1) {\\n            if (_inToken != billyToken || _outToken != underlyingToken) {\\n                revert InvalidToken();\\n            }\\n            _swap(_inToken, _outToken, _inAmount, msg.sender, true);\\n        } else if (_stage == 2) {\\n            if (_inToken != billyToken || _outToken != underlyingToken) {\\n                revert InvalidToken();\\n            }\\n            if (pool != msg.sender) revert NotPool();\\n            _stage = 3;\\n            _swapAmount = _inAmount;\\n        } else if (_stage == 3) {\\n            if (_inToken != underlyingToken || _outToken != billyToken) {\\n                revert InvalidToken();\\n            }\\n            _swap(_inToken, _outToken, _inAmount, msg.sender, false);\\n        }\\n    }\\n\\n    /// @dev Perform swap between pool and user\\n    ///     Transfer `outToken` from `to` to Pool and `inToken` from Pool to `to`\\n    ///     outAmount is calculated based on the prices of both tokens\\n    ///     No swap fee is applied\\n    ///     Once entire swap is done, notify Pool contract by calling `completeSwap` function\\n    /// @param _inToken In token address\\n    /// @param _outToken Out token address\\n    /// @param _inAmount In token amount\\n    /// @param _to To address\\n    function _swap(address _inToken, address _outToken, uint256 _inAmount, address _to, bool _boundPrices)\\n        internal\\n        returns (uint256 outAmount)\\n    {\\n        (uint256 underlyingTokenPrice, uint256 billyTokenPrice) = _getTokenPrices(_boundPrices);\\n        (uint256 inTokenPrice, uint256 outTokenPrice) = _inToken == underlyingToken\\n            ? (underlyingTokenPrice, billyTokenPrice)\\n            : (billyTokenPrice, underlyingTokenPrice);\\n        outAmount = (_inAmount * inTokenPrice * (BPS + spread)) / outTokenPrice / BPS;\\n        if (_swapAmount < outAmount) {\\n            outAmount = _swapAmount;\\n            _inAmount = (outAmount * outTokenPrice * BPS) / inTokenPrice / (BPS + spread);\\n        }\\n        unchecked {\\n            _swapAmount -= outAmount;\\n        }\\n        _totalAmount += _inAmount;\\n        ERC20(_inToken).safeTransferFrom(_to, pool, _inAmount);\\n        ERC20(_outToken).safeTransferFrom(pool, _to, outAmount);\\n        if (_swapAmount == 0) {\\n            ++_stage;\\n            ISwapRecipient(pool).completeSwap(_inToken, _totalAmount);\\n            _totalAmount = 0;\\n        }\\n\\n        emit Swap(_inToken, _outToken, _inAmount, outAmount, _to);\\n    }\\n\\n    /// @dev Get prices of underlying and billy tokens\\n    /// @return underlyingTokenPrice Underlying token price\\n    /// @return billyTokenPrice Billy token price\\n    function _getTokenPrices(bool _boundPrices)\\n        internal\\n        view\\n        returns (uint256 underlyingTokenPrice, uint256 billyTokenPrice)\\n    {\\n        uint256 stablePrice = _readOracle(underlyingTokenOracle);\\n        underlyingTokenPrice = stablePrice * billyScale;\\n        uint256 billyPrice = _readOracle(billyTokenOracle);\\n        if (_boundPrices) {\\n            if (stablePrice < MIN_STABLE_VALUE) revert ExtremePrice();\\n            if (billyPrice > MAX_BILLY_VALUE) revert ExtremePrice();\\n        }\\n        billyTokenPrice = billyPrice * underlyingScale;\\n    }\\n\\n    function _readOracle(address _oracle) internal view returns (uint256) {\\n        (, int256 answer,, uint256 updatedAt,) = IOracle(_oracle).latestRoundData();\\n        if (answer <= 0) revert OracleAnswerNegative();\\n        if (block.timestamp - updatedAt >= ORACLE_STALE_THRESHOLD) revert OracleStale();\\n        return uint256(answer);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.19;\\n\\ninterface IWhitelist {\\n    event NewWhitelistRoot(bytes32 newRoot);\\n\\n    function setRoot(bytes32 newRoot) external;\\n\\n    function isWhitelisted(address member, bytes32[] calldata proof) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISwapFacility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {IWhitelist} from \\\"../interfaces/IWhitelist.sol\\\";\\n\\ninterface ISwapFacility {\\n    // =================== Functions ===================\\n\\n    /// @notice Get Underlying token\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Get Billy token\\n    function billyToken() external view returns (address);\\n\\n    /// @notice Get Price oracle for underlying token\\n    function underlyingTokenOracle() external view returns (address);\\n\\n    /// @notice Get Price oracle for billy token\\n    function billyTokenOracle() external view returns (address);\\n\\n    /// @notice Get Whitelist contract\\n    function whitelist() external view returns (IWhitelist);\\n\\n    /// @notice Get Spread price\\n    function spread() external view returns (uint256);\\n\\n    /// @notice Get Pool address\\n    function pool() external view returns (address);\\n\\n    /// @notice swap tokens Underlying <-> Billy\\n    function swap(address inToken, address outToken, uint256 inAmount, bytes32[] calldata proof) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISwapRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n*/\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISwapRecipient {\\n    /**\\n     * @notice Callback that is invoked by a swap facility when a trade is completed.\\n     * @param outToken The address of the token that's coming from the swap.\\n     * @param outAmount The amount of tokens that was transferred separately.\\n     */\\n    function completeSwap(address outToken, uint256 outAmount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IBloomPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {AssetCommitment} from \\\"../lib/CommitmentsLib.sol\\\";\\nimport {IWhitelist} from \\\"../interfaces/IWhitelist.sol\\\";\\n\\nenum State {\\n    Other,\\n    Commit,\\n    ReadyPreHoldSwap,\\n    PendingPreHoldSwap,\\n    Holding,\\n    ReadyPostHoldSwap,\\n    PendingPostHoldSwap,\\n    EmergencyExit,\\n    FinalWithdraw\\n}\\n\\ninterface IBloomPool {\\n    // Initialization errors\\n    error ZeroAddress();\\n\\n    error NotSwapFacility();\\n    error InvalidOutToken(address outToken);\\n\\n    error NotWhitelisted();\\n    error NoCommitToProcess();\\n    error CommitTooSmall();\\n\\n    error CanOnlyWithdrawProcessedCommit(uint256 id);\\n    error NoCommitToWithdraw();\\n\\n    error InvalidState(State current);\\n\\n    error NotEmergencyHandler();\\n\\n    event BorrowerCommit(address indexed owner, uint256 indexed id, uint256 amount, uint256 cumulativeAmountEnd);\\n    event LenderCommit(address indexed owner, uint256 indexed id, uint256 amount, uint256 cumulativeAmountEnd);\\n    event BorrowerCommitmentProcessed(\\n        address indexed owner, uint256 indexed id, uint256 includedAmount, uint256 excludedAmount\\n    );\\n    event LenderCommitmentProcessed(\\n        address indexed owner, uint256 indexed id, uint256 includedAmount, uint256 excludedAmount\\n    );\\n    event ExplictStateTransition(State prevState, State newState);\\n    event BorrowerWithdraw(address indexed owner, uint256 indexed id, uint256 amount);\\n    event LenderWithdraw(address indexed owner, uint256 sharesRedeemed, uint256 amount);\\n\\n    event EmergencyWithdraw(address indexed to);\\n\\n    /// @notice Initiates the pre-hold swap.\\n    function initiatePreHoldSwap() external;\\n\\n    /// @notice Initiates the post-hold swap.\\n    function initiatePostHoldSwap() external;\\n\\n    /**\\n     * @notice Deposits funds from the borrower committing them for the duration of the commit\\n     * phase.\\n     * @param amount The amount of tokens to deposit.\\n     * @param proof The whitelist proof data, format dependent on implementation.\\n     * @return newCommitmentId The commitment ID for the borrower's new deposit.\\n     */\\n    function depositBorrower(uint256 amount, bytes32[] calldata proof) external returns (uint256 newCommitmentId);\\n    /**\\n     * @notice Deposits funds from the lender committing them for the duration of the commit phase.\\n     * @param amount The amount of stablecoins to deposit.\\n     * @return newCommitmentId The commitment ID for the lender deposit.\\n     */\\n    function depositLender(uint256 amount) external returns (uint256 newCommitmentId);\\n\\n    /**\\n     * @notice Processes a borrower's commit, calculates the included and excluded amounts, and refunds any unmatched amounts.\\n     * @param commitId The borrower's commitment ID.\\n     */\\n    function processBorrowerCommit(uint256 commitId) external;\\n\\n    /**\\n     * @notice Processes a lender's commit, calculates the included and excluded amounts, mints shares, and refunds any unmatched amounts.\\n     * @param commitId The lender's commitment ID.\\n     */\\n    function processLenderCommit(uint256 commitId) external;\\n\\n    /**\\n     * @notice Allows borrowers to withdraw their share of the returned stablecoins after the pool phase has ended and swaps have been completed.\\n     * @param id The borrower's commitment ID.\\n     */\\n    function withdrawBorrower(uint256 id) external;\\n\\n    /**\\n     * @notice Allows lenders to withdraw their share of the returned stablecoins and earned interest after the pool phase has ended and swaps have been completed.\\n     * @param shares The number of lender shares to withdraw.\\n     */\\n    function withdrawLender(uint256 shares) external;\\n\\n    function UNDERLYING_TOKEN() external view returns (address);\\n    function BILL_TOKEN() external view returns (address);\\n    function WHITELIST() external view returns (IWhitelist);\\n    function SWAP_FACILITY() external view returns (address);\\n    function TREASURY() external view returns (address);\\n    function LENDER_RETURN_BPS_FEED() external view returns (address);\\n    function LEVERAGE_BPS() external view returns (uint256);\\n    function MIN_BORROW_DEPOSIT() external view returns (uint256);\\n    function COMMIT_PHASE_END() external view returns (uint256);\\n    function PRE_HOLD_SWAP_TIMEOUT_END() external view returns (uint256);\\n    function POOL_PHASE_END() external view returns (uint256);\\n    function POOL_PHASE_DURATION() external view returns (uint256);\\n    function LENDER_RETURN_FEE() external view returns (uint256);\\n    function BORROWER_RETURN_FEE() external view returns (uint256);\\n\\n    function state() external view returns (State currentState);\\n    function totalMatchAmount() external view returns (uint256);\\n\\n    function getBorrowCommitment(uint256 id) external view returns (AssetCommitment memory);\\n    function getLenderCommitment(uint256 id) external view returns (AssetCommitment memory);\\n\\n    function getTotalBorrowCommitment()\\n        external\\n        view\\n        returns (uint256 totalAssetsCommited, uint256 totalCommitmentCount);\\n    function getTotalLendCommitment()\\n        external\\n        view\\n        returns (uint256 totalAssetsCommited, uint256 totalCommitmentCount);\\n\\n    function getDistributionInfo()\\n        external\\n        view\\n        returns (\\n            uint128 borrowerDistribution,\\n            uint128 totalBorrowerShares,\\n            uint128 lenderDistribution,\\n            uint128 totalLenderShares\\n        );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n*/\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"src/lib/CommitmentsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/*\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {SafeCastLib} from \\\"solady/utils/SafeCastLib.sol\\\";\\n\\nstruct AssetCommitment {\\n    address owner;\\n    uint128 committedAmount;\\n    uint128 cumulativeAmountEnd;\\n}\\n\\nstruct Commitments {\\n    mapping(uint256 => AssetCommitment) commitments;\\n    uint64 commitmentCount;\\n    uint192 totalAssetsCommitted;\\n}\\n\\n\\nlibrary CommitmentsLib {\\n    using SafeCastLib for uint256;\\n\\n    error NonexistentCommit();\\n\\n    function add(Commitments storage commitments, address owner, uint256 amount)\\n        internal\\n        returns (uint256 newCommitmendId, uint256 cumulativeAmountEnd)\\n    {\\n        uint256 commitmentCount = commitments.commitmentCount;\\n        unchecked {\\n            newCommitmendId = commitmentCount++;\\n        }\\n        cumulativeAmountEnd = commitments.totalAssetsCommitted + amount;\\n        commitments.commitments[newCommitmendId] = AssetCommitment({\\n            owner: owner,\\n            committedAmount: uint128(amount),\\n            cumulativeAmountEnd: cumulativeAmountEnd.toUint128()\\n        });\\n        commitments.commitmentCount = commitmentCount.toUint64();\\n        // If safe cast to uint128 did not fail cast to uint192 cannot truncate.\\n        commitments.totalAssetsCommitted = uint192(cumulativeAmountEnd);\\n    }\\n\\n    function getAmountSplit(AssetCommitment storage commitment, uint256 totalIncludedAmount)\\n        internal\\n        view\\n        returns (uint256 includedAmount, uint256 excludedAmount)\\n    {\\n        uint256 committedAmount = commitment.committedAmount;\\n        uint256 cumulativeAmountEnd = commitment.cumulativeAmountEnd;\\n        if (totalIncludedAmount >= cumulativeAmountEnd) {\\n            includedAmount = committedAmount;\\n            excludedAmount = 0;\\n        } else {\\n            uint256 cumulativeAmountStart = cumulativeAmountEnd - committedAmount;\\n            if (cumulativeAmountStart > totalIncludedAmount) {\\n                includedAmount = 0;\\n                excludedAmount = committedAmount;\\n            } else {\\n                unchecked {\\n                    includedAmount = totalIncludedAmount - cumulativeAmountStart;\\n                    excludedAmount = committedAmount - includedAmount;\\n                }\\n            }\\n        }\\n    }\\n\\n    function get(Commitments storage commitments, uint256 id) internal view returns (AssetCommitment storage) {\\n        if (id >= commitments.commitmentCount) {\\n            revert NonexistentCommit();\\n        }\\n        return commitments.commitments[id];\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/SafeCastLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe integer casting library that reverts on overflow.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeCastLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    error Overflow();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*          UNSIGNED INTEGER SAFE CASTING OPERATIONS          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function toUint8(uint256 x) internal pure returns (uint8) {\\n        if (x >= 1 << 8) _revertOverflow();\\n        return uint8(x);\\n    }\\n\\n    function toUint16(uint256 x) internal pure returns (uint16) {\\n        if (x >= 1 << 16) _revertOverflow();\\n        return uint16(x);\\n    }\\n\\n    function toUint24(uint256 x) internal pure returns (uint24) {\\n        if (x >= 1 << 24) _revertOverflow();\\n        return uint24(x);\\n    }\\n\\n    function toUint32(uint256 x) internal pure returns (uint32) {\\n        if (x >= 1 << 32) _revertOverflow();\\n        return uint32(x);\\n    }\\n\\n    function toUint40(uint256 x) internal pure returns (uint40) {\\n        if (x >= 1 << 40) _revertOverflow();\\n        return uint40(x);\\n    }\\n\\n    function toUint48(uint256 x) internal pure returns (uint48) {\\n        if (x >= 1 << 48) _revertOverflow();\\n        return uint48(x);\\n    }\\n\\n    function toUint56(uint256 x) internal pure returns (uint56) {\\n        if (x >= 1 << 56) _revertOverflow();\\n        return uint56(x);\\n    }\\n\\n    function toUint64(uint256 x) internal pure returns (uint64) {\\n        if (x >= 1 << 64) _revertOverflow();\\n        return uint64(x);\\n    }\\n\\n    function toUint72(uint256 x) internal pure returns (uint72) {\\n        if (x >= 1 << 72) _revertOverflow();\\n        return uint72(x);\\n    }\\n\\n    function toUint80(uint256 x) internal pure returns (uint80) {\\n        if (x >= 1 << 80) _revertOverflow();\\n        return uint80(x);\\n    }\\n\\n    function toUint88(uint256 x) internal pure returns (uint88) {\\n        if (x >= 1 << 88) _revertOverflow();\\n        return uint88(x);\\n    }\\n\\n    function toUint96(uint256 x) internal pure returns (uint96) {\\n        if (x >= 1 << 96) _revertOverflow();\\n        return uint96(x);\\n    }\\n\\n    function toUint104(uint256 x) internal pure returns (uint104) {\\n        if (x >= 1 << 104) _revertOverflow();\\n        return uint104(x);\\n    }\\n\\n    function toUint112(uint256 x) internal pure returns (uint112) {\\n        if (x >= 1 << 112) _revertOverflow();\\n        return uint112(x);\\n    }\\n\\n    function toUint120(uint256 x) internal pure returns (uint120) {\\n        if (x >= 1 << 120) _revertOverflow();\\n        return uint120(x);\\n    }\\n\\n    function toUint128(uint256 x) internal pure returns (uint128) {\\n        if (x >= 1 << 128) _revertOverflow();\\n        return uint128(x);\\n    }\\n\\n    function toUint136(uint256 x) internal pure returns (uint136) {\\n        if (x >= 1 << 136) _revertOverflow();\\n        return uint136(x);\\n    }\\n\\n    function toUint144(uint256 x) internal pure returns (uint144) {\\n        if (x >= 1 << 144) _revertOverflow();\\n        return uint144(x);\\n    }\\n\\n    function toUint152(uint256 x) internal pure returns (uint152) {\\n        if (x >= 1 << 152) _revertOverflow();\\n        return uint152(x);\\n    }\\n\\n    function toUint160(uint256 x) internal pure returns (uint160) {\\n        if (x >= 1 << 160) _revertOverflow();\\n        return uint160(x);\\n    }\\n\\n    function toUint168(uint256 x) internal pure returns (uint168) {\\n        if (x >= 1 << 168) _revertOverflow();\\n        return uint168(x);\\n    }\\n\\n    function toUint176(uint256 x) internal pure returns (uint176) {\\n        if (x >= 1 << 176) _revertOverflow();\\n        return uint176(x);\\n    }\\n\\n    function toUint184(uint256 x) internal pure returns (uint184) {\\n        if (x >= 1 << 184) _revertOverflow();\\n        return uint184(x);\\n    }\\n\\n    function toUint192(uint256 x) internal pure returns (uint192) {\\n        if (x >= 1 << 192) _revertOverflow();\\n        return uint192(x);\\n    }\\n\\n    function toUint200(uint256 x) internal pure returns (uint200) {\\n        if (x >= 1 << 200) _revertOverflow();\\n        return uint200(x);\\n    }\\n\\n    function toUint208(uint256 x) internal pure returns (uint208) {\\n        if (x >= 1 << 208) _revertOverflow();\\n        return uint208(x);\\n    }\\n\\n    function toUint216(uint256 x) internal pure returns (uint216) {\\n        if (x >= 1 << 216) _revertOverflow();\\n        return uint216(x);\\n    }\\n\\n    function toUint224(uint256 x) internal pure returns (uint224) {\\n        if (x >= 1 << 224) _revertOverflow();\\n        return uint224(x);\\n    }\\n\\n    function toUint232(uint256 x) internal pure returns (uint232) {\\n        if (x >= 1 << 232) _revertOverflow();\\n        return uint232(x);\\n    }\\n\\n    function toUint240(uint256 x) internal pure returns (uint240) {\\n        if (x >= 1 << 240) _revertOverflow();\\n        return uint240(x);\\n    }\\n\\n    function toUint248(uint256 x) internal pure returns (uint248) {\\n        if (x >= 1 << 248) _revertOverflow();\\n        return uint248(x);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*           SIGNED INTEGER SAFE CASTING OPERATIONS           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function toInt8(int256 x) internal pure returns (int8) {\\n        int8 y = int8(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt16(int256 x) internal pure returns (int16) {\\n        int16 y = int16(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt24(int256 x) internal pure returns (int24) {\\n        int24 y = int24(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt32(int256 x) internal pure returns (int32) {\\n        int32 y = int32(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt40(int256 x) internal pure returns (int40) {\\n        int40 y = int40(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt48(int256 x) internal pure returns (int48) {\\n        int48 y = int48(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt56(int256 x) internal pure returns (int56) {\\n        int56 y = int56(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt64(int256 x) internal pure returns (int64) {\\n        int64 y = int64(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt72(int256 x) internal pure returns (int72) {\\n        int72 y = int72(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt80(int256 x) internal pure returns (int80) {\\n        int80 y = int80(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt88(int256 x) internal pure returns (int88) {\\n        int88 y = int88(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt96(int256 x) internal pure returns (int96) {\\n        int96 y = int96(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt104(int256 x) internal pure returns (int104) {\\n        int104 y = int104(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt112(int256 x) internal pure returns (int112) {\\n        int112 y = int112(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt120(int256 x) internal pure returns (int120) {\\n        int120 y = int120(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt128(int256 x) internal pure returns (int128) {\\n        int128 y = int128(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt136(int256 x) internal pure returns (int136) {\\n        int136 y = int136(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt144(int256 x) internal pure returns (int144) {\\n        int144 y = int144(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt152(int256 x) internal pure returns (int152) {\\n        int152 y = int152(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt160(int256 x) internal pure returns (int160) {\\n        int160 y = int160(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt168(int256 x) internal pure returns (int168) {\\n        int168 y = int168(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt176(int256 x) internal pure returns (int176) {\\n        int176 y = int176(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt184(int256 x) internal pure returns (int184) {\\n        int184 y = int184(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt192(int256 x) internal pure returns (int192) {\\n        int192 y = int192(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt200(int256 x) internal pure returns (int200) {\\n        int200 y = int200(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt208(int256 x) internal pure returns (int208) {\\n        int208 y = int208(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt216(int256 x) internal pure returns (int216) {\\n        int216 y = int216(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt224(int256 x) internal pure returns (int224) {\\n        int224 y = int224(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt232(int256 x) internal pure returns (int232) {\\n        int232 y = int232(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt240(int256 x) internal pure returns (int240) {\\n        int240 y = int240(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt248(int256 x) internal pure returns (int248) {\\n        int248 y = int248(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function _revertOverflow() private pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Store the function selector of `Overflow()`.\\n            mstore(0x00, 0x35278d12)\\n            // Revert with (offset, size).\\n            revert(0x1c, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-safe/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-safe/=lib/forge-safe/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"solidity-stringutils/=lib/forge-safe/lib/surl/lib/solidity-stringutils/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"surl/=lib/forge-safe/lib/surl/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_billyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingTokenOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_billyTokenOracle\",\"type\":\"address\"},{\"internalType\":\"contract IWhitelist\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_spread\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStableValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBillyValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExtremePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSpread\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleAnswerNegative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleStale\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"billyScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billyTokenOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spread\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingTokenOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SwapFacility", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000ca30c93b02514f86d5c86a6e375e3a330b435fb50000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f600000000000000000000000032d1463eb53b73c095625719afa544d5426354cb000000000000000000000000f9944ba0e7ea41002acb15003c775b0aec8b15a7000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000dae97900d4b184c5d2012dcdb658c008966466dd0000000000000000000000000000000000000000000000000000000005f5e09c000000000000000000000000000000000000000000000000000000028d445400", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}