{"SourceCode": "// HOME3  $HTS\r\n// Telegram: https://t.me/JoinHOME3\r\n// Website:  https://www.home3suite.com/\r\n// X:  https://x.com/Home3Suite\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity 0.8.7;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Timelock logic\r\n \r\n    enum Functions {changeOwnership,changeTreWallet}\r\n    mapping(Functions => uint256) public timelock;\r\n\r\n    modifier notLocked(Functions _func) {\r\n    require(\r\n        timelock[_func] != 0 && timelock[_func] <= block.timestamp,\r\n        \"Function is timelocked\"\r\n    );\r\n    _;\r\n    }\r\n\r\n\r\n   function renounceOwnership() external  onlyOwner notLocked(Functions.changeOwnership){\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n        timelock[Functions.changeOwnership] = 0;\r\n    }\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n/**\r\n * @title HTS\r\n * @dev Implementation of the HTS token with tax functionality.\r\n */\r\ncontract HTS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private balance;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    \r\n    uint256 private constant _tTotal = 1e26; \r\n    uint256 public swapThreshold = _tTotal/10000;\r\n    uint256 public buyTax = 5;\r\n    uint256 public sellTax = 5;\r\n    uint256 private tax = 0;\r\n    uint256 private constant _TIMELOCK = 2 days ;\r\n    address payable public treasuryWallet;\r\n    mapping (address => bool) public uniswapV2Pair;\r\n    string private constant _name = \"Home3\";\r\n    string private constant _symbol = \"HTS\";\r\n    uint8 private constant _decimals = 18;\r\n    bool private inSwap = false;\r\n    bool private tradingOpen;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    \r\n    event swapAmountUpdated(uint256 _newThreshold);\r\n    event buyTaxUpdated(uint256 _newTax);\r\n    event sellTaxUpdated(uint256 _newTax);\r\n    event treasuryUpdated(address _newWallet);\r\n    event TransferToTreasuryFailed(uint256 amount);\r\n    event functionUnlockInitiated(Functions _func);\r\n    event functionLocked(Functions _func);\r\n    event whitelistUpdated(address _addr,bool _bool);\r\n    event lpPairAdded(address _addr);\r\n\r\n    /**\r\n     * @notice Initializes the contract with a treasury wallet.\r\n     * @param _treasuryWallet The address of the treasury wallet.\r\n     */\r\n    constructor (address payable _treasuryWallet) { \r\n        require(_treasuryWallet != address(0),\"Zero address exception\");\r\n        treasuryWallet = _treasuryWallet;\r\n        balance[owner()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0),owner(), _tTotal);\r\n    }\r\n    /**\r\n     * @notice Unlocks a specific function after the timelock period.\r\n     * @param _func The function to unlock. It will be 0 for renounce function and 1 for changing treasury wallet\r\n     */\r\n    function unlockFunction(Functions _func) external onlyOwner {\r\n        require(timelock[_func] == 0,\"Function is not locked\");\r\n        timelock[_func] = block.timestamp + _TIMELOCK;\r\n        emit functionUnlockInitiated(_func);\r\n    } \r\n    /**\r\n     * @notice Locks a specific function, preventing its execution.\r\n     * @param _func The function to lock. It will be 0 for renounce function and 1 for changing treasury wallet\r\n     */\r\n    function lockFunction(Functions _func) external onlyOwner {\r\n        timelock[_func] = 0;\r\n        emit functionLocked(_func);\r\n    }\r\n    /**\r\n     * @notice Transfers tokens from one address to another.\r\n     * @param sender The address to transfer from.\r\n     * @param recipient The address to transfer to.\r\n     * @param amount The amount to be transferred.\r\n     * @return A boolean indicating whether the operation succeeded.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    /**\r\n     * @notice Approves a spender to spend a specified amount of tokens on behalf of a holder.\r\n     * @param holder The address of the holder.\r\n     * @param spender The address of the spender.\r\n     * @param amount The amount of tokens to be approved.\r\n     */\r\n    function _approve(address holder, address spender, uint256 amount) private {\r\n        require(holder != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[holder][spender] = amount;\r\n        emit Approval(holder, spender, amount);\r\n    }\r\n    /**\r\n     * @notice Transfers tokens from one address to another with tax handling along with whitelist.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param amount The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(balanceOf(from) >= amount,\"Balance less then transfer\"); \r\n        tax = 0;\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if(contractETHBalance > 1 ether) { \r\n                sendTaxToTreasury(address(this).balance);\r\n            }\r\n        if (!(_isExcludedFromFee[from] || _isExcludedFromFee[to]) ) {            \r\n            if(uniswapV2Pair[from]){\r\n                tax = buyTax;\r\n            }\r\n            else if(uniswapV2Pair[to]){\r\n                tax = sellTax;\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if(!inSwap){\r\n                    if(contractTokenBalance > swapThreshold){ \r\n                        swapTokensForEth(contractTokenBalance);\r\n                    }\r\n                }\r\n            }\r\n               \r\n        }\r\n        _tokenTransfer(from,to,amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps tokens for ETH.\r\n     * @param tokenAmount The amount of tokens to be swapped.\r\n     */\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Sends collected tax to the treasury wallet.\r\n     * @param amount The amount of ETH to be sent.\r\n     */\r\n    function sendTaxToTreasury(uint256 amount) private {\r\n        (bool success, ) =treasuryWallet.call{value: amount}(\"\");\r\n        if (!success){\r\n            emit TransferToTreasuryFailed(amount);\r\n        }      \r\n    }\r\n    \r\n    /**\r\n     * @notice Opens trading by adding liquidity to the Uniswap pool.\r\n     * @dev Make sure to send ETH and Tokens to be added to inital pool.\r\n     */\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        address _uniswapV2pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Pair[_uniswapV2pair] = true;\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        tradingOpen = true;\r\n        IERC20(_uniswapV2pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens with tax calculation.\r\n     * @param sender The address to transfer from.\r\n     * @param recipient The address to transfer to.\r\n     * @param amount The amount to be transferred.\r\n     */\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n        uint256 stContract = amount*tax/100;    \r\n        uint256 remainingAmount = amount - stContract; \r\n        balance[sender] = balance[sender].sub(amount); \r\n        balance[recipient] = balance[recipient].add(remainingAmount); \r\n        balance[address(this)] = balance[address(this)].add(stContract); \r\n        emit Transfer(sender, recipient, remainingAmount);\r\n    }\r\n    /**\r\n     * @notice Adds or removes an address from the whitelist (excluded from tax).\r\n     * @param _addr The address to be whitelisted or removed from the whitelist.\r\n     * @param _bool The boolean value to add or remove the address from the whitelist.\r\n     */\r\n    function whitelistAddress(address _addr,bool _bool) external onlyOwner{\r\n        if(_isExcludedFromFee[_addr] != _bool){\r\n            _isExcludedFromFee[_addr] = _bool;\r\n        }\r\n        emit whitelistUpdated(_addr,_bool);\r\n    }\r\n    /**\r\n     * @notice Fallback function to receive ETH.\r\n     */\r\n    receive() external payable {}\r\n    /**\r\n     * @notice Rescues ERC20 tokens from the contract.\r\n     * @dev token address can't be same as HTS token.\r\n     * @param token The address of the ERC20 token to rescue.\r\n     * @param amount The amount of tokens to rescue.\r\n     */\r\n    function rescueERC20(IERC20 token, uint256 amount) external onlyOwner{ \r\n        require(token != IERC20(address(this)),\"You can't withdraw tokens from owned by contract.\"); \r\n        uint256 erc20balance = token.balanceOf(address(this));\r\n        require(amount <= erc20balance, \"balance is low\");\r\n        token.transfer(treasuryWallet, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the threshold for token swap.\r\n     * @param _newThreshold The new swap threshold. \r\n     * @dev add decimals, 10^18 = 1 Token\r\n     */\r\n    function changeSwapAmount(uint256 _newThreshold) external onlyOwner{\r\n        require(_newThreshold < _tTotal/2000,'Swap threshold has to be less than 0.05%');\r\n        swapThreshold = _newThreshold;\r\n        emit swapAmountUpdated(_newThreshold);\r\n    }\r\n    /**\r\n     * @notice Changes the buy tax.\r\n     * @param _newTax The new buy tax percantage. \r\n     * @dev Tax is capped at 5%, so input has to less than 5. \r\n     */\r\n    function changeBuyTax(uint256 _newTax) external onlyOwner{\r\n        require(_newTax <6, \"Tax should not be higher than 5%\");\r\n        buyTax = _newTax;\r\n        emit buyTaxUpdated(_newTax);\r\n    }\r\n    /**\r\n     * @notice Changes the sell tax.\r\n     * @param _newTax The new sell tax.\r\n     * @dev Tax is capped at 5%, so input has to less than 5.\r\n     */\r\n    function changeSellTax(uint256 _newTax) external onlyOwner{\r\n        require(_newTax < 6,\"Tax should not be higher than 5%\");\r\n        sellTax = _newTax;\r\n        emit sellTaxUpdated(_newTax);\r\n    }\r\n    /**\r\n     * @notice Changes the treasury wallet address.\r\n     * @dev Function is locked and has to be unlocked prior to calling\r\n     * @param _treasuryWallet The new treasury wallet address.\r\n     */\r\n    function setTreasury(address payable _treasuryWallet) external onlyOwner notLocked(Functions.changeTreWallet){\r\n        require(_treasuryWallet != address(0),\"Zero address exception\");\r\n        treasuryWallet = _treasuryWallet;\r\n        timelock[Functions.changeTreWallet] = 0;\r\n        emit treasuryUpdated(_treasuryWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a liquidity pair to support more than one dex pairs.\r\n     * @param _address The address of the liquidity pair.\r\n     */\r\n    function addLPPair(address _address) external onlyOwner{\r\n        uniswapV2Pair[_address] = true;\r\n        emit lpPairAdded(_address);\r\n    }\r\n    /**\r\n     * @notice Manually swaps the tokens for ETH.\r\n     */\r\n    function manualswap() external onlyOwner{\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    /**\r\n     * @notice Manually sends the ETH to the treasury.\r\n     */\r\n    function manualSend() external onlyOwner{\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendTaxToTreasury(contractETHBalance);\r\n    }\r\n\r\n//Read only functions\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    /**\r\n     * @notice Checks if an address is whitelisted.\r\n     * @param _addr The address to check.\r\n     * @return A boolean indicating if the address is whitelisted.\r\n     */\r\n    function isWhitelisted(address _addr) external view returns(bool){\r\n        return _isExcludedFromFee[_addr];\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToTreasuryFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"buyTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Ownable.Functions\",\"name\":\"_func\",\"type\":\"uint8\"}],\"name\":\"functionLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Ownable.Functions\",\"name\":\"_func\",\"type\":\"uint8\"}],\"name\":\"functionUnlockInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lpPairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"sellTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"swapAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"treasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addLPPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"changeBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"changeSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"changeSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Ownable.Functions\",\"name\":\"_func\",\"type\":\"uint8\"}],\"name\":\"lockFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Ownable.Functions\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Ownable.Functions\",\"name\":\"_func\",\"type\":\"uint8\"}],\"name\":\"unlockFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HTS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000072529732be60a69c0f10e3595a017599fbba7ee9", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://28e46d912d8cae62027b3897b02c3289c00e75db7a81193f627a0d191bcc03d7"}