{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/RRLootContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.12;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interface/IERC20_USDT.sol\\\";\\r\\n\\r\\ncontract RRLootContract is Ownable {\\r\\n  uint256 public withdrawCoolDown = 1 hours;\\r\\n\\r\\n  address public secret;\\r\\n\\r\\n  address public usdtAddress;\\r\\n\\r\\n  mapping(bytes => bool) private usedSignatures;\\r\\n\\r\\n  mapping(address => uint256) public lastWithdraw;\\r\\n\\r\\n  event Deposit(address token, uint256 amount, address sender);\\r\\n  event WithdrawBatch(address[] tokens, address to, uint256[] amounts);\\r\\n  event WithdrawETH(uint256 amount, address recipient, address sender);\\r\\n  event WithdrawERC20(address token, uint256 amount, address recipient, address sender);\\r\\n\\r\\n  constructor(address _signer, address _usdtAddress) {\\r\\n    secret = _signer;\\r\\n    usdtAddress = _usdtAddress;\\r\\n  }\\r\\n\\r\\n  function setSecret(address _secret) external onlyOwner {\\r\\n    secret = _secret;\\r\\n  }  \\r\\n\\r\\n  function setUsdtAddress(address _usdtAddress) external onlyOwner {\\r\\n    usdtAddress = _usdtAddress;\\r\\n  }\\r\\n\\r\\n  function depositERC20(address _token, uint256 _amount) external {\\r\\n    require(_amount > 0, \\\"depositERC20: Amount must be greater than zero\\\");\\r\\n    require(\\r\\n      IERC20(_token).allowance(msg.sender, address(this)) >= _amount,\\r\\n      \\\"depositERC20: Allowance not sufficient\\\"\\r\\n    );\\r\\n    require(\\r\\n      IERC20(_token).balanceOf(msg.sender) >= _amount,\\r\\n      \\\"depositERC20: You don't have enough balance\\\"\\r\\n    );\\r\\n\\r\\n    IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n    emit Deposit(_token, _amount, msg.sender);\\r\\n  }\\r\\n\\r\\n  function depositETH() external payable {\\r\\n    require(msg.value > 0, \\\"depositETH: Invalid Ether deposit amount\\\");\\r\\n    emit Deposit(address(0), msg.value, msg.sender);\\r\\n  }\\r\\n\\r\\n  function withdrawBatch(\\r\\n    address[] memory _tokens,\\r\\n    uint256[] memory _amounts,\\r\\n    uint256 _timeout,\\r\\n    bytes calldata _signature\\r\\n  ) external {\\r\\n    require(_timeout > block.timestamp, \\\"withdrawBatch: Signature is expired\\\");\\r\\n    require(\\r\\n      !usedSignatures[_signature],\\r\\n      \\\"withdrawBatch: Signature already used\\\"\\r\\n    );\\r\\n    require(\\r\\n      lastWithdraw[msg.sender] + withdrawCoolDown < block.timestamp,\\r\\n      \\\"withdrawBatch: Withdrawal is too soon\\\"\\r\\n    );\\r\\n    require(\\r\\n      _tokens.length == _amounts.length,\\r\\n      \\\"withdrawBatch: Invalid _tokens or _amounts length\\\"\\r\\n    );\\r\\n    require(\\r\\n      _verifyHashSignature(\\r\\n        keccak256(abi.encode(msg.sender, _tokens, _amounts, _timeout)),\\r\\n        _signature\\r\\n      ),\\r\\n      \\\"withdrawBatch: Signature is invalid\\\"\\r\\n    );\\r\\n\\r\\n    usedSignatures[_signature] = true;\\r\\n    lastWithdraw[msg.sender] = block.timestamp;\\r\\n\\r\\n    withdrawAllTokens(_tokens, _amounts);\\r\\n\\r\\n    emit WithdrawBatch(_tokens, msg.sender, _amounts);\\r\\n  }\\r\\n\\r\\n  function withdrawAllTokens(\\r\\n    address[] memory _tokens,\\r\\n    uint256[] memory _amounts\\r\\n  ) internal {\\r\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n      address token = _tokens[i];\\r\\n      uint256 tokenBalance = _amounts[i];\\r\\n      if (tokenBalance > 0) {\\r\\n        if (token == address(0)) {\\r\\n          payable(msg.sender).transfer(tokenBalance);\\r\\n        } else {\\r\\n          if (token == usdtAddress) {\\r\\n            IERC20_USDT(token).transfer(msg.sender, tokenBalance);\\r\\n          } else {            \\r\\n            IERC20(token).transfer(msg.sender, tokenBalance);\\r\\n          } \\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n   /// EMERGENCY FUNCTIONS\\r\\n\\r\\n  /// @notice Emergency function to withdraw ETH\\r\\n  function emergencyWithdrawETH() external onlyOwner {\\r\\n      uint256 contractBalance = address(this).balance;\\r\\n\\r\\n      payable(msg.sender).transfer(contractBalance);\\r\\n\\r\\n      emit WithdrawETH(contractBalance, msg.sender, msg.sender);\\r\\n  }\\r\\n  /// @notice Emergency function to withdraw ERC20 tokens\\r\\n  /// @param token Address of the ERC20 token\\r\\n  function emergencyWithdrawERC20(address token) external onlyOwner {\\r\\n      uint256 contractBalance = IERC20(token).balanceOf(address(this));\\r\\n\\r\\n      require(\\r\\n          contractBalance > 0,\\r\\n          \\\"emergencyWithdrawERC20: No tokens to withdraw\\\"\\r\\n      );\\r\\n\\r\\n      if (token == usdtAddress) {\\r\\n        IERC20_USDT(token).transfer(msg.sender, contractBalance);\\r\\n      } else {\\r\\n        IERC20(token).transfer(msg.sender, contractBalance);\\r\\n      }\\r\\n\\r\\n      emit WithdrawERC20(token, contractBalance, msg.sender, msg.sender);\\r\\n  }\\r\\n\\r\\n  function _verifyHashSignature(\\r\\n    bytes32 freshHash,\\r\\n    bytes memory signature\\r\\n  ) internal view returns (bool) {\\r\\n    bytes32 hash = keccak256(\\r\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\r\\n    );\\r\\n\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n    uint8 v;\\r\\n\\r\\n    if (signature.length != 65) {\\r\\n      return false;\\r\\n    }\\r\\n    assembly {\\r\\n      r := mload(add(signature, 32))\\r\\n      s := mload(add(signature, 64))\\r\\n      v := byte(0, mload(add(signature, 96)))\\r\\n    }\\r\\n\\r\\n    if (v < 27) {\\r\\n      v += 27;\\r\\n    }\\r\\n\\r\\n    address signer = address(0);\\r\\n    if (v == 27 || v == 28) {\\r\\n      // solium-disable-next-line arg-overflow\\r\\n      signer = ecrecover(hash, v, r, s);\\r\\n    }\\r\\n    return secret == signer;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interface/IERC20_USDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20_USDT {    \\n    function transferFrom(address from, address to, uint value) external;\\n    function transfer(address to, uint value) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secret\",\"type\":\"address\"}],\"name\":\"setSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCoolDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RRLootContract", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007c8f6808778ba76841d3700cada31206c438f49d000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}