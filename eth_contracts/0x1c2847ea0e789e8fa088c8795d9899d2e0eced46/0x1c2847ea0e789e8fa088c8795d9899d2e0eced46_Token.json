{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Token.sol\": {\r\n      \"content\": \"pragma solidity 0.8.20;\\n\\n// SPDX-License-Identifier: MIT\\n/* \\nIntroducing PopStar AI $POPAI. A mind blowing algorithm using AI to create songs in various styles and languages, for selected topics.\\nWeb: https://popstar.studio\\nTG: https://t.me/popstar_ai\\nTG Bot: https://t.me/pop_ai_bot\\nTwitter: https://twitter.com/starpop_ai\\n*/\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Metadata is IERC20{\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    \\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() external virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n}\\n\\ninterface ILpPair {\\n    function sync() external;\\n}\\n\\ninterface IDexRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n}\\n\\ninterface IDexFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ncontract Token is ERC20, Ownable {\\n\\n    mapping (address => bool) public exemptFromFees;\\n    mapping (address => bool) public exemptFromLimits;\\n\\n    bool public tradingAllowed;\\n\\n    mapping (address => bool) public isAMMPair;\\n\\n    address public marketingAddress;\\n    address public devAddress;\\n\\n    Taxes public buyTax;\\n    Taxes public sellTax;\\n\\n    TokensForTax public tokensForTax;\\n\\n    mapping(address => uint256) private _holderLastTransferBlock; // MEV protection\\n    bool public antiMevEnabled = true;\\n\\n    bool public limited = true;\\n\\n    uint256 public swapTokensAtAmt;\\n\\n    address public immutable lpPair;\\n    IDexRouter public immutable dexRouter;\\n    address public immutable WETH;\\n\\n    TxLimits public txLimits;\\n\\n    uint64 public constant FEE_DIVISOR = 10000;\\n\\n    uint256 public launchBlock;\\n    bool public dynamicTaxOn;\\n    bool public dynamicLiquidityTax;\\n\\n    bool public transferDelayEnabled = true;\\n\\n    // structs\\n\\n    struct TxLimits {\\n        uint128 transactionLimit;\\n        uint128 walletLimit;\\n    }\\n\\n    struct Taxes {\\n        uint64 marketingTax;\\n        uint64 devTax;\\n        uint64 liquidityTax;\\n        uint64 totalTax;\\n    }\\n\\n    struct TokensForTax {\\n        uint80 tokensForMarketing;\\n        uint80 tokensForLiquidity;\\n        uint80 tokensForDev;\\n        bool gasSaver;\\n    }\\n\\n    // events\\n\\n    event UpdatedTransactionLimit(uint newMax);\\n    event UpdatedWalletLimit(uint newMax);\\n    event SetExemptFromFees(address _address, bool _isExempt);\\n    event SetExemptFromLimits(address _address, bool _isExempt);\\n    event RemovedLimits();\\n    event UpdatedBuyTax(uint newAmt);\\n    event UpdatedSellTax(uint newAmt);\\n\\n    // constructor\\n\\n    constructor()\\n        ERC20(\\\"PopStar AI\\\", \\\"POPAI\\\")\\n    {   \\n        _mint(msg.sender, 10_000_000 * 1e18);\\n\\n        address _v2Router;\\n\\n        dynamicTaxOn = true;\\n        dynamicLiquidityTax = false;\\n\\n        // @dev assumes WETH pair\\n        if(block.chainid == 1){\\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        } else if(block.chainid == 5){\\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        } else if(block.chainid == 97){\\n            _v2Router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\\n        } else if(block.chainid == 42161){\\n            _v2Router = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n        } else {\\n            revert(\\\"Chain not configured\\\");\\n        }\\n\\n        dexRouter = IDexRouter(_v2Router);\\n\\n        txLimits.transactionLimit = uint128(totalSupply() * 10 / 10000);\\n        txLimits.walletLimit = uint128(totalSupply() * 10 / 10000);\\n        swapTokensAtAmt = totalSupply() * 25 / 100000;\\n\\n        marketingAddress = 0x9A9f962AA2D786C0A2D3cD152361C0Ec19C1a832;\\n        devAddress = 0x4c2Bfb6280004eAB341EfC32c48D02555428E849; \\n\\n        buyTax.marketingTax = 1600; // 1% = 100\\n        buyTax.liquidityTax = 0;\\n        buyTax.devTax = 400;\\n        buyTax.totalTax = buyTax.marketingTax + buyTax.liquidityTax + buyTax.devTax;\\n\\n        sellTax.marketingTax = 1600;\\n        sellTax.liquidityTax = 0;\\n        sellTax.devTax = 400;\\n        sellTax.totalTax = sellTax.marketingTax + sellTax.liquidityTax + sellTax.devTax;\\n\\n        tokensForTax.gasSaver = true;\\n\\n        WETH = dexRouter.WETH();\\n        lpPair = IDexFactory(dexRouter.factory()).createPair(address(this), WETH);\\n\\n        isAMMPair[lpPair] = true;\\n\\n        exemptFromLimits[lpPair] = true;\\n        exemptFromLimits[msg.sender] = true;\\n        exemptFromLimits[address(this)] = true;\\n\\n        exemptFromFees[msg.sender] = true;\\n        exemptFromFees[address(this)] = true;\\n        exemptFromFees[address(dexRouter)] = true;\\n \\n        _approve(address(this), address(dexRouter), type(uint256).max);\\n        _approve(address(msg.sender), address(dexRouter), totalSupply());\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        \\n        if(!exemptFromFees[from] && !exemptFromFees[to]){\\n            require(tradingAllowed, \\\"Trading not active\\\");\\n            amount -= handleTax(from, to, amount);\\n            checkLimits(from, to, amount);\\n        }\\n\\n        super._transfer(from,to,amount);\\n    }\\n\\n    function checkLimits(address from, address to, uint256 amount) internal {\\n        if(limited){\\n            bool exFromLimitsTo = exemptFromLimits[to];\\n            uint256 balanceOfTo = balanceOf(to);\\n            TxLimits memory _txLimits = txLimits;\\n            // buy\\n            if (isAMMPair[from] && !exFromLimitsTo) {\\n                require(amount <= _txLimits.transactionLimit, \\\"Max Txn\\\");\\n                require(amount + balanceOfTo <= _txLimits.walletLimit, \\\"Max Wallet\\\");\\n            } \\n            // sell\\n            else if (isAMMPair[to] && !exemptFromLimits[from]) {\\n                require(amount <= _txLimits.transactionLimit, \\\"Max Txn\\\");\\n            }\\n            else if(!exFromLimitsTo) {\\n                require(amount + balanceOfTo <= _txLimits.walletLimit, \\\"Max Wallet\\\");\\n            }\\n\\n            if(transferDelayEnabled){\\n                if (to != address(dexRouter) && to != address(lpPair)){\\n                    require(_holderLastTransferBlock[tx.origin] < block.number, \\\"Transfer Delay\\\");\\n                    require(tx.origin == to, \\\"no buying to external wallets yet\\\");\\n                }\\n            }\\n        }\\n\\n        if (antiMevEnabled){\\n            if(isAMMPair[to]){\\n                require(_holderLastTransferBlock[from] < block.number, \\\"Anti MEV\\\");\\n            } else {\\n                _holderLastTransferBlock[to] = block.number;\\n                _holderLastTransferBlock[tx.origin] = block.number;\\n            }\\n        }\\n    }\\n\\n    function handleTax(address from, address to, uint256 amount) internal returns (uint256){\\n\\n        if(balanceOf(address(this)) >= swapTokensAtAmt && !isAMMPair[from]) {\\n            convertTaxes();\\n        }\\n\\n        if(dynamicTaxOn){\\n            setInternalTaxes();\\n        }\\n        \\n        uint128 tax = 0;\\n\\n        Taxes memory taxes;\\n\\n        if (isAMMPair[to]){\\n            taxes = sellTax;\\n        } else if(isAMMPair[from]){\\n            taxes = buyTax;\\n        }\\n\\n        if(taxes.totalTax > 0){\\n            TokensForTax memory tokensForTaxUpdate = tokensForTax;\\n            tax = uint128(amount * taxes.totalTax / FEE_DIVISOR);\\n            tokensForTaxUpdate.tokensForLiquidity += uint80(tax * taxes.liquidityTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForMarketing += uint80(tax * taxes.marketingTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForDev += uint80(tax * taxes.devTax / taxes.totalTax / 1e9);\\n            tokensForTax = tokensForTaxUpdate;\\n            super._transfer(from, address(this), tax);\\n        }\\n        \\n        return tax;\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmt) private {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WETH;\\n\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmt,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function convertTaxes() private {\\n\\n        uint256 contractBalance = balanceOf(address(this));\\n        TokensForTax memory tokensForTaxMem = tokensForTax;\\n        uint256 totalTokensToSwap = tokensForTaxMem.tokensForLiquidity + tokensForTaxMem.tokensForMarketing + tokensForTaxMem.tokensForDev;\\n        \\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\n\\n        if(contractBalance > swapTokensAtAmt * 20){\\n            contractBalance = swapTokensAtAmt * 20;\\n        }\\n\\n        if(tokensForTaxMem.tokensForLiquidity > 0){\\n            uint256 liquidityTokens = contractBalance * tokensForTaxMem.tokensForLiquidity / totalTokensToSwap;\\n            super._transfer(address(this), lpPair, liquidityTokens);\\n            try ILpPair(lpPair).sync(){} catch {}\\n            contractBalance -= liquidityTokens;\\n            totalTokensToSwap -= tokensForTaxMem.tokensForLiquidity;\\n        }\\n\\n        if(contractBalance > 0){\\n\\n            swapTokensForETH(contractBalance);\\n            \\n            uint256 ethBalance = address(this).balance;\\n\\n            bool success;\\n\\n            if(tokensForTaxMem.tokensForDev > 0){\\n                (success,) = devAddress.call{value: ethBalance * tokensForTaxMem.tokensForDev / totalTokensToSwap}(\\\"\\\");  \\n            }\\n\\n            ethBalance = address(this).balance;\\n\\n            if(ethBalance > 0){\\n                (success,) = marketingAddress.call{value: ethBalance}(\\\"\\\");  \\n            }\\n        }\\n\\n        tokensForTaxMem.tokensForLiquidity = 0;\\n        tokensForTaxMem.tokensForMarketing = 0;\\n        tokensForTaxMem.tokensForDev = 0;\\n\\n        tokensForTax = tokensForTaxMem;\\n    }\\n\\n    // owner functions\\n    function setExemptFromFee(address _address, bool _isExempt) external onlyOwner {\\n        require(_address != address(0), \\\"Zero Address\\\");\\n        require(_address != address(this), \\\"Cannot unexempt contract\\\");\\n        exemptFromFees[_address] = _isExempt;\\n        emit SetExemptFromFees(_address, _isExempt);\\n    }\\n\\n    function setExemptFromLimit(address _address, bool _isExempt) external onlyOwner {\\n        require(_address != address(0), \\\"Zero Address\\\");\\n        if(!_isExempt){\\n            require(_address != lpPair, \\\"Cannot remove pair\\\");\\n        }\\n        exemptFromLimits[_address] = _isExempt;\\n        emit SetExemptFromLimits(_address, _isExempt);\\n    }\\n\\n    function updateTransactionLimit(uint128 newNumInTokens) external onlyOwner {\\n        require(newNumInTokens >= (totalSupply() * 1 / 1000)/(10**decimals()), \\\"Too low\\\");\\n        txLimits.transactionLimit = uint128(newNumInTokens * (10**decimals()));\\n        emit UpdatedTransactionLimit(txLimits.transactionLimit);\\n    }\\n\\n    function updateWalletLimit(uint128 newNumInTokens) external onlyOwner {\\n        require(newNumInTokens >= (totalSupply() * 1 / 1000)/(10**decimals()), \\\"Too low\\\");\\n        txLimits.walletLimit = uint128(newNumInTokens * (10**decimals()));\\n        emit UpdatedWalletLimit(txLimits.walletLimit);\\n    }\\n\\n    function updateSwapTokensAmt(uint256 newAmount) external onlyOwner {\\n        require(newAmount >= (totalSupply() * 1) / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\n        require(newAmount <= (totalSupply() * 5) / 1000, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\n        swapTokensAtAmt = newAmount;\\n    }\\n\\n    function updateBuyTax(uint64 _marketingTax, uint64 _liquidityTax, uint64 _devTax) external onlyOwner {\\n        Taxes memory taxes;\\n        taxes.marketingTax = _marketingTax;\\n        taxes.liquidityTax = _liquidityTax;\\n        taxes.devTax = _devTax;\\n        taxes.totalTax = _marketingTax + _liquidityTax + _devTax;\\n        require(taxes.totalTax  <= 1000, \\\"Keep tax below 10%\\\");\\n        emit UpdatedBuyTax(taxes.totalTax);\\n        buyTax = taxes;\\n    }\\n\\n    function updateSellTax(uint64 _marketingTax, uint64 _liquidityTax, uint64 _devTax) external onlyOwner {\\n        Taxes memory taxes;\\n        taxes.marketingTax = _marketingTax;\\n        taxes.liquidityTax = _liquidityTax;\\n        taxes.devTax = _devTax;\\n        taxes.totalTax = _marketingTax + _liquidityTax + _devTax;\\n        require(taxes.totalTax  <= 1000, \\\"Keep tax below 10%\\\");\\n        emit UpdatedSellTax(taxes.totalTax);\\n        sellTax = taxes;\\n    }\\n\\n    function renounceDevTax() external {\\n        require(msg.sender == devAddress, \\\"Not dev\\\");\\n        \\n        Taxes memory buyTaxes = buyTax;\\n        buyTaxes.marketingTax += buyTaxes.devTax;\\n        buyTaxes.devTax = 0;\\n        buyTax = buyTaxes;\\n\\n        Taxes memory sellTaxes = sellTax;\\n        sellTaxes.marketingTax += sellTaxes.devTax;\\n        sellTaxes.devTax = 0;\\n        sellTax = sellTaxes;\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        require(!tradingAllowed, \\\"Trading already enabled\\\");\\n        tradingAllowed = true;\\n        launchBlock = block.number;\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        limited = false;\\n        TxLimits memory _txLimits;\\n        uint256 supply = totalSupply();\\n        _txLimits.transactionLimit = uint128(supply);\\n        _txLimits.walletLimit = uint128(supply);\\n        txLimits = _txLimits;\\n        emit RemovedLimits();\\n    }\\n\\n    function updateMevBlockerEnabled(bool _enabled) external onlyOwner {\\n        antiMevEnabled = _enabled;\\n    }\\n\\n    function removeTransferDelay() external onlyOwner {\\n        require(transferDelayEnabled, \\\"Already disabled!\\\");\\n        transferDelayEnabled = false;\\n    }\\n\\n    function airdropToWallets(address[] calldata wallets, uint256[] calldata amountsInWei) external onlyOwner {\\n        require(wallets.length == amountsInWei.length, \\\"arrays length mismatch\\\");\\n        for(uint256 i = 0; i < wallets.length; i++){\\n            super._transfer(msg.sender, wallets[i], amountsInWei[i]);\\n        }\\n    }\\n\\n    function rescueTokens(address _token, address _to) external onlyOwner {\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\n        SafeERC20.safeTransfer(IERC20(_token),_to, _contractBalance);\\n    }\\n\\n    function updateMarketingAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"zero address\\\");\\n        marketingAddress = _address;\\n    }\\n\\n    function updateDevAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"zero address\\\");\\n        devAddress = _address;\\n    }\\n\\n    function removeDynamicTax() external onlyOwner {\\n        require(dynamicTaxOn, \\\"Already off\\\");\\n        dynamicTaxOn = false;\\n    }\\n\\n    receive() payable external {}\\n\\n    function setInternalTaxes() internal {\\n        Taxes memory newBuyTax = buyTax;\\n        Taxes memory newSellTax = sellTax;\\n        TxLimits memory _txLimits = txLimits;\\n\\n        uint256 currentBlock = block.number;\\n        uint256 blocksSinceLaunch = currentBlock - launchBlock;\\n        uint256 decay = blocksSinceLaunch / 10;\\n\\n        if(decay >= 11){\\n            dynamicTaxOn = false;\\n            newBuyTax.totalTax = 500;\\n            newSellTax.totalTax = 500;\\n            limited = false;\\n            uint256 supply = totalSupply();\\n            _txLimits.transactionLimit = uint128(supply);\\n            _txLimits.walletLimit = uint128(supply);\\n            txLimits = _txLimits;\\n            emit RemovedLimits();\\n        } else if (decay > 0) {\\n            newBuyTax.totalTax = uint64(2000 - (decay * 100));\\n            newSellTax.totalTax = uint64(2000 - (decay * 100));\\n            _txLimits.transactionLimit = uint128(totalSupply() * decay / 1000);\\n            _txLimits.walletLimit = uint128(totalSupply() * decay / 1000);\\n        } \\n\\n        if(buyTax.totalTax != newBuyTax.totalTax){\\n            if(dynamicLiquidityTax){\\n                newBuyTax.marketingTax = newBuyTax.totalTax * 6 / 10;\\n                newBuyTax.liquidityTax = newBuyTax.totalTax * 2 / 10;\\n            } else {\\n                newBuyTax.marketingTax = newBuyTax.totalTax * 8 / 10;\\n                newBuyTax.liquidityTax = 0;\\n            }\\n            newBuyTax.devTax = newBuyTax.totalTax - newBuyTax.marketingTax - newBuyTax.liquidityTax;\\n            buyTax = newBuyTax;\\n        }\\n        if(sellTax.totalTax != newSellTax.totalTax){\\n            if(dynamicLiquidityTax){\\n                newSellTax.marketingTax = newSellTax.totalTax * 6 / 10;\\n                newSellTax.liquidityTax = newSellTax.totalTax * 2 / 10;\\n            } else {\\n                newSellTax.marketingTax = newSellTax.totalTax * 8 / 10;\\n                newSellTax.liquidityTax = 0;\\n            }\\n            newSellTax.devTax = newSellTax.totalTax - newSellTax.marketingTax - newSellTax.liquidityTax;\\n            sellTax = newSellTax;\\n        }\\n\\n        if(_txLimits.transactionLimit != txLimits.transactionLimit){\\n            txLimits = _txLimits;\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"SetExemptFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"SetExemptFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmt\",\"type\":\"uint256\"}],\"name\":\"UpdatedSellTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedTransactionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"UpdatedWalletLimit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInWei\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiMevEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"marketingTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"devTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidityTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalTax\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicLiquidityTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTaxOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAMMPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDynamicTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"marketingTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"devTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidityTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalTax\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"setExemptFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExempt\",\"type\":\"bool\"}],\"name\":\"setExemptFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTax\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"tokensForMarketing\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"tokensForLiquidity\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"tokensForDev\",\"type\":\"uint80\"},{\"internalType\":\"bool\",\"name\":\"gasSaver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimits\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"transactionLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"walletLimit\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_marketingTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_liquidityTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_devTax\",\"type\":\"uint64\"}],\"name\":\"updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateMevBlockerEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_marketingTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_liquidityTax\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_devTax\",\"type\":\"uint64\"}],\"name\":\"updateSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newNumInTokens\",\"type\":\"uint128\"}],\"name\":\"updateTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newNumInTokens\",\"type\":\"uint128\"}],\"name\":\"updateWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}