// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "IERC20.sol";
import "Ownable.sol";

import "Geminon.sol";


/**
* @title CollectibleFees
* @author Geminon Protocol
* @notice Allows owner of the contract to collect fees in GEX tokens
*/
contract CollectibleFees is Ownable, Geminon {
    
    address private _feesCollector;
    uint256 internal _balanceFees;
    
    
    /// @dev Set the address of the fees collector.
    function setCollector(address feesCollector) external onlyOwner {
        _feesCollector = feesCollector;
    }

    /// @dev Collects the fees generated by this contract
    function collectFees() external returns(uint256) {
        require(_feesCollector != address(0)); // dev: collector not set
        require(msg.sender == _feesCollector); // dev: invalid caller address
        require(_balanceFees > 0); // dev: Nothing to collect
        
        uint256 feesCollected = _balanceFees;
        _balanceFees = 0;
        
        require(IERC20(GEX).transfer(_feesCollector, feesCollected));
        return feesCollected;
    }  
}