{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokenomics/TORUSMintingRebalancingRewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../../interfaces/tokenomics/ITORUSMintingRebalancingRewardsHandler.sol\\\";\\nimport \\\"../../interfaces/tokenomics/IInflationManager.sol\\\";\\nimport \\\"../../interfaces/tokenomics/ITORUSToken.sol\\\";\\nimport \\\"../../interfaces/pools/ITorusPool.sol\\\";\\nimport \\\"../../libraries/ScaledMath.sol\\\";\\nimport \\\"./BaseMinter.sol\\\";\\n\\ncontract TORUSMintingRebalancingRewardsHandler is\\n    ITORUSMintingRebalancingRewardsHandler,\\n    Ownable,\\n    BaseMinter\\n{\\n    using ScaledMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev the maximum amount of TORUS that can be minted for rebalancing rewards\\n    uint256 internal constant _MAX_REBALANCING_REWARDS = 1_900_000e18; // 19% of total supply\\n\\n    /// @dev gives out 1 dollar per 1 hour (assuming 1 TORUS = 10 USD) for every 10,000 USD of TVL\\n    uint256 internal constant _INITIAL_REBALANCING_REWARD_PER_DOLLAR_PER_SECOND =\\n        1e18 / uint256(3600 * 1 * 10_000 * 10);\\n\\n    /// @dev to avoid TORUS rewards being too low, the TVL is assumed to be at least 10k\\n    /// when computing the rebalancing rewards\\n    uint256 internal constant _INITIAL_MIN_REBALANCING_REWARD_DOLLAR_MULTIPLIER = 10_000e18;\\n\\n    /// @dev to avoid TORUS rewards being too high, the TVL is assumed to be at most 10m\\n    /// when computing the rebalancing rewards\\n    uint256 internal constant _INITIAL_MAX_REBALANCING_REWARD_DOLLAR_MULTIPLIER = 10_000_000e18;\\n\\n    IController public immutable override controller;\\n\\n    uint256 public override totalTorusMinted;\\n    uint256 public override torusRebalancingRewardPerDollarPerSecond;\\n    uint256 public override maxRebalancingRewardDollarMultiplier;\\n    uint256 public override minRebalancingRewardDollarMultiplier;\\n\\n    modifier onlyInflationManager() {\\n        require(\\n            msg.sender == address(controller.inflationManager()),\\n            \\\"only InflationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IController _controller,\\n        ITORUSToken _torus,\\n        address emergencyMinter\\n    ) BaseMinter(_torus, emergencyMinter) {\\n        torusRebalancingRewardPerDollarPerSecond = _INITIAL_REBALANCING_REWARD_PER_DOLLAR_PER_SECOND;\\n        minRebalancingRewardDollarMultiplier = _INITIAL_MIN_REBALANCING_REWARD_DOLLAR_MULTIPLIER;\\n        maxRebalancingRewardDollarMultiplier = _INITIAL_MAX_REBALANCING_REWARD_DOLLAR_MULTIPLIER;\\n        controller = _controller;\\n    }\\n\\n    function setTorusRebalancingRewardPerDollarPerSecond(\\n        uint256 _torusRebalancingRewardPerDollarPerSecond\\n    ) external override onlyOwner {\\n        torusRebalancingRewardPerDollarPerSecond = _torusRebalancingRewardPerDollarPerSecond;\\n        emit SetTorusRebalancingRewardPerDollarPerSecond(_torusRebalancingRewardPerDollarPerSecond);\\n    }\\n\\n    function setMaxRebalancingRewardDollarMultiplier(uint256 _maxRebalancingRewardDollarMultiplier)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        maxRebalancingRewardDollarMultiplier = _maxRebalancingRewardDollarMultiplier;\\n        emit SetMaxRebalancingRewardDollarMultiplier(_maxRebalancingRewardDollarMultiplier);\\n    }\\n\\n    function setMinRebalancingRewardDollarMultiplier(uint256 _minRebalancingRewardDollarMultiplier)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        minRebalancingRewardDollarMultiplier = _minRebalancingRewardDollarMultiplier;\\n        emit SetMinRebalancingRewardDollarMultiplier(_minRebalancingRewardDollarMultiplier);\\n    }\\n\\n    function _distributeRebalancingRewards(\\n        address pool,\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        if (totalTorusMinted + amount > _MAX_REBALANCING_REWARDS) {\\n            amount = _MAX_REBALANCING_REWARDS - totalTorusMinted;\\n        }\\n        if (amount == 0) return;\\n        uint256 mintedAmount = torus.mint(account, amount);\\n        if (mintedAmount > 0) {\\n            totalTorusMinted += mintedAmount;\\n            emit RebalancingRewardDistributed(pool, account, address(torus), mintedAmount);\\n        }\\n    }\\n\\n    function poolTORUSRebalancingRewardPerSecond(address pool)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 poolWeight, uint256 totalUSDValue) = controller\\n            .inflationManager()\\n            .computePoolWeight(pool);\\n        uint256 tvlMultiplier = totalUSDValue;\\n        if (tvlMultiplier < minRebalancingRewardDollarMultiplier)\\n            tvlMultiplier = minRebalancingRewardDollarMultiplier;\\n        if (tvlMultiplier > maxRebalancingRewardDollarMultiplier)\\n            tvlMultiplier = maxRebalancingRewardDollarMultiplier;\\n        return torusRebalancingRewardPerDollarPerSecond.mulDown(poolWeight).mulDown(tvlMultiplier);\\n    }\\n\\n    function handleRebalancingRewards(\\n        ITorusPool torusPool,\\n        address account,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external onlyInflationManager {\\n        uint256 torusRewardAmount = computeRebalancingRewards(\\n            address(torusPool),\\n            deviationBefore,\\n            deviationAfter\\n        );\\n        _distributeRebalancingRewards(address(torusPool), account, torusRewardAmount);\\n    }\\n\\n    /// @dev this computes how much TORUS a user should get when depositing\\n    /// this does not check whether the rewards should still be distributed\\n    /// amount TORUS = t * TORUS/s * (1 - (\u0394deviation / initialDeviation))\\n    /// where\\n    /// TORUS/s: the amount of TORUS per second to distributed for rebalancing\\n    /// t: the time elapsed since the weight update\\n    /// \u0394deviation: the deviation difference caused by this deposit\\n    /// initialDeviation: the deviation after updating weights\\n    /// @return the amount of TORUS to give to the user as reward\\n    function computeRebalancingRewards(\\n        address torusPool,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) public view override returns (uint256) {\\n        if (deviationBefore < deviationAfter) return 0;\\n        uint256 torusPerSecond = poolTORUSRebalancingRewardPerSecond(torusPool);\\n        uint256 deviationDelta = deviationBefore - deviationAfter;\\n        uint256 deviationImprovementRatio = deviationDelta.divDown(\\n            ITorusPool(torusPool).totalDeviationAfterWeightUpdate()\\n        );\\n        uint256 lastWeightUpdate = controller.lastWeightUpdate(torusPool);\\n        uint256 elapsedSinceUpdate = uint256(block.timestamp) - lastWeightUpdate;\\n        return (elapsedSinceUpdate * torusPerSecond).mulDown(deviationImprovementRatio);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ITORUSMintingRebalancingRewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../pools/ITorusPool.sol\\\";\\nimport \\\"../IController.sol\\\";\\nimport \\\"./IRebalancingRewardsHandler.sol\\\";\\n\\ninterface ITORUSMintingRebalancingRewardsHandler is IRebalancingRewardsHandler {\\n    event SetTorusRebalancingRewardPerDollarPerSecond(uint256 torusRebalancingRewardPerDollarPerSecond);\\n    event SetMaxRebalancingRewardDollarMultiplier(uint256 maxRebalancingRewardDollarMultiplier);\\n    event SetMinRebalancingRewardDollarMultiplier(uint256 minRebalancingRewardDollarMultiplier);\\n\\n    function controller() external view returns (IController);\\n\\n    function totalTorusMinted() external view returns (uint256);\\n\\n    function torusRebalancingRewardPerDollarPerSecond() external view returns (uint256);\\n\\n    function maxRebalancingRewardDollarMultiplier() external view returns (uint256);\\n\\n    function minRebalancingRewardDollarMultiplier() external view returns (uint256);\\n\\n    function setTorusRebalancingRewardPerDollarPerSecond(\\n        uint256 _torusRebalancingRewardPerDollarPerSecond\\n    ) external;\\n\\n    function setMaxRebalancingRewardDollarMultiplier(uint256 _maxRebalancingRewardDollarMultiplier)\\n        external;\\n\\n    function setMinRebalancingRewardDollarMultiplier(uint256 _minRebalancingRewardDollarMultiplier)\\n        external;\\n\\n    function poolTORUSRebalancingRewardPerSecond(address pool) external view returns (uint256);\\n\\n    function computeRebalancingRewards(\\n        address torusPool,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/IInflationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IInflationManager {\\n    event TokensClaimed(address indexed pool, uint256 torusAmount);\\n    event RebalancingRewardHandlerAdded(address indexed pool, address indexed handler);\\n    event RebalancingRewardHandlerRemoved(address indexed pool, address indexed handler);\\n    event PoolWeightsUpdated();\\n\\n    function executeInflationRateUpdate() external;\\n\\n    function updatePoolWeights() external;\\n\\n    /// @notice returns the weights of the Torus pools to know how much inflation\\n    /// each of them will receive, as well as the total amount of USD value in all the pools\\n    function computePoolWeights()\\n        external\\n        view\\n        returns (\\n            address[] memory _pools,\\n            uint256[] memory poolWeights,\\n            uint256 totalUSDValue\\n        );\\n\\n    function computePoolWeight(address pool)\\n        external\\n        view\\n        returns (uint256 poolWeight, uint256 totalUSDValue);\\n\\n    function currentInflationRate() external view returns (uint256);\\n\\n    function getCurrentPoolInflationRate(address pool) external view returns (uint256);\\n\\n    function handleRebalancingRewards(\\n        address account,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external;\\n\\n    function addPoolRebalancingRewardHandler(address poolAddress, address rebalancingRewardHandler)\\n        external;\\n\\n    function removePoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address rebalancingRewardHandler\\n    ) external;\\n\\n    function rebalancingRewardHandlers(address poolAddress)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function hasPoolRebalancingRewardHandlers(address poolAddress, address handler)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ITORUSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITORUSToken is IERC20 {\\n    event MinterAdded(address minter);\\n    event MinterRemoved(address minter);\\n    event InitialDistributionMinted(uint256 amount);\\n    event AirdropMinted(uint256 amount);\\n    event AMMRewardsMinted(uint256 amount);\\n    event TreasuryRewardsMinted(uint256 amount);\\n    event SeedShareMinted(uint256 amount);\\n\\n    /// @notice adds a new minter\\n    function addMinter(address newMinter) external;\\n\\n    /// @notice renounces the minter rights of the sender\\n    function renounceMinterRights() external;\\n\\n    /// @notice mints the initial distribution amount to the distribution contract\\n    function mintInitialDistribution(address distribution) external;\\n\\n    /// @notice mints the airdrop amount to the airdrop contract\\n    function mintAirdrop(address airdropHandler) external;\\n\\n    /// @notice mints the amm rewards\\n    function mintAMMRewards(address ammGauge) external;\\n\\n    /// @notice mints `amount` to `account`\\n    function mint(address account, uint256 amount) external returns (uint256);\\n\\n    /// @notice returns a list of all authorized minters\\n    function listMinters() external view returns (address[] memory);\\n\\n    /// @notice returns the ratio of inflation already minted\\n    function inflationMintedRatio() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/ITorusPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./ILpToken.sol\\\";\\nimport \\\"./IRewardManager.sol\\\";\\nimport \\\"../IOracle.sol\\\";\\n\\ninterface ITorusPool {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 depositedAmount,\\n        uint256 lpReceived\\n    );\\n    event Withdraw(address indexed account, uint256 amount);\\n    event NewWeight(address indexed curvePool, uint256 newWeight);\\n    event NewMaxIdleCurveLpRatio(uint256 newRatio);\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event HandledDepeggedCurvePool(address curvePool_);\\n    event HandledInvalidConvexPid(address curvePool_, uint256 pid_);\\n    event CurvePoolAdded(address curvePool_);\\n    event CurvePoolRemoved(address curvePool_);\\n    event Shutdown();\\n    event DepegThresholdUpdated(uint256 newThreshold);\\n    event MaxDeviationUpdated(uint256 newMaxDeviation);\\n\\n    struct PoolWeight {\\n        address poolAddress;\\n        uint256 weight;\\n    }\\n\\n    struct PoolWithAmount {\\n        address poolAddress;\\n        uint256 amount;\\n    }\\n\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    function lpToken() external view returns (ILpToken);\\n\\n    function rewardManager() external view returns (IRewardManager);\\n\\n    function depositFor(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external payable returns (uint256);\\n\\n    function deposit(uint256 _amount, uint256 _minLpReceived) external payable returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external payable returns (uint256);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function usdExchangeRate() external view returns (uint256);\\n\\n    function allCurvePools() external view returns (address[] memory);\\n\\n    function curvePoolsCount() external view returns (uint256);\\n\\n    function getCurvePoolAtIndex(uint256 _index) external view returns (address);\\n\\n    function unstakeAndWithdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function updateWeights(PoolWeight[] memory poolWeights) external;\\n\\n    function getWeight(address curvePool) external view returns (uint256);\\n\\n    function getWeights() external view returns (PoolWeight[] memory);\\n\\n    function getAllocatedUnderlying() external view returns (PoolWithAmount[] memory);\\n\\n    function removeCurvePool(address pool) external;\\n\\n    function addCurvePool(address pool) external;\\n\\n    function totalCurveLpBalance(address curvePool_) external view returns (uint256);\\n\\n    function rebalancingRewardActive() external view returns (bool);\\n\\n    function totalDeviationAfterWeightUpdate() external view returns (uint256);\\n\\n    function computeTotalDeviation() external view returns (uint256);\\n\\n    /// @notice returns the total amount of funds held by this pool in terms of underlying\\n    function totalUnderlying() external view returns (uint256);\\n\\n    function getTotalAndPerPoolUnderlying()\\n        external\\n        view\\n        returns (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated_,\\n            uint256[] memory perPoolUnderlying_\\n        );\\n\\n    /// @notice same as `totalUnderlying` but returns a cached version\\n    /// that might be slightly outdated if oracle prices have changed\\n    /// @dev this is useful in cases where we want to reduce gas usage and do\\n    /// not need a precise value\\n    function cachedTotalUnderlying() external view returns (uint256);\\n\\n    function handleInvalidConvexPid(address pool) external;\\n\\n    function shutdownPool() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function handleDepeggedCurvePool(address curvePool_) external;\\n\\n    function isBalanced() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"libraries/ScaledMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nlibrary ScaledMath {\\n    uint256 internal constant DECIMALS = 18;\\n    uint256 internal constant ONE = 10**DECIMALS;\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * b) / (10**decimals);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * 10**decimals) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        return ((a * ONE) - 1) / b + 1;\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / int256(ONE);\\n    }\\n\\n    function mulDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * b) / uint128(ONE);\\n    }\\n\\n    function mulDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * b) / int256(10**decimals);\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * int256(ONE)) / b;\\n    }\\n\\n    function divDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * uint128(ONE)) / b;\\n    }\\n\\n    function divDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * int256(10**decimals)) / b;\\n    }\\n\\n    function convertScale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function convertScale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function upscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a * (10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a / (10**(fromDecimals - toDecimals));\\n    }\\n\\n    function upscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a * int256(10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a / int256(10**(fromDecimals - toDecimals));\\n    }\\n\\n    function intPow(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 result = ONE;\\n        for (uint256 i; i < n; ) {\\n            result = mulDown(result, a);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function absSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a >= b ? a - b : b - a;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenomics/BaseMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"../../interfaces/tokenomics/IMinter.sol\\\";\\nimport \\\"../../interfaces/tokenomics/ITORUSToken.sol\\\";\\n\\n/// @notice All contracts that are allowed to mint TORUS should inherit from this contract\\n/// This allows the emergency minter to switch to a new minter during the initial 3 months in case of an issue\\nabstract contract BaseMinter is IMinter, ERC165Storage {\\n    address public immutable emergencyMinter;\\n    ITORUSToken public immutable torus;\\n\\n    constructor(ITORUSToken _torus, address _emergencyMinter) {\\n        emergencyMinter = _emergencyMinter;\\n        torus = _torus;\\n        _registerInterface(IMinter.renounceMinterRights.selector);\\n    }\\n\\n    function renounceMinterRights() external override {\\n        require(msg.sender == emergencyMinter, \\\"only emergency minter can renounce minter rights\\\");\\n        torus.renounceMinterRights();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./pools/ITorusPool.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./tokenomics/IInflationManager.sol\\\";\\nimport \\\"./tokenomics/ILpTokenStaker.sol\\\";\\nimport \\\"./ICurveRegistryCache.sol\\\";\\n\\ninterface IController {\\n    event PoolAdded(address indexed pool);\\n    event PoolRemoved(address indexed pool);\\n    event PoolShutdown(address indexed pool);\\n    event ConvexBoosterSet(address convexBooster);\\n    event CurveHandlerSet(address curveHandler);\\n    event ConvexHandlerSet(address convexHandler);\\n    event CurveRegistryCacheSet(address curveRegistryCache);\\n    event InflationManagerSet(address inflationManager);\\n    event PriceOracleSet(address priceOracle);\\n    event WeightUpdateMinDelaySet(uint256 weightUpdateMinDelay);\\n\\n    struct WeightUpdate {\\n        address torusPoolAddress;\\n        ITorusPool.PoolWeight[] weights;\\n    }\\n\\n    // inflation manager\\n\\n    function inflationManager() external view returns (IInflationManager);\\n\\n    function setInflationManager(address manager) external;\\n\\n    // views\\n    function curveRegistryCache() external view returns (ICurveRegistryCache);\\n\\n    /// lp token staker\\n    function setLpTokenStaker(address _lpTokenStaker) external;\\n\\n    function lpTokenStaker() external view returns (ILpTokenStaker);\\n\\n    // oracle\\n    function priceOracle() external view returns (IOracle);\\n\\n    function setPriceOracle(address oracle) external;\\n\\n    // pool functions\\n\\n    function listPools() external view returns (address[] memory);\\n\\n    function listActivePools() external view returns (address[] memory);\\n\\n    function isPool(address poolAddress) external view returns (bool);\\n\\n    function isActivePool(address poolAddress) external view returns (bool);\\n\\n    function addPool(address poolAddress) external;\\n\\n    function shutdownPool(address poolAddress) external;\\n\\n    function removePool(address poolAddress) external;\\n\\n    function torusToken() external view returns (address);\\n\\n    function lastWeightUpdate(address poolAddress) external view returns (uint256);\\n\\n    function updateWeights(WeightUpdate memory update) external;\\n\\n    function updateAllWeights(WeightUpdate[] memory weights) external;\\n\\n    // handler functions\\n\\n    function convexBooster() external view returns (address);\\n\\n    function curveHandler() external view returns (address);\\n\\n    function convexHandler() external view returns (address);\\n\\n    function setConvexBooster(address _convexBooster) external;\\n\\n    function setCurveHandler(address _curveHandler) external;\\n\\n    function setConvexHandler(address _convexHandler) external;\\n\\n    function setCurveRegistryCache(address curveRegistryCache_) external;\\n\\n    function emergencyMinter() external view returns (address);\\n\\n    function setWeightUpdateMinDelay(uint256 delay) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/IRebalancingRewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../pools/ITorusPool.sol\\\";\\n\\ninterface IRebalancingRewardsHandler {\\n    event RebalancingRewardDistributed(\\n        address indexed pool,\\n        address indexed account,\\n        address indexed token,\\n        uint256 tokenAmount\\n    );\\n\\n    /// @notice Handles the rewards distribution for the rebalancing of the pool\\n    /// @param torusPool The pool that is being rebalanced\\n    /// @param account The account that is rebalancing the pool\\n    /// @param deviationBefore The total absolute deviation of the Torus pool before the rebalancing\\n    /// @param deviationAfter The total absolute deviation of the Torus pool after the rebalancing\\n    function handleRebalancingRewards(\\n        ITorusPool torusPool,\\n        address account,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/ILpToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ILpToken is IERC20Metadata {\\n    function mint(address account, uint256 amount) external returns (uint256);\\n\\n    function burn(address _owner, uint256 _amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/pools/IRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IRewardManager {\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event SoldRewardTokens(uint256 targetTokenReceived);\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardRemoved(address reward);\\n    event ExtraRewardsCurvePoolSet(address extraReward, address curvePool);\\n    event FeesSet(uint256 feePercentage);\\n    event FeesEnabled(uint256 feePercentage);\\n    event EarningsClaimed(\\n        address indexed claimedBy,\\n        uint256 torusEarned,\\n        uint256 crvEarned,\\n        uint256 cvxEarned\\n    );\\n\\n    struct RewardMeta {\\n        uint256 earnedIntegral;\\n        uint256 lastEarned;\\n        mapping(address => uint256) accountIntegral;\\n        mapping(address => uint256) accountShare;\\n    }\\n\\n    function accountCheckpoint(address account) external;\\n\\n    function poolCheckpoint() external returns (bool);\\n\\n    function addExtraReward(address reward) external returns (bool);\\n\\n    function addBatchExtraRewards(address[] memory rewards) external;\\n\\n    function pool() external view returns (address);\\n\\n    function setFeePercentage(uint256 _feePercentage) external;\\n\\n    function claimableRewards(address account)\\n        external\\n        view\\n        returns (\\n            uint256 torusRewards,\\n            uint256 crvRewards,\\n            uint256 cvxRewards\\n        );\\n\\n    function claimEarnings()\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function claimPoolEarningsAndSellRewardTokens() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    event TokenUpdated(address indexed token, address feed, uint256 maxDelay, bool isEthPrice);\\n\\n    /// @notice returns the price in USD of symbol.\\n    function getUSDPrice(address token) external view returns (uint256);\\n\\n    /// @notice returns if the given token is supported for pricing.\\n    function isTokenSupported(address token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IMinter is IERC165 {\\n    function renounceMinterRights() external;\\n}\\n\"\r\n    },\r\n    \"interfaces/tokenomics/ILpTokenStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface ILpTokenStaker {\\n    event LpTokenStaked(address indexed account, uint256 amount);\\n    event LpTokenUnstaked(address indexed account, uint256 amount);\\n    event TokensClaimed(address indexed pool, uint256 torusAmount);\\n    event Shutdown();\\n\\n    function stake(uint256 amount, address torusPool) external;\\n\\n    function unstake(uint256 amount, address torusPool) external;\\n\\n    function stakeFor(\\n        uint256 amount,\\n        address torusPool,\\n        address account\\n    ) external;\\n\\n    function unstakeFor(\\n        uint256 amount,\\n        address torusPool,\\n        address account\\n    ) external;\\n\\n    function unstakeFrom(uint256 amount, address account) external;\\n\\n    function getUserBalanceForPool(address torusPool, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBalanceForPool(address torusPool) external view returns (uint256);\\n\\n    function updateBoost(address user) external;\\n\\n    function claimTORUSRewardsForPool(address pool) external;\\n\\n    function claimableTorus(address pool) external view returns (uint256);\\n\\n    function checkpoint(address pool) external returns (uint256);\\n\\n    function shutdown() external;\\n\\n    function getBoost(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/ICurveRegistryCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./vendor/IBooster.sol\\\";\\nimport \\\"../libraries/CurvePoolUtils.sol\\\";\\n\\ninterface ICurveRegistryCache {\\n    function BOOSTER() external view returns (IBooster);\\n\\n    function initPool(address pool_) external;\\n\\n    function initPool(address pool_, uint256 pid_) external;\\n\\n    function lpToken(address pool_) external view returns (address);\\n\\n    function assetType(address pool_) external view returns (CurvePoolUtils.AssetType);\\n\\n    function isRegistered(address pool_) external view returns (bool);\\n\\n    function hasCoinDirectly(address pool_, address coin_) external view returns (bool);\\n\\n    function hasCoinAnywhere(address pool_, address coin_) external view returns (bool);\\n\\n    function basePool(address pool_) external view returns (address);\\n\\n    function coinIndex(address pool_, address coin_) external view returns (int128);\\n\\n    function nCoins(address pool_) external view returns (uint256);\\n\\n    function coinIndices(\\n        address pool_,\\n        address from_,\\n        address to_\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function decimals(address pool_) external view returns (uint256[] memory);\\n\\n    function interfaceVersion(address pool_) external view returns (uint256);\\n\\n    function poolFromLpToken(address lpToken_) external view returns (address);\\n\\n    function coins(address pool_) external view returns (address[] memory);\\n\\n    function getPid(address _pool) external view returns (uint256);\\n\\n    function getRewardPool(address _pool) external view returns (address);\\n\\n    function isShutdownPid(uint256 pid_) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface IBooster {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"libraries/CurvePoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/vendor/ICurvePoolV2.sol\\\";\\nimport \\\"../interfaces/vendor/ICurvePoolV1.sol\\\";\\nimport \\\"./ScaledMath.sol\\\";\\n\\nlibrary CurvePoolUtils {\\n    using ScaledMath for uint256;\\n\\n    uint256 internal constant _DEFAULT_IMBALANCE_THRESHOLD = 0.02e18;\\n\\n    enum AssetType {\\n        USD,\\n        ETH,\\n        BTC,\\n        OTHER,\\n        CRYPTO\\n    }\\n\\n    struct PoolMeta {\\n        address pool;\\n        uint256 numberOfCoins;\\n        AssetType assetType;\\n        uint256[] decimals;\\n        uint256[] prices;\\n        uint256[] thresholds;\\n    }\\n\\n    function ensurePoolBalanced(PoolMeta memory poolMeta) internal view {\\n        uint256 fromDecimals = poolMeta.decimals[0];\\n        uint256 fromBalance = 10**fromDecimals;\\n        uint256 fromPrice = poolMeta.prices[0];\\n        for (uint256 i = 1; i < poolMeta.numberOfCoins; i++) {\\n            uint256 toDecimals = poolMeta.decimals[i];\\n            uint256 toPrice = poolMeta.prices[i];\\n            uint256 toExpectedUnscaled = (fromBalance * fromPrice) / toPrice;\\n            uint256 toExpected = toExpectedUnscaled.convertScale(\\n                uint8(fromDecimals),\\n                uint8(toDecimals)\\n            );\\n\\n            uint256 toActual;\\n\\n            if (poolMeta.assetType == AssetType.CRYPTO) {\\n                // Handling crypto pools\\n                toActual = ICurvePoolV2(poolMeta.pool).get_dy(0, i, fromBalance);\\n            } else {\\n                // Handling other pools\\n                toActual = ICurvePoolV1(poolMeta.pool).get_dy(0, int128(uint128(i)), fromBalance);\\n            }\\n\\n            require(\\n                _isWithinThreshold(toExpected, toActual, poolMeta.thresholds[i]),\\n                \\\"pool is not balanced\\\"\\n            );\\n        }\\n    }\\n\\n    function _isWithinThreshold(\\n        uint256 a,\\n        uint256 b,\\n        uint256 imbalanceTreshold\\n    ) internal pure returns (bool) {\\n        if (imbalanceTreshold == 0) imbalanceTreshold = _DEFAULT_IMBALANCE_THRESHOLD;\\n        if (a > b) return (a - b).divDown(a) <= imbalanceTreshold;\\n        return (b - a).divDown(b) <= imbalanceTreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV2 {\\n    function token() external view returns (address);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory amounts)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 token_amount, uint256 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV1 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[8] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[7] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function lp_token() external view returns (address);\\n\\n    function A_PRECISION() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.8/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract ITORUSToken\",\"name\":\"_torus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emergencyMinter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"RebalancingRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRebalancingRewardDollarMultiplier\",\"type\":\"uint256\"}],\"name\":\"SetMaxRebalancingRewardDollarMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRebalancingRewardDollarMultiplier\",\"type\":\"uint256\"}],\"name\":\"SetMinRebalancingRewardDollarMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"torusRebalancingRewardPerDollarPerSecond\",\"type\":\"uint256\"}],\"name\":\"SetTorusRebalancingRewardPerDollarPerSecond\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"torusPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deviationBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationAfter\",\"type\":\"uint256\"}],\"name\":\"computeRebalancingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITorusPool\",\"name\":\"torusPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deviationBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationAfter\",\"type\":\"uint256\"}],\"name\":\"handleRebalancingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRebalancingRewardDollarMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRebalancingRewardDollarMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"poolTORUSRebalancingRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinterRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRebalancingRewardDollarMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMaxRebalancingRewardDollarMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRebalancingRewardDollarMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMinRebalancingRewardDollarMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_torusRebalancingRewardPerDollarPerSecond\",\"type\":\"uint256\"}],\"name\":\"setTorusRebalancingRewardPerDollarPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torus\",\"outputs\":[{\"internalType\":\"contract ITORUSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torusRebalancingRewardPerDollarPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTorusMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TORUSMintingRebalancingRewardsHandler", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f88480d07880fe97c4c69fb22337b074207218430000000000000000000000006524792d685414b4588d2b6965d1bf1e9cf8933b000000000000000000000000c3ad55192455c27fd608df4e86ddd066a311f4c1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}