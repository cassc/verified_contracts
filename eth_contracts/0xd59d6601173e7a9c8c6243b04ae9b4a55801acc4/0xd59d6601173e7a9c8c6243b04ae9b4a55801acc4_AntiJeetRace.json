{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniSwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniSwapRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniSwapRouter02 is IUniSwapRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract AntiJeetRace is Context, Ownable, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromAntiWhale;\r\n\r\n    bool public antiWhaleEnabled = true;\r\n    bool public maxSellEnabled = true;\r\n    bool private inSwapAndLiquify;\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n\r\n    IUniSwapRouter02 public uniswapRouter; // uniswap router assiged using address\r\n    address public uniswapPair;\r\n\r\n    uint256 private _totalSupply = 1000000000 *10**18;\r\n    uint256 private _maxTokensPerAddress = 20000000 * 10**18; // Max number of tokens that an address can hold\r\n    uint256 private _maxSellAmount = 5000000 * 10**18; // Max number of tokens that an address can hold\r\n    uint256 private _buyTax = 20;\r\n    uint256 private _sellTax = 20;\r\n    uint256 private _taxThreshold = 2500000 * 10**18;\r\n\r\n    string private _name = \"Anti Jeet Race\";\r\n    string private _symbol = \"AJRACE\";\r\n\r\n    address private _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address private _marketingAddress = payable(0x8c6D6AB188291c7976f12161e91F43B77c571f9f);\r\n    address private _teamAddress = payable(0xC7F9E4D6D5C247ef9195A16Ecc40846ACE390f97);\r\n    address private _rewardAddress = 0x894Cc3424A67D4E798057eA36dbB95848E7B3917;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    } // modifier to after each successfull swapandliquify disable the swapandliquify\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor() {\r\n        address account = _msgSender();\r\n\r\n        IUniSwapRouter02 _uniswapRouter = IUniSwapRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapRouter = _uniswapRouter;\r\n         // Create a uniswap pair for this new token\r\n        uniswapPair = IUniSwapFactory(_uniswapRouter.factory())\r\n            .createPair(address(this), _uniswapRouter.WETH()); \r\n\r\n        _isExcludedFromFee[owner()]             = true;\r\n        _isExcludedFromFee[address(this)]       = true;\r\n        _isExcludedFromFee[_marketingAddress]   = true;\r\n\r\n        //Exclude's below addresses from per account tokens limit\r\n        _isExcludedFromAntiWhale[owner()]                   = true;\r\n        _isExcludedFromAntiWhale[address(this)]             = true;\r\n        _isExcludedFromAntiWhale[uniswapPair]               = true;\r\n        _isExcludedFromAntiWhale[_teamAddress]              = true;\r\n        _isExcludedFromAntiWhale[_rewardAddress]            = true;\r\n        _isExcludedFromAntiWhale[_marketingAddress]         = true;\r\n        _isExcludedFromAntiWhale[address(_uniswapRouter)]   = true;\r\n        \r\n        _balances[account] += 900000000 *10**18;\r\n        _balances[0xCE465ff9d88C3Eb1F458D680c3d265e4f4b930d0] += 10000000 *10**18;\r\n        _balances[0xAe4882DE619C882d7645FB9D8Be52dac38657aaf] += 10000000 *10**18;\r\n        _balances[0x34Cf7Ac942A815DDEDdF1319ce91dEa69Af46dCb] += 10000000 *10**18;\r\n        _balances[0xc9c8914C83357cd756a547541084232356c75856] += 10000000 *10**18;\r\n        _balances[0xFb2c1fb5e6a3E1E4300B31bf42028857817C102b] += 10000000 *10**18;\r\n        _balances[0x6efecbC6D76375e2A69c32Cd8ca4dFd866e7838c] += 10000000 *10**18;\r\n        _balances[0x53dDdbc27e1d909487e291120e779a4C43B8B557] += 10000000 *10**18;\r\n        _balances[0x69848B875C9Ad270BE85517f4c49E5bBE1632682] += 10000000 *10**18;\r\n        _balances[0xEb3BA847938ebe91c66f79A20062BA0f24f31920] += 10000000 *10**18;\r\n        _balances[0xe1b0A86C70a8E5b197B2aea46818C99C6cD5AA95] += 10000000 *10**18;\r\n        \r\n        \r\n        emit Transfer(address(0), account, 900000000 *10**18);\r\n        emit Transfer(address(0), 0xCE465ff9d88C3Eb1F458D680c3d265e4f4b930d0, 10000000 *10**18);\r\n        emit Transfer(address(0), 0xAe4882DE619C882d7645FB9D8Be52dac38657aaf, 10000000 *10**18);\r\n        emit Transfer(address(0), 0x34Cf7Ac942A815DDEDdF1319ce91dEa69Af46dCb, 10000000 *10**18);\r\n        emit Transfer(address(0), 0xc9c8914C83357cd756a547541084232356c75856, 10000000 *10**18);\r\n        emit Transfer(address(0), 0xFb2c1fb5e6a3E1E4300B31bf42028857817C102b, 10000000 *10**18);\r\n        emit Transfer(address(0), 0x6efecbC6D76375e2A69c32Cd8ca4dFd866e7838c, 10000000 *10**18);\r\n        emit Transfer(address(0), 0x53dDdbc27e1d909487e291120e779a4C43B8B557, 10000000 *10**18);\r\n        emit Transfer(address(0), 0x69848B875C9Ad270BE85517f4c49E5bBE1632682, 10000000 *10**18);\r\n        emit Transfer(address(0), 0xEb3BA847938ebe91c66f79A20062BA0f24f31920, 10000000 *10**18);\r\n        emit Transfer(address(0), 0xe1b0A86C70a8E5b197B2aea46818C99C6cD5AA95, 10000000 *10**18);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        uint256 tax = 0;\r\n        uint256 buyTax = _buyTax;\r\n        uint256 sellTax = _sellTax;\r\n        if(sender != owner() && recipient != owner()){\r\n            if(sender  == uniswapPair && !inSwapAndLiquify){\r\n                tax = amount/100*buyTax;\r\n                if(tax != 0){\r\n                    amount -= tax;\r\n                    _balances[address(this)] += tax;\r\n                    emit Transfer(sender, address(this), tax);\r\n                }\r\n            }\r\n            else if(recipient  == uniswapPair && !inSwapAndLiquify){\r\n                tax = amount/100*sellTax;\r\n                if(tax != 0){\r\n                    amount -= tax;\r\n                    _balances[address(this)] += tax/2;\r\n                    emit Transfer(sender, address(this), tax/2);\r\n                    _balances[_rewardAddress] += (tax/2);\r\n                    emit Transfer(sender, _rewardAddress, tax/2);\r\n                    uint256 threshold = _taxThreshold;\r\n                    if(_balances[address(this)] >= threshold){\r\n                        uint256 teamTax = sellTax/2;\r\n                        swapTokensForEth(_marketingAddress, (threshold/(buyTax+teamTax)*buyTax));\r\n                        swapTokensForEth(_teamAddress, (threshold/(buyTax+teamTax)*teamTax));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the burn address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(uint256 amount) external virtual {\r\n        address account = _msgSender();\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _balances[_burnAddress] += amount;\r\n        }\r\n\r\n        emit Transfer(account, _burnAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function distributeReward(address[] memory wallets, uint256[] memory amounts) public {\r\n        require(wallets.length == amounts.length, \"Not all Wallets have amount\");\r\n        \r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        for(uint256 i=0; i<wallets.length; i++){    \r\n            address recipient = wallets[i];\r\n            uint256 amount = amounts[i];\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n            uint256 senderBalance = _balances[sender];\r\n            require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            unchecked {\r\n                _balances[sender] = senderBalance - amount;\r\n            }\r\n            _balances[recipient] += amount;\r\n\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    /**  \r\n     * @dev exclude an address from per address tokens limit\r\n     */\r\n    function excludeFromAntiWhale(address account) public onlyOwner {\r\n        _isExcludedFromAntiWhale[account] = true;\r\n    }\r\n\r\n    /**  \r\n     * @dev include an address in per address tokens limit\r\n     */\r\n    function includeInAntiWhale(address account) public onlyOwner {\r\n        _isExcludedFromAntiWhale[account] = false;\r\n    }\r\n\r\n    /**  \r\n     * @dev return's true if an address is not included in antiwhale\r\n     */\r\n    function isExcludedFromAntiWhale(address account) public view returns(bool){\r\n        return _isExcludedFromAntiWhale[account];\r\n    }\r\n\r\n    /**  \r\n     * @dev set's Marketing address\r\n     */\r\n    function setMarketingAddress(address payable marketingAddress) external onlyOwner {\r\n        _marketingAddress = marketingAddress;\r\n    }\r\n\r\n    /**  \r\n     * @dev get's Marketing address\r\n     */\r\n    function getMarketingAddress() external view returns(address) {\r\n        return _marketingAddress;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's team address\r\n     */\r\n    function setTeamAddress(address payable teamAddress) external onlyOwner {\r\n        _teamAddress = teamAddress;\r\n    }\r\n\r\n    /**  \r\n     * @dev get's Team address\r\n     */\r\n    function getTeamAddress() external view returns(address) {\r\n        return _teamAddress;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's Reward address\r\n     */\r\n    function setRewardAddress(address rewardAddress) external onlyOwner {\r\n        _rewardAddress = rewardAddress;\r\n    }\r\n\r\n    /**  \r\n     * @dev get's Reward address\r\n     */\r\n    function getRewardAddress() external view returns(address) {\r\n        return _rewardAddress;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's max amount of tokens\r\n     * that an address can hold\r\n     */\r\n    function setMaxTokenPerAddress(uint256 maxTokens) external onlyOwner {\r\n        _maxTokensPerAddress = (maxTokens * 10**18);\r\n    }\r\n\r\n    /**  \r\n     * @dev get's max amount of tokens\r\n     * that an address can hold\r\n     */\r\n    function getMaxTokenPerAddress() external view returns(uint256) {\r\n        return _maxTokensPerAddress;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's max amount of tokens\r\n     * that an address can sell\r\n     */\r\n    function setMaxSellAmount(uint256 maxTokens) external onlyOwner {\r\n        _maxSellAmount = (maxTokens * 10**18);\r\n    }\r\n\r\n    /**  \r\n     * @dev get's max amount of tokens\r\n     * that an address can sell\r\n     */\r\n    function getMaxSellAmount() external view returns(uint256) {\r\n        return _maxSellAmount;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's max amount of tax tokens\r\n     * that should be collected before sell\r\n     */\r\n    function setTaxThreshold(uint256 maxTokens) external onlyOwner {\r\n        _taxThreshold = (maxTokens * 10**18);\r\n    }\r\n\r\n    /**  \r\n     * @dev get's max amount of tax tokens\r\n     * that should be collected before sell\r\n     */\r\n    function getTaxThreshold() external view returns(uint256) {\r\n        return _taxThreshold;\r\n    }\r\n\r\n    /**  \r\n     * @dev exclude an address from fee\r\n     */\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    /**  \r\n     * @dev include an address for fee\r\n     */\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's Sell Tax\r\n     */\r\n    function setSellTax(uint256 sellTax) external onlyOwner {\r\n        _sellTax = sellTax;\r\n    }\r\n\r\n    /**  \r\n     * @dev get's Sell Tax\r\n     */\r\n    function getSellTax() external view returns(uint256) {\r\n        return _sellTax;\r\n    }\r\n\r\n    /**  \r\n     * @dev set's Buy Tax\r\n     */\r\n    function setBuyTax(uint256 buyTax) external onlyOwner {\r\n        _buyTax = buyTax;\r\n    }\r\n\r\n    /**  \r\n     * @dev get's Buy Tax\r\n     */\r\n    function getBuyTax() external view returns(uint256) {\r\n        return _buyTax;\r\n    }\r\n\r\n    /**  \r\n     * @dev enable/disable antiwhale\r\n     */\r\n    function flipAntiWhale() external onlyOwner {\r\n        antiWhaleEnabled = !antiWhaleEnabled;\r\n    }\r\n\r\n    /**  \r\n     * @dev enable/disable max Sell Limit\r\n     */\r\n    function flipMaxSell() external onlyOwner {\r\n        maxSellEnabled = !maxSellEnabled;\r\n    }\r\n\r\n    /**  \r\n     * @dev swap's exact amount of tokens for ETH if swapandliquify is enabled\r\n     */\r\n    function swapTokensForEth(address recipient, uint256 tokenAmount) private lockTheSwap{\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if(from != owner() && to != owner()){\r\n            if(antiWhaleEnabled) {\r\n                require(_isExcludedFromAntiWhale[to] || balanceOf(to) + amount <= _maxTokensPerAddress,\r\n                    \"Max tokens limit for this account exceeded. Or try lower amount\");\r\n            }\r\n            if(maxSellEnabled && to == uniswapPair) {\r\n                require(amount <= _maxSellAmount,\r\n                    \"Amount Exceeds Allowed Sell Amount\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokenPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromAntiWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"setRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens\",\"type\":\"uint256\"}],\"name\":\"setTaxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniSwapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AntiJeetRace", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://25187ef28142068fdd36b616da3522915f8a649d60b738a75d7839e32c97cf1a"}