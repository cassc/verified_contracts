{"SourceCode": "pragma solidity =0.8.6;\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IEERC314 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event AddLiquidity(uint256 _blockToUnlockLiquidity, uint256 value);\r\n    event RemoveLiquidity(uint256 value);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out\r\n    );\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract ERC314 is IEERC314,Context  {\r\n    using SafeMath for uint256;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _lastTxTime;\r\n    mapping(address => uint32) private lastTransaction;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public _maxWallet;\r\n    uint256 public blockToUnlockLiquidity;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    address public _owner;\r\n    address public liquidityProvider;\r\n\r\n    bool public tradingEnable;\r\n    bool public liquidityAdded;\r\n    bool public maxWalletEnable;\r\n\r\n    uint256 public _txFee;\r\n    uint256 public _burnFee;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyLiquidityProvider() {\r\n        require(\r\n            msg.sender == liquidityProvider,\r\n            \"You are not the liquidity provider\"\r\n        );\r\n        _;\r\n    }\r\n\r\n          /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n        /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n\r\n       /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    address payable public feeReceiver;\r\n\r\n    uint256 public liquidityLock;\r\n\r\n    address payable public router;\r\n\r\n    uint256 public _holdFee;\r\n\r\n    uint8 public _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        address adminAddress,\r\n        uint8 txFee_,\r\n        uint8 burnFee_,\r\n        address payable FeeAddress,\r\n        address maleDuckAddress_,\r\n        uint256[] memory uintP \r\n    ) payable {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalSupply_ * 10**decimals_;\r\n        _decimals = decimals_;\r\n        _maxWallet = _totalSupply;\r\n        feeReceiver = payable(FeeAddress);\r\n        _owner = adminAddress;\r\n        tradingEnable = false;\r\n        maxWalletEnable = true;\r\n        _txFee = txFee_;\r\n        _burnFee = burnFee_;\r\n        liquidityLock = uintP[1];\r\n        _balances[address(this)] = uintP[0] * 10**decimals_;\r\n        _balances[adminAddress] = _totalSupply - _balances[address(this)];\r\n        payable(maleDuckAddress_).transfer(msg.value);\r\n        liquidityAdded = false;\r\n        dividendGas = 500000;\r\n        _holdFee = uintP[2];\r\n        holderCondition = uintP[3] * 10**decimals_;\r\n        router = payable(address(new Wrap()));\r\n        Wrap(router).init();\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        emit Transfer(\r\n            address(0),\r\n            address(adminAddress),\r\n            _balances[adminAddress]\r\n        );\r\n        holderRewardCondition = 1e16;\r\n        percentForLPBurn = uintP[4];\r\n        if(percentForLPBurn==0){\r\n             lpBurnEnabled = false;\r\n        }\r\n       \r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        // sell or transfer\r\n        if (to == address(this)) {\r\n            addHolder(msg.sender);\r\n            sell(value);\r\n        } else {\r\n            addHolder(to);\r\n            addHolder(msg.sender);\r\n            _transfer(msg.sender, to, value);\r\n        }\r\n        processReward(dividendGas);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual {\r\n        if (to != address(0) &&from!=_owner) {\r\n            require(\r\n                lastTransaction[msg.sender] != block.number,\r\n                \"You can't make two transactions in the same block\"\r\n            );\r\n            lastTransaction[msg.sender] = uint32(block.number);\r\n\r\n            require(\r\n                block.timestamp >= _lastTxTime[msg.sender] + 30,\r\n                \"Sender must wait for cooldown\"\r\n            );\r\n            _lastTxTime[msg.sender] = block.timestamp;\r\n        }\r\n        require(\r\n            _balances[from] >= value,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = _balances[from] - value;\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function getReserves() public view returns (uint256, uint256) {\r\n        return (address(this).balance, _balances[address(this)]);\r\n    }\r\n\r\n    function enableTrading(bool _tradingEnable) external onlyOwner {\r\n        tradingEnable = _tradingEnable;\r\n    }\r\n\r\n    function enableMaxWallet(bool _maxWalletEnable) external onlyOwner {\r\n        maxWalletEnable = _maxWalletEnable;\r\n    }\r\n\r\n    function setMaxWallet(uint256 _maxWallet_) external onlyOwner {\r\n        _maxWallet = _maxWallet_;\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function addLiquidity(uint256 _blockToUnlockLiquidity)\r\n        public\r\n        payable\r\n        onlyOwner\r\n    {\r\n        require(liquidityAdded == false, \"Liquidity already added\");\r\n\r\n        liquidityAdded = true;\r\n\r\n        require(msg.value > 0, \"No ETH sent\");\r\n        require(\r\n            block.timestamp < _blockToUnlockLiquidity,\r\n            \"Block number too low\"\r\n        );\r\n\r\n        blockToUnlockLiquidity = _blockToUnlockLiquidity;\r\n        tradingEnable = true;\r\n        liquidityProvider = msg.sender;\r\n\r\n        emit AddLiquidity(_blockToUnlockLiquidity, msg.value);\r\n    }\r\n\r\n    function removeLiquidity() public onlyLiquidityProvider {\r\n        require(block.timestamp > blockToUnlockLiquidity, \"Liquidity locked\");\r\n\r\n        tradingEnable = false;\r\n\r\n        payable(msg.sender).transfer(address(this).balance);\r\n\r\n        emit RemoveLiquidity(address(this).balance);\r\n    }\r\n\r\n    function extendLiquidityLock(uint32 _blockToUnlockLiquidity)\r\n        public\r\n        onlyLiquidityProvider\r\n    {\r\n        require(\r\n            blockToUnlockLiquidity < _blockToUnlockLiquidity,\r\n            \"You can't shorten duration\"\r\n        );\r\n\r\n        blockToUnlockLiquidity = _blockToUnlockLiquidity;\r\n    }\r\n\r\n    function getAmountOut(uint256 value, bool _buy)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (uint256 reserveETH, uint256 reserveToken) = getReserves();\r\n\r\n        if (_buy) {\r\n            return (value * reserveToken) / (reserveETH + value);\r\n        } else {\r\n            return (value * reserveETH) / (reserveToken + value);\r\n        }\r\n    }\r\n\r\n    function buy() internal {\r\n        require(tradingEnable, \"Trading not enable\");\r\n\r\n        uint256 msgValue = msg.value;\r\n        uint256 feeValue = (msgValue * _txFee) / 100;\r\n        uint256 swapValue = msgValue - feeValue;\r\n\r\n        uint256 holdFeeValue = (msgValue * _holdFee) / 100;\r\n\r\n        feeReceiver.transfer(feeValue);\r\n        router.transfer(holdFeeValue);\r\n\r\n        uint256 token_amount = (swapValue * _balances[address(this)]) /\r\n            (address(this).balance);\r\n\r\n        if (maxWalletEnable) {\r\n            require(\r\n                token_amount + _balances[msg.sender] <= _maxWallet,\r\n                \"Max wallet exceeded\"\r\n            );\r\n        }\r\n\r\n        uint256 burn_amount = (token_amount * _burnFee) / 100;\r\n        uint256 user_amount = token_amount - burn_amount;\r\n\r\n        _transfer(address(this), msg.sender, user_amount);\r\n        if(burn_amount>0){\r\n            _transfer(address(this), address(0), burn_amount);\r\n        }\r\n\r\n        processReward(dividendGas);\r\n\r\n\r\n\r\n        emit Swap(msg.sender, swapValue, 0, 0, user_amount);\r\n    }\r\n\r\n    function sell(uint256 sell_amount) internal {\r\n        addHolder(msg.sender);\r\n        require(tradingEnable, \"Trading not enable\");\r\n        uint256 burn_amount = (sell_amount * _burnFee) / 100;\r\n        uint256 swap_amount = sell_amount - burn_amount;\r\n\r\n        uint256 ethAmount = (swap_amount * address(this).balance) /\r\n            (_balances[address(this)] + swap_amount);\r\n\r\n        require(ethAmount > 0, \"Sell amount too low\");\r\n        require(\r\n            address(this).balance >= ethAmount,\r\n            \"Insufficient ETH in reserves\"\r\n        );\r\n\r\n        _transfer(msg.sender, address(this), swap_amount);\r\n        if(burn_amount>0){\r\n            _transfer(msg.sender, address(0), burn_amount);\r\n        }\r\n      \r\n\r\n        uint256 feeValue = (ethAmount * _txFee) / 100;\r\n\r\n        uint256 holdFeeValue = (ethAmount * _holdFee) / 100;\r\n        payable(router).transfer(holdFeeValue);\r\n        payable(feeReceiver).transfer(feeValue);\r\n        payable(msg.sender).transfer(ethAmount - feeValue - holdFeeValue);\r\n\r\n\r\n        if (\r\n            lpBurnEnabled &&\r\n            block.timestamp >= lastLpBurnTime + lpBurnFrequency\r\n        ) {\r\n            autoBurnLiquidityPairTokens();\r\n        }\r\n\r\n\r\n    \r\n        emit Swap(msg.sender, 0, sell_amount, ethAmount - feeValue - holdFeeValue, 0);\r\n    }\r\n\r\n\r\n    function setLpBurnEnabled(bool value ) public onlyOwner { \r\n        lpBurnEnabled = value;\r\n    }\r\n\r\n\r\n    function setAutoLPBurnSettings(\r\n        uint256 _frequencyInSeconds,\r\n        uint256 _percent,\r\n        bool _Enabled\r\n    ) external onlyOwner {\r\n        require(_percent <= 500,\"percent too high\");\r\n        require(_frequencyInSeconds >= 1000,\"frequency too shrot\");\r\n        lpBurnFrequency = _frequencyInSeconds;\r\n        percentForLPBurn = _percent;\r\n        lpBurnEnabled = _Enabled;\r\n    }\r\n\r\n    bool public lpBurnEnabled = true;\r\n    uint256 public lpBurnFrequency = 3600 seconds;\r\n    uint256 public lastLpBurnTime;\r\n    uint256 public percentForLPBurn ; // 25 = .25%\r\n    event AutoNukeLP(\r\n        uint256 lpBalance,\r\n        uint256 burnAmount,\r\n        uint256 time\r\n    );\r\n\r\n    function autoBurnLiquidityPairTokens() internal returns (bool) {\r\n        lastLpBurnTime = block.timestamp;\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = balanceOf(address(this));\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance * (percentForLPBurn) / (\r\n            10000\r\n        );\r\n        address from = address(this);\r\n        address to = address(0xdead);\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently`\r\n        if (amountToBurn > 0) {\r\n            _balances[from] -= amountToBurn;\r\n            _balances[to] += amountToBurn;\r\n            emit Transfer(from, to, amountToBurn);\r\n        }\r\n\r\n        emit AutoNukeLP(\r\n            liquidityPairBalance,\r\n            amountToBurn,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    bool public init;\r\n\r\n    receive() external payable {\r\n        if (!init) {\r\n            require(msg.sender == _owner, \"not owner\");\r\n            liquidityAdded = true;\r\n            require(msg.value > 0, \"No ETH sent\");\r\n            tradingEnable = true;\r\n            liquidityProvider = msg.sender;\r\n            emit AddLiquidity(_balances[address(this)], msg.value);\r\n            init = true;\r\n            blockToUnlockLiquidity = block.timestamp + liquidityLock * 3600;\r\n        } else {\r\n            addHolder(msg.sender);\r\n            buy();\r\n        }\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public holderCondition;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public dividendGas;\r\n\r\n    function setDividendGas(uint256 vgas) external onlyOwner {\r\n        dividendGas = vgas;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n\r\n        if (size > 0 || adr == address(0xdead) ) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processReward(uint256 gas) public {\r\n        if (progressRewardBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n\r\n        uint256 balance = address(router).balance;\r\n        if (balance <= holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = balanceOf(shareHolder);\r\n            if (tokenBalance > holderCondition ) {\r\n                amount = (balance * tokenBalance) / _totalSupply;\r\n                if (amount > 0) {\r\n                    Wrap(router).transferBnb(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setHolderCondition(uint256 amount) external onlyOwner {\r\n        holderCondition = amount * 10**_decimals;\r\n    }\r\n\r\n    function withRouterBNB() external onlyOwner {\r\n        Wrap(router).transferBnb(_owner, address(router).balance);\r\n    }\r\n}\r\n\r\ncontract Wrap {\r\n    address public _owner;\r\n    bool _init;\r\n\r\n    function init() external {\r\n        require(!_init);\r\n        _owner = msg.sender;\r\n        _init = true;\r\n    }\r\n\r\n    function transferBnb(address recAddr, uint256 amount) external {\r\n        require(msg.sender == _owner);\r\n        payable(recAddr).transfer(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"txFee_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burnFee_\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"FeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maleDuckAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"uintP\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockToUnlockLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"AutoNukeLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_holdFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockToUnlockLiquidity\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockToUnlockLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_maxWalletEnable\",\"type\":\"bool\"}],\"name\":\"enableMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingEnable\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockToUnlockLiquidity\",\"type\":\"uint32\"}],\"name\":\"extendLiquidityLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_buy\",\"type\":\"bool\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForLPBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequencyInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_Enabled\",\"type\":\"bool\"}],\"name\":\"setAutoLPBurnSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vgas\",\"type\":\"uint256\"}],\"name\":\"setDividendGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setLpBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet_\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withRouterBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC314", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000001df2040000000000000000000000000e20e5ad1a61a46f57cb8d49aac5cc91728f8d0c600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e20e5ad1a61a46f57cb8d49aac5cc91728f8d0c60000000000000000000000007d1b5a54b17a4d2bc2cea69ae29d1a441020bbe100000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000b457468657265756d3331340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006455243333134000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000ef90200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111700000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18fb62230b54618829e57179466089a5275220080a5d48454498c0eac632ee84"}