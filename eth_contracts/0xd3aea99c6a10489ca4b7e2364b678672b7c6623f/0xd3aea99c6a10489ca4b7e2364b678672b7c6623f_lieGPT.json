{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n//TELEGRAM: https://t.me/LieGPT\r\n\r\n\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _createInitialSupply(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract lieGPT is ERC20, Ownable {\r\n\r\nmapping (address => bool) private _isExcludedFromFeesOrIsIt;\r\nmapping (address => bool) public _isExcludedMaxTransactionAmountOrIsIt;\r\nmapping (address => bool) public automatedMarketMakerPairsOrIsIt;\r\n\r\nIUniswapV2Router02 public immutable uniswapV2Router;\r\naddress public immutable uniswapV2Pair;\r\naddress public marketingAddressOrIsIt;\r\naddress public deployerOrIsIt;\r\n\r\nbool public tradingActiveOrIsIt;\r\nbool public swapEnabledOrIsIt;\r\nbool private swappingOrIsIt;\r\n\r\n\r\nuint256 public swapTokensAtAmountOrIsIt;\r\n\r\nuint256 public maxWalletOrIsIt;\r\nuint256 private buyTotalFeesOrIsIt;\r\nuint256 public buyMarketingFeeOrIsIt;\r\nuint256 public buyLiquidityFeeOrIsIt;\r\nuint256 public buyBurnFeeOrIsIt;\r\n\r\nuint256 private sellTotalFeesOrIsIt;\r\nuint256 public sellMarketingFeeOrIsIt;\r\nuint256 public sellLiquidityFeeOrIsIt;\r\nuint256 public sellBurnFeeOrIsIt;\r\n\r\nuint256 public tokensForMarketingOrIsIt;\r\nuint256 public tokensForLiquidityOrIsIt;\r\nuint256 public tokensForBurnOrIsIt;\r\n\r\n\r\nevent SetAutomatedMarketMakerPairOrIsIt(address indexed pair, bool indexed value);\r\n\r\nevent EnabledTradingOrIsIt();\r\n\r\nevent ExcludeFromFeesOrIsIt(address indexed account, bool isExcluded);\r\n\r\nevent UpdatedmaxWalletOrIsIt(uint256 newAmount);\r\n\r\nevent MaxTransactionExclusionOrIsIt(address _address, bool excluded);\r\n\r\nevent SwapAndLiquifyOrIsIt(\r\n    uint256 tokensSwapped,\r\n    uint256 ethReceived,\r\n    uint256 tokensIntoLiquidity\r\n);\r\n\r\nconstructor() ERC20(\"lieGPT\", \"lieGPT\") {\r\n    \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n\r\n    uint256 totalSupply = 666666 * 1e18;\r\n    \r\n    maxWalletOrIsIt = totalSupply * 2 / 100;\r\n    swapTokensAtAmountOrIsIt = totalSupply * 100 / 100000;\r\n\r\n    buyMarketingFeeOrIsIt = 2;\r\n    buyLiquidityFeeOrIsIt = 0;\r\n    buyBurnFeeOrIsIt = 0;\r\n    buyTotalFeesOrIsIt = buyMarketingFeeOrIsIt + buyLiquidityFeeOrIsIt;\r\n\r\n    sellMarketingFeeOrIsIt = 2;\r\n    sellLiquidityFeeOrIsIt = 0;\r\n    sellBurnFeeOrIsIt = 0;\r\n    sellTotalFeesOrIsIt = sellMarketingFeeOrIsIt + sellLiquidityFeeOrIsIt;\r\n\r\n    _excludeFromMaxTransactionOrIsIt(marketingAddressOrIsIt, true);\r\n    _excludeFromMaxTransactionOrIsIt(deployerOrIsIt, true);\r\n    _excludeFromMaxTransactionOrIsIt(address(this), true);\r\n    _excludeFromMaxTransactionOrIsIt(address(0xdead), true);\r\n\r\n    excludeFromFeesOrIsIt(marketingAddressOrIsIt, true);\r\n    excludeFromFeesOrIsIt(deployerOrIsIt, true);\r\n    excludeFromFeesOrIsIt(address(this), true);\r\n    excludeFromFeesOrIsIt(address(0xdead), true);\r\n\r\n    marketingAddressOrIsIt = 0x238b4C1737A6B69F0C6eA46Bf2e2996FDbFbeaa9;\r\n    deployerOrIsIt = 0x38f65D4D468304cdb7Aee8CB44E8C132b9c41884;\r\n\r\n\r\n   _createInitialSupply(msg.sender, totalSupply);\r\n\r\n}\r\n\r\nreceive() external payable {}\r\n\r\n// once enabled, can never be turned off\r\nfunction enableTradingOrIsIt() external onlyOwner {\r\n    require(!tradingActiveOrIsIt, \"Cannot reenable trading\");\r\n    tradingActiveOrIsIt = true;\r\n    swapEnabledOrIsIt = true;\r\n    emit EnabledTradingOrIsIt();\r\n}\r\n\r\nfunction _excludeFromMaxTransactionOrIsIt(address updAds, bool isExcluded) private {\r\n    _isExcludedMaxTransactionAmountOrIsIt[updAds] = isExcluded;\r\n    emit MaxTransactionExclusionOrIsIt(updAds, isExcluded);\r\n}\r\n\r\nfunction excludeFromMaxTransactionOrIsIt(address updAds, bool isEx) external onlyOwner {\r\n    if(!isEx){\r\n        require(updAds != uniswapV2Pair, \"Cannot remove uniswap pair from max txn\");\r\n    }\r\n    _isExcludedMaxTransactionAmountOrIsIt[updAds] = isEx;\r\n}\r\n\r\nfunction setAutomatedMarketMakerPairOrIsIt(address pair, bool value) external onlyOwner {\r\n    require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n    _setAutomatedMarketMakerPairOrIsIt(pair, value);\r\n}\r\n\r\nfunction _setAutomatedMarketMakerPairOrIsIt(address pair, bool value) private {\r\n    automatedMarketMakerPairsOrIsIt[pair] = value;\r\n    \r\n    _excludeFromMaxTransactionOrIsIt(pair, value);\r\n\r\n    emit SetAutomatedMarketMakerPairOrIsIt(pair, value);\r\n}\r\n\r\nfunction updateBuyFeesOrIsIt(uint256 _marketingFee, uint256 _liquidityFee, uint256 _burnFee) external onlyOwner {\r\n    buyMarketingFeeOrIsIt = _marketingFee;\r\n    buyLiquidityFeeOrIsIt = _liquidityFee;\r\n    buyBurnFeeOrIsIt = _burnFee;\r\n    buyTotalFeesOrIsIt = buyMarketingFeeOrIsIt + buyLiquidityFeeOrIsIt;\r\n}\r\n\r\nfunction updateSellFeesOrIsIt(uint256 _marketingFee, uint256 _liquidityFee, uint256 _burnFee) external onlyOwner {\r\n    sellMarketingFeeOrIsIt = _marketingFee;\r\n    sellLiquidityFeeOrIsIt = _liquidityFee;\r\n    sellBurnFeeOrIsIt = _burnFee;\r\n    sellTotalFeesOrIsIt = sellMarketingFeeOrIsIt + sellLiquidityFeeOrIsIt;\r\n    require(sellTotalFeesOrIsIt < 35);\r\n}\r\n\r\nfunction excludeFromFeesOrIsIt(address account, bool excluded) public onlyOwner {\r\n    _isExcludedFromFeesOrIsIt[account] = excluded;\r\n    emit ExcludeFromFeesOrIsIt(account, excluded);\r\n}\r\n\r\nfunction _transfer(address from, address to, uint256 amount) internal override {\r\n\r\n    require(from != address(0), \"ERC20: transfer from the zero address\");\r\n    require(to != address(0), \"ERC20: transfer to the zero address\");\r\n    require(amount > 0, \"amount must be greater than 0\");\r\n               \r\n\r\n        if (from != owner() && to != owner() && to != address(0) && to != address(0xdead)){\r\n            if(!tradingActiveOrIsIt){\r\n                require(_isExcludedFromFeesOrIsIt[from] || _isExcludedFromFeesOrIsIt[to], \"Trading is not active.\");\r\n            }\r\n            if (!_isExcludedMaxTransactionAmountOrIsIt[from] || !_isExcludedMaxTransactionAmountOrIsIt[to]) {\r\n                 require(balanceOf(to) + amount <= maxWalletOrIsIt);\r\n            }\r\n                        \r\n            //when buy\r\n            if (automatedMarketMakerPairsOrIsIt[from] && !_isExcludedMaxTransactionAmountOrIsIt[to]) {\r\n\r\n            } \r\n            //when sell\r\n            else if (automatedMarketMakerPairsOrIsIt[to] && !_isExcludedMaxTransactionAmountOrIsIt[from]) {\r\n\r\n            } \r\n            else if (!_isExcludedMaxTransactionAmountOrIsIt[to] && !_isExcludedMaxTransactionAmountOrIsIt[from]){\r\n            \r\n            }\r\n        }\r\n    \r\n\r\n    uint256 contractTokenBalance = balanceOf(address(this));\r\n    \r\n    bool canSwap = contractTokenBalance >= swapTokensAtAmountOrIsIt;\r\n\r\n    if(canSwap && swapEnabledOrIsIt && !swappingOrIsIt && !automatedMarketMakerPairsOrIsIt[from] && !_isExcludedFromFeesOrIsIt[from] && !_isExcludedFromFeesOrIsIt[to]) {\r\n        swappingOrIsIt = true;\r\n\r\n        swapBackOrIsIt();\r\n\r\n        swappingOrIsIt = false;\r\n    }\r\n\r\n    bool takeFee = true;\r\n    // if any account belongs to _isExcludedFromFee account then remove the fee\r\n    if(_isExcludedFromFeesOrIsIt[from] || _isExcludedFromFeesOrIsIt[to]) {\r\n        takeFee = false;\r\n    }\r\n    \r\n    uint256 fees = 0;\r\n    // only take fees on buys/sells, do not take on wallet transfers\r\n    if(takeFee){\r\n        \r\n        // on sell\r\n         if (automatedMarketMakerPairsOrIsIt[to] && sellTotalFeesOrIsIt > 0){\r\n            fees = amount * sellTotalFeesOrIsIt /100;\r\n            tokensForLiquidityOrIsIt += fees * sellLiquidityFeeOrIsIt / sellTotalFeesOrIsIt;\r\n            tokensForMarketingOrIsIt += fees * sellMarketingFeeOrIsIt / sellTotalFeesOrIsIt;\r\n            tokensForBurnOrIsIt += amount * sellBurnFeeOrIsIt / 100;\r\n\r\n        }\r\n        // on buy\r\n        else if(automatedMarketMakerPairsOrIsIt[from] && buyTotalFeesOrIsIt > 0) {\r\n            fees = amount * buyTotalFeesOrIsIt / 100;\r\n            tokensForLiquidityOrIsIt += fees * buyLiquidityFeeOrIsIt / buyTotalFeesOrIsIt;\r\n            tokensForMarketingOrIsIt += fees * buyMarketingFeeOrIsIt / buyTotalFeesOrIsIt;\r\n            tokensForBurnOrIsIt += amount * sellBurnFeeOrIsIt / 100;\r\n        }\r\n        \r\n        if(fees > 0){    \r\n             super._transfer(from, address(this), fees);\r\n        }\r\n            super._transfer(from, address(0xdead), tokensForBurnOrIsIt);\r\n\r\n\r\n        amount -= (fees + tokensForBurnOrIsIt);\r\n        tokensForBurnOrIsIt = 0;\r\n    }\r\n        \r\n    super._transfer(from, to, amount);\r\n}\r\n\r\nfunction swapTokensForEthOrIsIt(uint256 tokenAmount) private {\r\n\r\n    // generate the uniswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = uniswapV2Router.WETH();\r\n\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // make the swap\r\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        0, // accept any amount of ETH\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n}\r\n\r\nfunction addLiquidityOrIsIt(uint256 tokenAmount, uint256 ethAmount) private {\r\n    // approve token transfer to cover all possible scenarios\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // add the liquidity\r\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n        address(this),\r\n        tokenAmount,\r\n        0, // slippage is unavoidable\r\n        0, // slippage is unavoidable\r\n        address(owner()),\r\n        block.timestamp\r\n    );\r\n}\r\n\r\nfunction swapBackOrIsIt() private {\r\n    uint256 contractBalance = balanceOf(address(this));\r\n    uint256 totalTokensToSwap = tokensForLiquidityOrIsIt + tokensForMarketingOrIsIt;\r\n    \r\n    if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n    if(contractBalance > swapTokensAtAmountOrIsIt * 10){\r\n        contractBalance = swapTokensAtAmountOrIsIt * 10;\r\n    }\r\n\r\n    bool success;\r\n    \r\n    // Halve the amount of liquidity tokens\r\n    uint256 liquidityTokens = contractBalance * tokensForLiquidityOrIsIt / totalTokensToSwap / 2;\r\n    \r\n    swapTokensForEthOrIsIt(contractBalance - liquidityTokens); \r\n    \r\n    uint256 ethBalance = address(this).balance;\r\n    uint256 ethForLiquidity = ethBalance;\r\n\r\n    uint256 ethForMarketing = ethBalance * tokensForMarketingOrIsIt / (totalTokensToSwap - (tokensForLiquidityOrIsIt/2));\r\n\r\n    ethForLiquidity -= ethForMarketing;\r\n        \r\n    tokensForLiquidityOrIsIt = 0;\r\n    tokensForMarketingOrIsIt = 0;\r\n\r\n    \r\n    if(liquidityTokens > 0 && ethForLiquidity > 0){\r\n        addLiquidityOrIsIt(liquidityTokens, ethForLiquidity);\r\n    }\r\n\r\n    (success,) = address(marketingAddressOrIsIt).call{value: address(this).balance}(\"\");\r\n}\r\n\r\n// withdraw ETH if stuck or someone sends to the address\r\nfunction withdrawStuckETHOrIsIt() external onlyOwner {\r\n    bool success;\r\n    (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTradingOrIsIt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesOrIsIt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusionOrIsIt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPairOrIsIt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyOrIsIt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedmaxWalletOrIsIt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmountOrIsIt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairsOrIsIt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFeeOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFeeOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFeeOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerOrIsIt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingOrIsIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFeesOrIsIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionOrIsIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddressOrIsIt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFeeOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFeeOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFeeOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPairOrIsIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabledOrIsIt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmountOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForBurnOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidityOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketingOrIsIt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveOrIsIt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFeesOrIsIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFeesOrIsIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETHOrIsIt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "lieGPT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://489f15c654fe18a9311c1cd82182be18e0b8007c112c02418ae1afd8f428d063"}