{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"SeasolverHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20 {\\n    function balanceOf(address) external returns (uint256);\\n}\\n\\ninterface IAggregationExecutorV5 {\\n    /// @notice propagates information about original msg.sender and executes arbitrary data\\n    function execute(address msgSender) external payable; // 0x4b64e492\\n}\\n\\ninterface IAggregationExecutorV4 {\\n    /// @notice Make calls on `msgSender` with specified data\\n    function callBytes(address msgSender, bytes calldata data) external payable; // 0x2636f7f8\\n}\\n\\ninterface IAggregationRouterV4 {\\n    function swap(\\n        IAggregationExecutorV4 caller,\\n        SwapDescriptionV4 memory desc,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n        returns (uint256 returnAmount, uint256 spentAmount, uint256 gasLeft);\\n}\\n\\ninterface IAggregationRouterV5 {\\n    function swap(\\n        IAggregationExecutorV5 caller,\\n        SwapDescriptionV5 memory desc,\\n        bytes calldata permit,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\\n}\\n\\ninterface BVault {\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external returns (uint256 amountCalculated);\\n}\\n\\nstruct SwapDescriptionV4 {\\n    address srcToken;\\n    address dstToken;\\n    address payable srcReceiver;\\n    address payable dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n    bytes permit;\\n}\\n\\nstruct SwapDescriptionV5 {\\n    address srcToken;\\n    address dstToken;\\n    address payable srcReceiver;\\n    address payable dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n}\\n\\n// This is SwapDescription minus the amount. The version of weiroll\\n// used does not support dynamic types withing tuples, so in this case\\n// the amount will be passed as a single variable to avoid being part\\n// of the dynamic tuple\\nstruct TruncatedSwapDescriptionV4 {\\n    address srcToken;\\n    address dstToken;\\n    address payable srcReceiver;\\n    address payable dstReceiver;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n    bytes permit;\\n}\\n\\nstruct TruncatedSwapDescriptionV5 {\\n    address srcToken;\\n    address dstToken;\\n    address payable srcReceiver;\\n    address payable dstReceiver;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n}\\n\\nenum SwapKind {\\n    GIVEN_IN,\\n    GIVEN_OUT\\n}\\n\\nenum JoinKind {\\n    INIT,\\n    EXACT_TOKENS_IN_FOR_BPT_OUT,\\n    TOKEN_IN_FOR_EXACT_BPT_OUT,\\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n}\\nenum ExitKind {\\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n    EXACT_BPT_IN_FOR_TOKENS_OUT,\\n    BPT_IN_FOR_EXACT_TOKENS_OUT\\n}\\n\\nstruct SimplifiedSingleSwap {\\n    SwapKind kind;\\n    address assetIn;\\n    address assetOut;\\n}\\n\\nstruct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    address assetIn;\\n    address assetOut;\\n    uint256 amount;\\n    bytes userData;\\n}\\n\\nstruct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n}\\n\\nstruct JoinPoolRequest {\\n    address[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n}\\n\\nstruct ExitPoolRequest {\\n    address[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n}\\n\\ncontract SeasolverHelper {\\n    function flattened1InchSwapV4(\\n        IAggregationRouterV4 router,\\n        IAggregationExecutorV4 caller,\\n        TruncatedSwapDescriptionV4 calldata truncatedDesc,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount) {\\n        SwapDescriptionV4 memory desc = SwapDescriptionV4(\\n            truncatedDesc.srcToken,\\n            truncatedDesc.dstToken,\\n            truncatedDesc.srcReceiver,\\n            truncatedDesc.dstReceiver,\\n            amount,\\n            truncatedDesc.minReturnAmount,\\n            truncatedDesc.flags,\\n            truncatedDesc.permit\\n        );\\n\\n        (returnAmount, , ) = router.swap(caller, desc, data);\\n        return returnAmount;\\n    }\\n\\n    function flattened1InchSwapV5(\\n        IAggregationRouterV5 router,\\n        IAggregationExecutorV5 executor,\\n        TruncatedSwapDescriptionV5 calldata truncatedDesc,\\n        uint256 amount,\\n        bytes calldata permit,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount) {\\n        SwapDescriptionV5 memory desc = SwapDescriptionV5(\\n            truncatedDesc.srcToken,\\n            truncatedDesc.dstToken,\\n            truncatedDesc.srcReceiver,\\n            truncatedDesc.dstReceiver,\\n            amount,\\n            truncatedDesc.minReturnAmount,\\n            truncatedDesc.flags\\n        );\\n\\n        (returnAmount, ) = router.swap(executor, desc, permit, data);\\n        return returnAmount;\\n    }\\n\\n    function flattenedBalancerSwap(\\n        BVault bvault,\\n        bytes32 poolId,\\n        SimplifiedSingleSwap memory ssw,\\n        uint256 amountGiven,\\n        address payable tradeHandler,\\n        uint256 limit\\n    ) external returns (uint256) {\\n        SingleSwap memory singleSwap = SingleSwap(\\n            poolId,\\n            ssw.kind,\\n            ssw.assetIn,\\n            ssw.assetOut,\\n            amountGiven,\\n            abi.encode(0)\\n        );\\n        return\\n            bvault.swap(\\n                singleSwap,\\n                FundManagement(tradeHandler, false, tradeHandler, false),\\n                limit,\\n                2 ** 256 - 1\\n            );\\n    }\\n\\n    // === REFERENCE ===\\n    // https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/balancer-js/src/pool-weighted/encoder.ts\\n\\n    function flattenedBalancerJoinPool(\\n        BVault bvault,\\n        bool isSelling,\\n        IERC20 outToken,\\n        bytes32 poolId,\\n        address tradeHandler,\\n        uint256 amountGiven,\\n        uint256 enterIndex,\\n        address[] memory assets\\n    ) external returns (uint256) {\\n        uint256[] memory maxAmountsIn = new uint256[](assets.length);\\n        maxAmountsIn[enterIndex] = amountGiven;\\n        bytes memory userData = isSelling\\n            ? abi.encode(JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, maxAmountsIn, 0)\\n            : abi.encode(\\n                JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\\n                amountGiven,\\n                enterIndex\\n            );\\n        JoinPoolRequest memory request = JoinPoolRequest(\\n            assets,\\n            maxAmountsIn,\\n            userData,\\n            false\\n        );\\n        uint256 balanceBefore = outToken.balanceOf(address(tradeHandler));\\n        bvault.joinPool(poolId, tradeHandler, tradeHandler, request);\\n        uint256 balanceAfter = outToken.balanceOf(address(tradeHandler));\\n        return\\n            isSelling\\n                ? balanceAfter - balanceBefore\\n                : balanceBefore - balanceAfter;\\n    }\\n\\n    function flattenedBalancerExitPool(\\n        BVault bvault,\\n        bool isSelling,\\n        IERC20 outToken,\\n        bytes32 poolId,\\n        address payable tradeHandler,\\n        uint256 amountGiven,\\n        uint256 exitIndex,\\n        address[] memory assets\\n    ) external returns (uint256) {\\n        uint256[] memory minAmountsOut = new uint256[](assets.length);\\n        uint256[] memory amountsOut = new uint256[](assets.length);\\n        amountsOut[exitIndex] = amountGiven;\\n        bytes memory userData = isSelling\\n            ? abi.encode(\\n                ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n                amountGiven,\\n                exitIndex\\n            )\\n            : abi.encode(\\n                ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\\n                amountsOut,\\n                2 ** 256 - 1\\n            );\\n        ExitPoolRequest memory request = ExitPoolRequest(\\n            assets,\\n            minAmountsOut,\\n            userData,\\n            false\\n        );\\n        uint256 balanceBefore = outToken.balanceOf(address(tradeHandler));\\n        bvault.exitPool(poolId, tradeHandler, tradeHandler, request);\\n        uint256 balanceAfter = outToken.balanceOf(address(tradeHandler));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    /// @notice Returns the product of two integers.\\n    /// @param items The first element is the amount, and the second element is\\n    /// the weight in basis points\\n    function apply_weight(\\n        uint256[2] calldata items\\n    ) public pure returns (uint256) {\\n        return (items[0] * items[1]) / 10_000;\\n    }\\n\\n    function sum2(uint256[2] calldata items) public pure returns (uint256) {\\n        return items[0] + items[1];\\n    }\\n\\n    function sum3(uint256[3] calldata items) public pure returns (uint256) {\\n        return items[0] + items[1] + items[2];\\n    }\\n\\n    function sum4(uint256[4] calldata items) public pure returns (uint256) {\\n        return items[0] + items[1] + items[2] + items[3];\\n    }\\n\\n    function sum5(uint256[5] calldata items) public pure returns (uint256) {\\n        return items[0] + items[1] + items[2] + items[3] + items[4];\\n    }\\n\\n    function sum6(uint256[6] calldata items) public pure returns (uint256) {\\n        return items[0] + items[1] + items[2] + items[3] + items[4] + items[5];\\n    }\\n\\n    function sum7(uint256[7] calldata items) public pure returns (uint256) {\\n        return\\n            items[0] +\\n            items[1] +\\n            items[2] +\\n            items[3] +\\n            items[4] +\\n            items[5] +\\n            items[6];\\n    }\\n\\n    function sum8(uint256[8] calldata items) public pure returns (uint256) {\\n        return\\n            items[0] +\\n            items[1] +\\n            items[2] +\\n            items[3] +\\n            items[4] +\\n            items[5] +\\n            items[6] +\\n            items[7];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"SeasolverHelper.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"items\",\"type\":\"uint256[2]\"}],\"name\":\"apply_weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationRouterV4\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contract IAggregationExecutorV4\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct TruncatedSwapDescriptionV4\",\"name\":\"truncatedDesc\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flattened1InchSwapV4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationRouterV5\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"contract IAggregationExecutorV5\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct TruncatedSwapDescriptionV5\",\"name\":\"truncatedDesc\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flattened1InchSwapV5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BVault\",\"name\":\"bvault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSelling\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"tradeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGiven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"flattenedBalancerExitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BVault\",\"name\":\"bvault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSelling\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tradeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGiven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"flattenedBalancerJoinPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BVault\",\"name\":\"bvault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOut\",\"type\":\"address\"}],\"internalType\":\"struct SimplifiedSingleSwap\",\"name\":\"ssw\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amountGiven\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"tradeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"flattenedBalancerSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"items\",\"type\":\"uint256[2]\"}],\"name\":\"sum2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"items\",\"type\":\"uint256[3]\"}],\"name\":\"sum3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"items\",\"type\":\"uint256[4]\"}],\"name\":\"sum4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"items\",\"type\":\"uint256[5]\"}],\"name\":\"sum5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"items\",\"type\":\"uint256[6]\"}],\"name\":\"sum6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"items\",\"type\":\"uint256[7]\"}],\"name\":\"sum7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"items\",\"type\":\"uint256[8]\"}],\"name\":\"sum8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SeasolverHelper", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}