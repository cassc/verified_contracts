{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CrowdProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport './ICompound.sol';\\n\\ncontract CrowdProposal {\\n    /// @notice The crowd proposal author\\n    address payable public immutable author;\\n\\n    /// @notice Governance proposal data\\n    address[] public targets;\\n    uint[] public values;\\n    string[] public signatures;\\n    bytes[] public calldatas;\\n    string public description;\\n\\n    /// @notice COMP token contract address\\n    address public immutable comp;\\n    /// @notice Compound protocol `GovernorBravo` contract address\\n    address public immutable governor;\\n\\n    /// @notice Governance proposal id\\n    uint public govProposalId;\\n    /// @notice Terminate flag\\n    bool public terminated;\\n\\n    /// @notice An event emitted when the governance proposal is created\\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\\n    /// @notice An event emitted when the crowd proposal is terminated\\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\\n\\n    /**\\n    * @notice Construct crowd proposal\\n    * @param author_ The crowd proposal author\\n    * @param targets_ The ordered list of target addresses for calls to be made\\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    * @param signatures_ The ordered list of function signatures to be called\\n    * @param calldatas_ The ordered list of calldata to be passed to each call\\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\\n    * @param comp_ `COMP` token contract address\\n    * @param governor_ Compound protocol `GovernorBravo` contract address\\n    */\\n    constructor(address payable author_,\\n                address[] memory targets_,\\n                uint[] memory values_,\\n                string[] memory signatures_,\\n                bytes[] memory calldatas_,\\n                string memory description_,\\n                address comp_,\\n                address governor_) public {\\n        author = author_;\\n\\n        // Save proposal data\\n        targets = targets_;\\n        values = values_;\\n        signatures = signatures_;\\n        calldatas = calldatas_;\\n        description = description_;\\n\\n        // Save Compound contracts data\\n        comp = comp_;\\n        governor = governor_;\\n\\n        terminated = false;\\n    }\\n\\n    /// @notice Create governance proposal\\n    function initDelegate(uint256 _compStakeAmount) external {\\n        require(msg.sender == author, \\\"Only owner can cal this function\\\");\\n        // Stake COMP and force proposal to delegate votes to itself\\n        IComp(comp).transferFrom(msg.sender, address(this), _compStakeAmount);\\n        // Delegate votes to the crowd proposal\\n        IComp(comp).delegate(address(this));\\n    }\\n\\n    /// @notice Create governance proposal\\n    function propose() external returns (uint) {\\n        require(govProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\\n        require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\\n\\n        // Create governance proposal and save proposal id\\n        govProposalId = IGovernorBravo(governor).propose(targets, values, signatures, calldatas, description);\\n        emit CrowdProposalProposed(address(this), author, govProposalId);\\n\\n        return govProposalId;\\n    }\\n\\n    /// @notice Terminate the crowd proposal, send back staked COMP tokens\\n    function terminate() external {\\n        require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\\n        require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\\n\\n        terminated = true;\\n\\n        // Transfer staked COMP tokens from the crowd proposal contract back to the author\\n        IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));\\n\\n        emit CrowdProposalTerminated(address(this), author);\\n    }\\n\\n    /// @notice Vote for the governance proposal with all delegated votes\\n    function vote() external {\\n        require(govProposalId > 0, 'CrowdProposal::vote: gov proposal has not been created yet');\\n        // Support the proposal, vote value = 1\\n        IGovernorBravo(governor).castVote(govProposalId, 1);\\n\\n        emit CrowdProposalVoted(address(this), govProposalId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface IComp {\\n    function delegate(address delegatee) external;\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address dst, uint rawAmount) external returns (bool);\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\\n}\\n\\ninterface IGovernorBravo {\\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\\n    function castVote(uint proposalId, uint8 support) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"author_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CrowdProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compStakeAmount\",\"type\":\"uint256\"}],\"name\":\"initDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdProposal", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000059d07dc34b135b17b87840a86bff7302039e7edf00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000740000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c0da02939e1441f497fd74f78ce7decb17b665290000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fe5e5d361b2ad62c541bab87c45a0b9b018389a20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002173656e644d657373616765546f4368696c6428616464726573732c627974657329000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000018281dfc4d00905da1aaa6731414eaba843c468a00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000200000000000000000000000083e0f742cacbe66349e3701b171ee2487a26e738000000000000000000000000d712ace4ca490d4f3e92992ecf3de12251b975f90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000046616464417373657428616464726573732c28616464726573732c616464726573732c75696e74382c75696e7436342c75696e7436342c75696e7436342c75696e743132382929000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000236465706c6f79416e6455706772616465546f28616464726573732c616464726573732900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000100000000000000000000000000f25212e676d1f7f89cd72ffee66158f5412464450000000000000000000000003a58a54c066fdc0f2d55fc9c89f0415c92ebf3c400000000000000000000000097371df4492605486e23da797fa68e55fc38a13f00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000853a0d2313c00000000000000000000000000000000000000000000000000000905438e6001000000000000000000000000000000000000000000000000000000f8b0a10e470000000000000000000000000000000000000000000000069e10de76676d08000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000083e0f742cacbe66349e3701b171ee2487a26e738000000000000000000000000f25212e676d1f7f89cd72ffee66158f541246445000000000000000000000000000000000000000000000000000000000000010a23204164642073744d4154494320617320436f6c6c61746572616c20746f206355534443763320506f6c79676f6e0a546869732070726f706f73616c20616464732073744d4154494320617320636f6c6c61746572616c20666f72206d6f72652073656520746865206465736372697074696f6e206f66207468652070726f706f73616c205b73744d4154494320616e64204d6174696358206c697374696e67206f6e20506f6c79676f6e20436f6d706f756e642076335d2868747470733a2f2f7777772e636f6d702e78797a2f742f73746d617469632d616e642d6d61746963782d6c697374696e672d6f6e2d706f6c79676f6e2d636f6d706f756e642d76332f343339372f31290a00000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}