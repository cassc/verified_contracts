{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/CLSynchronicityPriceAdapterBaseToPeg.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IChainlinkAggregator} from '../interfaces/IChainlinkAggregator.sol';\\nimport {ICLSynchronicityPriceAdapter} from '../interfaces/ICLSynchronicityPriceAdapter.sol';\\n\\n/**\\n * @title CLSynchronicityPriceAdapterBaseToPeg\\n * @author BGD Labs\\n * @notice Price adapter to calculate price of (Asset / Base) pair by using\\n * @notice Chainlink Data Feeds for (Asset / Peg) and (Base / Peg) pairs.\\n * @notice For example it can be used to calculate USDC / ETH\\n * @notice based on USDC / USD and ETH / USD feeds.\\n */\\ncontract CLSynchronicityPriceAdapterBaseToPeg is ICLSynchronicityPriceAdapter {\\n  /**\\n   * @notice Price feed for (Base / Peg) pair\\n   */\\n  IChainlinkAggregator public immutable BASE_TO_PEG;\\n\\n  /**\\n   * @notice Price feed for (Asset / Peg) pair\\n   */\\n  IChainlinkAggregator public immutable ASSET_TO_PEG;\\n\\n  /**\\n   * @notice Number of decimals in the output of this price adapter\\n   */\\n  uint8 public immutable DECIMALS;\\n\\n  /**\\n   * @notice Maximum number of resulting and feed decimals\\n   */\\n  uint8 public constant MAX_DECIMALS = 18;\\n\\n  string private _description;\\n\\n  /**\\n   * @param baseToPegAggregatorAddress the address of BASE / PEG feed\\n   * @param assetToPegAggregatorAddress the address of the ASSET / PEG feed\\n   * @param decimals precision of the answer\\n   * @param pairDescription description\\n   */\\n  constructor(\\n    address baseToPegAggregatorAddress,\\n    address assetToPegAggregatorAddress,\\n    uint8 decimals,\\n    string memory pairDescription\\n  ) {\\n    BASE_TO_PEG = IChainlinkAggregator(baseToPegAggregatorAddress);\\n    ASSET_TO_PEG = IChainlinkAggregator(assetToPegAggregatorAddress);\\n\\n    if (decimals > MAX_DECIMALS) revert DecimalsAboveLimit();\\n    if (BASE_TO_PEG.decimals() > MAX_DECIMALS) revert DecimalsAboveLimit();\\n\\n    if (BASE_TO_PEG.decimals() != ASSET_TO_PEG.decimals()) revert DecimalsNotEqual();\\n\\n    DECIMALS = decimals;\\n    _description = pairDescription;\\n  }\\n\\n  /// @inheritdoc ICLSynchronicityPriceAdapter\\n  function description() external view returns (string memory) {\\n    return _description;\\n  }\\n\\n  /// @inheritdoc ICLSynchronicityPriceAdapter\\n  function decimals() external view returns (uint8) {\\n    return DECIMALS;\\n  }\\n\\n  /// @inheritdoc ICLSynchronicityPriceAdapter\\n  function latestAnswer() external view override returns (int256) {\\n    int256 assetToPegPrice = ASSET_TO_PEG.latestAnswer();\\n    int256 baseToPegPrice = BASE_TO_PEG.latestAnswer();\\n\\n    if (assetToPegPrice <= 0 || baseToPegPrice <= 0) {\\n      return 0;\\n    }\\n\\n    return (assetToPegPrice * int256(10 ** DECIMALS)) / (baseToPegPrice);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChainlinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChainlinkAggregator {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICLSynchronicityPriceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICLSynchronicityPriceAdapter {\\n  /**\\n   * @notice Calculates the current answer based on the aggregators.\\n   * @return int256 latestAnswer\\n   */\\n  function latestAnswer() external view returns (int256);\\n\\n  /**\\n   * @notice Returns the description of the feed\\n   * @return string desciption\\n   */\\n  function description() external view returns (string memory);\\n\\n  /**\\n   * @notice Returns the feed decimals\\n   * @return uint8 decimals\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  error DecimalsAboveLimit();\\n  error DecimalsNotEqual();\\n  error RatioOutOfBounds();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToPegAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToPegAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pairDescription\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DecimalsAboveLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RatioOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ASSET_TO_PEG\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_TO_PEG\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CLSynchronicityPriceAdapterBaseToPeg", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000003f12643d3f6f874d39c2a4c9f2cd6f2dbac877fc00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b47484f2f5553442f455448000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}