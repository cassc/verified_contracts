{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DistributionWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IBlazeAuction.sol\\\";\\nimport \\\"./interfaces/IBlazeStaking.sol\\\";\\n\\ncontract DistributionWrapper is ReentrancyGuard {\\n    IBlazeAuction public blazeAuction;\\n    IBlazeStaking public blazeStaking;\\n    uint32 public stakingStartTimestamp;\\n\\n    constructor(address _auction, address _staking) {\\n        require(_auction != address(0), \\\"Invalid auction Addresses\\\");\\n        require(_staking!= address(0), \\\"Invalid stakingAddresses\\\");\\n        blazeAuction = IBlazeAuction(_auction);        \\n        blazeStaking = IBlazeStaking(_staking);        \\n        stakingStartTimestamp = blazeStaking._deploymentTimeStamp();\\n    }\\n\\n    receive() external payable {}\\n\\n    function distributeFunds() external nonReentrant {\\n        uint32 currentDay = uint32(((block.timestamp - stakingStartTimestamp) / 1 days) + 1);\\n\\n        uint256 beforeEthBalance = address(this).balance;\\n\\n        blazeAuction.claimFees();\\n        blazeStaking.setFeeRewardsForAllCycle();\\n\\n        uint256 next8Day = blazeStaking.getNextCycleDistributionDay(8);\\n\\n        if(currentDay >= next8Day) {\\n            blazeStaking.distributeFeeRewardsForAll();\\n        }\\n\\n        uint256 incentive = address(this).balance - beforeEthBalance;\\n\\n        (bool sent, ) = payable(msg.sender).call{value: incentive}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function claimFees() external nonReentrant {\\n        blazeAuction.claimFees();\\n    }\\n\\n    function setFeeRewardsForAllCycle() external nonReentrant {\\n        blazeStaking.setFeeRewardsForAllCycle();\\n    }\\n\\n    function distributeFeeRewardsForAll() external nonReentrant {\\n        blazeStaking.distributeFeeRewardsForAll();\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBlazeAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\ninterface IBlazeAuction {\\n    function mintBlazeTokensForLP() external;\\n        \\n    function claimFees() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBlazeStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.24;\\n\\ninterface IBlazeStaking {\\n    function setFeeRewardsForAllCycle() external;\\n\\n    function distributeFeeRewardsForAll() external;\\n\\n    function _deploymentTimeStamp() external view returns (uint32);\\n\\n    function getNextCycleDistributionDay(uint16) external view returns (uint256);\\n\\n    function getUser2888BlazeToken(address user, uint256 cycle) external view returns (uint256 blazeTokenStaked);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"blazeAuction\",\"outputs\":[{\"internalType\":\"contract IBlazeAuction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blazeStaking\",\"outputs\":[{\"internalType\":\"contract IBlazeStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFeeRewardsForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFeeRewardsForAllCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DistributionWrapper", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000200ed69de20fe522d08df5d7ce3d69aba4e02e74000000000000000000000000bc0043bc5b0c394d9d05d49768f9548f8cf9587b", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}