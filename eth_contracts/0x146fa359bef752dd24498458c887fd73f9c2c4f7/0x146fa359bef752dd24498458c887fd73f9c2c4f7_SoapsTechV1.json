{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SoapsTechV1.sol\": {\r\n      \"content\": \"/**\\nWelcome to the Soaps Tech.\\n\\nWebsite: https://soaps.tech/\\nTelegram: https://t.me/soapstech\\nX: https://x.com/soapstech\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: contracts/Ownable.sol\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\npragma solidity >=0.8.2 <0.9.0;\\n\\ncontract SoapsTechV1 is Ownable {\\n    address public protocolFeeRecipient;\\n    uint256 public protocolFeeRate;\\n    uint256 public roomFeeRate;\\n    uint256 public priceRate;\\n\\n    constructor() {\\n        protocolFeeRecipient = msg.sender;\\n        priceRate = 16_000;\\n        roomFeeRate = 100_000_000_000_000_000;\\n        protocolFeeRate = 100_000_000_000_000_000;\\n    }\\n\\n    event Trade(\\n        address trader,\\n        address room,\\n        bool isBuy,\\n        uint256 keyAmount,\\n        uint256 ethAmount,\\n        uint256 protocolEthAmount,\\n        uint256 subjectEthAmount,\\n        uint256 supply\\n    );\\n\\n    // Key => (Holder => Balance)\\n    mapping(address => mapping(address => uint256)) public poolKey;\\n\\n    // Key => Supply\\n    mapping(address => uint256) public supplyKey;\\n\\n    function setFeeRecipient(address _feeRecipient) public onlyOwner {\\n        protocolFeeRecipient = _feeRecipient;\\n    }\\n\\n    function setProtocolFeeRate(uint256 _feeRate) public onlyOwner {\\n        protocolFeeRate = _feeRate;\\n    }\\n\\n    function setRoomFeeRate(uint256 _feeRate) public onlyOwner {\\n        roomFeeRate = _feeRate;\\n    }\\n\\n    function setPriceRate(uint256 _priceRate) public onlyOwner {\\n        priceRate = _priceRate;\\n    }\\n\\n    function getPrice(\\n        uint256 supply,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        uint256 sum1 = supply == 0\\n            ? 0\\n            : ((supply - 1) * (supply) * (2 * (supply - 1) + 1)) / 6;\\n        uint256 sum2 = supply == 0 && amount == 1\\n            ? 0\\n            : ((supply - 1 + amount) *\\n                (supply + amount) *\\n                (2 * (supply - 1 + amount) + 1)) / 6;\\n        uint256 summation = sum2 - sum1;\\n        return (summation * 1 ether) / priceRate;\\n    }\\n\\n    function getBuyPrice(\\n        address keyOwner,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        return getPrice(supplyKey[keyOwner], amount);\\n    }\\n\\n    function getSellPrice(\\n        address keyOwner,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        return getPrice(supplyKey[keyOwner] - amount, amount);\\n    }\\n\\n    function getBuyPriceAfterFee(\\n        address keyOwner,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        uint256 price = getBuyPrice(keyOwner, amount);\\n        uint256 protocolFee = (price * protocolFeeRate) / 1 ether;\\n        uint256 roomFee = (price * roomFeeRate) / 1 ether;\\n        return price + protocolFee + roomFee;\\n    }\\n\\n    function getSellPriceAfterFee(\\n        address keyOwner,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        uint256 price = getSellPrice(keyOwner, amount);\\n        uint256 protocolFee = (price * protocolFeeRate) / 1 ether;\\n        uint256 roomFee = (price * roomFeeRate) / 1 ether;\\n        return price - protocolFee - roomFee;\\n    }\\n\\n    function buyKeys(address keyOwner, uint256 amount) public payable {\\n        uint256 supply = supplyKey[keyOwner];\\n        require(\\n            supply > 0 || keyOwner == msg.sender,\\n            \\\"Only the key' room can buy the first key\\\"\\n        );\\n        uint256 price = getPrice(supply, amount);\\n        uint256 protocolFee = (price * protocolFeeRate) / 1 ether;\\n        uint256 roomFee = (price * roomFeeRate) / 1 ether;\\n        require(\\n            msg.value >= price + protocolFee + roomFee,\\n            \\\"Insufficient payment\\\"\\n        );\\n        poolKey[keyOwner][msg.sender] = poolKey[keyOwner][msg.sender] + amount;\\n        supplyKey[keyOwner] = supply + amount;\\n        emit Trade(\\n            msg.sender,\\n            keyOwner,\\n            true,\\n            amount,\\n            price,\\n            protocolFee,\\n            roomFee,\\n            supply + amount\\n        );\\n        (bool success1, ) = protocolFeeRecipient.call{value: protocolFee}(\\\"\\\");\\n        (bool success2, ) = keyOwner.call{value: roomFee}(\\\"\\\");\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\n    }\\n\\n    function sellKeys(address keyOwner, uint256 amount) public payable {\\n        uint256 supply = supplyKey[keyOwner];\\n        require(supply > amount, \\\"Cannot sell the last key\\\");\\n        uint256 price = getPrice(supply - amount, amount);\\n        uint256 protocolFee = (price * protocolFeeRate) / 1 ether;\\n        uint256 roomFee = (price * roomFeeRate) / 1 ether;\\n        require(poolKey[keyOwner][msg.sender] >= amount, \\\"Insufficient keys\\\");\\n        poolKey[keyOwner][msg.sender] = poolKey[keyOwner][msg.sender] - amount;\\n        supplyKey[keyOwner] = supply - amount;\\n        emit Trade(\\n            msg.sender,\\n            keyOwner,\\n            false,\\n            amount,\\n            price,\\n            protocolFee,\\n            roomFee,\\n            supply - amount\\n        );\\n        (bool success1, ) = msg.sender.call{\\n            value: price - protocolFee - roomFee\\n        }(\\\"\\\");\\n        (bool success2, ) = protocolFeeRecipient.call{value: protocolFee}(\\\"\\\");\\n        (bool success3, ) = keyOwner.call{value: roomFee}(\\\"\\\");\\n        require(success1 && success2 && success3, \\\"Unable to send funds\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"room\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyKeys\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellKeys\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceRate\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setRoomFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SoapsTechV1", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}