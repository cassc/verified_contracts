{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract MarginTrading is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    address public poolTokenAddress;\r\n    address public operatorWallet;\r\n\r\n    struct Order {\r\n        uint256 margin; // token amount in wei\r\n        uint64 leverage; // leverage ex: 5x, 10x \r\n        uint256 totalFund; // fund with leverage\r\n        address orderOwner;\r\n        address poolTokenAddress_;\r\n        uint256 liquidationUnderlyingAssest;\r\n        bool isActive;\r\n        bool isliquidated;\r\n        uint256 amountunderlineAssest;\r\n        Side side;\r\n        ORDERTYPE orderType; // market , limit \r\n        uint256 createdAt;\r\n    }\r\n\r\n    mapping(uint256 => Order) public orders; // orderId => Order\r\n    mapping(address => uint256[]) private userOrderIds;\r\n\r\n    enum Side {\r\n        LONG,\r\n        SHORT\r\n    }\r\n    enum ORDERTYPE {\r\n        MARKET,\r\n        LIMIT\r\n    }\r\n\r\n    enum UpdateTicker {\r\n        GREATER,\r\n        LESS\r\n    }\r\n    \r\n    event OrderCreatedEvent(\r\n        uint256  margin,\r\n        uint64  leverage,\r\n        uint256  totalFund,\r\n        address  orderOwner,    \r\n        uint256 liquidationUnderlyingAssest,\r\n        bool isActive, \r\n        Side side,      \r\n        uint256 createdAt,\r\n        uint256 amountunderlineAssest\r\n    );\r\n\r\n    event cancelOrderEvent(\r\n        address user,\r\n        uint256 orderId,\r\n        uint256 canceledAt,\r\n        uint256 returnAmount\r\n\r\n    );\r\n    \r\n    event liquidateUserEvent(\r\n        uint256 orderId,\r\n        uint256 liquidatedAt\r\n\r\n    );\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorWallet ,\" Invalid operator wallet\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _poolTokenAddress, address _operatorWallet) {\r\n        poolTokenAddress=_poolTokenAddress;\r\n        operatorWallet = _operatorWallet;\r\n    }\r\n\r\n    function createOrder(\r\n        uint256 newOrderId,\r\n        uint256 marginAmount, // in USDT wei\r\n        uint256 underlyingAssets,           // underline assest\r\n        uint8 leverage, // In USDT\r\n        uint256 liquidationUnderlyingAssest,\r\n        Side side,\r\n        ORDERTYPE orderType\r\n    ) \r\n\r\n    external returns(Order memory) {\r\n        userOrderIds[msg.sender].push(newOrderId); // we are assuming the order id will be unique from backend....\r\n        Order storage userDetails = orders[newOrderId];\r\n        require(IERC20(poolTokenAddress).balanceOf(msg.sender) >= marginAmount,\"Insufficient token balance\");\r\n        IERC20(poolTokenAddress).transferFrom(msg.sender, address(this), marginAmount);\r\n        userDetails.margin= marginAmount;\r\n        userDetails.leverage = leverage;\r\n        userDetails.totalFund = (marginAmount.mul(leverage));\r\n        userDetails.orderOwner = msg.sender;\r\n        userDetails.poolTokenAddress_ = poolTokenAddress;\r\n        userDetails.liquidationUnderlyingAssest = liquidationUnderlyingAssest;\r\n        userDetails.createdAt = block.timestamp;\r\n        userDetails.side = side;\r\n        userDetails.isActive= true;\r\n        userDetails.amountunderlineAssest= underlyingAssets;\r\n        userDetails.orderType = orderType;\r\n        emit OrderCreatedEvent(marginAmount,leverage,(marginAmount.mul(leverage)), msg.sender,liquidationUnderlyingAssest,true,side,block.timestamp,underlyingAssets);\r\n        return(userDetails);\r\n    }\r\n\r\n    function createOrderForUser(\r\n        address userAddress,\r\n        uint256 newOrderId,\r\n        uint256 marginAmount, // in USDT wei\r\n        uint256 underlyingAssets,           // underline assest\r\n        uint8 leverage, // In USDT\r\n        uint256 liquidationUnderlyingAssest,\r\n        Side side,\r\n        ORDERTYPE orderType\r\n    )\r\n\r\n    external onlyOperator() returns(Order memory) {\r\n        userOrderIds[msg.sender].push(newOrderId); // we are assuming the order id will be unique from backend....\r\n        Order storage userDetails = orders[newOrderId];\r\n        require(IERC20(poolTokenAddress).balanceOf(userAddress) >= marginAmount,\"Insufficient token balance\");\r\n        IERC20(poolTokenAddress).transferFrom(userAddress, address(this), marginAmount);\r\n        userDetails.margin= marginAmount;\r\n        userDetails.leverage = leverage;\r\n        userDetails.totalFund = (marginAmount.mul(leverage));\r\n        userDetails.orderOwner = userAddress;\r\n        userDetails.poolTokenAddress_ = poolTokenAddress;\r\n        userDetails.liquidationUnderlyingAssest = liquidationUnderlyingAssest;\r\n        userDetails.createdAt = block.timestamp;\r\n        userDetails.side = side;\r\n        userDetails.isActive= true;\r\n        userDetails.amountunderlineAssest= underlyingAssets;\r\n        userDetails.orderType = orderType;\r\n        emit OrderCreatedEvent(marginAmount,leverage,(marginAmount.mul(leverage)), userAddress,liquidationUnderlyingAssest,true,side,block.timestamp,underlyingAssets);\r\n        return(userDetails);\r\n    }\r\n    \r\n    function cancelOrder(uint256 _orderId, uint256 returnAmount,address userAdress) external onlyOperator() returns (bool){\r\n        require(orders[_orderId].isActive,\"this order already deactivated\");\r\n        require(!(orders[_orderId].isliquidated),\"this order is  liquidated\");\r\n        require(orders[_orderId].orderOwner==userAdress,\"owner mismatch\");\r\n        require(IERC20(poolTokenAddress).balanceOf(address(this))>=returnAmount,\"insufficent amount in contract\");\r\n        orders[_orderId].isActive=false;\r\n        IERC20(poolTokenAddress).transfer(userAdress,returnAmount);\r\n        emit cancelOrderEvent(userAdress,_orderId,block.timestamp,returnAmount);\r\n        return true;\r\n    }\r\n     \r\n    function liquidateUser(uint256 _orderId) external onlyOperator() returns (bool){\r\n        require(orders[_orderId].isActive,\"this order already deactivated\");\r\n        require(!(orders[_orderId].isliquidated),\"this order is liquidated\");\r\n        orders[_orderId].isActive=false;\r\n        orders[_orderId].isliquidated=true;\r\n        emit liquidateUserEvent(_orderId,block.timestamp);\r\n        return true;\r\n   }\r\n\r\n    /// @notice Function to get user order ids \r\n    /// @param userAddress The user address \r\n    function getUserOrderIds(address userAddress) external view returns(uint256[] memory){\r\n        return userOrderIds[userAddress];\r\n    }\r\n    \r\n    /// @notice Function to set the operator wallet\r\n    /// @param _newOperator The new operator wallet\r\n    function setOperatorWallet(address _newOperator) external onlyOwner {\r\n        require(_newOperator != address(0), \"Invalid wallet\");\r\n        operatorWallet = _newOperator;\r\n    }\r\n     \r\n    /**\r\n    * @dev Allows the owner to drain the remaining ERC20 tokens held by this contract.\r\n    * @notice Transfers all tokens held by this contract to the owner's address.\r\n    * @dev Requires that there are tokens available to drain.\r\n    */ \r\n    function drainToken() external onlyOwner() {\r\n        uint256 balance = IERC20(poolTokenAddress).balanceOf(address(this));\r\n        require(balance > 0, \"No tokens to drain\");\r\n        IERC20(poolTokenAddress).transfer(owner(), balance);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the owner to drain the remaining Ether (ETH) held by this contract.\r\n    * @notice Transfers all Ether held by this contract to the owner's address.\r\n    */\r\n    function drainETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n     receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"leverage\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"orderOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationUnderlyingAssest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enum MarginTrading.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountunderlineAssest\",\"type\":\"uint256\"}],\"name\":\"OrderCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canceledAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"cancelOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedAt\",\"type\":\"uint256\"}],\"name\":\"liquidateUserEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAdress\",\"type\":\"address\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOrderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationUnderlyingAssest\",\"type\":\"uint256\"},{\"internalType\":\"enum MarginTrading.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum MarginTrading.ORDERTYPE\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"name\":\"createOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"leverage\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalFund\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"orderOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationUnderlyingAssest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isliquidated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountunderlineAssest\",\"type\":\"uint256\"},{\"internalType\":\"enum MarginTrading.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum MarginTrading.ORDERTYPE\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct MarginTrading.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newOrderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"liquidationUnderlyingAssest\",\"type\":\"uint256\"},{\"internalType\":\"enum MarginTrading.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum MarginTrading.ORDERTYPE\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"name\":\"createOrderForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"leverage\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalFund\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"orderOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationUnderlyingAssest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isliquidated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountunderlineAssest\",\"type\":\"uint256\"},{\"internalType\":\"enum MarginTrading.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum MarginTrading.ORDERTYPE\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct MarginTrading.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserOrderIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"liquidateUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"leverage\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalFund\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"orderOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationUnderlyingAssest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isliquidated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountunderlineAssest\",\"type\":\"uint256\"},{\"internalType\":\"enum MarginTrading.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum MarginTrading.ORDERTYPE\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperatorWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarginTrading", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000063688df4b11b8c028405fd94e9657a071200d137", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea4de18c868385db5a4a01ef4b3401dca54e7c53d1aa8e685eda40e383779f6e"}