{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/SupraGeneratorContractL1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {SupraGeneratorContract} from \\\"./SupraGeneratorContract.sol\\\";\\nimport {UUPSUpgradeable} from \\\"../lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @title VRF Generator Contract for L1 chains\\n/// @author Supra Developer\\n/// @notice This contract will generate random number based on the router contract request\\n/// @dev All function calls are currently implemented without side effects\\n\\ncontract SupraGeneratorContractL1 is\\n    SupraGeneratorContract,\\n    UUPSUpgradeable\\n{\\n    /// @notice Works as a constructor to initialize the contract state variables and initializes parent SupraGeneratorContract.\\n    function initialize(\\n        bytes32 _domain,\\n        address _supraRouterContract,\\n        uint256[4] memory _publicKey,\\n        uint256 _instanceId,\\n        uint256 _blsPreCompileGasCost,\\n        uint256 _gasAfterPaymentCalculation\\n    ) public override initializer {\\n        super.initialize(\\n            _domain,\\n            _supraRouterContract,\\n            _publicKey,\\n            _instanceId,\\n            _blsPreCompileGasCost,\\n            _gasAfterPaymentCalculation\\n        );\\n    }\\n\\n    /// @dev Calculate the transaction fee for the callback transaction for Arbitrum\\n    /// @param _startGas The gas at the start of the transaction\\n    /// @param _gasAfterPaymentCalculation calculated gas value to be used based on iterative tests\\n    /// @return paymentWithoutFee The total estimated transaction fee for callback\\n    function calculatePaymentAmount(\\n        uint256 _startGas,\\n        uint256 _gasAfterPaymentCalculation\\n    ) internal override view returns (uint256) {\\n        // TransactionFee =  ChainGasCost\u00a0 * ( gasAfterPaymentCalculation + gasUsedL1)\\n        uint256 paymentWithoutFee = tx.gasprice *\\n            (_gasAfterPaymentCalculation + _startGas - gasleft());\\n        return paymentWithoutFee;\\n    }\\n\\n    /// @notice Helper function that reverts when \\\"msg.sender\\\" is not authorized to upgrade the contract.\\n    /// @dev called by {upgradeTo} and {upgradeToAndCall} in UUPSUpgradeable\\n    /// @dev must be called by owner\\n    /// @param newImplementation address of the new implementation\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner{ }\\n}\\n\"\r\n    },\r\n    \"src/SupraGeneratorContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./BLS.sol\\\";\\nimport {ReentrancyGuard} from \\\"./ReentrancyGuard.sol\\\";\\nimport {CheckContractAddress} from \\\"./CheckContractAddress.sol\\\";\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\nimport {ISupraRouterContract} from \\\"./ISupraRouterContract.sol\\\";\\nimport {IDepositContract} from \\\"./IDepositContract.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"../lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\n\\n/// @title VRF Generator Contract\\n/// @author Supra Developer\\n/// @notice This contract will generate random number based on the router contract request\\n/// @dev All function calls are currently implemented without side effects\\n\\nabstract contract SupraGeneratorContract is\\n    ReentrancyGuard,\\n    Ownable2StepUpgradeable,\\n    CheckContractAddress\\n{\\n    /// @dev Public key\\n    uint256[4] public publicKey;\\n\\n    /// @dev Domain\\n    bytes32 public domain;\\n\\n    /// @dev Address of VRF Router contract\\n    address public supraRouterContract;\\n\\n    address public depositContract;\\n\\n    /// @dev BlockNumber\\n    uint256 internal blockNum = 0;\\n\\n    /// @dev Instance Identification Number\\n    uint256 public instanceId;\\n\\n    /// @dev Gas to be used for callback transaction fee\\n    uint256 public gasAfterPaymentCalculation;\\n\\n    /// @dev Pre Compile Gas cost estimation value\\n    uint256 blsPreCompileGasCost;\\n\\n    /// @dev A mapping that will keep track of all the nonces used, true means used and false means not used\\n    mapping(uint256 => bool) internal nonceUsed;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private whitelistedFreeNodes;\\n\\n    /// @notice It will put the logs for the Generated request with necessary parameters\\n    /// @dev This event will be emitted when random number request generated\\n    /// @param nonce nonce is an incremental counter which is associated with request\\n    /// @param instanceId Instance Identification Number\\n    /// @param callerContract Contract address from which request has been generated\\n    /// @param functionName Function which we have to callback to fulfill request\\n    /// @param rngCount Number of random numbers requested\\n    /// @param numConfirmations Number of Confirmations\\n    /// @param clientSeed Client seed is used to add extra randomness\\n    /// @param clientWalletAddress is the wallet to which the request is associated\\n    event RequestGenerated(\\n        uint256 indexed nonce,\\n        uint256 instanceId,\\n        address indexed callerContract,\\n        string functionName,\\n        uint8 rngCount,\\n        uint256 numConfirmations,\\n        uint256 clientSeed,\\n        address indexed clientWalletAddress\\n    );\\n\\n    /// @notice To put log regarding updation of Public key\\n    /// @dev This event will be emmitted in whenever there is a request to update Public Key\\n    /// @param _timestamp epoch time when Public key has been updated\\n    event PublicKeyUpdated(uint256 _timestamp);\\n\\n    /// @notice It will put log for the nonce value for which request has been fulfilled\\n    /// @dev It will be emitted when callback to the Router contract has been made\\n    /// @param nonce nonce is an incremental counter which is associated with request\\n    /// @param clientWalletAddress is the address through which the request is generated and the nonce is associated\\n    /// @param timestamp epoch time when a particular nonce was processed\\n    /// @param status status for the callback transaction\\n    event NonceProcessed(\\n        uint256 indexed nonce,\\n        address indexed clientWalletAddress,\\n        uint256 timestamp,\\n        bool status,\\n        bytes data\\n    );\\n\\n    /// @notice It will put log to the individual free node wallets those added to the whitelist\\n    /// @dev It will be emitted once the free node is added to the whitelist\\n    /// @param freeNodeWalletAddress is the address through which free node wallet is to be whitelisted\\n    event FreeNodeWhitelisted(address freeNodeWalletAddress);\\n\\n    /// @notice It will put log to the multiple free node wallets those added to the whitelist in bulk\\n    /// @dev It will be emitted once multiple free nodes are added to the whitelist\\n    /// @param freeNodeWallets is the array of address through which is multiple free nodes are to be whitelisted\\n    event MultipleFreeNodesWhitelisted(address[] freeNodeWallets);\\n\\n    /// @notice It will put log to the individual free node wallets those removed from the whitelist\\n    /// @dev It will be emitted once the free node is removed from the whitelist\\n    /// @param freeNodeWallet is the address which to be removed from the whitelist\\n    event FreeNodeRemovedFromWhitelist(address freeNodeWallet);\\n\\n    /// @notice Works as a constructor to initialize the contract state variables.\\n    function initialize(\\n        bytes32 _domain,\\n        address _supraRouterContract,\\n        uint256[4] memory _publicKey,\\n        uint256 _instanceId,\\n        uint256 _blsPreCompileGasCost,\\n        uint256 _gasAfterPaymentCalculation\\n    ) public virtual onlyInitializing {\\n        __Ownable2Step_init();\\n        publicKey = _publicKey;\\n        domain = _domain;\\n        supraRouterContract = _supraRouterContract;\\n        instanceId = _instanceId;\\n        blsPreCompileGasCost = _blsPreCompileGasCost;\\n        gasAfterPaymentCalculation = _gasAfterPaymentCalculation;\\n    }\\n\\n    /// @dev Set the gas required for callback transaction based on calculations\\n    /// @param _newGas The gas at the start of the transaction\\n    // Need to be setup in advance\\n    function setGasAfterPaymentCalculation(uint256 _newGas) external onlyOwner {\\n        gasAfterPaymentCalculation = _newGas;\\n    }\\n\\n    /// @dev Generates a random number and initiates an RNG callback while handling payment processing.\\n    /// @param _nonce Nonce for the RNG request.\\n    /// @param _bhash Hash of the block where the request was made.\\n    /// @param _message Hash of the encoded data.\\n    /// @param _signature Signature of the message.\\n    /// @param _rngCount Number of random numbers to generate.\\n    /// @param _clientSeed Seed provided by the client.\\n    /// @param _callerContract Address of the calling contract.\\n    /// @param _func Name of the calling function.\\n    /// @param _clientWalletAddress Address of the client's wallet.\\n    /// @return _rngSuccess Indicates if the RNG callback was successful.\\n    /// @return paymentSuccess Indicates if the payment processing was successful.\\n    /// @return data Additional data returned from the RNG callback.\\n    function generateRngCallback(\\n        uint256 _nonce,\\n        bytes32 _bhash,\\n        bytes memory _message,\\n        uint256[2] calldata _signature,\\n        uint8 _rngCount,\\n        uint256 _clientSeed,\\n        address _callerContract,\\n        string calldata _func,\\n        address _clientWalletAddress\\n    )\\n        public\\n        nonReentrant\\n        returns (\\n            bool,\\n            bool,\\n            bytes memory\\n        )\\n    {\\n        uint256 startGas = gasleft();\\n        require(\\n            gasAfterPaymentCalculation != 0,\\n            \\\"Generator_SC: Gas payment after calculation must be set!\\\"\\n        );\\n\\n        (bool _rngSuccess, bytes memory data) = _generateRngCallback(\\n            _nonce,\\n            _bhash,\\n            _message,\\n            _signature,\\n            _rngCount,\\n            _clientSeed,\\n            _callerContract,\\n            _func\\n        );\\n        uint256 _txnFee;\\n        _txnFee = calculatePaymentAmount(\\n                startGas,\\n                gasAfterPaymentCalculation\\n            );\\n        \\n\\n        /** \\n            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n                Method will call deposit contract and collect the fund from client's deposits to Supra fund.\\n            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n        */\\n        \\n        bytes memory encodedMethodWithParam = abi.encodeCall(\\n            IDepositContract.collectFund,\\n            (_clientWalletAddress,\\n            _txnFee)\\n        );\\n\\n        (bool paymentSuccess, ) = address(depositContract).call(encodedMethodWithParam);\\n        require(paymentSuccess,\\\"Payment Failed\\\");\\n        (bool status, bytes memory callbackData) = abi.decode(data, (bool, bytes));\\n        emit NonceProcessed(_nonce, _clientWalletAddress, block.timestamp, status, callbackData);\\n\\n        return (_rngSuccess, paymentSuccess, data);\\n        \\n    }\\n\\n    /// @dev Calculate the transaction fee for the callback transaction for Arbitrum\\n    /// @param _startGas The gas at the start of the transaction\\n    /// @param _gasAfterPaymentCalculation calculated gas value to be used based on iterative tests\\n    /// @return paymentWithoutFee The total estimated transaction fee for callback\\n    function calculatePaymentAmount(\\n        uint256 _startGas,\\n        uint256 _gasAfterPaymentCalculation\\n    ) internal virtual view returns (uint256) {}\\n\\n    /// @dev Generates a random number internally.\\n    /// @param _nonce Nonce for the RNG request.\\n    /// @param _bhash Hash of the block where the request was made.\\n    /// @param _message Hash of the encoded data.\\n    /// @param _signature Signature of the message.\\n    /// @param _rngCount Number of random numbers to generate.\\n    /// @param _clientSeed Seed provided by the client.\\n    /// @param _callerContract Address of the calling contract.\\n    /// @param _func Name of the calling function.\\n    /// @return success Indicates if the processing was successful.\\n    /// @return data Additional data returned from the RNG callback.\\n    function _generateRngCallback(\\n        uint256 _nonce,\\n        bytes32 _bhash,\\n        bytes memory _message,\\n        uint256[2] calldata _signature,\\n        uint8 _rngCount,\\n        uint256 _clientSeed,\\n        address _callerContract,\\n        string calldata _func\\n    ) internal returns (bool, bytes memory) {\\n        require(\\n            isFreeNodeWhitelisted(msg.sender),\\n            \\\"Free node is not whitelisted\\\"\\n        );\\n        require(!nonceUsed[_nonce], \\\"Nonce has already been processed\\\");\\n\\n        // Verify that the passed parameters do indeed hash to _message to ensure that the params\\n        // are not spoofed\\n        bytes memory encoded_data = abi.encode(\\n            _bhash,\\n            _nonce,\\n            _rngCount,\\n            instanceId,\\n            _callerContract,\\n            _func,\\n            _clientSeed\\n        );\\n        bytes32 keccak_encoded = keccak256(encoded_data);\\n        require(\\n            keccak_encoded == bytes32(_message),\\n            \\\"Cannot verify the message\\\"\\n        );\\n        // Verify the signature using the public key\\n        verify(_message, _signature);\\n        // Generate a random number\\n        // Use the signature as a seed and some transaction parameters, generate hash and convert to uint for random number\\n        uint256[] memory rngList = new uint256[](_rngCount);\\n        for (uint256 loop = 0; loop < _rngCount; ++loop) {\\n            rngList[loop] = uint256(\\n                keccak256(abi.encodePacked(_signature, loop + 1))\\n            );\\n        }\\n        (bool success, bytes memory data) = supraRouterContract.call(\\n            abi.encodeCall(\\n                ISupraRouterContract.rngCallback,\\n                (_nonce,\\n                rngList,\\n                _callerContract,\\n                _func)\\n            )\\n        );\\n\\n        nonceUsed[_nonce] = true;\\n        return (success, data);\\n    }\\n\\n    /// @notice This function is used to generate random number request\\n    /// @dev This function will be called from router contract which is for the random number generation request\\n    /// @param _nonce nonce is an incremental counter which is associated with request\\n    /// @param _callerContract Actual client contract address from which request has been generated\\n    /// @param _functionName A combination of a function and the types of parameters it takes, combined together as a string with no spaces\\n    /// @param _rngCount Number of random numbers requested\\n    /// @param _numConfirmations Number of Confirmations\\n    /// @param _clientSeed Use of this is to add some extra randomness\\n    function rngRequest(\\n        uint256 _nonce,\\n        string memory _functionName,\\n        uint8 _rngCount,\\n        address _callerContract,\\n        uint256 _numConfirmations,\\n        uint256 _clientSeed,\\n        address _clientWalletAddress\\n    ) external {\\n        require(\\n            msg.sender == supraRouterContract,\\n            \\\"Only router contract can execute this function\\\"\\n        );\\n        emit RequestGenerated(\\n            _nonce,\\n            instanceId,\\n            _callerContract,\\n            _functionName,\\n            _rngCount,\\n            _numConfirmations,\\n            _clientSeed,\\n            _clientWalletAddress\\n        );\\n    }\\n\\n    /// @notice The function will whitelist a single free node wallet\\n    /// @dev The function will whitelist a single free node at a time and will only be updated by the owner\\n    /// @param _freeNodeWallet this is the wallet address to be whitelisted\\n    function addFreeNodeToWhitelistSingle(address _freeNodeWallet)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            !isFreeNodeWhitelisted(_freeNodeWallet),\\n            \\\"Free Node is already whitelisted\\\"\\n        );\\n        whitelistedFreeNodes.add(_freeNodeWallet);\\n        emit FreeNodeWhitelisted(_freeNodeWallet);\\n    }\\n\\n    /// @notice The function will whitelist multiple free node wallets\\n    /// @dev The function will whitelist multiple free node addresses passed altogether in an array\\n    /// @param _freeNodeWallets it is an array of address type, which accepts all the addresses to whitelist altogether\\n    function addFreeNodeToWhitelistBulk(address[] memory _freeNodeWallets)\\n        external\\n        onlyOwner\\n    {   \\n        address[] memory freeNodeWallets = new address[](_freeNodeWallets.length);\\n        for (uint256 loop = 0; loop < _freeNodeWallets.length; ++loop) {\\n            if(!isFreeNodeWhitelisted(_freeNodeWallets[loop])){\\n                whitelistedFreeNodes.add(_freeNodeWallets[loop]);\\n                freeNodeWallets[loop] = _freeNodeWallets[loop];\\n            }           \\n        }\\n        emit MultipleFreeNodesWhitelisted(freeNodeWallets);\\n    }\\n\\n    /// @notice The function will remove the address from the whitelist\\n    /// @dev The function will remove the already whitelisted free node wallet\\n    /// @param _freeNodeWallet this is the wallet address that is to be removed from the list of whitelisted free node\\n    function removeFreeNodeFromWhitelist(address _freeNodeWallet)\\n        external\\n        onlyOwner\\n    {\\n        bool result = whitelistedFreeNodes.remove(_freeNodeWallet);\\n        require(result, \\\"Free Node not whitelisted or already removed\\\");\\n        emit FreeNodeRemovedFromWhitelist(_freeNodeWallet);\\n    }\\n\\n    /// @notice The function will check if an address is whitelisted or not\\n    /// @dev The function will check if a particular free node is whitelisted or not and will return a boolean value accordingly\\n    /// @param _freeNodeWallet this is the wallet address to check if it is whitelisted or not\\n    function isFreeNodeWhitelisted(address _freeNodeWallet)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return whitelistedFreeNodes.contains(_freeNodeWallet);\\n    }\\n\\n    /// @notice The function will return the list of whitelisted free nodes\\n    /// @dev The function will check for all the whitelisted free node wallets and return the list\\n    function listAllWhitelistedFreeNodes()\\n        external\\n        view\\n        onlyOwner\\n        returns (address[] memory)\\n    {\\n        address[] memory freenodes = new address[](\\n            whitelistedFreeNodes.length()\\n        );\\n        for (uint256 loop = 0; loop < whitelistedFreeNodes.length(); ++loop) {\\n            address value = whitelistedFreeNodes.at(loop);\\n            freenodes[loop] = value;\\n        }\\n        return freenodes;\\n    }\\n\\n    /// @notice This function will be used to update public key\\n    /// @dev Update the public key state variable\\n    /// @param _publicKey New Public key which will update the old one\\n    /// @return bool It returns the status of updation of public key\\n    function updatePublicKey(uint256[4] memory _publicKey)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        publicKey = _publicKey;\\n        emit PublicKeyUpdated(block.timestamp);\\n        return true;\\n    }\\n\\n    /// @notice This function is for updating the Deposit Contract Address\\n    /// @dev To update deposit contract address\\n    /// @param _newDepositSC contract address of the deposit/new deposit contract\\n    function updateDepositContract(address _newDepositSC) external onlyOwner {\\n        require(\\n            isContract(_newDepositSC),\\n            \\\"Deposit contract address cannot be EOA\\\"\\n        );\\n        require(\\n            _newDepositSC != address(0),\\n            \\\"Deposit contract address cannot be a zero address\\\"\\n        );\\n        depositContract = _newDepositSC;\\n    }\\n\\n    function verify(bytes memory _message, uint256[2] calldata _signature)\\n        internal\\n        view\\n    {\\n        bool callSuccess;\\n        bool checkSuccess;\\n        (checkSuccess, callSuccess) = BLS.verifySingle(\\n            _signature,\\n            publicKey,\\n            BLS.hashToPoint(domain, _message),\\n            blsPreCompileGasCost\\n        );\\n\\n        require(\\n            callSuccess,\\n            \\\"Verify : Incorrect Public key or Signature Points\\\"\\n        );\\n        require(checkSuccess, \\\"Verify : Incorrect Input Message\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"src/BLS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {ModexpInverse, ModexpSqrt} from \\\"./ModExp.sol\\\";\\nimport {BNPairingPrecompileCostEstimator} from \\\"./BNPairingPrecompileCostEstimator.sol\\\";\\n\\nlibrary BLS {\\n    uint256 private constant N = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint256 private constant N_G2_X1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 private constant N_G2_X0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 private constant N_G2_Y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\\n    uint256 private constant N_G2_Y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\\n    uint256 private constant Z0 = 0x0000000000000000b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd;\\n    uint256 private constant Z1 = 0x000000000000000059e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe;\\n    uint256 private constant T24 = 0x1000000000000000000000000000000000000000000000000;\\n    uint256 private constant MASK24 = 0xffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    address private constant COST_ESTIMATOR_ADDRESS = 0x079d8077C465BD0BF0FC502aD2B846757e415661;\\n\\n    function verifySingle(\\n        uint256[2] memory signature,\\n        uint256[4] memory pubkey,\\n        uint256[2] memory message,\\n        uint256 precompileGasCost\\n    ) internal view returns (bool, bool) {\\n        uint256[12] memory input = [\\n            signature[0],\\n            signature[1],\\n            N_G2_X1,\\n            N_G2_X0,\\n            N_G2_Y1,\\n            N_G2_Y0,\\n            message[0],\\n            message[1],\\n            pubkey[1],\\n            pubkey[0],\\n            pubkey[3],\\n            pubkey[2]\\n        ];\\n        uint256[1] memory out;\\n        bool callSuccess;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            callSuccess := staticcall(precompileGasCost, 8, input, 384, out, 0x20)\\n        }\\n        if (!callSuccess) {\\n            return (false, false);\\n        }\\n        return (out[0] != 0, true);\\n    }\\n\\n    function verifyMultiple(uint256[2] memory signature, uint256[4][] memory pubkeys, uint256[2][] memory messages)\\n        internal\\n        view\\n        returns (bool checkResult, bool callSuccess)\\n    {\\n        uint256 size = pubkeys.length;\\n        require(size > 0, \\\"BLS: number of public key is zero\\\");\\n        require(size == messages.length, \\\"BLS: number of public keys and messages must be equal\\\");\\n        uint256 inputSize = (size + 1) * 6;\\n        uint256[] memory input = new uint256[](inputSize);\\n        input[0] = signature[0];\\n        input[1] = signature[1];\\n        input[2] = N_G2_X1;\\n        input[3] = N_G2_X0;\\n        input[4] = N_G2_Y1;\\n        input[5] = N_G2_Y0;\\n        for (uint256 i = 0; i < size; i++) {\\n            input[i * 6 + 6] = messages[i][0];\\n            input[i * 6 + 7] = messages[i][1];\\n            input[i * 6 + 8] = pubkeys[i][1];\\n            input[i * 6 + 9] = pubkeys[i][0];\\n            input[i * 6 + 10] = pubkeys[i][3];\\n            input[i * 6 + 11] = pubkeys[i][2];\\n        }\\n        uint256[1] memory out;\\n\\n        uint256 precompileGasCost = BNPairingPrecompileCostEstimator(COST_ESTIMATOR_ADDRESS).getGasCost(size + 1);\\n        assembly {\\n            callSuccess := staticcall(precompileGasCost, 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n        }\\n        if (!callSuccess) {\\n            return (false, false);\\n        }\\n        return (out[0] != 0, true);\\n    }\\n\\n    function hashToPoint(bytes32 domain, bytes memory message) internal view returns (uint256[2] memory) {\\n        uint256[2] memory u = hashToField(domain, message);\\n        uint256[2] memory p0 = mapToPoint(u[0]);\\n        uint256[2] memory p1 = mapToPoint(u[1]);\\n        uint256[4] memory bnAddInput;\\n        bnAddInput[0] = p0[0];\\n        bnAddInput[1] = p0[1];\\n        bnAddInput[2] = p1[0];\\n        bnAddInput[3] = p1[1];\\n        bool success;\\n\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, bnAddInput, 128, p0, 64)\\n            switch success\\n            case 0 { invalid() }\\n        }\\n        require(success, \\\"BLS: bn add call failed\\\");\\n        return p0;\\n    }\\n\\n    function mapToPoint(uint256 _x) internal pure returns (uint256[2] memory p) {\\n        require(_x < N, \\\"mapToPointFT: invalid field element\\\");\\n        uint256 x = _x;\\n\\n        (, bool decision) = sqrt(x);\\n\\n        uint256 a0 = mulmod(x, x, N);\\n        a0 = addmod(a0, 4, N);\\n        uint256 a1 = mulmod(x, Z0, N);\\n        uint256 a2 = mulmod(a1, a0, N);\\n        a2 = inverse(a2);\\n        a1 = mulmod(a1, a1, N);\\n        a1 = mulmod(a1, a2, N);\\n\\n        // x1\\n        a1 = mulmod(x, a1, N);\\n        x = addmod(Z1, N - a1, N);\\n        // check curve\\n        a1 = mulmod(x, x, N);\\n        a1 = mulmod(a1, x, N);\\n        a1 = addmod(a1, 3, N);\\n        bool found;\\n        (a1, found) = sqrt(a1);\\n        if (found) {\\n            if (!decision) {\\n                a1 = N - a1;\\n            }\\n            return [x, a1];\\n        }\\n\\n        // x2\\n        x = N - addmod(x, 1, N);\\n        // check curve\\n        a1 = mulmod(x, x, N);\\n        a1 = mulmod(a1, x, N);\\n        a1 = addmod(a1, 3, N);\\n        (a1, found) = sqrt(a1);\\n        if (found) {\\n            if (!decision) {\\n                a1 = N - a1;\\n            }\\n            return [x, a1];\\n        }\\n\\n        // x3\\n        x = mulmod(a0, a0, N);\\n        x = mulmod(x, x, N);\\n        x = mulmod(x, a2, N);\\n        x = mulmod(x, a2, N);\\n        x = addmod(x, 1, N);\\n        // must be on curve\\n        a1 = mulmod(x, x, N);\\n        a1 = mulmod(a1, x, N);\\n        a1 = addmod(a1, 3, N);\\n        (a1, found) = sqrt(a1);\\n        require(found, \\\"BLS: bad ft mapping implementation\\\");\\n        if (!decision) {\\n            a1 = N - a1;\\n        }\\n        return [x, a1];\\n    }\\n\\n    function isValidSignature(uint256[2] memory signature) internal pure returns (bool) {\\n        if ((signature[0] >= N) || (signature[1] >= N)) {\\n            return false;\\n        } else {\\n            return isOnCurveG1(signature);\\n        }\\n    }\\n\\n    function isOnCurveG1(uint256[2] memory point) internal pure returns (bool _isOnCurve) {\\n        assembly {\\n            let t0 := mload(point)\\n            let t1 := mload(add(point, 32))\\n            let t2 := mulmod(t0, t0, N)\\n            t2 := mulmod(t2, t0, N)\\n            t2 := addmod(t2, 3, N)\\n            t1 := mulmod(t1, t1, N)\\n            _isOnCurve := eq(t1, t2)\\n        }\\n    }\\n\\n    function isOnCurveG2(uint256[4] memory point) internal pure returns (bool _isOnCurve) {\\n        assembly {\\n            // x0, x1\\n            let t0 := mload(point)\\n            let t1 := mload(add(point, 32))\\n            // x0 ^ 2\\n            let t2 := mulmod(t0, t0, N)\\n            // x1 ^ 2\\n            let t3 := mulmod(t1, t1, N)\\n            // 3 * x0 ^ 2\\n            let t4 := add(add(t2, t2), t2)\\n            // 3 * x1 ^ 2\\n            let t5 := addmod(add(t3, t3), t3, N)\\n            // x0 * (x0 ^ 2 - 3 * x1 ^ 2)\\n            t2 := mulmod(add(t2, sub(N, t5)), t0, N)\\n            // x1 * (3 * x0 ^ 2 - x1 ^ 2)\\n            t3 := mulmod(add(t4, sub(N, t3)), t1, N)\\n\\n            // x ^ 3 + b\\n            t0 := addmod(t2, 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5, N)\\n            t1 := addmod(t3, 0x009713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2, N)\\n\\n            // y0, y1\\n            t2 := mload(add(point, 64))\\n            t3 := mload(add(point, 96))\\n\\n            t4 := mulmod(addmod(t2, t3, N), addmod(t2, sub(N, t3), N), N)\\n            t3 := mulmod(shl(1, t2), t3, N)\\n\\n            _isOnCurve := and(eq(t0, t4), eq(t1, t3))\\n        }\\n    }\\n\\n    function sqrt(uint256 xx) internal pure returns (uint256 x, bool hasRoot) {\\n        x = ModexpSqrt.run(xx);\\n        hasRoot = mulmod(x, x, N) == xx;\\n    }\\n\\n    function inverse(uint256 a) internal pure returns (uint256) {\\n        return ModexpInverse.run(a);\\n    }\\n\\n    function hashToField(bytes32 domain, bytes memory messages) internal pure returns (uint256[2] memory) {\\n        bytes memory _msg = expandMsgTo96(domain, messages);\\n        uint256 u0;\\n        uint256 u1;\\n        uint256 a0;\\n        uint256 a1;\\n        assembly {\\n            let p := add(_msg, 24)\\n            u1 := and(mload(p), MASK24)\\n            p := add(_msg, 48)\\n            u0 := and(mload(p), MASK24)\\n            a0 := addmod(mulmod(u1, T24, N), u0, N)\\n            p := add(_msg, 72)\\n            u1 := and(mload(p), MASK24)\\n            p := add(_msg, 96)\\n            u0 := and(mload(p), MASK24)\\n            a1 := addmod(mulmod(u1, T24, N), u0, N)\\n        }\\n        return [a0, a1];\\n    }\\n\\n    function expandMsgTo96(bytes32 domain, bytes memory message) internal pure returns (bytes memory) {\\n        uint256 t0 = message.length;\\n        bytes memory msg0 = new bytes(32 + t0 + 64 + 4);\\n        bytes memory out = new bytes(96);\\n\\n        assembly {\\n            let p := add(msg0, 96)\\n            for { let z := 0 } lt(z, t0) { z := add(z, 32) } { mstore(add(p, z), mload(add(message, add(z, 32)))) }\\n            p := add(p, t0)\\n\\n            mstore8(p, 0)\\n            p := add(p, 1)\\n            mstore8(p, 96)\\n            p := add(p, 1)\\n            mstore8(p, 0)\\n            p := add(p, 1)\\n\\n            mstore(p, domain)\\n            p := add(p, 32)\\n            mstore8(p, 32)\\n        }\\n        bytes32 b0 = sha256(msg0);\\n        bytes32 bi;\\n        t0 = 32 + 34;\\n\\n        assembly {\\n            mstore(msg0, t0)\\n        }\\n        assembly {\\n            mstore(add(msg0, 32), b0)\\n            mstore8(add(msg0, 64), 1)\\n            mstore(add(msg0, 65), domain)\\n            mstore8(add(msg0, add(32, 65)), 32)\\n        }\\n\\n        bi = sha256(msg0);\\n\\n        assembly {\\n            mstore(add(out, 32), bi)\\n        }\\n        assembly {\\n            let t := xor(b0, bi)\\n            mstore(add(msg0, 32), t)\\n            mstore8(add(msg0, 64), 2)\\n            mstore(add(msg0, 65), domain)\\n            mstore8(add(msg0, add(32, 65)), 32)\\n        }\\n\\n        bi = sha256(msg0);\\n\\n        assembly {\\n            mstore(add(out, 64), bi)\\n        }\\n        assembly {\\n            let t := xor(b0, bi)\\n            mstore(add(msg0, 32), t)\\n            mstore8(add(msg0, 64), 3)\\n            mstore(add(msg0, 65), domain)\\n            mstore8(add(msg0, add(32, 65)), 32)\\n        }\\n\\n        bi = sha256(msg0);\\n\\n        assembly {\\n            mstore(add(out, 96), bi)\\n        }\\n\\n        return out;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/CheckContractAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract CheckContractAddress {\\n    /// @dev Returns a boolean indicating whether the given address is a contract or not.\\n    /// @param _addr The address to be checked.\\n    /// @return A boolean indicating whether the given address is a contract or not.\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/EnumerableSet.sol\": {\r\n      \"content\": \"/**\\n * ###############################################################\\n *         this is not exact replica of OpenZepplin implementation\\n *     ###############################################################\\n */\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity 0.8.19;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * ###################################################################################\\n     *         :::: this is the new method added on top of openzepplin implementation ::::\\n     *     ###################################################################################\\n     */\\n    function _clear(Set storage set) private returns (bool) {\\n        for (uint256 i = 0; i < set._values.length; i++) {\\n            delete set._indexes[set._values[i]];\\n        }\\n        delete set._values;\\n        return true;\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function clear(AddressSet storage set) internal returns (bool) {\\n        return _clear(set._inner);\\n    }\\n\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ISupraRouterContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ISupraRouterContract {\\n    function generateRequest(\\n        string memory _functionSig,\\n        uint8 _rngCount,\\n        uint256 _numConfirmations,\\n        uint256 _clientSeed,\\n        address _clientWalletAddress\\n    ) external returns (uint256);\\n\\n    function generateRequest(\\n        string memory _functionSig,\\n        uint8 _rngCount,\\n        uint256 _numConfirmations,\\n        address _clientWalletAddress\\n    ) external returns (uint256);\\n\\n    function rngCallback(\\n        uint256 nonce,\\n        uint256[] memory rngList,\\n        address _clientContractAddress,\\n        string memory _functionSig\\n    ) external returns (bool, bytes memory) ;\\n}\\n\"\r\n    },\r\n    \"src/IDepositContract.sol\": {\r\n      \"content\": \"// INSTRUCTIONS : Contains methods that will be used by the ROUTER and GENERATOR contracts.\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IDepositContract {\\n    function isContractEligible(address _clientAddress, address _contractAddress) external view returns (bool);\\n\\n    function isMinimumBalanceReached(address _clientAddress) external view returns (bool);\\n\\n    function checkMinBalance(address _clientAddress) external view returns (uint256);\\n\\n    function checkClientFund(address _clientAddress) external view returns (uint256);\\n\\n    function collectFund(address _clientAddress, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ModExp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary ModexpInverse {\\n    function run(uint256 t2) internal pure returns (uint256 t0) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let n := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\\n            t0 := mulmod(t2, t2, n)\\n            let t5 := mulmod(t0, t2, n)\\n            let t1 := mulmod(t5, t0, n)\\n            let t3 := mulmod(t5, t5, n)\\n            let t8 := mulmod(t1, t0, n)\\n            let t4 := mulmod(t3, t5, n)\\n            let t6 := mulmod(t3, t1, n)\\n            t0 := mulmod(t3, t3, n)\\n            let t7 := mulmod(t8, t3, n)\\n            t3 := mulmod(t4, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t7, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t7, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t7, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n        }\\n    }\\n}\\n\\nlibrary ModexpSqrt {\\n    function run(uint256 t6) internal pure returns (uint256 t0) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let n := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\\n\\n            t0 := mulmod(t6, t6, n)\\n            let t4 := mulmod(t0, t6, n)\\n            let t2 := mulmod(t4, t0, n)\\n            let t3 := mulmod(t4, t4, n)\\n            let t8 := mulmod(t2, t0, n)\\n            let t1 := mulmod(t3, t4, n)\\n            let t5 := mulmod(t3, t2, n)\\n            t0 := mulmod(t3, t3, n)\\n            let t7 := mulmod(t8, t3, n)\\n            t3 := mulmod(t1, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t7, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t7, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t8, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t7, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t6, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t5, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t4, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t3, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t2, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t0, n)\\n            t0 := mulmod(t0, t1, n)\\n            t0 := mulmod(t0, t0, n)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/BNPairingPrecompileCostEstimator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract BNPairingPrecompileCostEstimator {\\n    uint256 public baseCost;\\n    uint256 public perPairCost;\\n\\n    uint256 private constant G1_X = 1;\\n    uint256 private constant G1_Y = 2;\\n\\n    uint256 private constant G2_X0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 private constant G2_X1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 private constant G2_Y0 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 private constant G2_Y1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 private constant N_G2_Y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\\n    uint256 private constant N_G2_Y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\\n\\n    function run() external {\\n        _run();\\n    }\\n\\n    function getGasCost(uint256 pairCount) external view returns (uint256) {\\n        return pairCount * perPairCost + baseCost;\\n    }\\n\\n    function _run() internal {\\n        uint256 gasCost1Pair = _gasCost1Pair();\\n        uint256 gasCost2Pair = _gasCost2Pair();\\n        perPairCost = gasCost2Pair - gasCost1Pair;\\n        baseCost = gasCost1Pair - perPairCost;\\n    }\\n\\n    function _gasCost1Pair() internal view returns (uint256) {\\n        uint256[6] memory input = [G1_X, G1_Y, G2_X1, G2_X0, G2_Y1, G2_Y0];\\n        uint256[1] memory out;\\n        bool callSuccess;\\n        uint256 suppliedGas = gasleft() - 2000;\\n        require(gasleft() > 2000, \\\"BNPairingPrecompileCostEstimator: not enough gas, single pair\\\");\\n        uint256 gasT0 = gasleft();\\n\\n        assembly {\\n            callSuccess := staticcall(suppliedGas, 8, input, 192, out, 0x20)\\n        }\\n        uint256 gasCost = gasT0 - gasleft();\\n        require(callSuccess, \\\"BNPairingPrecompileCostEstimator: single pair call is failed\\\");\\n        require(out[0] == 0, \\\"BNPairingPrecompileCostEstimator: single pair call result must be 0\\\");\\n        return gasCost;\\n    }\\n\\n    function _gasCost2Pair() internal view returns (uint256) {\\n        uint256[12] memory input = [G1_X, G1_Y, G2_X1, G2_X0, G2_Y1, G2_Y0, G1_X, G1_Y, G2_X1, G2_X0, N_G2_Y1, N_G2_Y0];\\n        uint256[1] memory out;\\n        bool callSuccess;\\n        uint256 suppliedGas = gasleft() - 2000;\\n        require(gasleft() > 2000, \\\"BNPairingPrecompileCostEstimator: not enough gas, couple pair\\\");\\n        uint256 gasT0 = gasleft();\\n\\n        assembly {\\n            callSuccess := staticcall(suppliedGas, 8, input, 384, out, 0x20)\\n        }\\n        uint256 gasCost = gasT0 - gasleft();\\n        require(callSuccess, \\\"BNPairingPrecompileCostEstimator: couple pair call is failed\\\");\\n        require(out[0] == 1, \\\"BNPairingPrecompileCostEstimator: couple pair call result must be 1\\\");\\n        return gasCost;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"freeNodeWallet\",\"type\":\"address\"}],\"name\":\"FreeNodeRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"freeNodeWalletAddress\",\"type\":\"address\"}],\"name\":\"FreeNodeWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"freeNodeWallets\",\"type\":\"address[]\"}],\"name\":\"MultipleFreeNodesWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clientWalletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NonceProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"PublicKeyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"callerContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rngCount\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clientSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clientWalletAddress\",\"type\":\"address\"}],\"name\":\"RequestGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_freeNodeWallets\",\"type\":\"address[]\"}],\"name\":\"addFreeNodeToWhitelistBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_freeNodeWallet\",\"type\":\"address\"}],\"name\":\"addFreeNodeToWhitelistSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasAfterPaymentCalculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_bhash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"_signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint8\",\"name\":\"_rngCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_clientSeed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_clientWalletAddress\",\"type\":\"address\"}],\"name\":\"generateRngCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domain\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_supraRouterContract\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"_publicKey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"_instanceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blsPreCompileGasCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasAfterPaymentCalculation\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instanceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_freeNodeWallet\",\"type\":\"address\"}],\"name\":\"isFreeNodeWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllWhitelistedFreeNodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_freeNodeWallet\",\"type\":\"address\"}],\"name\":\"removeFreeNodeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_functionName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_rngCount\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_callerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_clientSeed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_clientWalletAddress\",\"type\":\"address\"}],\"name\":\"rngRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGas\",\"type\":\"uint256\"}],\"name\":\"setGasAfterPaymentCalculation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supraRouterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDepositSC\",\"type\":\"address\"}],\"name\":\"updateDepositContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_publicKey\",\"type\":\"uint256[4]\"}],\"name\":\"updatePublicKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "SupraGeneratorContractL1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d4e71854004555e1dfe0ac78f320734329397638eb6cf7fc70a3edbbb74029a"}