{"SourceCode": "# pragma version 0.3.10\r\n# pragma evm-version paris\r\n\"\"\"\r\n@title CurveAddressProvider\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2023 - all rights reserved\r\n@notice An entrypoint contract for Curve's various registries\r\n@dev Allows adding arbitrary IDs instead of sequential IDs.\r\n     Mapping:\r\n        0: Stableswap Custom Pool Registry\r\n        1: PoolInfo Getters\r\n        2: Exchange Router\r\n        3: Stableswap Metapool Factory\r\n        4: Fee Distributor\r\n        5: Cryptoswap Custom Pool Registry\r\n        6: Twocrypto Factory\r\n        7: Metaregistry\r\n        8: Stableswap crvUSD Factory\r\n        9: \r\n        10: \r\n        11: TricryptoNG Factory\r\n        12: StableswapNG Factory\r\n        13: TwocryptoNG Factory\r\n        14: Stableswap Calculations Contract\r\n        15: Cryptoswap calculations Contract\r\n        16: LLAMMA Factory crvUSD\r\n        17: LLAMMA Factory OneWayLending\r\n        18: Rate Provider\r\n        19: CRV Token\r\n        20: Gauge Factory\r\n        21: Ownership Admin\r\n        22: Parameter Admin\r\n        23: Emergency Admin\r\n        24: CurveDAO Vault\r\n\"\"\"\r\n\r\nevent NewEntry:\r\n    id: indexed(uint256)\r\n    addr: address\r\n    description: String[64]\r\n\r\nevent EntryModified:\r\n    id: indexed(uint256)\r\n    version: uint256\r\n\r\nevent EntryRemoved:\r\n    id: indexed(uint256)\r\n\r\nevent CommitNewAdmin:\r\n    admin: indexed(address)\r\n\r\nevent NewAdmin:\r\n    admin: indexed(address)\r\n\r\n\r\nstruct AddressInfo:\r\n    addr: address\r\n    description: String[256]\r\n    version: uint256\r\n    last_modified: uint256\r\n\r\n\r\nadmin: public(address)\r\nfuture_admin: public(address)\r\n\r\nnum_entries: public(uint256)\r\ncheck_id_exists: public(HashMap[uint256, bool])\r\n_ids: DynArray[uint256, 1000]\r\nget_id_info: public(HashMap[uint256, AddressInfo])\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.admin  = tx.origin\r\n\r\n\r\n# ------------------------------ View Methods --------------------------------\r\n\r\n@view\r\n@external\r\ndef ids() -> DynArray[uint256, 1000]:\r\n    \"\"\"\r\n    @notice returns IDs of active registry items in the AddressProvider.\r\n    @returns An array of IDs.\r\n    \"\"\"\r\n    _ids: DynArray[uint256, 1000] = []\r\n    for _id in self._ids:\r\n        if self.check_id_exists[_id]:\r\n            _ids.append(_id)\r\n\r\n    return _ids\r\n\r\n\r\n@view\r\n@external\r\ndef get_address(_id: uint256) -> address:\r\n    \"\"\"\r\n    @notice Fetch the address associated with `_id`\r\n    @dev Returns empty(address) if `_id` has not been defined, or has been unset\r\n    @param _id Identifier to fetch an address for\r\n    @return Current address associated to `_id`\r\n    \"\"\"\r\n    return self.get_id_info[_id].addr\r\n\r\n\r\n# -------------------------- State-Mutable Methods ---------------------------\r\n\r\n\r\n@internal\r\ndef _update_entry_metadata(_id: uint256):\r\n\r\n    version: uint256 = self.get_id_info[_id].version + 1\r\n    self.get_id_info[_id].version = version\r\n    self.get_id_info[_id].last_modified = block.timestamp\r\n\r\n    log EntryModified(_id, version)\r\n\r\n\r\n@internal\r\ndef _remove_id(_id: uint256) -> bool:\r\n    \r\n    assert self.check_id_exists[_id]  # dev: id does not exist\r\n\r\n    # Clear ID:\r\n    self.get_id_info[_id].addr = empty(address)\r\n    self.get_id_info[_id].last_modified = 0\r\n    self.get_id_info[_id].description = ''\r\n    self.get_id_info[_id].version = 0\r\n\r\n    self.check_id_exists[_id] = False\r\n\r\n    # Reduce num entries:\r\n    self.num_entries -= 1\r\n\r\n    # Emit 0 in version to notify removal of id:\r\n    log EntryRemoved(_id)\r\n\r\n    return True\r\n\r\n\r\n@internal\r\ndef _add_new_id(\r\n    _id: uint256,\r\n    _address: address,\r\n    _description: String[64]\r\n):\r\n\r\n    assert not self.check_id_exists[_id]  # dev: id exists\r\n\r\n    self.check_id_exists[_id] = True\r\n    self._ids.append(_id)\r\n\r\n    # Add entry:\r\n    self.get_id_info[_id] = AddressInfo(\r\n        {\r\n            addr: _address,\r\n            description: _description,\r\n            version: 1,\r\n            last_modified: block.timestamp,\r\n        }\r\n    )\r\n    self.num_entries += 1\r\n\r\n    log NewEntry(_id, _address, _description)\r\n\r\n\r\n@external\r\ndef add_new_id(\r\n    _id: uint256,\r\n    _address: address,\r\n    _description: String[64],\r\n):\r\n    \"\"\"\r\n    @notice Enter a new registry item\r\n    @param _id ID assigned to the address\r\n    @param _address Address assigned to the ID\r\n    @param _description Human-readable description of the ID\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    \r\n    self._add_new_id(_id, _address, _description)\r\n\r\n\r\n@external\r\ndef add_new_ids(\r\n    _ids: DynArray[uint256, 25],\r\n    _addresses: DynArray[address, 25],\r\n    _descriptions: DynArray[String[64], 25],\r\n):\r\n    \"\"\"\r\n    @notice Enter new registry items\r\n    @param _ids IDs assigned to addresses\r\n    @param _addresses Addresses assigned to corresponding IDs\r\n    @param _descriptions Human-readable description of each of the IDs\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n\r\n    # Check lengths\r\n    assert len(_ids) == len(_addresses) \r\n    assert len(_addresses) == len(_descriptions)\r\n\r\n    for i in range(len(_ids), bound=20):\r\n        self._add_new_id(\r\n            _ids[i], \r\n            _addresses[i], \r\n            _descriptions[i]\r\n        )\r\n\r\n\r\n@external\r\ndef update_id(\r\n    _id: uint256,\r\n    _new_address: address,\r\n    _new_description: String[64],\r\n):\r\n    \"\"\"\r\n    @notice Update entries at an ID\r\n    @param _id Address assigned to the input _id\r\n    @param _new_address Address assigned to the _id\r\n    @param _new_description Human-readable description of the identifier\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert self.check_id_exists[_id]  # dev: id does not exist\r\n\r\n    # Update entry at _id:\r\n    self.get_id_info[_id].addr = _new_address\r\n    self.get_id_info[_id].description = _new_description\r\n\r\n    # Update metadata (version, update time):\r\n    self._update_entry_metadata(_id)\r\n\r\n\r\n@external\r\ndef update_address(_id: uint256, _address: address):\r\n    \"\"\"\r\n    @notice Set a new address for an existing identifier\r\n    @param _id Identifier to set the new address for\r\n    @param _address Address to set\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert self.check_id_exists[_id]  # dev: id does not exist\r\n\r\n    # Update address:\r\n    self.get_id_info[_id].addr = _address\r\n\r\n    # Update metadata (version, update time):\r\n    self._update_entry_metadata(_id)\r\n\r\n\r\n@external\r\ndef update_description(_id: uint256, _description: String[256]):\r\n    \"\"\"\r\n    @notice Update description for an existing _id\r\n    @param _id Identifier to set the new description for\r\n    @param _description New description to set\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    assert self.check_id_exists[_id]  # dev: id does not exist\r\n\r\n    # Update description:\r\n    self.get_id_info[_id].description = _description\r\n\r\n    # Update metadata (version, update time):\r\n    self._update_entry_metadata(_id)\r\n\r\n\r\n@external\r\ndef remove_id(_id: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Unset an existing identifier\r\n    @param _id Identifier to unset\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n\r\n    return self._remove_id(_id)\r\n\r\n\r\n@external\r\ndef remove_ids(_ids: DynArray[uint256, 20]) -> bool:\r\n    \"\"\"\r\n    @notice Unset existing identifiers\r\n    @param _id DynArray of identifier to unset\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n\r\n    for _id in _ids:\r\n        assert self._remove_id(_id)\r\n\r\n    return True\r\n\r\n\r\n# ------------------------------ Admin Methods -------------------------------\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_new_admin: address) -> bool:\r\n    \"\"\"\r\n    @notice Initiate a transfer of contract ownership\r\n    @dev Once initiated, the actual transfer may be performed three days later\r\n    @param _new_admin Address of the new owner account\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    self.future_admin = _new_admin\r\n\r\n    log CommitNewAdmin(_new_admin)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Finalize a transfer of contract ownership\r\n    @dev May only be called by the next owner\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_admin  # dev: admin-only function\r\n\r\n    new_admin: address = self.future_admin\r\n    self.admin = new_admin\r\n\r\n    log NewAdmin(new_admin)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef revert_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Revert a transfer of contract ownership\r\n    @dev May only be called by the current owner\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin-only function\r\n    self.future_admin = empty(address)\r\n\r\n    return True", "ABI": "[{\"name\":\"NewEntry\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"addr\",\"type\":\"address\",\"indexed\":false},{\"name\":\"description\",\"type\":\"string\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"EntryModified\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"version\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"EntryRemoved\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewAdmin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewAdmin\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ids\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_address\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_new_id\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_description\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_new_ids\",\"inputs\":[{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_descriptions\",\"type\":\"string[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_id\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_new_address\",\"type\":\"address\"},{\"name\":\"_new_description\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_address\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_description\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_id\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_ids\",\"inputs\":[{\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_new_admin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"apply_transfer_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revert_transfer_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"num_entries\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"check_id_exists\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_id_info\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"uint256\"},{\"name\":\"last_modified\",\"type\":\"uint256\"}]}]}]", "ContractName": "CurveAddressProvider", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}