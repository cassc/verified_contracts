{"SourceCode": "// File: Mix/IUniswapV2Router.sol\r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\n \r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n \r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n \r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: Mix/IUniswapV2Factory.sol\r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n// File: Mix/SafeMath.sol\r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n \r\n}\r\n \r\n \r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n \r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n \r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n \r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n \r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n \r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n \r\n \r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n// File: Mix/IERC20.sol\r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n \r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n \r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n// File: Mix/IERC20Metadata.sol\r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\n \r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n \r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n \r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n// File: Mix/Context.sol\r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Mix/ERC20.sol\r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\n \r\n \r\n \r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n \r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n    uint256 private _totalSupply;\r\n \r\n    string private _name;\r\n    string private _symbol;\r\n \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n \r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n \r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n \r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n \r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n \r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n \r\n        emit Transfer(sender, recipient, amount);\r\n \r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n \r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n        _beforeTokenTransfer(address(0), account, amount);\r\n \r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n \r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n \r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n        _beforeTokenTransfer(account, address(0), amount);\r\n \r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n \r\n        emit Transfer(account, address(0), amount);\r\n \r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n \r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n// File: Mix/Ownable.sol\r\n \r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender);\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n}\r\n// File: Mix/Dividends.sol\r\n \r\n// \r\n//\r\n//\r\n \r\n \r\n \r\n \r\n \r\n \r\npragma solidity ^0.8.19;\r\n \r\ncontract DividendPayingToken is ERC20 {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n \r\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n  // For more discussion about choosing the value of `magnitude`,\r\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n  uint256 constant internal magnitude = 2**128;\r\n \r\n  uint256 internal magnifiedDividendPerShare;\r\n \r\n  // About dividendCorrection:\r\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n  //   `dividendOf(_user)` should not be changed,\r\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n \r\n  uint256 public totalDividendsDistributed;\r\n \r\n  event DividendsDistributed(address user, uint256 amount);\r\n  event DividendWithdrawn(address user, uint256 amount);\r\n \r\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\r\n \r\n  }\r\n \r\n  /// @dev Distributes dividends whenever ether is paid to this contract.\r\n  receive() external payable {\r\n    distributeDividends();\r\n  }\r\n \r\n  /// @notice Distributes ether to token holders as dividends.\r\n  /// @dev It reverts if the total supply of tokens is 0.\r\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\r\n  /// About undistributed ether:\r\n  ///   In each distribution, there is a small amount of ether not distributed,\r\n  ///     the magnified amount of which is\r\n  ///     `(msg.value * magnitude) % totalSupply()`.\r\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\r\n  ///     (de-magnified) in a distribution can be less than 1 wei.\r\n  ///   We can actually keep track of the undistributed ether in a distribution\r\n  ///     and try to distribute it in the next distribution,\r\n  ///     but keeping track of such data on-chain costs much more than\r\n  ///     the saved ether, so we don't do that.\r\n  function distributeDividends() public virtual payable {\r\n    require(totalSupply() > 0);\r\n \r\n    if (msg.value > 0) {\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (msg.value).mul(magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, msg.value);\r\n \r\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n    }\r\n  }\r\n \r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function withdrawDividend() public virtual {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n \r\n  /// @notice Withdraws the ether distributed to the sender.\r\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n \r\n      if(!success) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n        return 0;\r\n      }\r\n \r\n      return _withdrawableDividend;\r\n    }\r\n \r\n    return 0;\r\n  }\r\n \r\n \r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function dividendOf(address _owner) public view returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n \r\n  /// @notice View the amount of dividend in wei that an address can withdraw.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n  function withdrawableDividendOf(address _owner) public view returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n \r\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n  function withdrawnDividendOf(address _owner) public view returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n \r\n \r\n  /// @notice View the amount of dividend in wei that an address has earned in total.\r\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n  /// @param _owner The address of a token holder.\r\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n  function accumulativeDividendOf(address _owner) public view returns(uint256) {\r\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n  }\r\n \r\n  /// @dev Internal function that transfer tokens from one address to another.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param from The address to transfer from.\r\n  /// @param to The address to transfer to.\r\n  /// @param value The amount to be transferred.\r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n    require(false);\r\n \r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n  }\r\n \r\n  /// @dev Internal function that mints tokens to an account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account that will receive the created tokens.\r\n  /// @param value The amount that will be created.\r\n  function _mint(address account, uint256 value) internal override {\r\n    super._mint(account, value);\r\n \r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n \r\n  /// @dev Internal function that burns an amount of the token of a given account.\r\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n  /// @param account The account whose tokens will be burnt.\r\n  /// @param value The amount that will be burnt.\r\n  function _burn(address account, uint256 value) internal override {\r\n    super._burn(account, value);\r\n \r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n \r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n \r\n    if(newBalance > currentBalance) {\r\n      uint256 mintAmount = newBalance.sub(currentBalance);\r\n      _mint(account, mintAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n      _burn(account, burnAmount);\r\n    }\r\n  }\r\n}\r\n \r\n \r\ncontract MixerDividends is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n \r\n    IERC20 token;\r\n \r\n    mapping (address => bool) public excludedFromDividends;\r\n \r\n    address private deployer;\r\n    uint256 public closeTime;\r\n \r\n    uint256 public constant claimGracePeriod = 30 days;\r\n \r\n    event ExcludeFromDividends(address indexed account);\r\n \r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n \r\n    constructor() DividendPayingToken(\"MIXERBOT_Dividends\", \"MIXERBOT_Dividends\") {\r\n        deployer = tx.origin;\r\n        token = IERC20(msg.sender);\r\n    }\r\n \r\n    bool noWarning;\r\n \r\n    function _transfer(address, address, uint256) internal override {\r\n        require(false, \"No transfers allowed\");\r\n        noWarning = noWarning;\r\n    }\r\n \r\n    function withdrawDividend() public override {\r\n        require(false, \"withdrawDividend disabled. Use the 'claim' function on the main token contract.\");\r\n        noWarning = noWarning;\r\n    }\r\n \r\n    function claim(address account) external onlyOwner {\r\n        require(closeTime == 0 || block.timestamp < closeTime + claimGracePeriod, \"closed\");\r\n        _withdrawDividendOfUser(payable(account));\r\n    }\r\n \r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \texcludedFromDividends[account] = true;\r\n \r\n    \t_setBalance(account, 0);\r\n \r\n    \temit ExcludeFromDividends(account);\r\n    }\r\n \r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends) {\r\n        account = _account;\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n    }\r\n \r\n    function updateBalance(address payable account) external {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n \r\n        _setBalance(account, token.balanceOf(account));\r\n    }\r\n \r\n    //If the dividend contract needs to be updated, we can close\r\n    //this one, and let people claim for a month\r\n    //After that is over, we can take the remaining funds and\r\n    //use for the project\r\n    function close() external onlyOwner {\r\n        require(closeTime == 0, \"cannot take yet\");\r\n        closeTime = block.timestamp;\r\n    }\r\n \r\n    //Only allows funds to be taken if contract has been closed for a month\r\n    function takeFunds() external onlyOwner {\r\n        require(closeTime >= 0 && block.timestamp >= closeTime + claimGracePeriod, \"already closed\");\r\n        (bool success,) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n}\r\n// File: Mix/token.sol\r\n \r\npragma solidity ^0.8.19;\r\n \r\ncontract MixerBot is Ownable, ERC20 {\r\n    uint256 public maxWallet;\r\n    address public uniswapV2Pair;\r\n    IUniswapV2Router02 immutable router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n \r\n    MixerDividends public dividends;\r\n \r\n    uint256 SUPPLY = 10_000_000 * 10**18;\r\n \r\n    uint256 snipeFee = 40; \r\n    uint256 totalFee = 5;\r\n    uint256 botFee = 1; \r\n \r\n    bool private inSwap = false;\r\n    address public marketingWallet;\r\n    address public devWallet;\r\n    address public botWallet;\r\n \r\n    uint256 public openTradingBlock;\r\n \r\n    mapping (address => uint256) public receiveBlock;\r\n \r\n    uint256 public swapAt = SUPPLY / 1000; //0.1%\r\n \r\n    constructor() ERC20(\"MixerBot\", \"MXRBOT\") payable {\r\n        _mint(msg.sender, SUPPLY);\r\n \r\n        maxWallet = SUPPLY/100;\r\n        marketingWallet = msg.sender;\r\n        devWallet = msg.sender;\r\n        botWallet = 0x9B15710198Ef7915F5F03C714719A09b0DEdcF1b;\r\n \r\n        dividends = new MixerDividends();\r\n \r\n        dividends.excludeFromDividends(address(dividends));\r\n        dividends.excludeFromDividends(address(this));\r\n        dividends.excludeFromDividends(owner());\r\n    }\r\n \r\n    receive() external payable {}\r\n \r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n \r\n    function updateBotWallet(address _botWallet) external onlyOwner {\r\n        botWallet = _botWallet;\r\n    }\r\n \r\n    function updateDividends(address _dividends) external onlyOwner {\r\n        dividends = MixerDividends(payable(_dividends));\r\n \r\n        dividends.excludeFromDividends(address(dividends));\r\n        dividends.excludeFromDividends(address(this));\r\n        dividends.excludeFromDividends(owner());\r\n        dividends.excludeFromDividends(uniswapV2Pair);\r\n        dividends.excludeFromDividends(address(router));\r\n    }\r\n \r\n    function updateFee(uint256 _totalFee, uint256 _botFee) external onlyOwner {\r\n        require(_totalFee <= 5 && _botFee <= _totalFee);\r\n        totalFee = _totalFee;\r\n        botFee = _botFee;\r\n    }\r\n \r\n    function updateMaxHoldingPercent(uint256 percent) public onlyOwner {\r\n        require(percent >= 1 && percent <= 100, \"invalid percent\");\r\n        maxWallet = SUPPLY * percent / 100;\r\n    }\r\n \r\n    function updateSwapAt(uint256 value) external onlyOwner() {\r\n        require(value <= SUPPLY / 50);\r\n        swapAt = value;\r\n    }\r\n \r\n    function stats(address account) external view returns (uint256 withdrawableDividends, uint256 totalDividends) {\r\n        (,withdrawableDividends,totalDividends) = dividends.getAccount(account);\r\n    }\r\n \r\n    function claim() external {\r\n\t\tdividends.claim(msg.sender);\r\n    }\r\n \r\n    function openTrading() external onlyOwner {\r\n \r\n        address pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n        _approve(address(this), address(router), balanceOf(address(this)));\r\n        router.addLiquidityETH{\r\n            value: address(this).balance\r\n        } (\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n \r\n        uniswapV2Pair = pair;\r\n        openTradingBlock = block.number;\r\n        dividends.excludeFromDividends(address(router));\r\n        dividends.excludeFromDividends(pair);\r\n \r\n        updateMaxHoldingPercent(1);\r\n \r\n    }\r\n \r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        if(uniswapV2Pair == address(0)) {\r\n            require(from == address(this) || from == address(0) || from == owner() || to == owner(), \"Not started\");\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n \r\n        if(from == uniswapV2Pair && to != address(this) && to != owner() && to != address(router)) {\r\n            require(super.balanceOf(to) + amount <= maxWallet, \"max wallet\");\r\n        }\r\n \r\n        uint256 swapAmount = balanceOf(address(this));\r\n \r\n        if(swapAmount > swapAt) {\r\n            swapAmount = swapAt;\r\n        }\r\n \r\n        if(\r\n            swapAt > 0 &&\r\n            swapAmount == swapAt &&\r\n            !inSwap &&\r\n            from != uniswapV2Pair) {\r\n \r\n            inSwap = true;\r\n \r\n            swapTokensForEth(swapAmount);\r\n \r\n            uint256 balance = address(this).balance;\r\n \r\n            if(balance > 0) {\r\n                withdraw(balance);\r\n            }\r\n \r\n            inSwap = false;\r\n        }\r\n \r\n        uint256 fee;\r\n \r\n        if(block.number <= openTradingBlock + 4 && from == uniswapV2Pair) {\r\n            require(!isContract(to));\r\n            fee = snipeFee;\r\n        }\r\n        else if(totalFee > 0) {\r\n            fee = totalFee;\r\n        }\r\n \r\n        if(\r\n            fee > 0 &&\r\n            from != address(this) &&\r\n            from != owner() &&\r\n            from != address(router)\r\n        ) {\r\n            uint256 feeTokens = amount * fee / 100;\r\n            amount -= feeTokens;\r\n \r\n            super._transfer(from, address(this), feeTokens);\r\n        }\r\n \r\n        super._transfer(from, to, amount);\r\n \r\n        dividends.updateBalance(payable(from));\r\n        dividends.updateBalance(payable(to));\r\n    }\r\n \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function sendFunds(address user, uint256 value) private {\r\n        if(value > 0) {\r\n            (bool success,) = user.call{value: value}(\"\");\r\n            success;\r\n        }\r\n    }\r\n \r\n    function withdraw(uint256 amount) private {\r\n        uint256 botShare = totalFee > 0 ? botFee * 10000 / totalFee : 0;\r\n \r\n        uint256 toBot = amount * botShare / 10000;\r\n        uint256 toMarketing = (amount - toBot) / 2;\r\n        uint256 toDev = toMarketing;\r\n \r\n        sendFunds(marketingWallet, toMarketing);\r\n        sendFunds(devWallet, toDev);\r\n        sendFunds(botWallet, toBot);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"contract MixerDividends\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botWallet\",\"type\":\"address\"}],\"name\":\"updateBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dividends\",\"type\":\"address\"}],\"name\":\"updateDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_botFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateMaxHoldingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSwapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MixerBot", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3018cac0ecd3e73b5b0766173b8d9c46b2de4f4c428a9923d8b2dc4bf7f75429"}