{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"undefined/TYPHOONSTAKING.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TYPHOONStaking is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    enum StakingTier {\\n        Flexible,\\n        LockedFirstTier,\\n        LockedSecondTier,\\n        LockedThirdTier\\n    }\\n\\n    struct StakingDetails {\\n        uint256 lockDuration;\\n        uint256 claimRewardsDuration;\\n        uint256 rewardsAPR;\\n        uint256 minStakeAmount;\\n    }\\n\\n    struct userStakingInfo {\\n        uint256 stakingTier;\\n        uint256 stakingIndex;\\n        uint256 stakedAmount;\\n        uint256 stakingStartTime;\\n        uint256 stakingEndTime;\\n        uint256 lastClaimTime;\\n    }\\n\\n    struct Round {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 rewardAmount;\\n        uint256 totalTickets;\\n        uint256 totalParticipants;\\n        address[] participantList;\\n        address[] winners;\\n        bool isStarted;\\n        bool isEnded;\\n    }\\n\\n    struct UserLotteryParams {\\n        uint256 tierOneTotalStaking;\\n        uint256 tierTwoTotalStaking;\\n        uint256 tierThreeTotalStaking;\\n        uint256 totalStaked;\\n        uint256 tickets;\\n    }\\n\\n    mapping(uint256 => Round) private lotteryRounds;\\n    mapping(address => UserLotteryParams) private userLotteryParams;\\n\\n    mapping(StakingTier => StakingDetails) private stakingTiers;\\n\\n    //user => tier => stakingIndex => amount\\n    mapping(address => mapping(StakingTier => userStakingInfo[]))\\n        private userStakes;\\n\\n    mapping(address => mapping(StakingTier => uint256))\\n        private userStakingInTier;\\n\\n    mapping(address => uint256) private userWholeStaking;\\n    mapping(address => mapping(StakingTier => uint256))\\n        private userTierClaimedRewards;\\n\\n    IERC20 public TYPHOONToken;\\n    uint256 public TYPHOONTotalSupply;\\n    uint256 public totalStaked;\\n    uint256 public currentRoundId = 1;\\n\\n    uint256[] public tierOneLimits = new uint256[](2);\\n    uint256[] public tierTwoLimits = new uint256[](2);\\n    uint256[] public tierThreeLimits = new uint256[](2);\\n\\n    uint256 public tierOneBaseTickets = 1;\\n    uint256 public tierTwoBaseTickets = 2;\\n    uint256 public tierThreeBaseTickets = 4;\\n\\n    event Staked(address indexed user, StakingTier tier, uint256 amount);\\n    event Unstaked(address indexed user, StakingTier tier, uint256 amount);\\n    event RewardsClaimed(\\n        address indexed user,\\n        StakingTier tier,\\n        uint256 amount\\n    );\\n    event StakingDetailsUpdated(\\n        StakingTier tier,\\n        uint256 newLockDuration,\\n        uint256 newAPY\\n    );\\n\\n    constructor(address _TYPHOONToken) Ownable(msg.sender) {\\n        TYPHOONToken = IERC20(_TYPHOONToken);\\n        TYPHOONTotalSupply = TYPHOONToken.totalSupply();\\n\\n        tierOneLimits[0] = (TYPHOONTotalSupply * 25) / 100000; //0.025 %\\n        tierOneLimits[1] = (TYPHOONTotalSupply * 5) / 10000; //0.05 %\\n        tierTwoLimits[0] = (TYPHOONTotalSupply * 1) / 1000; //0.1 %\\n        tierTwoLimits[1] = (TYPHOONTotalSupply * 25) / 10000; //0.25 %\\n        tierThreeLimits[0] = (TYPHOONTotalSupply * 5) / 1000; //0.5 %\\n        tierThreeLimits[1] = (TYPHOONTotalSupply * 1) / 100; //1 %\\n        stakingTiers[StakingTier.Flexible] = StakingDetails(\\n            0 days,\\n            24 hours,\\n            30,\\n            1 * 10**18\\n        );\\n        stakingTiers[StakingTier.LockedFirstTier] = StakingDetails(\\n            7 days,\\n            7 days,\\n            50,\\n            1 * 10**18\\n        );\\n        stakingTiers[StakingTier.LockedSecondTier] = StakingDetails(\\n            14 days,\\n            14 days,\\n            75,\\n            1 * 10**18\\n        );\\n        stakingTiers[StakingTier.LockedThirdTier] = StakingDetails(\\n            28 days,\\n            28 days,\\n            100,\\n            1 * 10**18\\n        );\\n    }\\n\\n    function getStakingDetails(StakingTier tier)\\n        external\\n        view\\n        returns (\\n            uint256 stakingDuration,\\n            uint256 claimRewardsCycle,\\n            uint256 rewardsAPR,\\n            uint256 minStakeAmount\\n        )\\n    {\\n        return (\\n            stakingTiers[tier].lockDuration,\\n            stakingTiers[tier].claimRewardsDuration,\\n            stakingTiers[tier].rewardsAPR,\\n            stakingTiers[tier].minStakeAmount\\n        );\\n    }\\n\\n    function getUserStake(StakingTier tier, address user)\\n        public\\n        view\\n        returns (userStakingInfo[] memory)\\n    {\\n        return userStakes[user][tier];\\n    }\\n\\n    function getStakeStartTime(\\n        StakingTier tier,\\n        address user,\\n        uint256 stakingIndex\\n    ) public view returns (uint256) {\\n        return userStakes[user][tier][stakingIndex].stakingStartTime;\\n    }\\n\\n    function getStakeEndTime(\\n        StakingTier tier,\\n        address user,\\n        uint256 stakingIndex\\n    ) public view returns (uint256) {\\n        return\\n            userStakes[user][tier][stakingIndex].stakingStartTime +\\n            stakingTiers[tier].lockDuration;\\n    }\\n\\n    function getStakeAmountAndTime(\\n        StakingTier tier,\\n        address user,\\n        uint256 stakingIndex\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 stakingStartTime,\\n            uint256 stakingEndTime,\\n            uint256 stakedAmount\\n        )\\n    {\\n        return (\\n            userStakes[user][tier][stakingIndex].stakingStartTime,\\n            userStakes[user][tier][stakingIndex].stakingStartTime +\\n                stakingTiers[tier].lockDuration,\\n            userStakes[user][tier][stakingIndex].stakedAmount\\n        );\\n    }\\n\\n    function getUserTierClaimedRewards(StakingTier tier, address user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return userTierClaimedRewards[user][tier];\\n    }\\n\\n    function getUserNoOfStakes(StakingTier tier, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return userStakes[user][tier].length;\\n    }\\n\\n    function getUserStakingInTier(address user, StakingTier tier)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return userStakingInTier[user][tier];\\n    }\\n\\n    function getUserWholeStaking(address user) public view returns (uint256) {\\n        return userWholeStaking[user];\\n    }\\n\\n    function setTYPHOONTokenAddress(address _TYPHOONToken) external onlyOwner {\\n        TYPHOONToken = IERC20(_TYPHOONToken);\\n        TYPHOONTotalSupply = TYPHOONToken.totalSupply();\\n    }\\n\\n    function updateStakingDetails(\\n        StakingTier tier,\\n        uint256 newLockDuration,\\n        uint256 newAPR\\n    ) public onlyOwner {\\n        StakingDetails storage details = stakingTiers[tier];\\n        details.lockDuration = newLockDuration;\\n        details.rewardsAPR = newAPR;\\n        emit StakingDetailsUpdated(tier, newLockDuration, newAPR);\\n    }\\n\\n    function getLOtteryRoundData(uint256 roundId)\\n        external\\n        view\\n        returns (Round memory)\\n    {\\n        return lotteryRounds[roundId];\\n    }\\n\\n    function getUserLotteryParams(address user)\\n        external\\n        view\\n        returns (UserLotteryParams memory)\\n    {\\n        return userLotteryParams[user];\\n    }\\n\\n    function stake(StakingTier tier, uint256 amount) external nonReentrant {\\n        require(\\n            stakingTiers[tier].claimRewardsDuration > 0,\\n            \\\"Invalid staking tier\\\"\\n        );\\n        require(\\n            amount >= stakingTiers[tier].minStakeAmount,\\n            \\\"Below minimum stake amount\\\"\\n        );\\n\\n        TYPHOONToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 stakingIndex = userStakes[msg.sender][tier].length;\\n        userStakingInfo memory stakeInfo = userStakingInfo({\\n            stakingTier: uint256(tier),\\n            stakingIndex: stakingIndex,\\n            stakedAmount: amount,\\n            stakingStartTime: block.timestamp,\\n            stakingEndTime: block.timestamp + stakingTiers[tier].lockDuration,\\n            lastClaimTime: block.timestamp\\n        });\\n\\n        if (\\n            block.timestamp > lotteryRounds[currentRoundId].endTime &&\\n            lotteryRounds[currentRoundId].isStarted\\n        ) {\\n            finalizeLotteryRound();\\n        } else if (\\n            !lotteryRounds[currentRoundId].isStarted &&\\n            !lotteryRounds[currentRoundId].isEnded\\n        ) {\\n            Round storage round = lotteryRounds[currentRoundId];\\n            round.startTime = block.timestamp;\\n            round.endTime = block.timestamp + 3 days;\\n            round.rewardAmount = 40000 * 10**18;\\n            round.isStarted = true;\\n        }\\n\\n        userStakes[msg.sender][tier].push(stakeInfo);\\n        userStakingInTier[msg.sender][tier] += amount;\\n        userWholeStaking[msg.sender] += amount;\\n        totalStaked += amount;\\n        addUserLotteryStakings(msg.sender, tier, amount);\\n\\n        emit Staked(msg.sender, tier, amount);\\n    }\\n\\n    function unstake(StakingTier tier, uint256 stakingIndex)\\n        external\\n        nonReentrant\\n    {\\n        require(\\n            stakingTiers[tier].claimRewardsDuration > 0,\\n            \\\"Invalid staking tier\\\"\\n        );\\n        require(\\n            userStakes[msg.sender][tier].length > stakingIndex,\\n            \\\"Invalid index\\\"\\n        );\\n        require(\\n            userStakes[msg.sender][tier][stakingIndex].stakedAmount > 0,\\n            \\\"No stake to unstake\\\"\\n        );\\n\\n        uint256 unlockTime = userStakes[msg.sender][tier][stakingIndex]\\n            .stakingStartTime + stakingTiers[tier].lockDuration;\\n        require(block.timestamp > unlockTime, \\\"Staking still locked\\\");\\n\\n        uint256 stakedAmount = userStakes[msg.sender][tier][stakingIndex]\\n            .stakedAmount;\\n\\n        uint256 rewards = calculateTierStakingIndexRewards(\\n            msg.sender,\\n            tier,\\n            stakingIndex\\n        );\\n        require(\\n            TYPHOONToken.balanceOf(address(this)) > stakedAmount + rewards,\\n            \\\"Staking contract balance is insufficient\\\"\\n        );\\n        if (rewards > 0) {\\n            userTierClaimedRewards[msg.sender][tier] += rewards;\\n            TYPHOONToken.safeTransfer(msg.sender, rewards);\\n        }\\n        userStakingInTier[msg.sender][tier] -= stakedAmount;\\n        userWholeStaking[msg.sender] -= stakedAmount;\\n        totalStaked -= stakedAmount;\\n        removeUserLotteryStakings(msg.sender, tier, stakedAmount);\\n        TYPHOONToken.safeTransfer(msg.sender, stakedAmount);\\n\\n        uint256 lastIndex = userStakes[msg.sender][tier].length - 1;\\n        if (stakingIndex != lastIndex) {\\n            userStakes[msg.sender][tier][stakingIndex] = userStakes[msg.sender][\\n                tier\\n            ][lastIndex];\\n            userStakes[msg.sender][tier][stakingIndex]\\n                .stakingIndex = stakingIndex;\\n            userStakes[msg.sender][tier].pop();\\n        } else {\\n            userStakes[msg.sender][tier].pop();\\n        }\\n\\n        emit Unstaked(msg.sender, tier, stakedAmount);\\n    }\\n\\n    function extecuteLottery() external onlyOwner {\\n        if (\\n            block.timestamp > lotteryRounds[currentRoundId].endTime &&\\n            lotteryRounds[currentRoundId].isStarted\\n        ) {\\n            finalizeLotteryRound();\\n        }\\n    }\\n\\n    function random(uint256 seed) private view returns (uint256) {\\n        require(seed != 0, \\\"Seed must be greater than 0\\\");\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(block.prevrandao, block.timestamp, seed)\\n                )\\n            ) % seed;\\n    }\\n\\n    function claimRewards(StakingTier tier) public nonReentrant {\\n        require(\\n            stakingTiers[tier].claimRewardsDuration > 0,\\n            \\\"Invalid staking tier\\\"\\n        );\\n\\n        require(\\n            userStakes[msg.sender][tier].length > 0,\\n            \\\"No stake to claim rewards\\\"\\n        );\\n        uint256 index = userStakes[msg.sender][tier][0].stakingIndex;\\n        require(\\n            block.timestamp >\\n                userStakes[msg.sender][tier][index].lastClaimTime +\\n                    stakingTiers[tier].claimRewardsDuration,\\n            \\\"Next claim time not reached\\\"\\n        );\\n        uint256 rewards = calculateAndUpdateTierRewards(tier, msg.sender);\\n        if (rewards > 0) {\\n            userTierClaimedRewards[msg.sender][tier] += rewards;\\n            TYPHOONToken.safeTransfer(msg.sender, rewards);\\n        }\\n\\n        emit RewardsClaimed(msg.sender, tier, rewards);\\n    }\\n\\n    function calculateRewards(StakingTier tier, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 stakingLength = getUserNoOfStakes(tier, user);\\n        uint256 claimableRewards;\\n        for (uint256 index = 0; index < stakingLength; index++) {\\n            claimableRewards += calculateTierStakingIndexRewards(\\n                user,\\n                tier,\\n                index\\n            );\\n        }\\n        return claimableRewards;\\n    }\\n\\n    function finalizeLotteryRound() private {\\n        lotteryRounds[currentRoundId].isEnded = true;\\n\\n        Round storage round = lotteryRounds[currentRoundId];\\n\\n        if (round.totalParticipants >= 10) {\\n            uint256 totalTickets = round.totalTickets;\\n            address[] memory winners = new address[](5);\\n            address[] memory alreadyPicked = new address[](5);\\n\\n            uint256 winnersCount = 0;\\n            while (winnersCount < 5) {\\n                uint256 winningTicket = random(totalTickets);\\n                uint256 count = 0;\\n\\n                for (uint256 j = 0; j < round.totalParticipants; j++) {\\n                    address participant = round.participantList[j];\\n                    count += userLotteryParams[participant].tickets;\\n\\n                    if (\\n                        count >= winningTicket &&\\n                        !isAlreadyPicked(\\n                            alreadyPicked,\\n                            participant,\\n                            winnersCount\\n                        )\\n                    ) {\\n                        winners[winnersCount] = participant;\\n                        alreadyPicked[winnersCount] = participant;\\n                        winnersCount++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            round.winners = winners;\\n\\n            for (uint256 i = 0; i < winnersCount; i++) {\\n                TYPHOONToken.transfer(winners[i], round.rewardAmount);\\n            }\\n        }\\n\\n        currentRoundId += 1;\\n        Round storage nextRound = lotteryRounds[currentRoundId];\\n        nextRound.startTime = block.timestamp;\\n        nextRound.endTime = block.timestamp + 3 days;\\n        nextRound.rewardAmount = 40000 * 10**18;\\n        nextRound.isStarted = true;\\n        nextRound.participantList = round.participantList;\\n    }\\n\\n    // Helper function to check if a participant has already been picked as a winner\\n    function isAlreadyPicked(\\n        address[] memory alreadyPicked,\\n        address participant,\\n        uint256 count\\n    ) private pure returns (bool) {\\n        for (uint256 i = 0; i < count; i++) {\\n            if (alreadyPicked[i] == participant) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function removeFromParticipantList(address user, Round storage round)\\n        private\\n    {\\n        uint256 length = round.participantList.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (round.participantList[i] == user) {\\n                round.participantList[i] = round.participantList[length - 1];\\n                round.participantList.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function addUserLotteryStakings(\\n        address user,\\n        StakingTier tier,\\n        uint256 amount\\n    ) private {\\n        if (tier != StakingTier.Flexible) {\\n            UserLotteryParams storage params = userLotteryParams[user];\\n            Round storage round = lotteryRounds[currentRoundId];\\n            // Update total staked amount\\n            if (amount > 0) {\\n                params.totalStaked += amount;\\n            }\\n\\n            if (tier == StakingTier.LockedFirstTier) {\\n                params.tierOneTotalStaking += amount;\\n            } else if (tier == StakingTier.LockedSecondTier) {\\n                params.tierTwoTotalStaking += amount;\\n            } else if (tier == StakingTier.LockedThirdTier) {\\n                params.tierThreeTotalStaking += amount;\\n            }\\n\\n            uint256 previousTickets = params.tickets;\\n            uint256 newTickets = calculateLotteryTickets(params);\\n            round.totalTickets += newTickets - previousTickets;\\n\\n            uint256 difference = 0;\\n            if (newTickets > previousTickets) {\\n                difference = newTickets - previousTickets;\\n            }\\n            round.totalTickets += difference;\\n            if (previousTickets == 0 && newTickets > 0) {\\n                round.totalParticipants += 1;\\n                round.participantList.push(user);\\n            }\\n\\n            params.tickets = newTickets;\\n        }\\n    }\\n\\n    function removeUserLotteryStakings(\\n        address user,\\n        StakingTier tier,\\n        uint256 amount\\n    ) private {\\n        if (tier != StakingTier.Flexible) {\\n            UserLotteryParams storage params = userLotteryParams[user];\\n            Round storage round = lotteryRounds[currentRoundId];\\n\\n            // Update total staked amount\\n            if (amount > 0) {\\n                params.totalStaked -= amount;\\n            }\\n\\n            if (tier == StakingTier.LockedFirstTier) {\\n                params.tierOneTotalStaking -= amount;\\n            } else if (tier == StakingTier.LockedSecondTier) {\\n                params.tierTwoTotalStaking -= amount;\\n            } else if (tier == StakingTier.LockedThirdTier) {\\n                params.tierThreeTotalStaking -= amount;\\n            }\\n\\n            uint256 previousTickets = params.tickets;\\n            uint256 newTickets = calculateLotteryTickets(params);\\n            uint256 difference = 0;\\n            if (previousTickets > newTickets) {\\n                difference = previousTickets - newTickets;\\n            }\\n            round.totalTickets -= difference;\\n            if (previousTickets - newTickets == 0) {\\n                round.totalParticipants -= 1;\\n                removeFromParticipantList(user, round);\\n            }\\n\\n            params.tickets = newTickets;\\n        }\\n    }\\n\\n    function calculateLotteryTickets(UserLotteryParams storage params)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tickets = 0;\\n        uint256 tierPoints;\\n        if (\\n            params.tierThreeTotalStaking > params.tierOneTotalStaking &&\\n            params.tierThreeTotalStaking > params.tierTwoTotalStaking\\n        ) {\\n            tierPoints = tierThreeBaseTickets;\\n        }\\n        if (\\n            params.tierTwoTotalStaking > params.tierOneTotalStaking &&\\n            params.tierTwoTotalStaking > params.tierThreeTotalStaking\\n        ) {\\n            tierPoints = tierTwoBaseTickets;\\n        }\\n        if (\\n            params.tierOneTotalStaking > params.tierTwoTotalStaking &&\\n            params.tierOneTotalStaking > params.tierThreeTotalStaking\\n        ) {\\n            tierPoints = tierThreeBaseTickets;\\n        }\\n\\n        if (params.totalStaked >= tierThreeLimits[1]) {\\n            tickets += tierPoints * 13; //x13\\n        }\\n\\n        if (\\n            params.totalStaked >= tierThreeLimits[0] &&\\n            params.totalStaked < tierThreeLimits[1]\\n        ) {\\n            tickets += tierPoints * 10; //x10\\n        }\\n        if (\\n            params.totalStaked >= tierTwoLimits[1] &&\\n            params.totalStaked < tierThreeLimits[0]\\n        ) {\\n            tickets += tierPoints * 7; //x7\\n        }\\n\\n        if (\\n            params.totalStaked >= tierTwoLimits[0] &&\\n            params.totalStaked < tierTwoLimits[1]\\n        ) {\\n            tickets += tierPoints * 4; //x4\\n        }\\n\\n        if (\\n            params.totalStaked >= tierOneLimits[1] &&\\n            params.totalStaked < tierTwoLimits[0]\\n        ) {\\n            tickets += tierPoints * 2; //x2\\n        }\\n        if (\\n            params.totalStaked >= tierOneLimits[0] &&\\n            params.totalStaked < tierOneLimits[1]\\n        ) {\\n            tickets += tierPoints * 1; // x1\\n        }\\n\\n        return tickets;\\n    }\\n\\n    function calculateTierStakingIndexRewards(\\n        address user,\\n        StakingTier tier,\\n        uint256 stakingIndex\\n    ) public view returns (uint256) {\\n        uint256 minStakedTime = userStakes[user][tier][stakingIndex]\\n            .lastClaimTime + stakingTiers[tier].claimRewardsDuration;\\n        if (block.timestamp < minStakedTime) {\\n            return 0;\\n        }\\n        uint256 stakedTime = block.timestamp -\\n            userStakes[user][tier][stakingIndex].lastClaimTime;\\n        uint256 rewards = (userStakes[user][tier][stakingIndex].stakedAmount *\\n            stakingTiers[tier].rewardsAPR *\\n            stakedTime) / (31536000 * 100);\\n        return rewards;\\n    }\\n\\n    function calculateAndUpdateTierRewards(StakingTier tier, address user)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 stakingLength = getUserNoOfStakes(tier, user);\\n        uint256 claimableRewards;\\n        for (uint256 index = 0; index < stakingLength; index++) {\\n            uint256 rewards = calculateTierStakingIndexRewards(\\n                user,\\n                tier,\\n                index\\n            );\\n            if (rewards > 0) {\\n                userStakes[user][tier][index].lastClaimTime = block.timestamp;\\n            }\\n            claimableRewards += rewards;\\n        }\\n        return claimableRewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TYPHOONToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"StakingDetailsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TYPHOONToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPHOONTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"calculateTierStakingIndexRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extecuteLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getLOtteryRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"participantList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"}],\"internalType\":\"struct TYPHOONStaking.Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeAmountAndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"getStakingDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRewardsCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLotteryParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tierOneTotalStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierTwoTotalStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierThreeTotalStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"internalType\":\"struct TYPHOONStaking.UserLotteryParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNoOfStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TYPHOONStaking.userStakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"getUserStakingInTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTierClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserWholeStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TYPHOONToken\",\"type\":\"address\"}],\"name\":\"setTYPHOONTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierOneBaseTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierOneLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierThreeBaseTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierThreeLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierTwoBaseTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierTwoLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakingIndex\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TYPHOONStaking.StakingTier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newLockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAPR\",\"type\":\"uint256\"}],\"name\":\"updateStakingDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TYPHOONStaking", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000063fa3ea921b233940bc89639afd263c062523545", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}