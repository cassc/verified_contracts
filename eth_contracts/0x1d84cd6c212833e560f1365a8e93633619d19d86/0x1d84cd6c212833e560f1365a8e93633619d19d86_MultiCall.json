{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/utils/MutiCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ncontract MultiCall{\\r\\n    event fail(uint256 indexed index, address indexed sender,bytes result);\\r\\n    function callTarget(address target, uint256 _value, bytes calldata data) external returns (bool success, bytes memory result){\\r\\n         return target.call{value:_value}(data);\\r\\n    }\\r\\n    function staticCallTarget(address target,  bytes calldata data) external view returns (bool success, bytes memory result){\\r\\n         return target.staticcall(data);\\r\\n    }\\r\\n    function multiStaticCallAtomic(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata data\\r\\n    ) external view returns (bytes[] memory) {\\r\\n        require(targets.length == data.length, \\\"target length != data length\\\");\\r\\n\\r\\n        bytes[] memory results = new bytes[](data.length);\\r\\n\\r\\n        for (uint i; i < targets.length; i++) {\\r\\n            (bool success, bytes memory result) = targets[i].staticcall(data[i]);\\r\\n            require(success, \\\"call failed\\\");\\r\\n            results[i] = result;\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n    function multiStaticCall(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata data\\r\\n    ) external view returns (bytes[] memory) {\\r\\n        require(targets.length == data.length, \\\"target length != data length\\\");\\r\\n        bytes[] memory results = new bytes[](data.length);\\r\\n        for (uint i; i < targets.length; i++) {\\r\\n\\t        try this.staticCallTarget(targets[i], data[i])returns( bool,  bytes memory res\\r\\n            ){\\r\\n                results[i] = res;\\r\\n            }catch{\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n    \\r\\n    function multiCallAtomic(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata  data,\\r\\n        uint256[] calldata values\\r\\n    ) external  returns (bytes[] memory) {\\r\\n        require(targets.length == data.length, \\\"target length != data length\\\");\\r\\n        bytes[] memory results = new bytes[](data.length);\\r\\n        require(data.length==values.length,\\\"Must same length\\\");\\r\\n        for (uint i; i < targets.length; i++) {\\r\\n            (bool success, bytes memory result) = targets[i].call{value:values[i]}(data[i]);\\r\\n            require(success, \\\"call failed\\\");\\r\\n            results[i] = result;\\r\\n        }\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    function multiCall(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata data,\\r\\n        uint256[] calldata values\\r\\n    ) external  returns (bytes[] memory) {\\r\\n        require(targets.length == data.length, \\\"target length != data length\\\");\\r\\n        bytes[] memory results = new bytes[](data.length);\\r\\n        require(data.length==values.length,\\\"Must same length\\\");\\r\\n        for (uint i; i < targets.length; i++) {\\r\\n            bytes memory result;\\r\\n\\t        try this.callTarget(targets[i], values[i], data[i])returns( bool s,  bytes memory res\\r\\n            ){\\r\\n                if (!s){\\r\\n                    emit fail(i, msg.sender, result);\\r\\n                }\\r\\n                results[i] = res;\\r\\n\\r\\n            }catch{\\r\\n                emit fail(i, msg.sender, result);\\r\\n            }\\r\\n        }\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"fail\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiCall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiCallAtomic\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multiStaticCall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multiStaticCallAtomic\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"staticCallTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiCall", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}