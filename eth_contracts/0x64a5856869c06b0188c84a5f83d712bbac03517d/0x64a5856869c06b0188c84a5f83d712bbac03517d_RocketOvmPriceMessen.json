{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RocketOvmPriceMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@rocketpool/interface/RocketStorageInterface.sol\\\";\\nimport \\\"@rocketpool/interface/network/RocketNetworkBalancesInterface.sol\\\";\\nimport \\\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\\\";\\n\\nimport \\\"./RocketOvmPriceOracle.sol\\\";\\n\\n/// @author Kane Wallmann (Rocket Pool)\\n/// @notice Retrieves the rETH exchange rate from Rocket Pool and submits it to the oracle contract on OVM\\ncontract RocketOvmPriceMessenger {\\n    // Immutables\\n    ICrossDomainMessenger immutable ovmL1CrossDomainMessenger;\\n    RocketStorageInterface immutable rocketStorage;\\n    RocketOvmPriceOracle immutable rocketL2OvmPriceOracle;\\n    bytes32 immutable rocketNetworkBalancesKey;\\n\\n    /// @notice The most recently submitted rate\\n    uint256 lastRate;\\n\\n    constructor(RocketStorageInterface _rocketStorage, RocketOvmPriceOracle _rocketL2OvmPriceOracle, ICrossDomainMessenger _ovmL1CrossDomainMessenger) {\\n        rocketStorage = _rocketStorage;\\n        rocketL2OvmPriceOracle = _rocketL2OvmPriceOracle;\\n        ovmL1CrossDomainMessenger = _ovmL1CrossDomainMessenger;\\n        // Precompute storage key for RocketNetworkBalances address\\n        rocketNetworkBalancesKey = keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"rocketNetworkBalances\\\"));\\n    }\\n\\n    /// @notice Returns whether the rate has changed since it was last submitted\\n    function rateStale() external view returns (bool) {\\n        return rate() != lastRate;\\n    }\\n\\n    /// @notice Returns the calculated rETH exchange rate\\n    function rate() public view returns (uint256) {\\n        // Retrieve the inputs from RocketNetworkBalances and calculate the rate\\n        RocketNetworkBalancesInterface rocketNetworkBalances = RocketNetworkBalancesInterface(rocketStorage.getAddress(rocketNetworkBalancesKey));\\n        uint256 supply = rocketNetworkBalances.getTotalRETHSupply();\\n        if (supply == 0) {\\n            return 0;\\n        }\\n        return 1 ether * rocketNetworkBalances.getTotalETHBalance() / supply;\\n    }\\n\\n    /// @notice Submits the current rETH exchange rate to the OVM cross domain messenger contract\\n    function submitRate() external {\\n        lastRate = rate();\\n        // Send the cross chain message\\n        ovmL1CrossDomainMessenger.sendMessage(\\n            address(rocketL2OvmPriceOracle),\\n            abi.encodeWithSelector(\\n                rocketL2OvmPriceOracle.updateRate.selector,\\n                lastRate\\n            ),\\n            500000\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/rocketpool/contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"pragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"lib/rocketpool/contracts/interface/network/RocketNetworkBalancesInterface.sol\": {\r\n      \"content\": \"pragma solidity >0.5.0 <0.9.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketNetworkBalancesInterface {\\n    function getBalancesBlock() external view returns (uint256);\\n    function getLatestReportableBlock() external view returns (uint256);\\n    function getTotalETHBalance() external view returns (uint256);\\n    function getStakingETHBalance() external view returns (uint256);\\n    function getTotalRETHSupply() external view returns (uint256);\\n    function getETHUtilizationRate() external view returns (uint256);\\n    function submitBalances(uint256 _block, uint256 _total, uint256 _staking, uint256 _rethSupply) external;\\n    function executeUpdateBalances(uint256 _block, uint256 _totalEth, uint256 _stakingEth, uint256 _rethSupply) external;\\n}\\n\"\r\n    },\r\n    \"lib/optimism/packages/contracts/contracts/libraries/bridge/ICrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/RocketOvmPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\\\";\\n\\n/// @author Kane Wallmann (Rocket Pool)\\n/// @notice Receives updates from L1 on the canonical rETH exchange rate\\ncontract RocketOvmPriceOracle {\\n    // Events\\n    event RateUpdated(uint256 rate);\\n\\n    // Immutables\\n    ICrossDomainMessenger immutable ovmL2CrossDomainMessenger;\\n\\n    /// @notice The rETH exchange rate in the form of how much ETH 1 rETH is worth\\n    uint256 public rate;\\n\\n    /// @notice The timestamp of the block in which the rate was last updated\\n    uint256 public lastUpdated;\\n\\n    /// @notice Set to the contract on L1 that has permission to update the rate\\n    address public owner;\\n\\n    constructor(address _l2CrossDomainMessenger) {\\n        ovmL2CrossDomainMessenger = ICrossDomainMessenger(_l2CrossDomainMessenger);\\n        owner = msg.sender;\\n    }\\n\\n    /// @notice Hands ownership to the L1 price messenger contract\\n    function setOwner(address _newOwner) external {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        owner = _newOwner;\\n    }\\n\\n    /// @notice Called by the messenger contract on L1 to update the exchange rate\\n    function updateRate(uint256 _newRate) external {\\n        // Only calls originating from L1 owner can update the rate\\n        require(\\n            msg.sender == address(ovmL2CrossDomainMessenger)\\n            && ovmL2CrossDomainMessenger.xDomainMessageSender() == owner,\\n            \\\"Only owner\\\"\\n        );\\n        // Set rate and last updated timestamp\\n        rate = _newRate;\\n        lastUpdated = block.timestamp;\\n        // Emit event\\n        emit RateUpdated(_newRate);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@eth-optimism/=lib/optimism/packages/contracts/\",\r\n      \"@rocketpool/=lib/rocketpool/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"fx-portal/=lib/fx-portal/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"optimism/=lib/optimism/\",\r\n      \"rocketpool/=lib/rocketpool/\",\r\n      \"v2-testnet-contracts/=lib/v2-testnet-contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"_rocketStorage\",\"type\":\"address\"},{\"internalType\":\"contract RocketOvmPriceOracle\",\"name\":\"_rocketL2OvmPriceOracle\",\"type\":\"address\"},{\"internalType\":\"contract ICrossDomainMessenger\",\"name\":\"_ovmL1CrossDomainMessenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RocketOvmPriceMessenger", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa46000000000000000000000000658843bb859b7b85ceab5cf77167e3f0a78dfe7f000000000000000000000000866e82a600a1414e583f7f13623f1ac5d58b0afa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}