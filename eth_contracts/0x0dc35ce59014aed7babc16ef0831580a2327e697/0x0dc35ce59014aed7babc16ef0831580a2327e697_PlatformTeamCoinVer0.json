{"SourceCode": "pragma solidity ^0.4.11;\r\ncontract owned {\r\naddress public owner;\r\nconstructor () public {\r\nowner = msg.sender;\r\n}\r\nmodifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nowner = newOwner;\r\n}\r\n}\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\ncontract TokenERC20 {\r\n// Public variables of the token\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals = 8;\r\n// 18 decimals is the strongly suggested default, avoid changing it\r\nuint256 public totalSupply;\r\n// This creates an array with all balances\r\nmapping (address => uint256) public balanceOf;\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n// This generates a public event on the blockchain that will notify clients\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n// This generates a public event on the blockchain that will notify clients\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n// This notifies clients about the amount burnt\r\nevent Burn(address indexed from, uint256 value);\r\n/**\r\n* Constrctor function\r\n*\r\n* Initializes contract with initial supply tokens to the creator of the contract\r\n*/\r\nconstructor(\r\nuint256 initialSupply,\r\nstring tokenName,\r\nstring tokenSymbol\r\n) public {\r\ntotalSupply = initialSupply * 10 ** uint256(decimals);\r\n// Update total supply with the decimal amount\r\nbalanceOf[msg.sender] = totalSupply;\r\n// Give the creator all initial tokens\r\nname = tokenName;\r\n// Set the name for display purposes\r\nsymbol = tokenSymbol;\r\n// Set the symbol for display purposes\r\n}\r\n/**\r\n* Internal transfer, only can be called by this contract\r\n*/\r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\n// Prevent transfer to 0x0 address. Use burn() instead\r\nrequire(_to != 0x0);\r\n// Check if the sender has enough\r\nrequire(balanceOf[_from] >= _value);\r\n// Check for overflows\r\nrequire(balanceOf[_to] + _value > balanceOf[_to]);\r\n// Save this for an assertion in the future\r\nuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n// Subtract from the sender\r\nbalanceOf[_from] -= _value;\r\n// Add the same to the recipient\r\nbalanceOf[_to] += _value;\r\nemit Transfer(_from, _to, _value);\r\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\nassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n}\r\n/**\r\n* Transfer tokens\r\n*\r\n* Send `_value` tokens to `_to` from your account\r\n*\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n_transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n/**\r\n* Transfer tokens from other address\r\n*\r\n* Send `_value` tokens to `_to` in behalf of `_from`\r\n*\r\n* @param _from The address of the sender\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\nrequire(_value <= allowance[_from][msg.sender]);\r\n// Check allowance\r\nallowance[_from][msg.sender] -= _value;\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n/**\r\n* Set allowance for other address\r\n*\r\n* Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n*\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n*/\r\nfunction approve(address _spender, uint256 _value) public\r\nreturns (bool success) {\r\nallowance[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n/**\r\n* Set allowance for other address and notify\r\n*\r\n* Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n*\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n* @param _extraData some extra information to send to the approved contract\r\n*/\r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\npublic\r\nreturns (bool success) {\r\ntokenRecipient spender = tokenRecipient(_spender);\r\nif (approve(_spender, _value)) {\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\nreturn true;\r\n}\r\n}\r\n/**\r\n* Destroy tokens\r\n*\r\n* Remove `_value` tokens from the system irreversibly\r\n*\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burn(uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[msg.sender] >= _value);\r\n// Check if the sender has enough\r\nbalanceOf[msg.sender] -= _value;\r\n// Subtract from the sender\r\ntotalSupply -= _value;\r\n// Updates totalSupply\r\nemit Burn(msg.sender, _value);\r\nreturn true;\r\n}\r\n/**\r\n* Destroy tokens from other account\r\n*\r\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n*\r\n* @param _from the address of the sender\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[_from] >= _value);\r\n// Check if the targeted balance is enough\r\nrequire(_value <= allowance[_from][msg.sender]);\r\n// Check allowance\r\nbalanceOf[_from] -= _value;\r\n// Subtract from the targeted balance\r\nallowance[_from][msg.sender] -= _value;\r\n// Subtract from the sender's allowance\r\ntotalSupply -= _value;\r\n// Update totalSupply\r\nemit Burn(_from, _value);\r\nreturn true;\r\n}\r\n}\r\n/******************************************/\r\n/* PlatformTeamCoinVer01 TOKEN STARTS HERE \u00a0 \u00a0 \u00a0 */\r\n/******************************************/\r\ncontract PlatformTeamCoinVer01 is owned, TokenERC20 {\r\nuint256 public sellPrice;\r\nuint256 public buyPrice;\r\nmapping (address => bool) public frozenAccount;\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent FrozenFunds(address target, bool frozen);\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nconstructor(\r\nuint256 initialSupply,\r\nstring tokenName,\r\nstring tokenSymbol\r\n) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n/* Internal transfer, only can be called by this contract */\r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\nrequire (_to != 0x0);\r\n// Prevent transfer to 0x0 address. Use burn() instead\r\nrequire (balanceOf[_from] >= _value);\r\n// Check if the sender has enough\r\nrequire (balanceOf[_to] + _value >= balanceOf[_to]);\r\n// Check for overflows\r\nrequire(!frozenAccount[_from]);\r\n// Check if sender is frozen\r\nrequire(!frozenAccount[_to]);\r\n// Check if recipient is frozen\r\nbalanceOf[_from] -= _value;\r\n// Subtract from the sender\r\nbalanceOf[_to] += _value;\r\n// Add the same to the recipient\r\nemit Transfer(_from, _to, _value);\r\n}\r\n/// @notice Create `mintedAmount` tokens and send it to `target`\r\n/// @param target Address to receive the tokens\r\n/// @param mintedAmount the amount of tokens it will receive\r\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\nbalanceOf[target] += mintedAmount;\r\ntotalSupply += mintedAmount;\r\nemit Transfer(0, this, mintedAmount);\r\nemit Transfer(this, target, mintedAmount);\r\n}\r\n/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n/// @param target Address to be frozen\r\n/// @param freeze either to freeze it or not\r\nfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\nfrozenAccount[target] = freeze;\r\nemit FrozenFunds(target, freeze);\r\n}\r\n/// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n/// @param newSellPrice Price the users can sell to the contract\r\n/// @param newBuyPrice Price users can buy from the contract\r\nfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\nsellPrice = newSellPrice;\r\nbuyPrice = newBuyPrice;\r\n}\r\n/// @notice Buy tokens from contract by sending ether\r\nfunction buy() payable public {\r\nuint amount = msg.value / buyPrice;\r\n// calculates the amount\r\n_transfer(this, msg.sender, amount);\r\n// makes the transfers\r\n}\r\n/// @notice Sell `amount` tokens to contract\r\n/// @param amount amount of tokens to be sold\r\nfunction sell(uint256 amount) public {\r\naddress myAddress = this;\r\nrequire(myAddress.balance >= amount * sellPrice);\r\n// checks if the contract has enough ether to buy\r\n_transfer(msg.sender, this, amount);\r\n// makes the transfers\r\nmsg.sender.transfer(amount * sellPrice);\r\n// sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n}\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "PlatformTeamCoinVer01", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000010506c6174666f726d5465616d436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035054430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d2662fae580ff6db625aab8bf8e710786e20a947aaf842508d9398d540bf428b"}