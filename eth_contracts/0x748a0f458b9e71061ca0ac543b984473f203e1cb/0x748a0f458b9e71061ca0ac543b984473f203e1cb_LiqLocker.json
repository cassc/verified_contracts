{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/LiqLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\\\";\\nimport { AuraMath, AuraMath32, AuraMath112, AuraMath224 } from \\\"../utils/AuraMath.sol\\\";\\nimport { ILiqLocker } from \\\"../interfaces/ILiqLocker.sol\\\";\\nimport { IRewardStaking } from \\\"../interfaces/IRewardStaking.sol\\\";\\nimport { Permission } from \\\"../utils/Permission.sol\\\";\\n\\n/**\\n * @title   LiqLocker\\n * @author  ConvexFinance\\n * @notice  Effectively allows for rolling 16 week lockups of CVX, and provides balances available\\n *          at each epoch (1 week). Also receives cvxCrv from `CvxStakingProxy` and redistributes\\n *          to depositors.\\n * @dev     Individual and delegatee vote power lookups both use independent accounting mechanisms.\\n */\\ncontract LiqLocker is ReentrancyGuard, Ownable, Permission, ILiqLocker {\\n    using AuraMath for uint256;\\n    using AuraMath224 for uint224;\\n    using AuraMath112 for uint112;\\n    using AuraMath32 for uint32;\\n    using SafeERC20 for IERC20;\\n\\n    /* ==========     STRUCTS     ========== */\\n\\n    struct RewardData {\\n        /// Timestamp for current period finish\\n        uint32 periodFinish;\\n        /// Last time any user took action\\n        uint32 lastUpdateTime;\\n        /// RewardRate for the rest of the period\\n        uint96 rewardRate;\\n        /// Ever increasing rewardPerToken rate, based on % of total supply\\n        uint96 rewardPerTokenStored;\\n    }\\n    struct UserData {\\n        uint128 rewardPerTokenPaid;\\n        uint128 rewards;\\n    }\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    struct Balances {\\n        uint112 locked;\\n        uint32 nextUnlockIndex;\\n    }\\n    struct LockedBalance {\\n        uint112 amount;\\n        uint32 unlockTime;\\n    }\\n    struct Epoch {\\n        uint224 supply;\\n        uint32 date; //epoch start date\\n    }\\n    struct DelegateeCheckpoint {\\n        uint224 votes;\\n        uint32 epochStart;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // Rewards\\n    address[] public rewardTokens;\\n    mapping(address => uint256) public queuedRewards;\\n    uint256 public constant newRewardRatio = 830;\\n    //     Core reward data\\n    mapping(address => RewardData) public rewardData;\\n    //     Reward token -> distributor -> is approved to add rewards\\n    mapping(address => mapping(address => bool)) public rewardDistributors;\\n    //     User -> reward token -> amount\\n    mapping(address => mapping(address => UserData)) public userData;\\n    //     Duration that rewards are streamed over\\n    uint256 public constant rewardsDuration = 86400 * 7;\\n    //     Duration of lock/earned penalty period\\n    uint256 public constant lockDuration = rewardsDuration * 17;\\n\\n    // Balances\\n    //     Supplies and historic supply\\n    uint256 public lockedSupply;\\n    //     Epochs contains only the tokens that were locked at that epoch, not a cumulative supply\\n    Epoch[] public epochs;\\n    //     Mappings for balance data\\n    mapping(address => Balances) public balances;\\n    mapping(address => LockedBalance[]) public userLocks;\\n\\n    // Voting\\n    //     Stored delegations\\n    mapping(address => address) private _delegates;\\n    //     Checkpointed votes\\n    mapping(address => DelegateeCheckpoint[]) private _checkpointedVotes;\\n    //     Delegatee balances (user -> unlock timestamp -> amount)\\n    mapping(address => mapping(uint256 => uint256)) public delegateeUnlocks;\\n\\n    // Config\\n    //     Blacklisted smart contract interactions\\n    mapping(address => bool) public blacklist;\\n    //     Tokens\\n    IERC20 public immutable stakingToken;\\n    address public immutable cvxCrv;\\n    //     Denom for calcs\\n    uint256 public constant denominator = 10000;\\n    //     Staking cvxCrv\\n    address public immutable cvxcrvStaking;\\n    //     olit address\\n    address public immutable olit;\\n    //     Incentives\\n    uint256 public kickRewardPerEpoch = 100;\\n    uint256 public kickRewardEpochDelay = 3;\\n    //     Shutdown\\n    bool public isShutdown = false;\\n\\n    // Basic token data\\n    string private _name;\\n    string private _symbol;\\n    uint8 private immutable _decimals;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n    event DelegateCheckpointed(address indexed delegate);\\n\\n    event Recovered(address _token, uint256 _amount);\\n    event RewardPaid(address indexed _user, address indexed _rewardsToken, uint256 _reward);\\n    event Staked(address indexed _user, uint256 _lockedAmount, uint256 _unlockTime);\\n    event Withdrawn(address indexed _user, uint256 _amount, uint256 _expiryTime, bool _relocked);\\n    event KickReward(address indexed _user, address indexed _kicked, uint256 _reward);\\n    event RewardAdded(address indexed _token, uint256 _reward);\\n\\n    event BlacklistModified(address account, bool blacklisted);\\n    event KickIncentiveSet(uint256 rate, uint256 delay);\\n    event Shutdown();\\n\\n    /***************************************\\n                    CONSTRUCTOR\\n    ****************************************/\\n\\n    /**\\n     * @param _nameArg          Token name, simples\\n     * @param _symbolArg        Token symbol\\n     * @param _stakingToken     CVX (0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B)\\n     * @param _cvxCrv           cvxCRV (0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7)\\n     * @param _cvxCrvStaking    cvxCRV rewards (0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e)\\n     * @param _olit             olit token (0x627fee87d0D9D2c55098A06ac805Db8F98B158Aa)\\n     */\\n    constructor(\\n        string memory _nameArg,\\n        string memory _symbolArg,\\n        address _stakingToken,\\n        address _cvxCrv,\\n        address _cvxCrvStaking,\\n        address _olit\\n    ) Ownable() {\\n        _name = _nameArg;\\n        _symbol = _symbolArg;\\n        _decimals = 18;\\n\\n        stakingToken = IERC20(_stakingToken);\\n        cvxCrv = _cvxCrv;\\n        cvxcrvStaking = _cvxCrvStaking;\\n        olit = _olit;\\n\\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n        epochs.push(Epoch({ supply: 0, date: uint32(currentEpoch) }));\\n    }\\n\\n    /***************************************\\n                    MODIFIER\\n    ****************************************/\\n\\n    modifier updateReward(address _account) {\\n        {\\n            Balances storage userBalance = balances[_account];\\n            uint256 rewardTokensLength = rewardTokens.length;\\n            for (uint256 i = 0; i < rewardTokensLength; i++) {\\n                address token = rewardTokens[i];\\n                uint256 newRewardPerToken = _rewardPerToken(token);\\n                rewardData[token].rewardPerTokenStored = newRewardPerToken.to96();\\n                rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish).to32();\\n                if (_account != address(0)) {\\n                    userData[_account][token] = UserData({\\n                        rewardPerTokenPaid: newRewardPerToken.to128(),\\n                        rewards: _earned(_account, token, userBalance.locked).to128()\\n                    });\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier notBlacklisted(address _sender, address _receiver) {\\n        require(!blacklist[_sender], \\\"blacklisted\\\");\\n\\n        if (_sender != _receiver) {\\n            require(!blacklist[_receiver], \\\"blacklisted\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /***************************************\\n                    ADMIN\\n    ****************************************/\\n\\n    function modifyBlacklist(address _account, bool _blacklisted) external onlyOwner {\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(_account)\\n        }\\n        require(cs != 0, \\\"Must be contract\\\");\\n\\n        blacklist[_account] = _blacklisted;\\n        emit BlacklistModified(_account, _blacklisted);\\n    }\\n\\n    // Add a new reward token to be distributed to stakers\\n    function addReward(address _rewardsToken, address _distributor) external onlyOwner {\\n        require(rewardData[_rewardsToken].lastUpdateTime == 0, \\\"Reward already exists\\\");\\n        require(_rewardsToken != address(stakingToken), \\\"Cannot add StakingToken as reward\\\");\\n        require(rewardTokens.length < 5, \\\"Max rewards length\\\");\\n\\n        rewardTokens.push(_rewardsToken);\\n        rewardData[_rewardsToken].lastUpdateTime = uint32(block.timestamp);\\n        rewardData[_rewardsToken].periodFinish = uint32(block.timestamp);\\n        rewardDistributors[_rewardsToken][_distributor] = true;\\n    }\\n\\n    // Modify approval for an address to call notifyRewardAmount\\n    function approveRewardDistributor(\\n        address _rewardsToken,\\n        address _distributor,\\n        bool _approved\\n    ) external onlyOwner {\\n        require(rewardData[_rewardsToken].lastUpdateTime > 0, \\\"Reward does not exist\\\");\\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\\n    }\\n\\n    //set kick incentive\\n    function setKickIncentive(uint256 _rate, uint256 _delay) external onlyOwner {\\n        require(_rate <= 500, \\\"over max rate\\\"); //max 5% per epoch\\n        require(_delay >= 2, \\\"min delay\\\"); //minimum 2 epochs of grace\\n        kickRewardPerEpoch = _rate;\\n        kickRewardEpochDelay = _delay;\\n\\n        emit KickIncentiveSet(_rate, _delay);\\n    }\\n\\n    //shutdown the contract. unstake all tokens. release all locks\\n    function shutdown() external onlyOwner {\\n        isShutdown = true;\\n        emit Shutdown();\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        require(_tokenAddress != address(stakingToken), \\\"Cannot withdraw staking token\\\");\\n        require(rewardData[_tokenAddress].lastUpdateTime == 0, \\\"Cannot withdraw reward token\\\");\\n        IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    // Set approvals for staking cvx and cvxcrv\\n    function setApprovals() external {\\n        IERC20(cvxCrv).safeApprove(cvxcrvStaking, 0);\\n        IERC20(cvxCrv).safeApprove(cvxcrvStaking, type(uint256).max);\\n    }\\n\\n    /***************************************\\n                    ACTIONS\\n    ****************************************/\\n\\n    // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\\n    function lock(address _account, uint256 _amount) external nonReentrant updateReward(_account) {\\n        //pull tokens\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        //lock\\n        _lock(_account, _amount);\\n    }\\n\\n    //lock tokens\\n    function _lock(address _account, uint256 _amount) internal notBlacklisted(msg.sender, _account) {\\n        require(_amount > 0, \\\"Cannot stake 0\\\");\\n        require(!isShutdown, \\\"shutdown\\\");\\n\\n        Balances storage bal = balances[_account];\\n\\n        //must try check pointing epoch first\\n        _checkpointEpoch();\\n\\n        //add user balances\\n        uint112 lockAmount = _amount.to112();\\n        bal.locked = bal.locked.add(lockAmount);\\n\\n        //add to total supplies\\n        lockedSupply = lockedSupply.add(_amount);\\n\\n        //add user lock records or add to current\\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n        uint256 unlockTime = currentEpoch.add(lockDuration);\\n        uint256 idx = userLocks[_account].length;\\n        if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) {\\n            userLocks[_account].push(LockedBalance({ amount: lockAmount, unlockTime: uint32(unlockTime) }));\\n        } else {\\n            LockedBalance storage userL = userLocks[_account][idx - 1];\\n            userL.amount = userL.amount.add(lockAmount);\\n        }\\n\\n        address delegatee = delegates(_account);\\n        if (delegatee != address(0)) {\\n            delegateeUnlocks[delegatee][unlockTime] += lockAmount;\\n            _checkpointDelegate(delegatee, lockAmount, 0);\\n        }\\n\\n        //update epoch supply, epoch checkpointed above so safe to add to latest\\n        Epoch storage e = epochs[epochs.length - 1];\\n        e.supply = e.supply.add(lockAmount);\\n\\n        emit Staked(_account, lockAmount, unlockTime);\\n    }\\n\\n    // claim all pending rewards\\n    function getReward(address _account) external {\\n        getReward(_account, false);\\n    }\\n\\n    // Claim all pending rewards\\n    function getReward(address _account, bool _stake) public nonReentrant updateReward(_account) {\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            address _rewardsToken = rewardTokens[i];\\n            uint256 reward = userData[_account][_rewardsToken].rewards;\\n            if (reward > 0) {\\n                userData[_account][_rewardsToken].rewards = 0;\\n                if (_rewardsToken == cvxCrv && _stake && _account == msg.sender) {\\n                    IRewardStaking(cvxcrvStaking).stakeFor(_account, reward);\\n                } else {\\n                    IERC20(_rewardsToken).safeTransfer(_account, reward);\\n                }\\n                emit RewardPaid(_account, _rewardsToken, reward);\\n            }\\n        }\\n    }\\n\\n    function getReward(address _account, bool[] calldata _skipIdx) external nonReentrant updateReward(_account) {\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        require(_skipIdx.length == rewardTokensLength, \\\"!arr\\\");\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            if (_skipIdx[i]) continue;\\n            address _rewardsToken = rewardTokens[i];\\n            uint256 reward = userData[_account][_rewardsToken].rewards;\\n            if (reward > 0) {\\n                userData[_account][_rewardsToken].rewards = 0;\\n                IERC20(_rewardsToken).safeTransfer(_account, reward);\\n                emit RewardPaid(_account, _rewardsToken, reward);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sends oLIT to OptionsExerciser for converting it to LIT or liqLit, LIQ and extra rewards are sent to the user\\n     * @param _account      Account for which to claim\\n     * @return rewardAmount oLIT amount claimed as reward\\n     */\\n    function getRewardFor(address _account)\\n        external\\n        nonReentrant\\n        updateReward(_account)\\n        returns (uint256 rewardAmount)\\n    {\\n        require(hasPermission(_account, msg.sender), \\\"permission not granted\\\");\\n\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            address _rewardsToken = rewardTokens[i];\\n            uint256 reward = userData[_account][_rewardsToken].rewards;\\n            if (reward > 0) {\\n                userData[_account][_rewardsToken].rewards = 0;\\n                if (_rewardsToken == olit) {\\n                    IERC20(_rewardsToken).safeTransfer(msg.sender, reward);\\n                    rewardAmount = reward; // return oLIT amount claimed\\n                } else {\\n                    IERC20(_rewardsToken).safeTransfer(_account, reward);\\n                }\\n                emit RewardPaid(_account, _rewardsToken, reward);\\n            }\\n        }\\n    }\\n\\n    function checkpointEpoch() external {\\n        _checkpointEpoch();\\n    }\\n\\n    //insert a new epoch if needed. fill in any gaps\\n    function _checkpointEpoch() internal {\\n        uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n\\n        //first epoch add in constructor, no need to check 0 length\\n        //check to add\\n        uint256 nextEpochDate = uint256(epochs[epochs.length - 1].date);\\n        if (nextEpochDate < currentEpoch) {\\n            while (nextEpochDate != currentEpoch) {\\n                nextEpochDate = nextEpochDate.add(rewardsDuration);\\n                epochs.push(Epoch({ supply: 0, date: uint32(nextEpochDate) }));\\n            }\\n        }\\n    }\\n\\n    // Withdraw/relock all currently locked tokens where the unlock time has passed\\n    function processExpiredLocks(bool _relock) external nonReentrant {\\n        _processExpiredLocks(msg.sender, _relock, msg.sender, 0);\\n    }\\n\\n    function kickExpiredLocks(address _account) external nonReentrant {\\n        //allow kick after grace period of 'kickRewardEpochDelay'\\n        _processExpiredLocks(_account, false, msg.sender, rewardsDuration.mul(kickRewardEpochDelay));\\n    }\\n\\n    // Withdraw without checkpointing or accruing any rewards, providing system is shutdown\\n    function emergencyWithdraw() external nonReentrant {\\n        require(isShutdown, \\\"Must be shutdown\\\");\\n\\n        LockedBalance[] memory locks = userLocks[msg.sender];\\n        Balances storage userBalance = balances[msg.sender];\\n\\n        uint256 amt = userBalance.locked;\\n        require(amt > 0, \\\"Nothing locked\\\");\\n\\n        userBalance.locked = 0;\\n        userBalance.nextUnlockIndex = locks.length.to32();\\n        lockedSupply -= amt;\\n\\n        emit Withdrawn(msg.sender, amt, type(uint256).max, false);\\n\\n        stakingToken.safeTransfer(msg.sender, amt);\\n    }\\n\\n    // Withdraw all currently locked tokens where the unlock time has passed\\n    function _processExpiredLocks(\\n        address _account,\\n        bool _relock,\\n        address _rewardAddress,\\n        uint256 _checkDelay\\n    ) internal updateReward(_account) {\\n        LockedBalance[] storage locks = userLocks[_account];\\n        Balances storage userBalance = balances[_account];\\n        uint112 locked;\\n        uint256 length = locks.length;\\n        uint256 reward = 0;\\n        uint256 expiryTime = _checkDelay == 0 && _relock\\n            ? block.timestamp.add(rewardsDuration)\\n            : block.timestamp.sub(_checkDelay);\\n        require(length > 0, \\\"no locks\\\");\\n        // e.g. now = 16\\n        // if contract is shutdown OR latest lock unlock time (e.g. 17) <= now - (1)\\n        // e.g. 17 <= (16 + 1)\\n        if (isShutdown || locks[length - 1].unlockTime <= expiryTime) {\\n            //if time is beyond last lock, can just bundle everything together\\n            locked = userBalance.locked;\\n\\n            //dont delete, just set next index\\n            userBalance.nextUnlockIndex = length.to32();\\n\\n            //check for kick reward\\n            //this wont have the exact reward rate that you would get if looped through\\n            //but this section is supposed to be for quick and easy low gas processing of all locks\\n            //we'll assume that if the reward was good enough someone would have processed at an earlier epoch\\n            if (_checkDelay > 0) {\\n                uint256 currentEpoch = block.timestamp.sub(_checkDelay).div(rewardsDuration).mul(rewardsDuration);\\n                uint256 epochsover = currentEpoch.sub(uint256(locks[length - 1].unlockTime)).div(rewardsDuration);\\n                uint256 rRate = AuraMath.min(kickRewardPerEpoch.mul(epochsover + 1), denominator);\\n                reward = uint256(locked).mul(rRate).div(denominator);\\n            }\\n        } else {\\n            //use a processed index(nextUnlockIndex) to not loop as much\\n            //deleting does not change array length\\n            uint32 nextUnlockIndex = userBalance.nextUnlockIndex;\\n            for (uint256 i = nextUnlockIndex; i < length; i++) {\\n                //unlock time must be less or equal to time\\n                if (locks[i].unlockTime > expiryTime) break;\\n\\n                //add to cumulative amounts\\n                locked = locked.add(locks[i].amount);\\n\\n                //check for kick reward\\n                //each epoch over due increases reward\\n                if (_checkDelay > 0) {\\n                    uint256 currentEpoch = block.timestamp.sub(_checkDelay).div(rewardsDuration).mul(rewardsDuration);\\n                    uint256 epochsover = currentEpoch.sub(uint256(locks[i].unlockTime)).div(rewardsDuration);\\n                    uint256 rRate = AuraMath.min(kickRewardPerEpoch.mul(epochsover + 1), denominator);\\n                    reward = reward.add(uint256(locks[i].amount).mul(rRate).div(denominator));\\n                }\\n                //set next unlock index\\n                nextUnlockIndex++;\\n            }\\n            //update next unlock index\\n            userBalance.nextUnlockIndex = nextUnlockIndex;\\n        }\\n        require(locked > 0, \\\"no exp locks\\\");\\n\\n        //update user balances and total supplies\\n        userBalance.locked = userBalance.locked.sub(locked);\\n        lockedSupply = lockedSupply.sub(locked);\\n\\n        //checkpoint the delegatee\\n        _checkpointDelegate(delegates(_account), 0, 0);\\n\\n        emit Withdrawn(_account, locked, expiryTime, _relock);\\n\\n        //send process incentive\\n        if (reward > 0) {\\n            //reduce return amount by the kick reward\\n            locked = locked.sub(reward.to112());\\n\\n            //transfer reward\\n            stakingToken.safeTransfer(_rewardAddress, reward);\\n            emit KickReward(_rewardAddress, _account, reward);\\n        }\\n\\n        //relock or return to user\\n        if (_relock) {\\n            _lock(_account, locked);\\n        } else {\\n            stakingToken.safeTransfer(_account, locked);\\n        }\\n    }\\n\\n    /***************************************\\n            DELEGATION & VOTE BALANCE\\n    ****************************************/\\n\\n    /**\\n     * @dev Delegate votes from the sender to `newDelegatee`.\\n     */\\n    function delegate(address newDelegatee) external virtual nonReentrant {\\n        // Step 1: Get lock data\\n        LockedBalance[] storage locks = userLocks[msg.sender];\\n        uint256 len = locks.length;\\n        require(len > 0, \\\"Nothing to delegate\\\");\\n        require(newDelegatee != address(0), \\\"Must delegate to someone\\\");\\n\\n        // Step 2: Update delegatee storage\\n        address oldDelegatee = delegates(msg.sender);\\n        require(newDelegatee != oldDelegatee, \\\"Must choose new delegatee\\\");\\n        _delegates[msg.sender] = newDelegatee;\\n\\n        emit DelegateChanged(msg.sender, oldDelegatee, newDelegatee);\\n\\n        // Step 3: Move balances around\\n        //         Delegate for the upcoming epoch\\n        uint256 upcomingEpoch = block.timestamp.add(rewardsDuration).div(rewardsDuration).mul(rewardsDuration);\\n        uint256 i = len - 1;\\n        uint256 futureUnlocksSum = 0;\\n        LockedBalance memory currentLock = locks[i];\\n        // Step 3.1: Add future unlocks and sum balances\\n        while (currentLock.unlockTime > upcomingEpoch) {\\n            futureUnlocksSum += currentLock.amount;\\n\\n            if (oldDelegatee != address(0)) {\\n                delegateeUnlocks[oldDelegatee][currentLock.unlockTime] -= currentLock.amount;\\n            }\\n            delegateeUnlocks[newDelegatee][currentLock.unlockTime] += currentLock.amount;\\n\\n            if (i > 0) {\\n                i--;\\n                currentLock = locks[i];\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        // Step 3.2: Checkpoint old delegatee\\n        _checkpointDelegate(oldDelegatee, 0, futureUnlocksSum);\\n\\n        // Step 3.3: Checkpoint new delegatee\\n        _checkpointDelegate(newDelegatee, futureUnlocksSum, 0);\\n    }\\n\\n    function _checkpointDelegate(\\n        address _account,\\n        uint256 _upcomingAddition,\\n        uint256 _upcomingDeduction\\n    ) internal {\\n        // This would only skip on first checkpointing\\n        if (_account != address(0)) {\\n            uint256 upcomingEpoch = block.timestamp.add(rewardsDuration).div(rewardsDuration).mul(rewardsDuration);\\n            DelegateeCheckpoint[] storage ckpts = _checkpointedVotes[_account];\\n            if (ckpts.length > 0) {\\n                DelegateeCheckpoint memory prevCkpt = ckpts[ckpts.length - 1];\\n                // If there has already been a record for the upcoming epoch, no need to deduct the unlocks\\n                if (prevCkpt.epochStart == upcomingEpoch) {\\n                    ckpts[ckpts.length - 1] = DelegateeCheckpoint({\\n                        votes: (prevCkpt.votes + _upcomingAddition - _upcomingDeduction).to224(),\\n                        epochStart: upcomingEpoch.to32()\\n                    });\\n                }\\n                // else if it has been over 16 weeks since the previous checkpoint, all locks have since expired\\n                // e.g. week 1 + 17 <= 18\\n                else if (prevCkpt.epochStart + lockDuration <= upcomingEpoch) {\\n                    ckpts.push(\\n                        DelegateeCheckpoint({\\n                            votes: (_upcomingAddition - _upcomingDeduction).to224(),\\n                            epochStart: upcomingEpoch.to32()\\n                        })\\n                    );\\n                } else {\\n                    uint256 nextEpoch = upcomingEpoch;\\n                    uint256 unlocksSinceLatestCkpt = 0;\\n                    // Should be maximum 18 iterations\\n                    while (nextEpoch > prevCkpt.epochStart) {\\n                        unlocksSinceLatestCkpt += delegateeUnlocks[_account][nextEpoch];\\n                        nextEpoch -= rewardsDuration;\\n                    }\\n                    ckpts.push(\\n                        DelegateeCheckpoint({\\n                            votes: (prevCkpt.votes - unlocksSinceLatestCkpt + _upcomingAddition - _upcomingDeduction)\\n                                .to224(),\\n                            epochStart: upcomingEpoch.to32()\\n                        })\\n                    );\\n                }\\n            } else {\\n                ckpts.push(\\n                    DelegateeCheckpoint({\\n                        votes: (_upcomingAddition - _upcomingDeduction).to224(),\\n                        epochStart: upcomingEpoch.to32()\\n                    })\\n                );\\n            }\\n            emit DelegateCheckpointed(_account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) external view returns (uint256) {\\n        return getPastVotes(account, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) external view virtual returns (DelegateeCheckpoint memory) {\\n        return _checkpointedVotes[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) external view virtual returns (uint32) {\\n        return _checkpointedVotes[account].length.to32();\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     */\\n    function getPastVotes(address account, uint256 timestamp) public view returns (uint256 votes) {\\n        require(timestamp <= block.timestamp, \\\"ERC20Votes: block not yet mined\\\");\\n        uint256 epoch = timestamp.div(rewardsDuration).mul(rewardsDuration);\\n        DelegateeCheckpoint memory ckpt = _checkpointsLookup(_checkpointedVotes[account], epoch);\\n        votes = ckpt.votes;\\n        if (votes == 0 || ckpt.epochStart + lockDuration <= epoch) {\\n            return 0;\\n        }\\n        while (epoch > ckpt.epochStart) {\\n            votes -= delegateeUnlocks[account][epoch];\\n            epoch -= rewardsDuration;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `timestamp`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     */\\n    function getPastTotalSupply(uint256 timestamp) external view returns (uint256) {\\n        require(timestamp < block.timestamp, \\\"ERC20Votes: block not yet mined\\\");\\n        return totalSupplyAtEpoch(findEpochId(timestamp));\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     *      Copied from oz/ERC20Votes.sol\\n     */\\n    function _checkpointsLookup(DelegateeCheckpoint[] storage ckpts, uint256 epochStart)\\n        private\\n        view\\n        returns (DelegateeCheckpoint memory)\\n    {\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = AuraMath.average(low, high);\\n            if (ckpts[mid].epochStart > epochStart) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? DelegateeCheckpoint(0, 0) : ckpts[high - 1];\\n    }\\n\\n    /***************************************\\n                VIEWS - BALANCES\\n    ****************************************/\\n\\n    // Balance of an account which only includes properly locked tokens as of the most recent eligible epoch\\n    function balanceOf(address _user) external view returns (uint256 amount) {\\n        return balanceAtEpochOf(findEpochId(block.timestamp), _user);\\n    }\\n\\n    // Balance of an account which only includes properly locked tokens at the given epoch\\n    function balanceAtEpochOf(uint256 _epoch, address _user) public view returns (uint256 amount) {\\n        uint256 epochStart = uint256(epochs[0].date).add(uint256(_epoch).mul(rewardsDuration));\\n        require(epochStart < block.timestamp, \\\"Epoch is in the future\\\");\\n\\n        uint256 cutoffEpoch = epochStart.sub(lockDuration);\\n\\n        LockedBalance[] storage locks = userLocks[_user];\\n\\n        //need to add up since the range could be in the middle somewhere\\n        //traverse inversely to make more current queries more gas efficient\\n        uint256 locksLength = locks.length;\\n        for (uint256 i = locksLength; i > 0; i--) {\\n            uint256 lockEpoch = uint256(locks[i - 1].unlockTime).sub(lockDuration);\\n            //lock epoch must be less or equal to the epoch we're basing from.\\n            //also not include the current epoch\\n            if (lockEpoch < epochStart) {\\n                if (lockEpoch > cutoffEpoch) {\\n                    amount = amount.add(locks[i - 1].amount);\\n                } else {\\n                    //stop now as no futher checks matter\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return amount;\\n    }\\n\\n    // Information on a user's locked balances\\n    function lockedBalances(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 unlockable,\\n            uint256 locked,\\n            LockedBalance[] memory lockData\\n        )\\n    {\\n        LockedBalance[] storage locks = userLocks[_user];\\n        Balances storage userBalance = balances[_user];\\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\\n        uint256 idx;\\n        for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\\n            if (locks[i].unlockTime > block.timestamp) {\\n                if (idx == 0) {\\n                    lockData = new LockedBalance[](locks.length - i);\\n                }\\n                lockData[idx] = locks[i];\\n                idx++;\\n                locked = locked.add(locks[i].amount);\\n            } else {\\n                unlockable = unlockable.add(locks[i].amount);\\n            }\\n        }\\n        return (userBalance.locked, unlockable, locked, lockData);\\n    }\\n\\n    // Supply of all properly locked balances at most recent eligible epoch\\n    function totalSupply() external view returns (uint256 supply) {\\n        return totalSupplyAtEpoch(findEpochId(block.timestamp));\\n    }\\n\\n    // Supply of all properly locked balances at the given epoch\\n    function totalSupplyAtEpoch(uint256 _epoch) public view returns (uint256 supply) {\\n        uint256 epochStart = uint256(epochs[0].date).add(uint256(_epoch).mul(rewardsDuration));\\n        require(epochStart < block.timestamp, \\\"Epoch is in the future\\\");\\n\\n        uint256 cutoffEpoch = epochStart.sub(lockDuration);\\n        uint256 lastIndex = epochs.length - 1;\\n\\n        uint256 epochIndex = _epoch > lastIndex ? lastIndex : _epoch;\\n\\n        for (uint256 i = epochIndex + 1; i > 0; i--) {\\n            Epoch memory e = epochs[i - 1];\\n            if (e.date == epochStart) {\\n                continue;\\n            } else if (e.date <= cutoffEpoch) {\\n                break;\\n            } else {\\n                supply += e.supply;\\n            }\\n        }\\n    }\\n\\n    // Get an epoch index based on timestamp\\n    function findEpochId(uint256 _time) public view returns (uint256 epoch) {\\n        return _time.sub(epochs[0].date).div(rewardsDuration);\\n    }\\n\\n    /***************************************\\n                VIEWS - GENERAL\\n    ****************************************/\\n\\n    // Number of epochs\\n    function epochCount() external view returns (uint256) {\\n        return epochs.length;\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /***************************************\\n                VIEWS - REWARDS\\n    ****************************************/\\n\\n    // Address and claimable amount of all reward tokens for the given account\\n    function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards) {\\n        userRewards = new EarnedData[](rewardTokens.length);\\n        Balances storage userBalance = balances[_account];\\n        uint256 userRewardsLength = userRewards.length;\\n        for (uint256 i = 0; i < userRewardsLength; i++) {\\n            address token = rewardTokens[i];\\n            userRewards[i].token = token;\\n            userRewards[i].amount = _earned(_account, token, userBalance.locked);\\n        }\\n        return userRewards;\\n    }\\n\\n    function lastTimeRewardApplicable(address _rewardsToken) external view returns (uint256) {\\n        return _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish);\\n    }\\n\\n    function rewardPerToken(address _rewardsToken) external view returns (uint256) {\\n        return _rewardPerToken(_rewardsToken);\\n    }\\n\\n    // Claimable amount of a specific reward token for the given account\\n    // For compatibility with BaseRewardPool\\n    function earned(address _account, address token) external view returns (uint256 userRewards) {\\n        Balances storage userBalance = balances[_account];\\n        userRewards = _earned(_account, token, userBalance.locked);\\n    }\\n\\n    function _earned(\\n        address _user,\\n        address _rewardsToken,\\n        uint256 _balance\\n    ) internal view returns (uint256) {\\n        UserData memory data = userData[_user][_rewardsToken];\\n        return _balance.mul(_rewardPerToken(_rewardsToken).sub(data.rewardPerTokenPaid)).div(1e18).add(data.rewards);\\n    }\\n\\n    function _lastTimeRewardApplicable(uint256 _finishTime) internal view returns (uint256) {\\n        return AuraMath.min(block.timestamp, _finishTime);\\n    }\\n\\n    function _rewardPerToken(address _rewardsToken) internal view returns (uint256) {\\n        if (lockedSupply == 0) {\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\n        }\\n        return\\n            uint256(rewardData[_rewardsToken].rewardPerTokenStored).add(\\n                _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish)\\n                    .sub(rewardData[_rewardsToken].lastUpdateTime)\\n                    .mul(rewardData[_rewardsToken].rewardRate)\\n                    .mul(1e18)\\n                    .div(lockedSupply)\\n            );\\n    }\\n\\n    /***************************************\\n                REWARD FUNDING\\n    ****************************************/\\n\\n    /// @notice no pull method, rewards are first transferred and subsequently call queueNewRewards\\n    function queueNewRewards(address _rewardsToken, uint256 _rewards) external nonReentrant {\\n        require(rewardDistributors[_rewardsToken][msg.sender], \\\"!authorized\\\");\\n        require(_rewards > 0, \\\"No reward\\\");\\n\\n        RewardData storage rdata = rewardData[_rewardsToken];\\n\\n        _rewards = _rewards.add(queuedRewards[_rewardsToken]);\\n        require(_rewards < 1e25, \\\"!rewards\\\");\\n\\n        if (block.timestamp >= rdata.periodFinish) {\\n            _notifyReward(_rewardsToken, _rewards);\\n            queuedRewards[_rewardsToken] = 0;\\n            return;\\n        }\\n\\n        //et = now - (finish-duration)\\n        uint256 elapsedTime = block.timestamp.sub(rdata.periodFinish.sub(rewardsDuration.to32()));\\n        //current at now: rewardRate * elapsedTime\\n        uint256 currentAtNow = rdata.rewardRate * elapsedTime;\\n        uint256 queuedRatio = currentAtNow.mul(1000).div(_rewards);\\n        if (queuedRatio < newRewardRatio) {\\n            _notifyReward(_rewardsToken, _rewards);\\n            queuedRewards[_rewardsToken] = 0;\\n        } else {\\n            queuedRewards[_rewardsToken] = _rewards;\\n        }\\n    }\\n\\n    function _notifyReward(address _rewardsToken, uint256 _reward) internal updateReward(address(0)) {\\n        RewardData storage rdata = rewardData[_rewardsToken];\\n\\n        if (block.timestamp >= rdata.periodFinish) {\\n            rdata.rewardRate = _reward.div(rewardsDuration).to96();\\n        } else {\\n            uint256 remaining = uint256(rdata.periodFinish).sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rdata.rewardRate);\\n            rdata.rewardRate = _reward.add(leftover).div(rewardsDuration).to96();\\n        }\\n\\n        // Equivalent to 10 million tokens over a weeks duration\\n        require(rdata.rewardRate < 1e20, \\\"!rewardRate\\\");\\n        require(lockedSupply >= 1e20, \\\"!balance\\\");\\n\\n        rdata.lastUpdateTime = block.timestamp.to32();\\n        rdata.periodFinish = block.timestamp.add(rewardsDuration).to32();\\n\\n        emit RewardAdded(_rewardsToken, _reward);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AuraMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary AuraMath {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function to224(uint256 a) internal pure returns (uint224 c) {\\n        require(a <= type(uint224).max, \\\"AuraMath: uint224 Overflow\\\");\\n        c = uint224(a);\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"AuraMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to112(uint256 a) internal pure returns (uint112 c) {\\n        require(a <= type(uint112).max, \\\"AuraMath: uint112 Overflow\\\");\\n        c = uint112(a);\\n    }\\n\\n    function to96(uint256 a) internal pure returns (uint96 c) {\\n        require(a <= type(uint96).max, \\\"AuraMath: uint96 Overflow\\\");\\n        c = uint96(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"AuraMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary AuraMath32 {\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint112.\\nlibrary AuraMath112 {\\n    function add(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary AuraMath224 {\\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n        c = a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiqLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ILiqLocker {\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n\\n    function getRewardFor(address _account) external returns (uint256 rewardAmount);\\n\\n    function earned(address _account, address token) external view returns (uint256 userRewards);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IRewardStaking {\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function getReward(address _account) external;\\n\\n    function getReward(address _account, address _token) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function processIdleRewards() external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Permission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title   Permission\\n * @author  Liquis Finance\\n * @notice  A simple permissions system giving a `caller` the ability to act on behalf of `owner`\\n * @dev     Other than ERC20 Allowances, Permissions are boolean giving `caller` the ability\\n *          to call a specific contract function without further controls.\\n *          Permission are thought to allow users to give peripheral contracts permission to act\\n *          on their behalf in order to improve UX e.g. around claiming rewards.\\n */\\nabstract contract Permission {\\n    event ModifyPermission(address owner, address caller, bool grant);\\n\\n    /// @notice Specify whether `caller` can act on behalf of `owner`\\n    mapping(address => mapping(address => bool)) private _permitted;\\n\\n    /**\\n     * @notice Allow (or revoke allowance) `caller` to act on behalf of `msg.sender`\\n     * @param caller Address of the `caller`\\n     * @param permitted Allow (true) or revoke (false) permission\\n     */\\n    function modifyPermission(address caller, bool permitted) external {\\n        _permitted[msg.sender][caller] = permitted;\\n        emit ModifyPermission(msg.sender, caller, permitted);\\n    }\\n\\n    /**\\n     * @notice Checks permission of `caller` to act on behalf of `owner`\\n     * @param owner Address of the `owner`\\n     * @param caller Address of the `caller`\\n     * @return permission Whether `caller` has the permission\\n     */\\n    function hasPermission(address owner, address caller) public view returns (bool) {\\n        return owner == caller || _permitted[owner][caller];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameArg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolArg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxCrv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxCrvStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_olit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateCheckpointed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"KickIncentiveSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_kicked\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"KickReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"grant\",\"type\":\"bool\"}],\"name\":\"ModifyPermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_relocked\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceAtEpochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"locked\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"nextUnlockIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"}],\"internalType\":\"struct LiqLocker.DelegateeCheckpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiqLocker.EarnedData[]\",\"name\":\"userRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxcrvStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDelegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegateeUnlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"supply\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"date\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"findEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool[]\",\"name\":\"_skipIdx\",\"type\":\"bool[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"kickExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kickRewardEpochDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kickRewardPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LiqLocker.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blacklisted\",\"type\":\"bool\"}],\"name\":\"modifyBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permitted\",\"type\":\"bool\"}],\"name\":\"modifyPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_relock\",\"type\":\"bool\"}],\"name\":\"processExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"queueNewRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"queuedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"periodFinish\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"rewardRate\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setKickIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLocks\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiqLocker", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000d82fd4d6d62f89a1e50b1db69ad19932314aa40800000000000000000000000003c6f0ca0363652398abfb08d154f114e61c4ad80000000000000000000000007ea6930a9487ce8d039f7cc89432435e6d5acb23000000000000000000000000627fee87d0d9d2c55098a06ac805db8f98b158aa0000000000000000000000000000000000000000000000000000000000000012566f7465204c6f636b6564204c697175697300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005766c4c4951000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}