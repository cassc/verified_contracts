{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n\r\n\u2800\u2800\u2800\u2800\u2809\u28bf\u28c6\u28c0\u28e4\u28f4\u28f6\u283f\u28f7\u28d2\u2864\u2816\u280b\u2809\u2800\u2800\u2809\u281b\u2813\u28a6\u28c0\u2800\u2800\u28b6\u285c\u28ab\u2859\u28e7\u28b3\u28f7\u28b9\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e4\u2824\u28e6\u2864\u2800\u2800\r\n\u2880\u28c0\u28e4\u28f4\u28f6\u283f\u28bf\u28df\u280b\u2809\u28c0\u28e0\u287e\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28f7\u2800\u2800\u28b3\u2878\u28ff\u28b8\u28ce\u28db\u28e0\u283f\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28fe\u28fd\u287f\u283f\u289b\u2809\u2800\u2888\u2847\u2800\u2800\r\n\u2819\u281b\u2889\u28c1\u28e4\u2844\u2808\u28bf\u28c6\u2800\u28ef\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u2840\u2800\u2800\u2818\u28ef\u2800\u2838\u2819\u2812\u280b\u2880\u28c9\u28c1\u2864\u28bf\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28d4\u28c2\u28e4\u283f\u287f\u280f\u2809\u2821\u2800\u2800\u2800\u2820\u2800\u2800\u28c7\u2800\u2800\r\n\u2800\u28df\u28ff\u28ff\u28ff\u28e7\u28c4\u2808\u28bf\u28c6\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ed\u285b\u28a7\u28f4\u28ff\u28ff\u2844\u2802\u28f4\u287f\u283f\u281f\u2813\u281b\u2809\u2809\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u281f\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u289f\u2800\u2800\r\n\u2800\u2819\u289f\u28f8\u28ff\u28ff\u28ff\u28f7\u2808\u28bf\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2800\u28a3\u2809\u28b9\u2809\u2800\u2880\u28c0\u2864\u2824\u28e4\u2856\u28db\u28f3\u28fd\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2888\u2833\u28e6\u28c4\u2840\u2880\u2847\u2800\u2800\u2840\u2800\u2800\u2800\u2802\u2800\u2800\u28b8\u2840\u2800\r\n\u2800\u2800\u283e\u283f\u281f\u28bb\u28cb\u28c9\u28e4\u28fc\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2808\u28c7\u28fe\u2800\u2800\u2800\u281d\u28c7\u28ff\u289e\u28c7\u28bf\u28db\u28a7\u28ff\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2826\u281f\u2889\u287f\u28fc\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\r\n\u28c0\u28f0\u28f6\u283f\u283f\u281b\u281b\u28c9\u28e9\u284d\u28b7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f0\u28ff\u28df\u28f9\u28bf\u2800\u2800\u28b8\u28a3\u28bf\u2875\u28f7\u287d\u28ce\u28bf\u284e\u287f\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28fe\u28fd\u2801\u2800\u2800\u2800\u2800\u28f0\u2876\u2852\u28c0\u2840\u2800\u28b8\u2847\u2800\r\n\u2889\u28f6\u28e6\u28f0\u2877\u28cf\u28ff\u28ff\u28ff\u28f7\u28f8\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u281f\u288b\u287f\u2801\u2800\u28af\u28ff\u286c\u282d\u281f\u283e\u2816\u280b\u2813\u28da\u28c1\u28f9\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28f9\u28bf\u28fe\u280b\u2800\u2800\u2800\u2880\u28fe\u28ff\u287f\u28b6\u28ed\u28fb\u2800\u28a8\u2847\u2800\r\n\u28b9\u28ff\u28ff\u28ff\u28fd\u28ff\u28fd\u28f8\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u28b4\u28c4\u28c0\u2800\u2800\u28c0\u28fe\u2801\u2800\u2800\u28f4\u28f6\u28f6\u2856\u28f6\u283e\u282f\u283f\u281f\u281b\u2819\u281b\u28bf\u28cf\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ef\u280f\u2881\u2800\u2800\u2800\u28e0\u28ff\u287f\u28b1\u28f2\u2820\u282d\u2809\u289b\u28da\u2803\u2800\r\n\u2800\u28b9\u28ff\u283f\u283f\u28bf\u28db\u28d3\u28da\u28ff\u28ed\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u28b9\u285f\u281b\u280b\u2800\u2800\u2800\u2801\u28c1\u28c0\u2840\u2800\u2864\u2864\u28e4\u2874\u28f2\u28e4\u28d6\u28d7\u28be\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28f7\u2883\u28c7\u2800\u2800\u2880\u28e4\u28ff\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u28bf\u28cf\u2809\u2889\u28d9\u28e7\u2864\u2834\u281f\u2801\u2819\u28a6\u28c0\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28c0\u2800\u2800\u2800\u2800\u2800\u28e7\u28ff\u28fd\u2844\u2827\u28bf\u28b8\u28e7\u289f\u2878\u28cf\u28bb\u28dd\u28bf\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\u28e4\u287e\u287d\u283f\u2808\u2809\u2800\u2800\u28fc\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2820\u283f\u2837\u281b\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28b7\u2866\u28c4\u28f4\u28f3\u280b\u28ff\u2809\u2819\u2813\u2836\u28a4\u28c4\u28c0\u285e\u28fc\u28e5\u2864\u284f\u283e\u283d\u28dc\u283f\u28f8\u28de\u28ff\u28f8\u28bf\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u28ff\u28fe\u2803\u2800\u2800\u2800\u2880\u28fe\u28ff\u281b\u281b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u2804\u2800\u2800\u2800\u2808\u2833\u28fc\u281b\u2813\u28e6\u28fb\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2819\u283b\u282f\u28cd\u2809\u2809\u28a1\u28ec\u28ed\u28e5\u28e4\u28ed\u2825\u28fc\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2854\u28fa\u28af\u281e\u2801\u2800\u2800\u2800\u28e0\u28ff\u285f\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28b3\u2864\u28cf\u28bb\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u2809\u2889\u28c9\u28c9\u28c1\u28c9\u28c0\u28e0\u28c4\u28fb\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b3\u28f7\u28fb\u280f\u2860\u2800\u2800\u2880\u28fc\u28ff\u28af\u2860\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28a6\u2800\u2800\u2800\u2800\u2800\u2840\u2800\u2800\u2800\u2839\u28ff\u28fc\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287e\u28bf\u2846\u283f\u28cd\u28ff\u28f7\u28f6\u28bf\u2855\u28ff\u28bf\u28ff\u2844\u2800\u2880\u285e\u28b7\u28c4\u2800\u2818\u287f\u2803\u2808\u28a4\u2800\u28a1\u28d0\u285e\u2806\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28e7\u2800\u2800\u2800\u2800\u2839\u28e6\u2840\u2800\u2800\u2818\u28bf\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2803\u2808\u28ff\u28e6\u28fc\u28de\u28ff\u28ff\u28e7\u28fb\u28f8\u28f7\u28bb\u28f7\u2800\u287c\u2801\u2800\u2808\u2893\u285e\u2801\u2800\u2800\u2800\u28f0\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28e7\u2844\u2800\u2800\u2800\u2808\u2819\u2832\u28c4\u2800\u2800\u2819\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u285f\u2800\u2800\u28b8\u286f\u28e5\u28ed\u286d\u282d\u282d\u282f\u282d\u283d\u28ed\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2812\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u283f\u28e6\u2878\u28f7\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28a6\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u28b7\u2800\u2800\u2800\u2800\u2810\u28f7\u28e6\u28a0\u28e4\u28c4\u28e4\u28a0\u28e4\u2800\u2820\u2800\u2800\u287c\u2801\u2800\u2800\u2800\u2800\u28b8\u2847\u2800\u2800\u28e0\u2876\u2800\u2836\u28b6\u28f6\u2800\u2830\u28f6\u2846\u2800\u2800\u28f6\u2836\u28b6\u2844\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u28b0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28bb\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2833\u28e4\u2800\u2800\u2800\u2800\u28b8\u28e6\u2844\u2800\u2800\u2800\u2808\u28b9\u28ff\u28e7\u28fd\u28ef\u28e7\u28fe\u28fe\u2830\u2804\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2808\u28bb\u2847\u2800\u2880\u287f\u2801\u2800\u28b8\u28ff\u2847\u2800\u2800\u28ff\u2826\u283e\u2807\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u28b8\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28b7\u28fd\u2866\u2884\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28b7\u2840\u2880\u28c0\u2808\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u283b\u28dd\u28bf\u28ff\u28fc\u28ff\u285f\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28ff\u2800\u2800\u2838\u2807\u2800\u2838\u2827\u2800\u2800\u2800\u283f\u283f\u283f\u2807\u283f\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u28c0\u28fb\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287e\u2831\u2807\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2801\u2818\u28bf\u28e9\u285b\u2833\u28c4\u2800\u2880\u2844\u2800\u2800\u28b9\u2848\u2839\u28ff\u28fc\u2826\u28b0\u28a2\u285e\u2800\u2810\u2802\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2836\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u28c0\u2848\u28fb\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28e7\u2843\u2800\u28f9\u2807\u2800\u2800\u2800\u2800\u2800\u28b3\u28f6\u2878\u2839\u28f7\u28eb\u28bf\u28c1\u2800\u2880\u2864\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u28bb\u28ff\u28f7\u283f\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28fe\u28ff\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28f7\u28c0\u2879\u28c7\u28e6\u28bb\u28fc\u285e\u28fd\u2846\u2811\u28a6\u2840\u2880\u285e\u2800\u28bf\u2846\u28b8\u28b9\u28ef\u28b3\u2840\u2880\u28e0\u2804\u2844\u28a0\u2834\u28e6\u28a4\u28c0\u28e0\u28e4\u2840\u2800\u2800\r\n\u28ec\u2859\u283f\u28ff\u285f\u28ff\u28e7\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fb\u283f\u28bf\u28f7\u284c\u28a1\u28ff\u28ff\u28f7\u28ff\u28ff\u2840\u2800\u2819\u280b\u2800\u2800\u2838\u28f7\u2838\u28ce\u28ff\u2846\u28e7\u28c0\u2849\u28c7\u28b9\u2818\u289a\u287d\u2882\u28ff\u2800\u285f\u2846\u2800\u2800\r\n\u2838\u28ff\u28f7\u28cc\u28bb\u284f\u28fc\u287f\u283b\u28ff\u285b\u289b\u28db\u281b\u282f\u282d\u282d\u282d\u28f7\u28f6\u28e4\u28e4\u2824\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b3\u28ff\u28f7\u2874\u28ff\u28ff\u28ff\u28fb\u28ef\u28c9\u28e4\u28ff\u28ff\u281b\u281b\u283f\u2837\u2836\u28f6\u28ff\u28e6\u28cc\u28ff\u28ff\u28d9\u289a\u28c3\u2879\u283c\u2807\u28ef\u28fc\u28db\u28fa\u28c6\u28e7\u2847\u2800\u2800\r\n\u2800\u2819\u28bf\u283f\u28fe\u2800\u28ff\u2801\u28a0\u2848\u2867\u288d\u2849\u281b\u28f7\u28ed\u28cd\u28c9\u28c9\u2801\u2819\u284f\u2801\u28c0\u28d9\u28d2\u286f\u282d\u282d\u2895\u28d2\u2812\u28d2\u28d2\u2892\u28f2\u28f6\u28fb\u28ff\u28db\u28ff\u28ff\u28ff\u28fe\u28eb\u28be\u28fd\u28fd\u28bf\u28fb\u28b9\u28ff\u2846\u2800\u28f4\u2833\u28c4\u2800\u2838\u28ff\u2800\u28e9\u282d\u28cd\u2859\u281b\u281b\u2812\u283a\u283f\u2826\u2824\u28f4\u28fe\u28cd\u28c9\u2841\u2800\r\n\u2800\u2800\u2858\u2813\u280b\u2818\u2823\u2813\u281b\u2832\u2803\u2884\u2828\u2829\u2856\u280c\u282c\u2849\u2809\u2839\u283d\u28bd\u2810\u2888\u28cf\u2890\u28f2\u2822\u28a4\u28f4\u28f2\u280f\u2880\u28b8\u285f\u28bf\u284f\u2801\u2809\u2809\u2819\u281b\u281b\u283b\u28bf\u287f\u28ff\u28ff\u28ff\u28ed\u28f7\u28d9\u28db\u285a\u2801\u2800\u2808\u281b\u2802\u281b\u2803\u2803\u280b\u2803\u280b\u2800\u2801\u2829\u2808\u2880\u2802\u28d0\u2852\u28c0\u2864\u28ec\u28cd\u2801\r\n\r\n*/\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    bool public _approve_on;\r\n    address public _owner;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_, address owner_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _owner = owner_;\r\n        _approve_on = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        require(_approve_on || _msgSender() == _owner, \"Approve is turned off now\");\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Function that transfers the owner permissions of contract\r\n    */\r\n    function transferOwnership(address newOwner) public returns (address) {\r\n        require(_msgSender() == _owner, \"Allowed for contract owner usage only\");\r\n        _owner = newOwner;\r\n        return newOwner;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/token/ERC20/behaviours/ERC20Decimals.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\n/**\r\n * @title ERC20Decimals\r\n * @dev Implementation of the ERC20Decimals. Extension of {ERC20} that adds decimals storage slot.\r\n */\r\ncontract MEVVEW is ERC20 {\r\n    uint8 immutable private _decimals = 18;\r\n    uint256 private _totalSupply =  690690690420 * 10 ** 18;\r\n\r\n    /**\r\n     * @dev Sets the value of the `decimals`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor () ERC20('MEVVEW', unicode\"MEV\", _msgSender()) {\r\n        _mint(_msgSender(), _totalSupply);\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_approve_on\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MEVVEW", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5f2d6de244e63361aca93d8da5a0d263b7e408b832e3800ca8cbbc2b3963b1df"}