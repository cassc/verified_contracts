{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"modules/syrup-router/contracts/SyrupRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport { ERC20Helper } from \\\"../modules/erc20-helper/src/ERC20Helper.sol\\\";\\n\\nimport { ISyrupRouter } from \\\"./interfaces/ISyrupRouter.sol\\\";\\n\\nimport {\\n    IERC20Like,\\n    IPoolLike,\\n    IPoolManagerLike,\\n    IPoolPermissionManagerLike\\n} from \\\"./interfaces/Interfaces.sol\\\";\\n\\n/*\\n\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551  \u255a\u2588\u2588\u2554\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551         \u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d         \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\\n\\n*/\\n\\ncontract SyrupRouter is ISyrupRouter {\\n\\n    address public immutable override asset;\\n    address public immutable override pool;\\n    address public immutable override poolManager;\\n    address public immutable override poolPermissionManager;\\n\\n    mapping(address => uint256) public override nonces;\\n\\n    constructor(address pool_) {\\n        pool = pool_;\\n\\n        // Get the addresses of all the associated contracts.\\n        address asset_ = asset = IPoolLike(pool_).asset();\\n        address poolManager_ = poolManager = IPoolLike(pool_).manager();\\n\\n        poolPermissionManager = IPoolManagerLike(poolManager_).poolPermissionManager();\\n\\n        // Perform an infinite approval.\\n        require(ERC20Helper.approve(asset_, pool_, type(uint256).max), \\\"SR:C:APPROVE_FAIL\\\");\\n    }\\n\\n    /**************************************************************************************************************************************/\\n    /*** External Functions                                                                                                             ***/\\n    /**************************************************************************************************************************************/\\n\\n    function authorizeAndDeposit(\\n        uint256 bitmap_,\\n        uint256 deadline_,\\n        uint8   auth_v,\\n        bytes32 auth_r,\\n        bytes32 auth_s,\\n        uint256 amount_,\\n        bytes32 depositData_\\n    )\\n        external override returns (uint256 shares_)\\n    {\\n        _authorize(deadline_, bitmap_, auth_v, auth_r, auth_s);\\n\\n        shares_ = _deposit(msg.sender, amount_, depositData_);\\n    }\\n\\n    function authorizeAndDepositWithPermit(\\n        uint256 bitmap_,\\n        uint256 auth_deadline_,\\n        uint8   auth_v,\\n        bytes32 auth_r,\\n        bytes32 auth_s,\\n        uint256 amount_,\\n        bytes32 depositData_,\\n        uint256 permit_deadline,\\n        uint8   permit_v_,\\n        bytes32 permit_r_,\\n        bytes32 permit_s_\\n    )\\n        external override returns (uint256 shares_)\\n    {\\n        _authorize(auth_deadline_, bitmap_, auth_v, auth_r, auth_s);\\n        _permit(asset, permit_deadline, amount_, permit_v_, permit_r_, permit_s_);\\n\\n        shares_ = _deposit(msg.sender, amount_, depositData_);\\n    }\\n\\n    function deposit(uint256 amount_, bytes32 depositData_) external override returns (uint256 shares_) {\\n        shares_ = _deposit(msg.sender, amount_, depositData_);\\n    }\\n\\n    function depositWithPermit(\\n        uint256 amount_,\\n        uint256 deadline_,\\n        uint8   v_,\\n        bytes32 r_,\\n        bytes32 s_,\\n        bytes32 depositData_\\n    )\\n        external override returns (uint256 shares_)\\n    {\\n        _permit(asset, deadline_, amount_, v_, r_, s_);\\n\\n        shares_ = _deposit(msg.sender, amount_, depositData_);\\n    }\\n\\n    /**************************************************************************************************************************************/\\n    /*** Internal Functions                                                                                                             ***/\\n    /**************************************************************************************************************************************/\\n\\n    function _authorize(uint256 deadline_, uint256 bitmap_, uint8 v_, bytes32 r_, bytes32 s_) internal {\\n        require(deadline_ >= block.timestamp, \\\"SR:A:EXPIRED\\\");\\n\\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\\n        require(\\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\\n            (v_ == 27 || v_ == 28),\\n            \\\"SR:A:MALLEABLE\\\"\\n        );\\n\\n        bytes32 digest_ = keccak256(abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            block.chainid,  // Chain id + address(this) serves as domain separator to avoid replay attacks.\\n            address(this),\\n            msg.sender,\\n            nonces[msg.sender]++,\\n            bitmap_,\\n            deadline_\\n        ));\\n\\n        address recoveredAddress_ = ecrecover(digest_, v_, r_, s_);\\n\\n        IPoolPermissionManagerLike ppm_ = IPoolPermissionManagerLike(poolPermissionManager);\\n\\n        // Any valid permission admin can authorize the deposit.\\n        require(recoveredAddress_ != address(0) && ppm_.permissionAdmins(recoveredAddress_), \\\"SR:A:NOT_PERMISSION_ADMIN\\\");\\n\\n        address[] memory lender = new address[](1);\\n        uint256[] memory bitmap = new uint256[](1);\\n\\n        lender[0] = msg.sender;\\n        bitmap[0] = bitmap_;\\n\\n        ppm_.setLenderBitmaps(lender, bitmap);\\n    }\\n\\n    function _deposit(address owner_, uint256 amount_, bytes32 depositData_) internal returns (uint256 shares_) {\\n        // Check the owner has permission to deposit into the pool.\\n        require(\\n            IPoolPermissionManagerLike(poolPermissionManager).hasPermission(poolManager, owner_, \\\"P:deposit\\\"),\\n            \\\"SR:D:NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Pull assets from the owner to the router.\\n        require(ERC20Helper.transferFrom(asset, owner_, address(this), amount_), \\\"SR:D:TRANSFER_FROM_FAIL\\\");\\n\\n        // Deposit assets into the pool and receive the shares personally.\\n        address pool_ = pool;\\n\\n        shares_ = IPoolLike(pool_).deposit(amount_, address(this));\\n\\n        // Route shares back to the caller.\\n        require(ERC20Helper.transfer(pool_, owner_, shares_), \\\"SR:D:TRANSFER_FAIL\\\");\\n\\n        emit DepositData(owner_, amount_, depositData_);\\n    }\\n\\n    function _permit(address asset_, uint256 deadline_, uint256 amount_, uint8 v_, bytes32 r_, bytes32 s_) internal {\\n        uint256 allowance_ = IERC20Like(asset_).allowance(msg.sender, address(this));\\n\\n        if (allowance_ < amount_) {\\n            IERC20Like(asset_).permit(msg.sender, address(this), amount_, deadline_, v_, r_, s_);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/syrup-router/modules/erc20-helper/src/ERC20Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport { IERC20Like } from \\\"./interfaces/IERC20Like.sol\\\";\\n\\n/**\\n * @title Small Library to standardize erc20 token interactions.\\n */\\nlibrary ERC20Helper {\\n\\n    /**************************************************************************************************************************************/\\n    /*** Internal Functions                                                                                                             ***/\\n    /**************************************************************************************************************************************/\\n\\n    function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transfer.selector, to_, amount_));\\n    }\\n\\n    function transferFrom(address token_, address from_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transferFrom.selector, from_, to_, amount_));\\n    }\\n\\n    function approve(address token_, address spender_, uint256 amount_) internal returns (bool success_) {\\n        // If setting approval to zero fails, return false.\\n        if (!_call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, uint256(0)))) return false;\\n\\n        // If `amount_` is zero, return true as the previous step already did this.\\n        if (amount_ == uint256(0)) return true;\\n\\n        // Return the result of setting the approval to `amount_`.\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, amount_));\\n    }\\n\\n    function _call(address token_, bytes memory data_) private returns (bool success_) {\\n        if (token_.code.length == uint256(0)) return false;\\n\\n        bytes memory returnData;\\n        ( success_, returnData ) = token_.call(data_);\\n\\n        return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/syrup-router/contracts/interfaces/ISyrupRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface ISyrupRouter {\\n\\n    /**\\n     *  @dev   Optional Deposit Data for off-chain processing.\\n     *  @param owner       The receiver of the shares.\\n     *  @param amount      The amount of assets to deposit.\\n     *  @param depositData Optional deposit data.\\n     */\\n    event DepositData(address indexed owner, uint256 amount, bytes32 depositData);\\n\\n    /**\\n     *  @dev    The address of the underlying asset used by the ERC4626 Vault.\\n     *  @return asset The address of the underlying asset.\\n     */\\n    function asset() external view returns (address asset);\\n\\n    /**\\n     *  @dev    Authorizes and deposits assets into the Vault.\\n     *  @param  bitmap_      The bitmap of the permission.\\n     *  @param  deadline_    The timestamp after which the `authorize` signature is no longer valid.\\n     *  @param  auth_v       ECDSA signature v component.\\n     *  @param  auth_r       ECDSA signature r component.\\n     *  @param  auth_s       ECDSA signature s component.\\n     *  @param  amount_      The amount of assets to deposit.\\n     *  @param  depositData_ Optional deposit data.\\n     *  @return shares_      The amount of shares minted.\\n     */\\n    function authorizeAndDeposit(\\n        uint256 bitmap_,\\n        uint256 deadline_,\\n        uint8   auth_v,\\n        bytes32 auth_r,\\n        bytes32 auth_s,\\n        uint256 amount_,\\n        bytes32 depositData_\\n    ) external returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Authorizes and deposits assets into the Vault with a ERC-2612 `permit`.\\n     *  @param  bitmap_         The bitmap of the permission.\\n     *  @param  auth_deadline_  The timestamp after which the `authorize` signature is no longer valid.\\n     *  @param  auth_v          ECDSA signature v component of the authorization.\\n     *  @param  auth_r          ECDSA signature r component of the authorization.\\n     *  @param  auth_s          ECDSA signature s component of the authorization.\\n     *  @param  amount_         The amount of assets to deposit.\\n     *  @param  depositData_    Optional deposit data.\\n     *  @param  permit_deadline The timestamp after which the `permit` signature is no longer valid.\\n     *  @param  permit_v_       ECDSA signature v component of the token permit.\\n     *  @param  permit_r_       ECDSA signature r component of the token permit.\\n     *  @param  permit_s_       ECDSA signature s component of the token permit.\\n     *  @return shares_         The amount of shares minted.\\n     */\\n    function authorizeAndDepositWithPermit(\\n        uint256 bitmap_,\\n        uint256 auth_deadline_,\\n        uint8   auth_v,\\n        bytes32 auth_r,\\n        bytes32 auth_s,\\n        uint256 amount_,\\n        bytes32 depositData_,\\n        uint256 permit_deadline,\\n        uint8   permit_v_,\\n        bytes32 permit_r_,\\n        bytes32 permit_s_\\n    ) external returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Mints `shares` to sender by depositing `assets` into the Vault.\\n     *  @param  assets      The amount of assets to deposit.\\n     *  @param  depositData Optional deposit data.\\n     *  @return shares      The amount of shares minted.\\n     */\\n    function deposit(uint256 assets, bytes32 depositData) external returns (uint256 shares);\\n\\n    /**\\n     *  @dev    Does a ERC4626 `deposit` into a Maple Pool with a ERC-2612 `permit`.\\n     *  @param  amount     The amount of assets to deposit.\\n     *  @param  deadline   The timestamp after which the `permit` signature is no longer valid.\\n     *  @param  v          ECDSA signature v component.\\n     *  @param  r          ECDSA signature r component.\\n     *  @param  s          ECDSA signature s component.\\n     *  @param depositData Optional deposit data.\\n     *  @return shares     The amount of shares minted.\\n     */\\n    function depositWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s, bytes32 depositData)\\n        external returns (uint256 shares);\\n\\n    /**\\n      *  @dev    Returns the nonce for the given owner.\\n      *  @param  owner_ The address of the owner account.\\n      *  @return nonce_ The nonce for the given owner.\\n     */\\n    function nonces(address owner_) external view returns (uint256 nonce_);\\n\\n    /**\\n     *  @dev    The address of the ERC4626 Vault.\\n     *  @return pool The address of the ERC4626 Vault.\\n     */\\n    function pool() external view returns (address pool);\\n\\n    /**\\n     *  @dev    The address of the Pool Manager.\\n     *  @return poolManager The address of the Pool Manager.\\n     */\\n    function poolManager() external view returns (address poolManager);\\n\\n    /**\\n     *  @dev    The address of the Pool Permission Manager.\\n     *  @return poolPermissionManager The address of the Pool Permission Manager.\\n     */\\n    function poolPermissionManager() external view returns (address poolPermissionManager);\\n\\n}\\n\\n\"\r\n    },\r\n    \"modules/syrup-router/contracts/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IERC20Like {\\n\\n    function allowance(address owner, address spender) external view returns (uint256 allowance);\\n\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool success);\\n\\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool success);\\n\\n}\\n\\ninterface IPoolLike is IERC20Like {\\n\\n    function asset() external view returns (address asset);\\n\\n    function convertToExitAssets(uint256 shares) external view returns (uint256);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    function manager() external view returns (address manager);\\n\\n}\\n\\ninterface IPoolManagerLike {\\n\\n    function poolPermissionManager() external view returns (address poolPermissionManager);\\n\\n}\\n\\ninterface IPoolPermissionManagerLike {\\n\\n    function hasPermission(address poolManager, address lender, bytes32 functionId) external view returns (bool hasPermission);\\n\\n    function permissionAdmins(address account) external view returns (bool isAdmin);\\n\\n    function setLenderBitmaps(address[] calldata lenders, uint256[] calldata bitmaps) external;\\n\\n}\\n\"\r\n    },\r\n    \"modules/syrup-router/modules/erc20-helper/src/interfaces/IERC20Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\n/// @title Interface of the ERC20 standard as needed by ERC20Helper.\\ninterface IERC20Like {\\n\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"address-registry/=modules/address-registry/src/\",\r\n      \"contract-test-utils/=modules/erc20/modules/contract-test-utils/contracts/\",\r\n      \"ds-test/=modules/forge-std/lib/ds-test/src/\",\r\n      \"erc20-helper/=modules/erc20-helper/src/\",\r\n      \"erc20/=modules/erc20/\",\r\n      \"fixed-term-loan-manager/=modules/fixed-term-loan-manager/contracts/\",\r\n      \"fixed-term-loan/=modules/fixed-term-loan/contracts/\",\r\n      \"forge-std/=modules/forge-std/src/\",\r\n      \"globals/=modules/globals/contracts/\",\r\n      \"liquidations/=modules/liquidations/contracts/\",\r\n      \"maple-proxy-factory/=modules/open-term-loan/modules/maple-proxy-factory/\",\r\n      \"non-transparent-proxy/=modules/globals/modules/non-transparent-proxy/\",\r\n      \"ntp/=modules/pool-permission-manager/modules/ntp/\",\r\n      \"open-term-loan-manager/=modules/open-term-loan-manager/contracts/\",\r\n      \"open-term-loan/=modules/open-term-loan/contracts/\",\r\n      \"pool-permission-manager/=modules/pool-permission-manager/contracts/\",\r\n      \"pool/=modules/pool/contracts/\",\r\n      \"proxy-factory/=modules/open-term-loan/modules/maple-proxy-factory/modules/proxy-factory/\",\r\n      \"syrup-router/=modules/syrup-router/\",\r\n      \"withdrawal-manager-cyclical/=modules/withdrawal-manager-cyclical/contracts/\",\r\n      \"withdrawal-manager-queue/=modules/withdrawal-manager-queue/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositData\",\"type\":\"bytes32\"}],\"name\":\"DepositData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"auth_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"auth_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"auth_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositData_\",\"type\":\"bytes32\"}],\"name\":\"authorizeAndDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auth_deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"auth_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"auth_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"auth_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositData_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"permit_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"permit_v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"permit_r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"permit_s_\",\"type\":\"bytes32\"}],\"name\":\"authorizeAndDepositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositData_\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"depositData_\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolPermissionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SyrupRouter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000080ac24aa929eaf5013f6436cda2a7ba190f5cc0b", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}