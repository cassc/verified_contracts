{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SlotContractV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract SlotContractV2 is Ownable {\\n    IERC20 public bettingToken;\\n    IERC20 public WETH;\\n    uint256 public immutable minimumBet;\\n    uint256 public immutable revenueBps;\\n\\n    constructor(\\n        address _bettingToken,\\n        address _WETH,\\n        uint256 _minimumBet,\\n        uint256 _revenueBps,\\n        uint256 _playerPercentage,\\n        uint256 _holderPercentage\\n    ) {\\n        revenueBps = _revenueBps;\\n        bettingToken = IERC20(_bettingToken);\\n        WETH = IERC20(_WETH);\\n        minimumBet = _minimumBet;\\n        playerPercentage = _playerPercentage;\\n        holderPercentage = _holderPercentage;\\n    }\\n\\n    mapping(address => uint256) public claimedHolderShares;\\n    mapping(int64 => mapping(address => uint256)) public claimedPlayerShares;\\n    mapping(int64 => mapping(address => uint256)) public unclaimedPlayerShares;\\n    mapping(address => uint256) public unclaimedHolderRewards;\\n    uint256 public totalUnclaimedHolderRewards;\\n    uint256 public totalRevenuePlayers;\\n    uint256 public totalRevenueHolders;\\n    uint256 public totalPlayerShares;\\n    uint256 public playerPercentage;\\n    uint256 public holderPercentage;\\n\\n    struct Game {\\n        uint256 minBet;\\n        uint256[] betAmounts;\\n        address[] players;\\n        bool inProgress;\\n        uint16 loser;\\n    }\\n\\n    mapping(int64 => Game) public games;\\n    int64[] public activeTgGroups;\\n\\n    event Bet(int64 tgChatId, address player, uint256 amount);\\n    event Win(int64 tgChatId, address player, uint256 amount);\\n    event Loss(int64 tgChatId, address player, uint256 amount);\\n    event Revenue(int64 tgChatId, uint256 amount);\\n\\n    function isGameInProgress(int64 _tgChatId) public view returns (bool) {\\n        return games[_tgChatId].inProgress;\\n    }\\n\\n    function removeTgId(int64 _tgChatId) internal {\\n        for (uint256 i = 0; i < activeTgGroups.length; i++) {\\n            if (activeTgGroups[i] == _tgChatId) {\\n                activeTgGroups[i] = activeTgGroups[activeTgGroups.length - 1];\\n                activeTgGroups.pop();\\n            }\\n        }\\n    }\\n\\n    function updatePlayerPercentage(uint256 newPercentage) public onlyOwner {\\n        require(newPercentage <= 100, \\\"Percentage must be <= 100\\\");\\n        playerPercentage = newPercentage;\\n    }\\n\\n    function updateHolderPercentage(uint256 newPercentage) public onlyOwner {\\n        require(newPercentage <= 100, \\\"Percentage must be <= 100\\\");\\n        holderPercentage = newPercentage;\\n    }\\n\\n    function addTokensToRevenueHolders(uint256 amount) public onlyOwner {\\n        totalRevenueHolders += amount;\\n        bettingToken.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function addTokensToRevenuePlayers(uint256 amount) public onlyOwner {\\n        totalRevenuePlayers += amount;\\n        bettingToken.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function claimRevenueShare(int64 _tgChatId) public {\\n        uint256 unclaimedShare = unclaimedPlayerShares[_tgChatId][msg.sender];\\n        uint256 playerReward = 0;\\n\\n        if (unclaimedShare > 0 && totalPlayerShares > 0) {\\n            uint256 playerShare = (unclaimedShare * 10000) / totalPlayerShares;\\n            playerReward = (playerShare * totalRevenuePlayers) / 10000;\\n        }\\n\\n        uint256 holderReward = unclaimedHolderRewards[msg.sender];\\n        uint256 userReward = playerReward + holderReward;\\n\\n        totalRevenueHolders -= holderReward;\\n\\n        claimedPlayerShares[_tgChatId][msg.sender] += playerReward;\\n        claimedHolderShares[msg.sender] += holderReward;\\n        totalUnclaimedHolderRewards -= holderReward;\\n        totalRevenuePlayers -= playerReward;\\n        totalPlayerShares -= unclaimedShare;\\n        unclaimedHolderRewards[msg.sender] = 0;\\n        unclaimedPlayerShares[_tgChatId][msg.sender] = 0;\\n\\n        bettingToken.transfer(msg.sender, userReward);\\n    }\\n\\n    function getPlayerRewards(int64 _tgChatId, address _player)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 unclaimedShare = unclaimedPlayerShares[_tgChatId][_player];\\n        if (unclaimedShare == 0) {\\n            return 0;\\n        }\\n\\n        uint256 playerShare = (unclaimedShare * 10000) / totalPlayerShares;\\n        uint256 playerReward = (playerShare * totalRevenuePlayers) / 10000;\\n\\n        return playerReward;\\n    }\\n\\n    function updateHolderRewards(\\n        address[] memory holders,\\n        uint256[] memory rewards\\n    ) public onlyOwner {\\n        require(holders.length == rewards.length, \\\"Array length mismatch\\\");\\n\\n        for (uint256 i = 0; i < holders.length; i++) {\\n            address holder = holders[i];\\n            uint256 holderReward = rewards[i];\\n\\n            unclaimedHolderRewards[holder] = holderReward;\\n        }\\n    }\\n\\n    function updateTotalUnclaimedRewards(uint256 newTotal) public onlyOwner {\\n        totalUnclaimedHolderRewards = newTotal;\\n    }\\n\\n    function newGame(\\n        int64 _tgChatId,\\n        uint256 _minBet,\\n        address[] memory _players,\\n        uint256[] memory _bets,\\n        bool useWETH\\n    ) public returns (uint256[] memory) {\\n        require(\\n            _players.length == _bets.length,\\n            \\\"Players/bets length mismatch\\\"\\n        );\\n        require(\\n            !isGameInProgress(_tgChatId),\\n            \\\"There is already a game in progress\\\"\\n        );\\n\\n        uint256 betTotal = 0;\\n        for (uint16 i = 0; i < _bets.length; i++) {\\n            require(_bets[i] >= _minBet, \\\"Bet is smaller than the minimum\\\");\\n            betTotal += _bets[i];\\n        }\\n\\n        IERC20 chosenToken = useWETH ? WETH : bettingToken;\\n\\n        for (uint16 i = 0; i < _bets.length; i++) {\\n            require(\\n                chosenToken.allowance(_players[i], address(this)) >= _bets[i],\\n                \\\"Not enough allowance\\\"\\n            );\\n            bool isSent = chosenToken.transferFrom(\\n                _players[i],\\n                address(this),\\n                _bets[i]\\n            );\\n            require(isSent, \\\"Funds transfer failed\\\");\\n\\n            emit Bet(_tgChatId, _players[i], _bets[i]);\\n        }\\n\\n        Game memory g;\\n        g.minBet = _minBet;\\n        g.betAmounts = _bets;\\n        g.players = _players;\\n        g.inProgress = true;\\n\\n        games[_tgChatId] = g;\\n        activeTgGroups.push(_tgChatId);\\n\\n        return _bets;\\n    }\\n\\n    function endGame(\\n        int64 _tgChatId,\\n        address _winner,\\n        bool usedWETH\\n    ) public onlyOwner {\\n        require(\\n            isGameInProgress(_tgChatId),\\n            \\\"No game in progress for this Telegram chat ID\\\"\\n        );\\n\\n        Game storage g = games[_tgChatId];\\n        require(g.inProgress, \\\"Game is not in progress\\\");\\n\\n        uint256 totalBets = 0;\\n        for (uint16 i = 0; i < g.betAmounts.length; i++) {\\n            totalBets += g.betAmounts[i];\\n        }\\n\\n        uint256 revenueShare = (totalBets * revenueBps) / 10000;\\n        uint256 winnings = totalBets - revenueShare;\\n\\n        uint256 revenuePlayers = (revenueShare * playerPercentage) / 100;\\n\\n        IERC20 chosenToken = usedWETH ? WETH : bettingToken;\\n\\n        chosenToken.transfer(_winner, winnings);\\n        emit Win(_tgChatId, _winner, winnings);\\n\\n        emit Revenue(_tgChatId, revenueShare);\\n\\n        totalRevenuePlayers += revenuePlayers;\\n        totalRevenueHolders += (revenueShare * holderPercentage) / 100;\\n\\n        totalPlayerShares += revenuePlayers;\\n\\n        for (uint16 i = 0; i < g.players.length; i++) {\\n            address player = g.players[i];\\n            uint256 playerShare = (revenuePlayers * g.betAmounts[i]) /\\n                totalBets;\\n            unclaimedPlayerShares[_tgChatId][player] += playerShare;\\n        }\\n\\n        chosenToken.transfer(address(this), revenueShare);\\n\\n        g.inProgress = false;\\n        removeTgId(_tgChatId);\\n    }\\n\\n    function abortGame(int64 _tgChatId, bool usedWETH) public onlyOwner {\\n        require(\\n            isGameInProgress(_tgChatId),\\n            \\\"No game in progress for this Telegram chat ID\\\"\\n        );\\n        Game storage g = games[_tgChatId];\\n\\n        IERC20 chosenToken = usedWETH ? WETH : bettingToken;\\n\\n        for (uint16 i = 0; i < g.players.length; i++) {\\n            bool isSent = chosenToken.transfer(g.players[i], g.betAmounts[i]);\\n            require(isSent, \\\"Funds transfer failed\\\");\\n        }\\n\\n        g.inProgress = false;\\n        removeTgId(_tgChatId);\\n    }\\n\\n    function abortAllGames(bool usedWETH) public onlyOwner {\\n        int64[] memory _activeTgGroups = activeTgGroups;\\n        for (uint256 i = 0; i < _activeTgGroups.length; i++) {\\n            abortGame(_activeTgGroups[i], usedWETH);\\n        }\\n    }\\n\\n    function setBettingToken(address _newBettingToken) public onlyOwner {\\n        require(_newBettingToken != address(0), \\\"Invalid token address\\\");\\n        bettingToken = IERC20(_newBettingToken);\\n    }\\n\\n    function setWETH(address _newWETH) public onlyOwner {\\n        require(_newWETH != address(0), \\\"Invalid token address\\\");\\n        WETH = IERC20(_newWETH);\\n    }\\n\\n    function emergencyWithdrawERC20(address tokenAddress, address to)\\n        external\\n        onlyOwner\\n    {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        require(tokenBalance > 0, \\\"No tokens to withdraw\\\");\\n        totalRevenueHolders = 0;\\n        totalRevenuePlayers = 0;\\n\\n        token.transfer(to, tokenBalance);\\n    }\\n\\n    function emergencyWithdrawEther(address payable to) external onlyOwner {\\n        uint256 contractBalance = address(this).balance;\\n        require(contractBalance > 0, \\\"No Ether to withdraw\\\");\\n\\n        (bool success, ) = to.call{value: contractBalance}(\\\"\\\");\\n        require(success, \\\"Withdraw failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bettingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revenueBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holderPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"usedWETH\",\"type\":\"bool\"}],\"name\":\"abortAllGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"bool\",\"name\":\"usedWETH\",\"type\":\"bool\"}],\"name\":\"abortGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTgGroups\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokensToRevenueHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokensToRevenuePlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"claimRevenueShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedHolderShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedPlayerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usedWETH\",\"type\":\"bool\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"loser\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"isGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bets\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useWETH\",\"type\":\"bool\"}],\"name\":\"newGame\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBettingToken\",\"type\":\"address\"}],\"name\":\"setBettingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWETH\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlayerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRevenueHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRevenuePlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimedHolderRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimedHolderRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimedPlayerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateHolderPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"updateHolderRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePlayerPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"updateTotalUnclaimedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SlotContractV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009b44793a0177c84dd01ad81137db696531902871000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000001e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}