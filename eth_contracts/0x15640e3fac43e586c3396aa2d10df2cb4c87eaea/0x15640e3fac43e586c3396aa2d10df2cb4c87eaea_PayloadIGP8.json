{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/payloads/IGP8/PayloadIGP8.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGovernorBravo {\\n    function _acceptAdmin() external;\\n\\n    function _setVotingDelay(uint newVotingDelay) external;\\n\\n    function _setVotingPeriod(uint newVotingPeriod) external;\\n\\n    function _acceptAdminOnTimelock() external;\\n\\n    function _setImplementation(address implementation_) external;\\n\\n    function propose(\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint);\\n\\n    function admin() external view returns (address);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function votingDelay() external view returns (uint256);\\n\\n    function votingPeriod() external view returns (uint256);\\n}\\n\\ninterface ITimelock {\\n    function acceptAdmin() external;\\n\\n    function setDelay(uint delay_) external;\\n\\n    function setPendingAdmin(address pendingAdmin_) external;\\n\\n    function queueTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external returns (bytes32);\\n\\n    function executeTransaction(\\n        address target,\\n        uint value,\\n        string memory signature,\\n        bytes memory data,\\n        uint eta\\n    ) external payable returns (bytes memory);\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function delay() external view returns (uint256);\\n}\\n\\ninterface IInstaIndex {\\n    function changeMaster(address _newMaster) external;\\n\\n    function updateMaster() external;\\n\\n    function master() external view returns (address);\\n}\\n\\ninterface ILite {\\n    function setAdmin(address newAdmin) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function updateMaxRiskRatio(\\n        uint8[] memory protocolId_,\\n        uint256[] memory newRiskRatio_\\n    ) external;\\n\\n    function updateAggrMaxVaultRatio(uint256 newAggrMaxVaultRatio_) external;\\n}\\n\\ninterface IDSAV2 {\\n    function cast(\\n        string[] memory _targetNames,\\n        bytes[] memory _datas,\\n        address _origin\\n    ) external payable returns (bytes32);\\n\\n    function isAuth(address user) external view returns (bool);\\n}\\n\\ncontract PayloadIGP8 {\\n    uint256 public constant PROPOSAL_ID = 8;\\n\\n    address public constant PROPOSER =\\n        0xA45f7bD6A5Ff45D31aaCE6bCD3d426D9328cea01;\\n\\n    IGovernorBravo public constant GOVERNOR =\\n        IGovernorBravo(0x0204Cd037B2ec03605CFdFe482D8e257C765fA1B);\\n    ITimelock public immutable TIMELOCK =\\n        ITimelock(0x2386DC45AdDed673317eF068992F19421B481F4c);\\n\\n    address public immutable ADDRESS_THIS;\\n\\n    ILite public constant LITE =\\n        ILite(0xA0D3707c569ff8C87FA923d3823eC5D81c98Be78);\\n\\n    address internal constant OLD_USER_MODULE =\\n        0xFF93C10FB34f7069071D0679c45ed77A98f37f21;\\n    address internal constant OLD_ADMIN_MODULE =\\n        0x06feaa505193e987B12f161F1dB73b1D4d604001;\\n    address internal constant OLD_LEVERAGE_MODULE =\\n        0xA18519a6bb1282954e933DA0A775924E4CcE6019;\\n    address internal constant OLD_REBALANCER_MODULE =\\n        0xc6639CE123d779fE6eA545B70CbDc1dCA421740d;\\n    address internal constant OLD_REFINANCE_MODULE =\\n        0x390936658cB9B73ca75c6c02D5EF88b958D38241;\\n    address internal constant OLD_DSA_MODULE =\\n        0xE38d5938d6D75ceF2c3Fc63Dc4AB32cD103E10df;\\n    address internal constant OLD_WITHDRAWALS_MODULE =\\n        0xbd45DfF3320b0d832C61fb41489fdd3a1b960067;\\n\\n    address internal constant NEW_VIEW_MODULE =\\n        0x645b137ACa041B85c057a4A396086789cFD99041;\\n    address internal constant NEW_USER_MODULE =\\n        0x7ee8b5C11b578DD1E8c02D641508A305281Bd173;\\n    address internal constant NEW_ADMIN_MODULE =\\n        0xA7dC9540f00358a7ca46780de2FdEBD7F673C127;\\n    address internal constant NEW_LEVERAGE_MODULE =\\n        0x5b94f032799CC36fFd3E8CA9BCeA2bA5af40d43E;\\n    address internal constant NEW_REBALANCER_MODULE =\\n        0x871176C000603665Ce1133C0aAC783B79257E9C6;\\n    address internal constant NEW_REFINANCE_MODULE =\\n        0x4e05681632e1401a89335EDaB3E36612Ae8E1D1E;\\n    address internal constant NEW_DSA_MODULE =\\n        0xC30b9D5b582C00C6Bf2b7b274AaA7Cc06f1420bD;\\n    address internal constant NEW_WITHDRAWALS_MODULE =\\n        0x6A64A3E0af38279ac7455c85b2C683f5621cE2e7;\\n\\n    address internal constant NEW_DUMMY_IMPLEMENTATION =\\n        0x3AC94ba5465BF3429fE237468EaBa5aa20072d61;\\n\\n    constructor() {\\n        ADDRESS_THIS = address(this);\\n    }\\n\\n    function propose(string memory description) external {\\n        require(msg.sender == PROPOSER, \\\"msg.sender-not-proposer\\\");\\n\\n        uint256 totalActions = 1;\\n        address[] memory targets = new address[](totalActions);\\n        uint256[] memory values = new uint256[](totalActions);\\n        string[] memory signatures = new string[](totalActions);\\n        bytes[] memory calldatas = new bytes[](totalActions);\\n\\n        // Action 1: call executePayload on timelock contract to execute payload related to lite\\n        targets[0] = address(TIMELOCK);\\n        values[0] = 0;\\n        signatures[0] = \\\"executePayload(address,string,bytes)\\\";\\n        calldatas[0] = abi.encode(ADDRESS_THIS, \\\"execute()\\\", abi.encode());\\n\\n        uint256 proposedId = GOVERNOR.propose(\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            description\\n        );\\n\\n        require(proposedId == PROPOSAL_ID, \\\"PROPOSAL_IS_NOT_SAME\\\");\\n    }\\n\\n    function execute() external {\\n        // Action 1: remove Implementations\\n        action1();\\n\\n        // Action 2: add implementations\\n        action2();\\n\\n        // Action 3: set dummy implementations\\n        action3();\\n\\n        // Action 4: Change ratios\\n        action4();\\n    }\\n\\n    function verifyProposal() external view {}\\n\\n    /***********************************|\\n    |     Proposal Payload Actions      |\\n    |__________________________________*/\\n\\n    /// @notice Action 1: Remove all old implementations\\n    function action1() internal {\\n        LITE.removeImplementation(OLD_USER_MODULE);\\n        LITE.removeImplementation(OLD_ADMIN_MODULE);\\n        LITE.removeImplementation(OLD_LEVERAGE_MODULE);\\n        LITE.removeImplementation(OLD_REBALANCER_MODULE);\\n        LITE.removeImplementation(OLD_REFINANCE_MODULE);\\n        LITE.removeImplementation(OLD_DSA_MODULE);\\n        LITE.removeImplementation(OLD_WITHDRAWALS_MODULE);\\n    }\\n\\n    /// @notice Action 2: Add new implementations\\n    function action2() internal {\\n        LITE.addImplementation(NEW_USER_MODULE, userSigs());\\n        LITE.addImplementation(NEW_VIEW_MODULE, viewSigs());\\n        LITE.addImplementation(NEW_ADMIN_MODULE, adminSigs());\\n        LITE.addImplementation(NEW_LEVERAGE_MODULE, leverageSigs());\\n        LITE.addImplementation(NEW_REBALANCER_MODULE, rebalancerSigs());\\n        LITE.addImplementation(NEW_REFINANCE_MODULE, refinanceSigs());\\n        LITE.addImplementation(NEW_DSA_MODULE, dsaSigs());\\n        LITE.addImplementation(NEW_WITHDRAWALS_MODULE, withdrawalsSigs());\\n    }\\n\\n    /// @notice Action 3: Change dummy implementation.\\n    function action3() internal {\\n        LITE.setDummyImplementation(NEW_DUMMY_IMPLEMENTATION);\\n    }\\n\\n    /// @notice Action 4: Change ratios\\n    function action4() internal {\\n        // Update max aggr ratio from 78.5 to 83.5\\n        LITE.updateAggrMaxVaultRatio(83.5 * 1e4); // 83.5% or 83.5 * 1e4\\n\\n        // Update max risk ratio of different protocols\\n        {\\n            uint8[] memory protocolIds_ = new uint8[](4);\\n            uint256[] memory newRiskRatios_ = new uint256[](4);\\n\\n            // Spark Risk Ratio from 88% to 89%. Protocol Id: 7\\n            protocolIds_[0] = 7;\\n            newRiskRatios_[0] = 89 * 1e4;\\n\\n            // Aave V3 Risk Ratio from 88% to 91%. Protocol Id: 2\\n            protocolIds_[1] = 2;\\n            newRiskRatios_[1] = 91 * 1e4;\\n\\n            // Morpho Aave v3 Risk Ratio from 88% to 89%. Protocol Id: 6\\n            protocolIds_[2] = 6;\\n            newRiskRatios_[2] = 89 * 1e4;\\n\\n            // Fluid Risk Ratio from 88% to 91%. Protocol Id: 8\\n            protocolIds_[3] = 8;\\n            newRiskRatios_[3] = 91 * 1e4;\\n\\n            LITE.updateMaxRiskRatio(protocolIds_, newRiskRatios_);\\n        }\\n    }\\n\\n    /***********************************|\\n    |          Function Signatures      |\\n    |__________________________________*/\\n    function userSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](28);\\n        sigs_[0] = bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"approve(address,uint256)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"balanceOf(address)\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"decreaseAllowance(address,uint256)\\\"));\\n        sigs_[4] = bytes4(keccak256(\\\"increaseAllowance(address,uint256)\\\"));\\n        sigs_[5] = bytes4(keccak256(\\\"name()\\\"));\\n        sigs_[6] = bytes4(keccak256(\\\"symbol()\\\"));\\n        sigs_[7] = bytes4(keccak256(\\\"totalSupply()\\\"));\\n        sigs_[8] = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\n        sigs_[9] = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\n        sigs_[10] = bytes4(keccak256(\\\"asset()\\\"));\\n        sigs_[11] = bytes4(keccak256(\\\"convertToAssets(uint256)\\\"));\\n        sigs_[12] = bytes4(keccak256(\\\"convertToShares(uint256)\\\"));\\n        sigs_[13] = bytes4(keccak256(\\\"decimals()\\\"));\\n        sigs_[14] = bytes4(keccak256(\\\"maxDeposit(address)\\\"));\\n        sigs_[15] = bytes4(keccak256(\\\"maxMint(address)\\\"));\\n        sigs_[16] = bytes4(keccak256(\\\"maxRedeem(address)\\\"));\\n        sigs_[17] = bytes4(keccak256(\\\"maxWithdraw(address)\\\"));\\n        sigs_[18] = bytes4(keccak256(\\\"previewDeposit(uint256)\\\"));\\n        sigs_[19] = bytes4(keccak256(\\\"previewMint(uint256)\\\"));\\n        sigs_[20] = bytes4(keccak256(\\\"previewRedeem(uint256)\\\"));\\n        sigs_[21] = bytes4(keccak256(\\\"previewWithdraw(uint256)\\\"));\\n        sigs_[22] = bytes4(keccak256(\\\"deposit(uint256,address)\\\"));\\n        sigs_[23] = bytes4(\\n            keccak256(\\\"importPosition(uint256,uint256,uint256,address)\\\")\\n        );\\n        sigs_[24] = bytes4(keccak256(\\\"mint(uint256,address)\\\"));\\n        sigs_[25] = bytes4(keccak256(\\\"redeem(uint256,address,address)\\\"));\\n        sigs_[26] = bytes4(keccak256(\\\"totalAssets()\\\"));\\n        sigs_[27] = bytes4(keccak256(\\\"withdraw(uint256,address,address)\\\"));\\n    }\\n\\n    function viewSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](28);\\n\\n        sigs_[0] = bytes4(keccak256(\\\"getRatioAaveV2()\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"getRatioAaveV3(uint256)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"getRatioCompoundV3(uint256)\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"getRatioEuler(uint256)\\\"));\\n        sigs_[4] = bytes4(keccak256(\\\"getRatioMorphoAaveV2()\\\"));\\n        sigs_[5] = bytes4(keccak256(\\\"getRatioMorphoAaveV3(uint256)\\\"));\\n        sigs_[6] = bytes4(keccak256(\\\"getRatioSpark(uint256)\\\"));\\n        sigs_[7] = bytes4(keccak256(\\\"getRatioFluid(uint256)\\\"));\\n        sigs_[8] = bytes4(keccak256(\\\"getProtocolRatio(uint8)\\\"));\\n        sigs_[9] = bytes4(keccak256(\\\"getNetAssets()\\\"));\\n        sigs_[10] = bytes4(keccak256(\\\"getWithdrawFee(uint256)\\\"));\\n        sigs_[11] = bytes4(keccak256(\\\"vaultDSA()\\\"));\\n        sigs_[12] = bytes4(keccak256(\\\"leverageMaxUnitAmountLimit()\\\"));\\n        sigs_[13] = bytes4(keccak256(\\\"secondaryAuth()\\\"));\\n        sigs_[14] = bytes4(keccak256(\\\"exchangePrice()\\\"));\\n        sigs_[15] = bytes4(keccak256(\\\"revenueExchangePrice()\\\"));\\n        sigs_[16] = bytes4(keccak256(\\\"isRebalancer(address)\\\"));\\n        sigs_[17] = bytes4(keccak256(\\\"maxRiskRatio(uint8)\\\"));\\n        sigs_[18] = bytes4(keccak256(\\\"aggrMaxVaultRatio()\\\"));\\n        sigs_[19] = bytes4(keccak256(\\\"withdrawFeeAbsoluteMin()\\\"));\\n        sigs_[20] = bytes4(keccak256(\\\"withdrawalFeePercentage()\\\"));\\n        sigs_[21] = bytes4(keccak256(\\\"revenueFeePercentage()\\\"));\\n        sigs_[22] = bytes4(keccak256(\\\"revenue()\\\"));\\n        sigs_[23] = bytes4(keccak256(\\\"treasury()\\\"));\\n        sigs_[24] = bytes4(keccak256(\\\"borrowBalanceMorphoAaveV3(address)\\\"));\\n        sigs_[25] = bytes4(keccak256(\\\"collateralBalanceMorphoAaveV3(address)\\\"));\\n        sigs_[26] = bytes4(keccak256(\\\"queuedWithdrawStEth()\\\"));\\n        sigs_[27] = bytes4(keccak256(\\\"readFromStorage(bytes32)\\\"));\\n    }\\n\\n    function adminSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](10);\\n        sigs_[0] = bytes4(keccak256(\\\"changeVaultStatus(uint8)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"reduceAggrMaxVaultRatio(uint256)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"reduceMaxRiskRatio(uint8[],uint256[])\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"updateAggrMaxVaultRatio(uint256)\\\"));\\n        sigs_[4] = bytes4(keccak256(\\\"updateFees(uint256,uint256,uint256)\\\"));\\n        sigs_[5] = bytes4(\\n            keccak256(\\\"updateLeverageMaxUnitAmountLimit(uint256)\\\")\\n        );\\n        sigs_[6] = bytes4(keccak256(\\\"updateMaxRiskRatio(uint8[],uint256[])\\\"));\\n        sigs_[7] = bytes4(keccak256(\\\"updateRebalancer(address,bool)\\\"));\\n        sigs_[8] = bytes4(keccak256(\\\"updateSecondaryAuth(address)\\\"));\\n        sigs_[9] = bytes4(keccak256(\\\"updateTreasury(address)\\\"));\\n    }\\n\\n    function leverageSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](1);\\n        sigs_[0] = bytes4(\\n            keccak256(\\n                \\\"leverage(uint8,uint256,uint256,uint256,address[],uint256[],uint256,uint256,bytes)\\\"\\n            )\\n        );\\n    }\\n\\n    function rebalancerSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](6);\\n        sigs_[0] = bytes4(keccak256(\\\"collectRevenue(uint256)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"fillVaultAvailability(uint8,uint256)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"sweepEthToSteth()\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"sweepWethToSteth()\\\"));\\n        sigs_[4] = bytes4(keccak256(\\\"updateExchangePrice()\\\"));\\n        sigs_[5] = bytes4(keccak256(\\\"vaultToProtocolDeposit(uint8,uint256)\\\"));\\n    }\\n\\n    function refinanceSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](1);\\n        sigs_[0] = bytes4(\\n            keccak256(\\\"refinance(uint8,uint8,uint256,uint256,uint256,uint256)\\\")\\n        );\\n    }\\n\\n    function dsaSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](2);\\n        sigs_[0] = bytes4(keccak256(\\\"addDSAAuth(address)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"spell(address,bytes,uint256,uint256)\\\"));\\n    }\\n\\n    function withdrawalsSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](4);\\n        // new functions\\n        sigs_[0] = bytes4(\\n            keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n        );\\n        sigs_[1] = bytes4(keccak256(\\\"queueEthWithdrawal(uint256,uint8)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"paybackDebt(uint8)\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"claimEthWithdrawal(uint256,uint8)\\\"));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESS_THIS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR\",\"outputs\":[{\"internalType\":\"contract IGovernorBravo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LITE\",\"outputs\":[{\"internalType\":\"contract ILite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK\",\"outputs\":[{\"internalType\":\"contract ITimelock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dsaSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancerSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refinanceSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyProposal\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "PayloadIGP8", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}