{"SourceCode": "// Sources flattened with hardhat v2.19.3 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT AND UNLICENSED\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.7.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.7.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.7.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.7.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/VestingControlV2.sol\r\n\r\n// Original license: SPDX_License_Identifier: UNLICENSED\r\npragma solidity =0.8.19;\r\n\r\n\r\n\r\ncontract VestingControlV2 is Ownable, ReentrancyGuard {\r\n    event Transfer(address indexed to, uint256 token);\r\n\r\n    string magic = \"9cYj17lrpiKd0uPS\";\r\n\r\n    address public tokenAddr; // erc20 token address, decimals 1e18\r\n    int8 public roundLatest = -1; // round is start at 0\r\n\r\n    struct RoundOpt {\r\n        uint256 startTime; // round start at\r\n        uint256 endTime; // round end at\r\n        uint256 totalSupply; // total erc20 token supply for this round\r\n        uint256 raiseCap; // total raise cap, 0 means nolimit\r\n        uint256 perUnit; // token amount = perUnit * 1ETH, 0 means we should wait for the round to end\r\n        uint256 minBuy; //  minimun amount per wallet\r\n        uint256 maxBuy; // maximum amount per wallet, 0 means nolimit\r\n        address signerAddress; // signer for whitelist, empty means nolimit\r\n\r\n        // vesting period\r\n        uint256 vestingStartTime; // vestingStartTime > tokenReleaseAt\r\n        uint256 vestingEndTime; //\r\n        uint256 tgeStartTime;\r\n        uint256 tgePerc; // 0~100\r\n    }\r\n\r\n    struct RoundStat {\r\n        uint256 totalRaised; // eth\r\n        uint256 totalToken; // token\r\n        uint256 totalClaim; // token\r\n    }\r\n\r\n    struct Wallet {\r\n        uint256 totalDeposited; // eth\r\n        uint256 totalToken; // token\r\n        uint256 totalClaim; // token\r\n    }\r\n\r\n    struct Vesting {\r\n        uint256 amount;\r\n        address beneficary;\r\n    }\r\n\r\n    mapping(int8 => RoundOpt) public roundOpts;\r\n    mapping(int8 => RoundStat) public roundStat;\r\n    mapping(int8 => mapping(address => Wallet)) public wallets;\r\n\r\n    constructor(address _tokenAddr) {\r\n        tokenAddr = _tokenAddr;\r\n    }\r\n\r\n    // ============= State Function  =============\r\n    \r\n    function currentRound() public view returns (int8) {\r\n        int8 _currentRound = -1;\r\n        for (int8 roundNum = 0; roundNum <= roundLatest; roundNum++) {\r\n            RoundOpt storage opt = roundOpts[roundNum];\r\n            if (opt.startTime <= block.timestamp) {\r\n                _currentRound = roundNum;\r\n            }\r\n        } \r\n        return _currentRound;\r\n    }\r\n\r\n    // ============= Exchange Function  =============\r\n\r\n    // ============= Claim Fuciton ===============\r\n\r\n    // User claim\r\n    function totalToken(address addr) external view returns (uint256 deposited, uint256 amount, uint256 claimable, uint256 claimed) {\r\n        int8 _currentRound = currentRound();\r\n\r\n        for (int8 roundNum = 0; roundNum <= _currentRound; roundNum++) {\r\n            RoundOpt storage opt = roundOpts[roundNum];\r\n            RoundStat storage stat = roundStat[roundNum];\r\n            Wallet storage wallet = wallets[roundNum][addr];\r\n\r\n            amount += _getBoughtToken(wallet, opt, stat);\r\n            claimable += _claimableToken(wallet, opt, stat);\r\n            claimed += wallet.totalClaim;\r\n            deposited += wallet.totalDeposited;\r\n        }\r\n\r\n        return (deposited, amount, claimable, claimed);\r\n    }\r\n\r\n\r\n    function _getBoughtToken(\r\n        Wallet storage wallet,\r\n        RoundOpt storage opt,\r\n        RoundStat storage stat\r\n    ) private view returns (uint256) {\r\n        if (opt.perUnit == 0) {\r\n            if (opt.endTime > block.timestamp) {\r\n                return 0;\r\n            } else {\r\n                return opt.totalSupply / stat.totalRaised * wallet.totalDeposited;\r\n            }\r\n        } else {\r\n            return wallet.totalToken;\r\n        }\r\n    }\r\n\r\n    function _claimableToken(\r\n        Wallet storage wallet,\r\n        RoundOpt storage opt,\r\n        RoundStat storage stat\r\n    ) private view returns (uint256) {\r\n        uint256 _totalToken = _getBoughtToken(wallet, opt, stat);\r\n\r\n        uint256 vested = getVestedAmount(_totalToken, opt);\r\n\r\n        require(vested <= _totalToken, \"AssertionFailed: vested <= _totalToken\");\r\n        require(vested >= wallet.totalClaim, \"AssertionFailed: vested >= wallet.totalClaim\");\r\n\r\n        return vested - wallet.totalClaim;\r\n    }\r\n\r\n    function getVestedAmount(uint256 boughtAmount, RoundOpt storage opt) private view returns (uint256) {\r\n        if (opt.tgeStartTime > block.timestamp) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 initVestedAmount = boughtAmount / 100 * opt.tgePerc;\r\n\r\n        if (block.timestamp < opt.vestingStartTime) {\r\n            return initVestedAmount;\r\n        }\r\n\r\n\r\n        uint256 vestingAmount = boughtAmount - initVestedAmount;\r\n\r\n        uint256 vestedAmount = 0;\r\n        if (opt.vestingEndTime < block.timestamp) {\r\n            vestedAmount = vestingAmount;\r\n        } else {\r\n            vestedAmount = vestingAmount / (opt.vestingEndTime - opt.vestingStartTime) * (block.timestamp - opt.vestingStartTime);\r\n        }\r\n\r\n        return vestedAmount + initVestedAmount;\r\n    }\r\n\r\n    // claimAll claimable token\r\n    function claimAll(address addr) external nonReentrant {\r\n        int8 _currentRound = currentRound();\r\n\r\n        for (int8 roundNum = 0; roundNum <= _currentRound; roundNum++) {\r\n            _claim(addr, roundNum);\r\n        }\r\n    }\r\n    \r\n    function _claim(address addr, int8 roundNum) private {\r\n        RoundStat storage stat = roundStat[roundNum];\r\n        Wallet storage wallet = wallets[roundNum][addr];\r\n\r\n        uint256 claimable = _claimableToken(wallet, roundOpts[roundNum], stat);\r\n        if (claimable == 0) {\r\n            return;\r\n        }\r\n\r\n        wallet.totalClaim += claimable;\r\n        stat.totalClaim += claimable;\r\n    \r\n        IERC20(tokenAddr).transfer(addr, claimable);\r\n        emit Transfer(addr, claimable);\r\n    }\r\n\r\n    // =========== Admin Fuction (onlyOwner)============\r\n\r\n    // setup round\r\n    function setupRound(\r\n        int8 roundNum,\r\n        RoundOpt calldata opt\r\n    ) external onlyOwner {\r\n        require(roundNum >= 0 && roundNum <= roundLatest + 1, \"Presale: invalid roundNum\");\r\n        require(\r\n            opt.startTime > 0 && opt.endTime > opt.startTime,\r\n            \"Presale: invalid startTime or endTime\"\r\n        );\r\n        require(opt.minBuy > 0, \"Presale: invalid minBuy\");\r\n        require(\r\n            opt.raiseCap >= 0 && opt.totalSupply > 0,\r\n            \"Presale: invalid raiseCap or totalSupply\"\r\n        );\r\n\r\n        if (opt.raiseCap > 0 && opt.totalSupply > 0) {\r\n            require(opt.perUnit > 0, \"Presale: invalid perUnit\");\r\n        }\r\n\r\n        if (roundNum > roundLatest) {\r\n            roundLatest = roundNum;\r\n        }\r\n\r\n        roundOpts[roundNum] = opt;\r\n    }\r\n\r\n    function upsertVestings(int8 roundNum, Vesting[] calldata beneficaries) external onlyOwner() {\r\n        for (uint256 index = 0; index < beneficaries.length; index++) {\r\n            Vesting calldata beneficary = beneficaries[index];\r\n            Wallet storage wallet = wallets[roundNum][beneficary.beneficary]; \r\n            wallet.totalToken = beneficary.amount;\r\n        }\r\n    }\r\n\r\n    function updateVestingBeneficary(int8 roundNum, address from, address to) external onlyOwner() {\r\n        // copy wallet\r\n        Wallet memory wallet = wallets[roundNum][from]; \r\n        wallets[roundNum][to] = wallet;\r\n        // remove amount\r\n        wallets[roundNum][from].totalToken = 0;\r\n    }\r\n\r\n    // withdraw\r\n    function withdraw() external onlyOwner {\r\n        uint256 count = address(this).balance;\r\n        (payable(msg.sender)).transfer(count);\r\n    }\r\n\r\n    function withdrawToken(address addr) external onlyOwner {\r\n        uint256 count = IERC20(tokenAddr).balanceOf(address(this));\r\n        IERC20(tokenAddr).transfer(addr, count);\r\n    }\r\n\r\n    // internal helper\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundLatest\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"name\":\"roundOpts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiseCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgePerc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"name\":\"roundStat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"roundNum\",\"type\":\"int8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiseCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgePerc\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingControlV2.RoundOpt\",\"name\":\"opt\",\"type\":\"tuple\"}],\"name\":\"setupRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"roundNum\",\"type\":\"int8\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"updateVestingBeneficary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"roundNum\",\"type\":\"int8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"}],\"internalType\":\"struct VestingControlV2.Vesting[]\",\"name\":\"beneficaries\",\"type\":\"tuple[]\"}],\"name\":\"upsertVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VestingControlV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000087c22db324b8b0637c8f09d2670ae7777651dbb8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0a63da9da3f5bf432ab2441b6c501eaf31ec5dd6d30e663910ab03cb78277b74"}