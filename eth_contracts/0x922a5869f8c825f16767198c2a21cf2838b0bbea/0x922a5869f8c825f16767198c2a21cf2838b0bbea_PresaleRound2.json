{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\ncontract PresaleRound2 {\r\n    address public owner;\r\n    IERC20 public token; \r\n    uint256 public totalETHRaised;\r\n    uint256 public presaleStartTime; \r\n    uint256 public presaleEndTime;\r\n    uint256 public tokenPricePerETH; // Number of tokens per 1 ETH\r\n    bool public presaleActive = false;\r\n\r\n    mapping(address => uint256) public ETHContributions;\r\n    mapping(address => uint256) public tokenBalances;\r\n    bool public withdrawalAllowed = false;\r\n\r\n    event PresaleStarted(uint256 startTime, uint256 endTime);\r\n    event PresaleStopped();\r\n    event PriceChanged(uint256 newPrice);\r\n    event ETHContributed(address indexed contributor, uint256 amount);\r\n    event TokensClaimed(address indexed claimer, uint256 amount);\r\n\r\n    mapping(address => uint256) public lastClaimTime;\r\n    mapping(address => uint256) public claimedAmount;\r\n    uint256 public constant minDaysBetweenClaims = 7 days;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address tokenAddress, uint256 _tokenPricePerETH) {\r\n        owner = msg.sender;\r\n        token = IERC20(tokenAddress);\r\n        tokenPricePerETH = _tokenPricePerETH;\r\n    }\r\n\r\n    function startPresale(uint256 duration) public onlyOwner {\r\n        presaleStartTime = block.timestamp;\r\n        presaleEndTime = presaleStartTime + duration;\r\n        presaleActive = true;\r\n        emit PresaleStarted(presaleStartTime, presaleEndTime);\r\n    }\r\n\r\n    function stopPresale() public onlyOwner {\r\n        presaleActive = false;\r\n        presaleEndTime = block.timestamp;\r\n        emit PresaleStopped();\r\n    }\r\n\r\n    function setTokenPricePerETH(uint256 newPrice) public onlyOwner {\r\n        require(presaleActive, \"Presale is not active\");\r\n        require(block.timestamp < presaleEndTime, \"Cannot change price after presale ended\");\r\n        tokenPricePerETH = newPrice;\r\n        emit PriceChanged(newPrice);\r\n    }\r\n\r\n    function contribute() public payable {\r\n        require(presaleActive, \"Presale is not active\");\r\n        require(block.timestamp < presaleEndTime, \"Presale ended\");\r\n        payable(owner).transfer(msg.value);\r\n        \r\n        totalETHRaised += msg.value;\r\n        uint256 tokenAmount = msg.value * tokenPricePerETH;\r\n        \r\n       tokenBalances[msg.sender] += tokenAmount;\r\n\r\n        ETHContributions[msg.sender] += msg.value;\r\n        emit ETHContributed(msg.sender, msg.value);\r\n    }\r\n\r\n    function claimTokens() public {\r\n        require(!presaleActive, \"Presale is active\");\r\n        require(withdrawalAllowed, \"Withdrawals not Enabled yet\");\r\n        require(block.timestamp > presaleEndTime, \"Presale not ended\");\r\n        require(ETHContributions[msg.sender] > 0, \"No contribution made\");\r\n        \r\n        uint256 tokenAmount = tokenBalances[msg.sender];\r\n        \r\n        // Calculate the number of days since the last claim\r\n        uint256 daysSinceLastClaim = block.timestamp - lastClaimTime[msg.sender];\r\n        \r\n        // Ensure the user has waited at least minDaysBetweenClaims\r\n        require(daysSinceLastClaim >= minDaysBetweenClaims, \"Minimum time between claims not met\");\r\n        \r\n        // Calculate the amount to claim (25% of tokens)\r\n        uint256 amountToClaim = (tokenAmount * 25) / 100;\r\n        \r\n        // Ensure the total claimed amount doesn't exceed 100%\r\n        require(claimedAmount[msg.sender] + amountToClaim <= tokenAmount, \"Total claimed exceeds 100%\");\r\n        \r\n        // Update the last claim time and claimed amount\r\n        lastClaimTime[msg.sender] = block.timestamp;\r\n        claimedAmount[msg.sender] += amountToClaim;\r\n\r\n         // Transfer tokens to the sender\r\n        require(token.transfer(msg.sender, amountToClaim), \"Token transfer failed\");\r\n        \r\n        emit TokensClaimed(msg.sender, amountToClaim);\r\n    }\r\n\r\n    receive() external payable {\r\n        contribute();\r\n    }\r\n\r\n    function AmountTobeClaimed(address _investor) public view returns(uint256){\r\n        return tokenBalances[_investor];\r\n    }\r\n\r\n    function RemainingAmountTobeClaimed(address _investor) public view returns(uint256){\r\n        return tokenBalances[_investor] - claimedAmount[_investor];\r\n    }\r\n\r\n    function saveRemainingTokens(address tokenAddress) external onlyOwner {\r\n        IERC20 token1 = IERC20(tokenAddress);\r\n        uint256 tokenBalance = token1.balanceOf(address(this));\r\n        token1.transfer(owner, tokenBalance);\r\n    }\r\n\r\n    function toggleWithdrawals() public onlyOwner {\r\n        withdrawalAllowed = !withdrawalAllowed;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPricePerETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHContributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PresaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"AmountTobeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"RemainingAmountTobeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDaysBetweenClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"saveRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPricePerETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPricePerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PresaleRound2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000926ff6584b5905cc793cfb19bfc0ad6443671f470000000000000000000000000000000000000000000000000000000000002cec", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eede3ee6c71ce4a939b843a5e14799b360f3d74d11d232ce8175ce217fe16a2d"}