{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ElipeCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Website: https://elipecoin.com/\\n// X(Twitter): https://x.com/elipecoin\\n// Telegram: https://t.me/elipe_coin\\n// Youtube: http://www.youtube.com/@elipecoinerc20\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n\\npragma solidity 0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\nlibrary SafeMath {\\n    function tryAdd(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function trySub(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    function tryMul(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    function tryDiv(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    function tryMod(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\ninterface IAntiDrainer {\\n    function isEnabled(address token) external view returns (bool);\\n    function check(\\n        address from,\\n        address to,\\n        address pair,\\n        uint256 maxWalletSize,\\n        uint256 maxTransactionAmount,\\n        uint256 swapTokensAtAmount\\n    ) external returns (bool);\\n}\\n\\ncontract ElipeCoin is Context, IERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    string private constant _name = \\\"ElipeCoin\\\";\\n    string private constant _symbol = \\\"ELC\\\";\\n    uint8 private constant _decimals = 18;\\n    uint256 private constant _totalSupply = 200_000_000 * 10 ** _decimals;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    IUniswapV2Router02 public _uniswapV2Router;\\n    address public _uniswapV2Pair;\\n    address public _antiDrainer;\\n    address public _thresHoldManager;\\n\\n    uint256 private constant _initialBuyMarketTax = 9895;\\n    uint256 private constant _initialBuyBurnTax = 5;\\n\\n    uint256 private constant _initialSellMarketTax = 9995;\\n    uint256 private constant _initialSellBurnTax = 5;\\n\\n    uint256 public _buyTax;\\n    uint256 public _buyMarketTax = 95;\\n    uint256 public _buyBurnTax = 5;\\n\\n    uint256 public _sellTax;\\n    uint256 public _sellMarketTax = 95;\\n    uint256 public _sellBurnTax = 5;\\n\\n    address private _marketWallet;\\n    address private _burnWallet;\\n\\n    uint256 public _maxTransactionAmount;\\n    uint256 public _swapTokensAtAmount;\\n    uint256 public _maxWalletAmount;\\n\\n    uint256 public _sellLimit = 300; // 3% of balance\\n    uint256 public _sellCooldown = 10; // sell cooldown block\\n\\n    uint256 public _buyLimit = 400; // 4% of pool\\n\\n    bool private _swapping;\\n\\n    bool public _limitsInEffect = true;\\n    bool public _transferEnabled = true;\\n    bool public _tradingActive = false;\\n    bool public _swapEnabled = false;\\n\\n    uint256 private _launchedAt;\\n    uint256 private _deadBlocks;\\n\\n    uint256 public _tokensForMarket;\\n    uint256 public _tokensForBurn;\\n\\n    mapping(address => bool) public _isExcludedFromFees;\\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\\n\\n    mapping(address => bool) public _blackList;\\n\\n    mapping(address => uint256) public _lastSell;\\n\\n    constructor() {\\n        _uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        _thresHoldManager = msg.sender;\\n\\n        _maxTransactionAmount = (_totalSupply * 1) / 100;\\n        _maxWalletAmount = (_totalSupply * 1) / 100;\\n        _swapTokensAtAmount = (_totalSupply * 5) / 10000;\\n\\n        _marketWallet = 0x334acc11695902C3340642278369b98039ac8a54; // market wallet\\n        _burnWallet = address(0xdead);\\n\\n        _buyTax = _buyMarketTax + _buyBurnTax;\\n        _sellTax = _sellMarketTax + _sellBurnTax;\\n\\n        excludeFromFees(owner(), true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(0xdead), true);\\n\\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\\n        excludeFromMaxTransaction(address(_uniswapV2Pair), true);\\n        excludeFromMaxTransaction(owner(), true);\\n        excludeFromMaxTransaction(address(this), true);\\n        excludeFromMaxTransaction(address(0xdead), true);\\n\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    receive() external payable {}\\n\\n    function start(uint256 deadBlocks) external onlyOwner {\\n        _deadBlocks = deadBlocks;\\n        _tradingActive = true;\\n        _swapEnabled = true;\\n        _launchedAt = block.number;\\n    }\\n\\n    function startWithPermit(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 deadBlocks\\n    ) external {\\n        bytes32 domainHash = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(\\\"Trading Token\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                keccak256(\\\"Permit(string content,uint256 nonce)\\\"),\\n                keccak256(bytes(\\\"Enable Trading\\\")),\\n                uint256(0)\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainHash, structHash)\\n        );\\n\\n        address sender = ecrecover(digest, v, r, s);\\n        require(sender == owner(), \\\"Invalid signature\\\");\\n\\n        _deadBlocks = deadBlocks;\\n        _tradingActive = true;\\n        _swapEnabled = true;\\n        _launchedAt = block.number;\\n    }\\n\\n    function removeLimits() external onlyOwner returns (bool) {\\n        _limitsInEffect = false;\\n        return true;\\n    }\\n\\n    function setAntiDrainer(address antiDrainer) external onlyOwner {\\n        require(antiDrainer != address(0x0), \\\"Invalid anti drainer\\\");\\n        _antiDrainer = antiDrainer;\\n    }\\n\\n    function setThresHoldManager(address thresHoldManager) external {\\n        require(msg.sender == _thresHoldManager, \\\"Invalid Manager\\\");\\n        _thresHoldManager = thresHoldManager;\\n    }\\n\\n    function setBlackList(\\n        address[] calldata wallets,\\n        bool blocked\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < wallets.length; i++) {\\n            _blackList[wallets[i]] = blocked;\\n        }\\n    }\\n\\n    function updateSwapTokensAtAmount(\\n        uint256 newAmount\\n    ) external returns (bool) {\\n        require(msg.sender == _thresHoldManager, \\\"Invalid Manager\\\");\\n        require(\\n            newAmount >= (totalSupply() * 1) / 100000,\\n            \\\"Swap amount cannot be lower than 0.001% total supply.\\\"\\n        );\\n        require(\\n            newAmount <= (totalSupply() * 5) / 1000,\\n            \\\"Swap amount cannot be higher than 0.5% total supply.\\\"\\n        );\\n        _swapTokensAtAmount = newAmount;\\n        return true;\\n    }\\n\\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\\n        require(\\n            newNum >= ((totalSupply() * 1) / 1000) / (10 ** _decimals),\\n            \\\"Cannot set _maxTransactionAmount lower than 0.1%\\\"\\n        );\\n        _maxTransactionAmount = newNum * (10 ** _decimals);\\n    }\\n\\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\\n        require(\\n            newNum >= ((totalSupply() * 5) / 1000) / (10 ** _decimals),\\n            \\\"Cannot set _maxWalletAmount lower than 0.5%\\\"\\n        );\\n        _maxWalletAmount = newNum * (10 ** _decimals);\\n    }\\n\\n    function whitelistContract(address _whitelist, bool isWL) public onlyOwner {\\n        _isExcludedMaxTransactionAmount[_whitelist] = isWL;\\n        _isExcludedFromFees[_whitelist] = isWL;\\n    }\\n\\n    function excludeFromMaxTransaction(\\n        address updAds,\\n        bool isEx\\n    ) public onlyOwner {\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\n    }\\n\\n    function toggleTransfer(bool enabled) external onlyOwner {\\n        _transferEnabled = enabled;\\n    }\\n\\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\n    function updateSwapEnabled(bool enabled) external onlyOwner {\\n        _swapEnabled = enabled;\\n    }\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromFees[account] = excluded;\\n    }\\n\\n    function updateBuyTaxes(\\n        uint256 newMarketTax,\\n        uint256 newBurnTax\\n    ) external onlyOwner {\\n        _buyMarketTax = newMarketTax;\\n        _buyBurnTax = newBurnTax;\\n        _buyTax = _buyMarketTax + _buyBurnTax;\\n    }\\n\\n    function updateBuyLimit(uint256 newBuyLimit) external onlyOwner {\\n        _buyLimit = newBuyLimit;\\n    }\\n\\n    function updateSellLimit(\\n        uint256 newSellLimit,\\n        uint256 newSellCooldown\\n    ) external onlyOwner {\\n        _sellLimit = newSellLimit;\\n        _sellCooldown = newSellCooldown;\\n    }\\n\\n    function updateSellTaxes(\\n        uint256 newMarketTax,\\n        uint256 newBurnTax\\n    ) external onlyOwner {\\n        _sellMarketTax = newMarketTax;\\n        _sellBurnTax = newBurnTax;\\n        _sellTax = _sellMarketTax + _sellBurnTax;\\n    }\\n\\n    function updateMarketWallet(address newMarketWallet) external onlyOwner {\\n        _marketWallet = newMarketWallet;\\n    }\\n\\n    function updateBurnWallet(address newBurnWallet) external onlyOwner {\\n        _burnWallet = newBurnWallet;\\n    }\\n\\n    function airdrop(\\n        address[] calldata addresses,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(addresses.length > 0 && amounts.length == addresses.length);\\n        address from = msg.sender;\\n        for (uint i = 0; i < addresses.length; i++) {\\n            _transfer(from, addresses[i], amounts[i] * (10 ** _decimals));\\n        }\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(!_blackList[from], \\\"ERC20: from is black list\\\");\\n        require(!_blackList[to], \\\"ERC20: to is black list\\\");\\n        require(\\n            _transferEnabled ||\\n                _isExcludedMaxTransactionAmount[from] ||\\n                _isExcludedMaxTransactionAmount[to],\\n            \\\"ERC20: transfer is disabled\\\"\\n        );\\n\\n        if (amount == 0) return;\\n\\n        uint256 buyTax = _buyTax;\\n        uint256 buyMarketTax = _buyMarketTax;\\n        uint256 buyBurnTax = _buyBurnTax;\\n\\n        uint256 sellTax = _sellTax;\\n        uint256 sellMarketTax = _sellMarketTax;\\n        uint256 sellBurnTax = _sellBurnTax;\\n        if (_limitsInEffect) {\\n            if (\\n                from != owner() &&\\n                to != owner() &&\\n                to != address(0) &&\\n                to != address(0xdead) &&\\n                !_swapping\\n            ) {\\n                if (!_tradingActive)\\n                    require(\\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\\n                        \\\"Trading is not active.\\\"\\n                    );\\n\\n                //when buy\\n                if (\\n                    from == _uniswapV2Pair &&\\n                    !_isExcludedMaxTransactionAmount[to]\\n                ) {\\n                    require(\\n                        amount <= _maxTransactionAmount,\\n                        \\\"Buy transfer amount exceeds the _maxTransactionAmount.\\\"\\n                    );\\n                    require(\\n                        amount + balanceOf(to) <= _maxWalletAmount,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                    // buy limit\\n                    require(\\n                        amount <= balanceOf(from).mul(_buyLimit).div(10000),\\n                        \\\"BuyLimit exceeded\\\"\\n                    );\\n                }\\n                //when sell\\n                else if (\\n                    to == _uniswapV2Pair &&\\n                    !_isExcludedMaxTransactionAmount[from]\\n                ) {\\n                    require(\\n                        amount <= _maxTransactionAmount,\\n                        \\\"Sell transfer amount exceeds the _maxTransactionAmount.\\\"\\n                    );\\n                    // sell limit\\n                    require(\\n                        amount <= balanceOf(from).mul(_sellLimit).div(10000),\\n                        \\\"SellLimit exceeded\\\"\\n                    );\\n                    // sell cooldown\\n                    require(\\n                        _lastSell[from] == 0 ||\\n                            block.number >= _lastSell[from] + _sellCooldown,\\n                        \\\"Sell Cooldown\\\"\\n                    );\\n                    _lastSell[from] = block.number;\\n                }\\n                //when transfer\\n                else if (!_isExcludedMaxTransactionAmount[to]) {\\n                    require(\\n                        amount + balanceOf(to) <= _maxWalletAmount,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n\\n                if (block.number == _launchedAt) {\\n                    buyTax = 0;\\n                    sellTax = 0;\\n                } else if (block.number <= (_launchedAt + _deadBlocks)) {\\n                    buyMarketTax = _initialBuyMarketTax;\\n                    buyBurnTax = _initialBuyBurnTax;\\n                    buyTax = buyMarketTax + buyBurnTax;\\n\\n                    sellMarketTax = _initialSellMarketTax;\\n                    sellBurnTax = _initialSellBurnTax;\\n                    sellTax = sellMarketTax + sellBurnTax;\\n                }\\n            }\\n        }\\n\\n        if (\\n            _antiDrainer != address(0) &&\\n            IAntiDrainer(_antiDrainer).isEnabled(address(this))\\n        ) {\\n            bool check = IAntiDrainer(_antiDrainer).check(\\n                from,\\n                to,\\n                _uniswapV2Pair,\\n                _maxWalletAmount,\\n                _maxTransactionAmount,\\n                _swapTokensAtAmount\\n            );\\n            require(check, \\\"Anti Drainer Enabled\\\");\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\\n        if (\\n            canSwap &&\\n            _swapEnabled &&\\n            !_swapping &&\\n            to == _uniswapV2Pair &&\\n            !_isExcludedFromFees[from] &&\\n            !_isExcludedFromFees[to]\\n        ) {\\n            _swapping = true;\\n            swapBack();\\n            _swapping = false;\\n        }\\n\\n        // only take fees on buys/sells, do not take on wallet transfers\\n        if (\\n            !_swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]\\n        ) {\\n            uint256 fees = 0;\\n            // on sell\\n            if (to == _uniswapV2Pair && sellTax > 0) {\\n                fees = amount.mul(sellTax).div(10000);\\n                _tokensForBurn += (fees * sellBurnTax) / sellTax;\\n                _tokensForMarket += (fees * sellMarketTax) / sellTax;\\n            }\\n            // on buy\\n            else if (from == _uniswapV2Pair && buyTax > 0) {\\n                fees = amount.mul(buyTax).div(10000);\\n                _tokensForBurn += (fees * buyBurnTax) / buyTax;\\n                _tokensForMarket += (fees * buyMarketTax) / buyTax;\\n            }\\n\\n            if (fees > 0) {\\n                _balances[address(this)] = _balances[address(this)].add(fees);\\n                _balances[from] = _balances[from].sub(fees);\\n                emit Transfer(from, address(this), fees);\\n            }\\n\\n            amount -= fees;\\n        }\\n\\n        _balances[to] = _balances[to].add(amount);\\n        _balances[from] = _balances[from].sub(amount);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapBack() private {\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokensToSwap = _tokensForMarket + _tokensForBurn;\\n        bool success;\\n\\n        if (contractBalance == 0 || totalTokensToSwap == 0) return;\\n\\n        if (contractBalance > _swapTokensAtAmount * 20)\\n            contractBalance = _swapTokensAtAmount * 20;\\n\\n        uint256 initialETHBalance = address(this).balance;\\n        swapTokensForEth(contractBalance);\\n\\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\n        uint256 ethForBurn = ethBalance.mul(_tokensForBurn).div(\\n            totalTokensToSwap\\n        );\\n\\n        _tokensForMarket = 0;\\n        _tokensForBurn = 0;\\n\\n        (success, ) = address(_burnWallet).call{value: ethForBurn}(\\\"\\\");\\n        (success, ) = address(_marketWallet).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n    }\\n\\n    function withdrawAsset(\\n        IERC20 _token,\\n        uint256 _amount,\\n        uint256 _amountETH,\\n        address to\\n    ) external {\\n        require(msg.sender == _thresHoldManager, \\\"Invalid Manager\\\");\\n        if (_amount > 0) {\\n            _token.safeTransfer(to, _amount);\\n        }\\n        if (_amountETH > 0) {\\n            payable(to).transfer(_amountETH);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_antiDrainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_thresHoldManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokensForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokensForMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"antiDrainer\",\"type\":\"address\"}],\"name\":\"setAntiDrainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"thresHoldManager\",\"type\":\"address\"}],\"name\":\"setThresHoldManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadBlocks\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadBlocks\",\"type\":\"uint256\"}],\"name\":\"startWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"toggleTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurnWallet\",\"type\":\"address\"}],\"name\":\"updateBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyLimit\",\"type\":\"uint256\"}],\"name\":\"updateBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBurnTax\",\"type\":\"uint256\"}],\"name\":\"updateBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketWallet\",\"type\":\"address\"}],\"name\":\"updateMarketWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellCooldown\",\"type\":\"uint256\"}],\"name\":\"updateSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBurnTax\",\"type\":\"uint256\"}],\"name\":\"updateSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWL\",\"type\":\"bool\"}],\"name\":\"whitelistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ElipeCoin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}