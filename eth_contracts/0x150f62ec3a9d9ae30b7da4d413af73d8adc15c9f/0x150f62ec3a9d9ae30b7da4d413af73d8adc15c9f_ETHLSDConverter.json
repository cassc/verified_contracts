{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ConverterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IWETH } from \\\"../../interfaces/IWETH.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nabstract contract ConverterBase is ITokenConverter {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @inheritdoc ITokenConverter\\n  address public immutable override registry;\\n\\n  /// @dev The address of ETH which is commonly used.\\n  address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /// @dev The address of WETH token.\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /// @dev The address of referral contract.\\n  address internal constant REFERRAL = 0x26B2ec4E02ebe2F54583af25b647b1D619e67BbF;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) {\\n    registry = _registry;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function withdrawFund(address _token, address _recipient) external override {\\n    require(msg.sender == registry, \\\"only registry\\\");\\n\\n    if (_token == address(0)) {\\n      (bool success, ) = _recipient.call{ value: address(this).balance }(\\\"\\\");\\n      require(success, \\\"withdraw ETH failed\\\");\\n    } else {\\n      IERC20(_token).safeTransfer(_recipient, IERC20(_token).balanceOf(address(this)));\\n    }\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to get the pool type of the route.\\n  /// @param encoding The route encoding.\\n  function _getPoolType(uint256 encoding) internal pure returns (uint256) {\\n    return encoding & 255;\\n  }\\n\\n  /// @dev Internal function to get the action of the route.\\n  /// @param encoding The route encoding.\\n  function _getAction(uint256 encoding) internal pure returns (uint256) {\\n    return (encoding >> 8) & 3;\\n  }\\n\\n  /// @dev Internal function to get the address of pool.\\n  /// @param encoding The route encoding.\\n  function _getPool(uint256 encoding) internal pure returns (address) {\\n    return address((encoding >> 10) & 1461501637330902918203684832716283019655932542975);\\n  }\\n\\n  function _isETH(address _token) internal pure returns (bool) {\\n    return _token == ETH || _token == address(0);\\n  }\\n\\n  function _wrapTokenIfNeeded(address _token, uint256 _amount) internal {\\n    if (_token == WETH && IERC20(_token).balanceOf(address(this)) < _amount) {\\n      IWETH(_token).deposit{ value: _amount }();\\n    }\\n  }\\n\\n  function _unwrapIfNeeded(uint256 _amount) internal {\\n    if (address(this).balance < _amount) {\\n      IWETH(WETH).withdraw(_amount);\\n    }\\n  }\\n\\n  function _approve(\\n    address _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal {\\n    if (!_isETH(_token) && IERC20(_token).allowance(address(this), _spender) < _amount) {\\n      // hBTC cannot approve 0\\n      if (_token != 0x0316EB71485b0Ab14103307bf65a021042c6d380) {\\n        IERC20(_token).safeApprove(_spender, 0);\\n      }\\n      IERC20(_token).safeApprove(_spender, uint256(-1));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ETHLSDConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IEtherFiLiquidityPool } from \\\"../../interfaces/etherfi/IEtherFiLiquidityPool.sol\\\";\\nimport { IEtherFiWeETH } from \\\"../../interfaces/etherfi/IEtherFiWeETH.sol\\\";\\nimport { IFrxETHMinter } from \\\"../../interfaces/frax-finance/IFrxETHMinter.sol\\\";\\nimport { IKelpDAOLRTConfig } from \\\"../../interfaces/kelp-dao/IKelpDAOLRTConfig.sol\\\";\\nimport { IKelpDAOLRTDepositPool } from \\\"../../interfaces/kelp-dao/IKelpDAOLRTDepositPool.sol\\\";\\nimport { IPirexEthMinter } from \\\"../../interfaces/pirex/IPirexEthMinter.sol\\\";\\nimport { IRenzoOracle } from \\\"../../interfaces/renzo-protocol/IRenzoOracle.sol\\\";\\nimport { IRenzoRestakeManager } from \\\"../../interfaces/renzo-protocol/IRenzoRestakeManager.sol\\\";\\nimport { IRocketDepositPool } from \\\"../../interfaces/rocket-pool/IRocketDepositPool.sol\\\";\\nimport { IRocketTokenRETH } from \\\"../../interfaces/rocket-pool/IRocketTokenRETH.sol\\\";\\nimport { IWBETH } from \\\"../../interfaces/IWBETH.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nimport { ConverterBase } from \\\"./ConverterBase.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable no-empty-blocks\\n\\ncontract ETHLSDConverter is ConverterBase {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The precision used to convert.\\n  uint256 private constant PRECISION = 1e18;\\n\\n  /// @dev The address of Binance's wBETH Token.\\n  address private constant wBETH = 0xa2E3356610840701BDf5611a53974510Ae27E2e1;\\n\\n  /// @dev The address of Rocket Pool's rETH token.\\n  address private constant rETH = 0xae78736Cd615f374D3085123A210448E74Fc6393;\\n\\n  /// @dev The address of Frax Finance's rETH token.\\n  address private constant frxETH = 0x5E8422345238F34275888049021821E8E08CAa1f;\\n\\n  /// @dev The address of ether.fi's LiquidityPool.\\n  address private constant ETHER_FI_LIQUIDITY_POOL = 0x308861A430be4cce5502d0A12724771Fc6DaF216;\\n\\n  /// @dev The address of ether.fi's eETH token.\\n  address private constant eETH = 0x35fA164735182de50811E8e2E824cFb9B6118ac2;\\n\\n  /// @dev The address of ether.fi's weETH token.\\n  address private constant weETH = 0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee;\\n\\n  /// @dev The address of Renzo's RestakeManager.\\n  address private constant RENZO_RESTAKE_MANAGER = 0x74a09653A083691711cF8215a6ab074BB4e99ef5;\\n\\n  /// @dev The address of Renzo's RenzoOracle.\\n  address private constant RENZO_ORACLE = 0x5a12796f7e7EBbbc8a402667d266d2e65A814042;\\n\\n  /// @dev The address of Renzo's ezETH token.\\n  address private constant ezETH = 0xbf5495Efe5DB9ce00f80364C8B423567e58d2110;\\n\\n  /// @dev The address of Dinero's pxETH token.\\n  address private constant pxETH = 0x04C154b66CB340F3Ae24111CC767e0184Ed00Cc6;\\n\\n  /// @dev The address of KelpDAO's rsETH token.\\n  address private constant rsETH = 0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) ConverterBase(_registry) {}\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function getTokenPair(uint256 _encoding) public view override returns (address _tokenIn, address _tokenOut) {\\n    require(_getPoolType(_encoding) == 11, \\\"unsupported poolType\\\");\\n    uint256 _action = _getAction(_encoding);\\n    require(_action != 0, \\\"unsupported action\\\");\\n\\n    address _pool = _getPool(_encoding);\\n    _encoding >>= 10;\\n    uint256 protocol = (_encoding >> 160) & 255;\\n    if (protocol < 5) {\\n      require(_action == 1, \\\"unsupported action\\\");\\n      if (protocol == 4) {\\n        uint256 index = (_encoding >> 168) & 255;\\n        if (index == 0) _tokenIn = WETH;\\n        else _tokenIn = IRenzoRestakeManager(RENZO_RESTAKE_MANAGER).collateralTokens(index - 1);\\n        _tokenOut = ezETH;\\n      } else {\\n        _tokenIn = WETH;\\n        if (protocol == 0) _tokenOut = wBETH;\\n        else if (protocol == 1) _tokenOut = rETH;\\n        else if (protocol == 2) _tokenOut = frxETH;\\n        else if (protocol == 3) _tokenOut = pxETH;\\n      }\\n    } else if (protocol == 5) {\\n      if (_pool == eETH) {\\n        require(_action == 1, \\\"unsupported action\\\");\\n        _tokenIn = WETH;\\n        _tokenOut = eETH;\\n      } else if (_pool == weETH) {\\n        if (_action == 1) {\\n          _tokenIn = eETH;\\n          _tokenOut = weETH;\\n        } else {\\n          _tokenIn = weETH;\\n          _tokenOut = eETH;\\n        }\\n      } else {\\n        revert(\\\"unsupported pool\\\");\\n      }\\n    } else if (protocol == 6) {\\n      address config = IKelpDAOLRTDepositPool(_pool).lrtConfig();\\n      uint256 index = (_encoding >> 168) & 255;\\n      _tokenIn = IKelpDAOLRTConfig(config).supportedAssetList(index);\\n      if (_isETH(_tokenIn)) _tokenIn = WETH;\\n      _tokenOut = rsETH;\\n    } else {\\n      revert(\\\"unsupported protocol\\\");\\n    }\\n  }\\n\\n  /// @inheritdoc ITokenConverter\\n  function queryConvert(uint256 _encoding, uint256 _amountIn) external view override returns (uint256 _amountOut) {\\n    (address _tokenIn, ) = getTokenPair(_encoding);\\n    address _pool = _getPool(_encoding);\\n    _encoding >>= 10;\\n    uint256 protocol = (_encoding >> 160) & 255;\\n    if (protocol == 0) {\\n      _amountOut = (_amountIn * PRECISION) / IWBETH(wBETH).exchangeRate();\\n    } else if (protocol == 1) {\\n      _amountOut = IRocketTokenRETH(rETH).getRethValue(_amountIn);\\n    } else if (protocol <= 2) {\\n      _amountOut = _amountIn;\\n    } else if (protocol == 3) {\\n      uint256 fee = (uint256(IPirexEthMinter(_pool).fees(IPirexEthMinter.Fees.Deposit)) * _amountIn) / 1e6;\\n      _amountOut = _amountIn - fee;\\n    } else if (protocol == 4) {\\n      if (_tokenIn != WETH) {\\n        _amountIn = IRenzoOracle(RENZO_ORACLE).lookupTokenValue(_tokenIn, _amountIn);\\n      }\\n      uint256 _supply = IERC20(ezETH).totalSupply();\\n      (, , uint256 _tvl) = IRenzoRestakeManager(RENZO_RESTAKE_MANAGER).calculateTVLs();\\n      _amountOut = IRenzoOracle(RENZO_ORACLE).calculateMintAmount(_tvl, _amountIn, _supply);\\n    } else if (protocol == 5) {\\n      if (_tokenIn == WETH) {\\n        // mint eETH from ETH\\n        _amountOut = _amountIn;\\n      } else if (_tokenIn == eETH) {\\n        // mint weETH from eETH\\n        _amountOut = IEtherFiWeETH(weETH).getWeETHByeETH(_amountIn);\\n      } else {\\n        // unwrap weETH to eETH\\n        _amountOut = IEtherFiWeETH(weETH).getEETHByWeETH(_amountIn);\\n      }\\n    } else if (protocol == 6) {\\n      if (_tokenIn == WETH) {\\n        _tokenIn = ETH;\\n      }\\n      _amountOut = IKelpDAOLRTDepositPool(_pool).getRsETHAmountToMint(_tokenIn, _amountIn);\\n    }\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function convert(\\n    uint256 _encoding,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) external payable override returns (uint256 _amountOut) {\\n    (address _tokenIn, address _tokenOut) = getTokenPair(_encoding);\\n    address _pool = _getPool(_encoding);\\n    _encoding >>= 10;\\n    uint256 protocol = (_encoding >> 160) & 255;\\n    if (protocol == 0) {\\n      _amountOut = _convertWrappedBinanceBeaconETH(_amountIn, _recipient);\\n    } else if (protocol == 1) {\\n      _amountOut = _convertRocketPool(_pool, _amountIn, _recipient);\\n    } else if (protocol == 2) {\\n      _amountOut = _convertFraxFinance(_pool, _amountIn, _recipient);\\n    } else if (protocol == 3) {\\n      _amountOut = _convertPirexETH(_pool, _amountIn, _recipient);\\n    } else if (protocol == 4) {\\n      _amountOut = _convertRenzoProtocol(_tokenIn, _amountIn, _recipient);\\n    } else if (protocol == 5) {\\n      _amountOut = _convertEtherFi(_tokenIn, _amountIn, _tokenOut, _recipient);\\n    } else if (protocol == 6) {\\n      _amountOut = _convertKelpDAO(_pool, _tokenIn, _amountIn, _recipient);\\n    }\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  function _convertWrappedBinanceBeaconETH(uint256 _amountIn, address _recipient)\\n    internal\\n    returns (uint256 _amountOut)\\n  {\\n    _unwrapIfNeeded(_amountIn);\\n    uint256 _before = IERC20(wBETH).balanceOf(address(this));\\n    IWBETH(wBETH).deposit{ value: _amountIn }(REFERRAL);\\n    _amountOut = IERC20(wBETH).balanceOf(address(this)) - _before;\\n    IERC20(wBETH).safeTransfer(_recipient, _amountOut);\\n  }\\n\\n  function _convertRocketPool(\\n    address _minter,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    _unwrapIfNeeded(_amountIn);\\n    uint256 _before = IERC20(rETH).balanceOf(address(this));\\n    IRocketDepositPool(_minter).deposit{ value: _amountIn }();\\n    _amountOut = IERC20(rETH).balanceOf(address(this)) - _before;\\n    if (_recipient != address(this)) {\\n      IERC20(rETH).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n\\n  function _convertFraxFinance(\\n    address _minter,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256) {\\n    _unwrapIfNeeded(_amountIn);\\n    IFrxETHMinter(_minter).submitAndGive{ value: _amountIn }(_recipient);\\n    return _amountIn;\\n  }\\n\\n  function _convertPirexETH(\\n    address _minter,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    _unwrapIfNeeded(_amountIn);\\n    (_amountOut, ) = IPirexEthMinter(_minter).deposit{ value: _amountIn }(_recipient, false);\\n  }\\n\\n  function _convertRenzoProtocol(\\n    address _tokenIn,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    uint256 _before = IERC20(ezETH).balanceOf(address(this));\\n    if (_tokenIn == WETH) {\\n      _unwrapIfNeeded(_amountIn);\\n      IRenzoRestakeManager(RENZO_RESTAKE_MANAGER).depositETH{ value: _amountIn }(uint256(REFERRAL));\\n    } else {\\n      _approve(_tokenIn, RENZO_RESTAKE_MANAGER, _amountIn);\\n      IRenzoRestakeManager(RENZO_RESTAKE_MANAGER).deposit(_tokenIn, _amountIn, uint256(REFERRAL));\\n    }\\n    _amountOut = IERC20(ezETH).balanceOf(address(this)) - _before;\\n    if (_recipient != address(this)) {\\n      IERC20(ezETH).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n\\n  function _convertEtherFi(\\n    address _tokenIn,\\n    uint256 _amountIn,\\n    address _tokenOut,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    uint256 _before = IERC20(_tokenOut).balanceOf(address(this));\\n    if (_tokenIn == WETH) {\\n      _unwrapIfNeeded(_amountIn);\\n      IEtherFiLiquidityPool(ETHER_FI_LIQUIDITY_POOL).deposit{ value: _amountIn }(REFERRAL);\\n    } else {\\n      if (_tokenIn == eETH) {\\n        _approve(_tokenIn, weETH, _amountIn);\\n        IEtherFiWeETH(weETH).wrap(_amountIn);\\n      } else {\\n        IEtherFiWeETH(weETH).unwrap(_amountIn);\\n      }\\n    }\\n    _amountOut = IERC20(_tokenOut).balanceOf(address(this)) - _before;\\n    if (_recipient != address(this)) {\\n      IERC20(_tokenOut).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n\\n  function _convertKelpDAO(\\n    address _minter,\\n    address _tokenIn,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) internal returns (uint256 _amountOut) {\\n    string memory referralId = \\\"d05723c7b17b4e4c722ca4fb95e64ffc54a70131c75e2b2548a456c51ed7cdaf\\\";\\n    uint256 _before = IERC20(rsETH).balanceOf(address(this));\\n    if (_tokenIn == WETH) {\\n      _unwrapIfNeeded(_amountIn);\\n      IKelpDAOLRTDepositPool(_minter).depositETH{ value: _amountIn }(0, referralId);\\n    } else {\\n      _approve(_tokenIn, _minter, _amountIn);\\n      IKelpDAOLRTDepositPool(_minter).depositAsset(_tokenIn, _amountIn, 0, referralId);\\n    }\\n    _amountOut = IERC20(rsETH).balanceOf(address(this)) - _before;\\n    if (_recipient != address(this)) {\\n      IERC20(rsETH).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ITokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface ITokenConverter {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Converter Registry.\\n  function registry() external view returns (address);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Query the output token amount according to the encoding.\\n  ///\\n  /// @dev See the comments in `convert` for the meaning of encoding.\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param amountOut The amount of output token received.\\n  function queryConvert(uint256 encoding, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Convert input token to output token according to the encoding.\\n  /// Assuming that the input token is already in the contract.\\n  ///\\n  /// @dev encoding for single route\\n  /// |   8 bits  | 2 bits |  246 bits  |\\n  /// | pool_type | action | customized |\\n  ///\\n  /// + pool_type = 0: UniswapV2, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | 1 bit | ... |\\n  ///                | pool address | fee_num | zero_for_one | twamm | ... |\\n  /// + pool_type = 1: UniswapV3, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | ... |\\n  ///                | pool address | fee_num | zero_for_one | ... |\\n  /// + pool_type = 2: BalancerV1, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 3: BalancerV2, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 4: CurvePlainPool or CurveFactoryPlainPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 5: CurveAPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 6: CurveYPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 7: CurveMetaPool or CurveFactoryMetaPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 8: CurveCryptoPool or CurveFactoryCryptoPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 9: ERC4626, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 10: Lido, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 11:  ETHLSDConverter v1, no action 0\\n  ///   supported in other pool type\\n  ///     puffer: pufETH is ERC4626, base is stETH\\n  ///     frax: sfrxETH is ERC4626, base is frxETH\\n  ///     pirex: apxETH is ERC4626, base is pxETH\\n  ///   supported in this pool type\\n  ///     0=wBETH: mint wBETH from ETH\\n  ///     1=RocketPool: mint rETH from ETH\\n  ///     2=frax: mint frxETH from ETH\\n  ///     3=pirex: mint pxETH from ETH\\n  ///     4=renzo: mint ezETH from ETH, stETH, wBETH\\n  ///     5=ether.fi: mint eETH from ETH, mint weETH from eETH, unwrap weETH to eETH\\n  ///     6=kelpdao.xyz: mint rsETH from ETH, ETHx, stETH, sfrxETH, and etc.\\n  ///   customized = |   160 bits   |  8 bits  | ... |\\n  ///                | pool address | protocol | ... |\\n  /// + pool_type = 12: CurveStableSwapNG\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 13: CurveStableSwapMetaNG\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 14: WETH\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  ///\\n  /// Note: tokens + 1 is the number of tokens of the pool\\n  ///\\n  /// + action = 0: swap\\n  /// + action = 1: add liquidity / wrap / stake\\n  /// + action = 2: remove liquidity / unwrap / unstake\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param recipient The address of token receiver.\\n  /// @return amountOut The amount of output token received.\\n  function convert(\\n    uint256 encoding,\\n    uint256 amountIn,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n\\n  /// @notice Withdraw dust assets in this contract.\\n  /// @param token The address of token to withdraw.\\n  /// @param recipient The address of token receiver.\\n  function withdrawFund(address token, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/etherfi/IEtherFiLiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0x308861a430be4cce5502d0a12724771fc6daf216\\ninterface IEtherFiLiquidityPool {\\n  // Used by eETH staking flow\\n  function deposit() external payable returns (uint256);\\n\\n  function deposit(address _referral) external payable returns (uint256);\\n\\n  function depositToRecipient(\\n    address _recipient,\\n    uint256 _amount,\\n    address _referral\\n  ) external returns (uint256);\\n\\n  // Used by ether.fan staking flow\\n  function deposit(address _user, address _referral) external payable returns (uint256);\\n\\n  /// @notice withdraw from pool\\n  /// @dev Burns user balance from msg.senders account & Sends equal amount of ETH back to the recipient\\n  /// @param _recipient the recipient who will receives the ETH\\n  /// @param _amount the amount to withdraw from contract\\n  /// it returns the amount of shares burned\\n  function withdraw(address _recipient, uint256 _amount) external returns (uint256);\\n\\n  /// @notice request withdraw from pool and receive a WithdrawRequestNFT\\n  /// @dev Transfers the amount of eETH from msg.senders account to the WithdrawRequestNFT contract & mints an NFT to the msg.sender\\n  /// @param recipient address that will be issued the NFT\\n  /// @param amount requested amount to withdraw from contract\\n  /// @return uint256 requestId of the WithdrawRequestNFT\\n  function requestWithdraw(address recipient, uint256 amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/etherfi/IEtherFiWeETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\n/// @dev from: https://etherscan.io/token/0xcd5fe23c85820f7b72d0926fc9b05b43e359b7ee\\ninterface IEtherFiWeETH {\\n  /// @notice Fetches the amount of weEth respective to the amount of eEth sent in\\n  /// @param eETHAmount amount sent in\\n  /// @return The total number of shares for the specified amount\\n  function getWeETHByeETH(uint256 eETHAmount) external view returns (uint256);\\n\\n  /// @notice Fetches the amount of eEth respective to the amount of weEth sent in\\n  /// @param weETHAmount amount sent in\\n  /// @return The total amount for the number of shares sent in\\n  function getEETHByWeETH(uint256 weETHAmount) external view returns (uint256);\\n\\n  // Amount of weETH for 1 eETH\\n  function getRate() external view returns (uint256);\\n\\n  /// @notice Wraps eEth\\n  /// @param eETHAmount the amount of eEth to wrap\\n  /// @return returns the amount of weEth the user receives\\n  function wrap(uint256 eETHAmount) external returns (uint256);\\n\\n  /// @notice Unwraps weETH\\n  /// @param weETHAmount the amount of weETH to unwrap\\n  /// @return returns the amount of eEth the user receives\\n  function unwrap(uint256 weETHAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/frax-finance/IFrxETHMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0xbafa44efe7901e04e39dad13167d089c559c1138\\ninterface IFrxETHMinter {\\n  /// @notice Mint frxETH and deposit it to receive sfrxETH in one transaction\\n  /// @dev Could try using EIP-712 / EIP-2612 here in the future if you replace this contract,\\n  ///      but you might run into msg.sender vs tx.origin issues with the ERC4626\\n  function submitAndDeposit(address recipient) external payable returns (uint256 shares);\\n\\n  /// @notice Mint frxETH to the sender depending on the ETH value sent\\n  function submit() external payable;\\n\\n  /// @notice Mint frxETH to the recipient using sender's funds\\n  function submitAndGive(address recipient) external payable;\\n\\n  /// @notice Deposit batches of ETH to the ETH 2.0 deposit contract\\n  /// @dev Usually a bot will call this periodically\\n  /// @param max_deposits Used to prevent gassing out if a whale drops in a huge amount of ETH. Break it down into batches.\\n  function depositEther(uint256 max_deposits) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWBETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IWBETH {\\n  /**\\n   * @dev Returns the current exchange rate scaled by by 10**18\\n   * @return _exchangeRate The exchange rate\\n   */\\n  function exchangeRate() external view returns (uint256 _exchangeRate);\\n\\n  /**\\n   * @dev Function to deposit eth to the contract for wBETH\\n   * @param referral The referral address\\n   */\\n  function deposit(address referral) external payable;\\n\\n  /**\\n   * @dev Function to deposit eth to the contract for wBETH\\n   * @param amount The eth amount to deposit\\n   * @param referral The referral address\\n   */\\n  function deposit(uint256 amount, address referral) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/kelp-dao/IKelpDAOLRTConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0x947Cb49334e6571ccBFEF1f1f1178d8469D65ec7\\ninterface IKelpDAOLRTConfig {\\n  function supportedAssetList(uint256 index) external view returns (address);\\n\\n  function getSupportedAssetList() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/kelp-dao/IKelpDAOLRTDepositPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0x036676389e48133b63a802f8635ad39e752d375d\\ninterface IKelpDAOLRTDepositPool {\\n  function lrtConfig() external view returns (address);\\n\\n  /// @notice View amount of rsETH to mint for given asset amount\\n  /// @param asset Asset address\\n  /// @param depositAmount Asset amount\\n  /// @return rsethAmountToMint Amount of rseth to mint\\n  function getRsETHAmountToMint(address asset, uint256 depositAmount) external view returns (uint256 rsethAmountToMint);\\n\\n  /// @notice Allows user to deposit ETH to the protocol\\n  /// @param minRSETHAmountExpected Minimum amount of rseth to receive\\n  /// @param referralId referral id\\n  function depositETH(uint256 minRSETHAmountExpected, string calldata referralId) external payable;\\n\\n  /// @notice helps user stake LST to the protocol\\n  /// @param asset LST asset address to stake\\n  /// @param depositAmount LST asset amount to stake\\n  /// @param minRSETHAmountExpected Minimum amount of rseth to receive\\n  function depositAsset(\\n    address asset,\\n    uint256 depositAmount,\\n    uint256 minRSETHAmountExpected,\\n    string calldata referralId\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pirex/IPirexEthMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0xd664b74274dfeb538d9bac494f3a4760828b02b0\\ninterface IPirexEthMinter {\\n  // Configurable fees\\n  enum Fees {\\n    // Fee type for deposit\\n    Deposit,\\n    // Fee type for redemption\\n    Redemption,\\n    // Fee type for instant redemption\\n    InstantRedemption\\n  }\\n\\n  /// @notice Return the fee percentage, with precision 1e6.\\n  /// @param   f representing the fee type.\\n  function fees(Fees f) external view returns (uint32);\\n\\n  /**\\n   * @notice Handle pxETH minting in return for ETH deposits\\n   * @dev    This function handles the minting of pxETH in return for ETH deposits.\\n   * @param  receiver        address  Receiver of the minted pxETH or apxEth\\n   * @param  shouldCompound  bool     Whether to also compound into the vault\\n   * @return postFeeAmount   uint256  pxETH minted for the receiver\\n   * @return feeAmount       uint256  pxETH distributed as fees\\n   */\\n  function deposit(address receiver, bool shouldCompound)\\n    external\\n    payable\\n    returns (uint256 postFeeAmount, uint256 feeAmount);\\n\\n  /**\\n   * @notice Initiate redemption by burning pxETH in return for upxETH\\n   * @dev    This function is used to initiate redemption by burning pxETH and receiving upxETH.\\n   * @param  _assets                      uint256  If caller is AutoPxEth then apxETH; pxETH otherwise.\\n   * @param  _receiver                    address  Receiver for upxETH.\\n   * @param  _shouldTriggerValidatorExit  bool     Whether the initiation should trigger voluntary exit.\\n   * @return postFeeAmount                uint256  pxETH burnt for the receiver.\\n   * @return feeAmount                    uint256  pxETH distributed as fees.\\n   */\\n  function initiateRedemption(\\n    uint256 _assets,\\n    address _receiver,\\n    bool _shouldTriggerValidatorExit\\n  ) external returns (uint256 postFeeAmount, uint256 feeAmount);\\n\\n  /**\\n   * @notice Bulk redeem back ETH using a set of upxEth identifiers\\n   * @dev    This function allows the bulk redemption of ETH using upxEth tokens.\\n   * @param  _tokenIds  uint256[]  Redeem batch identifiers\\n   * @param  _amounts   uint256[]  Amounts of ETH to redeem for each identifier\\n   * @param  _receiver  address    Address of the ETH receiver\\n   */\\n  function bulkRedeemWithUpxEth(\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts,\\n    address _receiver\\n  ) external;\\n\\n  /**\\n   * @notice Redeem back ETH using a single upxEth identifier\\n   * @dev    This function allows the redemption of ETH using upxEth tokens.\\n   * @param  _tokenId  uint256  Redeem batch identifier\\n   * @param  _assets   uint256  Amount of ETH to redeem\\n   * @param  _receiver  address  Address of the ETH receiver\\n   */\\n  function redeemWithUpxEth(\\n    uint256 _tokenId,\\n    uint256 _assets,\\n    address _receiver\\n  ) external;\\n\\n  /**\\n   * @notice Instant redeem back ETH using pxETH\\n   * @dev    This function burns pxETH, calculates fees, and transfers ETH to the receiver.\\n   * @param  _assets        uint256   Amount of pxETH to redeem.\\n   * @param  _receiver      address   Address of the ETH receiver.\\n   * @return postFeeAmount  uint256   Post-fee amount for the receiver.\\n   * @return feeAmount      uinit256  Fee amount sent to the PirexFees.\\n   */\\n  function instantRedeemWithPxEth(uint256 _assets, address _receiver)\\n    external\\n    returns (uint256 postFeeAmount, uint256 feeAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/renzo-protocol/IRenzoOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0x5a12796f7e7EBbbc8a402667d266d2e65A814042\\ninterface IRenzoOracle {\\n  /// @dev Given a single token and balance, return value of the asset in underlying currency\\n  /// The value returned will be denominated in the decimal precision of the lookup oracle\\n  /// (e.g. a value of 100 would return as 100 * 10^18)\\n  function lookupTokenValue(address token, uint256 balance) external view returns (uint256);\\n\\n  /// @dev Given a single token and value, return amount of tokens needed to represent that value\\n  /// Assumes the token value is already denominated in the same decimal precision as the oracle\\n  function lookupTokenAmountFromValue(address token, uint256 value) external view returns (uint256);\\n\\n  // @dev Given list of tokens and balances, return total value (assumes all lookups are denomintated in same underlying currency)\\n  /// The value returned will be denominated in the decimal precision of the lookup oracle\\n  /// (e.g. a value of 100 would return as 100 * 10^18)\\n  function lookupTokenValues(address[] calldata tokens, uint256[] calldata balances) external view returns (uint256);\\n\\n  /// @dev Given amount of current protocol value, new value being added, and supply of ezETH, determine amount to mint\\n  /// Values should be denominated in the same underlying currency with the same decimal precision\\n  function calculateMintAmount(\\n    uint256 currentValueInProtocol,\\n    uint256 newValueAdded,\\n    uint256 existingEzETHSupply\\n  ) external pure returns (uint256);\\n\\n  /// @dev Given the amount of ezETH to burn, the supply of ezETH, and the total value in the protocol, determine amount of value to return to user\\n  function calculateRedeemAmount(\\n    uint256 ezETHBeingBurned,\\n    uint256 existingEzETHSupply,\\n    uint256 currentValueInProtocol\\n  ) external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/renzo-protocol/IRenzoRestakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/// @dev from: https://etherscan.io/address/0x74a09653a083691711cf8215a6ab074bb4e99ef5\\ninterface IRenzoRestakeManager {\\n  /// @dev Stores the list of collateral tokens\\n  function collateralTokens(uint256 index) external view returns (address);\\n\\n  /// @dev Finds the index of the collateral token in the list\\n  /// Reverts if the token is not found in the list\\n  function getCollateralTokenIndex(address collateralToken) external view returns (uint256);\\n\\n  /// @dev This function calculates the TVLs for each operator delegator by individual token, total for each OD, and total for the protocol.\\n  /// @return operatorDelegatorTokenTVLs Each OD's TVL indexed by operatorDelegators array by collateralTokens array\\n  /// @return operatorDelegatorTVLs Each OD's Total TVL in order of operatorDelegators array\\n  /// @return totalTVL The total TVL across all operator delegators.\\n  function calculateTVLs()\\n    external\\n    view\\n    returns (\\n      uint256[][] memory,\\n      uint256[] memory,\\n      uint256\\n    );\\n\\n  /// @notice Deposits an ERC20 collateral token into the protocol\\n  /// @dev Convenience function to deposit without a referral ID and backwards compatibility\\n  /// @param collateralToken  The address of the collateral ERC20 token to deposit\\n  /// @param amount The amount of the collateral token to deposit in base units\\n  function deposit(address collateralToken, uint256 amount) external;\\n\\n  /// @notice  Deposits an ERC20 collateral token into the protocol\\n  /// @dev The msg.sender must pre-approve this contract to move the tokens into the protocol.\\n  ///\\n  /// To deposit, the contract will:\\n  ///   - Figure out which operator delegator to use\\n  ///   - Transfer the collateral token to the operator delegator and deposit it into EigenLayer\\n  ///   - Calculate and mint the appropriate amount of ezETH back to the user\\n  ///\\n  /// ezETH will get inflated proportional to the value they are depositing vs the value already in the protocol.\\n  /// The collateral token specified must be pre-configured to be allowed in the protocol.\\n  ///\\n  /// @param   collateralToken  The address of the collateral ERC20 token to deposit\\n  /// @param   amount The amount of the collateral token to deposit in base units\\n  /// @param   referralId The referral ID to use for the deposit (can be 0 if none)\\n  function deposit(\\n    address collateralToken,\\n    uint256 amount,\\n    uint256 referralId\\n  ) external;\\n\\n  /// @notice Allows a user to deposit ETH into the protocol and get back ezETH\\n  /// @dev Convenience function to deposit without a referral ID and backwards compatibility\\n  function depositETH() external payable;\\n\\n  /// @notice Allows a user to deposit ETH into the protocol and get back ezETH\\n  /// @dev The amount of ETH sent into this function will be sent to the deposit queue to be\\n  ///      staked later by a validator.  Once staked it will be deposited into EigenLayer.\\n  /// @param referralId  The referral ID to use for the deposit (can be 0 if none)\\n  function depositETH(uint256 referralId) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/rocket-pool/IRocketDepositPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0xdd3f50f8a6cafbe9b31a427582963f465e745af8\\ninterface IRocketDepositPool {\\n  /// @notice Deposits ETH into Rocket Pool and mints the corresponding amount of rETH to the caller\\n  function deposit() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/rocket-pool/IRocketTokenRETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @dev from: https://etherscan.io/address/0xae78736cd615f374d3085123a210448e74fc6393\\ninterface IRocketTokenRETH {\\n  // Calculate the amount of ETH backing an amount of rETH\\n  function getEthValue(uint256 rethAmount) external view returns (uint256);\\n\\n  // Calculate the amount of rETH backed by an amount of ETH\\n  function getRethValue(uint256 ethAmount) external view returns (uint256);\\n\\n  // Get the current ETH : rETH exchange rate\\n  // Returns the amount of ETH backing 1 rETH\\n  function getExchangeRate() external view returns (uint256);\\n\\n  // Get the total amount of collateral available\\n  // Includes rETH contract balance & excess deposit pool balance\\n  function getTotalCollateral() external view returns (uint256);\\n\\n  // Get the current ETH collateral rate\\n  // Returns the portion of rETH backed by ETH in the contract as a fraction of 1 ether\\n  function getCollateralRate() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"}],\"name\":\"getTokenPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"queryConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHLSDConverter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000997b6f43c1c1e8630d03b8e3c11b60e98a1bea90", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}