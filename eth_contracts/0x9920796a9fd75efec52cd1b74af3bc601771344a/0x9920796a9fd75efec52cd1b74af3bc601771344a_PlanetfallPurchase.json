{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/packdrop/interfaces/IPlanetfallPurchase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IPlanetfallPurchase {\\n    error ContractDisabled();\\n    error InvalidCaller();\\n    error InvalidPayment(uint256 ethValue);\\n    error InvalidPlayerAmount(uint256 totalAmount);\\n\\n    event PrimeAddressSet(address prime);\\n    event CollectorPriceSet(uint256 collectorPrice);\\n    event PlayerPriceSet(uint256 playerPrice);\\n    event PacksPurchased(\\n        address indexed paymentAddress,\\n        uint256 collectorAmount,\\n        uint256 playerAmount,\\n        uint256 ethAmount,\\n        uint256 primeAmount\\n    );\\n    event IsDisabledSet(bool isDisabled);\\n    event ParallelPlanetfallSet(address parallelPlanetfall);\\n    event AllowlistSet(address[] allowlist, bool val);\\n    event PullFromAddressSet(address pullFromAddress);\\n    event CollectorTokenIdSet(uint256 collectorTokenId);\\n    event PlayerTokenIdSet(uint256 playerTokenId);\\n}\\n\"\r\n    },\r\n    \"contracts/packdrop/PlanetfallPurchase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IPlanetfallPurchase } from \\\"./interfaces/IPlanetfallPurchase.sol\\\";\\nimport { EchelonGateways } from \\\"../prime-token/EchelonGateways.sol\\\";\\n\\ncontract PlanetfallPurchase is IPlanetfallPurchase, Ownable, EchelonGateways {\\n    /// @notice Prime contract address\\n    address public prime = 0xb23d80f5FefcDDaa212212F028021B41DEd428CF;\\n\\n    /// @notice Disabled state of the contract\\n    bool public isDisabled = true;\\n\\n    /// @notice Price of each pack\\n    uint256 public collectorPrice = 0.1 ether;\\n\\n    /// @notice Price of a player pack\\n    uint256 public playerPrice = 4.35 ether;\\n\\n    /// @notice The tokenId of the planetfall pack redeemable\\n    uint256 public collectorTokenId = 100200001;\\n    uint256 public playerTokenId = 100200003;\\n\\n    /// @notice Allowlist that bypasses the disabled variable\\n    mapping(address => bool) public allowlist;\\n\\n    /// @notice Address of stock pile to pull packs from\\n    address public pullFromAddress = 0x425Aea4D6a1C0B325D8f5fEBA20d9951ADF8775B;\\n\\n    /// @notice Parallel Planetfall collection smart contract address\\n    IERC1155 public parallelPlanetfall =\\n        IERC1155(0x6811f2f20c42f42656A3c8623aD5e9461b83f719);\\n\\n    /**\\n     * @notice Function invoked by the prime token contract to handle totalCardCount increase and emit payment event\\n     * @param _from The address of the original msg.sender\\n     * @param _ethValue The amount of eth that was sent from the prime token contract\\n     * @param _primeValue The amount of prime that was sent from the prime token contract\\n     * @param _data Catch-all param to allow the caller to pass additional data to the handler, includes the amount of cards they want to purchase\\n     */\\n    function handleInvokeEchelon(\\n        address _from,\\n        address,\\n        address,\\n        uint256,\\n        uint256 _ethValue,\\n        uint256 _primeValue,\\n        bytes memory _data\\n    ) public payable {\\n        if (isDisabled && !allowlist[_from]) {\\n            revert ContractDisabled();\\n        }\\n\\n        if (msg.sender != prime) {\\n            revert InvalidCaller();\\n        }\\n\\n        uint256[] memory amounts = abi.decode(_data, (uint256[]));\\n\\n        if (\\n            amounts[0] * collectorPrice != _ethValue ||\\n            amounts[1] * playerPrice != _primeValue\\n        ) {\\n            revert InvalidPayment(_primeValue);\\n        }\\n\\n        if (amounts[0] > 0) {\\n            parallelPlanetfall.safeTransferFrom(\\n                pullFromAddress,\\n                _from,\\n                collectorTokenId,\\n                amounts[0],\\n                \\\"\\\"\\n            );\\n        }\\n\\n        if (amounts[1] > 0) {\\n            parallelPlanetfall.safeTransferFrom(\\n                pullFromAddress,\\n                _from,\\n                playerTokenId,\\n                amounts[1],\\n                \\\"\\\"\\n            );\\n        }\\n\\n        emit PacksPurchased(\\n            _from,\\n            amounts[1],\\n            amounts[0],\\n            _ethValue,\\n            _primeValue\\n        );\\n    }\\n\\n    /** @notice Set the prime token address\\n     *  @param _prime prime token address\\n     */\\n    function setPrimeAddress(address _prime) external onlyOwner {\\n        prime = _prime;\\n        emit PrimeAddressSet(_prime);\\n    }\\n\\n    /** @notice Set the price of packs\\n     *  @param _collectorPrice new collectorPrice to set\\n     */\\n    function setCollectorPrice(uint256 _collectorPrice) external onlyOwner {\\n        collectorPrice = _collectorPrice;\\n        emit CollectorPriceSet(_collectorPrice);\\n    }\\n\\n    /** @notice Set player pack price\\n     *  @param _playerPrice new collectorPrice to set\\n     */\\n    function setPlayerPrice(uint256 _playerPrice) external onlyOwner {\\n        playerPrice = _playerPrice;\\n        emit PlayerPriceSet(_playerPrice);\\n    }\\n\\n    /** @notice Set the isDisabled state\\n     *  @param _isDisabled new isDisabled state\\n     */\\n    function setIsDisabled(bool _isDisabled) external onlyOwner {\\n        isDisabled = _isDisabled;\\n        emit IsDisabledSet(_isDisabled);\\n    }\\n\\n    /** @notice Set the address of Parallel Aux Items contract\\n     *  @param _parallelPlanetfallAddress new Parallel Aux Items address\\n     */\\n    function setParallelPlanetfall(\\n        address _parallelPlanetfallAddress\\n    ) external onlyOwner {\\n        parallelPlanetfall = IERC1155(_parallelPlanetfallAddress);\\n        emit ParallelPlanetfallSet(_parallelPlanetfallAddress);\\n    }\\n\\n    /**\\n     * @notice Sets the allowlist\\n     * @dev Only callable by the owner\\n     * @param _allowlist The new allowlist\\n     * @param _val The new value\\n     */\\n    function setAllowlist(\\n        address[] calldata _allowlist,\\n        bool _val\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _allowlist.length; i++) {\\n            allowlist[_allowlist[i]] = _val;\\n        }\\n\\n        emit AllowlistSet(_allowlist, _val);\\n    }\\n\\n    /** @notice Set the address that packs will be pulled from\\n     *  @param _pullFromAddress new pullFromAddress\\n     */\\n    function setPullFromAddress(address _pullFromAddress) external onlyOwner {\\n        pullFromAddress = _pullFromAddress;\\n        emit PullFromAddressSet(_pullFromAddress);\\n    }\\n\\n    /**\\n     * @notice Setter for collectorTokenId\\n     * @dev Only callable by owner\\n     * @param _collectorTokenId New collectorTokenId\\n     */\\n    function setCollectorTokenId(uint256 _collectorTokenId) external onlyOwner {\\n        collectorTokenId = _collectorTokenId;\\n        emit CollectorTokenIdSet(_collectorTokenId);\\n    }\\n\\n    /**\\n     * @notice Setter for playerTokenId\\n     * @dev Only callable by owner\\n     * @param _playerTokenId New playerTokenId\\n     */\\n    function setPlayerTokenId(uint256 _playerTokenId) external onlyOwner {\\n        playerTokenId = _playerTokenId;\\n        emit PlayerTokenIdSet(_playerTokenId);\\n    }\\n\\n    /**\\n     * @notice Sweep all eth from contract\\n     * @dev Only callable by owner\\n     */\\n    function sweep() public onlyOwner {\\n        (bool sent, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @notice Sweep all eth from contract to address\\n     * @dev Only callable by owner\\n     * @param _amount The amount of eth to sweep\\n     * @param _address The address to send eth to\\n     */\\n    function sweepToAddress(\\n        uint _amount,\\n        address payable _address\\n    ) public onlyOwner {\\n        (bool sent, ) = _address.call{ value: _amount }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/prime-token/EchelonGateways.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface EchelonGateways {\\n    // Invoked by the Prime Token contract to handle arbitrary functionalities by the given gateway\\n    function handleInvokeEchelon(\\n        address from,\\n        address ethDestination,\\n        address primeDestination,\\n        uint256 id,\\n        uint256 ethValue,\\n        uint256 primeValue,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ContractDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"InvalidPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidPlayerAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"AllowlistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectorPrice\",\"type\":\"uint256\"}],\"name\":\"CollectorPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectorTokenId\",\"type\":\"uint256\"}],\"name\":\"CollectorTokenIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDisabled\",\"type\":\"bool\"}],\"name\":\"IsDisabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"primeAmount\",\"type\":\"uint256\"}],\"name\":\"PacksPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parallelPlanetfall\",\"type\":\"address\"}],\"name\":\"ParallelPlanetfallSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerPrice\",\"type\":\"uint256\"}],\"name\":\"PlayerPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerTokenId\",\"type\":\"uint256\"}],\"name\":\"PlayerTokenIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prime\",\"type\":\"address\"}],\"name\":\"PrimeAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pullFromAddress\",\"type\":\"address\"}],\"name\":\"PullFromAddressSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectorTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_primeValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"handleInvokeEchelon\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parallelPlanetfall\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullFromAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allowlist\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectorPrice\",\"type\":\"uint256\"}],\"name\":\"setCollectorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectorTokenId\",\"type\":\"uint256\"}],\"name\":\"setCollectorTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDisabled\",\"type\":\"bool\"}],\"name\":\"setIsDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parallelPlanetfallAddress\",\"type\":\"address\"}],\"name\":\"setParallelPlanetfall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerPrice\",\"type\":\"uint256\"}],\"name\":\"setPlayerPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerTokenId\",\"type\":\"uint256\"}],\"name\":\"setPlayerTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prime\",\"type\":\"address\"}],\"name\":\"setPrimeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pullFromAddress\",\"type\":\"address\"}],\"name\":\"setPullFromAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"sweepToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlanetfallPurchase", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}