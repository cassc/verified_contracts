{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vepoch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Developed by Moai Labs LLC, owned by EPOCH DAO\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract VEpoch is ERC20, Ownable {\\n    // @dev Unknown tokens will/must not be used with this contract\\n\\n    struct Deposit {\\n        address owner;\\n        uint32 depositTs;\\n        uint32 lockDuration;\\n        uint256 depositTokenBalance;\\n    }\\n    mapping(uint256 => Deposit) public deposits;\\n    uint256 public depositCount;\\n    uint256 public maxDepositDuration = 730 days;\\n\\n    IERC20 public immutable depositToken;\\n\\n    // Admin functionalities that can be locked forever\\n    bool public maxDepositDurationLocked;\\n    bool public authorisedLocked;\\n\\n    mapping(address => bool) public authorised;\\n\\n    event Deposited(uint256 depositId);\\n    event DepositExtend(uint256 _depositId, uint32 _secondsExtended);\\n    event WithdrawnForfeit(uint256 depositId, uint256 depositTokensReturned, uint256 veTokensBurned, uint256 rewardForfeit);\\n    event Withdrawn(uint256 depositId, uint256 depositTokensReturned, uint256 veTokensBurned);\\n    event Authorised(address authorisedAddress, bool newAuthorisationStatus);\\n    event MaxDepositDurationSet(uint256 newMaxDepositDuration);\\n    event DepositOwnershipTransferred(uint256 depositId, address newOwner);\\n    event RewardClaimed(uint256 depositId, uint256 yieldTokenAmount);\\n    event RewardForfeit(uint256 depositId, uint256 yieldTokenAmount);\\n\\n    // Yield earning related\\n    IERC20Metadata public immutable rewardToken;\\n    mapping(uint256 => uint256) public rewardStakingPower;\\n    uint256 private rewardIndex;\\n    mapping(uint256 => uint256) private rewardIndexOf;\\n    mapping(uint256 => uint256) private earned;\\n    mapping(uint256 => uint256) public rewardTokensClaimed;\\n\\n    constructor(address _depositToken, address _yieldToken, address _newOwner) ERC20(\\\"Vote Escrow Epoch\\\", \\\"vEPOCH\\\") {\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20Metadata(_yieldToken);\\n        authorised[address(this)] = true;\\n\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /// @notice Allows only authorised addresses to transfer tokens from their address\\n    /// @dev Can only be called by anyone but will revert if caller is not authorised\\n    /// @param to - The address to send veTokens to\\n    /// @param amount - The amount of veTokens to send\\n    /// @return boolean on success\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        require(authorised[msg.sender], \\\"NON TRANSFERABLE\\\");\\n\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Allows only authorised addresses to transfer tokens from/to any address\\n    /// @dev Note: Authorised addresses NEED approvals from users (allowance)\\n    /// @param from - The address to send veTokens from\\n    /// @param to - The address to send veTokens to\\n    /// @param amount - The amount of veTokens to send\\n    /// @return boolean on success\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        require(authorised[msg.sender], \\\"NON TRANSFERABLE\\\");\\n\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Allows anyone to add reward tokens (which will be distributed proportionally)\\n    /// @param _tokenAmount - The number of reward tokens to deposit\\n    function addRewardTokens(uint256 _tokenAmount) external {\\n        rewardIndex += (_tokenAmount * 1e18) / totalSupply();\\n        rewardToken.transferFrom(msg.sender, address(this), _tokenAmount);\\n    }\\n\\n    /// @notice Computes reward tokens for a given depositId\\n    /// @param _depositId - The depositId to calculate rewards for\\n    /// @return The number of pending reward tokens\\n    function _calculateRewards(uint256 _depositId) private view returns (uint256) {\\n        uint256 shares = rewardStakingPower[_depositId];\\n        return (shares * (rewardIndex - rewardIndexOf[_depositId])) / 1e18;\\n    }\\n\\n    /// @notice Determine the total number of reward tokens earned for a given depositId\\n    /// @param _depositId - The depositId you want information for\\n    /// @return The number of unclaimed reward tokens\\n    function calculateRewardsEarned(uint256 _depositId) external view returns (uint256) {\\n        return earned[_depositId] + _calculateRewards(_depositId);\\n    }\\n\\n    /// @notice Updates rewards earned for a given depositId\\n    /// @param _depositId - The depositId you want to update rewards earned for\\n    function _updateRewards(uint256 _depositId) private {\\n        earned[_depositId] += _calculateRewards(_depositId);\\n        rewardIndexOf[_depositId] = rewardIndex;\\n    }\\n\\n    /// @notice Used internally to update state before reward transfer\\n    /// @param _depositId - The depositId you want to update state for\\n    /// @return reward - The number of reward tokens available to claim\\n    function _claimYield(uint256 _depositId) private returns (uint256 reward) {\\n        // Ensure the claimer owns the specified deposit\\n        require(deposits[_depositId].owner == msg.sender, \\\"NOT OWNER\\\");\\n        _updateRewards(_depositId);\\n\\n        reward = earned[_depositId];\\n        earned[_depositId] = 0;\\n        rewardTokensClaimed[_depositId] += reward;\\n\\n        emit RewardClaimed(_depositId, reward);\\n    }\\n\\n    /// @notice Allows user to claim reward tokens earned for a given depositId\\n    /// @param _depositId - The depositId you want to claim rewards from\\n    function claimYield(uint256 _depositId) public {\\n        uint256 reward = _claimYield(_depositId);\\n        rewardToken.transfer(msg.sender, reward);\\n    }\\n\\n    /// @notice Allows user to claim reward tokens earned for one to many depositId's\\n    /// @param _depositIds -  An array of depositIds you want to claim rewards from\\n    function claimYield(uint256[] calldata _depositIds) public {\\n        uint256 totalRewards;\\n        for(uint256 i = 0; i < _depositIds.length; i++) {\\n            totalRewards += _claimYield(_depositIds[i]);\\n        }\\n        rewardToken.transfer(msg.sender, totalRewards);\\n    }\\n\\n    /// @notice Returns the veTokens minted for a given tokenAmount and duration\\n    /// @dev This function will IGNORE the maximum deposit duration\\n    /// @param _tokenAmount - The number of deposit tokens to lock\\n    /// @param _duration - The duration in seconds to lock for\\n    /// @return The number of veTokens that would be minted\\n    function calculateVeTokens(uint256 _tokenAmount, uint256 _duration) public pure returns(uint256) {\\n        // @dev 0.000011574074074075 veTokens per 1 deposit token for 1 second\\n        // @dev 365 days lock = ~ 365\\n        return (_tokenAmount * (11574074074075 * _duration)) / 1e18;\\n    }\\n\\n    /// @notice Deposits depositToken for a given duration and mints veTokens\\n    /// @dev Deposits can be made on behalf of another address\\n    /// @param _tokenAmount - The number of deposit tokens to lock\\n    /// @param _duration - The duration in seconds to lock for\\n    /// @param _behalfOf - The address that will own this newly created deposit\\n    /// @return _depositCount - The new newly created depositId\\n    function deposit(uint256 _tokenAmount, uint32 _duration, address _behalfOf) external returns(uint256 _depositCount) {\\n\\n        require(_duration > 3599 && _duration <= maxDepositDuration, \\\"INVALID DURATION\\\");\\n\\n        _depositCount = ++depositCount;\\n        deposits[_depositCount] = Deposit(\\n            _behalfOf,\\n            uint32(block.timestamp),\\n            _duration,\\n            _tokenAmount\\n        );\\n\\n        uint256 veTokensMinted = calculateVeTokens(_tokenAmount, _duration);\\n        require(veTokensMinted > 0, \\\"INSUFFICIENT VEPOCH MINTED\\\");\\n        _mint(_behalfOf, veTokensMinted);\\n\\n        // Ensure this deposit is earning\\n        _updateRewards(_depositCount);\\n        rewardStakingPower[_depositCount] += veTokensMinted;\\n\\n        depositToken.transferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        emit Deposited(_depositCount);\\n\\n        return _depositCount;\\n    }\\n\\n    /// @notice Allows withdrawing of deposit tokens which will forfeit some number of reward tokens\\n    /// @dev Users can withdraw in full or partially\\n    /// @param _depositId - The depositId you want to withdrawForfeit from\\n    /// @param _depositTokensToRemove - The number of deposit tokens to remove\\n    function withdrawForfeit(uint256 _depositId, uint256 _depositTokensToRemove) external {\\n        Deposit storage d = deposits[_depositId];\\n\\n        // Ensure the caller is the owner of said deposit\\n        require(d.owner == msg.sender, \\\"NOT OWNER\\\");\\n        // Ensure this function is only used for deposits where lock has not ended\\n        require(\\n            (d.depositTs + d.lockDuration) > block.timestamp,\\n            \\\"DEPOSIT IS MATURED\\\"\\n        );\\n        require(d.depositTs != block.timestamp, \\\"DEPOSIT IN SAME BLOCK\\\");\\n\\n        // Compute what percentage of depositTokens user wants to remove\\n        uint256 percentage = (_depositTokensToRemove * 1e18) / d.depositTokenBalance;\\n\\n        // Decrease deposit balance first, then compute new veToken balance\\n        d.depositTokenBalance -= _depositTokensToRemove;\\n        uint256 veEndTokenBalance = calculateVeTokens(d.depositTokenBalance, d.lockDuration);\\n\\n        // Determine veToken amount to burn\\n        uint256 burnAmount = rewardStakingPower[_depositId] - veEndTokenBalance;\\n        require(burnAmount > 0, \\\"INSUFFICIENT VEPOCH BURNED\\\");\\n        _burn(msg.sender, burnAmount);  // Burn them\\n\\n        // Update rewards, then reduce staking power\\n        _updateRewards(_depositId);\\n        rewardStakingPower[_depositId] -= burnAmount;\\n\\n        uint256 forfeitReward = ((earned[_depositId] + rewardTokensClaimed[_depositId]) * percentage) / 1e18;\\n\\n        // IF number of EPOCH to return is GREATER than pending unclaimed rewards\\n        // Transfer the excess from the user's wallet\\n        if(forfeitReward > earned[_depositId]) {\\n            // Calculate diff and transfer this many tokens from the user\\n            rewardTokensClaimed[_depositId] -= (forfeitReward - earned[_depositId]);\\n\\n            // Since the user didn't have enough earned and had to transfer tokens\\n            // This means we can set this to 0\\n            earned[_depositId] = 0;\\n            rewardToken.transferFrom(msg.sender, address(this), forfeitReward - earned[_depositId]);\\n        } else {\\n            // The number of yield tokens the user has earned is greater than the number that needs to be forfeit\\n            // we can therefore just deduct from their balance.\\n            earned[_depositId] -= forfeitReward;\\n        }\\n\\n        // Redistribute these forfeit rewards\\n        rewardIndex += (forfeitReward * 1e18) / totalSupply();\\n\\n        emit WithdrawnForfeit(_depositId, _depositTokensToRemove, burnAmount, forfeitReward);\\n\\n        // If this deposit has no associated deposit tokens, delete the deposit (dust protection)\\n        if(d.depositTokenBalance == 0) {\\n            delete deposits[_depositId];\\n        }\\n\\n        // Transfer the LP tokens back\\n        depositToken.transfer(msg.sender, _depositTokensToRemove);\\n    }\\n\\n    /// @notice Burns veTokens for matured deposits and returns deposited tokens\\n    /// @dev Users can withdraw in full or partially\\n    /// @param _depositId - The depositId you want to withdraw from\\n    /// @param _tokenAmount - The number of deposit tokens to remove\\n    function withdraw(uint256 _depositId, uint256 _tokenAmount) external {\\n        Deposit storage d = deposits[_depositId];\\n\\n        require(d.owner == msg.sender, \\\"NOT OWNER\\\");\\n        require(\\n            block.timestamp > (d.depositTs + d.lockDuration),\\n            \\\"DEPOSIT NOT MATURED\\\"\\n        );\\n        uint256 veTokensBurned = calculateVeTokens(d.depositTokenBalance, d.lockDuration);\\n        _updateRewards(_depositId);\\n\\n        if(_tokenAmount == d.depositTokenBalance) {\\n            _burn(msg.sender, veTokensBurned);\\n\\n            // Reduce staking power\\n            rewardStakingPower[_depositId] = 0;\\n\\n            claimYield(_depositId);\\n\\n            delete deposits[_depositId];\\n\\n            depositToken.transfer(msg.sender, _tokenAmount);\\n\\n            emit Withdrawn(_depositId, _tokenAmount, veTokensBurned);\\n            return;\\n        }\\n\\n        veTokensBurned = (veTokensBurned * ((_tokenAmount * 1e18) / d.depositTokenBalance)) / 1e18;\\n\\n        d.depositTokenBalance -= _tokenAmount;\\n\\n        require(veTokensBurned > 0, \\\"INSUFFICIENT VEPOCH BURNED\\\");\\n        _burn(msg.sender, veTokensBurned);\\n\\n        // Reduce staking power\\n        rewardStakingPower[_depositId] -= veTokensBurned;\\n\\n        depositToken.transfer(msg.sender, _tokenAmount);\\n\\n        emit Withdrawn(_depositId, _tokenAmount, veTokensBurned);\\n    }\\n\\n    /// @notice Allows deposit owner to extend deposit up to maximum deposit duration\\n    /// @param _depositId - The depositId you want to extend\\n    /// @param _secondsToExtend - The number of seconds to extend this deposit by\\n    function extendDeposit(uint256 _depositId, uint32 _secondsToExtend) external {\\n        Deposit storage d = deposits[_depositId];\\n\\n        require(d.owner == msg.sender, \\\"NOT OWNER\\\");\\n        require(maxDepositDuration >= d.lockDuration + _secondsToExtend, \\\"INVALID DURATION\\\");\\n\\n        // Determine how many more veTokens should be minted\\n        uint256 veTokenDiff = calculateVeTokens(d.depositTokenBalance, _secondsToExtend);\\n        _mint(msg.sender, veTokenDiff);\\n\\n        // Update rewards\\n        _updateRewards(_depositId);\\n        rewardStakingPower[_depositId] += veTokenDiff;\\n        deposits[_depositId].lockDuration += _secondsToExtend;\\n\\n        emit DepositExtend(_depositId, _secondsToExtend);\\n    }\\n\\n    /// @notice Allows user to transfer ownership of their deposit\\n    /// @param _depositId - The depositId you want to transfer\\n    /// @param _newOwner - The address of the new owner\\n    function transferDepositOwnership(uint256 _depositId, address _newOwner) external {\\n        Deposit storage d = deposits[_depositId];\\n\\n        require(d.owner == msg.sender, \\\"NOT OWNER\\\");\\n\\n        // Transfer veTokens from old owner to new owner\\n        _transfer(msg.sender, _newOwner, calculateVeTokens(d.depositTokenBalance, d.lockDuration));\\n\\n        // Transfer ownership of deposit\\n        d.owner = _newOwner;\\n\\n        emit DepositOwnershipTransferred(_depositId, _newOwner);\\n    }\\n\\n    /// @notice Allows Owner to disable veToken transfer authorised functionality forever\\n    function setAuthorisedLocked() external onlyOwner {\\n        authorisedLocked = true;\\n    }\\n\\n    /// @notice Allows Owner to disable setMaxDepositDuration functionality forever\\n    function setMaxDepositDurationLocked() external onlyOwner {\\n        maxDepositDurationLocked = true;\\n    }\\n\\n    /// @notice This allows the owner to determine which addresses are authorised for token transfers\\n    /// @dev Can only be called by the owner of the contract\\n    /// @param _address - The address you want to change authorisation status of\\n    /// @param _newAuthorisationStatus - The new authorisation status\\n    function setAuthorised(address _address, bool _newAuthorisationStatus) external onlyOwner {\\n        require(!authorisedLocked);\\n\\n        authorised[_address] = _newAuthorisationStatus;\\n        emit Authorised(_address, _newAuthorisationStatus);\\n    }\\n\\n    /// @notice This allows the owner to set the maximum deposit duration\\n    /// @dev Can only be called by the owner of the contract\\n    /// @param _newMaxDepositDuration - The new maximum deposit duration in seconds\\n    function setMaxDepositDuration(uint32 _newMaxDepositDuration) external onlyOwner {\\n        require(!maxDepositDurationLocked);\\n\\n        require(_newMaxDepositDuration <= 3650 days, \\\"10 YEAR MAX\\\");\\n        maxDepositDuration = _newMaxDepositDuration;\\n        emit MaxDepositDurationSet(_newMaxDepositDuration);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorisedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newAuthorisationStatus\",\"type\":\"bool\"}],\"name\":\"Authorised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_secondsExtended\",\"type\":\"uint32\"}],\"name\":\"DepositExtend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"DepositOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDepositDuration\",\"type\":\"uint256\"}],\"name\":\"MaxDepositDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldTokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldTokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardForfeit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositTokensReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veTokensBurned\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositTokensReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veTokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardForfeit\",\"type\":\"uint256\"}],\"name\":\"WithdrawnForfeit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorisedLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"calculateVeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositIds\",\"type\":\"uint256[]\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_behalfOf\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"depositTs\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"depositTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_secondsToExtend\",\"type\":\"uint32\"}],\"name\":\"extendDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositDurationLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardStakingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_newAuthorisationStatus\",\"type\":\"bool\"}],\"name\":\"setAuthorised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAuthorisedLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newMaxDepositDuration\",\"type\":\"uint32\"}],\"name\":\"setMaxDepositDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMaxDepositDurationLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferDepositOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositTokensToRemove\",\"type\":\"uint256\"}],\"name\":\"withdrawForfeit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VEpoch", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000082b8c7c6fb62d09cfd004309c1f353fb1a926edc00000000000000000000000097d0cfeb4fde54b430307c9482d6f79c761fe9b60000000000000000000000006d78a40775e06d1037e855e52ccb2fb5762ad3db", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}