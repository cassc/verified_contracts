{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lybra/interfaces/Iconfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface Iconfigurator {\\n    function mintVault(address pool) external view returns(bool);\\n    function mintVaultMaxSupply(address pool) external view returns(uint256);\\n    function vaultMintPaused(address pool) external view returns(bool);\\n    function vaultBurnPaused(address pool) external view returns(bool);\\n    function tokenMiner(address pool) external view returns(bool);\\n    function getSafeCollateralRatio(address pool) external view returns(uint256);\\n    function getBadCollateralRatio(address pool) external view returns(uint256);\\n    function getVaultWeight(address pool) external view returns (uint256);\\n    function vaultMintFeeApy(address pool) external view returns(uint256);\\n    function vaultKeeperRatio(address pool) external view returns(uint256);\\n    function redemptionFee() external view returns(uint256);\\n    function getEUSDAddress() external view returns(address);\\n    function peUSD() external view returns(address);\\n    function eUSDMiningIncentives() external view returns(address);\\n    function getProtocolRewardsPool() external view returns(address);\\n    function flashloanFee() external view returns(uint256);\\n    function getEUSDMaxLocked() external view returns (uint256);\\n    function stableToken() external view returns (address);\\n    function isRedemptionProvider(address user) external view returns (bool);\\n    function becomeRedemptionProvider(bool _bool) external;\\n    function refreshMintReward(address user) external;\\n    function distributeRewards() external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/lybra/token/EUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/Iconfigurator.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for Lybra protocol.\\n *\\n * eUSD balances are dynamic and represent the holder's share in the total amount\\n * of Ether controlled by the protocol. Account shares aren't normalized, so the\\n * contract also stores the sum of all shares to calculate each account's token balance\\n * which equals to:\\n *\\n *   shares[account] * totalSupply / _totalShares\\n *\\n * For example, assume that we have:\\n *\\n *   _getTotalMintedEUSD() -> 1000 eUSD\\n *   sharesOf(user1) -> 100\\n *   sharesOf(user2) -> 400\\n *\\n * Therefore:\\n *\\n *   balanceOf(user1) -> 200 tokens which corresponds 200 eUSD\\n *   balanceOf(user2) -> 800 tokens which corresponds 800 eUSD\\n *\\n * Since balances of all token holders change when the amount of total shares\\n * changes, this token cannot fully implement ERC20 standard: it only emits `Transfer`\\n * events upon explicit transfer between holders. In contrast, when total amount of\\n * pooled Ether increases, no `Transfer` events are generated: doing so would require\\n * emitting an event for each token holder and thus running an unbounded loop.\\n */\\ncontract EUSD is IERC20, Context {\\n    Iconfigurator public immutable configurator;\\n    uint256 private _totalShares;\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev eUSD balances are dynamic and are calculated based on the accounts' shares\\n     * and the total supply by the protocol. Account shares aren't\\n     * normalized, so the contract also stores the sum of all shares to calculate\\n     * each account's token balance which equals to:\\n     *\\n     *   shares[account] * _getTotalMintedEUSD() / _getTotalShares()\\n     */\\n    mapping(address => uint256) private shares;\\n\\n    /**\\n     * @dev Allowances are nominated in tokens, not token shares.\\n     */\\n    mapping(address => mapping(address => uint256)) private allowances;\\n\\n    /**\\n     * @notice An executed shares transfer from `sender` to `recipient`.\\n     *\\n     * @dev emitted in pair with an ERC20-defined `Transfer` event.\\n     */\\n    event TransferShares(address indexed from, address indexed to, uint256 sharesValue);\\n\\n    /**\\n     * @notice An executed `burnShares` request\\n     *\\n     * @dev Reports simultaneously burnt shares amount\\n     * and corresponding eUSD amount.\\n     * The eUSD amount is calculated twice: before and after the burning incurred rebase.\\n     *\\n     * @param account holder of the burnt shares\\n     * @param preRebaseTokenAmount amount of eUSD the burnt shares corresponded to before the burn\\n     * @param postRebaseTokenAmount amount of eUSD the burnt shares corresponded to after the burn\\n     * @param sharesAmount amount of burnt shares\\n     */\\n    event SharesBurnt(address indexed account, uint256 preRebaseTokenAmount, uint256 postRebaseTokenAmount, uint256 sharesAmount);\\n\\n    modifier onlyMintVault() {\\n        require(configurator.mintVault(msg.sender), \\\"RCP\\\");\\n        _;\\n    }\\n    modifier mintEnabled() {\\n        require(!configurator.vaultMintPaused(msg.sender), \\\"MPP\\\");\\n        _;\\n    }\\n    modifier burnEnabled() {\\n        require(!configurator.vaultBurnPaused(msg.sender), \\\"BPP\\\");\\n        _;\\n    }\\n\\n    constructor(address _config) {\\n        configurator = Iconfigurator(_config);\\n    }\\n\\n    /**\\n     * @return the name of the token.\\n     */\\n    function name() public pure returns (string memory) {\\n        return \\\"eUSD\\\";\\n    }\\n\\n    /**\\n     * @return the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public pure returns (string memory) {\\n        return \\\"eUSD\\\";\\n    }\\n\\n    /**\\n     * @return the number of decimals for getting user representation of a token amount.\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @return the amount of eUSD in existence.\\n     *\\n     * @dev Always equals to `_getTotalMintedEUSD()` since token amount\\n     * is pegged to the total amount of eUSD controlled by the protocol.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return the amount of tokens owned by the `_account`.\\n     *\\n     * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n     * total Ether controlled by the protocol. See `sharesOf`.\\n     */\\n    function balanceOf(address _account) public view returns (uint256) {\\n        return getMintedEUSDByShares(_sharesOf(_account));\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from the caller's account to the `_recipient` account.\\n     *\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * Emits a `Transfer` event.\\n     * Emits a `TransferShares` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `_amount`.\\n     *\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transfer(address _recipient, uint256 _amount) public returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @return the remaining number of tokens that `_spender` is allowed to spend\\n     * on behalf of `_owner` through `transferFrom`. This is zero by default.\\n     *\\n     * @dev This value changes when `approve` or `transferFrom` is called.\\n     */\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     *\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the zero address.\\n     *\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function approve(address _spender, uint256 _amount) public returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from `_sender` to `_recipient` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * @return a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     * Emits a `TransferShares` event.\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_sender` and `_recipient` cannot be the zero addresses.\\n     * - `_sender` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_sender`'s tokens of at least `_amount`.\\n     *\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\\n        address spender = _msgSender();\\n        if (!configurator.mintVault(spender)) {\\n            _spendAllowance(from, spender, amount);\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, _spender, allowances[owner][_spender] + _addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the zero address.\\n     * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @return the total amount of shares in existence.\\n     *\\n     * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n     * it is necessary to store it in order to calculate each account's relative share.\\n     */\\n    function getTotalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @return the amount of shares owned by `_account`.\\n     */\\n    function sharesOf(address _account) public view returns (uint256) {\\n        return _sharesOf(_account);\\n    }\\n\\n    /**\\n     * @return the amount of shares that corresponds to `_EUSDAmount` protocol-supplied eUSD.\\n     */\\n    function getSharesByMintedEUSD(uint256 _EUSDAmount) public view returns (uint256) {\\n        uint256 totalMintedEUSD = _totalSupply;\\n        if (totalMintedEUSD == 0) {\\n            return 0;\\n        }\\n        return _EUSDAmount *_totalShares / totalMintedEUSD;\\n    }\\n\\n    /**\\n     * @return the amount of eUSD that corresponds to `_sharesAmount` token shares.\\n     */\\n    function getMintedEUSDByShares(uint256 _sharesAmount) public view returns (uint256) {\\n        if (_totalShares == 0) {\\n            return 0;\\n        }\\n        return _sharesAmount * _totalSupply / _totalShares;\\n    }\\n\\n    /**\\n     * @notice Moves `_sharesAmount` token shares from the caller's account to the `_recipient` account.\\n     *\\n     * @return amount of transferred tokens.\\n     * Emits a `TransferShares` event.\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_recipient` cannot be the zero address.\\n     * - the caller must have at least `_sharesAmount` shares.\\n     *\\n     * @dev The `_sharesAmount` argument is the amount of shares, not tokens.\\n     */\\n    function transferShares(address _recipient, uint256 _sharesAmount) public returns (uint256) {\\n        address owner = _msgSender();\\n        _transferShares(owner, _recipient, _sharesAmount);\\n        emit TransferShares(owner, _recipient, _sharesAmount);\\n        uint256 tokensAmount = getMintedEUSDByShares(_sharesAmount);\\n        emit Transfer(owner, _recipient, tokensAmount);\\n        return tokensAmount;\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from `_sender` to `_recipient`.\\n     * Emits a `Transfer` event.\\n     * Emits a `TransferShares` event.\\n     */\\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\\n        uint256 _sharesToTransfer = getSharesByMintedEUSD(_amount);\\n        _transferShares(_sender, _recipient, _sharesToTransfer);\\n        emit Transfer(_sender, _recipient, _amount);\\n        emit TransferShares(_sender, _recipient, _sharesToTransfer);\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` cannot be the zero address.\\n     * - `_spender` cannot be the zero address.\\n     */\\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\\n        require(_owner != address(0), \\\"APPROVE_FROM_ZERO_ADDRESS\\\");\\n        require(_spender != address(0), \\\"APPROVE_TO_ZERO_ADDRESS\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    /**\\n     * @return the amount of shares owned by `_account`.\\n     */\\n    function _sharesOf(address _account) internal view returns (uint256) {\\n        return shares[_account];\\n    }\\n\\n    /**\\n     * @notice Moves `_sharesAmount` shares from `_sender` to `_recipient`.\\n     *\\n     * Requirements:\\n     *\\n     * - `_sender` cannot be the zero address.\\n     * - `_recipient` cannot be the zero address.\\n     * - `_sender` must hold at least `_sharesAmount` shares.\\n     */\\n    function _transferShares(address _sender, address _recipient, uint256 _sharesAmount) internal {\\n        require(_sender != address(0), \\\"TRANSFER_FROM_THE_ZERO_ADDRESS\\\");\\n        require(_recipient != address(0), \\\"TRANSFER_TO_THE_ZERO_ADDRESS\\\");\\n\\n        uint256 currentSenderShares = shares[_sender];\\n        require(_sharesAmount <= currentSenderShares, \\\"TRANSFER_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        shares[_sender] = currentSenderShares - _sharesAmount;\\n        shares[_recipient] = shares[_recipient] + _sharesAmount;\\n    }\\n\\n    /**\\n     * @notice Creates `sharesAmount` shares and assigns them to `_recipient`, increasing the total amount of shares.\\n     * @dev This operation also increases the total supply of tokens.\\n     *\\n     * Requirements:\\n     *\\n     * - `_recipient` cannot be the zero address.\\n     * - the contract must not be paused.\\n     */\\n    function mint(address _recipient, uint256 _mintAmount) external onlyMintVault mintEnabled returns (uint256 newTotalShares) {\\n        require(_recipient != address(0), \\\"MINT_TO_THE_ZERO_ADDRESS\\\");\\n        require(_mintAmount != 0, \\\"ZA\\\");\\n        uint256 sharesAmount = getSharesByMintedEUSD(_mintAmount);\\n        if (sharesAmount == 0) {\\n            require(_totalSupply == 0, \\\"ZA\\\");\\n            //eUSD totalSupply is 0: assume that shares correspond to eUSD 1-to-1\\n            sharesAmount = _mintAmount;\\n        }\\n\\n        newTotalShares = _totalShares + sharesAmount;\\n        _totalShares = newTotalShares;\\n\\n        shares[_recipient] = shares[_recipient] + sharesAmount;\\n\\n        _totalSupply += _mintAmount;\\n\\n        emit Transfer(address(0), _recipient, _mintAmount);\\n    }\\n\\n    /**\\n     * @notice Destroys `sharesAmount` shares from `_account`'s holdings, decreasing the total amount of shares.\\n     * @dev This operation also decrease the total supply of tokens.\\n     *\\n     * Requirements:\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must hold at least `sharesAmount` shares.\\n     * - the contract must not be paused.\\n     */\\n    function burn(address _account, uint256 _burnAmount) external onlyMintVault burnEnabled returns (uint256 newTotalShares) {\\n        require(_account != address(0), \\\"BURN_FROM_THE_ZERO_ADDRESS\\\");\\n        uint256 sharesAmount = getSharesByMintedEUSD(_burnAmount);\\n        require(sharesAmount != 0, \\\"ZA\\\");\\n        newTotalShares = _onlyBurnShares(_account, sharesAmount);\\n        _totalSupply -= _burnAmount;\\n\\n        emit Transfer(_account, address(0), _burnAmount);\\n    }\\n\\n    /**\\n     * @notice Destroys `sharesAmount` shares from `_account`'s holdings, decreasing the total amount of shares.\\n     * @dev This doesn't decrease the token total supply.\\n     *\\n     * Requirements:\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must hold at least `sharesAmount` shares.\\n     * - the contract must not be paused.\\n     */\\n    function burnShares(address _account, uint256 _sharesAmount) external onlyMintVault burnEnabled returns (uint256 newTotalShares) {\\n        require(_account != address(0), \\\"BURN_FROM_THE_ZERO_ADDRESS\\\");\\n        require(_sharesAmount != 0, \\\"ZA\\\");\\n        newTotalShares = _onlyBurnShares(_account, _sharesAmount);\\n    }\\n\\n    function _onlyBurnShares(address _account, uint256 _sharesAmount) private returns (uint256 newTotalShares) {\\n        uint256 accountShares = shares[_account];\\n        require(_sharesAmount <= accountShares, \\\"BURN_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        uint256 preRebaseTokenAmount = getMintedEUSDByShares(_sharesAmount);\\n\\n        newTotalShares = _totalShares - _sharesAmount;\\n        _totalShares = newTotalShares;\\n\\n        shares[_account] = accountShares - _sharesAmount;\\n\\n        uint256 postRebaseTokenAmount = getMintedEUSDByShares(_sharesAmount);\\n\\n        emit SharesBurnt(_account, preRebaseTokenAmount, postRebaseTokenAmount, _sharesAmount);\\n\\n        // Notice: we're not emitting a Transfer event to the zero address here since shares burn\\n        // works by redistributing the amount of tokens corresponding to the burned shares between\\n        // all other token holders. The total supply of the token doesn't change as the result.\\n        // This is equivalent to performing a send from `address` to each other token holder address,\\n        // but we cannot reflect this as it would require sending an unbounded number of events.\\n\\n        // We're emitting `SharesBurnt` event to provide an explicit rebase log record nonetheless.\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preRebaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postRebaseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"SharesBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesValue\",\"type\":\"uint256\"}],\"name\":\"TransferShares\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract Iconfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"getMintedEUSDByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_EUSDAmount\",\"type\":\"uint256\"}],\"name\":\"getSharesByMintedEUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"transferShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EUSD", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8353594eeedc5ce5a4544d3d9907b694c4690ff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}