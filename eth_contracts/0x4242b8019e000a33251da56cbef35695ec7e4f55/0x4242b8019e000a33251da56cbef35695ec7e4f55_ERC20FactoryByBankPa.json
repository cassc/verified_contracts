{"SourceCode": "// Sources flattened with hardhat v2.19.1 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBase.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBase {\r\n    /// - antiBotParam\r\n    /// 1. holdLimit\r\n    /// 2. txLimit\r\n    /// 3. antiDumpLimit\r\n    /// 4. antiSniperOn\r\n    /// 5. blacklistOn\r\n    ///\r\n    /// - taxParam\r\n    /// 1. dexRouter: uniswap or sushiswap\r\n    /// 2. pairedToken: eth or usdc\r\n    /// 3. taxPayAccount\r\n    /// 4. treasuryAccount\r\n    /// 5. buyTax\r\n    /// 6. sellTax\r\n    /// 7. treasuryTax\r\n    ///\r\n    /// - distribParam\r\n    /// 1. totalSupply\r\n    /// 2. teamAccount\r\n    /// 3. teamAllocPercent\r\n    ///\r\n    /// - lpParam\r\n    /// 1. isLPBurn\r\n    /// 2. isTradingDelayed\r\n    /// 3. isTradingDisabled\r\n    /// 4. pairedTokenAmount\r\n    /// 5. lockPeriod\r\n    struct TokenLaunchConf {\r\n        string uuid;\r\n        string name;\r\n        string symbol;\r\n        bytes distribParam;\r\n        bytes antiBotParam;\r\n        bytes taxParam;\r\n        bytes lpParam;\r\n    }\r\n\r\n    // Configuration inherited from the factory contract\r\n    struct InheritedConf {\r\n        uint16 autoBurnFirstPercent;\r\n        uint16 autoBurnSecondPercent;\r\n        uint16 autoBurnThirdPercent;\r\n        uint16 thresholdPercent;\r\n        uint16 maxBuyTaxAfter;\r\n        uint16 maxSellTaxAfter;\r\n        uint16 maxTreasuryTaxAfter;\r\n        uint16 bankPadTax;\r\n        uint16 maxTaxToRenounce;\r\n        uint32 bankPadTaxApplyPeriod;\r\n        uint32 taxWhitelistApplyDelay;\r\n        uint32 tradingDelayTime;\r\n        uint32 tradingDisableTime;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20ByBankPad.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20ByBankPad {\r\n    /**\r\n     * @notice function {preLaunch}\r\n     *\r\n     * Configure token contract with the factory configuration\r\n     *\r\n     * @param param configuration structure from the factory\r\n     */\r\n    function preLaunch(IBase.InheritedConf calldata param) external;\r\n\r\n    /// @notice Launch the token contract\r\n    /// @dev Token is launched from this moment, and users can start trading\r\n    /// @param tradingDelayed Once this flag is set, trading is delayed for 1 min\r\n    /// @param tradingDisabled Once this flag is set, trading is disabled until it is set or 4 days\r\n    function launch(bool tradingDelayed, bool tradingDisabled) external;\r\n\r\n    /// @notice View amm related configuration addresses\r\n    /// @return address dex router address\r\n    /// @return address base paired token address\r\n    /// @return address base pair address from the dex router\r\n    function ammAddresses() external view returns (address, address, address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    /**\r\n     * @dev BankPad UUID Hash\r\n     */\r\n    function bankUUIDHash() external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Check if the anti-dump feature is enabled in the token\r\n     */\r\n    function isAntiDumpEnabled() external view returns (bool);\r\n\r\n    /**\r\n     * @notice Check if the blacklist add-on is enabled in the token\r\n     */\r\n    function isBlacklistEnabled() external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20MachineByBankPad.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n/**\r\n * @dev BankPad ERC-20 contract deployer\r\n *\r\n *\r\n * Lightweight deployment module for use with template contracts\r\n */\r\ninterface IERC20MachineByBankPad {\r\n    /**\r\n     * @notice function {deploy}\r\n     *\r\n     * Deploy a fresh instance\r\n     */\r\n    function deploy(\r\n        bytes32 bankIdHash_,\r\n        bytes32 salt_,\r\n        bytes memory args_\r\n    ) external payable returns (address erc20ContractAddress_);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDexRouter.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IDexFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniLocker.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERCBurn {\r\n    function burn(uint256 _amount) external;\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IUniLocker {\r\n    struct FeeStruct {\r\n        uint256 ethFee; // Small eth fee to prevent spam on the platform\r\n        IERCBurn secondaryFeeToken; // UNCX or UNCL\r\n        uint256 secondaryTokenFee; // optional, UNCX or UNCL\r\n        uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\r\n        uint256 liquidityFee; // fee on univ2 liquidity tokens\r\n        uint256 referralPercent; // fee for referrals\r\n        IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\r\n        uint256 referralHold; // balance the referrer must hold to qualify as a referrer\r\n        uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\r\n    }\r\n\r\n    function gFees() external view returns (FeeStruct memory);\r\n\r\n    function lockLPToken(\r\n        address _lpToken,\r\n        uint256 _amount,\r\n        uint256 _unlock_date,\r\n        address payable _referral,\r\n        bool _fee_in_eth,\r\n        address payable _withdrawer\r\n    ) external payable;\r\n}\r\n\r\n\r\n// File contracts/launchpad/ERC20FactoryByBankPadBase.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n\r\ncontract ERC20FactoryByBankPadBase is Ownable {\r\n    using Address for address payable;\r\n\r\n    uint16 internal constant DENOMINATOR = 10000;\r\n\r\n    // ==================== 32 bytes slot 1 start ================= //\r\n    /// @dev Anti-snipe tax is burned, reducing total supply\r\n    /// 1. 20% tax on buys in the first block\r\n    /// 2. Reducing to 13.33% in the second block\r\n    /// 3. Reducing to 6.66% in the third\r\n    /// 4. Finally 0% from the fourth block on\r\n    uint16 private _autoBurnFirstPercent = 2000;\r\n    uint16 private _autoBurnSecondPercent = 1333;\r\n    uint16 private _autoBurnThirdPercent = 666;\r\n\r\n    /// @dev Max buy tax after token launched\r\n    uint16 private _maxBuyTaxAfter = 1500;\r\n    /// @dev Max sell tax after token launched\r\n    uint16 private _maxSellTaxAfter = 1500;\r\n    /// @dev Max treasury tax after token launched\r\n    uint16 private _maxTreasuryTaxAfter = 500;\r\n\r\n    /// @dev Bankpad tax is set on top buy / sell / treasury tax as a service fee\r\n    uint16 private _bankPadTax = 1000;\r\n\r\n    /// @dev Ownership can be renounced only when buy/sell/treasury tax is below limit default 5%\r\n    uint16 private _maxTaxToRenounce = 500;\r\n\r\n    /// @dev Bankpad tax is removed after some days default 30 days\r\n    uint32 private _bankPadTaxApplyPeriod = 30 days;\r\n    /// @dev Tax whitelist (exclude list) is not applied within some days after token launches default 2 days\r\n    uint32 private _taxWhitelistApplyDelay = 2 days;\r\n\r\n    /// @dev Token transfer is disabled for 1 mins once trading_delay flag is set\r\n    uint32 private _tradingDelayTime = 1 minutes;\r\n    /// @dev Trading is disabled once {_isTradingDisabled} flag is set,\r\n    /// it is unset automatically after 7 days if owner does not enable trading\r\n    uint32 private _tradingDisableTime = 7 days;\r\n    // ==================== 32 bytes slot 1 end ================= //\r\n\r\n    // ==================== 32 bytes slot 2 start ================= //\r\n    /// @dev Service fee and token tax fee receive account\r\n    address payable internal _servicePayAccount;\r\n\r\n    /// @dev Max team distribution rate default 10%\r\n    uint16 private _maxTeamAlloc = 1000;\r\n\r\n    /// @dev Max token launch count per wallet\r\n    uint16 internal _maxLaunchesPerWallet = 12;\r\n\r\n    /// @dev Max buy tax\r\n    uint16 private _maxBuyTax = 3500;\r\n    /// @dev Max sell tax\r\n    uint16 private _maxSellTax = 3500;\r\n    /// @dev Max treasury tax\r\n    uint16 private _maxTreasuryTax = 500;\r\n    // ==================== 32 bytes slot 2 end: 30 bytes ================= //\r\n\r\n    /// @dev Swap back threshold percent. default 2%\r\n    uint16 private _thresholdPercent = 200;\r\n\r\n    /// @dev BankPad machine contract\r\n    address internal _machine;\r\n\r\n    /// @dev Minimum lock period default 30 days\r\n    uint256 internal _minLockPeriod = 30 days;\r\n\r\n    /// @dev Token launch fee in ETH\r\n    uint256 internal _launchFee;\r\n    /// @dev Delayed trading fee in ETH\r\n    uint256 internal _tradingDelayFee;\r\n    /// @dev Delayed disable fee in ETH\r\n    uint256 internal _tradingDisableFee;\r\n    /// @dev Anti-Dump service fee in ETH\r\n    uint256 internal _antiDumpFee;\r\n    /// @dev Blacklist add-on fee in ETH\r\n    uint256 internal _blacklistFee;\r\n\r\n    /// @dev LP locker contract for dex router\r\n    mapping(address => address) internal _lpLockers;\r\n    /// @dev Get token address per given BankPad UUID\r\n    mapping(string => address) internal _tokens;\r\n    /// @dev Whitelist for the unlimited team allocation\r\n    mapping(string => uint16) internal _teamAllocWhitelist;\r\n    /// @dev Whitelist for manually enabling trading\r\n    mapping(string => bool) internal _manualEnableTradingWhitelist;\r\n    /// @dev Minimum pair token amount to be added to the liquidity\r\n    mapping(address => uint256) internal _minPairTokenAmounts;\r\n    /// @dev Token launched count per account\r\n    mapping(address => uint16) internal _launchedCounts;\r\n\r\n    event BankPadTaxUpdated(uint16 bankPadTax);\r\n    event MaxLaunchesPerWalletUpdated(uint16 maxLaunches);\r\n    event MaxTaxToRenounceUpdated(uint16 maxTax);\r\n    event MaxTeamAllocUpdated(uint16 teamAlloc);\r\n    event MaxTeamAllocUpdatedForUUID(string uuid, uint16 teamAlloc);\r\n    event MinLockPeriodUpdated(uint256 period);\r\n    event MinPairTokenAmountUpdated(address pairToken, uint256 amount);\r\n    event ServiceFeesUpdated(\r\n        uint256 launchFee,\r\n        uint256 tradingDelayFee,\r\n        uint256 tradingDisableFee,\r\n        uint256 antiDumpFee,\r\n        uint256 blacklistFee\r\n    );\r\n    event ServicePayAccountUpdated(address payable account);\r\n    event SnipeAutoBurnPercentsUpdated(\r\n        uint16 firstPercent,\r\n        uint16 secondPercent,\r\n        uint16 thirdPercent\r\n    );\r\n    event TaxAfterLimitsUpdated(\r\n        uint16 maxBuyTax,\r\n        uint16 maxSellTax,\r\n        uint16 maxTreasuryTax\r\n    );\r\n    event TaxLimitsUpdated(\r\n        uint16 maxBuyTax,\r\n        uint16 maxSellTax,\r\n        uint16 maxTreasuryTax\r\n    );\r\n    event ThreasholdPercentUpdated(uint16 percent);\r\n    event ManualEnableTradingForUUIDUpdated(string uuid, bool flag);\r\n    event TimeConfigurationUpdated(\r\n        uint32 tradingDelayTime,\r\n        uint32 tradingDisableTime,\r\n        uint32 bankPadTaxApplyPeriod,\r\n        uint32 taxWhitelistApplyDelay\r\n    );\r\n\r\n    /**\r\n     * @dev Build InheritedConf structure to be used in token deployment\r\n     *\r\n     * @param uuid token UUID\r\n     */\r\n    function _buildInheritedConf(\r\n        string memory uuid\r\n    ) internal view returns (IBase.InheritedConf memory) {\r\n        IBase.InheritedConf memory param;\r\n        param.autoBurnFirstPercent = _autoBurnFirstPercent;\r\n        param.autoBurnSecondPercent = _autoBurnSecondPercent;\r\n        param.autoBurnThirdPercent = _autoBurnThirdPercent;\r\n\r\n        param.thresholdPercent = _thresholdPercent;\r\n\r\n        param.maxBuyTaxAfter = _maxBuyTaxAfter;\r\n        param.maxSellTaxAfter = _maxSellTaxAfter;\r\n        param.maxTreasuryTaxAfter = _maxTreasuryTaxAfter;\r\n\r\n        param.bankPadTax = _bankPadTax;\r\n        param.maxTaxToRenounce = _maxTaxToRenounce;\r\n\r\n        param.bankPadTaxApplyPeriod = _bankPadTaxApplyPeriod;\r\n        param.taxWhitelistApplyDelay = _taxWhitelistApplyDelay;\r\n        param.tradingDelayTime = _tradingDelayTime;\r\n        // when the uuid is whitelisted for the manually enable trading feature\r\n        // we set tradingDisableTime as MAX_UINT32\r\n        param.tradingDisableTime = _manualEnableTradingWhitelist[uuid]\r\n            ? uint32(int32(-1))\r\n            : _tradingDisableTime;\r\n\r\n        return param;\r\n    }\r\n\r\n    function _validateTaxProps(bytes memory taxParam) internal view {\r\n        (, , , , uint16 buyTax, uint16 sellTax, uint16 treasuryTax) = abi\r\n            .decode(\r\n                taxParam,\r\n                (address, address, address, address, uint16, uint16, uint16)\r\n            );\r\n\r\n        require(\r\n            buyTax <= _maxBuyTax &&\r\n                sellTax <= _maxSellTax &&\r\n                treasuryTax <= _maxTreasuryTax,\r\n            \"too much tax\"\r\n        );\r\n\r\n        uint16 bankPadTax_ = _bankPadTax;\r\n\r\n        // check if the applied tax is too much so it exceeds the transfer amount\r\n        require(\r\n            (uint256(buyTax + treasuryTax) * (DENOMINATOR + bankPadTax_)) /\r\n                DENOMINATOR <=\r\n                DENOMINATOR &&\r\n                (uint256(sellTax + treasuryTax) * (DENOMINATOR + bankPadTax_)) /\r\n                    DENOMINATOR <=\r\n                DENOMINATOR,\r\n            \"tax out of range\"\r\n        );\r\n    }\r\n\r\n    /// @notice Update BankPad service fees\r\n    /// @param launchFee token launch fee\r\n    /// @param tradingDelayFee trading delay service fee\r\n    /// @param tradingDisableFee trading disable service fee\r\n    /// @param antiDumpFee anti-dump add-on fee\r\n    /// @param blacklistFee blacklist add-on fee\r\n    function updateServiceFees(\r\n        uint256 launchFee,\r\n        uint256 tradingDelayFee,\r\n        uint256 tradingDisableFee,\r\n        uint256 antiDumpFee,\r\n        uint256 blacklistFee\r\n    ) external onlyOwner {\r\n        _launchFee = launchFee;\r\n        _tradingDelayFee = tradingDelayFee;\r\n        _tradingDisableFee = tradingDisableFee;\r\n        _antiDumpFee = antiDumpFee;\r\n        _blacklistFee = blacklistFee;\r\n\r\n        emit ServiceFeesUpdated(\r\n            launchFee,\r\n            tradingDelayFee,\r\n            tradingDisableFee,\r\n            antiDumpFee,\r\n            blacklistFee\r\n        );\r\n    }\r\n\r\n    /// @notice View BankPad service fees\r\n    /// @return uint256 token launch fee\r\n    /// @return uint256 trading delay service fee\r\n    /// @return uint256 trading disable service fee\r\n    /// @return uint256 anti-dump service fee\r\n    /// @return uint256 blacklist add-on fee\r\n    function serviceFees()\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            _launchFee,\r\n            _tradingDelayFee,\r\n            _tradingDisableFee,\r\n            _antiDumpFee,\r\n            _blacklistFee\r\n        );\r\n    }\r\n\r\n    /// @notice Update LP locker contract\r\n    function updateLPLocker(\r\n        address dexRouter,\r\n        address newLocker\r\n    ) external onlyOwner {\r\n        _lpLockers[dexRouter] = newLocker;\r\n    }\r\n\r\n    function lpLocker(address dexRouter) external view returns (address) {\r\n        return _lpLockers[dexRouter];\r\n    }\r\n\r\n    /**\r\n     * @notice function {updateBankMachine}\r\n     *\r\n     * Update BankPad token machine address\r\n     */\r\n    function updateBankMachine(address machine) external onlyOwner {\r\n        require(machine != address(0), \"invalid machine\");\r\n\r\n        _machine = machine;\r\n    }\r\n\r\n    function bankMachine() external view returns (address) {\r\n        return _machine;\r\n    }\r\n\r\n    /// @notice Update service fee receive account\r\n    function updateServicePayAccount(\r\n        address payable account\r\n    ) external onlyOwner {\r\n        require(account != address(0), \"invalid pay account\");\r\n        // confirm service pay account can receive ETH\r\n        account.sendValue(0);\r\n\r\n        _servicePayAccount = account;\r\n\r\n        emit ServicePayAccountUpdated(account);\r\n    }\r\n\r\n    function servicePayAccount() external view returns (address payable) {\r\n        return _servicePayAccount;\r\n    }\r\n\r\n    function getToken(string memory uuid) external view returns (address) {\r\n        return _tokens[uuid];\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateMaxTeamAlloc}\r\n     *\r\n     * Update the limit of the team distribution percent\r\n     *\r\n     * @param teamAlloc new max limit of the team distribution percent\r\n     */\r\n    function updateMaxTeamAlloc(uint16 teamAlloc) external onlyOwner {\r\n        require(teamAlloc <= DENOMINATOR, \"out of range\");\r\n        _maxTeamAlloc = teamAlloc;\r\n        emit MaxTeamAllocUpdated(teamAlloc);\r\n    }\r\n\r\n    /**\r\n     * @dev function {maxTeamAlloc}\r\n     *\r\n     * Return common max team distribution percentage\r\n     */\r\n    function maxTeamAlloc() external view returns (uint16) {\r\n        return _maxTeamAlloc;\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateMaxTeamAllocForUUID}\r\n     *\r\n     * Whitelist token uuid for the unlimited team allocation percent\r\n     *\r\n     * @param uuid token to be whitelisted\r\n     * @param teamAlloc new max team allocation percent\r\n     */\r\n    function updateMaxTeamAllocForUUID(\r\n        string calldata uuid,\r\n        uint16 teamAlloc\r\n    ) external onlyOwner {\r\n        require(teamAlloc <= DENOMINATOR, \"out of range\");\r\n        _teamAllocWhitelist[uuid] = teamAlloc;\r\n\r\n        emit MaxTeamAllocUpdatedForUUID(uuid, teamAlloc);\r\n    }\r\n\r\n    /**\r\n     * @dev function {maxTeamAllocForUUID}\r\n     *\r\n     * Return max team distribution percentage for the given `uuid` of token\r\n     * whitelisted token will return its max allocation percent\r\n     * return `_maxTeamAlloc` for others\r\n     *\r\n     * @param uuid token UUID\r\n     */\r\n    function maxTeamAllocForUUID(\r\n        string calldata uuid\r\n    ) external view returns (uint16) {\r\n        uint16 teamAllocForUUID = _teamAllocWhitelist[uuid];\r\n        if (teamAllocForUUID > 0) return teamAllocForUUID;\r\n        return _maxTeamAlloc;\r\n    }\r\n\r\n    /**\r\n     * @notice function {whitelistUUIDForManualEnableTrading}\r\n     *\r\n     * Whitelist token for setting manual enabling trading feature\r\n     *\r\n     * @param uuid token uuid to whitelist\r\n     * @param flag true / false\r\n     */\r\n    function whitelistUUIDForManualEnableTrading(\r\n        string calldata uuid,\r\n        bool flag\r\n    ) external onlyOwner {\r\n        _manualEnableTradingWhitelist[uuid] = flag;\r\n        emit ManualEnableTradingForUUIDUpdated(uuid, flag);\r\n    }\r\n\r\n    function isUUIDWhitelistedForManualEnableTrading(\r\n        string calldata uuid\r\n    ) external view returns (bool) {\r\n        return _manualEnableTradingWhitelist[uuid];\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateMinLockPeriod}\r\n     *\r\n     * Update minimum lock period\r\n     *\r\n     * @param period new minimum lock period\r\n     */\r\n    function updateMinLockPeriod(uint256 period) external onlyOwner {\r\n        _minLockPeriod = period;\r\n\r\n        emit MinLockPeriodUpdated(period);\r\n    }\r\n\r\n    function minLockPeriod() external view returns (uint256) {\r\n        return _minLockPeriod;\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateSnipeAutoBurnPercents}\r\n     *\r\n     * Update percent values of anti-snipe auto burning\r\n     *\r\n     * @param firstPercent anti-snipe first auto burn percent. max 35%\r\n     * @param secondPercent anti-snipe second auto burn percent. max 20%\r\n     * @param thirdPercent anti-snipe third auto burn percent. max 10%\r\n     */\r\n    function updateSnipeAutoBurnPercents(\r\n        uint16 firstPercent,\r\n        uint16 secondPercent,\r\n        uint16 thirdPercent\r\n    ) external onlyOwner {\r\n        require(\r\n            firstPercent <= 3500 &&\r\n                secondPercent <= 2000 &&\r\n                thirdPercent <= 1000,\r\n            \"out of range\"\r\n        );\r\n        _autoBurnFirstPercent = firstPercent;\r\n        _autoBurnSecondPercent = secondPercent;\r\n        _autoBurnThirdPercent = thirdPercent;\r\n\r\n        emit SnipeAutoBurnPercentsUpdated(\r\n            firstPercent,\r\n            secondPercent,\r\n            thirdPercent\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev function {snipeAutoBurnPercents}\r\n     *\r\n     * Return anti-snipe auto burn percent values for 3 steps\r\n     *\r\n     * @return uint16 first auto burn percent\r\n     * @return uint16 second auto burn percent\r\n     * @return uint16 third auto burn percent\r\n     */\r\n    function snipeAutoBurnPercents()\r\n        external\r\n        view\r\n        returns (uint16, uint16, uint16)\r\n    {\r\n        return (\r\n            _autoBurnFirstPercent,\r\n            _autoBurnSecondPercent,\r\n            _autoBurnThirdPercent\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateTaxLimits}\r\n     *\r\n     * Update max limit of buy/sell/treasury tax which are used at the time of token deployment\r\n     *\r\n     * @param maxBuyTax maximum value of {buyTax}. max 35%\r\n     * @param maxSellTax maximum value of {sellTax}. max 35%\r\n     * @param maxTreasuryTax maximum value of {treasuryTax}. max 5%\r\n     */\r\n    function updateTaxLimits(\r\n        uint16 maxBuyTax,\r\n        uint16 maxSellTax,\r\n        uint16 maxTreasuryTax\r\n    ) external onlyOwner {\r\n        require(\r\n            maxBuyTax <= 3500 && maxSellTax <= 3500 && maxTreasuryTax <= 500,\r\n            \"out of range\"\r\n        );\r\n        _maxBuyTax = maxBuyTax;\r\n        _maxSellTax = maxSellTax;\r\n        _maxTreasuryTax = maxTreasuryTax;\r\n\r\n        emit TaxLimitsUpdated(maxBuyTax, maxSellTax, maxTreasuryTax);\r\n    }\r\n\r\n    /**\r\n     * @dev function {taxLimits}\r\n     *\r\n     * Return tax limits which are used at the time of token deployment\r\n     *\r\n     * @return uint16 max buy tax limit\r\n     * @return uint16 max sell tax limit\r\n     * @return uint16 max treasury tax limit\r\n     */\r\n    function taxLimits() external view returns (uint16, uint16, uint16) {\r\n        return (_maxBuyTax, _maxSellTax, _maxTreasuryTax);\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateTaxAfterLimits}\r\n     *\r\n     * Update max limit of buy/sell/treasury tax which are used after token launched\r\n     *\r\n     * @param maxBuyTax maximum value of {buyTax}. max 35%\r\n     * @param maxSellTax maximum value of {sellTax}. max 35%\r\n     * @param maxTreasuryTax maximum value of {treasuryTax}. max 5%\r\n     */\r\n    function updateTaxAfterLimits(\r\n        uint16 maxBuyTax,\r\n        uint16 maxSellTax,\r\n        uint16 maxTreasuryTax\r\n    ) external onlyOwner {\r\n        require(\r\n            maxBuyTax <= 3500 && maxSellTax <= 3500 && maxTreasuryTax <= 500,\r\n            \"out of range\"\r\n        );\r\n        _maxBuyTaxAfter = maxBuyTax;\r\n        _maxSellTaxAfter = maxSellTax;\r\n        _maxTreasuryTaxAfter = maxTreasuryTax;\r\n\r\n        emit TaxAfterLimitsUpdated(maxBuyTax, maxSellTax, maxTreasuryTax);\r\n    }\r\n\r\n    /**\r\n     * @dev function {taxAfterLimits}\r\n     *\r\n     * Return tax limits which are used after token launched\r\n     *\r\n     * @return uint16 max buy tax limit\r\n     * @return uint16 max sell tax limit\r\n     * @return uint16 max treasury tax limit\r\n     */\r\n    function taxAfterLimits() external view returns (uint16, uint16, uint16) {\r\n        return (_maxBuyTaxAfter, _maxSellTaxAfter, _maxTreasuryTaxAfter);\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateBankPadTax}\r\n     *\r\n     * Update BankPad tax value\r\n     *\r\n     * @param tax new BankPad tax\r\n     */\r\n    function updateBankPadTax(uint16 tax) external onlyOwner {\r\n        _bankPadTax = tax;\r\n\r\n        emit BankPadTaxUpdated(tax);\r\n    }\r\n\r\n    function bankPadTax() external view returns (uint16) {\r\n        return _bankPadTax;\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateMaxTaxToRenounce}\r\n     *\r\n     * Update the tax condition for renouncing ownership of the token\r\n     *\r\n     * @param maxTax max tax values for renounce\r\n     */\r\n    function updateMaxTaxToRenounce(uint16 maxTax) external onlyOwner {\r\n        _maxTaxToRenounce = maxTax;\r\n\r\n        emit MaxTaxToRenounceUpdated(maxTax);\r\n    }\r\n\r\n    /**\r\n     * @dev function {maxTaxToRenounce}\r\n     *\r\n     * Return the tax condition for renouncing ownership of the token\r\n     *\r\n     * @return uint16 max tax values for renounce\r\n     */\r\n    function maxTaxToRenounce() external view returns (uint16) {\r\n        return _maxTaxToRenounce;\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateTradingTimes}\r\n     *\r\n     * Update token related time configuration\r\n     *\r\n     * @param tradingDelayTime new trading delay time\r\n     * @param tradingDisableTime new trading disable time\r\n     * @param bankPadTaxApplyPeriod new bankPad tax apply period\r\n     * @param taxWhitelistApplyDelay new tax whitelist delay period\r\n     */\r\n    function updateTimeConfiguration(\r\n        uint32 tradingDelayTime,\r\n        uint32 tradingDisableTime,\r\n        uint32 bankPadTaxApplyPeriod,\r\n        uint32 taxWhitelistApplyDelay\r\n    ) external onlyOwner {\r\n        _tradingDelayTime = tradingDelayTime;\r\n        _tradingDisableTime = tradingDisableTime;\r\n        _bankPadTaxApplyPeriod = bankPadTaxApplyPeriod;\r\n        _taxWhitelistApplyDelay = taxWhitelistApplyDelay;\r\n\r\n        emit TimeConfigurationUpdated(\r\n            tradingDelayTime,\r\n            tradingDisableTime,\r\n            bankPadTaxApplyPeriod,\r\n            taxWhitelistApplyDelay\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev function {tradingTimes}\r\n     *\r\n     * Return token related time configuration\r\n     *\r\n     * @return uint32 trading delay time\r\n     * @return uint32 trading disable time\r\n     * @return uint32 BankPad tax apply period\r\n     * @return uint32 Tax whitelist delay period\r\n     */\r\n    function timeConfiguration()\r\n        external\r\n        view\r\n        returns (uint32, uint32, uint32, uint32)\r\n    {\r\n        return (\r\n            _tradingDelayTime,\r\n            _tradingDisableTime,\r\n            _bankPadTaxApplyPeriod,\r\n            _taxWhitelistApplyDelay\r\n        );\r\n    }\r\n\r\n    function updateMinPairTokenAmount(\r\n        address pairToken,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        _minPairTokenAmounts[pairToken] = amount;\r\n\r\n        emit MinPairTokenAmountUpdated(pairToken, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev function {minPairTokenAmount}\r\n     *\r\n     * Return minimum pair token amount\r\n     *\r\n     * @param pairToken address of adding token being added with deployed token\r\n     */\r\n    function minPairTokenAmount(\r\n        address pairToken\r\n    ) external view returns (uint256) {\r\n        return _minPairTokenAmounts[pairToken];\r\n    }\r\n\r\n    /**\r\n     * @notice Update threshold percent value\r\n     * @param percent new threshold percent\r\n     */\r\n    function updateThresholdPercent(uint16 percent) external onlyOwner {\r\n        _thresholdPercent = percent;\r\n\r\n        emit ThreasholdPercentUpdated(percent);\r\n    }\r\n\r\n    function thresholdPercent() external view returns (uint16) {\r\n        return _thresholdPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev function {updateMaxLaunchesPerWallet}\r\n     *\r\n     * Update max launches count per wallet\r\n     *\r\n     * @param maxLaunches new max launches count\r\n     */\r\n    function updateMaxLaunchesPerWallet(uint16 maxLaunches) external onlyOwner {\r\n        _maxLaunchesPerWallet = maxLaunches;\r\n\r\n        emit MaxLaunchesPerWalletUpdated(maxLaunches);\r\n    }\r\n\r\n    function maxLaunchesPerWallet() external view returns (uint16) {\r\n        return _maxLaunchesPerWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev function {launchedCount}\r\n     *\r\n     * Return launched token count by the given account\r\n     *\r\n     * @param account to view\r\n     */\r\n    function launchedCount(address account) external view returns (uint16) {\r\n        return _launchedCounts[account];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/launchpad/ERC20FactoryByBankPad.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20FactoryByBankPad is ERC20FactoryByBankPadBase, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address payable;\r\n\r\n    address private constant ETH_ADDRESS =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    event NewTokenCreated(\r\n        address token,\r\n        address serviceAccount,\r\n        address deployer,\r\n        bytes32 uuidHash,\r\n        uint256 serviceFee,\r\n        IBase.TokenLaunchConf tokenLaunchConf,\r\n        IBase.InheritedConf inheritedConf\r\n    );\r\n\r\n    constructor(\r\n        address payable servicePayAccount_,\r\n        uint256 launchFee_,\r\n        uint256 delayedTradingFee_,\r\n        uint256 tradingDisableFee_,\r\n        uint256 antiDumpFee_,\r\n        uint256 blacklistFee_\r\n    ) {\r\n        require(servicePayAccount_ != address(0), \"invalid pay account\");\r\n        _servicePayAccount = servicePayAccount_;\r\n        _launchFee = launchFee_;\r\n        _tradingDelayFee = delayedTradingFee_;\r\n        _tradingDisableFee = tradingDisableFee_;\r\n        _antiDumpFee = antiDumpFee_;\r\n        _blacklistFee = blacklistFee_;\r\n    }\r\n\r\n    /// @notice Create token from the template\r\n    /// @dev Token configuration parameters are passed as ABI-encoded values.\r\n    function createERC20(\r\n        IBase.TokenLaunchConf memory tokenLaunchConf\r\n    ) external payable whenNotPaused returns (address) {\r\n        uint256 ethAmount = msg.value;\r\n        require(_tokens[tokenLaunchConf.uuid] == address(0), \"duplicated uuid\");\r\n\r\n        IBase.InheritedConf memory inheritedConf = _buildInheritedConf(\r\n            tokenLaunchConf.uuid\r\n        );\r\n        IERC20ByBankPad createdToken = _deployERC20(\r\n            tokenLaunchConf,\r\n            inheritedConf\r\n        );\r\n\r\n        (\r\n            bool isTradingDelayed,\r\n            bool isTradingDisabled,\r\n            uint256 ethInLP,\r\n            uint256 ethInLockFee\r\n        ) = _initializeLP(createdToken, tokenLaunchConf);\r\n        uint256 serviceFee = _launchFee +\r\n            (isTradingDelayed ? _tradingDelayFee : 0) +\r\n            (isTradingDisabled ? _tradingDisableFee : 0) +\r\n            (createdToken.isAntiDumpEnabled() ? _antiDumpFee : 0) +\r\n            (createdToken.isBlacklistEnabled() ? _blacklistFee : 0);\r\n        require(\r\n            ethAmount >= serviceFee + ethInLP + ethInLockFee,\r\n            \"insufficient eth\"\r\n        );\r\n\r\n        // send remained eth to the service pay account\r\n        _servicePayAccount.sendValue(address(this).balance);\r\n        createdToken.launch(isTradingDelayed, isTradingDisabled);\r\n\r\n        emit NewTokenCreated(\r\n            address(createdToken),\r\n            _servicePayAccount,\r\n            _msgSender(),\r\n            createdToken.bankUUIDHash(),\r\n            serviceFee,\r\n            tokenLaunchConf,\r\n            inheritedConf\r\n        );\r\n\r\n        return address(createdToken);\r\n    }\r\n\r\n    function _deployERC20(\r\n        IBase.TokenLaunchConf memory tokenLaunchConf,\r\n        IBase.InheritedConf memory inheritedConf\r\n    ) private returns (IERC20ByBankPad) {\r\n        address deployer = _msgSender();\r\n        uint16 launchedCount = _launchedCounts[deployer];\r\n        require(launchedCount < _maxLaunchesPerWallet, \"over launched\");\r\n        _launchedCounts[deployer] = ++launchedCount;\r\n\r\n        // validate some props in the factory, not to transfer attributes to the token\r\n        _validateTaxProps(tokenLaunchConf.taxParam);\r\n\r\n        bytes32 salt = keccak256(\r\n            abi.encodePacked(tokenLaunchConf.uuid, block.timestamp)\r\n        );\r\n        bytes32 bankIdHash = keccak256(abi.encodePacked(tokenLaunchConf.uuid));\r\n        bytes memory args = abi.encode(\r\n            address(this),\r\n            deployer,\r\n            tokenLaunchConf,\r\n            inheritedConf\r\n        );\r\n\r\n        address deployedAddress = IERC20MachineByBankPad(_machine).deploy(\r\n            bankIdHash,\r\n            salt,\r\n            args\r\n        );\r\n        _tokens[tokenLaunchConf.uuid] = deployedAddress;\r\n\r\n        return IERC20ByBankPad(deployedAddress);\r\n    }\r\n\r\n    function _initializeLP(\r\n        IERC20ByBankPad createdToken,\r\n        IBase.TokenLaunchConf memory param\r\n    ) private returns (bool, bool, uint256, uint256) {\r\n        (\r\n            bool isLPBurn,\r\n            bool isTradingDelayed,\r\n            bool isTradingDisabled,\r\n            uint256 pairedTokenAmount,\r\n            uint256 lockPeriod\r\n        ) = abi.decode(param.lpParam, (bool, bool, bool, uint256, uint256));\r\n        require(pairedTokenAmount > 0, \"invalid pair token amount\");\r\n\r\n        // add liquidity\r\n        (uint256 lpAmount, uint256 ethInLP) = _addLP(\r\n            createdToken,\r\n            pairedTokenAmount,\r\n            isLPBurn\r\n        );\r\n\r\n        // lock liquidity\r\n        uint256 ethInLockFee;\r\n        if (!isLPBurn)\r\n            ethInLockFee = _lockLP(createdToken, lpAmount, lockPeriod);\r\n\r\n        return (isTradingDelayed, isTradingDisabled, ethInLP, ethInLockFee);\r\n    }\r\n\r\n    /// @dev Add liquidity to the uniswap router\r\n    /// LP is burnt if the burn flag is set\r\n    /// @return uint256 created LP amount\r\n    /// @return uint256 if pair is eth, return eth amount\r\n    function _addLP(\r\n        IERC20ByBankPad createdToken,\r\n        uint256 pairedTokenAmount,\r\n        bool isLPBurn\r\n    ) private returns (uint256, uint256) {\r\n        (address dexRouter_, address basePairedToken, ) = createdToken\r\n            .ammAddresses();\r\n        IDexRouter dexRouter = IDexRouter(dexRouter_);\r\n        uint256 createdTokenAmount = createdToken.balanceOf(address(this));\r\n\r\n        IERC20(address(createdToken)).safeApprove(\r\n            address(dexRouter),\r\n            createdTokenAmount\r\n        );\r\n\r\n        require(\r\n            pairedTokenAmount >= _minPairTokenAmounts[basePairedToken],\r\n            \"too small pair amount\"\r\n        );\r\n\r\n        if (basePairedToken == ETH_ADDRESS) {\r\n            (, , uint256 lpAmount) = dexRouter.addLiquidityETH{\r\n                value: pairedTokenAmount\r\n            }(\r\n                address(createdToken),\r\n                createdTokenAmount,\r\n                0,\r\n                0,\r\n                isLPBurn ? address(0xdead) : address(this),\r\n                block.timestamp + 300\r\n            );\r\n            return (lpAmount, pairedTokenAmount);\r\n        } else {\r\n            IERC20(basePairedToken).safeTransferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                pairedTokenAmount\r\n            );\r\n            IERC20(basePairedToken).safeApprove(\r\n                address(dexRouter),\r\n                pairedTokenAmount\r\n            );\r\n            (, , uint256 lpAmount) = dexRouter.addLiquidity(\r\n                address(createdToken),\r\n                basePairedToken,\r\n                createdTokenAmount,\r\n                pairedTokenAmount,\r\n                0,\r\n                0,\r\n                isLPBurn ? address(0xdead) : address(this),\r\n                block.timestamp + 300\r\n            );\r\n            return (lpAmount, 0);\r\n        }\r\n    }\r\n\r\n    /// @dev Lock LP into unicrypt lp locker contract\r\n    /// We pay fee in ETH\r\n    /// @return uint256 fee amount\r\n    function _lockLP(\r\n        IERC20ByBankPad createdToken,\r\n        uint256 lpAmount,\r\n        uint256 lockPeriod\r\n    ) private returns (uint256) {\r\n        require(lockPeriod >= _minLockPeriod, \"too short lock\");\r\n        (address dexRouter, , address baseAmmPair) = createdToken\r\n            .ammAddresses();\r\n        IUniLocker lockerForDex = IUniLocker(_lpLockers[dexRouter]);\r\n        require(\r\n            address(lockerForDex) != address(0),\r\n            \"unsupported dex for lock\"\r\n        );\r\n        uint256 ethFee = lockerForDex.gFees().ethFee;\r\n\r\n        IERC20(baseAmmPair).safeApprove(address(lockerForDex), lpAmount);\r\n        lockerForDex.lockLPToken{value: ethFee}(\r\n            baseAmmPair,\r\n            lpAmount,\r\n            block.timestamp + lockPeriod,\r\n            payable(address(0)),\r\n            true,\r\n            payable(_msgSender())\r\n        );\r\n\r\n        return ethFee;\r\n    }\r\n\r\n    /**\r\n     * @notice function {pauseFactory}\r\n     *\r\n     * Pause factory for the maintenance\r\n     */\r\n    function pauseFactory(bool flag) external onlyOwner {\r\n        if (flag) _pause();\r\n        else _unpause();\r\n    }\r\n\r\n    /// @notice It allows the admin to recover tokens sent to the contract\r\n    /// @param token_: the address of the token to withdraw\r\n    /// @param amount_: the number of tokens to withdraw\r\n    /// @dev Only owner can call this function\r\n    function recoverToken(address token_, uint256 amount_) external onlyOwner {\r\n        IERC20(token_).safeTransfer(_msgSender(), amount_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"servicePayAccount_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayedTradingFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingDisableFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antiDumpFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklistFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bankPadTax\",\"type\":\"uint16\"}],\"name\":\"BankPadTaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"ManualEnableTradingForUUIDUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxLaunches\",\"type\":\"uint16\"}],\"name\":\"MaxLaunchesPerWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxTax\",\"type\":\"uint16\"}],\"name\":\"MaxTaxToRenounceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"teamAlloc\",\"type\":\"uint16\"}],\"name\":\"MaxTeamAllocUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"teamAlloc\",\"type\":\"uint16\"}],\"name\":\"MaxTeamAllocUpdatedForUUID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"MinLockPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinPairTokenAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"serviceAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuidHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"distribParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"antiBotParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"taxParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"lpParam\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IBase.TokenLaunchConf\",\"name\":\"tokenLaunchConf\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"autoBurnFirstPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"autoBurnSecondPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"autoBurnThirdPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"thresholdPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxBuyTaxAfter\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSellTaxAfter\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTreasuryTaxAfter\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bankPadTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTaxToRenounce\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"bankPadTaxApplyPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxWhitelistApplyDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingDelayTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingDisableTime\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct IBase.InheritedConf\",\"name\":\"inheritedConf\",\"type\":\"tuple\"}],\"name\":\"NewTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingDelayFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingDisableFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"antiDumpFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blacklistFee\",\"type\":\"uint256\"}],\"name\":\"ServiceFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ServicePayAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"firstPercent\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"secondPercent\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"thirdPercent\",\"type\":\"uint16\"}],\"name\":\"SnipeAutoBurnPercentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxBuyTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxSellTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxTreasuryTax\",\"type\":\"uint16\"}],\"name\":\"TaxAfterLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxBuyTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxSellTax\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxTreasuryTax\",\"type\":\"uint16\"}],\"name\":\"TaxLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"name\":\"ThreasholdPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tradingDelayTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tradingDisableTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bankPadTaxApplyPeriod\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"taxWhitelistApplyDelay\",\"type\":\"uint32\"}],\"name\":\"TimeConfigurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bankMachine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankPadTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"distribParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"antiBotParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"taxParam\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"lpParam\",\"type\":\"bytes\"}],\"internalType\":\"struct IBase.TokenLaunchConf\",\"name\":\"tokenLaunchConf\",\"type\":\"tuple\"}],\"name\":\"createERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"}],\"name\":\"isUUIDWhitelistedForManualEnableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"launchedCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"}],\"name\":\"lpLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunchesPerWallet\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxToRenounce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTeamAlloc\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"}],\"name\":\"maxTeamAllocForUUID\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"}],\"name\":\"minPairTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"pauseFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"servicePayAccount\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipeAutoBurnPercents\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAfterLimits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxLimits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeConfiguration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"machine\",\"type\":\"address\"}],\"name\":\"updateBankMachine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"name\":\"updateBankPadTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newLocker\",\"type\":\"address\"}],\"name\":\"updateLPLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxLaunches\",\"type\":\"uint16\"}],\"name\":\"updateMaxLaunchesPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTax\",\"type\":\"uint16\"}],\"name\":\"updateMaxTaxToRenounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"teamAlloc\",\"type\":\"uint16\"}],\"name\":\"updateMaxTeamAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"teamAlloc\",\"type\":\"uint16\"}],\"name\":\"updateMaxTeamAllocForUUID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"updateMinLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinPairTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingDelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingDisableFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"antiDumpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blacklistFee\",\"type\":\"uint256\"}],\"name\":\"updateServiceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateServicePayAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"firstPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"thirdPercent\",\"type\":\"uint16\"}],\"name\":\"updateSnipeAutoBurnPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxBuyTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSellTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTreasuryTax\",\"type\":\"uint16\"}],\"name\":\"updateTaxAfterLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxBuyTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSellTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTreasuryTax\",\"type\":\"uint16\"}],\"name\":\"updateTaxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"name\":\"updateThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"tradingDelayTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingDisableTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bankPadTaxApplyPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxWhitelistApplyDelay\",\"type\":\"uint32\"}],\"name\":\"updateTimeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"whitelistUUIDForManualEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20FactoryByBankPad", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000067262a61c0a459fff172c22e60dbc730393bf790000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000000b1a2bc2ec50000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1aa55923847a0b4fc618e6c872261f39587ca3f2aea730bef485125ec4dce110"}