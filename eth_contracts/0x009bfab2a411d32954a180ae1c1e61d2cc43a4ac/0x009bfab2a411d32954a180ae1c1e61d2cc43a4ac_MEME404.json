{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC-165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC404 is IERC165 {\r\n  event ERC20Approval(address owner, address spender, uint256 value);\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n  event ERC721Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 indexed id\r\n  );\r\n  event ERC20Transfer(address indexed from, address indexed to, uint256 amount);\r\n  event ERC721Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed id\r\n  );\r\n\r\n  error NotFound();\r\n  error InvalidId();\r\n  error AlreadyExists();\r\n  error InvalidRecipient();\r\n  error InvalidSender();\r\n  error InvalidSpender();\r\n  error InvalidOperator();\r\n  error UnsafeRecipient();\r\n  error NotWhitelisted();\r\n  error Unauthorized();\r\n  error InsufficientAllowance();\r\n  error DecimalsTooLow();\r\n  error CannotRemoveFromWhitelist();\r\n  error PermitDeadlineExpired();\r\n  error InvalidSigner();\r\n  error InvalidApproval();\r\n  error OwnedIndexOverflow();\r\n\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint8);\r\n  function totalSupply() external view returns (uint256);\r\n  function erc20TotalSupply() external view returns (uint256);\r\n  function erc721TotalSupply() external view returns (uint256);\r\n  function balanceOf(address owner_) external view returns (uint256);\r\n  function erc721BalanceOf(address owner_) external view returns (uint256);\r\n  function erc20BalanceOf(address owner_) external view returns (uint256);\r\n  function whitelist(address account_) external view returns (bool);\r\n  function isApprovedForAll(\r\n    address owner_,\r\n    address operator_\r\n  ) external view returns (bool);\r\n  function allowance(\r\n    address owner_,\r\n    address spender_\r\n  ) external view returns (uint256);\r\n  function owned(address owner_) external view returns (uint256[] memory);\r\n  function ownerOf(uint256 id_) external view returns (address erc721Owner);\r\n  function tokenURI(uint256 id_) external view returns (string memory);\r\n  function approve(\r\n    address spender_,\r\n    uint256 valueOrId_\r\n  ) external returns (bool);\r\n  function setApprovalForAll(address operator_, bool approved_) external;\r\n  function transferFrom(\r\n    address from_,\r\n    address to_,\r\n    uint256 valueOrId_\r\n  ) external returns (bool);\r\n  function transfer(address to_, uint256 amount_) external returns (bool);\r\n  function erc721TokensBankedInQueue() external view returns (uint256);\r\n  function safeTransferFrom(address from_, address to_, uint256 id_) external;\r\n  function safeTransferFrom(\r\n    address from_,\r\n    address to_,\r\n    uint256 id_,\r\n    bytes calldata data_\r\n  ) external;\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function permit(\r\n    address owner_,\r\n    address spender_,\r\n    uint256 value_,\r\n    uint256 deadline_,\r\n    uint8 v_,\r\n    bytes32 r_,\r\n    bytes32 s_\r\n  ) external;\r\n}\r\n\r\nabstract contract ERC721Receiver {\r\n  function onERC721Received(\r\n    address,\r\n    address,\r\n    uint256,\r\n    bytes calldata\r\n  ) external virtual returns (bytes4) {\r\n    return ERC721Receiver.onERC721Received.selector;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\r\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\r\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\r\n * the existing queue contents are left in storage.\r\n *\r\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\r\n * used in storage, and not in memory.\r\n * ```solidity\r\n * DoubleEndedQueue.Bytes32Deque queue;\r\n * ```\r\n */\r\nlibrary DoubleEndedQueue {\r\n  /**\r\n   * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\r\n   */\r\n  error QueueEmpty();\r\n\r\n  /**\r\n   * @dev A push operation couldn't be completed due to the queue being full.\r\n   */\r\n  error QueueFull();\r\n\r\n  /**\r\n   * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\r\n   */\r\n  error QueueOutOfBounds();\r\n\r\n  /**\r\n   * @dev Indices are 128 bits so begin and end are packed in a single storage slot for efficient access.\r\n   *\r\n   * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\r\n   * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\r\n   * lead to unexpected behavior.\r\n   *\r\n   * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\r\n   */\r\n  struct Uint256Deque {\r\n    uint128 _begin;\r\n    uint128 _end;\r\n    mapping(uint128 index => uint256) _data;\r\n  }\r\n\r\n  /**\r\n   * @dev Inserts an item at the end of the queue.\r\n   *\r\n   * Reverts with {QueueFull} if the queue is full.\r\n   */\r\n  function pushBack(Uint256Deque storage deque, uint256 value) internal {\r\n    unchecked {\r\n      uint128 backIndex = deque._end;\r\n      if (backIndex + 1 == deque._begin) revert QueueFull();\r\n      deque._data[backIndex] = value;\r\n      deque._end = backIndex + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes the item at the end of the queue and returns it.\r\n   *\r\n   * Reverts with {QueueEmpty} if the queue is empty.\r\n   */\r\n  function popBack(\r\n    Uint256Deque storage deque\r\n  ) internal returns (uint256 value) {\r\n    unchecked {\r\n      uint128 backIndex = deque._end;\r\n      if (backIndex == deque._begin) revert QueueEmpty();\r\n      --backIndex;\r\n      value = deque._data[backIndex];\r\n      delete deque._data[backIndex];\r\n      deque._end = backIndex;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Inserts an item at the beginning of the queue.\r\n   *\r\n   * Reverts with {QueueFull} if the queue is full.\r\n   */\r\n  function pushFront(Uint256Deque storage deque, uint256 value) internal {\r\n    unchecked {\r\n      uint128 frontIndex = deque._begin - 1;\r\n      if (frontIndex == deque._end) revert QueueFull();\r\n      deque._data[frontIndex] = value;\r\n      deque._begin = frontIndex;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes the item at the beginning of the queue and returns it.\r\n   *\r\n   * Reverts with `QueueEmpty` if the queue is empty.\r\n   */\r\n  function popFront(\r\n    Uint256Deque storage deque\r\n  ) internal returns (uint256 value) {\r\n    unchecked {\r\n      uint128 frontIndex = deque._begin;\r\n      if (frontIndex == deque._end) revert QueueEmpty();\r\n      value = deque._data[frontIndex];\r\n      delete deque._data[frontIndex];\r\n      deque._begin = frontIndex + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the item at the beginning of the queue.\r\n   *\r\n   * Reverts with `QueueEmpty` if the queue is empty.\r\n   */\r\n  function front(\r\n    Uint256Deque storage deque\r\n  ) internal view returns (uint256 value) {\r\n    if (empty(deque)) revert QueueEmpty();\r\n    return deque._data[deque._begin];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the item at the end of the queue.\r\n   *\r\n   * Reverts with `QueueEmpty` if the queue is empty.\r\n   */\r\n  function back(\r\n    Uint256Deque storage deque\r\n  ) internal view returns (uint256 value) {\r\n    if (empty(deque)) revert QueueEmpty();\r\n    unchecked {\r\n      return deque._data[deque._end - 1];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\r\n   * `length(deque) - 1`.\r\n   *\r\n   * Reverts with `QueueOutOfBounds` if the index is out of bounds.\r\n   */\r\n  function at(\r\n    Uint256Deque storage deque,\r\n    uint256 index\r\n  ) internal view returns (uint256 value) {\r\n    if (index >= length(deque)) revert QueueOutOfBounds();\r\n    // By construction, length is a uint128, so the check above ensures that index can be safely downcast to uint128\r\n    unchecked {\r\n      return deque._data[deque._begin + uint128(index)];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Resets the queue back to being empty.\r\n   *\r\n   * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\r\n   * out on potential gas refunds.\r\n   */\r\n  function clear(Uint256Deque storage deque) internal {\r\n    deque._begin = 0;\r\n    deque._end = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of items in the queue.\r\n   */\r\n  function length(Uint256Deque storage deque) internal view returns (uint256) {\r\n    unchecked {\r\n      return uint256(deque._end - deque._begin);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the queue is empty.\r\n   */\r\n  function empty(Uint256Deque storage deque) internal view returns (bool) {\r\n    return deque._end == deque._begin;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Helper library for emitting standardized panic codes.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *      using Panic for uint256;\r\n *\r\n *      // Use any of the declared internal constants\r\n *      function foo() { Panic.GENERIC.panic(); }\r\n *\r\n *      // Alternatively\r\n *      function foo() { Panic.panic(Panic.GENERIC); }\r\n * }\r\n * ```\r\n *\r\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\r\n */\r\n// slither-disable-next-line unused-state\r\nlibrary Panic {\r\n    /// @dev generic / unspecified error\r\n    uint256 internal constant GENERIC = 0x00;\r\n    /// @dev used by the assert() builtin\r\n    uint256 internal constant ASSERT = 0x01;\r\n    /// @dev arithmetic underflow or overflow\r\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\r\n    /// @dev division or modulo by zero\r\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\r\n    /// @dev enum conversion error\r\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\r\n    /// @dev invalid encoding in storage\r\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\r\n    /// @dev empty array pop\r\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\r\n    /// @dev array out of bounds access\r\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\r\n    /// @dev resource error (too large allocation or too large array)\r\n    uint256 internal constant RESOURCE_ERROR = 0x41;\r\n    /// @dev calling invalid internal function\r\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\r\n\r\n    /// @dev Reverts with a panic code. Recommended to use with\r\n    /// the internal constants with predefined codes.\r\n    function panic(uint256 code) internal pure {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, shl(0xe0, 0x4e487b71))\r\n            mstore(0x04, code)\r\n            revert(0x00, 0x24)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Value doesn't fit in an uint of `bits` size.\r\n     */\r\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\r\n\r\n    /**\r\n     * @dev An int value doesn't fit in an uint of `bits` size.\r\n     */\r\n    error SafeCastOverflowedIntToUint(int256 value);\r\n\r\n    /**\r\n     * @dev Value doesn't fit in an int of `bits` size.\r\n     */\r\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\r\n\r\n    /**\r\n     * @dev An uint value doesn't fit in an int of `bits` size.\r\n     */\r\n    error SafeCastOverflowedUintToInt(uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint248 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint248).\r\n     *\r\n     * Counterpart to Solidity's `uint248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     */\r\n    function toUint248(uint256 value) internal pure returns (uint248) {\r\n        if (value > type(uint248).max) {\r\n            revert SafeCastOverflowedUintDowncast(248, value);\r\n        }\r\n        return uint248(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint240 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint240).\r\n     *\r\n     * Counterpart to Solidity's `uint240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     */\r\n    function toUint240(uint256 value) internal pure returns (uint240) {\r\n        if (value > type(uint240).max) {\r\n            revert SafeCastOverflowedUintDowncast(240, value);\r\n        }\r\n        return uint240(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint232 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint232).\r\n     *\r\n     * Counterpart to Solidity's `uint232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     */\r\n    function toUint232(uint256 value) internal pure returns (uint232) {\r\n        if (value > type(uint232).max) {\r\n            revert SafeCastOverflowedUintDowncast(232, value);\r\n        }\r\n        return uint232(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        if (value > type(uint224).max) {\r\n            revert SafeCastOverflowedUintDowncast(224, value);\r\n        }\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint216 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint216).\r\n     *\r\n     * Counterpart to Solidity's `uint216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     */\r\n    function toUint216(uint256 value) internal pure returns (uint216) {\r\n        if (value > type(uint216).max) {\r\n            revert SafeCastOverflowedUintDowncast(216, value);\r\n        }\r\n        return uint216(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint208 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint208).\r\n     *\r\n     * Counterpart to Solidity's `uint208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     */\r\n    function toUint208(uint256 value) internal pure returns (uint208) {\r\n        if (value > type(uint208).max) {\r\n            revert SafeCastOverflowedUintDowncast(208, value);\r\n        }\r\n        return uint208(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint200 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint200).\r\n     *\r\n     * Counterpart to Solidity's `uint200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     */\r\n    function toUint200(uint256 value) internal pure returns (uint200) {\r\n        if (value > type(uint200).max) {\r\n            revert SafeCastOverflowedUintDowncast(200, value);\r\n        }\r\n        return uint200(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint192 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint192).\r\n     *\r\n     * Counterpart to Solidity's `uint192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     */\r\n    function toUint192(uint256 value) internal pure returns (uint192) {\r\n        if (value > type(uint192).max) {\r\n            revert SafeCastOverflowedUintDowncast(192, value);\r\n        }\r\n        return uint192(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint184 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint184).\r\n     *\r\n     * Counterpart to Solidity's `uint184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     */\r\n    function toUint184(uint256 value) internal pure returns (uint184) {\r\n        if (value > type(uint184).max) {\r\n            revert SafeCastOverflowedUintDowncast(184, value);\r\n        }\r\n        return uint184(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint176 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint176).\r\n     *\r\n     * Counterpart to Solidity's `uint176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     */\r\n    function toUint176(uint256 value) internal pure returns (uint176) {\r\n        if (value > type(uint176).max) {\r\n            revert SafeCastOverflowedUintDowncast(176, value);\r\n        }\r\n        return uint176(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint168 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint168).\r\n     *\r\n     * Counterpart to Solidity's `uint168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     */\r\n    function toUint168(uint256 value) internal pure returns (uint168) {\r\n        if (value > type(uint168).max) {\r\n            revert SafeCastOverflowedUintDowncast(168, value);\r\n        }\r\n        return uint168(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint160 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint160).\r\n     *\r\n     * Counterpart to Solidity's `uint160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     */\r\n    function toUint160(uint256 value) internal pure returns (uint160) {\r\n        if (value > type(uint160).max) {\r\n            revert SafeCastOverflowedUintDowncast(160, value);\r\n        }\r\n        return uint160(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint152 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint152).\r\n     *\r\n     * Counterpart to Solidity's `uint152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     */\r\n    function toUint152(uint256 value) internal pure returns (uint152) {\r\n        if (value > type(uint152).max) {\r\n            revert SafeCastOverflowedUintDowncast(152, value);\r\n        }\r\n        return uint152(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint144 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint144).\r\n     *\r\n     * Counterpart to Solidity's `uint144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     */\r\n    function toUint144(uint256 value) internal pure returns (uint144) {\r\n        if (value > type(uint144).max) {\r\n            revert SafeCastOverflowedUintDowncast(144, value);\r\n        }\r\n        return uint144(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint136 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint136).\r\n     *\r\n     * Counterpart to Solidity's `uint136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     */\r\n    function toUint136(uint256 value) internal pure returns (uint136) {\r\n        if (value > type(uint136).max) {\r\n            revert SafeCastOverflowedUintDowncast(136, value);\r\n        }\r\n        return uint136(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        if (value > type(uint128).max) {\r\n            revert SafeCastOverflowedUintDowncast(128, value);\r\n        }\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint120 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint120).\r\n     *\r\n     * Counterpart to Solidity's `uint120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     */\r\n    function toUint120(uint256 value) internal pure returns (uint120) {\r\n        if (value > type(uint120).max) {\r\n            revert SafeCastOverflowedUintDowncast(120, value);\r\n        }\r\n        return uint120(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint112 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint112).\r\n     *\r\n     * Counterpart to Solidity's `uint112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     */\r\n    function toUint112(uint256 value) internal pure returns (uint112) {\r\n        if (value > type(uint112).max) {\r\n            revert SafeCastOverflowedUintDowncast(112, value);\r\n        }\r\n        return uint112(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint104 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint104).\r\n     *\r\n     * Counterpart to Solidity's `uint104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     */\r\n    function toUint104(uint256 value) internal pure returns (uint104) {\r\n        if (value > type(uint104).max) {\r\n            revert SafeCastOverflowedUintDowncast(104, value);\r\n        }\r\n        return uint104(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        if (value > type(uint96).max) {\r\n            revert SafeCastOverflowedUintDowncast(96, value);\r\n        }\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint88 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint88).\r\n     *\r\n     * Counterpart to Solidity's `uint88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     */\r\n    function toUint88(uint256 value) internal pure returns (uint88) {\r\n        if (value > type(uint88).max) {\r\n            revert SafeCastOverflowedUintDowncast(88, value);\r\n        }\r\n        return uint88(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint80 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint80).\r\n     *\r\n     * Counterpart to Solidity's `uint80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     */\r\n    function toUint80(uint256 value) internal pure returns (uint80) {\r\n        if (value > type(uint80).max) {\r\n            revert SafeCastOverflowedUintDowncast(80, value);\r\n        }\r\n        return uint80(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint72 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint72).\r\n     *\r\n     * Counterpart to Solidity's `uint72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     */\r\n    function toUint72(uint256 value) internal pure returns (uint72) {\r\n        if (value > type(uint72).max) {\r\n            revert SafeCastOverflowedUintDowncast(72, value);\r\n        }\r\n        return uint72(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        if (value > type(uint64).max) {\r\n            revert SafeCastOverflowedUintDowncast(64, value);\r\n        }\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint56 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint56).\r\n     *\r\n     * Counterpart to Solidity's `uint56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     */\r\n    function toUint56(uint256 value) internal pure returns (uint56) {\r\n        if (value > type(uint56).max) {\r\n            revert SafeCastOverflowedUintDowncast(56, value);\r\n        }\r\n        return uint56(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint48 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint48).\r\n     *\r\n     * Counterpart to Solidity's `uint48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     */\r\n    function toUint48(uint256 value) internal pure returns (uint48) {\r\n        if (value > type(uint48).max) {\r\n            revert SafeCastOverflowedUintDowncast(48, value);\r\n        }\r\n        return uint48(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        if (value > type(uint40).max) {\r\n            revert SafeCastOverflowedUintDowncast(40, value);\r\n        }\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        if (value > type(uint32).max) {\r\n            revert SafeCastOverflowedUintDowncast(32, value);\r\n        }\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint24 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint24).\r\n     *\r\n     * Counterpart to Solidity's `uint24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     */\r\n    function toUint24(uint256 value) internal pure returns (uint24) {\r\n        if (value > type(uint24).max) {\r\n            revert SafeCastOverflowedUintDowncast(24, value);\r\n        }\r\n        return uint24(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        if (value > type(uint16).max) {\r\n            revert SafeCastOverflowedUintDowncast(16, value);\r\n        }\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        if (value > type(uint8).max) {\r\n            revert SafeCastOverflowedUintDowncast(8, value);\r\n        }\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        if (value < 0) {\r\n            revert SafeCastOverflowedIntToUint(value);\r\n        }\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int248 from int256, reverting on\r\n     * overflow (when the input is less than smallest int248 or\r\n     * greater than largest int248).\r\n     *\r\n     * Counterpart to Solidity's `int248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     */\r\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\r\n        downcasted = int248(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(248, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int240 from int256, reverting on\r\n     * overflow (when the input is less than smallest int240 or\r\n     * greater than largest int240).\r\n     *\r\n     * Counterpart to Solidity's `int240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     */\r\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\r\n        downcasted = int240(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(240, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int232 from int256, reverting on\r\n     * overflow (when the input is less than smallest int232 or\r\n     * greater than largest int232).\r\n     *\r\n     * Counterpart to Solidity's `int232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     */\r\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\r\n        downcasted = int232(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(232, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int224 from int256, reverting on\r\n     * overflow (when the input is less than smallest int224 or\r\n     * greater than largest int224).\r\n     *\r\n     * Counterpart to Solidity's `int224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     */\r\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\r\n        downcasted = int224(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(224, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int216 from int256, reverting on\r\n     * overflow (when the input is less than smallest int216 or\r\n     * greater than largest int216).\r\n     *\r\n     * Counterpart to Solidity's `int216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     */\r\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\r\n        downcasted = int216(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(216, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int208 from int256, reverting on\r\n     * overflow (when the input is less than smallest int208 or\r\n     * greater than largest int208).\r\n     *\r\n     * Counterpart to Solidity's `int208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     */\r\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\r\n        downcasted = int208(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(208, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int200 from int256, reverting on\r\n     * overflow (when the input is less than smallest int200 or\r\n     * greater than largest int200).\r\n     *\r\n     * Counterpart to Solidity's `int200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     */\r\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\r\n        downcasted = int200(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(200, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int192 from int256, reverting on\r\n     * overflow (when the input is less than smallest int192 or\r\n     * greater than largest int192).\r\n     *\r\n     * Counterpart to Solidity's `int192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     */\r\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\r\n        downcasted = int192(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(192, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int184 from int256, reverting on\r\n     * overflow (when the input is less than smallest int184 or\r\n     * greater than largest int184).\r\n     *\r\n     * Counterpart to Solidity's `int184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     */\r\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\r\n        downcasted = int184(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(184, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int176 from int256, reverting on\r\n     * overflow (when the input is less than smallest int176 or\r\n     * greater than largest int176).\r\n     *\r\n     * Counterpart to Solidity's `int176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     */\r\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\r\n        downcasted = int176(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(176, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int168 from int256, reverting on\r\n     * overflow (when the input is less than smallest int168 or\r\n     * greater than largest int168).\r\n     *\r\n     * Counterpart to Solidity's `int168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     */\r\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\r\n        downcasted = int168(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(168, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int160 from int256, reverting on\r\n     * overflow (when the input is less than smallest int160 or\r\n     * greater than largest int160).\r\n     *\r\n     * Counterpart to Solidity's `int160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     */\r\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\r\n        downcasted = int160(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(160, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int152 from int256, reverting on\r\n     * overflow (when the input is less than smallest int152 or\r\n     * greater than largest int152).\r\n     *\r\n     * Counterpart to Solidity's `int152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     */\r\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\r\n        downcasted = int152(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(152, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int144 from int256, reverting on\r\n     * overflow (when the input is less than smallest int144 or\r\n     * greater than largest int144).\r\n     *\r\n     * Counterpart to Solidity's `int144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     */\r\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\r\n        downcasted = int144(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(144, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int136 from int256, reverting on\r\n     * overflow (when the input is less than smallest int136 or\r\n     * greater than largest int136).\r\n     *\r\n     * Counterpart to Solidity's `int136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     */\r\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\r\n        downcasted = int136(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(136, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\r\n        downcasted = int128(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(128, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int120 from int256, reverting on\r\n     * overflow (when the input is less than smallest int120 or\r\n     * greater than largest int120).\r\n     *\r\n     * Counterpart to Solidity's `int120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     */\r\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\r\n        downcasted = int120(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(120, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int112 from int256, reverting on\r\n     * overflow (when the input is less than smallest int112 or\r\n     * greater than largest int112).\r\n     *\r\n     * Counterpart to Solidity's `int112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     */\r\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\r\n        downcasted = int112(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(112, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int104 from int256, reverting on\r\n     * overflow (when the input is less than smallest int104 or\r\n     * greater than largest int104).\r\n     *\r\n     * Counterpart to Solidity's `int104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     */\r\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\r\n        downcasted = int104(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(104, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int96 from int256, reverting on\r\n     * overflow (when the input is less than smallest int96 or\r\n     * greater than largest int96).\r\n     *\r\n     * Counterpart to Solidity's `int96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\r\n        downcasted = int96(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(96, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int88 from int256, reverting on\r\n     * overflow (when the input is less than smallest int88 or\r\n     * greater than largest int88).\r\n     *\r\n     * Counterpart to Solidity's `int88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     */\r\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\r\n        downcasted = int88(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(88, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int80 from int256, reverting on\r\n     * overflow (when the input is less than smallest int80 or\r\n     * greater than largest int80).\r\n     *\r\n     * Counterpart to Solidity's `int80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     */\r\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\r\n        downcasted = int80(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(80, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int72 from int256, reverting on\r\n     * overflow (when the input is less than smallest int72 or\r\n     * greater than largest int72).\r\n     *\r\n     * Counterpart to Solidity's `int72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     */\r\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\r\n        downcasted = int72(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(72, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\r\n        downcasted = int64(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(64, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int56 from int256, reverting on\r\n     * overflow (when the input is less than smallest int56 or\r\n     * greater than largest int56).\r\n     *\r\n     * Counterpart to Solidity's `int56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     */\r\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\r\n        downcasted = int56(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(56, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int48 from int256, reverting on\r\n     * overflow (when the input is less than smallest int48 or\r\n     * greater than largest int48).\r\n     *\r\n     * Counterpart to Solidity's `int48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     */\r\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\r\n        downcasted = int48(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(48, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int40 from int256, reverting on\r\n     * overflow (when the input is less than smallest int40 or\r\n     * greater than largest int40).\r\n     *\r\n     * Counterpart to Solidity's `int40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\r\n        downcasted = int40(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(40, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\r\n        downcasted = int32(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(32, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int24 from int256, reverting on\r\n     * overflow (when the input is less than smallest int24 or\r\n     * greater than largest int24).\r\n     *\r\n     * Counterpart to Solidity's `int24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     */\r\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\r\n        downcasted = int24(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(24, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\r\n        downcasted = int16(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(16, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\r\n        downcasted = int8(value);\r\n        if (downcasted != value) {\r\n            revert SafeCastOverflowedIntDowncast(8, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        if (value > uint256(type(int256).max)) {\r\n            revert SafeCastOverflowedUintToInt(value);\r\n        }\r\n        return int256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\r\n     */\r\n    function toUint(bool b) internal pure returns (uint256 u) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            u := iszero(iszero(b))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            Panic.panic(Panic.DIVISION_BY_ZERO);\r\n        }\r\n\r\n        // The following calculation ensures accurate ceiling division without overflow.\r\n        // Since a is non-zero, (a - 1) / b will not overflow.\r\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\r\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\r\n        // when a = type(uint256).max and b = 1.\r\n        unchecked {\r\n            return a == 0 ? 0 : (a - 1) / b + 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     *\r\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                Panic.panic(denominator == 0 ? Panic.DIVISION_BY_ZERO : Panic.UNDER_OVERFLOW);\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\r\n     *\r\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, expect 0.\r\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\r\n     *\r\n     * If the input value is not inversible, 0 is returned.\r\n     *\r\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Ferma's little theorem and get the\r\n     * inverse using `Math.modExp(a, n - 2, n)`.\r\n     */\r\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            if (n == 0) return 0;\r\n\r\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\r\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\r\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\r\n            // ax + ny = 1\r\n            // ax = 1 + (-y)n\r\n            // ax \u2261 1 (mod n) # x is the inverse of a modulo n\r\n\r\n            // If the remainder is 0 the gcd is n right away.\r\n            uint256 remainder = a % n;\r\n            uint256 gcd = n;\r\n\r\n            // Therefore the initial coefficients are:\r\n            // ax + ny = gcd(a, n) = n\r\n            // 0a + 1n = n\r\n            int256 x = 0;\r\n            int256 y = 1;\r\n\r\n            while (remainder != 0) {\r\n                uint256 quotient = gcd / remainder;\r\n\r\n                (gcd, remainder) = (\r\n                    // The old remainder is the next gcd to try.\r\n                    remainder,\r\n                    // Compute the next remainder.\r\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\r\n                    // where gcd is at most n (capped to type(uint256).max)\r\n                    gcd - remainder * quotient\r\n                );\r\n\r\n                (x, y) = (\r\n                    // Increment the coefficient of a.\r\n                    y,\r\n                    // Decrement the coefficient of n.\r\n                    // Can overflow, but the result is casted to uint256 so that the\r\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\r\n                    x - y * int256(quotient)\r\n                );\r\n            }\r\n\r\n            if (gcd != 1) return 0; // No inverse exists.\r\n            return x < 0 ? (n - uint256(-x)) : uint256(x); // Wrap the result if it's negative.\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\r\n     *\r\n     * Requirements:\r\n     * - modulus can't be zero\r\n     * - underlying staticcall to precompile must succeed\r\n     *\r\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\r\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\r\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\r\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\r\n     * interpreted as 0.\r\n     */\r\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\r\n        (bool success, uint256 result) = tryModExp(b, e, m);\r\n        if (!success) {\r\n            if (m == 0) {\r\n                Panic.panic(Panic.DIVISION_BY_ZERO);\r\n            } else {\r\n                revert Address.FailedInnerCall();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\r\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked has failed if trying\r\n     * to operate modulo 0 or if the underlying precompile reverted.\r\n     *\r\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\r\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\r\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\r\n     * of a revert, but the result may be incorrectly interpreted as 0.\r\n     */\r\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\r\n        if (m == 0) return (false, 0);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            // | Offset    | Content    | Content (Hex)                                                      |\r\n            // |-----------|------------|--------------------------------------------------------------------|\r\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\r\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\r\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\r\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\r\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\r\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\r\n            mstore(ptr, 0x20)\r\n            mstore(add(ptr, 0x20), 0x20)\r\n            mstore(add(ptr, 0x40), 0x20)\r\n            mstore(add(ptr, 0x60), b)\r\n            mstore(add(ptr, 0x80), e)\r\n            mstore(add(ptr, 0xa0), m)\r\n\r\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\r\n            // so we can use the memory scratch space located at offset 0.\r\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\r\n            result := mload(0x00)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        uint256 exp;\r\n        unchecked {\r\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\r\n            value >>= exp;\r\n            result += exp;\r\n\r\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\r\n            value >>= exp;\r\n            result += exp;\r\n\r\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\r\n            value >>= exp;\r\n            result += exp;\r\n\r\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\r\n            value >>= exp;\r\n            result += exp;\r\n\r\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\r\n            value >>= exp;\r\n            result += exp;\r\n\r\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\r\n            value >>= exp;\r\n            result += exp;\r\n\r\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\r\n            value >>= exp;\r\n            result += exp;\r\n\r\n            result += SafeCast.toUint(value > 1);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        uint256 isGt;\r\n        unchecked {\r\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\r\n            value >>= isGt * 128;\r\n            result += isGt * 16;\r\n\r\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\r\n            value >>= isGt * 64;\r\n            result += isGt * 8;\r\n\r\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\r\n            value >>= isGt * 32;\r\n            result += isGt * 4;\r\n\r\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\r\n            value >>= isGt * 16;\r\n            result += isGt * 2;\r\n\r\n            result += SafeCast.toUint(value > (1 << 8) - 1);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\r\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\r\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\r\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\r\n            // the mask will either be `bytes(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\r\n            int256 mask = n >> 255;\r\n\r\n            // A `bytes(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\r\n            return uint256((n + mask) ^ mask);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The tree and the proofs can be generated using our\r\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n * You will find a quickstart guide in the readme.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the Merkle tree could be reinterpreted as a leaf value.\r\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\r\n * against this attack out of the box.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     *@dev The multiproof provided is not valid.\r\n     */\r\n    error MerkleProofInvalidMultiproof();\r\n\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     */\r\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\r\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\r\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\r\n     * respectively.\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\r\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\r\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the Merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 proofLen = proof.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        if (leavesLen + proofLen != totalHashes + 1) {\r\n            revert MerkleProofInvalidMultiproof();\r\n        }\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            if (proofPos != proofLen) {\r\n                revert MerkleProofInvalidMultiproof();\r\n            }\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the Merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 proofLen = proof.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        if (leavesLen + proofLen != totalHashes + 1) {\r\n            revert MerkleProofInvalidMultiproof();\r\n        }\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i]\r\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\r\n                : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            if (proofPos != proofLen) {\r\n                revert MerkleProofInvalidMultiproof();\r\n            }\r\n            unchecked {\r\n                return hashes[totalHashes - 1];\r\n            }\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sorts the pair (a, b) and hashes the result.\r\n     */\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\r\n     */\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC404MerkleClaim {\r\n  error AirdropAlreadyClaimed();\r\n  error NotEligibleForAirdrop();\r\n  error AirdropIsClosed();\r\n\r\n  function verifyProof(\r\n    bytes32[] memory proof_,\r\n    address claimer_,\r\n    uint256 value_\r\n  ) external view returns (bool);\r\n\r\n  function airdropMint(bytes32[] memory proof_, uint256 value_) external;\r\n}\r\n\r\nabstract contract ERC404MerkleClaim is IERC404MerkleClaim {\r\n  bool public airdropIsOpen;\r\n  bytes32 public airdropMerkleRoot;\r\n  mapping(address => bool) public hasClaimedAirdrop;\r\n\r\n  modifier whenAirdropIsOpen() {\r\n    if (airdropMerkleRoot == 0 || !airdropIsOpen) {\r\n      revert AirdropIsClosed();\r\n    }\r\n    _;\r\n  }\r\n\r\n  function verifyProof(\r\n    bytes32[] memory proof_,\r\n    address claimer_,\r\n    uint256 value_\r\n  ) public view returns (bool) {\r\n    bytes32 leaf = keccak256(\r\n      bytes.concat(keccak256(abi.encode(claimer_, value_)))\r\n    );\r\n    if (MerkleProof.verify(proof_, airdropMerkleRoot, leaf)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // To use, override this function in your contract, call\r\n  // super.airdropMint(proof_) within your override function, then mint tokens.\r\n  function airdropMint(\r\n    bytes32[] memory proof_,\r\n    uint256 value_\r\n  ) public virtual whenAirdropIsOpen {\r\n    _validateAndRecordAirdropClaim(proof_, msg.sender, value_);\r\n  }\r\n\r\n  function _setAirdropMerkleRoot(bytes32 airdropMerkleRoot_) internal {\r\n    airdropMerkleRoot = airdropMerkleRoot_;\r\n  }\r\n\r\n  function _toggleAirdropIsOpen() internal {\r\n    airdropIsOpen = !airdropIsOpen;\r\n  }\r\n\r\n  function _validateAndRecordAirdropClaim(\r\n    bytes32[] memory proof_,\r\n    address claimer_,\r\n    uint256 value_\r\n  ) internal {\r\n    // Check that the address is eligible.\r\n    if (!verifyProof(proof_, claimer_, value_)) {\r\n      revert NotEligibleForAirdrop();\r\n    }\r\n\r\n    // Check if address has already claimed their airdrop.\r\n    if (hasClaimedAirdrop[claimer_]) {\r\n      revert AirdropAlreadyClaimed();\r\n    }\r\n\r\n    // Mark address as claimed.\r\n    hasClaimedAirdrop[claimer_] = true;\r\n  }\r\n}\r\n\r\nabstract contract ERC404 is IERC404 {\r\n  using DoubleEndedQueue for DoubleEndedQueue.Uint256Deque;\r\n\r\n  /// @dev The queue of ERC-721 tokens stored in the contract.\r\n  DoubleEndedQueue.Uint256Deque private _storedERC721Ids;\r\n\r\n  /// @dev Token name\r\n  string public name;\r\n\r\n  /// @dev Token symbol\r\n  string public symbol;\r\n\r\n  /// @dev Decimals for ERC-20 representation\r\n  uint8 public immutable decimals;\r\n\r\n  /// @dev Units for ERC-20 representation\r\n  uint256 public immutable units;\r\n\r\n  /// @dev Total supply in ERC-20 representation\r\n  uint256 public totalSupply;\r\n\r\n  /// @dev Current mint counter which also represents the highest\r\n  ///      minted id, monotonically increasing to ensure accurate ownership\r\n  uint256 internal _minted;\r\n\r\n  /// @dev Initial chain id for EIP-2612 support\r\n  uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n  /// @dev Initial domain separator for EIP-2612 support\r\n  bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n  /// @dev Balance of user in ERC-20 representation\r\n  mapping(address => uint256) public balanceOf;\r\n\r\n  /// @dev Allowance of user in ERC-20 representation\r\n  mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n  /// @dev Approval in ERC-721 representaion\r\n  mapping(uint256 => address) public getApproved;\r\n\r\n  /// @dev Approval for all in ERC-721 representation\r\n  mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n  /// @dev Packed representation of ownerOf and owned indices\r\n  mapping(uint256 => uint256) internal _ownedData;\r\n\r\n  /// @dev Array of owned ids in ERC-721 representation\r\n  mapping(address => uint256[]) internal _owned;\r\n\r\n  /// @dev Addresses whitelisted from minting / banking for gas savings (pairs, routers, etc)\r\n  mapping(address => bool) public whitelist;\r\n\r\n  /// @dev EIP-2612 nonces\r\n  mapping(address => uint256) public nonces;\r\n\r\n  /// @dev Address bitmask for packed ownership data\r\n  uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\r\n\r\n  /// @dev Owned index bitmask for packed ownership data\r\n  uint256 private constant _BITMASK_OWNED_INDEX = ((1 << 96) - 1) << 160;\r\n\r\n  constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n    name = name_;\r\n    symbol = symbol_;\r\n\r\n    if (decimals_ < 18) {\r\n      revert DecimalsTooLow();\r\n    }\r\n\r\n    decimals = decimals_;\r\n    units = 10 ** decimals;\r\n\r\n    // EIP-2612 initialization\r\n    INITIAL_CHAIN_ID = block.chainid;\r\n    INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\r\n  }\r\n\r\n  /// @notice Function to find owner of a given ERC-721 token\r\n  function ownerOf(\r\n    uint256 id_\r\n  ) public view virtual returns (address erc721Owner) {\r\n    erc721Owner = _getOwnerOf(id_);\r\n\r\n    // If the id_ is beyond the range of minted tokens, is 0, or the token is not owned by anyone, revert.\r\n    if (id_ > _minted || id_ == 0 || erc721Owner == address(0)) {\r\n      revert NotFound();\r\n    }\r\n  }\r\n\r\n  function owned(\r\n    address owner_\r\n  ) public view virtual returns (uint256[] memory) {\r\n    return _owned[owner_];\r\n  }\r\n\r\n  function erc721BalanceOf(\r\n    address owner_\r\n  ) public view virtual returns (uint256) {\r\n    return _owned[owner_].length;\r\n  }\r\n\r\n  function erc20BalanceOf(\r\n    address owner_\r\n  ) public view virtual returns (uint256) {\r\n    return balanceOf[owner_];\r\n  }\r\n\r\n  function erc20TotalSupply() public view virtual returns (uint256) {\r\n    return totalSupply;\r\n  }\r\n\r\n  function erc721TotalSupply() public view virtual returns (uint256) {\r\n    return _minted;\r\n  }\r\n\r\n  function erc721TokensBankedInQueue() public view virtual returns (uint256) {\r\n    return _storedERC721Ids.length();\r\n  }\r\n\r\n  /// @notice tokenURI must be implemented by child contract\r\n  function tokenURI(uint256 id_) public view virtual returns (string memory);\r\n\r\n  /// @notice Function for token approvals\r\n  /// @dev This function assumes the operator is attempting to approve an ERC-721\r\n  ///      if valueOrId is less than the minted count. Note: Unlike setApprovalForAll,\r\n  ///      spender_ must be allowed to be 0x0 so that approval can be revoked.\r\n  function approve(\r\n    address spender_,\r\n    uint256 valueOrId_\r\n  ) public virtual returns (bool) {\r\n    // The ERC-721 tokens are 1-indexed, so 0 is not a valid id and indicates that\r\n    // operator is attempting to set the ERC-20 allowance to 0.\r\n    if (valueOrId_ <= _minted && valueOrId_ > 0) {\r\n      // Intention is to approve as ERC-721 token (id).\r\n      uint256 id = valueOrId_;\r\n      address erc721Owner = _getOwnerOf(id);\r\n\r\n      if (\r\n        msg.sender != erc721Owner && !isApprovedForAll[erc721Owner][msg.sender]\r\n      ) {\r\n        revert Unauthorized();\r\n      }\r\n\r\n      getApproved[id] = spender_;\r\n\r\n      emit ERC721Approval(erc721Owner, spender_, id);\r\n    } else {\r\n      // Prevent granting 0x0 an ERC-20 allowance.\r\n      if (spender_ == address(0)) {\r\n        revert InvalidSpender();\r\n      }\r\n\r\n      // Intention is to approve as ERC-20 token (value).\r\n      uint256 value = valueOrId_;\r\n      allowance[msg.sender][spender_] = value;\r\n\r\n      emit ERC20Approval(msg.sender, spender_, value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Function for ERC-721 approvals\r\n  function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n    // Prevent approvals to 0x0.\r\n    if (operator_ == address(0)) {\r\n      revert InvalidOperator();\r\n    }\r\n    isApprovedForAll[msg.sender][operator_] = approved_;\r\n    emit ApprovalForAll(msg.sender, operator_, approved_);\r\n  }\r\n\r\n  /// @notice Function for mixed transfers from an operator that may be different than 'from'.\r\n  /// @dev This function assumes the operator is attempting to transfer an ERC-721\r\n  ///      if valueOrId is less than or equal to current max id.\r\n  function transferFrom(\r\n    address from_,\r\n    address to_,\r\n    uint256 valueOrId_\r\n  ) public virtual returns (bool) {\r\n    // Prevent transferring tokens from 0x0.\r\n    if (from_ == address(0)) {\r\n      revert InvalidSender();\r\n    }\r\n\r\n    // Prevent burning tokens to 0x0.\r\n    if (to_ == address(0)) {\r\n      revert InvalidRecipient();\r\n    }\r\n\r\n    if (valueOrId_ <= _minted) {\r\n      // Intention is to transfer as ERC-721 token (id).\r\n      uint256 id = valueOrId_;\r\n\r\n      if (from_ != _getOwnerOf(id)) {\r\n        revert Unauthorized();\r\n      }\r\n\r\n      // Check that the operator is either the sender or approved for the transfer.\r\n      if (\r\n        msg.sender != from_ &&\r\n        !isApprovedForAll[from_][msg.sender] &&\r\n        msg.sender != getApproved[id]\r\n      ) {\r\n        revert Unauthorized();\r\n      }\r\n\r\n      // Transfer 1 * units ERC-20 and 1 ERC-721 token.\r\n      _transferERC20(from_, to_, units);\r\n      _transferERC721(from_, to_, id);\r\n    } else {\r\n      // Intention is to transfer as ERC-20 token (value).\r\n      uint256 value = valueOrId_;\r\n      uint256 allowed = allowance[from_][msg.sender];\r\n\r\n      // Check that the operator has sufficient allowance.\r\n      if (allowed != type(uint256).max) {\r\n        allowance[from_][msg.sender] = allowed - value;\r\n      }\r\n\r\n      // Transferring ERC-20s directly requires the _transfer function.\r\n      _transferERC20WithERC721(from_, to_, value);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Function for ERC-20 transfers.\r\n  /// @dev This function assumes the operator is attempting to transfer as ERC-20\r\n  ///      given this function is only supported on the ERC-20 interface\r\n  function transfer(address to_, uint256 value_) public virtual returns (bool) {\r\n    // Prevent burning tokens to 0x0.\r\n    if (to_ == address(0)) {\r\n      revert InvalidRecipient();\r\n    }\r\n\r\n    // Transferring ERC-20s directly requires the _transfer function.\r\n    return _transferERC20WithERC721(msg.sender, to_, value_);\r\n  }\r\n\r\n  /// @notice Function for ERC-721 transfers with contract support.\r\n  function safeTransferFrom(\r\n    address from_,\r\n    address to_,\r\n    uint256 id_\r\n  ) public virtual {\r\n    transferFrom(from_, to_, id_);\r\n\r\n    if (\r\n      to_.code.length != 0 &&\r\n      ERC721Receiver(to_).onERC721Received(msg.sender, from_, id_, \"\") !=\r\n      ERC721Receiver.onERC721Received.selector\r\n    ) {\r\n      revert UnsafeRecipient();\r\n    }\r\n  }\r\n\r\n  /// @notice Function for ERC-721 transfers with contract support and callback data.\r\n  function safeTransferFrom(\r\n    address from_,\r\n    address to_,\r\n    uint256 id_,\r\n    bytes calldata data_\r\n  ) public virtual {\r\n    transferFrom(from_, to_, id_);\r\n\r\n    if (\r\n      to_.code.length != 0 &&\r\n      ERC721Receiver(to_).onERC721Received(msg.sender, from_, id_, data_) !=\r\n      ERC721Receiver.onERC721Received.selector\r\n    ) {\r\n      revert UnsafeRecipient();\r\n    }\r\n  }\r\n\r\n  /// @notice Function for EIP-2612 permits\r\n  function permit(\r\n    address owner_,\r\n    address spender_,\r\n    uint256 value_,\r\n    uint256 deadline_,\r\n    uint8 v_,\r\n    bytes32 r_,\r\n    bytes32 s_\r\n  ) public virtual {\r\n    if (deadline_ < block.timestamp) {\r\n      revert PermitDeadlineExpired();\r\n    }\r\n\r\n    if (value_ <= _minted && value_ > 0) {\r\n      revert InvalidApproval();\r\n    }\r\n\r\n    if (spender_ == address(0)) {\r\n      revert InvalidSpender();\r\n    }\r\n\r\n    unchecked {\r\n      address recoveredAddress = ecrecover(\r\n        keccak256(\r\n          abi.encodePacked(\r\n            \"\\x19\\x01\",\r\n            DOMAIN_SEPARATOR(),\r\n            keccak256(\r\n              abi.encode(\r\n                keccak256(\r\n                  \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                ),\r\n                owner_,\r\n                spender_,\r\n                value_,\r\n                nonces[owner_]++,\r\n                deadline_\r\n              )\r\n            )\r\n          )\r\n        ),\r\n        v_,\r\n        r_,\r\n        s_\r\n      );\r\n\r\n      if (recoveredAddress == address(0) || recoveredAddress != owner_) {\r\n        revert InvalidSigner();\r\n      }\r\n\r\n      allowance[recoveredAddress][spender_] = value_;\r\n    }\r\n\r\n    emit ERC20Approval(owner_, spender_, value_);\r\n  }\r\n\r\n  /// @notice Returns domain initial domain separator, or recomputes if chain id is not equal to initial chain id\r\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n    return\r\n      block.chainid == INITIAL_CHAIN_ID\r\n        ? INITIAL_DOMAIN_SEPARATOR\r\n        : _computeDomainSeparator();\r\n  }\r\n\r\n  function supportsInterface(\r\n    bytes4 interfaceId\r\n  ) public view virtual returns (bool) {\r\n    return\r\n      interfaceId == type(IERC404).interfaceId ||\r\n      interfaceId == type(IERC165).interfaceId;\r\n  }\r\n\r\n  /// @notice Internal function to compute domain separator for EIP-2612 permits\r\n  function _computeDomainSeparator() internal view virtual returns (bytes32) {\r\n    return\r\n      keccak256(\r\n        abi.encode(\r\n          keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n          ),\r\n          keccak256(bytes(name)),\r\n          keccak256(\"1\"),\r\n          block.chainid,\r\n          address(this)\r\n        )\r\n      );\r\n  }\r\n\r\n  /// @notice This is the lowest level ERC-20 transfer function, which\r\n  ///         should be used for both normal ERC-20 transfers as well as minting.\r\n  /// Note that this function allows transfers to and from 0x0.\r\n  function _transferERC20(\r\n    address from_,\r\n    address to_,\r\n    uint256 value_\r\n  ) internal virtual {\r\n    // Minting is a special case for which we should not check the balance of\r\n    // the sender, and we should increase the total supply.\r\n    if (from_ == address(0)) {\r\n      totalSupply += value_;\r\n    } else {\r\n      // Deduct value from sender's balance.\r\n      balanceOf[from_] -= value_;\r\n    }\r\n\r\n    // Update the recipient's balance.\r\n    // Can be unchecked because on mint, adding to totalSupply is checked, and on transfer balance deduction is checked.\r\n    unchecked {\r\n      balanceOf[to_] += value_;\r\n    }\r\n\r\n    emit ERC20Transfer(from_, to_, value_);\r\n  }\r\n\r\n  /// @notice Consolidated record keeping function for transferring ERC-721s.\r\n  /// @dev Assign the token to the new owner, and remove from the old owner.\r\n  /// Note that this function allows transfers to and from 0x0.\r\n  function _transferERC721(\r\n    address from_,\r\n    address to_,\r\n    uint256 id_\r\n  ) internal virtual {\r\n    // If this is not a mint, handle record keeping for transfer from previous owner.\r\n    if (from_ != address(0)) {\r\n      // On transfer of an NFT, any previous approval is reset.\r\n      delete getApproved[id_];\r\n\r\n      uint256 updatedId = _owned[from_][_owned[from_].length - 1];\r\n\r\n      if (updatedId != id_) {\r\n        uint256 updatedIndex = _getOwnedIndex(id_);\r\n        // update _owned for sender\r\n        _owned[from_][updatedIndex] = updatedId;\r\n        // update index for the moved id\r\n        _setOwnedIndex(updatedId, updatedIndex);\r\n      }\r\n\r\n      // pop\r\n      _owned[from_].pop();\r\n    }\r\n\r\n    if (to_ != address(0)) {\r\n      // Update owner of the token to the new owner.\r\n      _setOwnerOf(id_, to_);\r\n      // Push token onto the new owner's stack.\r\n      _owned[to_].push(id_);\r\n      // Update index for new owner's stack.\r\n      _setOwnedIndex(id_, _owned[to_].length - 1);\r\n    } else {\r\n      delete _ownedData[id_];\r\n    }\r\n\r\n    emit ERC721Transfer(from_, to_, id_);\r\n  }\r\n\r\n  /// @notice Internal function for ERC-20 transfers. Also handles any ERC-721 transfers that may be required.\r\n  function _transferERC20WithERC721(\r\n    address from_,\r\n    address to_,\r\n    uint256 value_\r\n  ) internal virtual returns (bool) {\r\n    uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\r\n    uint256 erc20BalanceOfReceiverBefore = erc20BalanceOf(to_);\r\n\r\n    _transferERC20(from_, to_, value_);\r\n\r\n    // Preload for gas savings on branches\r\n    bool isFromWhitelisted = whitelist[from_];\r\n    bool isToWhitelisted = whitelist[to_];\r\n\r\n    // Skip _withdrawAndStoreERC721 and/or _retrieveOrMintERC721 for whitelisted addresses\r\n    // 1) to save gas\r\n    // 2) because whitelisted addresses won't always have/need ERC-721s corresponding to their ERC20s.\r\n    if (isFromWhitelisted && isToWhitelisted) {\r\n      // Case 1) Both sender and recipient are whitelisted. No ERC-721s need to be transferred.\r\n      // NOOP.\r\n    } else if (isFromWhitelisted) {\r\n      // Case 2) The sender is whitelisted, but the recipient is not. Contract should not attempt\r\n      //         to transfer ERC-721s from the sender, but the recipient should receive ERC-721s\r\n      //         from the bank/minted for any whole number increase in their balance.\r\n      // Only cares about whole number increments.\r\n      uint256 tokensToRetrieveOrMint = (balanceOf[to_] / units) -\r\n        (erc20BalanceOfReceiverBefore / units);\r\n      for (uint256 i = 0; i < tokensToRetrieveOrMint; i++) {\r\n        _retrieveOrMintERC721(to_);\r\n      }\r\n    } else if (isToWhitelisted) {\r\n      // Case 3) The sender is not whitelisted, but the recipient is. Contract should attempt\r\n      //         to withdraw and store ERC-721s from the sender, but the recipient should not\r\n      //         receive ERC-721s from the bank/minted.\r\n      // Only cares about whole number increments.\r\n      uint256 tokensToWithdrawAndStore = (erc20BalanceOfSenderBefore / units) -\r\n        (balanceOf[from_] / units);\r\n      for (uint256 i = 0; i < tokensToWithdrawAndStore; i++) {\r\n        _withdrawAndStoreERC721(from_);\r\n      }\r\n    } else {\r\n      // Case 4) Neither the sender nor the recipient are whitelisted.\r\n      // Strategy:\r\n      // 1. First deal with the whole tokens. These are easy and will just be transferred.\r\n      // 2. Look at the fractional part of the value:\r\n      //   a) If it causes the sender to lose a whole token that was represented by an NFT due to a\r\n      //      fractional part being transferred, withdraw and store an additional NFT from the sender.\r\n      //   b) If it causes the receiver to gain a whole new token that should be represented by an NFT\r\n      //      due to receiving a fractional part that completes a whole token, retrieve or mint an NFT to the recevier.\r\n\r\n      // Whole tokens worth of ERC-20s get transferred as ERC-721s without any burning/minting.\r\n      uint256 nftsToTransfer = value_ / units;\r\n      for (uint256 i = 0; i < nftsToTransfer; i++) {\r\n        // Pop from sender's ERC-721 stack and transfer them (LIFO)\r\n        uint256 indexOfLastToken = _owned[from_].length - 1;\r\n        uint256 tokenId = _owned[from_][indexOfLastToken];\r\n        _transferERC721(from_, to_, tokenId);\r\n      }\r\n\r\n      // If the sender's transaction changes their holding from a fractional to a non-fractional\r\n      // amount (or vice versa), adjust ERC-721s.\r\n      //\r\n      // Check if the send causes the sender to lose a whole token that was represented by an ERC-721\r\n      // due to a fractional part being transferred.\r\n      //\r\n      // To check this, look if subtracting the fractional amount from the balance causes the balance to\r\n      // drop below the original balance % units, which represents the number of whole tokens they started with.\r\n      uint256 fractionalAmount = value_ % units;\r\n\r\n      if (\r\n        (erc20BalanceOfSenderBefore - fractionalAmount) / units <\r\n        (erc20BalanceOfSenderBefore / units)\r\n      ) {\r\n        _withdrawAndStoreERC721(from_);\r\n      }\r\n\r\n      // Check if the receive causes the receiver to gain a whole new token that should be represented\r\n      // by an NFT due to receiving a fractional part that completes a whole token.\r\n      if (\r\n        (erc20BalanceOfReceiverBefore + fractionalAmount) / units >\r\n        (erc20BalanceOfReceiverBefore / units)\r\n      ) {\r\n        _retrieveOrMintERC721(to_);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Internal function for ERC20 minting\r\n  /// @dev This function will allow minting of new ERC20s.\r\n  ///      If mintCorrespondingERC721s_ is true, it will also mint the corresponding ERC721s.\r\n  function _mintERC20(\r\n    address to_,\r\n    uint256 value_,\r\n    bool mintCorrespondingERC721s_\r\n  ) internal virtual {\r\n    /// You cannot mint to the zero address (you can't mint and immediately burn in the same transfer).\r\n    if (to_ == address(0)) {\r\n      revert InvalidRecipient();\r\n    }\r\n\r\n    _transferERC20(address(0), to_, value_);\r\n\r\n    // If mintCorrespondingERC721s_ is true, mint the corresponding ERC721s.\r\n    if (mintCorrespondingERC721s_) {\r\n      uint256 nftsToRetrieveOrMint = value_ / units;\r\n      for (uint256 i = 0; i < nftsToRetrieveOrMint; i++) {\r\n        _retrieveOrMintERC721(to_);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice Internal function for ERC-721 minting and retrieval from the bank.\r\n  /// @dev This function will allow minting of new ERC-721s up to the total fractional supply. It will\r\n  ///      first try to pull from the bank, and if the bank is empty, it will mint a new token.\r\n  function _retrieveOrMintERC721(address to_) internal virtual {\r\n    if (to_ == address(0)) {\r\n      revert InvalidRecipient();\r\n    }\r\n\r\n    uint256 id;\r\n\r\n    if (!DoubleEndedQueue.empty(_storedERC721Ids)) {\r\n      // If there are any tokens in the bank, use those first.\r\n      // Pop off the end of the queue (FIFO).\r\n      id = _storedERC721Ids.popBack();\r\n    } else {\r\n      // Otherwise, mint a new token, should not be able to go over the total fractional supply.\r\n      _minted++;\r\n      id = _minted;\r\n    }\r\n\r\n    address erc721Owner = _getOwnerOf(id);\r\n\r\n    // The token should not already belong to anyone besides 0x0 or this contract.\r\n    // If it does, something is wrong, as this should never happen.\r\n    if (erc721Owner != address(0)) {\r\n      revert AlreadyExists();\r\n    }\r\n\r\n    // Transfer the token to the recipient, either transferring from the contract's bank or minting.\r\n    _transferERC721(erc721Owner, to_, id);\r\n  }\r\n\r\n  /// @notice Internal function for ERC-721 deposits to bank (this contract).\r\n  /// @dev This function will allow depositing of ERC-721s to the bank, which can be retrieved by future minters.\r\n  function _withdrawAndStoreERC721(address from_) internal virtual {\r\n    if (from_ == address(0)) {\r\n      revert InvalidSender();\r\n    }\r\n\r\n    // Retrieve the latest token added to the owner's stack (LIFO).\r\n    uint256 id = _owned[from_][_owned[from_].length - 1];\r\n\r\n    // Transfer the token to the contract.\r\n    _transferERC721(from_, address(0), id);\r\n\r\n    // Record the token in the contract's bank queue.\r\n    _storedERC721Ids.pushFront(id);\r\n  }\r\n\r\n  /// @notice Initialization function to set pairs / etc, saving gas by avoiding mint / burn on unnecessary targets\r\n  function _setWhitelist(address target_, bool state_) internal virtual {\r\n    // If the target has at least 1 full ERC-20 token, they should not be removed from the whitelist\r\n    // because if they were and then they attempted to transfer, it would revert as they would not\r\n    // necessarily have ehough ERC-721s to bank.\r\n    if (erc20BalanceOf(target_) >= units && !state_) {\r\n      revert CannotRemoveFromWhitelist();\r\n    }\r\n    whitelist[target_] = state_;\r\n  }\r\n\r\n  function _getOwnerOf(\r\n    uint256 id_\r\n  ) internal view virtual returns (address ownerOf_) {\r\n    uint256 data = _ownedData[id_];\r\n\r\n    assembly {\r\n      ownerOf_ := and(data, _BITMASK_ADDRESS)\r\n    }\r\n  }\r\n\r\n  function _setOwnerOf(uint256 id_, address owner_) internal virtual {\r\n    uint256 data = _ownedData[id_];\r\n\r\n    assembly {\r\n      data := add(\r\n        and(data, _BITMASK_OWNED_INDEX),\r\n        and(owner_, _BITMASK_ADDRESS)\r\n      )\r\n    }\r\n\r\n    _ownedData[id_] = data;\r\n  }\r\n\r\n  function _getOwnedIndex(\r\n    uint256 id_\r\n  ) internal view virtual returns (uint256 ownedIndex_) {\r\n    uint256 data = _ownedData[id_];\r\n\r\n    assembly {\r\n      ownedIndex_ := shl(data, 160)\r\n    }\r\n  }\r\n\r\n  function _setOwnedIndex(uint256 id_, uint256 index_) internal virtual {\r\n    uint256 data = _ownedData[id_];\r\n\r\n    if (index_ > _BITMASK_OWNED_INDEX >> 160) {\r\n      revert OwnedIndexOverflow();\r\n    }\r\n\r\n    assembly {\r\n      data := add(\r\n        and(data, _BITMASK_ADDRESS),\r\n        and(shl(index_, 160), _BITMASK_OWNED_INDEX)\r\n      )\r\n    }\r\n\r\n    _ownedData[id_] = data;\r\n  }\r\n}\r\n\r\ncontract MEME404 is Ownable, ERC404, ERC404MerkleClaim {\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint8 decimals_,\r\n    uint256 maxTotalSupplyERC721_,\r\n    address initialOwner_,\r\n    address initialMintRecipient_\r\n  ) ERC404(name_, symbol_, decimals_) Ownable(initialOwner_) {\r\n    // Do not mint the ERC721s to the initial owner, as it's a waste of gas.\r\n    _setWhitelist(initialMintRecipient_, true);\r\n    _mintERC20(initialMintRecipient_, maxTotalSupplyERC721_ * units, false);\r\n  }\r\n\r\n  function tokenURI(uint256 id_) public pure override returns (string memory) {\r\n    return string.concat(\"https://silver-tropical-guanaco-683.mypinata.cloud/ipfs/QmeANZFEcHPajwDy27VnDbs7pZvZuBGFNLE3PDzWZpK66S/\", Strings.toString(id_), \".json\");\r\n  }\r\n\r\n  function airdropMint(\r\n    bytes32[] memory proof_,\r\n    uint256 value_\r\n  ) public override whenAirdropIsOpen {\r\n    super.airdropMint(proof_, value_);\r\n    _mintERC20(msg.sender, value_, true);\r\n  }\r\n\r\n  function setAirdropMerkleRoot(bytes32 airdropMerkleRoot_) external onlyOwner {\r\n    _setAirdropMerkleRoot(airdropMerkleRoot_);\r\n  }\r\n\r\n  function toggleAirdropIsOpen() external onlyOwner {\r\n    _toggleAirdropIsOpen();\r\n  }\r\n\r\n  function setWhitelist(address account_, bool value_) external onlyOwner {\r\n    _setWhitelist(account_, value_);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupplyERC721_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialOwner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMintRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AirdropAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AirdropIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveFromWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEligibleForAirdrop\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnedIndexOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"airdropMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc20BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc721BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokensBankedInQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimedAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"owned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"airdropMerkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setAirdropMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAirdropIsOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"claimer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MEME404", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000019400000000000000000000000077455e794993ef5c116d6bcaa9194441ce480e7c00000000000000000000000077455e794993ef5c116d6bcaa9194441ce480e7c00000000000000000000000000000000000000000000000000000000000000084d454d452034303400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074d454d4534303400000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b286dd966248aaa06026b0df67e9672c40043f2b11f7036153e18c94d9608c1"}