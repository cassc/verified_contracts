{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mint/MintManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/Ownable.sol\\\";\\nimport \\\"../erc721/interfaces/IERC721GeneralMint.sol\\\";\\nimport \\\"../erc721/interfaces/IERC721EditionMint.sol\\\";\\nimport \\\"../utils/ERC721/IERC721.sol\\\";\\nimport \\\"./interfaces/INativeMetaTransaction.sol\\\";\\nimport \\\"../utils/EIP712Upgradeable.sol\\\";\\nimport \\\"../metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title MintManager\\n * @author highlight.xyz\\n * @notice Faciliates lion's share of minting in Highlight protocol V2 by managing mint \\\"vectors\\\" on-chain and off-chain\\n */\\ncontract MintManager is EIP712Upgradeable, UUPSUpgradeable, OwnableUpgradeable, ERC2771ContextUpgradeable {\\n    using ECDSA for bytes32;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Throw when sender is unauthorized to complete action\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * @notice Throw when the executor being added or removed is invalid\\n     */\\n    error InvalidExecutorChanged();\\n\\n    /**\\n     * @notice Throw when the action being applied to the vector has been frozen\\n     */\\n    error VectorUpdateActionFrozen();\\n\\n    /**\\n     * @notice Throw when the totalClaimedViaVector passed in is invalid\\n     */\\n    error InvalidTotalClaimed();\\n\\n    /**\\n     * @notice Throw when an invalid allowlist proof is used, or a regular mint is attempted on an allowlist vector\\n     */\\n    error AllowlistInvalid();\\n\\n    /**\\n     * @notice Throw when a native gas token payment is attempted on a payment packet mint\\n     */\\n    error CurrencyTypeInvalid();\\n\\n    /**\\n     * @notice Throw when the mint fee sent is too low\\n     */\\n    error MintFeeTooLow();\\n\\n    /**\\n     * @notice Throw when an internal transfer of ether fails\\n     */\\n    error EtherSendFailed();\\n\\n    /**\\n     * @notice Throw when a transaction signer is not the claimer passed in via a claim\\n     */\\n    error SenderNotClaimer();\\n\\n    /**\\n     * @notice Throw when a claim is invalid\\n     */\\n    error InvalidClaim();\\n\\n    /**\\n     * @notice Throw when an invalid amount is sent for a payment (native gas token or erc20)\\n     */\\n    error InvalidPaymentAmount();\\n\\n    /**\\n     * @notice Throw when an on-chain mint vector's config parameter isn't met\\n     */\\n    error OnchainVectorMintGuardFailed();\\n\\n    /**\\n     * @notice On-chain mint vector\\n     * @param contractAddress NFT smart contract address\\n     * @param currency Currency used for payment. Native gas token, if zero address\\n     * @param paymentRecipient Payment recipient\\n     * @param startTimestamp When minting opens on vector\\n     * @param endTimestamp When minting ends on vector\\n     * @param pricePerToken Price that has to be paid per minted token\\n     * @param tokenLimitPerTx Max number of tokens that can be minted in one transaction\\n     * @param maxTotalClaimableViaVector Max number of tokens that can be minted via vector\\n     * @param maxUserClaimableViaVector Max number of tokens that can be minted by user via vector\\n     * @param totalClaimedViaVector Total number of tokens minted via vector\\n     * @param allowlistRoot Root of merkle tree with allowlist\\n     * @param paused If vector is paused\\n     */\\n    struct Vector {\\n        address contractAddress;\\n        address currency;\\n        address payable paymentRecipient;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 pricePerToken;\\n        uint64 tokenLimitPerTx;\\n        uint64 maxTotalClaimableViaVector;\\n        uint64 maxUserClaimableViaVector;\\n        uint64 totalClaimedViaVector;\\n        bytes32 allowlistRoot;\\n        uint8 paused;\\n    }\\n\\n    /**\\n     * @notice On-chain mint vector mutability rules\\n     * @param updatesFrozen If true, vector cannot be updated\\n     * @param deleteFrozen If true, vector cannot be deleted\\n     * @param pausesFrozen If true, vector cannot be paused\\n     */\\n    struct VectorMutability {\\n        uint8 updatesFrozen;\\n        uint8 deleteFrozen;\\n        uint8 pausesFrozen;\\n    }\\n\\n    /**\\n     * @notice Packet enabling impersonation of purchaser for currencies supporting meta-transactions\\n     * @param functionSignature Function to call on contract, with arguments encoded\\n     * @param sigR Elliptic curve signature component\\n     * @param sigS Elliptic curve signature component\\n     * @param sigV Elliptic curve signature component\\n     */\\n    struct PurchaserMetaTxPacket {\\n        bytes functionSignature;\\n        bytes32 sigR;\\n        bytes32 sigS;\\n        uint8 sigV;\\n    }\\n\\n    /**\\n     * @notice Claim that is signed off-chain with EIP-712, and unwrapped to facilitate fulfillment of mint\\n     * @param currency Currency used for payment. Native gas token, if zero address\\n     * @param contractAddress NFT smart contract address\\n     * @param claimer Account able to use this claim\\n     * @param paymentRecipient Payment recipient\\n     * @param pricePerToken Price that has to be paid per minted token\\n     * @param numTokensToMint Number of NFTs to mint in this transaction\\n     * @param maxClaimableViaVector Max number of tokens that can be minted via vector\\n     * @param maxClaimablePerUser Max number of tokens that can be minted by user via vector\\n     * @param editionId ID of edition to mint on. Unused if claim is passed into ERC721General minting function\\n     * @param claimExpiryTimestamp Time when claim expires\\n     * @param claimNonce Unique identifier of claim\\n     * @param offchainVectorId Unique identifier of vector offchain\\n     */\\n    struct Claim {\\n        address currency;\\n        address contractAddress;\\n        address claimer;\\n        address payable paymentRecipient;\\n        uint256 pricePerToken;\\n        uint64 numTokensToMint;\\n        uint256 maxClaimableViaVector;\\n        uint256 maxClaimablePerUser;\\n        uint256 editionId;\\n        uint256 claimExpiryTimestamp;\\n        bytes32 claimNonce;\\n        bytes32 offchainVectorId;\\n    }\\n\\n    /**\\n     * @notice Claim that is signed off-chain with EIP-712, and unwrapped to facilitate fulfillment of mint.\\n     *      Includes meta-tx packets to impersonate purchaser and make payments.\\n     * @param currency Currency used for payment. Native gas token, if zero address\\n     * @param contractAddress NFT smart contract address\\n     * @param claimer Account able to use this claim\\n     * @param paymentRecipient Payment recipient\\n     * @param pricePerToken Price that has to be paid per minted token\\n     * @param numTokensToMint Number of NFTs to mint in this transaction\\n     * @param purchaseToCreatorPacket Meta-tx packet that send portion of payment to creator\\n     * @param purchaseToPlatformPacket Meta-tx packet that send portion of payment to platform\\n     * @param maxClaimableViaVector Max number of tokens that can be minted via vector\\n     * @param maxClaimablePerUser Max number of tokens that can be minted by user via vector\\n     * @param editionId ID of edition to mint on. Unused if claim is passed into ERC721General minting function\\n     * @param claimExpiryTimestamp Time when claim expires\\n     * @param claimNonce Unique identifier of claim\\n     * @param offchainVectorId Unique identifier of vector offchain\\n     */\\n    struct ClaimWithMetaTxPacket {\\n        address currency;\\n        address contractAddress;\\n        address claimer;\\n        uint256 pricePerToken;\\n        uint64 numTokensToMint;\\n        PurchaserMetaTxPacket purchaseToCreatorPacket;\\n        PurchaserMetaTxPacket purchaseToPlatformPacket;\\n        uint256 maxClaimableViaVector;\\n        uint256 maxClaimablePerUser;\\n        uint256 editionId; // unused if for general contract mints\\n        uint256 claimExpiryTimestamp;\\n        bytes32 claimNonce;\\n        bytes32 offchainVectorId;\\n    }\\n\\n    /**\\n     * @notice Claim that is signed off-chain with EIP-712, and unwrapped to facilitate fulfillment of mint on a Series\\n     * @dev Max number claimable per transaction is enforced off-chain\\n     * @param currency Currency used for payment. Native gas token, if zero address\\n     * @param contractAddress NFT smart contract address\\n     * @param claimer Account able to use this claim\\n     * @param paymentRecipient Payment recipient\\n     * @param pricePerToken Price that has to be paid per minted token\\n     * @param maxPerTxn Max number of tokens that can be minted in a transaction\\n     * @param maxClaimableViaVector Max number of tokens that can be minted via vector\\n     * @param maxClaimablePerUser Max number of tokens that can be minted by user via vector\\n     * @param claimExpiryTimestamp Time when claim expires\\n     * @param claimNonce Unique identifier of claim\\n     * @param offchainVectorId Unique identifier of vector offchain\\n     */\\n    struct SeriesClaim {\\n        address currency;\\n        address contractAddress;\\n        address claimer;\\n        address payable paymentRecipient;\\n        uint256 pricePerToken;\\n        uint64 maxPerTxn;\\n        uint64 maxClaimableViaVector;\\n        uint64 maxClaimablePerUser;\\n        uint64 claimExpiryTimestamp;\\n        bytes32 claimNonce;\\n        bytes32 offchainVectorId;\\n    }\\n\\n    /**\\n     * @notice Tracks current claim state of offchain vectors\\n     * @param numClaimed Total claimed on vector\\n     * @param numClaimedPerUser Tracks totals claimed per user on vector\\n     */\\n    struct OffchainVectorClaimState {\\n        uint256 numClaimed;\\n        mapping(address => uint256) numClaimedPerUser;\\n    }\\n\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @notice DEPRECATED - Claim typehash used via typed structured data hashing (EIP-712)\\n     */\\n    bytes32 private constant _CLAIM_TYPEHASH =\\n        keccak256(\\n            \\\"Claim(address currency,address contractAddress,address claimer,address paymentRecipient,uint256 pricePerToken,uint64 numTokensToMint,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n        );\\n\\n    /**\\n     * @notice DEPRECATED - Claim typehash used via typed structured data hashing (EIP-712)\\n     */\\n    bytes32 private constant _CLAIM_WITH_META_TX_PACKET_TYPEHASH =\\n        keccak256(\\n            \\\"ClaimWithMetaTxPacket(address currency,address contractAddress,address claimer,uint256 pricePerToken,uint64 numTokensToMint,PurchaserMetaTxPacket purchaseToCreatorPacket,PurchaserMetaTxPacket purchaseToCreatorPacket,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n        );\\n\\n    /* solhint-enable max-line-length */\\n\\n    /**\\n     * @notice Platform receiving portion of payment\\n     */\\n    address payable private _platform;\\n\\n    /**\\n     * @notice System-wide mint vectors\\n     */\\n    mapping(uint256 => Vector) public vectors;\\n\\n    /**\\n     * @notice System-wide mint vectors' mutabilities\\n     */\\n    mapping(uint256 => VectorMutability) public vectorMutabilities;\\n\\n    /**\\n     * @notice System-wide vector ids to (user to user claims count)\\n     */\\n    mapping(uint256 => mapping(address => uint64)) public userClaims;\\n\\n    /**\\n     * @notice Tracks what nonces used in signed mint keys have been used for vectors enforced offchain\\n     *      Requires the platform to not re-use offchain vector IDs.\\n     */\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) private _offchainVectorsToNoncesUsed;\\n\\n    /**\\n     * @notice Tracks running state of offchain vectors\\n     */\\n    mapping(bytes32 => OffchainVectorClaimState) public offchainVectorsClaimState;\\n\\n    /**\\n     * @notice Maps vector ids to edition ids\\n     */\\n    mapping(uint256 => uint256) public vectorToEditionId;\\n\\n    /**\\n     * @notice Current vector id index\\n     */\\n    uint256 private _vectorSupply;\\n\\n    /**\\n     * @notice Platform transaction executors\\n     */\\n    EnumerableSet.AddressSet internal _platformExecutors;\\n\\n    /**\\n     * @notice Platform mint fee\\n     */\\n    uint256 private _platformMintFee;\\n\\n    /**\\n     * @notice Emitted when platform executor is added or removed\\n     * @param executor Changed executor\\n     * @param added True if executor was added and false otherwise\\n     */\\n    event PlatformExecutorChanged(address indexed executor, bool indexed added);\\n\\n    /**\\n     * @notice Emitted when vector is created on-chain\\n     * @param vectorId ID of vector\\n     * @param editionId Edition id of vector, meaningful if vector is for Editions collection\\n     * @param contractAddress Collection contract address\\n     */\\n    event VectorCreated(uint256 indexed vectorId, uint256 indexed editionId, address indexed contractAddress);\\n\\n    /**\\n     * @notice Emitted when vector is updated on-chain\\n     * @param vectorId ID of vector\\n     * @param newVector New vector details\\n     */\\n    event VectorUpdated(uint256 indexed vectorId, Vector newVector);\\n\\n    /**\\n     * @notice Emitted when vector is deleted on-chain\\n     * @param vectorId ID of vector to delete\\n     */\\n    event VectorDeleted(uint256 indexed vectorId);\\n\\n    /**\\n     * @notice Emitted when vector is paused or unpaused on-chain\\n     * @param vectorId ID of vector\\n     * @param paused True if vector was paused, false otherwise\\n     */\\n    event VectorPausedOrUnpaused(uint256 indexed vectorId, uint8 indexed paused);\\n\\n    /**\\n     * @notice Emitted when payment is made in native gas token\\n     * @param paymentRecipient Creator recipient of payment\\n     * @param vectorId Vector that payment was for\\n     * @param amountToCreator Amount sent to creator\\n     * @param percentageBPSOfTotal Percentage (in basis points) that was sent to creator, of total payment\\n     */\\n    event NativeGasTokenPayment(\\n        address indexed paymentRecipient,\\n        bytes32 indexed vectorId,\\n        uint256 amountToCreator,\\n        uint32 percentageBPSOfTotal\\n    );\\n\\n    /**\\n     * @notice Emitted when payment is made in ERC20\\n     * @param currency ERC20 currency\\n     * @param paymentRecipient Creator recipient of payment\\n     * @param vectorId Vector that payment was for\\n     * @param payer Payer\\n     * @param amountToCreator Amount sent to creator\\n     * @param percentageBPSOfTotal Percentage (in basis points) that was sent to creator, of total payment\\n     */\\n    event ERC20Payment(\\n        address indexed currency,\\n        address indexed paymentRecipient,\\n        bytes32 indexed vectorId,\\n        address payer,\\n        uint256 amountToCreator,\\n        uint32 percentageBPSOfTotal\\n    );\\n\\n    /**\\n     * @notice Emitted when payment is made in ERC20 via meta-tx packet method\\n     * @param currency ERC20 currency\\n     * @param msgSender Payer\\n     * @param vectorId Vector that payment was for\\n     * @param purchaseToCreatorPacket Meta-tx packet facilitating payment to creator\\n     * @param purchaseToPlatformPacket Meta-tx packet facilitating payment to platform\\n     * @param amount Payment amount\\n     */\\n    event ERC20PaymentMetaTxPackets(\\n        address indexed currency,\\n        address indexed msgSender,\\n        bytes32 indexed vectorId,\\n        PurchaserMetaTxPacket purchaseToCreatorPacket,\\n        PurchaserMetaTxPacket purchaseToPlatformPacket,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted on a mint where discrete token ids are minted\\n     * @param vectorId Vector that payment was for\\n     * @param contractAddress Address of contract being minted on\\n     * @param onChainVector Denotes whether mint vector is on-chain\\n     * @param tokenIds Array of token ids to mint\\n     */\\n    event ChooseTokenMint(\\n        bytes32 indexed vectorId,\\n        address indexed contractAddress,\\n        bool indexed onChainVector,\\n        uint256[] tokenIds\\n    );\\n\\n    /**\\n     * @notice Emitted on a mint where a number of tokens are minted monotonically\\n     * @param vectorId Vector that payment was for\\n     * @param contractAddress Address of contract being minted on\\n     * @param onChainVector Denotes whether mint vector is on-chain\\n     * @param numMinted Number of tokens minted\\n     */\\n    event NumTokenMint(\\n        bytes32 indexed vectorId,\\n        address indexed contractAddress,\\n        bool indexed onChainVector,\\n        uint256 numMinted\\n    );\\n\\n    /**\\n     * @notice Restricts calls to platform\\n     */\\n    modifier onlyPlatform() {\\n        if (_msgSender() != _platform) {\\n            _revert(Unauthorized.selector);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes MintManager\\n     * @param platform Platform address\\n     * @param _owner MintManager owner\\n     * @param trustedForwarder Trusted meta-tx executor\\n     * @param initialExecutor Initial platform executor\\n     * @param initialPlatformMintFee Initial platform mint fee\\n     */\\n    function initialize(\\n        address payable platform,\\n        address _owner,\\n        address trustedForwarder,\\n        address initialExecutor,\\n        uint256 initialPlatformMintFee\\n    ) external initializer {\\n        _platform = platform;\\n        __EIP721Upgradeable_initialize(\\\"MintManager\\\", \\\"1.0.0\\\");\\n        __ERC2771ContextUpgradeable__init__(trustedForwarder);\\n        __Ownable_init();\\n        _transferOwnership(_owner);\\n        _platformExecutors.add(initialExecutor);\\n        _platformMintFee = initialPlatformMintFee;\\n    }\\n\\n    /**\\n     * @notice Add platform executor. Expected to be protected by a smart contract wallet.\\n     * @param _executor Platform executor to add\\n     */\\n    function addPlatformExecutor(address _executor) external onlyOwner {\\n        if (_executor == address(0) || !_platformExecutors.add(_executor)) {\\n            _revert(InvalidExecutorChanged.selector);\\n        }\\n        emit PlatformExecutorChanged(_executor, true);\\n    }\\n\\n    /**\\n     * @notice Deprecate platform executor. Expected to be protected by a smart contract wallet.\\n     * @param _executor Platform executor to deprecate\\n     */\\n    function deprecatePlatformExecutor(address _executor) external onlyOwner {\\n        if (!_platformExecutors.remove(_executor)) {\\n            _revert(InvalidExecutorChanged.selector);\\n        }\\n        emit PlatformExecutorChanged(_executor, false);\\n    }\\n\\n    /**\\n     * @notice Creates on-chain vector\\n     * @param _vector Vector to create\\n     * @param _vectorMutability Vector mutability\\n     * @param editionId Edition id of vector, meaningful if vector is for Editions collection\\n     */\\n    function createVector(\\n        Vector calldata _vector,\\n        VectorMutability calldata _vectorMutability,\\n        uint256 editionId\\n    ) external {\\n        if (Ownable(_vector.contractAddress).owner() != _msgSender()) {\\n            _revert(Unauthorized.selector);\\n        }\\n        if (_vector.totalClaimedViaVector > 0) {\\n            _revert(InvalidTotalClaimed.selector);\\n        }\\n\\n        _vectorSupply++;\\n        vectors[_vectorSupply] = _vector;\\n        vectorMutabilities[_vectorSupply] = _vectorMutability;\\n        vectorToEditionId[_vectorSupply] = editionId;\\n\\n        emit VectorCreated(_vectorSupply, editionId, _vector.contractAddress);\\n    }\\n\\n    /**\\n     * @notice Updates on-chain vector\\n     * @param vectorId ID of vector to update\\n     * @param _newVector New vector details\\n     */\\n    function updateVector(uint256 vectorId, Vector calldata _newVector) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        if (vectorMutabilities[vectorId].updatesFrozen > 0) {\\n            _revert(VectorUpdateActionFrozen.selector);\\n        }\\n        if (_oldVector.totalClaimedViaVector != _newVector.totalClaimedViaVector) {\\n            _revert(InvalidTotalClaimed.selector);\\n        }\\n        if (Ownable(_oldVector.contractAddress).owner() != _msgSender()) {\\n            _revert(Unauthorized.selector);\\n        }\\n\\n        vectors[vectorId] = _newVector;\\n\\n        emit VectorUpdated(vectorId, _newVector);\\n    }\\n\\n    /**\\n     * @notice Deletes on-chain vector\\n     * @param vectorId ID of vector to delete\\n     */\\n    function deleteVector(uint256 vectorId) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        if (vectorMutabilities[vectorId].deleteFrozen > 0) {\\n            _revert(VectorUpdateActionFrozen.selector);\\n        }\\n        if (Ownable(_oldVector.contractAddress).owner() != _msgSender()) {\\n            _revert(Unauthorized.selector);\\n        }\\n\\n        delete vectors[vectorId];\\n        delete vectorMutabilities[vectorId];\\n        delete vectorToEditionId[_vectorSupply];\\n\\n        emit VectorDeleted(vectorId);\\n    }\\n\\n    /**\\n     * @notice Pauses on-chain vector\\n     * @param vectorId ID of vector to pause\\n     */\\n    function pauseVector(uint256 vectorId) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        if (vectorMutabilities[vectorId].pausesFrozen > 0) {\\n            _revert(VectorUpdateActionFrozen.selector);\\n        }\\n        if (Ownable(_oldVector.contractAddress).owner() != _msgSender()) {\\n            _revert(Unauthorized.selector);\\n        }\\n\\n        vectors[vectorId].paused = 1;\\n\\n        emit VectorPausedOrUnpaused(vectorId, 1);\\n    }\\n\\n    /**\\n     * @notice Unpauses on-chain vector\\n     * @param vectorId ID of vector to unpause\\n     */\\n    function unpauseVector(uint256 vectorId) external {\\n        Vector memory _oldVector = vectors[vectorId];\\n        if (Ownable(_oldVector.contractAddress).owner() != _msgSender()) {\\n            _revert(Unauthorized.selector);\\n        }\\n\\n        vectors[vectorId].paused = 0;\\n\\n        emit VectorPausedOrUnpaused(vectorId, 0);\\n    }\\n\\n    /**\\n     * @notice Updates on-chain vector mutability. Protected by vector mutability field updatesFrozen itself\\n     * @param vectorId ID of vector mutability to update\\n     * @param _newVectorMutability New vector mutability details\\n     */\\n    function updateVectorMutability(uint256 vectorId, VectorMutability calldata _newVectorMutability) external {\\n        if (vectorMutabilities[vectorId].updatesFrozen > 0) {\\n            _revert(VectorUpdateActionFrozen.selector);\\n        }\\n        if (Ownable(vectors[vectorId].contractAddress).owner() != _msgSender()) {\\n            _revert(Unauthorized.selector);\\n        }\\n\\n        vectorMutabilities[vectorId] = _newVectorMutability;\\n    }\\n\\n    /**\\n     * @notice Mint on a Series with a valid claim where one can choose the tokens to mint\\n     * @param claim Series Claim\\n     * @param claimSignature Signed + encoded claim\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param tokenIds IDs of NFTs to mint\\n     */\\n    function gatedSeriesMintChooseToken(\\n        SeriesClaim calldata claim,\\n        bytes calldata claimSignature,\\n        address mintRecipient,\\n        uint256[] calldata tokenIds\\n    ) external payable {\\n        uint256 numTokensToMint = tokenIds.length;\\n        _processGatedSeriesMintClaim(claim, claimSignature, numTokensToMint);\\n        // mint NFT(s)\\n        if (numTokensToMint == 1) {\\n            IERC721GeneralMint(claim.contractAddress).mintSpecificTokenToOneRecipient(mintRecipient, tokenIds[0]);\\n        } else {\\n            IERC721GeneralMint(claim.contractAddress).mintSpecificTokensToOneRecipient(mintRecipient, tokenIds);\\n        }\\n\\n        emit ChooseTokenMint(claim.offchainVectorId, claim.contractAddress, false, tokenIds);\\n    }\\n\\n    /**\\n     * @notice Mint on a Series collection with a valid claim\\n     * @param claim Claim\\n     * @param claimSignature Signed + encoded claim\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function gatedSeriesMint(\\n        Claim calldata claim,\\n        bytes calldata claimSignature,\\n        address mintRecipient\\n    ) external payable {\\n        _processGatedMintClaim(claim, claimSignature);\\n        // mint NFT(s)\\n        if (claim.numTokensToMint == 1) {\\n            IERC721GeneralMint(claim.contractAddress).mintOneToOneRecipient(mintRecipient);\\n        } else {\\n            IERC721GeneralMint(claim.contractAddress).mintAmountToOneRecipient(mintRecipient, claim.numTokensToMint);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint on vector pointing to ERC721Editions or ERC721SingleEdiion collection\\n     * @param vectorId ID of vector\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function vectorMintEdition721(\\n        uint256 vectorId,\\n        uint64 numTokensToMint,\\n        address mintRecipient\\n    ) external payable {\\n        address msgSender = _msgSender();\\n\\n        Vector memory _vector = vectors[vectorId];\\n        uint64 newNumClaimedViaVector = _vector.totalClaimedViaVector + numTokensToMint;\\n        uint64 newNumClaimedForUser = userClaims[vectorId][msgSender] + numTokensToMint;\\n\\n        if (_vector.allowlistRoot != 0) {\\n            _revert(AllowlistInvalid.selector);\\n        }\\n\\n        _vectorMintEdition721(\\n            vectorId,\\n            _vector,\\n            vectorToEditionId[vectorId],\\n            numTokensToMint,\\n            mintRecipient,\\n            newNumClaimedViaVector,\\n            newNumClaimedForUser\\n        );\\n\\n        vectors[vectorId].totalClaimedViaVector = newNumClaimedViaVector;\\n        userClaims[vectorId][msgSender] = newNumClaimedForUser;\\n    }\\n\\n    /**\\n     * @notice Mint on vector pointing to ERC721Editions or ERC721SingleEdiion collection, with allowlist\\n     * @param vectorId ID of vector\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param proof Proof of minter's inclusion in allowlist\\n     */\\n    function vectorMintEdition721WithAllowlist(\\n        uint256 vectorId,\\n        uint64 numTokensToMint,\\n        address mintRecipient,\\n        bytes32[] calldata proof\\n    ) external payable {\\n        address msgSender = _msgSender();\\n\\n        Vector memory _vector = vectors[vectorId];\\n        uint64 newNumClaimedViaVector = _vector.totalClaimedViaVector + numTokensToMint;\\n        uint64 newNumClaimedForUser = userClaims[vectorId][msgSender] + numTokensToMint;\\n\\n        // merkle tree allowlist validation\\n        bytes32 leaf = keccak256(abi.encodePacked(msgSender));\\n        if (!MerkleProof.verify(proof, _vector.allowlistRoot, leaf)) {\\n            _revert(AllowlistInvalid.selector);\\n        }\\n\\n        _vectorMintEdition721(\\n            vectorId,\\n            _vector,\\n            vectorToEditionId[vectorId],\\n            numTokensToMint,\\n            mintRecipient,\\n            newNumClaimedViaVector,\\n            newNumClaimedForUser\\n        );\\n\\n        vectors[vectorId].totalClaimedViaVector = newNumClaimedViaVector;\\n        userClaims[vectorId][msgSender] = newNumClaimedForUser;\\n    }\\n\\n    /**\\n     * @notice Mint on an ERC721Editions or ERC721SingleEdiion collection with a valid claim\\n     * @param _claim Claim\\n     * @param _signature Signed + encoded claim\\n     * @param _recipient Who to mint the NFT(s) to\\n     */\\n    function gatedMintEdition721(\\n        Claim calldata _claim,\\n        bytes calldata _signature,\\n        address _recipient\\n    ) external payable {\\n        _processGatedMintClaim(_claim, _signature);\\n        // mint NFT(s)\\n        if (_claim.numTokensToMint == 1) {\\n            IERC721EditionMint(_claim.contractAddress).mintOneToRecipient(_claim.editionId, _recipient);\\n        } else {\\n            IERC721EditionMint(_claim.contractAddress).mintAmountToRecipient(\\n                _claim.editionId,\\n                _recipient,\\n                _claim.numTokensToMint\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint on an ERC721Editions or ERC721SingleEdiion collection with a valid claim, using meta-tx packets\\n     * @param claim Claim\\n     * @param claimSignature Signed + encoded claim\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     */\\n    function gatedMintPaymentPacketEdition721(\\n        ClaimWithMetaTxPacket calldata claim,\\n        bytes calldata claimSignature,\\n        address mintRecipient\\n    ) external payable {\\n        address msgSender = _msgSender();\\n\\n        _verifyAndUpdateClaimWithMetaTxPacket(claim, claimSignature, msgSender);\\n\\n        if (claim.currency == address(0)) {\\n            _revert(CurrencyTypeInvalid.selector);\\n        }\\n\\n        // make payments\\n        if (claim.pricePerToken > 0) {\\n            _processERC20PaymentWithMetaTxPackets(\\n                claim.currency,\\n                claim.purchaseToCreatorPacket,\\n                claim.purchaseToPlatformPacket,\\n                msgSender,\\n                claim.offchainVectorId,\\n                claim.pricePerToken * claim.numTokensToMint\\n            );\\n        }\\n\\n        if (msg.value < claim.numTokensToMint * _platformMintFee) {\\n            _revert(MintFeeTooLow.selector);\\n        }\\n\\n        // mint NFT(s)\\n        if (claim.numTokensToMint == 1) {\\n            IERC721EditionMint(claim.contractAddress).mintOneToRecipient(claim.editionId, mintRecipient);\\n        } else {\\n            IERC721EditionMint(claim.contractAddress).mintAmountToRecipient(\\n                claim.editionId,\\n                mintRecipient,\\n                claim.numTokensToMint\\n            );\\n        }\\n\\n        emit NumTokenMint(claim.offchainVectorId, claim.contractAddress, false, claim.numTokensToMint);\\n    }\\n\\n    /**\\n     * @notice Withdraw native gas token owed to platform\\n     */\\n    function withdrawNativeGasToken() external onlyPlatform {\\n        uint256 withdrawnValue = address(this).balance;\\n        (bool sentToPlatform, bytes memory dataPlatform) = _platform.call{ value: withdrawnValue }(\\\"\\\");\\n        if (!sentToPlatform) {\\n            _revert(EtherSendFailed.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update platform mint fee\\n     * @param newPlatformMintFee New platform mint fee\\n     */\\n    function updatePlatformMintFee(uint256 newPlatformMintFee) external onlyOwner {\\n        _platformMintFee = newPlatformMintFee;\\n    }\\n\\n    /**\\n     * @notice Returns platform executors\\n     */\\n    function platformExecutors() external view returns (address[] memory) {\\n        return _platformExecutors.values();\\n    }\\n\\n    /**\\n     * @notice Returns claim ids used for an offchain vector\\n     * @param vectorId ID of offchain vector\\n     */\\n    function getClaimNoncesUsedForOffchainVector(bytes32 vectorId) external view returns (bytes32[] memory) {\\n        return _offchainVectorsToNoncesUsed[vectorId].values();\\n    }\\n\\n    /**\\n     * @notice Returns number of NFTs minted by user on vector\\n     * @param vectorId ID of offchain vector\\n     * @param user Minting user\\n     */\\n    function getNumClaimedPerUserOffchainVector(bytes32 vectorId, address user) external view returns (uint256) {\\n        return offchainVectorsClaimState[vectorId].numClaimedPerUser[user];\\n    }\\n\\n    /**\\n     * @notice Verify that claim and claim signature are valid for a mint\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param expectedMsgSender Expected claimer to verify claim for\\n     */\\n    function verifyClaim(\\n        Claim calldata claim,\\n        bytes calldata signature,\\n        address expectedMsgSender\\n    ) external view returns (bool) {\\n        address signer = _claimSigner(claim, signature);\\n        if (expectedMsgSender != claim.claimer) {\\n            _revert(SenderNotClaimer.selector);\\n        }\\n\\n        return\\n            _isPlatformExecutor(signer) &&\\n            !_offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) &&\\n            block.timestamp <= claim.claimExpiryTimestamp &&\\n            (claim.maxClaimableViaVector == 0 ||\\n                claim.numTokensToMint + offchainVectorsClaimState[claim.offchainVectorId].numClaimed <=\\n                claim.maxClaimableViaVector) &&\\n            (claim.maxClaimablePerUser == 0 ||\\n                claim.numTokensToMint +\\n                    offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[expectedMsgSender] <=\\n                claim.maxClaimablePerUser);\\n    }\\n\\n    /**\\n     * @notice Verify that series claim and series claim signature are valid for a mint\\n     * @param claim Series Claim\\n     * @param signature Signed + encoded claim\\n     * @param expectedMsgSender Expected claimer to verify claim for\\n     * @param tokenIds IDs of NFTs to be minted\\n     */\\n    function verifySeriesClaim(\\n        SeriesClaim calldata claim,\\n        bytes calldata signature,\\n        address expectedMsgSender,\\n        uint256[] calldata tokenIds\\n    ) external view returns (bool) {\\n        address signer = _seriesClaimSigner(claim, signature);\\n        if (expectedMsgSender != claim.claimer) {\\n            _revert(SenderNotClaimer.selector);\\n        }\\n        uint256 numTokensToMint = tokenIds.length;\\n\\n        /* solhint-disable no-empty-blocks */\\n        for (uint256 i = 0; i < numTokensToMint; i++) {\\n            // if any token has already been minted, return false\\n            try IERC721(claim.contractAddress).ownerOf(tokenIds[i]) returns (address tokenOwner) {\\n                if (tokenOwner != address(0)) {\\n                    return false;\\n                }\\n            } catch {\\n                // valid, ownerOf reverted\\n            }\\n        }\\n        /* solhint-enable no-empty-blocks */\\n\\n        return\\n            _isPlatformExecutor(signer) &&\\n            numTokensToMint <= claim.maxPerTxn &&\\n            !_offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) &&\\n            block.timestamp <= claim.claimExpiryTimestamp &&\\n            (claim.maxClaimableViaVector == 0 ||\\n                numTokensToMint + offchainVectorsClaimState[claim.offchainVectorId].numClaimed <=\\n                claim.maxClaimableViaVector) &&\\n            (claim.maxClaimablePerUser == 0 ||\\n                numTokensToMint +\\n                    offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[expectedMsgSender] <=\\n                claim.maxClaimablePerUser);\\n    }\\n\\n    /**\\n     * @notice Verify that claim and claim signature are valid for a mint (claim version with meta-tx packets)\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param expectedMsgSender Expected claimer to verify claim for\\n     */\\n    function verifyClaimWithMetaTxPacket(\\n        ClaimWithMetaTxPacket calldata claim,\\n        bytes calldata signature,\\n        address expectedMsgSender\\n    ) external view returns (bool) {\\n        address signer = _claimWithMetaTxPacketSigner(claim, signature);\\n        if (expectedMsgSender != claim.claimer) {\\n            _revert(SenderNotClaimer.selector);\\n        }\\n\\n        return\\n            _isPlatformExecutor(signer) &&\\n            !_offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) &&\\n            block.timestamp <= claim.claimExpiryTimestamp &&\\n            (claim.maxClaimableViaVector == 0 ||\\n                claim.numTokensToMint + offchainVectorsClaimState[claim.offchainVectorId].numClaimed <=\\n                claim.maxClaimableViaVector) &&\\n            (claim.maxClaimablePerUser == 0 ||\\n                claim.numTokensToMint +\\n                    offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[expectedMsgSender] <=\\n                claim.maxClaimablePerUser);\\n    }\\n\\n    /**\\n     * @notice Returns if nonce is used for the vector\\n     * @param vectorId ID of offchain vector\\n     * @param nonce Nonce being checked\\n     */\\n    function isNonceUsed(bytes32 vectorId, bytes32 nonce) external view returns (bool) {\\n        return _offchainVectorsToNoncesUsed[vectorId].contains(nonce);\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n    /**\\n     * @notice Limit upgrades of contract to MintManager owner\\n     * @param // New implementation address\\n     */\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /* solhint-enable no-empty-blocks */\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    /**\\n     * @notice Used for meta-transactions\\n     */\\n    function _msgData() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (bytes calldata) {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    /**\\n     * @notice Process, verify, and update the state of a gated mint claim\\n     * @param claim Claim\\n     * @param claimSignature Signed + encoded claim\\n     */\\n    function _processGatedMintClaim(Claim calldata claim, bytes calldata claimSignature) private {\\n        address msgSender = _msgSender();\\n\\n        _verifyAndUpdateClaim(claim, claimSignature, msgSender);\\n\\n        // calculate mint fee amount\\n        uint256 mintFeeAmount = _platformMintFee * claim.numTokensToMint;\\n\\n        // make payments\\n        if (claim.currency == address(0) && claim.pricePerToken > 0) {\\n            // pay in native gas token\\n            uint256 amount = claim.numTokensToMint * claim.pricePerToken;\\n            _processNativeGasTokenPayment(amount, mintFeeAmount, claim.paymentRecipient, claim.offchainVectorId);\\n        } else if (claim.pricePerToken > 0) {\\n            // pay in ERC20\\n            uint256 amount = claim.numTokensToMint * claim.pricePerToken;\\n            _processERC20Payment(\\n                amount,\\n                mintFeeAmount,\\n                claim.paymentRecipient,\\n                msgSender,\\n                claim.currency,\\n                claim.offchainVectorId\\n            );\\n        } else {\\n            if (mintFeeAmount > msg.value) {\\n                _revert(MintFeeTooLow.selector);\\n            }\\n        }\\n\\n        emit NumTokenMint(claim.offchainVectorId, claim.contractAddress, false, claim.numTokensToMint);\\n    }\\n\\n    /**\\n     * @notice Process, verify, and update the state of a gated series mint claim\\n     * @param claim Series Claim\\n     * @param claimSignature Signed + encoded claim\\n     * @param numTokensToMint Number of tokens to mint on series\\n     */\\n    function _processGatedSeriesMintClaim(\\n        SeriesClaim calldata claim,\\n        bytes calldata claimSignature,\\n        uint256 numTokensToMint\\n    ) private {\\n        address msgSender = _msgSender();\\n\\n        _verifyAndUpdateSeriesClaim(claim, claimSignature, msgSender, numTokensToMint);\\n\\n        // calculate mint fee amount\\n        uint256 mintFeeAmount = _platformMintFee * numTokensToMint;\\n\\n        // make payments\\n        if (claim.currency == address(0) && claim.pricePerToken > 0) {\\n            // pay in native gas token\\n            uint256 amount = numTokensToMint * claim.pricePerToken;\\n            _processNativeGasTokenPayment(amount, mintFeeAmount, claim.paymentRecipient, claim.offchainVectorId);\\n        } else if (claim.pricePerToken > 0) {\\n            // pay in ERC20\\n            uint256 amount = numTokensToMint * claim.pricePerToken;\\n            _processERC20Payment(\\n                amount,\\n                mintFeeAmount,\\n                claim.paymentRecipient,\\n                msgSender,\\n                claim.currency,\\n                claim.offchainVectorId\\n            );\\n        } else {\\n            if (mintFeeAmount > msg.value) {\\n                _revert(MintFeeTooLow.selector);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verify, and update the state of a gated mint claim\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param msgSender Expected claimer\\n     */\\n    function _verifyAndUpdateClaim(\\n        Claim calldata claim,\\n        bytes calldata signature,\\n        address msgSender\\n    ) private {\\n        address signer = _claimSigner(claim, signature);\\n        if (msgSender != claim.claimer) {\\n            _revert(SenderNotClaimer.selector);\\n        }\\n\\n        // cannot cache here due to nested mapping\\n        uint256 expectedNumClaimedViaVector = offchainVectorsClaimState[claim.offchainVectorId].numClaimed +\\n            claim.numTokensToMint;\\n        uint256 expectedNumClaimedByUser = offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[\\n            msgSender\\n        ] + claim.numTokensToMint;\\n\\n        if (\\n            !_isPlatformExecutor(signer) ||\\n            _offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) ||\\n            block.timestamp > claim.claimExpiryTimestamp ||\\n            (expectedNumClaimedViaVector > claim.maxClaimableViaVector && claim.maxClaimableViaVector != 0) ||\\n            (expectedNumClaimedByUser > claim.maxClaimablePerUser && claim.maxClaimablePerUser != 0)\\n        ) {\\n            _revert(InvalidClaim.selector);\\n        }\\n\\n        _offchainVectorsToNoncesUsed[claim.offchainVectorId].add(claim.claimNonce); // mark claim nonce as used\\n        // update claim state\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimed = expectedNumClaimedViaVector;\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[msgSender] = expectedNumClaimedByUser;\\n    }\\n\\n    /**\\n     * @notice Verify, and update the state of a gated series mint claim\\n     * @param claim Series Claim\\n     * @param signature Signed + encoded claim\\n     * @param msgSender Expected claimer\\n     * @param numTokensToMint How many tokens to mint in this series claim\\n     */\\n    function _verifyAndUpdateSeriesClaim(\\n        SeriesClaim calldata claim,\\n        bytes calldata signature,\\n        address msgSender,\\n        uint256 numTokensToMint\\n    ) private {\\n        address signer = _seriesClaimSigner(claim, signature);\\n        if (msgSender != claim.claimer) {\\n            _revert(SenderNotClaimer.selector);\\n        }\\n\\n        // cannot cache here due to nested mapping\\n        uint256 expectedNumClaimedViaVector = offchainVectorsClaimState[claim.offchainVectorId].numClaimed +\\n            numTokensToMint;\\n        uint256 expectedNumClaimedByUser = offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[\\n            msgSender\\n        ] + numTokensToMint;\\n\\n        if (\\n            !_isPlatformExecutor(signer) ||\\n            numTokensToMint > claim.maxPerTxn ||\\n            _offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) ||\\n            block.timestamp > claim.claimExpiryTimestamp ||\\n            (expectedNumClaimedViaVector > claim.maxClaimableViaVector && claim.maxClaimableViaVector != 0) ||\\n            (expectedNumClaimedByUser > claim.maxClaimablePerUser && claim.maxClaimablePerUser != 0)\\n        ) {\\n            _revert(InvalidClaim.selector);\\n        }\\n\\n        _offchainVectorsToNoncesUsed[claim.offchainVectorId].add(claim.claimNonce); // mark claim nonce as used\\n        // update claim state\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimed = expectedNumClaimedViaVector;\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[msgSender] = expectedNumClaimedByUser;\\n    }\\n\\n    /**\\n     * @notice Verify, and update the state of a gated mint claim (version w/ meta-tx packets)\\n     * @param claim Claim\\n     * @param signature Signed + encoded claim\\n     * @param msgSender Expected claimer\\n     */\\n    function _verifyAndUpdateClaimWithMetaTxPacket(\\n        ClaimWithMetaTxPacket calldata claim,\\n        bytes calldata signature,\\n        address msgSender\\n    ) private {\\n        address signer = _claimWithMetaTxPacketSigner(claim, signature);\\n        if (msgSender != claim.claimer) {\\n            _revert(SenderNotClaimer.selector);\\n        }\\n\\n        // cannot cache here due to nested mapping\\n        uint256 expectedNumClaimedViaVector = offchainVectorsClaimState[claim.offchainVectorId].numClaimed +\\n            claim.numTokensToMint;\\n        uint256 expectedNumClaimedByUser = offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[\\n            msgSender\\n        ] + claim.numTokensToMint;\\n\\n        if (\\n            !_isPlatformExecutor(signer) ||\\n            _offchainVectorsToNoncesUsed[claim.offchainVectorId].contains(claim.claimNonce) ||\\n            block.timestamp > claim.claimExpiryTimestamp ||\\n            (expectedNumClaimedViaVector > claim.maxClaimableViaVector && claim.maxClaimableViaVector != 0) ||\\n            (expectedNumClaimedByUser > claim.maxClaimablePerUser && claim.maxClaimablePerUser != 0)\\n        ) {\\n            _revert(InvalidClaim.selector);\\n        }\\n\\n        _offchainVectorsToNoncesUsed[claim.offchainVectorId].add(claim.claimNonce); // mark claim nonce as used\\n        // update claim state\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimed = expectedNumClaimedViaVector;\\n        offchainVectorsClaimState[claim.offchainVectorId].numClaimedPerUser[msgSender] = expectedNumClaimedByUser;\\n    }\\n\\n    /**\\n     * @notice Process a mint on an on-chain vector\\n     * @param _vectorId ID of vector being minted on\\n     * @param _vector Vector being minted on\\n     * @param numTokensToMint Number of NFTs to mint on vector\\n     * @param newNumClaimedViaVector New number of NFTs minted via vector after this ones\\n     * @param newNumClaimedForUser New number of NFTs minted by user via vector after this ones\\n     */\\n    function _processVectorMint(\\n        uint256 _vectorId,\\n        Vector memory _vector,\\n        uint64 numTokensToMint,\\n        uint256 newNumClaimedViaVector,\\n        uint256 newNumClaimedForUser\\n    ) private {\\n        if (\\n            (_vector.maxTotalClaimableViaVector < newNumClaimedViaVector && _vector.maxTotalClaimableViaVector != 0) ||\\n            (_vector.maxUserClaimableViaVector < newNumClaimedForUser && _vector.maxUserClaimableViaVector != 0) ||\\n            (_vector.paused != 0) ||\\n            ((_vector.startTimestamp > block.timestamp && _vector.startTimestamp != 0) ||\\n                (block.timestamp > _vector.endTimestamp && _vector.endTimestamp != 0)) ||\\n            (numTokensToMint == 0) ||\\n            (numTokensToMint > _vector.tokenLimitPerTx && _vector.tokenLimitPerTx != 0)\\n        ) {\\n            _revert(OnchainVectorMintGuardFailed.selector);\\n        }\\n\\n        // calculate mint fee amount\\n        uint256 mintFeeAmount = _platformMintFee * numTokensToMint;\\n\\n        if (_vector.currency == address(0) && _vector.pricePerToken > 0) {\\n            // pay in native gas token\\n            uint256 amount = numTokensToMint * _vector.pricePerToken;\\n            _processNativeGasTokenPayment(amount, mintFeeAmount, _vector.paymentRecipient, bytes32(_vectorId));\\n        } else if (_vector.pricePerToken > 0) {\\n            // pay in ERC20\\n            uint256 amount = numTokensToMint * _vector.pricePerToken;\\n            _processERC20Payment(\\n                amount,\\n                mintFeeAmount,\\n                _vector.paymentRecipient,\\n                _msgSender(),\\n                _vector.currency,\\n                bytes32(_vectorId)\\n            );\\n        } else {\\n            if (mintFeeAmount > msg.value) {\\n                _revert(MintFeeTooLow.selector);\\n            }\\n        }\\n\\n        emit NumTokenMint(bytes32(_vectorId), _vector.contractAddress, true, numTokensToMint);\\n    }\\n\\n    /**\\n     * @notice Mint on vector pointing to ERC721General collection\\n     * @param _vectorId ID of vector\\n     * @param _vector Vector being minted on\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param newNumClaimedViaVector New number of NFTs minted via vector after this ones\\n     * @param newNumClaimedForUser New number of NFTs minted by user via vector after this ones\\n     */\\n    function _vectorMintGeneral721(\\n        uint256 _vectorId,\\n        Vector memory _vector,\\n        uint64 numTokensToMint,\\n        address mintRecipient,\\n        uint256 newNumClaimedViaVector,\\n        uint256 newNumClaimedForUser\\n    ) private {\\n        _processVectorMint(_vectorId, _vector, numTokensToMint, newNumClaimedViaVector, newNumClaimedForUser);\\n        if (numTokensToMint == 1) {\\n            IERC721GeneralMint(_vector.contractAddress).mintOneToOneRecipient(mintRecipient);\\n        } else {\\n            IERC721GeneralMint(_vector.contractAddress).mintAmountToOneRecipient(mintRecipient, numTokensToMint);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint on vector pointing to ERC721Editions or ERC721SingleEdiion collection\\n     * @param _vectorId ID of vector\\n     * @param _vector Vector being minted on\\n     * @param editionId ID of edition being minted on\\n     * @param numTokensToMint Number of tokens to mint\\n     * @param mintRecipient Who to mint the NFT(s) to\\n     * @param newNumClaimedViaVector New number of NFTs minted via vector after this ones\\n     * @param newNumClaimedForUser New number of NFTs minted by user via vector after this ones\\n     */\\n    function _vectorMintEdition721(\\n        uint256 _vectorId,\\n        Vector memory _vector,\\n        uint256 editionId,\\n        uint64 numTokensToMint,\\n        address mintRecipient,\\n        uint256 newNumClaimedViaVector,\\n        uint256 newNumClaimedForUser\\n    ) private {\\n        _processVectorMint(_vectorId, _vector, numTokensToMint, newNumClaimedViaVector, newNumClaimedForUser);\\n        if (numTokensToMint == 1) {\\n            IERC721EditionMint(_vector.contractAddress).mintOneToRecipient(editionId, mintRecipient);\\n        } else {\\n            IERC721EditionMint(_vector.contractAddress).mintAmountToRecipient(\\n                editionId,\\n                mintRecipient,\\n                numTokensToMint\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Process payment in native gas token, sending to creator and platform\\n     * @param totalAmount Total amount being paid\\n     * @param mintFeeAmount Amount to pay platform\\n     * @param recipient Creator recipient of payment\\n     * @param vectorId ID of vector (on-chain or off-chain)\\n     */\\n    function _processNativeGasTokenPayment(\\n        uint256 totalAmount,\\n        uint256 mintFeeAmount,\\n        address payable recipient,\\n        bytes32 vectorId\\n    ) private {\\n        if (totalAmount + mintFeeAmount > msg.value) {\\n            _revert(InvalidPaymentAmount.selector);\\n        }\\n\\n        (bool sentToRecipient, bytes memory dataRecipient) = recipient.call{ value: totalAmount }(\\\"\\\");\\n        if (!sentToRecipient) {\\n            _revert(EtherSendFailed.selector);\\n        }\\n        emit NativeGasTokenPayment(recipient, vectorId, totalAmount, 10000);\\n    }\\n\\n    /**\\n     * @notice Process payment in ERC20, sending to creator and platform\\n     * @param totalAmount Total amount being paid\\n     * @param mintFeeAmount Amount to pay platform in mint fees\\n     * @param recipient Creator recipient of payment\\n     * @param payer Payer\\n     * @param currency ERC20 currency\\n     * @param vectorId ID of vector (on-chain or off-chain)\\n     */\\n    function _processERC20Payment(\\n        uint256 totalAmount,\\n        uint256 mintFeeAmount,\\n        address recipient,\\n        address payer,\\n        address currency,\\n        bytes32 vectorId\\n    ) private {\\n        if (mintFeeAmount > msg.value) {\\n            _revert(MintFeeTooLow.selector);\\n        }\\n        IERC20(currency).transferFrom(payer, recipient, totalAmount);\\n        // IERC20(currency).transferFrom(payer, _platform, totalAmount - amountToCreator);\\n\\n        emit ERC20Payment(currency, recipient, vectorId, payer, totalAmount, 10000);\\n    }\\n\\n    /**\\n     * @notice Process payment in ERC20 with meta-tx packets, sending to creator and platform\\n     * @param currency ERC20 currency\\n     * @param purchaseToCreatorPacket Meta-tx packet facilitating payment to creator recipient\\n     * @param purchaseToPlatformPacket Meta-tx packet facilitating payment to platform\\n     * @param msgSender Claimer\\n     * @param vectorId ID of vector (on-chain or off-chain)\\n     * @param amount Total amount paid\\n     */\\n    function _processERC20PaymentWithMetaTxPackets(\\n        address currency,\\n        PurchaserMetaTxPacket calldata purchaseToCreatorPacket,\\n        PurchaserMetaTxPacket calldata purchaseToPlatformPacket,\\n        address msgSender,\\n        bytes32 vectorId,\\n        uint256 amount\\n    ) private {\\n        uint256 previousBalance = IERC20(currency).balanceOf(msgSender);\\n        INativeMetaTransaction(currency).executeMetaTransaction(\\n            msgSender,\\n            purchaseToCreatorPacket.functionSignature,\\n            purchaseToCreatorPacket.sigR,\\n            purchaseToCreatorPacket.sigS,\\n            purchaseToCreatorPacket.sigV\\n        );\\n\\n        INativeMetaTransaction(currency).executeMetaTransaction(\\n            msgSender,\\n            purchaseToPlatformPacket.functionSignature,\\n            purchaseToPlatformPacket.sigR,\\n            purchaseToPlatformPacket.sigS,\\n            purchaseToPlatformPacket.sigV\\n        );\\n\\n        if (IERC20(currency).balanceOf(msgSender) > (previousBalance - amount)) {\\n            _revert(InvalidPaymentAmount.selector);\\n        }\\n\\n        emit ERC20PaymentMetaTxPackets(\\n            currency,\\n            msgSender,\\n            vectorId,\\n            purchaseToCreatorPacket,\\n            purchaseToPlatformPacket,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Recover claim signature signer\\n     * @param claim Claim\\n     * @param signature Claim signature\\n     */\\n    function _claimSigner(Claim calldata claim, bytes calldata signature) private view returns (address) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(bytes.concat(_claimABIEncoded1(claim), _claimABIEncoded2(claim.offchainVectorId)))\\n            ).recover(signature);\\n    }\\n\\n    /**\\n     * @notice Recover series claim signature signer\\n     * @param claim Series Claim\\n     * @param signature Series Claim signature\\n     */\\n    function _seriesClaimSigner(SeriesClaim calldata claim, bytes calldata signature) private view returns (address) {\\n        return _hashTypedDataV4(keccak256(_seriesClaimABIEncoded(claim))).recover(signature);\\n    }\\n\\n    /**\\n     * @notice Recover claimWithMetaTxPacket signature signer\\n     * @param claim Claim\\n     * @param signature Claim signature\\n     */\\n    function _claimWithMetaTxPacketSigner(ClaimWithMetaTxPacket calldata claim, bytes calldata signature)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    bytes.concat(\\n                        _claimWithMetaTxABIEncoded1(claim),\\n                        _claimWithMetaTxABIEncoded2(claim.claimNonce, claim.offchainVectorId)\\n                    )\\n                )\\n            ).recover(signature);\\n    }\\n\\n    /**\\n     * @notice Returns true if account passed in is a platform executor\\n     * @param _executor Account being checked\\n     */\\n    function _isPlatformExecutor(address _executor) private view returns (bool) {\\n        return _platformExecutors.contains(_executor);\\n    }\\n\\n    /* solhint-disable max-line-length */\\n    /**\\n     * @notice Get claim typehash\\n     */\\n    function _getClaimTypeHash() private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                \\\"Claim(address currency,address contractAddress,address claimer,address paymentRecipient,uint256 pricePerToken,uint64 numTokensToMint,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n            );\\n    }\\n\\n    /**\\n     * @notice Get series claim typehash\\n     */\\n    function _getSeriesClaimTypeHash() private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                \\\"SeriesClaim(address currency,address contractAddress,address claimer,address paymentRecipient,uint256 pricePerToken,uint64 maxPerTxn,uint64 maxClaimableViaVector,uint64 maxClaimablePerUser,uint64 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n            );\\n    }\\n\\n    /**\\n     * @notice Get claimWithMetaTxPacket typehash\\n     */\\n    function _getClaimWithMetaTxPacketTypeHash() private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                \\\"ClaimWithMetaTxPacket(address currency,address contractAddress,address claimer,uint256 pricePerToken,uint64 numTokensToMint,PurchaserMetaTxPacket purchaseToCreatorPacket,PurchaserMetaTxPacket purchaseToPlatformPacket,uint256 maxClaimableViaVector,uint256 maxClaimablePerUser,uint256 editionId,uint256 claimExpiryTimestamp,bytes32 claimNonce,bytes32 offchainVectorId)\\\"\\n            );\\n    }\\n\\n    /* solhint-enable max-line-length */\\n\\n    /**\\n     * @notice Return abi-encoded claim part one\\n     * @param claim Claim\\n     */\\n    function _claimABIEncoded1(Claim calldata claim) private pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                _getClaimTypeHash(),\\n                claim.currency,\\n                claim.contractAddress,\\n                claim.claimer,\\n                claim.paymentRecipient,\\n                claim.pricePerToken,\\n                claim.numTokensToMint,\\n                claim.maxClaimableViaVector,\\n                claim.maxClaimablePerUser,\\n                claim.editionId,\\n                claim.claimExpiryTimestamp,\\n                claim.claimNonce\\n            );\\n    }\\n\\n    /**\\n     * @notice Return abi-encoded series claim part one\\n     * @param claim SeriesClaim\\n     */\\n    function _seriesClaimABIEncoded(SeriesClaim calldata claim) private pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                _getSeriesClaimTypeHash(),\\n                claim.currency,\\n                claim.contractAddress,\\n                claim.claimer,\\n                claim.paymentRecipient,\\n                claim.pricePerToken,\\n                claim.maxPerTxn,\\n                claim.maxClaimableViaVector,\\n                claim.maxClaimablePerUser,\\n                claim.claimExpiryTimestamp,\\n                claim.claimNonce,\\n                claim.offchainVectorId\\n            );\\n    }\\n\\n    /**\\n     * @notice Return abi-encoded claim part two\\n     * @param offchainVectorId Offchain vector ID of claim\\n     */\\n    function _claimABIEncoded2(bytes32 offchainVectorId) private pure returns (bytes memory) {\\n        return abi.encode(offchainVectorId);\\n    }\\n\\n    /**\\n     * @notice Return abi-encoded claimWithMetaTxPacket part one\\n     * @param claim Claim\\n     */\\n    function _claimWithMetaTxABIEncoded1(ClaimWithMetaTxPacket calldata claim) private pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                _getClaimWithMetaTxPacketTypeHash(),\\n                claim.currency,\\n                claim.contractAddress,\\n                claim.claimer,\\n                claim.pricePerToken,\\n                claim.numTokensToMint,\\n                claim.purchaseToCreatorPacket,\\n                claim.purchaseToPlatformPacket,\\n                claim.maxClaimableViaVector,\\n                claim.maxClaimablePerUser,\\n                claim.editionId,\\n                claim.claimExpiryTimestamp\\n            );\\n    }\\n\\n    /**\\n     * @notice Return abi-encoded claimWithMetaTxPacket part two\\n     * @param claimNonce Claim's unique identifier\\n     * @param offchainVectorId Offchain vector ID of claim\\n     */\\n    function _claimWithMetaTxABIEncoded2(bytes32 claimNonce, bytes32 offchainVectorId)\\n        private\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(claimNonce, offchainVectorId);\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(bytes4 errorSelector) private pure {\\n        assembly {\\n            mstore(0x00, errorSelector)\\n            revert(0x00, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\n/* solhint-disable */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/IERC721GeneralMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @notice General721 mint interface\\n * @author highlight.xyz\\n */\\ninterface IERC721GeneralMint {\\n    /**\\n     * @notice Mint one token to one recipient\\n     * @param recipient Recipient of minted NFT\\n     */\\n    function mintOneToOneRecipient(address recipient) external returns (uint256);\\n\\n    /**\\n     * @notice Mint an amount of tokens to one recipient\\n     * @param recipient Recipient of minted NFTs\\n     * @param amount Amount of NFTs minted\\n     */\\n    function mintAmountToOneRecipient(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Mint one token to multiple recipients. Useful for use-cases like airdrops\\n     * @param recipients Recipients of minted NFTs\\n     */\\n    function mintOneToMultipleRecipients(address[] calldata recipients) external;\\n\\n    /**\\n     * @notice Mint the same amount of tokens to multiple recipients\\n     * @param recipients Recipients of minted NFTs\\n     * @param amount Amount of NFTs minted to each recipient\\n     */\\n    function mintSameAmountToMultipleRecipients(address[] calldata recipients, uint256 amount) external;\\n\\n    /**\\n     * @notice Mint a chosen token id to a single recipient\\n     * @param recipient Recipient of chosen NFT\\n     * @param tokenId ID of NFT to mint\\n     */\\n    function mintSpecificTokenToOneRecipient(address recipient, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Mint chosen token ids to a single recipient\\n     * @param recipient Recipient of chosen NFT\\n     * @param tokenIds IDs of NFTs to mint\\n     */\\n    function mintSpecificTokensToOneRecipient(address recipient, uint256[] calldata tokenIds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/IERC721EditionMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.10;\\n\\n/**\\n * @notice Mint interface on editions contracts\\n * @author highlight.xyz\\n */\\ninterface IERC721EditionMint {\\n    /**\\n     * @notice Mints one NFT to one recipient\\n     * @param editionId Edition to mint the NFT on\\n     * @param recipient Recipient of minted NFT\\n     */\\n    function mintOneToRecipient(uint256 editionId, address recipient) external returns (uint256);\\n\\n    /**\\n     * @notice Mints an amount of NFTs to one recipient\\n     * @param editionId Edition to mint the NFTs on\\n     * @param recipient Recipient of minted NFTs\\n     * @param amount Amount of NFTs minted\\n     */\\n    function mintAmountToRecipient(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Mints one NFT each to a number of recipients\\n     * @param editionId Edition to mint the NFTs on\\n     * @param recipients Recipients of minted NFTs\\n     */\\n    function mintOneToRecipients(uint256 editionId, address[] memory recipients) external returns (uint256);\\n\\n    /**\\n     * @notice Mints an amount of NFTs each to a number of recipients\\n     * @param editionId Edition to mint the NFTs on\\n     * @param recipients Recipients of minted NFTs\\n     * @param amount Amount of NFTs minted per recipient\\n     */\\n    function mintAmountToRecipients(\\n        uint256 editionId,\\n        address[] memory recipients,\\n        uint256 amount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../ERC165/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\n/* solhint-disable */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mint/interfaces/INativeMetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title NativeMetaTransaction interface. Used by eg. wETH on Polygon\\n * @author highlight.xyz\\n */\\ninterface INativeMetaTransaction {\\n    /**\\n     * @notice Meta-transaction object\\n     * @param nonce Account nonce\\n     * @param from Account to be considered as sender\\n     * @param functionSignature Function to call on contract, with arguments encoded\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    /**\\n     * @notice Execute meta transaction on contract containing EIP-712 stuff natively\\n     * @param userAddress User to be considered as sender\\n     * @param functionSignature Function to call on contract, with arguments encoded\\n     * @param sigR Elliptic curve signature component\\n     * @param sigS Elliptic curve signature component\\n     * @param sigV Elliptic curve signature component\\n     */\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @author OpenZeppelin, modified by highlight.xyz to make compliant to upgradeable contracts\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\n/* solhint-disable */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private _CACHED_CHAIN_ID;\\n\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP721Upgradeable_initialize(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        /* solhint-disable max-line-length */\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        /* solhint-enable max-line-length */\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *      Openzeppelin contract slightly modified by ishan@ highlight.xyz to be upgradeable.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable {\\n    address private _trustedForwarder;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function __ERC2771ContextUpgradeable__init__(address trustedForwarder) internal onlyInitializing {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /* solhint-disable no-inline-assembly */\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n            /* solhint-enable no-inline-assembly */\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC165/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AllowlistInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrencyTypeInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EtherSendFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExecutorChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnchainVectorMintGuardFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotClaimer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VectorUpdateActionFrozen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"onChainVector\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ChooseTokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToCreator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"percentageBPSOfTotal\",\"type\":\"uint32\"}],\"name\":\"ERC20Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MintManager.PurchaserMetaTxPacket\",\"name\":\"purchaseToCreatorPacket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MintManager.PurchaserMetaTxPacket\",\"name\":\"purchaseToPlatformPacket\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentMetaTxPackets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToCreator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"percentageBPSOfTotal\",\"type\":\"uint32\"}],\"name\":\"NativeGasTokenPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"onChainVector\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numMinted\",\"type\":\"uint256\"}],\"name\":\"NumTokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"PlatformExecutorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"VectorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"}],\"name\":\"VectorDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"paused\",\"type\":\"uint8\"}],\"name\":\"VectorPausedOrUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenLimitPerTx\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTotalClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxUserClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalClaimedViaVector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"allowlistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"paused\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MintManager.Vector\",\"name\":\"newVector\",\"type\":\"tuple\"}],\"name\":\"VectorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"addPlatformExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenLimitPerTx\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTotalClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxUserClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalClaimedViaVector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"allowlistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"paused\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.Vector\",\"name\":\"_vector\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"updatesFrozen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"deleteFrozen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pausesFrozen\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.VectorMutability\",\"name\":\"_vectorMutability\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"createVector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"}],\"name\":\"deleteVector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"deprecatePlatformExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numTokensToMint\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableViaVector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimablePerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimExpiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"claimNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offchainVectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MintManager.Claim\",\"name\":\"_claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"gatedMintEdition721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numTokensToMint\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.PurchaserMetaTxPacket\",\"name\":\"purchaseToCreatorPacket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.PurchaserMetaTxPacket\",\"name\":\"purchaseToPlatformPacket\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableViaVector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimablePerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimExpiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"claimNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offchainVectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MintManager.ClaimWithMetaTxPacket\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"claimSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"mintRecipient\",\"type\":\"address\"}],\"name\":\"gatedMintPaymentPacketEdition721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numTokensToMint\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableViaVector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimablePerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimExpiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"claimNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offchainVectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MintManager.Claim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"claimSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"mintRecipient\",\"type\":\"address\"}],\"name\":\"gatedSeriesMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxPerTxn\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxClaimablePerUser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"claimExpiryTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"claimNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offchainVectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MintManager.SeriesClaim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"claimSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"mintRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"gatedSeriesMintChooseToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"}],\"name\":\"getClaimNoncesUsedForOffchainVector\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumClaimedPerUserOffchainVector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialExecutor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPlatformMintFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vectorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"isNonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offchainVectorsClaimState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"}],\"name\":\"pauseVector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformExecutors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"}],\"name\":\"unpauseVector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPlatformMintFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenLimitPerTx\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTotalClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxUserClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalClaimedViaVector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"allowlistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"paused\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.Vector\",\"name\":\"_newVector\",\"type\":\"tuple\"}],\"name\":\"updateVector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"updatesFrozen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"deleteFrozen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pausesFrozen\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.VectorMutability\",\"name\":\"_newVectorMutability\",\"type\":\"tuple\"}],\"name\":\"updateVectorMutability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaims\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numTokensToMint\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"mintRecipient\",\"type\":\"address\"}],\"name\":\"vectorMintEdition721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vectorId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numTokensToMint\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"mintRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"vectorMintEdition721WithAllowlist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vectorMutabilities\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"updatesFrozen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"deleteFrozen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pausesFrozen\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vectorToEditionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"tokenLimitPerTx\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTotalClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxUserClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalClaimedViaVector\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"allowlistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"paused\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numTokensToMint\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableViaVector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimablePerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimExpiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"claimNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offchainVectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MintManager.Claim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"expectedMsgSender\",\"type\":\"address\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"numTokensToMint\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.PurchaserMetaTxPacket\",\"name\":\"purchaseToCreatorPacket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"internalType\":\"struct MintManager.PurchaserMetaTxPacket\",\"name\":\"purchaseToPlatformPacket\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableViaVector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimablePerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimExpiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"claimNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offchainVectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MintManager.ClaimWithMetaTxPacket\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"expectedMsgSender\",\"type\":\"address\"}],\"name\":\"verifyClaimWithMetaTxPacket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"paymentRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxPerTxn\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxClaimableViaVector\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxClaimablePerUser\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"claimExpiryTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"claimNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"offchainVectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MintManager.SeriesClaim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"expectedMsgSender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"verifySeriesClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintManager", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}