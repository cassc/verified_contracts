{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InvestNFTGatewayEthereumV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./interfaces/IBaseGateway.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapRouter.sol\\\";\\nimport \\\"./interfaces/IWeth.sol\\\";\\nimport \\\"./BaseGatewayEthereumV2.sol\\\";\\nimport \\\"./hotpot/StakeCurveConvex.sol\\\";\\nimport \\\"./LotteryVRF.sol\\\";\\nimport \\\"./interfaces/ERC721PayWithEther.sol\\\";\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\nimport \\\"./compound/interfaces/ICurvePool.sol\\\";\\n\\ncontract InvestNFTGatewayEthereumV2 is BaseGatewayEthereumV2 {\\n    using SafeERC20 for IERC20;\\n\\n    struct TokenLotteryInfo {\\n        address nft;\\n        uint256 id;\\n    }\\n    mapping(address => uint256) public poolsTotalRewards;\\n    mapping(address => mapping(uint256 => uint256)) public lotteryRewards;\\n    bytes32[] public lotteryList;\\n    mapping(bytes32 => TokenLotteryInfo) public tokenLotteryInfo;\\n    VRFv2Consumer public VRFConsumer;\\n    mapping(uint256 => mapping(address => bool)) public requestIds;\\n    mapping(uint256 => uint256[]) private winnerBoard;\\n    mapping(address => address) private hotpotPoolToCurvePool;\\n    uint256 public redeemableTime;\\n    mapping(address => bool) public contractIsDisabledForDeposit;\\n\\n    function initialize(\\n        string memory _name,\\n        address _wrapperNativeToken,\\n        address _stablecoin,\\n        address _rewardToken,\\n        address _operator,\\n        IUniswapV3SwapRouter _router,\\n        uint256 _redeemableTime\\n    ) external override {\\n        require(keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\\\"\\\")), \\\"Already initialized\\\");\\n        super.initializePausable(_operator);\\n        super.initializeReentrancyGuard();\\n\\n        name = _name;\\n        wrapperNativeToken = _wrapperNativeToken;\\n        stablecoin = _stablecoin;\\n        rewardToken= _rewardToken;\\n        operator = _operator;\\n        router = _router;\\n        redeemableTime = _redeemableTime;\\n    }\\n\\n    function initNftData(address _nft, address _poolBase, address _poolLottery, bool _increaseable, uint256 _delta) external onlyOwner override {\\n        if (_poolBase != address(0)) {\\n            contractInfo[_nft].poolAddressBase = _poolBase;\\n        }\\n        if (_poolLottery != address(0)) {\\n            contractInfo[_nft].poolAddressLottery = _poolLottery;\\n        }\\n        contractInfo[_nft].increaseable = _increaseable;\\n        contractInfo[_nft].delta = _delta;\\n        contractInfo[_nft].active = true;\\n    }\\n\\n    function deposit(uint256 _tokenId) external nonReentrant supportInterface(msg.sender) payable override notPaused {\\n        require(contractInfo[msg.sender].active == true, \\\"NFT data didn't be set yet\\\");\\n        require(contractIsDisabledForDeposit[msg.sender] != true, \\\"Collection was stopped to mint\\\");\\n\\n        IWETH(wrapperNativeToken).deposit{ value: msg.value }();\\n        IWETH(wrapperNativeToken).approve(address(router), msg.value);\\n\\n        uint256 stablecoinAmount = convertExactWEthToStablecoin(msg.value, 0);\\n\\n        // update fomulaBase balance\\n        address fomulaBase =  contractInfo[msg.sender].poolAddressBase;\\n        poolsWeights[fomulaBase] = poolsWeights[fomulaBase] + stablecoinAmount;\\n        poolsBalances[fomulaBase] = poolsBalances[fomulaBase] + stablecoinAmount;\\n\\n        updateInfo(msg.sender, _tokenId, stablecoinAmount);\\n        emit Deposit(msg.sender, _tokenId, stablecoinAmount);\\n    }\\n\\n    function batchDeposit(uint256 _idFrom, uint256 _offset) external nonReentrant supportInterface(msg.sender) payable override notPaused {\\n        require(contractInfo[msg.sender].active == true, \\\"NFT data didn't be set yet\\\");\\n        require(contractIsDisabledForDeposit[msg.sender] != true, \\\"Collection was stopped to mint\\\");\\n\\n        IWETH(wrapperNativeToken).deposit{ value: msg.value }();\\n        IWETH(wrapperNativeToken).approve(address(router), msg.value);\\n\\n        uint256 totalStablecoinAmount = convertExactWEthToStablecoin(msg.value, 0);\\n\\n        // update fomulaBase balance\\n        address fomulaBase =  contractInfo[msg.sender].poolAddressBase;\\n        poolsWeights[fomulaBase] = poolsWeights[fomulaBase] + totalStablecoinAmount;\\n        poolsBalances[fomulaBase] = poolsBalances[fomulaBase] + totalStablecoinAmount;\\n        uint256 stablecoinAmount = totalStablecoinAmount / _offset;\\n        for (uint i = 0; i < _offset; i++) {\\n            updateInfo(msg.sender, _idFrom + i, stablecoinAmount);\\n            emit Deposit(msg.sender, _idFrom + i, stablecoinAmount);\\n        }\\n    }\\n\\n    function updateInfo(address _nft, uint256 _tokenId, uint256 _weight) internal {\\n        bytes32 infoHash = keccak256(abi.encodePacked(_nft, _tokenId));\\n        // update token info\\n        tokenInfo[infoHash].weightsFomulaBase = tokenInfo[infoHash].weightsFomulaBase + _weight;\\n        tokenInfo[infoHash].weightsFomulaLottery = tokenInfo[infoHash].weightsFomulaLottery + BASE_WEIGHTS;\\n        tokenInfo[infoHash].amounts = tokenInfo[infoHash].amounts + 1;\\n\\n        // update contract info\\n        contractInfo[_nft].weightsFomulaBase = contractInfo[_nft].weightsFomulaBase + _weight;\\n        contractInfo[_nft].weightsFomulaLottery = contractInfo[_nft].weightsFomulaLottery + BASE_WEIGHTS;\\n        contractInfo[_nft].amounts = contractInfo[_nft].amounts + 1;\\n\\n        TokenLotteryInfo memory info;\\n        info.nft = _nft;\\n        info.id = _tokenId;\\n        tokenLotteryInfo[infoHash] = info;\\n        lotteryList.push(infoHash);\\n    }\\n\\n    function baseValue(address _nft, uint256 _tokenId) public view override returns (uint256, uint256) {\\n        if (contractIsDisabledForDeposit[_nft] == true) {\\n            return (0, 0);\\n        }\\n        bytes32 infoHash = keccak256(abi.encodePacked(_nft, _tokenId));\\n        address fomulaBase =  contractInfo[_nft].poolAddressBase;\\n        uint256 tokenWeightsBase = tokenInfo[infoHash].weightsFomulaBase;\\n        uint256 poolsWeightBase = poolsWeights[fomulaBase];\\n\\n        ICurvePool curvePool = ICurvePool(hotpotPoolToCurvePool[fomulaBase]);\\n        uint256 lpVirtualPrice = curvePool.get_virtual_price();\\n        StakeCurveConvex hotpotPool = StakeCurveConvex(payable(fomulaBase));\\n        // LP from invested stablecoin\\n        uint256 lpAmount = hotpotPool.balanceOf(address(this));\\n        uint256 lpTotalPrice = lpAmount * lpVirtualPrice / 1e18;\\n\\n        uint256 tokenBalanceBase = lpTotalPrice * tokenWeightsBase / poolsWeightBase;\\n        return (tokenWeightsBase, tokenBalanceBase);\\n    }\\n\\n    function tokenReward(address _nft, uint256 _tokenId) public view override returns (uint256)  {\\n        return lotteryRewards[_nft][_tokenId];\\n    }\\n\\n    function redeem(address _nft, uint256 _tokenId, bool _isToken0) external override notPaused {\\n        require(block.timestamp >= redeemableTime, \\\"Redeemable until redeemableTime\\\");\\n\\n        bytes32 infoHash = keccak256(abi.encodePacked(_nft, _tokenId));\\n        address fomulaBase =  contractInfo[_nft].poolAddressBase;\\n        address fomulaLottery =  contractInfo[_nft].poolAddressLottery;\\n\\n        uint256 stablecoinTotal = IERC20(stablecoin).balanceOf(address(this));\\n        uint256 lpAmount = StakeCurveConvex(payable(fomulaBase)).balanceOf(address(this));\\n\\n        StakeCurveConvex(payable(fomulaBase)).withdraw(_isToken0, 0, lpAmount * tokenInfo[infoHash].weightsFomulaBase / poolsWeights[fomulaBase]);\\n\\n        uint256 tokenBalanceBase = IERC20(stablecoin).balanceOf(address(this)) - stablecoinTotal;\\n\\n        require(poolsBalances[fomulaBase] == 0, \\\"Should be invested first\\\");\\n        require(poolsWeights[fomulaBase] >= tokenInfo[infoHash].weightsFomulaBase, \\\"poolsWeightsBase insufficent\\\");\\n\\n        poolsWeights[fomulaBase] = poolsWeights[fomulaBase] - tokenInfo[infoHash].weightsFomulaBase;\\n\\n        if (poolsWeights[fomulaLottery] > tokenInfo[infoHash].weightsFomulaLottery) {\\n            poolsWeights[fomulaLottery] = poolsWeights[fomulaLottery] - BASE_WEIGHTS;\\n        }\\n\\n        contractInfo[_nft].weightsFomulaBase = contractInfo[_nft].weightsFomulaBase - tokenInfo[infoHash].weightsFomulaBase;\\n        contractInfo[_nft].weightsFomulaLottery = contractInfo[_nft].weightsFomulaLottery - BASE_WEIGHTS;\\n        contractInfo[_nft].amounts = contractInfo[_nft].amounts - 1;\\n\\n        tokenInfo[infoHash].weightsFomulaBase = tokenInfo[infoHash].weightsFomulaBase - tokenInfo[infoHash].weightsFomulaBase;\\n        tokenInfo[infoHash].weightsFomulaLottery = tokenInfo[infoHash].weightsFomulaLottery - BASE_WEIGHTS;\\n        tokenInfo[infoHash].amounts = tokenInfo[infoHash].amounts - 1;\\n        \\n        IERC721(_nft).safeTransferFrom(msg.sender, address(this), _tokenId);\\n        \\n        IERC20(stablecoin).safeTransfer(msg.sender, tokenBalanceBase);\\n\\n        uint256 lotteryRewardAmount = lotteryRewards[_nft][_tokenId];\\n\\n        if (lotteryRewardAmount > 0) {\\n            lotteryRewards[_nft][_tokenId] = 0;\\n\\n            IERC20(rewardToken).safeTransfer(msg.sender, lotteryRewardAmount);\\n        }\\n\\n        emit Redeem(_nft, _tokenId, tokenBalanceBase);\\n    }\\n\\n    function setPoolBalances(address pool, uint256 amount) external onlyOwner override {\\n        poolsBalances[pool] = amount;\\n    }\\n\\n    function investWithERC20(address pool, bool isToken0, uint256 minReceivedTokenAmountSwap) external onlyOwner override {\\n        uint256 amount = poolsBalances[pool];\\n        IERC20(stablecoin).safeApprove(pool, amount);\\n        poolsBalances[pool] = 0;\\n        StakeCurveConvex(payable(pool)).stake(isToken0, amount, minReceivedTokenAmountSwap);\\n    }\\n\\n    function getReward(address pool) external onlyOwner override {\\n        uint256 rewardsBefore = IERC20(rewardToken).balanceOf(address(this));\\n\\n        StakeCurveConvex(payable(pool)).getReward();\\n\\n        uint256 rewardsAfter = IERC20(rewardToken).balanceOf(address(this));\\n\\n        poolsTotalRewards[pool] = poolsTotalRewards[pool] + rewardsAfter - rewardsBefore;\\n    }\\n\\n    function setVRFConsumer(address vrf) external onlyOwner override {\\n        VRFConsumer = VRFv2Consumer(vrf);\\n    }\\n\\n    function getNFTTotalSupply(ERC721PayWithEther _nft) internal view returns (uint256) {\\n        return _nft.totalSupply();\\n    }\\n\\n    function getRandomWord(uint256 _index) internal view returns (uint256) {\\n        return VRFConsumer.s_randomWords(_index);\\n    }\\n\\n    function getRequestId() public view override returns (uint256) {\\n        return VRFConsumer.s_requestId();\\n    }\\n\\n    function setRandomPrizeWinners(address pool, uint256 totalWinner) external onlyOwner override {\\n        uint256 requestId = getRequestId();\\n        require(requestIds[requestId][pool] == false, \\\"requestId be used\\\");\\n\\n        uint256 totalCandidate = lotteryList.length;\\n        uint256 prizePerWinner = poolsTotalRewards[pool] > 0 ? poolsTotalRewards[pool] / totalWinner : 0;\\n\\n        uint256 prizeTotal;\\n        for (uint256 index = 0; index < totalWinner; index++) {\\n\\n            uint256 randomWord = getRandomWord(index);\\n            uint256 winnerIndex = randomWord % totalCandidate;\\n            bytes32 winnerInfoHash = lotteryList[winnerIndex];\\n            TokenLotteryInfo memory winnerInfo = tokenLotteryInfo[winnerInfoHash];\\n            bytes32 infoHash = keccak256(abi.encodePacked(winnerInfo.nft, winnerInfo.id));\\n\\n            if (tokenInfo[infoHash].weightsFomulaLottery > 0) {\\n                lotteryRewards[winnerInfo.nft][winnerInfo.id] = lotteryRewards[winnerInfo.nft][winnerInfo.id] + prizePerWinner;\\n                winnerBoard[requestId].push(winnerIndex);\\n                prizeTotal = prizeTotal + prizePerWinner;\\n                emit SelectWinner(winnerInfo.nft, winnerInfo.id, prizePerWinner);\\n            }\\n        }\\n\\n        poolsTotalRewards[pool] = poolsTotalRewards[pool] - prizeTotal;\\n        requestIds[requestId][pool] = true;\\n    }\\n    function getWinnerBoard(uint256 requestId) external view override returns (uint256[] memory) {\\n        return winnerBoard[requestId];\\n    }\\n\\n    function setHotpotPoolToCurvePool(address hotpotPoolAddress, address curvePoolAddress) external onlyOwner override {\\n        hotpotPoolToCurvePool[hotpotPoolAddress] = curvePoolAddress;\\n    }\\n\\n    function getHotpotPoolToCurvePool(address hotpotPoolAddress) external view override returns (address) {\\n        return hotpotPoolToCurvePool[hotpotPoolAddress];\\n    }\\n\\n    function setRedeemableTime(uint256 timestamp) external onlyOwner override {\\n        redeemableTime = timestamp;\\n    }\\n\\n    function getTokenInfo(address _nft, uint256 _id) external view override returns (NFTTokenInfo memory) {\\n        bytes32 infoHash = keccak256(abi.encodePacked(_nft, _id));\\n        return tokenInfo[infoHash];\\n    }\\n\\n    function redeemAll(address _pool, bool _isToken0) external onlyOwner override {\\n\\n        uint256 stablecoinTotal = IERC20(stablecoin).balanceOf(address(this));\\n        uint256 lpAmount = StakeCurveConvex(payable(_pool)).balanceOf(address(this));\\n\\n        StakeCurveConvex(payable(_pool)).withdraw(_isToken0, 0, lpAmount);\\n\\n        uint256 tokenBalanceBase = IERC20(stablecoin).balanceOf(address(this)) - stablecoinTotal;\\n\\n        require(poolsBalances[_pool] == 0, \\\"Should be invested first\\\");\\n\\n        IERC20(stablecoin).safeTransfer(msg.sender, tokenBalanceBase);\\n\\n        emit RedeemAll(_pool, tokenBalanceBase);\\n    }\\n\\n    function redeemAllCollection(address _nft, bool _isToken0) external onlyOwner override {\\n\\n        uint256 stablecoinTotal = IERC20(stablecoin).balanceOf(address(this));\\n        address fomulaBase =  contractInfo[_nft].poolAddressBase;\\n\\n        require(poolsBalances[fomulaBase] == 0, \\\"Should be invested first\\\");\\n\\n        uint256 lpAmount = StakeCurveConvex(payable(fomulaBase)).balanceOf(address(this));\\n        uint256 nftWeightTotal = contractInfo[_nft].weightsFomulaBase;\\n\\n        StakeCurveConvex(payable(fomulaBase)).withdraw(_isToken0, 0, lpAmount * nftWeightTotal / poolsWeights[fomulaBase]);\\n\\n        uint256 tokenBalanceBase = IERC20(stablecoin).balanceOf(address(this)) - stablecoinTotal;\\n\\n        IERC20(stablecoin).safeTransfer(msg.sender, tokenBalanceBase);\\n\\n        poolsWeights[fomulaBase] = poolsWeights[fomulaBase] - nftWeightTotal;\\n        contractInfo[_nft].weightsFomulaBase = 0;\\n        contractInfo[_nft].weightsFomulaLottery = 0;\\n        contractIsDisabledForDeposit[_nft] = true;\\n        emit RedeemAllCollection(_nft, tokenBalanceBase);\\n    }\\n\\n    event SelectWinner(address _nft, uint256 _tokenId, uint256 _amounts);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseGateway {\\n\\n    function setNftData(address _nft, address _poolA, address _poolB, address _poolC, bool _increaseable, uint256 _delta) external;\\n\\n    function deposit(uint256 _tokenId, uint256 _amount) external payable;\\n\\n    function batchDeposit(uint256 _idFrom, uint256 _offset) external payable;\\n\\n    function depositWithERC20(uint256 _tokenId, uint256 _amount, address _depositToken, uint256 _depositTokenAmounts) external;\\n\\n    function batchDepositWithERC20(uint256 _idFrom, uint256 _offset, address _depositToken, uint256 _depositTokenAmounts) external;\\n\\n    function baseValue(address _nft, uint256 _tokenId, uint256 _amount) external view returns (uint256, uint256);\\n\\n    function redeem(address _nft, uint256 _tokenId, uint256 _amount) external;\\n\\n    function withdraw(address _to) external;\\n\\n    function withdrawWithERC20(address _token, address _to) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3SwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3SwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    function refundETH() external payable;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWeth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\ninterface IWETH {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/BaseGatewayEthereumV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./upgrade/Pausable.sol\\\";\\nimport \\\"./upgrade/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IUniswapV3SwapRouter.sol\\\";\\nimport \\\"./interfaces/IWeth.sol\\\";\\nimport \\\"./interfaces/IBaseGatewayEthereumV2.sol\\\";\\n\\nabstract contract BaseGatewayEthereumV2 is ERC721Holder, ERC1155Holder, ReentrancyGuard, Pausable, UUPSUpgradeable, IBaseGatewayEthereumV2 {\\n    using SafeERC20 for IERC20;\\n    //https://stackoverflow.com/questions/69706835/how-to-check-if-the-token-on-opensea-is-erc721-or-erc1155-using-node-js\\n    bytes4 internal constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 internal constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n    uint256 public constant BASE_WEIGHTS = 1000000;\\n    uint256 internal constant DEFAULT_SWAP_DEADLINE_IN_SECOND = 60;\\n\\n    struct NFTContractInfo {\\n        // list of weights by fomula\\n        uint256 weightsFomulaBase;\\n        uint256 weightsFomulaLottery;\\n        // pool address for each fomula\\n        address poolAddressBase;\\n        address poolAddressLottery;\\n        uint256 amounts; // total deposit token amount\\n        bool increaseable; // applying for the secondary markets transaction weights increasement or not\\n        uint256 delta; // percentage for each valid transaction increaced\\n        bool active;\\n    }\\n\\n    // key was packed by contract address and token Id\\n    mapping(bytes32 => NFTTokenInfo) public tokenInfo;\\n    mapping(bytes32 => uint256) public tokenRewardBalance; // for periodic settlement of lottery reward token\\n    mapping(address => NFTContractInfo) public contractInfo;\\n    mapping(address => uint256) public poolsWeights;\\n    mapping(address => uint256) public poolsBalances;\\n\\n    string public name;\\n    address public wrapperNativeToken;\\n    address public stablecoin;\\n    address public rewardToken;\\n    address public operator;\\n    IUniswapV3SwapRouter public router;\\n\\n    function initialize(string memory _name, address _wrapperNativeToken, address _stablecoin, address _rewardToken, address _owner, IUniswapV3SwapRouter _router, uint256 _redeemableTime) virtual external {}\\n\\n    function implementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    function withdraw(address _to) external override onlyOwner {\\n        uint256 balance = address(this).balance;\\n\\n        require(payable(_to).send(balance), \\\"Fail to withdraw\\\");\\n\\n        emit Withdraw(_to, balance);\\n    }\\n\\n    function withdrawWithERC20(address _token, address _to) external override onlyOwner {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n\\n        IERC20(_token).transfer(_to, balance);\\n\\n        emit WithdrawERC20(_token, _to, balance);\\n    }\\n\\n    function convertExactWEthToStablecoin(uint256 amountIn, uint256 amountOutMinimum) internal returns (uint256) {\\n        require(msg.value > 0, \\\"Must pass non 0 ETH amount\\\");\\n        \\n        uint256 deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\\n        address tokenIn = wrapperNativeToken;\\n        address tokenOut = stablecoin;\\n        uint24 fee = 3000;\\n        address recipient = address(this);\\n        uint160 sqrtPriceLimitX96 = 0;\\n\\n        IUniswapV3SwapRouter.ExactInputSingleParams memory params = IUniswapV3SwapRouter.ExactInputSingleParams(\\n            tokenIn,\\n            tokenOut,\\n            fee,\\n            recipient,\\n            deadline,\\n            amountIn,\\n            amountOutMinimum,\\n            sqrtPriceLimitX96\\n        );\\n        \\n        uint256 output = router.exactInputSingle(params);\\n        return output;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal view override onlyOwner {}\\n\\n    modifier supportInterface(address _nft) {\\n        require(IERC721(_nft).supportsInterface(INTERFACE_ID_ERC721), \\\"Address is not ERC1155 or ERC721\\\");\\n        _;\\n    }\\n\\n    event Withdraw(address _to, uint256 balance);\\n    event WithdrawERC20(address _token, address _to, uint256 balance);\\n    event Deposit(address _nft, uint256 _tokenId, uint256 _value);\\n    event Redeem(address _nft, uint256 _tokenId, uint256 _value);\\n    event RedeemAll(address _pool, uint256 _value);\\n    event RedeemAllCollection(address _nft, uint256 _value);\\n}\"\r\n    },\r\n    \"contracts/hotpot/StakeCurveConvex.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../upgrade/Pausable.sol\\\";\\nimport \\\"../upgrade/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IDepositCompound.sol\\\";\\nimport \\\"./interfaces/IConvexBaseRewardPool.sol\\\";\\nimport \\\"./interfaces/IConvexBooster.sol\\\";\\nimport \\\"./interfaces/IConverterUniV3.sol\\\";\\nimport \\\"../interfaces/IWeth.sol\\\";\\n\\n// Modified from https://docs.synthetix.io/contracts/source/contracts/stakingrewards\\n/// @title A wrapper contract over Convex Booster and BaseRewardPool contract that allows single asset in/out.\\n/// 1. User provide token0 or token1\\n/// 2. contract converts half to the other token and provide liquidity on Curve\\n/// 3. stake LP token via Convex Booster contract\\n/// @dev Be aware that staking entry is Convex Booster contract while withdraw/getReward entry is BaseRewardPool contract.\\n/// @notice Asset tokens are token0 and token1. Staking token is the LP token of token0/token1.\\ncontract StakeCurveConvex is ReentrancyGuard, Pausable, UUPSUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    struct BalanceDiff {\\n        uint256 balBefore;\\n        uint256 balAfter;\\n        uint256 balDiff;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    string public name;\\n    uint256 public pid; // Pool ID in Convex Booster\\n    IConverterUniV3 public converter;\\n    IERC20 public lp;\\n    IERC20 public token0;\\n    IERC20 public token1;\\n    IERC20 public crv;\\n    IERC20 public cvx;\\n    IERC20 public BCNT;\\n\\n    IDepositCompound public curveDepositCompound;\\n    IConvexBooster public convexBooster;\\n    IConvexBaseRewardPool public convexBaseRewardPool;\\n\\n    /// @dev Piggyback on BaseRewardPool' reward accounting\\n    mapping(address => uint256) internal _userRewardPerTokenPaid;\\n    mapping(address => uint256) internal _rewards;\\n\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n\\n    uint256 public bcntRewardAmount;\\n    address public operator;\\n\\n    bytes public cvxToBCNTUniV3SwapPath; // e.g., CVX -> WETH -> BCNT\\n    bytes public crvToBCNTUniV3SwapPath; // e.g., CRV -> WETH -> BCNT\\n\\n    /* ========== FALLBACKS ========== */\\n\\n    receive() external payable {}\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        string memory _name,\\n        uint256 _pid,\\n        address _owner,\\n        address _operator,\\n        IConverterUniV3 _converter,\\n        address _curveDepositCompound,\\n        address _convexBooster,\\n        address _convexBaseRewardPool,\\n        address _BCNT\\n    ) external {\\n        require(keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(\\\"\\\")), \\\"Already initialized\\\");\\n        super.initializePausable(_owner);\\n        super.initializeReentrancyGuard();\\n\\n        name = _name;\\n        pid = _pid;\\n        operator = _operator;\\n        converter = _converter;\\n        curveDepositCompound = IDepositCompound(_curveDepositCompound);\\n        lp = IERC20(curveDepositCompound.token());\\n        token0 = IERC20(curveDepositCompound.underlying_coins(0));\\n        token1 = IERC20(curveDepositCompound.underlying_coins(1));\\n        convexBooster = IConvexBooster(_convexBooster);\\n        convexBaseRewardPool = IConvexBaseRewardPool(_convexBaseRewardPool);\\n        crv = IERC20(convexBaseRewardPool.rewardToken());\\n        require(address(convexBooster.crv()) == address(crv));\\n        cvx = IERC20(convexBooster.minter());\\n        BCNT = IERC20(_BCNT);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @dev Get the implementation contract of this proxy contract.\\n    /// Only to be used on the proxy contract. Otherwise it would return zero address.\\n    function implementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice Get the reward share earned by specified account.\\n    function _share(address account) public view returns (uint256) {\\n        uint256 rewardPerToken = convexBaseRewardPool.rewardPerToken();\\n        return (_balances[account] * (rewardPerToken - _userRewardPerTokenPaid[account]) / (1e18)) + _rewards[account];\\n    }\\n\\n    /// @notice Get the total reward share in this contract.\\n    /// @notice Total reward is tracked with `_rewards[address(this)]` and `_userRewardPerTokenPaid[address(this)]`\\n    function _shareTotal() public view returns (uint256) {\\n        uint256 rewardPerToken = convexBaseRewardPool.rewardPerToken();\\n        return (_totalSupply * (rewardPerToken - _userRewardPerTokenPaid[address(this)]) / (1e18)) + _rewards[address(this)];\\n    }\\n\\n    /// @notice Get the compounded LP amount earned by specified account.\\n    function earned(address account) public view returns (uint256) {\\n        uint256 rewardsShare;\\n        if (account == address(this)){\\n            rewardsShare = _shareTotal();\\n        } else {\\n            rewardsShare = _share(account);\\n        }\\n\\n        uint256 earnedCompoundedLPAmount;\\n        if (rewardsShare > 0) {\\n            uint256 totalShare = _shareTotal();\\n            // Earned compounded LP amount is proportional to how many rewards this account has\\n            // among total rewards\\n            earnedCompoundedLPAmount = bcntRewardAmount * rewardsShare / totalShare;\\n        }\\n        return earnedCompoundedLPAmount;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function _convertAndAddLiquidity(\\n        bool isToken0,\\n        bool shouldTransferFromSender, \\n        uint256 amount,\\n        uint256 minLiqAddedAmount\\n    ) internal returns (uint256 lpAmount) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        uint256 lpAmountBefore = lp.balanceOf(address(this));\\n        uint256 token0AmountBefore = token0.balanceOf(address(this));\\n        uint256 token1AmountBefore = token1.balanceOf(address(this));\\n\\n        // Add liquidity\\n        uint256[2] memory uamounts;\\n        if (isToken0) {\\n            if (shouldTransferFromSender) {\\n                token0.safeTransferFrom(msg.sender, address(this), amount);\\n            }\\n            uamounts[0] = amount;\\n            uamounts[1] = 0;\\n            token0.safeApprove(address(curveDepositCompound), amount);\\n            curveDepositCompound.add_liquidity(uamounts, minLiqAddedAmount);\\n        } else {\\n            if (shouldTransferFromSender) {\\n                token1.safeTransferFrom(msg.sender, address(this), amount);\\n            }\\n            uamounts[0] = 0;\\n            uamounts[1] = amount;\\n            token1.safeApprove(address(curveDepositCompound), amount);\\n            curveDepositCompound.add_liquidity(uamounts, minLiqAddedAmount);\\n        }\\n\\n        uint256 lpAmountAfter = lp.balanceOf(address(this));\\n        uint256 token0AmountAfter = token0.balanceOf(address(this));\\n        uint256 token1AmountAfter = token1.balanceOf(address(this));\\n\\n        lpAmount = (lpAmountAfter - lpAmountBefore);\\n\\n        // Return leftover token to msg.sender\\n        if (shouldTransferFromSender && (token0AmountAfter - token0AmountBefore) > 0) {\\n            token0.safeTransfer(msg.sender, (token0AmountAfter - token0AmountBefore));\\n        }\\n        if (shouldTransferFromSender && (token1AmountAfter - token1AmountBefore) > 0) {\\n            token1.safeTransfer(msg.sender, (token1AmountAfter - token1AmountBefore));\\n        }\\n    }\\n\\n    /// @dev Be aware that staking entry is Convex Booster contract while withdraw/getReward entry is BaseRewardPool contract.\\n    /// This is because staking token for BaseRewardPool is the deposit token that can only minted by Booster.\\n    /// Booster.deposit() will do some processing and stake into BaseRewardPool for us.\\n    function _stake(address staker, uint256 lpAmount) internal {\\n        lp.safeApprove(address(convexBooster), lpAmount);\\n        convexBooster.deposit(\\n            pid,\\n            lpAmount,\\n            true // True indicate to also stake into BaseRewardPool\\n        );\\n        _totalSupply = _totalSupply + lpAmount;\\n        _balances[staker] = _balances[staker] + lpAmount;\\n        emit Staked(staker, lpAmount);\\n    }\\n\\n    /// @notice Taken token0 or token1 in, provide liquidity in Curve and stake\\n    /// the LP token into Convex contract. Leftover token0 or token1 will be returned to msg.sender.\\n    /// @param isToken0 Determine if token0 is the token msg.sender going to use for staking, token1 otherwise\\n    /// @param amount Amount of token0 or token1 to stake\\n    /// @param minLiqAddedAmount The minimum amount of LP token received when adding liquidity\\n    function stake(\\n        bool isToken0,\\n        uint256 amount,\\n        uint256 minLiqAddedAmount\\n    ) public nonReentrant notPaused updateReward(msg.sender) {\\n        uint256 lpAmount = _convertAndAddLiquidity(isToken0, true, amount, minLiqAddedAmount);\\n        _stake(msg.sender, lpAmount);\\n    }\\n\\n    /// @notice Take LP tokens and stake into Convex contract.\\n    /// @param lpAmount Amount of LP tokens to stake\\n    function stakeWithLP(uint256 lpAmount) public nonReentrant notPaused updateReward(msg.sender) {\\n        lp.safeTransferFrom(msg.sender, address(this), lpAmount);\\n        _stake(msg.sender, lpAmount);\\n    }\\n\\n    function _removeLP(IERC20 token, bool toToken0, uint256 amount, uint256 minAmountReceived) internal returns (uint256) {\\n        uint256 balBefore = token.balanceOf(address(this));\\n\\n        lp.safeApprove(address(curveDepositCompound), amount);\\n        curveDepositCompound.remove_liquidity_one_coin(\\n            amount,\\n            toToken0 ? int128(0) : int128(1),\\n            minAmountReceived,\\n            true // Donate dust\\n        );\\n        uint256 balAfter = token.balanceOf(address(this));\\n        return balAfter - balBefore;\\n    }\\n\\n    /// @notice Withdraw stake from BaseRewardPool, remove liquidity and convert one asset to another.\\n    /// @param toToken0 Determine to convert all to token0 or token 1\\n    /// @param minAmountReceived The minimum amount of token0 or token1 received when removing liquidity\\n    /// @param amount Amount of stake to withdraw\\n    function withdraw(\\n        bool toToken0,\\n        uint256 minAmountReceived,\\n        uint256 amount\\n    ) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        // Update records:\\n        // substract withdrawing LP amount from total LP amount staked\\n        _totalSupply = (_totalSupply - amount);\\n        // substract withdrawing LP amount from user's balance\\n        _balances[msg.sender] = (_balances[msg.sender] - amount);\\n\\n        // Withdraw and unwrap to LP token\\n        convexBaseRewardPool.withdrawAndUnwrap(\\n            amount,\\n            false // No need to getReward when withdraw\\n        );\\n\\n        IERC20 token = toToken0 ? token0 : token1;\\n        uint256 receivedTokenAmount = _removeLP(token, toToken0, amount, minAmountReceived);\\n        token.safeTransfer(msg.sender, receivedTokenAmount);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraw LP tokens from BaseRewardPool contract and return to user.\\n    /// @param lpAmount Amount of LP tokens to withdraw\\n    function withdrawWithLP(uint256 lpAmount) public nonReentrant notPaused updateReward(msg.sender) {\\n        require(lpAmount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        // Update records:\\n        // substract withdrawing LP amount from total LP amount staked\\n        _totalSupply = (_totalSupply - lpAmount);\\n        // substract withdrawing LP amount from user's balance\\n        _balances[msg.sender] = (_balances[msg.sender] - lpAmount);\\n\\n        // Withdraw and unwrap to LP token\\n        convexBaseRewardPool.withdrawAndUnwrap(\\n            lpAmount,\\n            false // No need to getReward when withdraw\\n        );\\n        lp.safeTransfer(msg.sender, lpAmount);\\n\\n        emit Withdrawn(msg.sender, lpAmount);\\n    }\\n\\n    /// @notice Transfer BCNT reward to user.\\n    function getReward() public updateReward(msg.sender)  {        \\n        uint256 reward = _rewards[msg.sender];\\n        uint256 totalReward = _rewards[address(this)];\\n        if (reward > 0) {\\n            // userbcntRewardAmount: based on user's reward and totalReward,\\n            // determine how many BCNT reward can user take away.\\n            // NOTE: totalReward = _rewards[address(this)];\\n            uint256 userbcntRewardAmount = bcntRewardAmount * reward / totalReward;\\n\\n            // Update records:\\n            // substract user's rewards from totalReward\\n            _rewards[msg.sender] = 0;\\n            _rewards[address(this)] = (totalReward - reward);\\n            // substract userbcntRewardAmount from bcntRewardAmount\\n            bcntRewardAmount = (bcntRewardAmount - userbcntRewardAmount);\\n\\n            BCNT.safeTransfer(msg.sender, userbcntRewardAmount);\\n\\n            emit RewardPaid(msg.sender, userbcntRewardAmount);\\n        }\\n    }\\n\\n    /// @notice Withdraw all stake from BaseRewardPool, remove liquidity, get the reward out and convert one asset to another.\\n    /// @param toToken0 Determine to convert all to token0 or token 1\\n    /// @param minAmountReceived The minimum amount of token0 or token1 received when removing liquidity\\n    function exit(bool toToken0, uint256 minAmountReceived) external {\\n        withdraw(toToken0, minAmountReceived, _balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /// @notice Withdraw all stake from BaseRewardPool, get the reward out and convert one asset to another.\\n    function exitWithLP() external {\\n        withdrawWithLP(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice Get all reward out from BaseRewardPool contract, convert rewards to BCNT.\\n    /// @param minCrvToBCNTSwap The minimum amount of BCNT received when swapping CRV to BCNT\\n    /// @param minCvxToBCNTSwap The minimum amount of BCNT received when swapping CVX to BCNT\\n    function accrueBCNT(\\n        uint256 minCrvToBCNTSwap,\\n        uint256 minCvxToBCNTSwap\\n    ) external nonReentrant updateReward(address(0)) onlyOperator {\\n        // getReward will get us CRV and CVX\\n        convexBaseRewardPool.getReward(address(this), true);\\n\\n        BalanceDiff memory bcntAmountDiff;\\n        bcntAmountDiff.balBefore = BCNT.balanceOf(address(this));\\n\\n        // Try convert CRV to BCNT\\n        uint256 crvBalance = crv.balanceOf(address(this));\\n        if (crvBalance > 0) {\\n            crv.approve(address(converter), crvBalance);\\n            // try converter.convert(address(crv), crvBalance, 100, address(token0), minCrvToBCNTSwap, address(this)) {\\n            try converter.convertUniV3(address(crv), crvBalance, 100, address(BCNT), minCrvToBCNTSwap, address(this), crvToBCNTUniV3SwapPath) {\\n\\n            } catch Error(string memory reason) {\\n                emit ConvertFailed(address(crv), address(BCNT), crvBalance, reason, bytes(\\\"\\\"));\\n            } catch (bytes memory lowLevelData) {\\n                emit ConvertFailed(address(crv), address(BCNT), crvBalance, \\\"\\\", lowLevelData);\\n            }\\n        }\\n        // Try convert CVX to BCNT\\n        uint256 cvxBalance = cvx.balanceOf(address(this));\\n        if (cvxBalance > 0) {\\n            cvx.approve(address(converter), cvxBalance);\\n            try converter.convertUniV3(address(cvx), cvxBalance, 100, address(BCNT), minCvxToBCNTSwap, address(this), cvxToBCNTUniV3SwapPath) {\\n\\n            } catch Error(string memory reason) {\\n                emit ConvertFailed(address(cvx), address(BCNT), cvxBalance, reason, bytes(\\\"\\\"));\\n            } catch (bytes memory lowLevelData) {\\n                emit ConvertFailed(address(cvx), address(BCNT), cvxBalance, \\\"\\\", lowLevelData);\\n            }\\n        }\\n\\n        bcntAmountDiff.balAfter = BCNT.balanceOf(address(this));\\n        bcntAmountDiff.balDiff = (bcntAmountDiff.balAfter - bcntAmountDiff.balBefore);\\n        bcntRewardAmount = bcntRewardAmount + bcntAmountDiff.balDiff;\\n\\n        emit Compounded(bcntAmountDiff.balDiff);\\n    }\\n\\n    function addBCNTReward(uint256 amount) external onlyOperator {\\n        BCNT.safeTransferFrom(operator, address(this), amount);\\n        bcntRewardAmount = bcntRewardAmount + amount;\\n    }\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAddress != address(lp), \\\"Cannot withdraw the staking token\\\");\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function updateCVXToBCNTUniV3SwapPath(bytes calldata newPath) external onlyOperator {\\n        cvxToBCNTUniV3SwapPath = newPath;\\n\\n        emit UpdateCVXToBCNTUniV3SwapPath(newPath);\\n    }\\n\\n    function updateCRVToBCNTUniV3SwapPath(bytes calldata newPath) external onlyOperator {\\n        crvToBCNTUniV3SwapPath = newPath;\\n\\n        emit UpdateCRVToBCNTUniV3SwapPath(newPath);\\n    }\\n\\n    function updateOperator(address newOperator) external onlyOwner {\\n        operator = newOperator;\\n\\n        emit UpdateOperator(newOperator);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal view override onlyOwner {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        uint256 rewardPerTokenStored = convexBaseRewardPool.rewardPerToken();\\n        if (account != address(0)) {\\n            _rewards[account] = _share(account);\\n            _userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n\\n            // Use _rewards[address(this)] to keep track of rewards earned by all accounts.\\n            _rewards[address(this)] = _shareTotal();\\n            _userRewardPerTokenPaid[address(this)] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Only the contract operator may perform this action\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event UpdateCVXToBCNTUniV3SwapPath(bytes newPath);\\n    event UpdateCRVToBCNTUniV3SwapPath(bytes newPath);\\n    event UpdateOperator(address newOperator);\\n    event Staked(address indexed user, uint256 amount);\\n    event ConvertFailed(address fromToken, address toToken, uint256 fromAmount, string reason, bytes lowLevelData);\\n    event Compounded(uint256 bcntAmount);\\n    event RewardPaid(address indexed user, uint256 rewardLPAmount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event Recovered(address token, uint256 amount);\\n}\"\r\n    },\r\n    \"contracts/LotteryVRF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// An example of a consumer contract that relies on a subscription for funding.\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\ncontract VRFv2Consumer is VRFConsumerBaseV2 {\\n  VRFCoordinatorV2Interface private COORDINATOR;\\n\\n  // Your subscription ID.\\n  uint64 private s_subscriptionId;\\n\\n  // Rinkeby coordinator. For other networks,\\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n  address public vrfCoordinator;\\n\\n  // The gas lane to use, which specifies the maximum gas price to bump to.\\n  // For a list of available gas lanes on each network,\\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n  bytes32 public keyHash;\\n\\n  // Depends on the number of requested values that you want sent to the\\n  // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n  // so 100,000 is a safe default for this example contract. Test and adjust\\n  // this limit based on the network that you select, the size of the request,\\n  // and the processing of the callback request in the fulfillRandomWords()\\n  // function.\\n  uint32 private callbackGasLimit;\\n\\n  uint16 private requestConfirmations;\\n\\n  // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n  uint32 private numWords;\\n\\n  uint256[] public s_randomWords;\\n  uint256 public s_requestId;\\n  address public s_owner;\\n\\n  constructor(\\n    uint64 subscriptionId,\\n    address _vrfCoordinator,\\n    bytes32 _keyHash,\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) VRFConsumerBaseV2(_vrfCoordinator) {\\n    COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n    s_owner = msg.sender;\\n    s_subscriptionId = subscriptionId;\\n    vrfCoordinator = _vrfCoordinator;\\n    keyHash = _keyHash;\\n    callbackGasLimit =_callbackGasLimit;\\n    requestConfirmations = _requestConfirmations;\\n    numWords = _numWords;\\n  }\\n\\n  // Assumes the subscription is funded sufficiently.\\n  function requestRandomWords() external onlyOwner {\\n    // Will revert if subscription is not set and funded.\\n    s_requestId = COORDINATOR.requestRandomWords(\\n      keyHash,\\n      s_subscriptionId,\\n      requestConfirmations,\\n      callbackGasLimit,\\n      numWords\\n    );\\n  }\\n  \\n  function fulfillRandomWords(\\n    uint256, /* requestId */\\n    uint256[] memory randomWords\\n  ) internal override {\\n    s_randomWords = randomWords;\\n  }\\n\\n  function updateKeyHash(bytes32 newKeyHash) external onlyOwner {\\n    keyHash = newKeyHash;\\n  }\\n  function updateSubscriptionId(uint64 newId) external onlyOwner {\\n    s_subscriptionId = newId;\\n  }\\n  function updateRequestConfirmations(uint16 newConfirmations) external onlyOwner {\\n    requestConfirmations = newConfirmations;\\n  }\\n  function updateCallbackGasLimit(uint32 newGasLimit) external onlyOwner {\\n    callbackGasLimit = newGasLimit;\\n  }\\n  function updateNumWords(uint32 newNumWords) external onlyOwner {\\n    numWords = newNumWords;\\n  }\\n\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    s_owner = newOwner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == s_owner, \\\"Only the contract owner may perform this action\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC721PayWithEther.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Created by Yu-Chen Song on 2022/9/16 https://www.linkedin.com/in/yu-chen-song-08892a77/\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IBaseGatewayEthereum.sol\\\";\\nimport \\\"./IFactoryERC721PayWithEther.sol\\\";\\n\\ncontract ERC721PayWithEther is IFactoryERC721PayWithEther, Ownable, ERC721Enumerable {\\n    using MerkleProof for bytes32[];\\n\\n    uint256 public constant MAX_TOTAL_TOKEN_MINT = 250;\\n\\n    uint256 public latestMintedId;\\n\\n    bytes32 immutable private PRE_WHITELIST;\\n\\n    uint256 constant public PRICE = 0.1 ether;\\n\\n    struct WhitelistData {\\n        bool isWhitelistAddress;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => WhitelistData) public whitelist;\\n\\n    uint256 constant public WHITELIST_MINT_LIMIT = 10;\\n\\n    uint256 constant private BASE_VALUE_PERCENTAGE = 70;\\n\\n    uint32 constant public WHITELIST_MINT_TIME = 1664704800;\\n    uint32 constant public MINT_TIME = 1664715600;\\n\\n    bool private isBlindBoxOpened = false;\\n    string private BLIND_BOX_URI;\\n\\n    bool private isMetadataFrozen = false;\\n    string private contractDataURI;\\n\\n    string private metadataURI;\\n\\n    IBaseGatewayEthereum public gateway;\\n\\n    IERC721 constant public DEMI_HUMAN_NFT = IERC721(0xa6916545A56f75ACD43fb6A1527A73a41d2b4081);\\n    IERC721 constant public CRYPTO_HODLERS_NFT = IERC721(0xe12a2A0Fb3fB5089A498386A734DF7060c1693b8);\\n    IERC721 constant public _8SIAN_NFT = IERC721(0x198478F870d97D62D640368D111b979d7CA3c38F);\\n\\n    event Withdraw(address _address, uint256 balance);\\n    event Initialize(IBaseGatewayEthereum _gateway);\\n    event SetContractDataURI(string _contractDataURI);\\n    event SetURI(string _uri);\\n    event MetadataFrozen();\\n    event BlindBoxOpened();\\n    event AddWhitelist(address[] _addresses);\\n    event RemoveWhitelist(address[] _addresses);\\n    event Mint(address _address, uint256 tokenId);\\n\\n    constructor(\\n        string memory _contractDataURI,\\n        string memory _blindBoxURI,\\n        string memory _uri,\\n        bytes32 _whitelist\\n    ) ERC721(\\\"Demi Human NFT\\\", \\\"DEM\\\") {\\n        require(keccak256(abi.encodePacked(_contractDataURI)) != keccak256(abi.encodePacked(\\\"\\\")), \\\"init from empty uri\\\");\\n        require(keccak256(abi.encodePacked(_blindBoxURI)) != keccak256(abi.encodePacked(\\\"\\\")), \\\"init from empty uri\\\");\\n        require(_whitelist != 0, \\\"init from the zero\\\");\\n        contractDataURI = _contractDataURI;\\n        BLIND_BOX_URI = _blindBoxURI;\\n        metadataURI = _uri;\\n        PRE_WHITELIST = _whitelist;\\n    }\\n\\n    function _initialized() internal view returns (bool) {\\n        return !(address(gateway) == address(0));\\n    }\\n\\n    function initialize(IBaseGatewayEthereum _gateway) onlyOwner external {\\n        require(!_initialized(), \\\"Already initialized\\\");\\n        require(address(_gateway) != address(0), \\\"init from the zero address\\\");\\n        gateway = _gateway;\\n        emit Initialize(_gateway);\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        if (isBlindBoxOpened) {\\n            return string(abi.encodePacked(metadataURI, Strings.toString(_tokenId), \\\".json\\\"));\\n        }\\n        return BLIND_BOX_URI;\\n    }\\n\\n    /// @dev https://docs.opensea.io/docs/contract-level-metadata\\n    function contractURI() public view returns (string memory) {\\n        return contractDataURI;\\n    }\\n\\n    function setContractDataURI(string memory _contractDataURI) external onlyOwner {\\n        contractDataURI = _contractDataURI;\\n        emit SetContractDataURI(_contractDataURI);\\n    }\\n\\n    function setURI(string memory _uri) external onlyOwner {\\n        require(!isMetadataFrozen, \\\"URI Already Frozen\\\");\\n        metadataURI = _uri;\\n        emit SetURI(_uri);\\n    }\\n\\n    function metadataFrozen() external onlyOwner {\\n        isMetadataFrozen = true;\\n        emit MetadataFrozen();\\n    }\\n\\n    function blindBoxOpened() external onlyOwner {\\n        isBlindBoxOpened = true;\\n        emit BlindBoxOpened();\\n    }\\n\\n    function withdraw(address _address, uint256 _amount) external onlyOwner override {\\n        require(_amount > 0, \\\"Amount cannot be 0\\\");\\n        require(payable(_address).send(_amount), \\\"Fail to withdraw\\\");\\n        emit Withdraw(_address, _amount);\\n    }\\n\\n    function addWhitelist(address[] memory _addresses) external onlyOwner {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            address _address = _addresses[i];\\n            whitelist[_address].isWhitelistAddress = true;\\n        }\\n        emit AddWhitelist(_addresses);\\n    }\\n\\n    function removeWhitelist(address[] memory _addresses) external onlyOwner {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            address _address = _addresses[i];\\n            whitelist[_address].isWhitelistAddress = false;\\n        }\\n        emit RemoveWhitelist(_addresses);\\n    }\\n\\n    function mint(uint256 _numberTokens, bytes32[] memory proof) hasInitialized canMint(_numberTokens) payable external override {\\n\\n        require(DEMI_HUMAN_NFT.balanceOf(msg.sender) > 0 || CRYPTO_HODLERS_NFT.balanceOf(msg.sender) > 0 || _8SIAN_NFT.balanceOf(msg.sender) > 0, \\\"You not own specified NFT\\\");\\n\\n        if(block.timestamp < MINT_TIME) {\\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n            WhitelistData storage data = whitelist[msg.sender];\\n            data.amount += _numberTokens;\\n            \\n            require(block.timestamp >= WHITELIST_MINT_TIME, \\\"Not arrive whitelist mint time\\\");\\n            require(data.isWhitelistAddress || proof.verify(PRE_WHITELIST, leaf), \\\"Not in whitelist\\\");\\n            require(data.amount <= WHITELIST_MINT_LIMIT, \\\"Total mint amount big than whitelist mint limit\\\");\\n        }\\n\\n        uint256 amount = _numberTokens * PRICE;\\n        require(amount <= msg.value, \\\"Sent value is not enough\\\");\\n\\n        uint256 id = latestMintedId + 1;\\n        uint256 investPrice = amount * BASE_VALUE_PERCENTAGE / 100;\\n        gateway.batchDeposit{value : investPrice}(id, _numberTokens);\\n        latestMintedId += _numberTokens;\\n\\n        for (uint256 i = 0; i < _numberTokens; i++) {\\n            _safeMint(msg.sender, id + i);\\n            emit Mint(msg.sender, id + i);\\n        }\\n    }\\n\\n    modifier hasInitialized() {\\n        require(_initialized(), \\\"Not initialized yet!\\\");\\n        _;\\n    }\\n\\n    modifier canMint(uint256 _amount) {\\n        require(_amount > 0, \\\"Number tokens cannot be 0\\\");\\n        require(latestMintedId + _amount <= MAX_TOTAL_TOKEN_MINT, \\\"Over maximum minted amount\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/compound/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurvePool {\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/upgrade/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Owned.sol\\\";\\n\\n// Modified from https://docs.synthetix.io/contracts/source/contracts/pausable\\ncontract Pausable is Owned {\\n    uint public lastPauseTime;\\n    bool public paused;\\n\\n    /// @dev Change constructor to initialize function for upgradeable contract\\n    function initializePausable(address _owner) internal {\\n        super.initializeOwner(_owner);\\n\\n        require(owner != address(0), \\\"Owner must be set\\\");\\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // If applicable, set the last pause time.\\n        if (paused) {\\n            lastPauseTime = block.timestamp;\\n        }\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        require(!paused, \\\"This action cannot be performed while the contract is paused\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/upgrade/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\\n * available, which can be aplied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev counter to allow mutex lock with only one SSTORE operation\\n    uint256 private _guardCounter;\\n\\n    /// @dev Change constructor to initialize function for upgradeable contract\\n    function initializeReentrancyGuard() internal {\\n        require(_guardCounter == 0, \\\"Already initialized\\\");\\n        // The counter starts at one to prevent changing it from zero to a non-zero\\n        // value, which is a more expensive operation.\\n        _guardCounter = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _guardCounter += 1;\\n        uint256 localCounter = _guardCounter;\\n        _;\\n        require(localCounter == _guardCounter, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBaseGatewayEthereumV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseGatewayEthereumV2 {\\n    struct NFTTokenInfo {\\n        uint256 weightsFomulaBase;\\n        uint256 weightsFomulaLottery;\\n        uint256 amounts;\\n    }\\n\\n    function initNftData(address _nft, address _poolBase, address _poolLottery, bool _increaseable, uint256 _delta) external;\\n\\n    function deposit(uint256 _tokenId) external payable;\\n\\n    function batchDeposit(uint256 _idFrom, uint256 _offset) external payable;\\n\\n    function baseValue(address _nft, uint256 _tokenId) external view returns (uint256, uint256);\\n\\n    function tokenReward(address _nft, uint256 _tokenId) external view returns (uint256);\\n\\n    function redeem(address _nft, uint256 _tokenId, bool _isToken0) external;\\n\\n    function withdraw(address _to) external;\\n\\n    function withdrawWithERC20(address _token, address _to) external;\\n\\n    function setPoolBalances(address pool, uint256 amount) external;\\n\\n    function investWithERC20(address pool, bool isToken0, uint256 minReceivedTokenAmountSwap) external;\\n\\n    function getReward(address pool) external;\\n\\n    function setVRFConsumer(address vrf) external;\\n\\n    function getRequestId() external view returns (uint256);\\n\\n    function setRandomPrizeWinners(address pool, uint256 totalWinner) external;\\n\\n    function getWinnerBoard(uint256 requestId) external returns (uint256[] memory);\\n\\n    function setHotpotPoolToCurvePool(address hotpotPoolAddress, address curvePoolAddress) external;\\n\\n    function getHotpotPoolToCurvePool(address hotpotPoolAddress) external returns (address);\\n\\n    function setRedeemableTime(uint256 timestamp) external;\\n\\n    function getTokenInfo(address _nft, uint256 _id) external view returns (NFTTokenInfo memory);\\n\\n    function redeemAll(address _pool, bool _isToken0) external;\\n\\n    function redeemAllCollection(address _nft, bool _isToken0) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrade/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Modified from https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    /// @dev Change constructor to initialize function for upgradeable contract\\n    function initializeOwner(address _owner) internal {\\n        require(owner == address(0), \\\"Already initialized\\\");\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\"\r\n    },\r\n    \"contracts/hotpot/interfaces/IDepositCompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n// Curve DepositCompound contract interface\\ninterface IDepositCompound {\\n    function underlying_coins(int128 arg0) external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function add_liquidity(uint256[2] calldata uamounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata min_uamounts) external;\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount, bool donate_dust) external;\\n}\"\r\n    },\r\n    \"contracts/hotpot/interfaces/IConvexBaseRewardPool.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.9.0;\\n\\ninterface IConvexBaseRewardPool {\\n    // Views\\n\\n    function rewards(address account) external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    // Mutative\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAll(bool claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/hotpot/interfaces/IConvexBooster.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.9.0;\\n\\ninterface IConvexBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n    function poolInfo(uint256 _pid) view external returns (PoolInfo memory);\\n\\n    function crv() external view returns (address);\\n\\n    function minter() external view returns (address);\\n\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns(bool);\\n}\"\r\n    },\r\n    \"contracts/hotpot/interfaces/IConverterUniV3.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.9.0;\\nimport \\\"../../interfaces/IPancakePair.sol\\\";\\n\\ninterface IConverterUniV3 {\\n    function NATIVE_TOKEN() external view returns (address);\\n\\n    function convert(\\n        address _inTokenAddress,\\n        uint256 _amount,\\n        uint256 _convertPercentage,\\n        address _outTokenAddress,\\n        uint256 _minReceiveAmount,\\n        address _recipient\\n    ) external;\\n\\n    function convertAndAddLiquidity(\\n        address _inTokenAddress,\\n        uint256 _amount,\\n        address _outTokenAddress,\\n        uint256 _minReceiveAmountSwap,\\n        uint256 _minInTokenAmountAddLiq,\\n        uint256 _minOutTokenAmountAddLiq,\\n        address _recipient\\n    ) external;\\n\\n    function removeLiquidityAndConvert(\\n        IPancakePair _lp,\\n        uint256 _lpAmount,\\n        uint256 _minToken0Amount,\\n        uint256 _minToken1Amount,\\n        uint256 _token0Percentage,\\n        address _recipient\\n    ) external;\\n\\n    function convertUniV3(\\n        address _inTokenAddress,\\n        uint256 _amount,\\n        uint256 _convertPercentage,\\n        address _outTokenAddress,\\n        uint256 _minReceiveAmount,\\n        address _recipient,\\n        bytes memory _path\\n    ) external;\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseGatewayEthereum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseGatewayEthereum {\\n\\n    function initNftData(address _nft, address _poolBase, address _poolLottery, bool _increaseable, uint256 _delta) external;\\n\\n    function deposit(uint256 _tokenId) external payable;\\n\\n    function batchDeposit(uint256 _idFrom, uint256 _offset) external payable;\\n\\n    function baseValue(address _nft, uint256 _tokenId) external view returns (uint256, uint256);\\n\\n    function tokenReward(address _nft, uint256 _tokenId) external view returns (uint256);\\n\\n    function redeem(address _nft, uint256 _tokenId, bool _isToken0) external;\\n\\n    function withdraw(address _to) external;\\n\\n    function withdrawWithERC20(address _token, address _to) external;\\n\\n    function setPoolBalances(address pool, uint256 amount) external;\\n\\n    function investWithERC20(address pool, bool isToken0, uint256 minReceivedTokenAmountSwap) external;\\n\\n    function getReward(address pool) external;\\n\\n    function setVRFConsumer(address vrf) external;\\n\\n    function getRequestId() external view returns (uint256);\\n\\n    function setRandomPrizeWinners(address pool, uint256 totalWinner) external;\\n\\n    function getWinnerBoard(uint256 requestId) external returns (uint256[] memory);\\n\\n    function setHotpotPoolToCurvePool(address hotpotPoolAddress, address curvePoolAddress) external;\\n\\n    function getHotpotPoolToCurvePool(address hotpotPoolAddress) external returns (address);\\n\\n    function setRedeemableTime(uint256 timestamp) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFactoryERC721PayWithEther.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * This is a generic factory contract that can be used to mint tokens. The configuration\\n * for minting is specified by an _optionId, which can be used to delineate various\\n * ways of minting.\\n *\\n * https://docs.opensea.io/docs/2-custom-item-sale-contract\\n */\\ninterface IFactoryERC721PayWithEther {\\n\\n  function withdraw(address _address, uint256 _amount) external;\\n\\n  function mint(\\n    uint256 _numberTokens,\\n    bytes32[] memory proof\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RedeemAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RedeemAllCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"SelectWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_WEIGHTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRFConsumer\",\"outputs\":[{\"internalType\":\"contract VRFv2Consumer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"baseValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightsFomulaBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightsFomulaLottery\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddressBase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddressLottery\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increaseable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractIsDisabledForDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hotpotPoolAddress\",\"type\":\"address\"}],\"name\":\"getHotpotPoolToCurvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"weightsFomulaBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightsFomulaLottery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseGatewayEthereumV2.NFTTokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getWinnerBoard\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolBase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolLottery\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_increaseable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"initNftData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wrapperNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3SwapRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemableTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isToken0\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minReceivedTokenAmountSwap\",\"type\":\"uint256\"}],\"name\":\"investWithERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isToken0\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isToken0\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isToken0\",\"type\":\"bool\"}],\"name\":\"redeemAllCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV3SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hotpotPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePoolAddress\",\"type\":\"address\"}],\"name\":\"setHotpotPoolToCurvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPoolBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalWinner\",\"type\":\"uint256\"}],\"name\":\"setRandomPrizeWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setRedeemableTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrf\",\"type\":\"address\"}],\"name\":\"setVRFConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightsFomulaBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weightsFomulaLottery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amounts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLotteryInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawWithERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InvestNFTGatewayEthereumV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}