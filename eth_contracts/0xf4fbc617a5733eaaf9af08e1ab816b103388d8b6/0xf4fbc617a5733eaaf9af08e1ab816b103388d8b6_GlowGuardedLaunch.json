{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/GuardedLaunch/Glow.GuardedLaunch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IGlow} from \\\"@/interfaces/IGlow.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {UniswapV2Library} from \\\"@/libraries/UniswapV2Library.sol\\\";\\nimport {GCC} from \\\"@/GCC.sol\\\";\\nimport {MinerPoolAndGCA} from \\\"@/MinerPoolAndGCA/MinerPoolAndGCA.sol\\\";\\nimport {Glow} from \\\"@/GLOW.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IVetoCouncil} from \\\"@/interfaces/IVetoCouncil.sol\\\";\\n/**\\n * @dev helper for managing tail and head in a mapping\\n * @param tail the tail of the mapping\\n * @param head the head of the mapping\\n * @dev the head is the last index with data. If we need to push, we push at head + 1\\n * @dev there are edge cases where head == tail and there is data,\\n *         -   and conversely, head == tail and there is no data\\n *         - These special cases are handled in the code\\n */\\n\\nstruct Pointers {\\n    uint128 tail;\\n    uint128 head;\\n}\\n\\n/**\\n * @title GlowGuardedLaunch\\n * @notice This contract is used to guard the launch of the GLOW token\\n *               - GLOW Protocol's guarded launch is meant to protect the protocol from\\n *                 malicious actors and to give the community time to audit the code\\n *               - During the guarded launch, transfers are restricted to EOA's and allowlisted contracts\\n *               - The veto council also has the ability to permanently freeze transfers in case of an emergency\\n *                  - Post guarded-launch, Guarded Launch tokens will be airdropped 1:1 to GLOW holders\\n */\\ncontract GlowGuardedLaunch is Glow, Ownable {\\n    error ErrIsContract();\\n    error ErrNotVetoCouncilMember();\\n    error ErrPermanentlyFrozen();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  immutables                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice The address of the USDG contract\\n     */\\n    address public immutable USDG;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice true if transfers are permanently frozen\\n     */\\n    bool public permanentlyFreezeTransfers;\\n\\n    /**\\n     * @notice The address of the GlowUnlocker contract\\n     * @dev this contract unlocks 90 million pre-minted glow tokens over 6 years\\n     */\\n    address public glowUnlocker;\\n\\n    /**\\n     * @notice address -> isAllowListedContract\\n     */\\n    mapping(address => bool) public allowlistedContracts;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when the contract is permanently frozen\\n     */\\n    event PermanentFreeze();\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /*\\n    * @notice Sets the immutable variables (GENESIS_TIMESTAMP, EARLY_LIQUIDITY_ADDRESS)\\n    * @notice sends 12 million GLW to the Early Liquidity Contract and 90 million GLW to the unlocker contract\\n    * @param _earlyLiquidityAddress The address of the Early Liquidity Contract\\n    * @param _vestingContract The address of the vesting contract\\n                              -unused in guarded launch\\n      * @param _gcaAndMinerPoolAddress The address of the GCA and Miner Pool\\n    * @param _vetoCouncilAddress The address of the Veto Council\\n    * @param _grantsTreasuryAddress The address of the Grants Treasury\\n    * @param _owner The address of the owner\\n    * @param _usdg The address of the USDG contract\\n    * @param _uniswapV2Factory The address of the Uniswap V2 Factory\\n    * @param _gccContract The address of the GCC contract\\n    */\\n    constructor(\\n        address _earlyLiquidityAddress,\\n        address _vestingContract,\\n        address _gcaAndMinerPoolAddress,\\n        address _vetoCouncilAddress,\\n        address _grantsTreasuryAddress,\\n        address _owner,\\n        address _usdg,\\n        address _uniswapV2Factory,\\n        address _gccContract\\n    )\\n        payable\\n        Glow(_earlyLiquidityAddress, _vestingContract, _gcaAndMinerPoolAddress, _vetoCouncilAddress, _grantsTreasuryAddress)\\n        Ownable(_owner)\\n    {\\n        allowlistedContracts[address(this)] = true;\\n        allowlistedContracts[_earlyLiquidityAddress] = true;\\n        allowlistedContracts[getPair(_uniswapV2Factory, address(this), _usdg)] = true;\\n\\n        //The addresses are set as immutables in the child Glow.sol contract\\n        allowlistedContracts[_gcaAndMinerPoolAddress] = true;\\n        allowlistedContracts[_vetoCouncilAddress] = true;\\n        allowlistedContracts[_grantsTreasuryAddress] = true;\\n\\n        address carbonCreditAuction = address(GCC(_gccContract).CARBON_CREDIT_AUCTION());\\n        require(carbonCreditAuction != address(0), \\\"Glow: carbonCreditAuction is zero\\\");\\n        allowlistedContracts[carbonCreditAuction] = true;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  veto council                              */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Freezes transfers permanently\\n     * @dev only veto council members can call this function\\n     * @dev after this function is called, all transfers are permanently frozen\\n     */\\n    function freezeContract() external {\\n        if (!IVetoCouncil(VETO_COUNCIL_ADDRESS).isCouncilMember(msg.sender)) {\\n            revert ErrNotVetoCouncilMember();\\n        }\\n        permanentlyFreezeTransfers = true;\\n        emit PermanentFreeze();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 erc20 override                              */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @dev override transfers to make sure that only EOA's and allowlisted contracts can send or receive USDG\\n     * @param from the address to send USDG from\\n     * @param to the address to send USDG to\\n     * @param value the amount of USDG to send\\n     */\\n    function _update(address from, address to, uint256 value) internal override(ERC20) {\\n        if (permanentlyFreezeTransfers) {\\n            revert ErrPermanentlyFrozen();\\n        }\\n        if (!_isZeroAddress(from)) {\\n            _revertIfNotAllowlistedContract(from);\\n            _revertIfNotAllowlistedContract(to);\\n        }\\n        super._update(from, to, value);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  glow overrides                            */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc Glow\\n     * @dev Guarded launch does not mint tokens to the vesting contract\\n     */\\n    function _handleConstructorMint(\\n        address _earlyLiquidityAddress,\\n        address _vestingContract,\\n        address _grantsTreasryAddress\\n    ) internal override {\\n        _mint(_earlyLiquidityAddress, 12_000_000 ether);\\n        _mint(_grantsTreasryAddress, 6_000_000 ether);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  utils                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev reverts if the address is a contract and not allowlisted\\n     */\\n    function _revertIfNotAllowlistedContract(address _address) internal view {\\n        if (_isContract(_address)) {\\n            if (!allowlistedContracts[_address]) {\\n                revert ErrIsContract();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev returns true if the address is a contract\\n     * @param _address the address to check\\n     * @return isContract - true if the address is a contract\\n     */\\n    function _isContract(address _address) internal view returns (bool isContract) {\\n        assembly {\\n            isContract := gt(extcodesize(_address), 0)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the univ2 pair for a given factory and token\\n     * @param factory the univ2 factory\\n     * @param _tokenA the first token\\n     * @param _tokenB the second token\\n     * @return pair - the univ2 pair\\n     */\\n    function getPair(address factory, address _tokenA, address _tokenB) internal view virtual returns (address pair) {\\n        pair = UniswapV2Library.pairFor(factory, _tokenA, _tokenB);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error ERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `requestedDecrease`.\\n     *\\n     * NOTE: Although this function is designed to avoid double spending with {approval},\\n     * it can still be frontrunned, preventing any attempt of allowance reduction.\\n     */\\n    function decreaseAllowance(address spender, uint256 requestedDecrease) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < requestedDecrease) {\\n            revert ERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n        }\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - requestedDecrease);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from` (or `to`) is\\n     * the zero address. All customizations to transfers, mints, and burns should be done by overriding this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, by transferring it to address(0).\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal virtual {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Alternative version of {_approve} with an optional flag that can enable or disable the Approval event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to true\\n     * using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGlow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGlow is IERC20 {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error UnstakeAmountExceedsStakedBalance();\\n    error InsufficientClaimableBalance();\\n    error CannotStakeZeroTokens();\\n    error CannotUnstakeZeroTokens();\\n    error AddressAlreadySet();\\n    error AddressNotSet();\\n    error CallerNotGCA();\\n    error CallerNotVetoCouncil();\\n    error CallerNotGrantsTreasury();\\n    error UnstakingOnEmergencyCooldown();\\n    error ZeroAddressNotAllowed();\\n    error DuplicateAddressNotAllowed();\\n    error CannotClaimZeroTokens();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                      events                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Emitted when a user stakes GLOW\\n     * @param user The address of the user that is staking\\n     * @param amount The amount staked\\n     */\\n    event Stake(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a user unstakes GLOW\\n     * @param user The address of the user that is unstaking\\n     * @param amount The amount unstaked\\n     */\\n    event Unstake(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a user claims GLOW from there unstaked positions\\n     * @param user The address of the user that is claiming\\n     * @param amount The amount claimed\\n     */\\n    event ClaimUnstakedGLW(address indexed user, uint256 amount);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice represents an unstaked position\\n     * @param amount The amount of GLOW unstaked\\n     * @param cooldownEnd The timestamp when the user can reclaim the tokens\\n     */\\n    struct UnstakedPosition {\\n        uint192 amount;\\n        uint64 cooldownEnd;\\n    }\\n\\n    /**\\n     * @dev helper for managing tail and head in a mapping\\n     * @param tail the tail of the mapping\\n     * @param head the head of the mapping\\n     * @dev the head is the last index with data. If we need to push, we push at head + 1\\n     * @dev there are edge cases where head == tail and there is data,\\n     *         -   and conversely, head == tail and there is no data\\n     *         - These special cases are handled in the code\\n     */\\n    struct Pointers {\\n        uint128 tail;\\n        uint128 head;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   staking                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice The entry point for a user to stake glow.\\n     * @notice A user earns 1 ratify/reject vote per glw staked\\n     * @param amount The amount of GLOW to stake\\n     */\\n    function stake(uint256 amount) external;\\n\\n    /**\\n     * @notice The entry point for a user to unstake glow.\\n     * @param amount The amount of GLOW to unstake\\n     */\\n    function unstake(uint256 amount) external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   inflation                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Entry point for users to claim unstaked tokens that are no longer on cooldown\\n     * @param amount The amount of tokens to claim\\n     * @dev emits a ```ClaimUnstakedGLW``` event\\n     */\\n    function claimUnstakedTokens(uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the GCA and Miner Pool Contract to claim GLW from inflation\\n     * @notice The GCA and Miner Pool Contract receives 185,00 * 1e18 tokens per week\\n     */\\n    function claimGLWFromGCAAndMinerPool() external returns (uint256);\\n\\n    /**\\n     * @notice Allows the Veto Council to claim GLW from inflation\\n     * @notice The veto council receives 5,000 * 1e18 tokens per week\\n     */\\n    function claimGLWFromVetoCouncil() external returns (uint256);\\n\\n    /**\\n     * @notice Allows the Grants Treasury to claim GLW from inflation\\n     * @notice The grants treasury receives 40,000 * 1e18 tokens per week\\n     */\\n    function claimGLWFromGrantsTreasury() external returns (uint256);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                            view unstaked positions                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Returns the unstaked positions of a user\\n     * @param account The address of the user\\n     */\\n    function unstakedPositionsOf(address account) external view returns (UnstakedPosition[] memory);\\n\\n    /**\\n     * @notice Returns the unstaked positions of a user\\n     * @param account The address of the user\\n     * @param start The start index of the positions to return\\n     * @param end The end index of the positions to return\\n     */\\n    function unstakedPositionsOf(address account, uint256 start, uint256 end)\\n        external\\n        view\\n        returns (UnstakedPosition[] memory);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             view inflation data                           */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @return lastClaimTimestamp The last time the GCA and Miner Pool Contract claimed GLW\\n     * @return totalAlreadyClaimed The total amount of GLW already claimed by the GCA and Miner Pool Contract\\n     * @return totalToClaim The total amount of GLW available to claim by the GCA and Miner Pool Contract\\n     */\\n    function gcaInflationData()\\n        external\\n        view\\n        returns (uint256 lastClaimTimestamp, uint256 totalAlreadyClaimed, uint256 totalToClaim);\\n\\n    /**\\n     * @return lastClaimTimestamp The last time the Veto Council claimed GLW\\n     * @return totalAlreadyClaimed The total amount of GLW already claimed by the Veto Council\\n     * @return totalToClaim The total amount of GLW available to claim by the Veto Council\\n     */\\n    function vetoCouncilInflationData()\\n        external\\n        view\\n        returns (uint256 lastClaimTimestamp, uint256 totalAlreadyClaimed, uint256 totalToClaim);\\n\\n    /**\\n     * @return lastClaimTimestamp The last time the Grants Treasury claimed GLW\\n     * @return totalAlreadyClaimed The total amount of GLW already claimed by the Grants Treasury\\n     * @return totalToClaim The total amount of GLW available to claim by the Grants Treasury\\n     */\\n    function grantsTreasuryInflationData()\\n        external\\n        view\\n        returns (uint256 lastClaimTimestamp, uint256 totalAlreadyClaimed, uint256 totalToClaim);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   view                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @return the genesis timestamp\\n     */\\n    function GENESIS_TIMESTAMP() external view returns (uint256);\\n\\n    /**\\n     * @notice the total amount of GLW currently staked by {account}\\n     * @return numStaked total amount of GLW currently staked by {account}\\n     * @param account the address of the account to get the staked balance of\\n     */\\n    function numStaked(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/UniswapV2Library.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.19;\\n\\nimport {IUniswapV2Pair} from \\\"@/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA * (reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\\n        internal\\n        pure\\n        returns (uint256 amountOut)\\n    {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn * (997);\\n        uint256 numerator = amountInWithFee * (reserveOut);\\n        uint256 denominator = reserveIn * (1000) + (amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserx   ves, returns a required input amount of the other asset\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\\n        internal\\n        pure\\n        returns (uint256 amountIn)\\n    {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn * (amountOut) * (1000);\\n        uint256 denominator = reserveOut - (amountOut) * (997);\\n        amountIn = (numerator / denominator) + (1);\\n    }\\n\\n    // // performs chained getAmountOut calculations on any number of pairs\\n    // function getAmountsOut(address factory, uint256 amountIn, address[] memory path)\\n    //     internal\\n    //     view\\n    //     returns (uint256[] memory amounts)\\n    // {\\n    //     require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    //     amounts = new uint[](path.length);\\n    //     amounts[0] = amountIn;\\n    //     for (uint256 i; i < path.length - 1; i++) {\\n    //         (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n    //         amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    //     }\\n    // }\\n\\n    // // performs chained getAmountIn calculations on any number of pairs\\n    // function getAmountsIn(address factory, uint256 amountOut, address[] memory path)\\n    //     internal\\n    //     view\\n    //     returns (uint256[] memory amounts)\\n    // {\\n    //     require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n    //     amounts = new uint[](path.length);\\n    //     amounts[amounts.length - 1] = amountOut;\\n    //     for (uint256 i = path.length - 1; i > 0; i--) {\\n    //         (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n    //         amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    //     }\\n    // }\\n}\\n\"\r\n    },\r\n    \"src/GCC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IGCC} from \\\"@/interfaces/IGCC.sol\\\";\\nimport {ICarbonCreditAuction} from \\\"@/interfaces/ICarbonCreditAuction.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {IGovernance} from \\\"@/interfaces/IGovernance.sol\\\";\\nimport {CarbonCreditDescendingPriceAuction} from \\\"@/CarbonCreditDescendingPriceAuction.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IUniswapRouterV2} from \\\"@/interfaces/IUniswapRouterV2.sol\\\";\\nimport {ImpactCatalyst} from \\\"@/ImpactCatalyst.sol\\\";\\nimport {IERC20Permit} from \\\"@/interfaces/IERC20Permit.sol\\\";\\nimport {UniswapV2Library} from \\\"@/libraries/UniswapV2Library.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @title GCC (Glow Carbon Credit)\\n * @author DavidVorick\\n * @author 0xSimon(twitter) - 0xSimbo(github)\\n * @notice This contract is the ERC20 token for Glow Carbon Credits (GCC).\\n *         - 1 GCC or (1e18 wei of GCC) represents 1 metric ton of CO2 offsets\\n *         - GCC is minted by the Glow protocol as farms produce clean solar\\n *         - GCC can be committed for nominations and permanent impact power\\n *         - Nominations are used to vote on proposals in governance and are in 12 decimals\\n *         - Impact power is an on-chain record of the sum of total impact power earned by a user\\n *         - It currently has no use, but can be used to integrate with other protocols\\n *         - Once GCC is committed, it can't be uncommitted\\n *         - GCC is sold in the carbon credit auction\\n *          - The amount of nominations earned is equal to the sqrt(amountGCCAddedToUniV2LP * amountUSDCAddedToUniV2LP)\\n *              - earned from a swap in the commitGCC or commitUSDC functions in the `impactCatalyst`\\n *              - When committing USDC, the amount of nominations earned is equal to the amount of USDC committed\\n */\\n\\ncontract GCC is ERC20, ERC20Burnable, IGCC, EIP712 {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice The EIP712 typehash for the CommitPermit struct used by the permit\\n    bytes32 public constant COMMIT_PERMIT_TYPEHASH = keccak256(\\n        \\\"CommitPermit(address owner,address spender,address rewardAddress,address referralAddress,uint256 amount,uint256 nonce,uint256 deadline)\\\"\\n    );\\n\\n    /// @notice The maximum shift for a bucketId\\n    uint256 private constant _BITS_IN_UINT = 256;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  immutables                                */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice The address of the CarbonCreditAuction contract\\n    ICarbonCreditAuction public immutable CARBON_CREDIT_AUCTION;\\n\\n    /// @notice The address of the GCAAndMinerPool contract\\n    address public immutable GCA_AND_MINER_POOL_CONTRACT;\\n\\n    /// @notice the address of the governance contract\\n    IGovernance public immutable GOVERNANCE;\\n\\n    /// @notice the address of the GLOW token\\n    address public immutable GLOW;\\n\\n    /// @notice the address of the ImpactCatalyst contract\\n    /// @dev the impact catalyst is responsible for handling the commitments of GCC and USDC\\n    ImpactCatalyst public immutable IMPACT_CATALYST;\\n\\n    /// @notice The Uniswap router\\n    /// @dev used to swap USDC for GCC and vice versa\\n    IUniswapRouterV2 public immutable UNISWAP_ROUTER;\\n\\n    /// @notice The address of the USDC token\\n    address public immutable USDC;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   mappings                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice The bitmap of minted buckets\\n     * @dev key 0 contains the first 256 buckets, key 1 contains the next 256 buckets, etc.\\n     */\\n    mapping(uint256 => uint256) private _mintedBucketsBitmap;\\n\\n    /**\\n     * @notice The total impact power earned by a user from their USDC or GCC commitments\\n     */\\n    mapping(address => uint256) public totalImpactPowerEarned;\\n\\n    /**\\n     * @notice The allowances for committing GCC\\n     * @dev similar to ERC20\\n     */\\n    mapping(address => mapping(address => uint256)) private _commitGCCAllowances;\\n\\n    /**\\n     * @notice The next commit nonce for a user\\n     */\\n    mapping(address => uint256) public nextCommitNonce;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice GCC constructor\\n     * @param _gcaAndMinerPoolContract The address of the GCAAndMinerPool contract\\n     * @param _governance The address of the governance contract\\n     * @param _glowToken The address of the GLOW token\\n     * @param _usdc The address of the USDC token\\n     * @param _uniswapRouter The address of the Uniswap V2 router\\n     */\\n    constructor(\\n        address _gcaAndMinerPoolContract,\\n        address _governance,\\n        address _glowToken,\\n        address _usdc,\\n        address _uniswapRouter\\n    ) payable ERC20(\\\"Glow Carbon Certificate\\\", \\\"GCC-BETA\\\") EIP712(\\\"Glow Carbon Certificate\\\", \\\"1\\\") {\\n        // Set the immutable variables\\n        USDC = _usdc;\\n        GCA_AND_MINER_POOL_CONTRACT = _gcaAndMinerPoolContract;\\n        UNISWAP_ROUTER = IUniswapRouterV2(_uniswapRouter);\\n        GOVERNANCE = IGovernance(_governance);\\n        GLOW = _glowToken;\\n        //Create the carbon credit auction directly in the constructor\\n        CarbonCreditDescendingPriceAuction cccAuction = new CarbonCreditDescendingPriceAuction({\\n            glow: IERC20(_glowToken),\\n            gcc: IERC20(address(this)),\\n            startingPrice: 1e5 // Carbon Credit Auction sells increments of 1e6 GCC,\\n                // Setting the price to 1e5 per unit means that 1 GCC = .1 GLOW\\n        });\\n\\n        CARBON_CREDIT_AUCTION = ICarbonCreditAuction(address(cccAuction));\\n        //Create the impact catalyst\\n        address factory = UNISWAP_ROUTER.factory();\\n        address pair = getPair(factory, _usdc);\\n        //Mint 1 to set the LP with USDC\\n        //Note: On Guarded Launch the LP is set with USDG\\n        if (block.chainid == 1) {\\n            _mint(tx.origin, 1.1 ether);\\n        }\\n        //The impact catalyst is responsible for handling the commitments of GCC and USDC\\n        IMPACT_CATALYST = new ImpactCatalyst(_usdc, _uniswapRouter, factory, pair);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   minting                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function mintToCarbonCreditAuction(uint256 bucketId, uint256 amount) external {\\n        if (msg.sender != GCA_AND_MINER_POOL_CONTRACT) _revert(IGCC.CallerNotGCAContract.selector);\\n        _setBucketMinted(bucketId);\\n        if (amount > 0) {\\n            CARBON_CREDIT_AUCTION.receiveGCC(amount);\\n            _mint(address(CARBON_CREDIT_AUCTION), amount);\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   commits                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitGCC(uint256 amount, address rewardAddress, address referralAddress, uint256 minImpactPower)\\n        public\\n        returns (uint256 usdcEffect, uint256 impactPower)\\n    {\\n        //Transfer GCC from the msg.sender to the impact catalyst\\n        _transfer(msg.sender, address(IMPACT_CATALYST), amount);\\n        //get back the amount of USDC that was used in the LP and the impact power earned\\n        (usdcEffect, impactPower) = IMPACT_CATALYST.commitGCC(amount, minImpactPower);\\n        //handle the commitment\\n        _handleCommitment(msg.sender, rewardAddress, amount, usdcEffect, impactPower, referralAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitGCC(uint256 amount, address rewardAddress, uint256 minImpactPower)\\n        external\\n        returns (uint256, uint256)\\n    {\\n        //Same as above, but with no referrer\\n        return (commitGCC(amount, rewardAddress, address(0), minImpactPower));\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitGCCFor(\\n        address from,\\n        address rewardAddress,\\n        uint256 amount,\\n        address referralAddress,\\n        uint256 minImpactPower\\n    ) public returns (uint256 usdcEffect, uint256 impactPower) {\\n        //Transfer GCC `from` to the impact catalyst\\n        transferFrom(from, address(IMPACT_CATALYST), amount);\\n        //If the msg.sender is not `from`, then check and decrease the allowance\\n        if (msg.sender != from) {\\n            _decreaseCommitAllowance(from, msg.sender, amount, false);\\n        }\\n        //get back the amount of USDC that was used in the LP and the impact power earned\\n        (usdcEffect, impactPower) = IMPACT_CATALYST.commitGCC(amount, minImpactPower);\\n        //handle the commitment\\n        _handleCommitment(from, rewardAddress, amount, usdcEffect, impactPower, referralAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitGCCFor(address from, address rewardAddress, uint256 amount, uint256 minImpactPower)\\n        public\\n        returns (uint256, uint256)\\n    {\\n        //Same as above, but with no referrer\\n        return (commitGCCFor(from, rewardAddress, amount, address(0), minImpactPower));\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitGCCForAuthorized(\\n        address from,\\n        address rewardAddress,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes calldata signature,\\n        address referralAddress,\\n        uint256 minImpactPower\\n    ) public returns (uint256, uint256) {\\n        //Check the deadline\\n        if (block.timestamp > deadline) {\\n            _revert(IGCC.CommitPermitSignatureExpired.selector);\\n        }\\n\\n        //Load the next nonce\\n        uint256 _nextCommitNonce = nextCommitNonce[from]++;\\n        //Construct the message to be signed\\n        bytes32 message = _constructCommitPermitDigest(\\n            from, msg.sender, rewardAddress, referralAddress, amount, _nextCommitNonce, deadline\\n        );\\n        //Check the signature\\n        if (!_checkCommitPermitSignature(from, message, signature)) {\\n            _revert(IGCC.CommitSignatureInvalid.selector);\\n        }\\n        //Increase the allowance for the msg.sender on the `from` account\\n        _increaseCommitAllowance(from, msg.sender, amount, false);\\n        uint256 transferAllowance = allowance(from, msg.sender);\\n        if (transferAllowance < amount) {\\n            _approve(from, msg.sender, amount, false);\\n        }\\n        //Commit the GCC\\n        return (commitGCCFor(from, rewardAddress, amount, referralAddress, minImpactPower));\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitGCCForAuthorized(\\n        address from,\\n        address rewardAddress,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes calldata signature,\\n        uint256 minImpactPower\\n    ) external returns (uint256 usdcEffect, uint256 impactPower) {\\n        //Same as above, but with no referrer\\n        return (commitGCCForAuthorized(from, rewardAddress, amount, deadline, signature, address(0), minImpactPower));\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitUSDC(uint256 amount, address rewardAddress, address referralAddress, uint256 minImpactPower)\\n        public\\n        returns (uint256 impactPower)\\n    {\\n        //Read in the balance of the impact catalyst before the transfer\\n        uint256 impactCatalystBalBefore = IERC20(USDC).balanceOf(address(IMPACT_CATALYST));\\n        //Transfer USDC from the msg.sender to the impact catalyst\\n        IERC20(USDC).transferFrom(msg.sender, address(IMPACT_CATALYST), amount);\\n        //Read in the balance of the impact catalyst after the transfer\\n        uint256 impactCatalystBalAfter = IERC20(USDC).balanceOf(address(IMPACT_CATALYST));\\n        //Calculate the actual amount of USDC available from the transfer (in case of fees since USDC is upgradable)\\n        uint256 usdcUsing = impactCatalystBalAfter - impactCatalystBalBefore;\\n        //get back the impaoct power earned\\n        impactPower = IMPACT_CATALYST.commitUSDC(usdcUsing, minImpactPower);\\n        //handle the commitment\\n        _handleUSDCcommitment(msg.sender, rewardAddress, amount, impactPower, referralAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitUSDC(uint256 amount, address rewardAddress, uint256 minImpactPower) external returns (uint256) {\\n        //Same as above, but with no referrer\\n        return (commitUSDC(amount, rewardAddress, address(0), minImpactPower));\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitUSDCSignature(\\n        uint256 amount,\\n        address rewardAddress,\\n        address referralAddress,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 minImpactPower\\n    ) external returns (uint256 impactPower) {\\n        // Execute the transfer with a signed authorization\\n        IERC20Permit paymentToken = IERC20Permit(USDC);\\n        uint256 allowance = paymentToken.allowance(msg.sender, address(this));\\n        //Check allowance to avoid front-running issues\\n        if (allowance < amount) {\\n            paymentToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        }\\n        return (commitUSDC(amount, rewardAddress, referralAddress, minImpactPower));\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                        commit allowance  & allowances                      */\\n    /* -------------------------------------------------------------------------- */\\n    /// @inheritdoc IGCC\\n    function setAllowances(address spender, uint256 transferAllowance, uint256 committingAllowance) external {\\n        _approve(msg.sender, spender, transferAllowance);\\n        _commitGCCAllowances[msg.sender][spender] = committingAllowance;\\n        emit IGCC.CommitGCCAllowance(msg.sender, spender, committingAllowance);\\n    }\\n\\n    /// @inheritdoc IGCC\\n    function increaseAllowances(address spender, uint256 addedValue) public {\\n        _approve(msg.sender, spender, allowance(msg.sender, spender) + addedValue);\\n        _increaseCommitAllowance(msg.sender, spender, addedValue, true);\\n    }\\n\\n    /// @inheritdoc IGCC\\n    function decreaseAllowances(address spender, uint256 requestedDecrease) public {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n        if (currentAllowance < requestedDecrease) {\\n            revert ERC20.ERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n        }\\n        unchecked {\\n            _approve(msg.sender, spender, currentAllowance - requestedDecrease);\\n        }\\n        _decreaseCommitAllowance(msg.sender, spender, requestedDecrease, true);\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function increaseCommitAllowance(address spender, uint256 amount) external override {\\n        _increaseCommitAllowance(msg.sender, spender, amount, true);\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function decreaseCommitAllowance(address spender, uint256 amount) external override {\\n        _decreaseCommitAllowance(msg.sender, spender, amount, true);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              view functions                              */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function commitAllowance(address account, address spender) public view override returns (uint256) {\\n        return _commitGCCAllowances[account][spender];\\n    }\\n\\n    /**\\n     * @inheritdoc IGCC\\n     */\\n    function isBucketMinted(uint256 bucketId) external view returns (bool) {\\n        (uint256 key, uint256 shift) = _getKeyAndShiftFromBucketId(bucketId);\\n        return _mintedBucketsBitmap[key] & (1 << shift) != 0;\\n    }\\n\\n    /**\\n     * @notice Returns the domain separator used in the permit signature\\n     * @dev Should be deterministic\\n     * @return result The domain separator\\n     */\\n    function domainSeparatorV4() public view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              private functions                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice sets the bucket as minted\\n     * @param bucketId the id of the bucket to set as minted\\n     * @dev reverts if the bucket has already been minted\\n     */\\n    function _setBucketMinted(uint256 bucketId) private {\\n        (uint256 key, uint256 shift) = _getKeyAndShiftFromBucketId(bucketId);\\n        //Can't overflow because _BITS_IN_UINT is 256\\n        uint256 bitmap = _mintedBucketsBitmap[key];\\n        if (bitmap & (1 << shift) != 0) _revert(IGCC.BucketAlreadyMinted.selector);\\n        _mintedBucketsBitmap[key] = bitmap | (1 << shift);\\n    }\\n\\n    /**\\n     * @notice handles the storage writes and event emissions relating to committing gcc.\\n     * @param from the address of the account committing the credits\\n     * @param rewardAddress the address to receive the benefits of committing\\n     * @param usdcEffect - the amount of USDC added into the uniswap v2 lp position\\n     * @param gccCommitted the amount of GCC committed\\n     * @param impactPower the effect of committing on the USDC balance\\n     * @param referralAddress the address of the referrer (zero for no referrer)\\n     */\\n    function _handleCommitment(\\n        address from,\\n        address rewardAddress,\\n        uint256 gccCommitted,\\n        uint256 usdcEffect,\\n        uint256 impactPower,\\n        address referralAddress\\n    ) private {\\n        if (from == referralAddress) _revert(IGCC.CannotReferSelf.selector);\\n        //committing USDC calls syncProposals in governance to ensure that the proposals are up to date\\n        //This design is meant to ensure that the proposals are as up to date as possible\\n        GOVERNANCE.syncProposals();\\n        //Increase the total impact power earned by the reward address\\n        totalImpactPowerEarned[rewardAddress] += impactPower;\\n        //Grant the nominations to the reward address\\n        GOVERNANCE.grantNominations(rewardAddress, impactPower);\\n        //Emit a GCCCommitted event\\n        emit IGCC.GCCCommitted(from, rewardAddress, gccCommitted, usdcEffect, impactPower, referralAddress);\\n    }\\n\\n    /**\\n     * @notice handles the storage writes and event emissions relating to committing USDC\\n     * @dev should only be used internally and by function that require a transfer of {amount} to address(this)\\n     * @param from the address of the account committing the credits\\n     * @param rewardAddress the address to receive the benefits of committing\\n     * @param amount the amount of USDC TO commit\\n     * @param referralAddress the address of the referrer (zero for no referrer)\\n     */\\n    function _handleUSDCcommitment(\\n        address from,\\n        address rewardAddress,\\n        uint256 amount,\\n        uint256 impactPower,\\n        address referralAddress\\n    ) private {\\n        if (from == referralAddress) _revert(IGCC.CannotReferSelf.selector);\\n        //committing USDC calls syncProposals in governance to ensure that the proposals are up to date\\n        //This design is meant to ensure that the proposals are as up to date as possible\\n        GOVERNANCE.syncProposals();\\n        //Increase the total impact power earned by the reward address\\n        totalImpactPowerEarned[rewardAddress] += impactPower;\\n        //Grant the nominations to the reward address\\n        GOVERNANCE.grantNominations(rewardAddress, impactPower);\\n        //Emit a USDCCommitted event\\n        emit IGCC.USDCCommitted(from, rewardAddress, amount, impactPower, referralAddress);\\n    }\\n\\n    /**\\n     * @dev internal function to increase the committing allowance\\n     * @param from the address of the account to increase the allowance from\\n     * @param spender the address of the spender to increase the allowance for\\n     * @param amount the amount to increase the allowance by\\n     * @param emitEvent whether or not to emit the event\\n     */\\n    function _increaseCommitAllowance(address from, address spender, uint256 amount, bool emitEvent) private {\\n        if (amount == 0) {\\n            _revert(IGCC.MustIncreaseCommitAllowanceByAtLeastOne.selector);\\n        }\\n        uint256 currentAllowance = _commitGCCAllowances[from][spender];\\n        uint256 newAllowance;\\n        unchecked {\\n            newAllowance = currentAllowance + amount;\\n        }\\n        //If there was an overflow, then we set the new allowance to type(uint).max\\n        //Since that is where the allowance will be capped anyway\\n        if (newAllowance <= currentAllowance) {\\n            newAllowance = type(uint256).max;\\n        }\\n        _commitGCCAllowances[from][spender] = newAllowance;\\n        if (emitEvent) {\\n            emit IGCC.CommitGCCAllowance(from, spender, newAllowance);\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to decrease the committing allowance\\n     * @param from the address of the account to decrease the allowance from\\n     * @param spender the address of the spender to decrease the allowance for\\n     * @param amount the amount to decrease the allowance by\\n     * @param emitEvent whether or not to emit the event\\n     * @dev underflow auto-reverts due to built in safemath\\n     */\\n    function _decreaseCommitAllowance(address from, address spender, uint256 amount, bool emitEvent) private {\\n        uint256 currentAllowance = _commitGCCAllowances[from][spender];\\n\\n        uint256 newAllowance = currentAllowance - amount;\\n        _commitGCCAllowances[from][spender] = newAllowance;\\n        if (emitEvent) {\\n            emit IGCC.CommitGCCAllowance(from, spender, newAllowance);\\n        }\\n    }\\n\\n    //-------------  PRIVATE UTILS  --------------------//\\n    /**\\n     * @notice Returns the key and shift for a bucketId\\n     * @return key The key for the bucketId\\n     * @return shift The shift for the bucketId\\n     * @dev cant overflow because _BITS_IN_UINT is 256\\n     * @dev no division by zero because _BITS_IN_UINT is 256\\n     */\\n    function _getKeyAndShiftFromBucketId(uint256 bucketId) private pure returns (uint256 key, uint256 shift) {\\n        key = bucketId / _BITS_IN_UINT;\\n        shift = bucketId % _BITS_IN_UINT;\\n    }\\n\\n    /**\\n     * @dev Constructs a committing permit EIP712 message hash to be signed\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param rewardAddress - the address to receive the benefits of committing\\n     * @param referralAddress - the address of the referrer\\n     * @param amount The amount of funds\\n     * @param nonce The next nonce\\n     * @param deadline The deadline for the signature to be valid\\n     * @return digest The EIP712 digest\\n     */\\n    function _constructCommitPermitDigest(\\n        address owner,\\n        address spender,\\n        address rewardAddress,\\n        address referralAddress,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 deadline\\n    ) private view returns (bytes32) {\\n        return _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    COMMIT_PERMIT_TYPEHASH, owner, spender, rewardAddress, referralAddress, amount, nonce, deadline\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Checks if the signature provided is valid for the provided data, hash.\\n     * @param signer The address of the signer.\\n     * @param message The EIP-712 digest.\\n     * @param signature The signature, in bytes.\\n     * @return bool indicating if the signature was valid (true) or not (false).\\n     * @dev accounts for EIP-1271 magic values as well\\n     */\\n    function _checkCommitPermitSignature(address signer, bytes32 message, bytes memory signature)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return SignatureChecker.isValidSignatureNow(signer, message, signature);\\n    }\\n\\n    /**\\n     * @notice Returns the univ2 pair for a given factory and token\\n     * @param factory The address of the univ2 factory\\n     * @param _usdc The address of the USDC token\\n     * @return pair The address of the univ2 pair of the factory and token with this contract\\n     */\\n    function getPair(address factory, address _usdc) internal view virtual returns (address) {\\n        return UniswapV2Library.pairFor(factory, _usdc, address(this));\\n    }\\n    /**\\n     * @notice More efficiently reverts with a bytes4 selector\\n     * @param selector The selector to revert with\\n     */\\n\\n    function _revert(bytes4 selector) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x0, selector)\\n            revert(0x0, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/MinerPoolAndGCA/MinerPoolAndGCA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {GCA} from \\\"./GCA.sol\\\";\\nimport {IGCA} from \\\"@/interfaces/IGCA.sol\\\";\\nimport {IVetoCouncil} from \\\"@/interfaces/IVetoCouncil.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport {IMinerPool} from \\\"@/interfaces/IMinerPool.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {BucketSubmission} from \\\"./BucketSubmission.sol\\\";\\nimport {MerkleProofLib} from \\\"@solady/utils/MerkleProofLib.sol\\\";\\nimport {ISafetyDelay} from \\\"@/SafetyDelay.sol\\\";\\nimport {IGCC} from \\\"@/interfaces/IGCC.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {_BUCKET_DURATION} from \\\"@/Constants/Constants.sol\\\";\\n\\n/**\\n * @title Miner Pool And GCA\\n * @author @DavidVorick\\n * @author @0xSimon(twitter) - 0xSimon(github)\\n *  @notice this contract allows veto council members to delay buckets as defined in the `GCA` contract\\n * @notice It is the entry point for farms participating in GLOW to claim their rewards for their contributions\\n */\\ncontract MinerPoolAndGCA is GCA, EIP712, IMinerPool, BucketSubmission {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev the amount to increase the finalization timestamp of a bucket by\\n     *             -   only veto council agents can delay a bucket.\\n     *             -   the delay is 13 weeks\\n     */\\n    uint256 private constant _BUCKET_DELAY_DURATION = uint256(7 days) * 13;\\n\\n    /// @dev a helper used in a bitmap\\n    uint256 private constant _BITS_IN_UINT = 256;\\n\\n    /// @dev the typehash for the claim reward from bucket eip712 message\\n    bytes32 private constant _CLAIM_REWARD_FROM_BUCKET_TYPEHASH = keccak256(\\n        \\\"ClaimRewardFromBucket(uint256 bucketId,uint256 glwWeight,uint256 usdcWeight,uint256 index,bool claimFromInflation)\\\"\\n    );\\n\\n    /**\\n     * @notice the total amount of glow rewards available for farms per bucket\\n     */\\n    uint256 public constant GLOW_REWARDS_PER_BUCKET = 175_000 ether;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  immutables                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice the address of the early liquidity contract\\n     * @dev used for authorization in {donateToUSDCMinerRewardsPoolEarlyLiquidity}\\n     */\\n    address private immutable _EARLY_LIQUIDITY;\\n\\n    /**\\n     * @dev the address of the veto council contract.\\n     */\\n    address private immutable _VETO_COUNCIL;\\n\\n    /// @notice USDC token address\\n    address public immutable USDC;\\n\\n    /// @notice the holding contract where intermediary rewards are stored\\n    /// @dev when a farm earns a USDC reward, it is sent to the holding contract\\n    ///     - where it will wait a minimum of 1 week before being sent to the farm\\n    ///     - this is in place to prevent a large amount of USDC from being sent to a farm\\n    ///           -   mistakenly or on purpose\\n    ///     - If such a case happens, the Veto Council can delay the holding contract by 13 weeks\\n    ///     - This should give enough time to rectify the situation\\n    ISafetyDelay public immutable HOLDING_CONTRACT;\\n\\n    /// @notice the GCC contract\\n    IGCC public immutable GCC;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   mappings                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev a mapping of (bucketId / 256) -> user  -> bitmap\\n     */\\n    mapping(uint256 => mapping(address => uint256)) private _bucketClaimBitmap;\\n\\n    /**\\n     * @dev a mapping of (bucketId / 256) -> bitmap\\n     */\\n    mapping(uint256 => uint256) private _mintedToCarbonCreditAuctionBitmap;\\n\\n    /**\\n     * @dev a mapping of (bucketId / 256) -> bitmap\\n     * @dev a bucket can only be delayed once\\n     */\\n    mapping(uint256 => uint256) private _bucketDelayedBitmap;\\n\\n    /**\\n     * @dev a mapping of bucketId -> pushed weights\\n     * - we could split this up into a packed map of pushedGlwWeight and pushedUSDCWeight\\n     *         and use one slot to fit 4 (uint32 pushedGlwWeight, uint32 pushedUSDCWeight) tuples,\\n     *         but since this slot will only be cold for the first write of each bucket claim,\\n     *         it's not worth the additional complexity and gas costs on each subsequent write\\n     *         to handle the packing and unpacking.\\n     */\\n    mapping(uint256 => PushedWeights) internal _weightsPushed;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @param pushedGlwWeight - the aggregate amount of glw weight pushed\\n     * @param pushedUSDCWeight - the aggregate amount of USDC weight pushed\\n     * @dev meant to be used in conjunction with the _weightsPushed mapping\\n     *       - when a user claims from a bucket, the pushed weights are added to the total weights\\n     *       - these are tracked to ensure that the pushed weights don't overflow the total weights\\n     *       - that were put in place for that specific bucket\\n     */\\n    struct PushedWeights {\\n        uint64 pushedGlwWeight;\\n        uint64 pushedUSDCWeight;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice constructs a new MinerPoolAndGCA contract\\n     * @param _gcaAgents the addresses of the gca agents the contract starts with\\n     * @param _glowToken the address of the glow token\\n     * @param _governance the address of the governance contract\\n     * @param _requirementsHash the requirements hash of GCA Agents\\n     * @param _usdcToken - the USDC token address\\n     * @param _vetoCouncil - the address of the veto council contract.\\n     * @param _holdingContract - the address of the holding contract\\n     * @param _gcc - the address of the gcc contract\\n     */\\n    constructor(\\n        address[] memory _gcaAgents,\\n        address _glowToken,\\n        address _governance,\\n        bytes32 _requirementsHash,\\n        address _earlyLiquidity,\\n        address _usdcToken,\\n        address _vetoCouncil,\\n        address _holdingContract,\\n        address _gcc\\n    ) payable GCA(_gcaAgents, _glowToken, _governance, _requirementsHash) EIP712(\\\"GCA and MinerPool\\\", \\\"1\\\") {\\n        _EARLY_LIQUIDITY = _earlyLiquidity;\\n        _VETO_COUNCIL = _vetoCouncil;\\n        HOLDING_CONTRACT = ISafetyDelay(_holdingContract);\\n        USDC = _usdcToken;\\n        GCC = IGCC(_gcc);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   donations                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc IMinerPool\\n     */\\n    function donateToUSDCMinerRewardsPool(uint256 amount) external virtual {\\n        uint256 balBefore = IERC20(USDC).balanceOf(address(HOLDING_CONTRACT));\\n        SafeERC20.safeTransferFrom(IERC20(USDC), msg.sender, address(HOLDING_CONTRACT), amount);\\n        uint256 transferredBalance = IERC20(USDC).balanceOf(address(HOLDING_CONTRACT)) - balBefore;\\n        _addToCurrentBucket(transferredBalance);\\n    }\\n\\n    /**\\n     * @inheritdoc IMinerPool\\n     */\\n    function donateToUSDCMinerRewardsPoolEarlyLiquidity(uint256 amount) external virtual {\\n        if (msg.sender != _EARLY_LIQUIDITY) _revert(IMinerPool.CallerNotEarlyLiquidity.selector);\\n        _addToCurrentBucket(amount);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                       minting to carbon credit auction                     */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Handles minting to the carbon credit auction in case the bucket is finalized and no one has claimed from it\\n     * @param bucketId - the id of the bucket\\n     */\\n    function handleMintToCarbonCreditAuction(uint256 bucketId) external {\\n        if (!isBucketFinalized(bucketId)) {\\n            _revert(IMinerPool.BucketNotFinalized.selector);\\n        }\\n        uint256 globalPackedState = getPackedBucketGlobalState(bucketId);\\n        uint256 amountToMint = globalPackedState & _UINT128_MASK;\\n        _handleMintToCarbonCreditAuction(bucketId, amountToMint);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 claiming rewards                           */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc IMinerPool\\n     */\\n    function claimRewardFromBucket(\\n        uint256 bucketId,\\n        uint256 glwWeight,\\n        uint256 usdcWeight,\\n        bytes32[] calldata proof,\\n        uint256 index,\\n        address user,\\n        bool claimFromInflation,\\n        bytes memory signature\\n    ) external {\\n        if (msg.sender != user) {\\n            bytes32 hash = createClaimRewardFromBucketDigest(bucketId, glwWeight, usdcWeight, index, claimFromInflation);\\n            if (!SignatureChecker.isValidSignatureNow(user, hash, signature)) {\\n                _revert(IMinerPool.SignatureDoesNotMatchUser.selector);\\n            }\\n        }\\n        if (!isBucketFinalized(bucketId)) {\\n            _revert(IMinerPool.BucketNotFinalized.selector);\\n        }\\n        if (claimFromInflation) {\\n            claimGlowFromInflation();\\n        }\\n        {\\n            bytes32 root = getBucketRootAtIndexEfficient(bucketId, index);\\n            _checkProof(user, glwWeight, usdcWeight, proof, root);\\n        }\\n\\n        uint256 globalStatePackedData = getPackedBucketGlobalState(bucketId);\\n\\n        /**\\n         * Bit Layout of packed global state\\n         *     [0-127] - totalNewGCC\\n         *     [128-191] - totalGLWRewardsWeight\\n         *     [192-255] - totalUSDCRewardsWeight\\n         */\\n        uint256 totalUSDCWeight = globalStatePackedData >> 192;\\n        uint256 totalGlwWeight = globalStatePackedData >> 128 & _UINT64_MASK;\\n        _checkWeightsForOverflow({\\n            bucketId: bucketId,\\n            totalGlwWeight: totalGlwWeight,\\n            totalUSDCWeight: totalUSDCWeight,\\n            glwWeight: glwWeight,\\n            usdcWeight: usdcWeight\\n        });\\n\\n        _handleMintToCarbonCreditAuction(bucketId, globalStatePackedData & _UINT128_MASK);\\n\\n        //no need to use a mask since totalUSDCWeight uses the last 64 bits, so we can just shift\\n        {\\n            uint256 userBitmap = _getUserBitmapForBucket(bucketId, user);\\n            userBitmap = _checkClaimAvailableAndReturnNewBitmap(bucketId, userBitmap);\\n            _setUserBitmapForBucket(bucketId, user, userBitmap);\\n        }\\n\\n        //Just in case a faulty report is submitted, we need to choose the min of _glwWeight and totalGlwWeight\\n        // so that we don't overflow the available USDC rewards\\n        // and grab rewards from other buckets\\n        uint256 amountInBucket = _getAmountForTokenAndInitIfNot(bucketId);\\n        _revertIfGreater(usdcWeight, totalUSDCWeight, IMinerPool.USDCWeightGreaterThanTotalWeight.selector);\\n        amountInBucket = amountInBucket * usdcWeight / totalUSDCWeight;\\n        if (amountInBucket > 0) {\\n            //Cant overflow since the amountInBucket is less than  or equal to the total amount in the bucket\\n            HOLDING_CONTRACT.addHolding(user, USDC, SafeCast.toUint192(amountInBucket));\\n        }\\n\\n        {\\n            _revertIfGreater(glwWeight, totalGlwWeight, IMinerPool.GlowWeightGreaterThanTotalWeight.selector);\\n            uint256 amountGlowToSend = GLOW_REWARDS_PER_BUCKET * glwWeight / totalGlwWeight;\\n            if (amountGlowToSend > 0) {\\n                SafeERC20.safeTransfer(IERC20(address(GLOW_TOKEN)), user, amountGlowToSend);\\n            }\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 bucket delays                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc IMinerPool\\n     */\\n    function delayBucketFinalization(uint256 bucketId) external {\\n        if (isBucketFinalized(bucketId)) {\\n            _revert(IGCA.BucketAlreadyFinalized.selector);\\n        }\\n        if (!IVetoCouncil(_VETO_COUNCIL).isCouncilMember(msg.sender)) {\\n            _revert(IMinerPool.CallerNotVetoCouncilMember.selector);\\n        }\\n\\n        if (_buckets[bucketId].lastUpdatedNonce != slashNonce) {\\n            _revert(IMinerPool.CannotDelayBucketThatNeedsToUpdateSlashNonce.selector);\\n        }\\n\\n        uint256 key = bucketId / 256;\\n        uint256 shift = bucketId % 256;\\n        uint256 existingBitmap = _bucketDelayedBitmap[key];\\n        uint256 bitmask = 1 << shift;\\n        if (existingBitmap & bitmask != 0) {\\n            _revert(IMinerPool.BucketAlreadyDelayed.selector);\\n        }\\n        _bucketDelayedBitmap[key] = existingBitmap | bitmask;\\n        //If the length is zero that means\\n        // the bucket has never been initialized\\n        // therefore, the veto council should not be able\\n        // to delay a bucket that has never been initialized\\n        if (_buckets[bucketId].reports.length == 0) {\\n            _revert(IMinerPool.CannotDelayEmptyBucket.selector);\\n        }\\n\\n        _buckets[bucketId].finalizationTimestamp += SafeCast.toUint128(bucketDelayDuration());\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                view functions                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns the bucket claim bitmap for a user\\n     * @param bucketId - the bucket id to check\\n     * @dev Each bit in the 256 bit word is a flag for whether the user has claimed from that bucket.\\n     * @dev for example, for bitmap with b'....0011'  with an input of any bucketId between `0-255` means that the user has claimed from buckets 0 and 1\\n     * @dev If `bucketId` is 256, the bitmap returned will start at bucketId 256 in the 0 binary slot.\\n     * @dev a few examples:\\n     *             `bucketId` = 12 returns the bitmap at position 0 which contains the flags for buckets 0-255\\n     *             `bucketId` = 256 returns the bitmap at position 1 which contains the flags for buckets 256- 511\\n     *             `bucketId` = 515 returns the bitmap at position 2 which contains the flags for buckets  512-767\\n     * @return bitmap - the bitmap in which the bucket claim flag is located for the `user`\\n     */\\n    function bucketClaimBitmap(uint256 bucketId, address user) public view returns (uint256) {\\n        return _getUserBitmapForBucket(bucketId, user);\\n    }\\n\\n    /**\\n     * @inheritdoc IMinerPool\\n     */\\n    function hasBucketBeenDelayed(uint256 bucketId) external view returns (bool) {\\n        return _bucketDelayedBitmap[bucketId / 256] & (1 << (bucketId % 256)) != 0;\\n    }\\n\\n    /**\\n     * @notice the early liquidity contract address\\n     * @return the early liquidity contract address\\n     */\\n    function earlyLiquidity() public view returns (address) {\\n        return _EARLY_LIQUIDITY;\\n    }\\n\\n    /**\\n     * @inheritdoc IMinerPool\\n     */\\n    function createClaimRewardFromBucketDigest(\\n        uint256 bucketId,\\n        uint256 glwWeight,\\n        uint256 usdcWeight,\\n        uint256 index,\\n        bool claimFromInflation\\n    ) public view returns (bytes32) {\\n        return keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeparatorV4(),\\n                keccak256(\\n                    abi.encode(\\n                        _CLAIM_REWARD_FROM_BUCKET_TYPEHASH, bucketId, glwWeight, usdcWeight, index, claimFromInflation\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice The amount of time a delay action will delay a bucket by\\n     * @return the amount of time a delay action will delay a bucket by\\n     */\\n    function bucketDelayDuration() public pure virtual returns (uint256) {\\n        return _BUCKET_DELAY_DURATION;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                          internal state changing funcs                     */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice used internally to mint `amount` of GCC to the carbon credit auction contract\\n     * @dev each bucketId can only be used once to mint to the carbon credit auction\\n     * @dev the `_mintedToCarbonCreditAuctionBitmap` is used to track which buckets have already been used to mint to the carbon credit auction\\n     *             -   the key for the mapping is `bucketId / 256`\\n     *             -   where each slot stores a bitmap of the buckets that have been used to mint to the carbon credit auction\\n     * @dev if the bucket has already been used to mint to the carbon credit auction, the function continues\\n     *             -   this behaviour is necessary since the function is called on each claim\\n     *             -   this function's `trigger` is the `claimRewardMultipleRootsOneBucket` function\\n     *             -   it should also be able to be called publically\\n     */\\n    function _handleMintToCarbonCreditAuction(uint256 bucketId, uint256 amountToMint) internal {\\n        uint256 key = bucketId / _BITS_IN_UINT;\\n        uint256 existingBitmap = _mintedToCarbonCreditAuctionBitmap[key];\\n        uint256 shift = bucketId % _BITS_IN_UINT;\\n        uint256 mask = 1 << shift;\\n        if (mask & existingBitmap == 0) {\\n            existingBitmap |= mask;\\n            _mintedToCarbonCreditAuctionBitmap[key] = existingBitmap;\\n            GCC.mintToCarbonCreditAuction(bucketId, amountToMint);\\n        }\\n    }\\n\\n    /**\\n     * @dev used internally to set the user bitmap for a bucket\\n     * @param bucketId - the id of the bucket\\n     *                         - this is divided by 256 to find the key in the mapping\\n     * @param user - the address of the user\\n     * @param userBitmap - the new bitmap to set for the user\\n     */\\n    function _setUserBitmapForBucket(uint256 bucketId, address user, uint256 userBitmap) internal {\\n        _bucketClaimBitmap[bucketId / _BITS_IN_UINT][user] = userBitmap;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 internal view                              */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @dev user internally to check if a user has already claimed for a bucket\\n     *             -   if the have already claimed, the function reverts\\n     *             -   if they have not claimed from the bucket, the function returns the new bitmap that should be stored\\n     * @param bucketId - the id of the bucket\\n     * @param userBitmap - the existing bitmap of the user\\n     * @return userBitmap - the new bitmap of the user\\n     */\\n    function _checkClaimAvailableAndReturnNewBitmap(uint256 bucketId, uint256 userBitmap)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 shift = (bucketId % _BITS_IN_UINT);\\n        uint256 mask = 1 << shift;\\n        if (mask & userBitmap != 0) _revert(IMinerPool.UserAlreadyClaimed.selector);\\n        userBitmap |= mask;\\n        return userBitmap;\\n    }\\n\\n    /**\\n     * @dev used internally check if a proof is valid\\n     * @param payoutWallet - the address of the user\\n     * @param glwWeight - the weight of the user's glw rewards\\n     * @param usdcWeight - the weight of the user's USDC rewards\\n     * @param proof - the merkle proof of the user's rewards\\n     *                     - the leaves are {payoutWallet, glwWeight, usdcWeight}\\n     */\\n    function _checkProof(\\n        address payoutWallet,\\n        uint256 glwWeight,\\n        uint256 usdcWeight,\\n        bytes32[] calldata proof,\\n        bytes32 root\\n    ) internal pure {\\n        bytes32 leaf = keccak256(abi.encodePacked(payoutWallet, glwWeight, usdcWeight));\\n\\n        if (!MerkleProofLib.verifyCalldata(proof, root, leaf)) {\\n            _revert(IMinerPool.InvalidProof.selector);\\n        }\\n    }\\n\\n    /**\\n     * @dev checks to make sure the weights in the report\\n     *         - don't overflow the total weights that have been set for the bucket\\n     *         - Without this check, a malicious weight could be used to overflow the total weights\\n     *         - and grab rewards from other buckets\\n     * @param bucketId - the id of the bucket\\n     * @param totalGlwWeight - the total amount of glw weight for the bucket\\n     * @param totalUSDCWeight - the total amount of USDC weight for the bucket\\n     * @param glwWeight - the glw weight of the leaf in the report being claimed\\n     * @param usdcWeight - the USDC weight of the leaf in the report being claimed\\n     */\\n    function _checkWeightsForOverflow(\\n        uint256 bucketId,\\n        uint256 totalGlwWeight,\\n        uint256 totalUSDCWeight,\\n        uint256 glwWeight,\\n        uint256 usdcWeight\\n    ) internal {\\n        PushedWeights memory pushedWeights = _weightsPushed[bucketId];\\n        pushedWeights.pushedGlwWeight += SafeCast.toUint64(glwWeight);\\n        pushedWeights.pushedUSDCWeight += SafeCast.toUint64(usdcWeight);\\n        if (pushedWeights.pushedGlwWeight > totalGlwWeight) {\\n            _revert(IMinerPool.GlowWeightOverflow.selector);\\n        }\\n        if (pushedWeights.pushedUSDCWeight > totalUSDCWeight) {\\n            _revert(IMinerPool.USDCWeightOverflow.selector);\\n        }\\n        _weightsPushed[bucketId] = pushedWeights;\\n    }\\n\\n    /**\\n     * @dev used internally to get the user bitmap for a bucket\\n     * @param bucketId - the id of the bucket\\n     *                 - this is divided by 256 to find the key in the mapping\\n     * @param user - the address of the user\\n     * @return userBitmap - the bitmap of the user\\n     */\\n    function _getUserBitmapForBucket(uint256 bucketId, address user) internal view returns (uint256) {\\n        return _bucketClaimBitmap[bucketId / _BITS_IN_UINT][user];\\n    }\\n\\n    /**\\n     * @dev used internally to get the genesis timestamp\\n     *             - it must override the function in BucketSubmission\\n     * @return the genesis timestamp\\n     */\\n    function _genesisTimestamp() internal view override(BucketSubmission, GCA) returns (uint256) {\\n        return GENESIS_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev used to pass down the current week to the {GCASalaryHelper} contract\\n     */\\n    function _currentWeek() internal view override(GCA) returns (uint256) {\\n        return currentBucket();\\n    }\\n\\n    /**\\n     * @dev used to pass down the domain separator to the {GCASalaryHelper} contract\\n     */\\n    function _domainSeperatorV4Main() internal view virtual override(GCA) returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @notice returns the bucket duration\\n     * @return bucketDuration - the bucket duration\\n     */\\n    function bucketDuration() internal pure virtual override(GCA, BucketSubmission) returns (uint256) {\\n        return _BUCKET_DURATION;\\n    }\\n\\n    /**\\n     * @notice reverts with {selector} if {a} > {b}\\n     * @param a - the first number\\n     * @param b - the second number\\n     * @param selector - the selector to revert with\\n     */\\n    function _revertIfGreater(uint256 a, uint256 b, bytes4 selector) internal pure {\\n        if (a > b) _revert(selector);\\n    }\\n\\n    /**\\n     * @dev efficient checker for whether an address is the zero address\\n     * @param addr the address to check\\n     * @return res - whether or not the address is the zero address\\n     */\\n    function _isZeroAddress(address addr) internal pure returns (bool res) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            res := iszero(addr)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/GLOW.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IGlow} from \\\"./interfaces/IGlow.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {_GENESIS_TIMESTAMP} from \\\"@/Constants/Constants.sol\\\";\\n/**\\n * @title Glow\\n * @author DavidVorick\\n * @author 0xSimon(twitter) - OxSimbo(github)\\n * @notice The Glow token is the backbone of the protocol\\n *         - Solar farms are rewarded with glow tokens as they produce solar\\n *         - GCA's (Glow Certification Agents) and Veto Council Members are rewarded in GLOW\\n *             - for their contributions\\n *         - The Grants Treasury is rewarded in GLOW for their contributions\\n *         - Holders can anchor (stake) glow to earn voting power in governance\\n *             - anchoring lasts 5 years from the point of unstaking\\n */\\n\\ncontract Glow is ERC20, ERC20Permit, IGlow {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice The cooldown period after unstaking before a user can claim their tokens\\n    uint256 private constant _STAKE_COOLDOWN_PERIOD = 365 days * 5;\\n\\n    /// @notice The amount of GLW that is minted per second for the GCA and Miner Pool\\n    /// @notice 185,000 GLW per week\\n    /// @dev 175,000 to miners\\n    /// @dev 10,000 to the GCAs\\n    uint256 public constant GCA_AND_MINER_POOL_INFLATION_PER_SECOND = 185_000 * 1 ether / uint256(7 days);\\n\\n    /// @notice The amount of GLW that is minted per second for the Veto Council\\n    /// @notice 5,000 GLW per week\\n    uint256 public constant VETO_COUNCIL_INFLATION_PER_SECOND = 5_000 * 1 ether / uint256(7 days);\\n\\n    /// @notice The amount of GLW that is minted per second for the Grants Treasury\\n    /// @notice 40,000 GLW per week\\n    uint256 public constant GRANTS_TREASURY_INFLATION_PER_SECOND = 40_000 * 1 ether / uint256(7 days);\\n\\n    /// @notice the maximum number of times a user can unstake without clearing their unstaked positions\\n    /// @notice before they are forced to wait 1 day before staking again\\n    uint256 public constant MAX_UNSTAKES_BEFORE_EMERGENCY_COOLDOWN = 100;\\n\\n    /// @notice the cooldown period once users stake over 100 times\\n    uint256 public constant EMERGENCY_COOLDOWN_PERIOD = 1 days;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  immutables                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The address of the Early Liquidity Contract\\n    //  solhint-disable-next-line var-name-mixedcase\\n    address public immutable EARLY_LIQUIDITY_ADDRESS;\\n\\n    /// @notice the GCA And Miner Pool address\\n    address public immutable GCA_AND_MINER_POOL_ADDRESS;\\n\\n    /// @notice the Veto Council address\\n    address public immutable VETO_COUNCIL_ADDRESS;\\n\\n    /// @notice the Grants Treasury address\\n    address public immutable GRANTS_TREASURY_ADDRESS;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice The last time the GCA and Miner Pool claimed GLW\\n    uint256 public gcaAndMinerPoolLastClaimedTimestamp;\\n\\n    /// @notice The last time the Veto Council claimed GLW\\n    uint256 public vetoCouncilLastClaimedTimestamp;\\n\\n    /// @notice The last time the Grants Treasury claimed GLW\\n    uint256 public grantsTreasuryLastClaimedTimestamp;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   mappings                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice stores the total amount of GLOW staked by a user\\n    mapping(address => uint256) public numStaked;\\n\\n    /// @notice stores the unstaked positions of a user\\n    mapping(address => mapping(uint256 => UnstakedPosition)) private _unstakedPositions;\\n\\n    /// @notice stores the head of the unstaked positions of a user\\n    /// @dev the head is the last index with data. If we need to push, we push at head + 1\\n    /// @dev if the head is zero, there may or may not be data.\\n    mapping(address => Pointers) private _unstakedPositionPointers;\\n\\n    /// @notice stores the last time a user staked in case the user has over 100 staked positions\\n    mapping(address => uint256) public emergencyLastUnstakeTimestamp;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /*\\n     * @notice Sets the immutable variables (GENESIS_TIMESTAMP, EARLY_LIQUIDITY_ADDRESS)\\n    * @notice sends 12 million GLW to the Early Liquidity Contract and 96 million GLW to the unlocker contract\\n    * @param _earlyLiquidityAddress The address of the Early Liquidity Contract\\n    * @param _vestingContract The address of the vesting contract\\n    * @param _gcaAndMinerPoolAddress The address of the GCA and Miner Pool\\n    * @param _vetoCouncilAddress The address of the Veto Council\\n    * @param _grantsTreasuryAddress The address of the Grants Treasury\\n    */\\n    constructor(\\n        address _earlyLiquidityAddress,\\n        address _vestingContract,\\n        address _gcaAndMinerPoolAddress,\\n        address _vetoCouncilAddress,\\n        address _grantsTreasuryAddress\\n    ) payable ERC20(\\\"Glow\\\", \\\"GLW-BETA\\\") ERC20Permit(\\\"Glow\\\") {\\n        EARLY_LIQUIDITY_ADDRESS = _earlyLiquidityAddress;\\n        GCA_AND_MINER_POOL_ADDRESS = _gcaAndMinerPoolAddress;\\n        VETO_COUNCIL_ADDRESS = _vetoCouncilAddress;\\n        GRANTS_TREASURY_ADDRESS = _grantsTreasuryAddress;\\n        _handleConstructorMint(_earlyLiquidityAddress, _vestingContract, _grantsTreasuryAddress);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  staking                                   */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc IGlow\\n     * @dev if the user has unstaked positions that have already expired,\\n     *         -   the function will auto claim those tokens for the user\\n     */\\n    function stake(uint256 stakeAmount) external {\\n        //Cannot stake zero tokens\\n        if (stakeAmount == 0) _revert(IGlow.CannotStakeZeroTokens.selector);\\n\\n        //Find head tail in the mapping\\n        IGlow.Pointers memory pointers = _unstakedPositionPointers[msg.sender];\\n        uint256 head = pointers.head;\\n\\n        //Init the unstakedTotal\\n        uint256 amountInUserUnstakePool;\\n\\n        //Init the new head\\n        uint256 newHead = head;\\n\\n        uint256 tail = pointers.tail;\\n\\n        //We need to loop through starting from the head (newest positions)\\n        for (uint256 i = head; i >= tail; --i) {\\n            //load the posiiton from storage into memory\\n            UnstakedPosition memory position = _unstakedPositions[msg.sender][i];\\n\\n            //increase the amount in the user unstake pool\\n            //by the amount that is in the position we are on\\n            amountInUserUnstakePool += position.amount;\\n\\n            //If it's exactly equal, that means the data will be fully cleared\\n            //And the head moves to i-1 or 0(if fully empty now)\\n            if (amountInUserUnstakePool == stakeAmount) {\\n                //If i is 0 and the amount is exactly zero,\\n                //that means we can restart the unstaked positions from scratch\\n                if (i == 0) {\\n                    newHead = 0;\\n                    delete _unstakedPositions[msg.sender][newHead];\\n                }\\n                //If i is not zero, we can just move the head to i-1\\n                else {\\n                    newHead = i - 1;\\n                }\\n                break;\\n            }\\n\\n            //If the amount in the user unstake pool is greater than the stake amount\\n            //That means we overshot and we need to pull back the amount we overshot by\\n            if (amountInUserUnstakePool > stakeAmount) {\\n                uint256 overshoot = amountInUserUnstakePool - stakeAmount;\\n                //Let;s say we are at 49 in the stake pool, and then the current position has 10.\\n                //and we wanted to stake a total of 50\\n                //Once we add the amount in this pool, we have a total of 59 in the stake pool amount.\\n                //That means we overshot by 59-50, and the new amount in the stake pool\\n                //Should be the overshot amount.\\n                //Instead of having 10 in the latest pool, we have 9 since we needed to pull 1\\n                newHead = i; //If we overshot, the head stays the same and it does indeed still have data\\n                _unstakedPositions[msg.sender][i].amount = SafeCast.toUint192(overshoot);\\n                break;\\n            }\\n\\n            //If we have reached the tail (oldest position) and we still haven't overshot\\n            //We delete the tail\\n            if (i == tail) {\\n                if (stakeAmount > amountInUserUnstakePool) {\\n                    delete _unstakedPositions[msg.sender][tail];\\n                }\\n                newHead = tail;\\n                break;\\n            }\\n        }\\n\\n        //If the new head is not equal to the old head, we update the head in storage\\n        //We use this equality check to prevent redundant sstores\\n        if (newHead != head) {\\n            _unstakedPositionPointers[msg.sender].head = SafeCast.toUint128(newHead);\\n        }\\n\\n        //If the stake amount is greater than the amount in the user unstake pool\\n        //Then we need to transfer the difference from the user to the contract\\n        if (stakeAmount > amountInUserUnstakePool) {\\n            uint256 amountGlowToTransfer = stakeAmount - amountInUserUnstakePool;\\n            _transfer(msg.sender, address(this), amountGlowToTransfer);\\n        }\\n\\n        //Note: We don't handle the zero case since that would be a redundant transfer\\n\\n        //Increase the number of tokens staked by the user\\n        numStaked[msg.sender] += stakeAmount;\\n        //Emit the Stake event\\n        emit IGlow.Stake(msg.sender, stakeAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function unstake(uint256 amount) external {\\n        //Revert on zero amount\\n        if (amount == 0) _revert(IGlow.CannotUnstakeZeroTokens.selector);\\n\\n        //Load the number of tokens staked by the user\\n        uint256 numAccountStaked = numStaked[msg.sender];\\n\\n        //if the user is unstaking more than they have staked, we revert\\n        if (amount > numAccountStaked) {\\n            _revert(IGlow.UnstakeAmountExceedsStakedBalance.selector);\\n        }\\n\\n        //Find the length of the unstaked positions starting at the tail\\n        //This gives us the # of unstaked positions that the user has\\n        IGlow.Pointers memory pointers = _unstakedPositionPointers[msg.sender];\\n        uint256 adjustedLenBefore = pointers.head - pointers.tail + 1;\\n\\n        uint256 indexInMappingToPushTo = pointers.head + 1;\\n        if (pointers.head == pointers.tail) {\\n            if (_unstakedPositions[msg.sender][pointers.head].amount == 0) {\\n                adjustedLenBefore = 0;\\n                indexInMappingToPushTo = pointers.head;\\n            }\\n        }\\n\\n        //if adjustlenBefore >= 99\\n        // we + 2 to proactively set emergencyLastUpdate when length will be 99 so the 100th unstake will trigger cooldown\\n        if (adjustedLenBefore + 2 > MAX_UNSTAKES_BEFORE_EMERGENCY_COOLDOWN) {\\n            uint256 lastUnstakedTimestamp = emergencyLastUnstakeTimestamp[msg.sender];\\n\\n            //Handle the zero case\\n            if (lastUnstakedTimestamp == 0) {\\n                emergencyLastUnstakeTimestamp[msg.sender] = block.timestamp;\\n                // if the user has unstaked before, we need to check if they are in cooldown\\n            } else if (block.timestamp - lastUnstakedTimestamp < EMERGENCY_COOLDOWN_PERIOD) {\\n                _revert(IGlow.UnstakingOnEmergencyCooldown.selector);\\n                // if the user is not in cooldown, we need to update the timestamp\\n            } else {\\n                emergencyLastUnstakeTimestamp[msg.sender] = block.timestamp;\\n            }\\n        }\\n\\n        //Decrease the number of tokens staked by the user\\n        numStaked[msg.sender] = numAccountStaked - amount;\\n\\n        _unstakedPositions[msg.sender][indexInMappingToPushTo] = UnstakedPosition({\\n            amount: SafeCast.toUint192(amount),\\n            cooldownEnd: SafeCast.toUint64(block.timestamp + _STAKE_COOLDOWN_PERIOD)\\n        });\\n\\n        pointers = Pointers({head: SafeCast.toUint128(indexInMappingToPushTo), tail: pointers.tail});\\n\\n        _unstakedPositionPointers[msg.sender] = pointers;\\n        emit IGlow.Unstake(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function claimUnstakedTokens(uint256 amount) external {\\n        //Cannot claim zero tokens\\n        if (amount == 0) _revert(IGlow.CannotClaimZeroTokens.selector);\\n        uint256 claimableTotal;\\n\\n        //Cache len]0\\n        IGlow.Pointers memory pointers = _unstakedPositionPointers[msg.sender];\\n\\n        uint256 head = pointers.head;\\n        uint256 tail = pointers.tail;\\n        uint256 newTail = tail;\\n\\n        //Loop through the unstaked positions until claimableTotal >= amount\\n        //Tail will also be <= len so no risk of underflow\\n        //Tail should also remain close to len since we delete unstaked positions as we claim them\\n        //and we restrict the number of unstaked positions to 100 before a cooldown is enforced on the user\\n\\n        for (uint256 i = tail; i <= head; ++i) {\\n            //Read the position from storage\\n            UnstakedPosition storage position = _unstakedPositions[msg.sender][i];\\n            //if block.timestamp <= position.cooldownEnd\\n            //If the position is not ready to be claimed, we revert\\n            //  -   this is so because we can't claim tokens that are not ready to be claimed\\n            //  -   and positions are chronologically ordered, so if one position is not ready to be claimed,\\n            //  -   all following positions are not ready to be claimed\\n            //  -   therefore, we can revert early since we'll never have enough tokens to fulfill the claim\\n            if (position.cooldownEnd >= block.timestamp) {\\n                _revert(IGlow.InsufficientClaimableBalance.selector);\\n            }\\n\\n            //Increment the claimableTotal by the position amount\\n            claimableTotal += position.amount;\\n\\n            //If the claimableTotal is equal to the amount, we need to delete the old position and increment the newTail\\n            // - since the old unstaked positions EXACTLY fulfill the amount\\n            if (claimableTotal == amount) {\\n                newTail = i + 1;\\n                if (newTail > head) {\\n                    newTail = head;\\n                }\\n                //Update the tail in storage\\n                _unstakedPositionPointers[msg.sender] =\\n                    Pointers({head: SafeCast.toUint128(head), tail: SafeCast.toUint128(newTail)});\\n                //delete the position for a gas refund\\n                delete _unstakedPositions[msg.sender][i];\\n                //transfer the amount to the user\\n                _transfer(address(this), msg.sender, amount);\\n                //emit the claim event\\n                emit IGlow.ClaimUnstakedGLW(msg.sender, amount);\\n                return;\\n            }\\n\\n            //If the claimableTotal is greater than the amount, we need to  deduct from the position in storage\\n            // and the tail will stay the same since the unstaked position still has some tokens left\\n            if (claimableTotal > amount) {\\n                //New tail is equal to i\\n                newTail = i;\\n                //Check redundancy before sstoring the new tail\\n                if (newTail != tail) {\\n                    _unstakedPositionPointers[msg.sender] =\\n                        Pointers({head: SafeCast.toUint128(head), tail: SafeCast.toUint128(newTail)});\\n                }\\n                //Calculate the amount that is left in the position after the claim\\n                uint256 amountLeftInPosition = claimableTotal - amount;\\n                //Update the position amount in storage\\n                position.amount = SafeCast.toUint192(amountLeftInPosition);\\n                //Transfer the amount to the user\\n                _transfer(address(this), msg.sender, amount);\\n                //Emit the claim event\\n                emit IGlow.ClaimUnstakedGLW(msg.sender, amount);\\n                return;\\n            }\\n\\n            //When looping, we delete all unstaked positions that are consumed\\n            // as part of the token claim\\n            delete _unstakedPositions[msg.sender][i];\\n        }\\n\\n        _revert(IGlow.InsufficientClaimableBalance.selector);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  inflation                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function claimGLWFromGCAAndMinerPool() external returns (uint256) {\\n        //If the address is not set, we revert\\n        if (_isZeroAddress(GCA_AND_MINER_POOL_ADDRESS)) _revert(IGlow.AddressNotSet.selector);\\n        //If the caller is not the GCA and Miner Pool, we revert\\n        if (msg.sender != GCA_AND_MINER_POOL_ADDRESS) _revert(IGlow.CallerNotGCA.selector);\\n        //Read the timestamp from storage\\n        uint256 timestampInStorage = gcaAndMinerPoolLastClaimedTimestamp;\\n        //If the timestamp is zero, we set it to the genesis timestamp\\n        // else we set it to the timestamp in storage\\n        uint256 timestampToClaimFrom = timestampInStorage == 0 ? GENESIS_TIMESTAMP() : timestampInStorage;\\n        //Calculate the seconds since the last claim\\n        uint256 secondsSinceLastClaim = block.timestamp - timestampToClaimFrom;\\n        //Calculate the amount to claim\\n        uint256 amountToClaim = secondsSinceLastClaim * GCA_AND_MINER_POOL_INFLATION_PER_SECOND;\\n        //If the amount to claim is zero, we return zero and exit\\n        if (amountToClaim == 0) return 0;\\n        //if the amount is not zero, we update the timestamp in storage\\n        gcaAndMinerPoolLastClaimedTimestamp = block.timestamp;\\n        //and we mint the amount to the GCA and Miner Pool\\n        _mint(GCA_AND_MINER_POOL_ADDRESS, amountToClaim);\\n        //we then return the amount to claim\\n        return amountToClaim;\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function claimGLWFromVetoCouncil() external returns (uint256) {\\n        //If the address is not set, we revert\\n        if (_isZeroAddress(VETO_COUNCIL_ADDRESS)) _revert(IGlow.AddressNotSet.selector);\\n        //If the caller is not the Veto Council, we revert\\n        if (msg.sender != VETO_COUNCIL_ADDRESS) _revert(IGlow.CallerNotVetoCouncil.selector);\\n        //Read the timestamp from storage\\n        uint256 timestampInStorage = vetoCouncilLastClaimedTimestamp;\\n        //If the timestamp is zero, we set it to the genesis timestamp\\n        // else we set it to the timestamp in storage\\n        uint256 timestampToClaimFrom = timestampInStorage == 0 ? GENESIS_TIMESTAMP() : timestampInStorage;\\n        //Calculate the seconds since the last claim\\n        uint256 secondsSinceLastClaim = block.timestamp - timestampToClaimFrom;\\n        //Calculate the amount to claim\\n        uint256 amountToClaim = secondsSinceLastClaim * VETO_COUNCIL_INFLATION_PER_SECOND;\\n        //If the amount to claim is zero, we return zero and exit\\n        if (amountToClaim == 0) return 0;\\n        //if the amount is not zero, we update the timestamp in storage\\n        vetoCouncilLastClaimedTimestamp = block.timestamp;\\n        //and we mint the amount to the Veto Council\\n        _mint(VETO_COUNCIL_ADDRESS, amountToClaim);\\n        //we then return the amount to claim\\n        return amountToClaim;\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function claimGLWFromGrantsTreasury() external returns (uint256) {\\n        //If the address is not set, we revert\\n        if (_isZeroAddress(GRANTS_TREASURY_ADDRESS)) _revert(IGlow.AddressNotSet.selector);\\n        //If the caller is not the Grants Treasury, we revert\\n        if (msg.sender != GRANTS_TREASURY_ADDRESS) _revert(IGlow.CallerNotGrantsTreasury.selector);\\n        //Read the timestamp from storage\\n        uint256 timestampInStorage = grantsTreasuryLastClaimedTimestamp;\\n        //If the timestamp is zero, we set it to the genesis timestamp\\n        // else we set it to the timestamp in storage\\n        uint256 timestampToClaimFrom = timestampInStorage == 0 ? GENESIS_TIMESTAMP() : timestampInStorage;\\n        //Calculate the seconds since the last claim\\n        uint256 secondsSinceLastClaim = block.timestamp - timestampToClaimFrom;\\n        //Calculate the amount to claim\\n        uint256 amountToClaim = secondsSinceLastClaim * GRANTS_TREASURY_INFLATION_PER_SECOND;\\n        //If the amount to claim is zero, we return zero and exit\\n        if (amountToClaim == 0) return 0;\\n        //if the amount is not zero, we update the timestamp in storage\\n        grantsTreasuryLastClaimedTimestamp = block.timestamp;\\n        //and we mint the amount to the Grants Treasury\\n        _mint(GRANTS_TREASURY_ADDRESS, amountToClaim);\\n        //we then return the amount to claim\\n        return amountToClaim;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                view functions                              */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function unstakedPositionsOf(address account) external view returns (UnstakedPosition[] memory) {\\n        IGlow.Pointers memory pointers = _unstakedPositionPointers[account];\\n        uint256 start = pointers.tail;\\n        uint256 end = pointers.head + 1;\\n        UnstakedPosition[] memory positions = new UnstakedPosition[](end - start);\\n\\n        if (pointers.tail == pointers.head) {\\n            UnstakedPosition memory position = _unstakedPositions[account][pointers.head];\\n            if (position.amount == 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(positions, 0)\\n                }\\n                return positions;\\n            }\\n            positions[0] = position;\\n            ++start;\\n        }\\n        unchecked {\\n            //Start is always less than end so no risk of underflow\\n            //start should also be close to end since we delete unstaked positions as we claim them\\n            // and we restrict the number of unstaked positions to 100 before a cooldown is enforced on the user\\n            for (uint256 i = start; i < end; ++i) {\\n                UnstakedPosition memory position = _unstakedPositions[account][i];\\n                //If the tail is zero and the amount is zero, that means\\n                //There has never been a stake, because if there had been a stake,\\n                //The amount wouldn't be empty,\\n                //And if the amount is empty that means that there has been a claim on that position\\n                //And the tail would not be zero\\n                if (i == 0) {\\n                    if (position.amount == 0) {\\n                        // solhint-disable-next-line no-inline-assembly\\n                        assembly {\\n                            //set the length to 0 in memory\\n                            mstore(positions, 0)\\n                        }\\n                        break;\\n                    }\\n                }\\n                //No addition, therefore no risk of overflow\\n                //i always >= start so no risk of underflow\\n                positions[i - start] = position;\\n            }\\n            return positions;\\n        }\\n    }\\n\\n    /**\\n     * @notice returns the tail of the unstaked positions for the user\\n     * @param account the account to get the tail for\\n     * @return the tail of the unstaked positions for the user\\n     */\\n    function accountUnstakedPositionPointers(address account) external view returns (IGlow.Pointers memory) {\\n        return _unstakedPositionPointers[account];\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n\\n    function unstakedPositionsOf(address account, uint256 start, uint256 end)\\n        external\\n        view\\n        returns (UnstakedPosition[] memory)\\n    {\\n        IGlow.Pointers memory pointers = _unstakedPositionPointers[account];\\n        start = start + pointers.tail;\\n        end = end + pointers.tail;\\n        if (end > pointers.head + 1) {\\n            end = pointers.head + 1;\\n        }\\n\\n        //If the start is greater than the end, we return an empty array\\n        if (start >= end) {\\n            return new UnstakedPosition[](0);\\n        }\\n        UnstakedPosition[] memory positions = new UnstakedPosition[](end - start);\\n\\n        if (pointers.tail == pointers.head) {\\n            UnstakedPosition memory position = _unstakedPositions[account][pointers.head];\\n            if (position.amount == 0) {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    mstore(positions, 0)\\n                }\\n                return positions;\\n            }\\n            positions[0] = position;\\n            ++start;\\n        }\\n\\n        unchecked {\\n            //Start is always less than end so no risk of underflow\\n            //start should also be close to end since we delete unstaked positions as we claim them\\n            // and we restrict the number of unstaked positions to 100 before a cooldown is enforced on the user\\n            for (uint256 i = start; i < end; ++i) {\\n                UnstakedPosition memory position = _unstakedPositions[account][i];\\n                //If the tail is zero and the amount is zero, that means\\n                //There has never been a stake, because if there had been a stake,\\n                //The amount wouldn't be empty,\\n                //And if the amount is empty that means that there has been a claim on that position\\n                //And the tail would not be zero\\n                if (i == 0) {\\n                    if (position.amount == 0) {\\n                        // solhint-disable-next-line no-inline-assembly\\n                        assembly {\\n                            //set the length to 0 in memory\\n                            mstore(positions, 0)\\n                        }\\n                        break;\\n                    }\\n                }\\n                //No addition, therefore no risk of overflow\\n                //i always >= start so no risk of underflow\\n                positions[i - start] = position;\\n            }\\n            return positions;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function gcaInflationData() external view returns (uint256, uint256 totalAlreadyClaimed, uint256 totalToClaim) {\\n        if (_isZeroAddress(GCA_AND_MINER_POOL_ADDRESS)) _revert(IGlow.AddressNotSet.selector);\\n        uint256 timestampInStorage = gcaAndMinerPoolLastClaimedTimestamp;\\n        uint256 timestampToClaimFrom = timestampInStorage == 0 ? GENESIS_TIMESTAMP() : timestampInStorage;\\n        uint256 secondsSinceLastClaim = block.timestamp - timestampToClaimFrom;\\n        totalToClaim = secondsSinceLastClaim * GCA_AND_MINER_POOL_INFLATION_PER_SECOND;\\n        totalAlreadyClaimed = timestampToClaimFrom - GENESIS_TIMESTAMP();\\n        return (timestampInStorage, totalAlreadyClaimed, totalToClaim);\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function vetoCouncilInflationData()\\n        external\\n        view\\n        returns (uint256, uint256 totalAlreadyClaimed, uint256 totalToClaim)\\n    {\\n        if (_isZeroAddress(VETO_COUNCIL_ADDRESS)) _revert(IGlow.AddressNotSet.selector);\\n        uint256 timestampInStorage = vetoCouncilLastClaimedTimestamp;\\n        uint256 timestampToClaimFrom = timestampInStorage == 0 ? GENESIS_TIMESTAMP() : timestampInStorage;\\n        uint256 secondsSinceLastClaim = block.timestamp - timestampToClaimFrom;\\n        totalToClaim = secondsSinceLastClaim * VETO_COUNCIL_INFLATION_PER_SECOND;\\n        totalAlreadyClaimed = timestampToClaimFrom - GENESIS_TIMESTAMP();\\n        return (timestampInStorage, totalAlreadyClaimed, totalToClaim);\\n    }\\n\\n    /**\\n     * @inheritdoc IGlow\\n     */\\n    function grantsTreasuryInflationData()\\n        external\\n        view\\n        returns (uint256, uint256 totalAlreadyClaimed, uint256 totalToClaim)\\n    {\\n        if (_isZeroAddress(GRANTS_TREASURY_ADDRESS)) _revert(IGlow.AddressNotSet.selector);\\n        uint256 timestampInStorage = grantsTreasuryLastClaimedTimestamp;\\n        uint256 timestampToClaimFrom = timestampInStorage == 0 ? GENESIS_TIMESTAMP() : timestampInStorage;\\n        uint256 secondsSinceLastClaim = block.timestamp - timestampToClaimFrom;\\n        totalToClaim = secondsSinceLastClaim * GRANTS_TREASURY_INFLATION_PER_SECOND;\\n        totalAlreadyClaimed = timestampToClaimFrom - GENESIS_TIMESTAMP();\\n        return (timestampInStorage, totalAlreadyClaimed, totalToClaim);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                one time setters                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  getters                                   */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice The timestamp of the genesis block\\n    function GENESIS_TIMESTAMP() public view virtual returns (uint256) {\\n        return _GENESIS_TIMESTAMP;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                       constructor mint virtual                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Mints the initial supply of GLOW\\n     * @param _earlyLiquidityAddress The address of the early liquidity contract\\n     * @param _vestingContract The address of the vesting contract\\n     * @param _grantsTreasryAddress The address of the grants treasury\\n     */\\n    function _handleConstructorMint(\\n        address _earlyLiquidityAddress,\\n        address _vestingContract,\\n        address _grantsTreasryAddress\\n    ) internal virtual {\\n        _mint(_earlyLiquidityAddress, 12_000_000 ether);\\n        _mint(_vestingContract, 96_000_000 ether);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 privte utils                              */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Returns the smaller of two numbers\\n     * @param a The first number\\n     * @param b The second number\\n     */\\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice More efficiently reverts with a bytes4 selector\\n     * @param selector The selector to revert with\\n     */\\n    function _revert(bytes4 selector) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0x0, selector)\\n            revert(0x0, 0x04)\\n        }\\n    }\\n\\n    /**\\n     * @notice More efficient address(0) check\\n     */\\n    function _isZeroAddress(address _address) internal pure returns (bool isZero) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            isZero := iszero(_address)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVetoCouncil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IVetoCouncil {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                    */\\n    /* -------------------------------------------------------------------------- */\\n    error CallerNotGovernance();\\n    error NoRewards();\\n    error ZeroAddressInConstructor();\\n    error MaxCouncilMembersExceeded();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                    */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @param oldMember The address of the member to be slashed or removed\\n     * @param newMember The address of the new member (0 = no new member)\\n     * @param slashOldMember Whether to slash the member or not\\n     */\\n    event VetoCouncilSeatsEdited(address indexed oldMember, address indexed newMember, bool slashOldMember);\\n\\n    /**\\n     * @dev emitted when a council member is paid out\\n     * @param account The address of the council member\\n     * @param amountNow The amount paid out now\\n     * @param amountToBeVested The amount to be vested\\n     */\\n    event CouncilMemberPayout(address indexed account, uint256 amountNow, uint256 amountToBeVested);\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state-changing                             */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Add or remove a council member\\n     * @param oldMember The address of the member to be slashed or removed\\n     * @param newMember The address of the new member (0 = no new member)\\n     * @param slashOldMember Whether to slash the member or not\\n     * @return - true if the council member was added or removed, false if nothing was done\\n     *                 - the function should return false if the new member is already a council member\\n     *                 - if the old member is not a council member, the function should return false\\n     *                 - if the old member is a council member and the new member is the same as the old member, the function should return false\\n     *                 - by adding a new member there would be more than 7 council members, the function should return false\\n     */\\n\\n    function addAndRemoveCouncilMember(address oldMember, address newMember, bool slashOldMember)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice Payout the council member\\n     * @param member The address of the council member\\n     * @param nonce The payout nonce to claim from\\n     * @param sync Whether to sync the vesting schedule or not\\n     * @param members The addresses of the council members that were active at `nonce`\\n     */\\n    function claimPayout(address member, uint256 nonce, bool sync, address[] memory members) external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   view                                    */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns true if the member is a council member\\n     * @param member The address of the member to be checked\\n     * @return - true if the member is a council member\\n     */\\n    function isCouncilMember(address member) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns an the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual returns (uint256) {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n        return current;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGCC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGCC is IERC20 {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                  */\\n    /* -------------------------------------------------------------------------- */\\n    error CallerNotGCAContract();\\n    error BucketAlreadyMinted();\\n    error CommitPermitSignatureExpired();\\n    error CommitSignatureInvalid();\\n    error CommitAllowanceUnderflow();\\n    error MustIncreaseCommitAllowanceByAtLeastOne();\\n    error CannotReferSelf();\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @param lastUpdatedTimestamp - the last timestamp a user earned or used nominations\\n     * @ param amount - the amount of nominations a user has\\n     */\\n    struct Nominations {\\n        uint64 lastUpdatedTimestamp;\\n        uint192 amount;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice is emitted when a user commits credits\\n     * @param account the account that committed credits\\n     * @param rewardAddress the address that earned the credits and nominations\\n     * @param gccAmount the amount of credits committed\\n     * @param usdcEffect the amount of USDC effect\\n     * @param impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     * @param referralAddress the address that referred the account\\n     *             - zero address if no referral\\n     */\\n    event GCCCommitted(\\n        address indexed account,\\n        address indexed rewardAddress,\\n        uint256 gccAmount,\\n        uint256 usdcEffect,\\n        uint256 impactPower,\\n        address referralAddress\\n    );\\n\\n    /**\\n     * @notice is emitted when a user commits USDC\\n     * @param account the account that commit the USDC\\n     * @param rewardAddress the address that earns nominations\\n     * @param amount the amount of USDC commit\\n     * @param impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     * @param referralAddress the address that referred the account\\n     *             - zero address if no referral\\n     */\\n    event USDCCommitted(\\n        address indexed account,\\n        address indexed rewardAddress,\\n        uint256 amount,\\n        uint256 impactPower,\\n        address referralAddress\\n    );\\n\\n    /**\\n     * @notice is emitted when a user approves a spender to commit credits on their behalf\\n     * @param account the account that approved a spender\\n     * @param spender the address of the spender\\n     * @param value -  new total allowance\\n     */\\n    event CommitGCCAllowance(address indexed account, address indexed spender, uint256 value);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   commits                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice allows a user to commit credits\\n     * @param amount the amount of credits to commit\\n     * @param rewardAddress the address to commit the credits to\\n     *     -   Rewards Address earns:\\n     *     -       1.  Carbon Neutrality\\n     *     -       2.  Nominations\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     * @return usdcEffect the amount of USDC used in the LP position\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitGCC(uint256 amount, address rewardAddress, uint256 minImpactPower)\\n        external\\n        returns (uint256 usdcEffect, uint256 impactPower);\\n\\n    /**\\n     * @notice allows a user to commit credits\\n     * @param amount the amount of credits to commit\\n     * @param rewardAddress the address to commit the credits to\\n     *     -   Rewards Address earns:\\n     *     -       1.  Carbon Neutrality\\n     *     -       2.  Nominations\\n     * @param referralAddress the address that referred the account\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @return usdcEffect the amount of USDC used in the LP position\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitGCC(uint256 amount, address rewardAddress, address referralAddress, uint256 minImpactPower)\\n        external\\n        returns (uint256 usdcEffect, uint256 impactPower);\\n\\n    /**\\n     * @notice the entry point for an approved entity to commit credits on behalf of a user\\n     * @param from the address of the user to commit credits from\\n     * @param rewardAddress the address of the reward address to commit credits to\\n     *         - Carbon Neutrality\\n     *         - Nominations\\n     * @param amount the amount of credits to commit\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @return usdcEffect the amount of USDC used in the LP position\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitGCCFor(address from, address rewardAddress, uint256 amount, uint256 minImpactPower)\\n        external\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice the entry point for an approved entity to commit credits on behalf of a user\\n     * @param from the address of the user to commit credits from\\n     * @param rewardAddress the address of the reward address to commit credits to\\n     *         - Carbon Neutrality\\n     *         - Nominations\\n     * @param amount the amount of credits to commit\\n     * @param referralAddress - the address that referred the account\\n     * @param usdcEffect the amount of USDC used in the LP position\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @param impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitGCCFor(\\n        address from,\\n        address rewardAddress,\\n        uint256 amount,\\n        address referralAddress,\\n        uint256 minImpactPower\\n    ) external returns (uint256 usdcEffect, uint256 impactPower);\\n\\n    /**\\n     * @notice the entry point for an approved entity to commit credits on behalf of a user using EIP712 signatures\\n     * @param from the address of the user to commit credits from\\n     * @param rewardAddress the address of the reward address to commit credits to\\n     *         - Carbon Neutrality\\n     *         - Nominations\\n     * @param amount the amount of credits to commit\\n     * @param deadline the deadline for the signature\\n     * @param signature - the signature\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @return usdcEffect the amount of USDC used in the LP position\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitGCCForAuthorized(\\n        address from,\\n        address rewardAddress,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes calldata signature,\\n        uint256 minImpactPower\\n    ) external returns (uint256 usdcEffect, uint256 impactPower);\\n\\n    /**\\n     * @notice the entry point for an approved entity to commit credits on behalf of a user using EIP712 signatures\\n     * @param from the address of the user to commit credits from\\n     * @param rewardAddress the address of the reward address to commit credits to\\n     *         - Carbon Neutrality\\n     *         - Nominations\\n     * @param amount the amount of credits to commit\\n     * @param deadline the deadline for the signature\\n     * @param signature - the signature\\n     * @param referralAddress - the address that referred the account\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @return usdcEffect the amount of USDC used in the LP position\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitGCCForAuthorized(\\n        address from,\\n        address rewardAddress,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes calldata signature,\\n        address referralAddress,\\n        uint256 minImpactPower\\n    ) external returns (uint256 usdcEffect, uint256 impactPower);\\n\\n    /**\\n     * @notice Allows a user to commit USDC\\n     * @param amount the amount of USDC to commit\\n     * @param rewardAddress the address to commit the USDC to\\n     * @param referralAddress the address that referred the account\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitUSDC(uint256 amount, address rewardAddress, address referralAddress, uint256 minImpactPower)\\n        external\\n        returns (uint256 impactPower);\\n\\n    /**\\n     * @notice Allows a user to commit USDC\\n     * @param amount the amount of USDC to commit\\n     * @param rewardAddress the address to commit the USDC to\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitUSDC(uint256 amount, address rewardAddress, uint256 minImpactPower)\\n        external\\n        returns (uint256 impactPower);\\n\\n    /**\\n     * @notice Allows a user to commit USDC using permit\\n     * @param amount the amount of USDC to commit\\n     * @param rewardAddress the address to commit the USDC to\\n     * @param referralAddress the address that referred the account\\n     * @param deadline the deadline for the signature\\n     * @param v the v value of the signature for permit\\n     * @param r the r value of the signature for permit\\n     * @param s the s value of the signature for permit\\n     * @param minImpactPower - the minimum amount of impact power to receive from the commitment\\n     *\\n     * @return impactPower - sqrt(amount gcc used in lp * amountc usdc used in lp) aka nominations granted\\n     */\\n    function commitUSDCSignature(\\n        uint256 amount,\\n        address rewardAddress,\\n        address referralAddress,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 minImpactPower\\n    ) external returns (uint256 impactPower);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   minting                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice allows gca contract to mint GCC to the carbon credit auction\\n     * @dev must callback to the carbon credit auction contract so it can organize itself\\n     * @dev a bucket can only be minted from once\\n     * @param bucketId the id of the bucket to mint from\\n     * @param amount the amount of GCC to mint\\n     */\\n    function mintToCarbonCreditAuction(uint256 bucketId, uint256 amount) external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   view functions                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns a boolean indicating if the bucket has been minted\\n     * @return if the bucket has been minted\\n     */\\n    function isBucketMinted(uint256 bucketId) external view returns (bool);\\n\\n    /**\\n     * @notice direct setter to set transfer allowance and committing allowance in one transaction for a {spender}\\n     * @param spender the address of the spender to set the allowances for\\n     * @param transferAllowance the amount of transfer allowance to set\\n     * @param committingAllowance the amount of committing allowance to set\\n     */\\n    function setAllowances(address spender, uint256 transferAllowance, uint256 committingAllowance) external;\\n\\n    /**\\n     * @notice approves a spender to commit credits on behalf of the caller\\n     * @param spender the address of the spender\\n     * @param amount the amount of credits to approve\\n     */\\n    function increaseCommitAllowance(address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice decreases a spender's allowance to commit credits on behalf of the caller\\n     * @param spender the address of the spender\\n     * @param amount the amount of credits to decrease the allowance by\\n     */\\n    function decreaseCommitAllowance(address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice allows a user to increase the erc20 and committing allowance of a spender in one transaction\\n     * @param spender the address of the spender\\n     * @param addedValue the amount of credits to increase the allowance by\\n     */\\n    function increaseAllowances(address spender, uint256 addedValue) external;\\n\\n    /**\\n     * @notice allows a user to decrease the erc20 and committing allowance of a spender in one transaction\\n     * @param spender the address of the spender\\n     * @param requestedDecrease the amount of credits to decrease the allowance by\\n     */\\n    function decreaseAllowances(address spender, uint256 requestedDecrease) external;\\n\\n    /**\\n     * @notice returns the committing allowance for a user\\n     * @param account the address of the account to check\\n     * @param spender the address of the spender to check\\n     * @return the committing allowance\\n     */\\n    function commitAllowance(address account, address spender) external view returns (uint256);\\n\\n    /**\\n     * @notice returns the next nonce to be used when committing credits\\n     *         - only applies when the user is using EIP712 signatures similar to Permit\\n     * @param account the address of the account to check\\n     */\\n    function nextCommitNonce(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICarbonCreditAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ICarbonCreditAuction {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   state-changing                           */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice receives GCC from the miner pool\\n     * @param amount the amount of GCC to receive\\n     * @dev this function can only be called by the miner pool contract\\n     */\\n    function receiveGCC(uint256 amount) external;\\n    /**\\n     * @notice purchases {unitsToBuy} units of GCC at a maximum price of {maxPricePerUnit} GLOW per unit\\n     * @param unitsToBuy the number of units to buy\\n     * @param maxPricePerUnit the maximum price per unit that the user is willing to pay\\n     */\\n    function buyGCC(uint256 unitsToBuy, uint256 maxPricePerUnit) external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice returns the price per unit of GCC\\n     */\\n    function getPricePerUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total supply of GCC available for sale in WEI\\n     * @dev this is not to be confused with the total units of GCC available for sale\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the number of units of GCC available for sale\\n     */\\n    function unitsForSale() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the cumulative total number of units of GCC that have been sold or are available for sale\\n     */\\n    function totalSaleUnits() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IGovernance {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error ProposalHasNotExpired(uint256 proposalId);\\n    error ProposalExpired();\\n    error InsufficientNominations();\\n    error GCAContractAlreadySet();\\n    error CallerNotGCA();\\n    error CallerNotGCC();\\n    error CallerNotVetoCouncilMember();\\n    error ZeroAddressNotAllowed();\\n    error ContractsAlreadySet();\\n    error NominationCostGreaterThanAllowance();\\n    error ProposalDoesNotExist();\\n    error WeekNotStarted();\\n    error WeekNotFinalized();\\n    error InsufficientRatifyOrRejectVotes();\\n    error RatifyOrRejectPeriodEnded();\\n    error RatifyOrRejectPeriodNotEnded();\\n    error MostPopularProposalNotSelected();\\n    error ProposalAlreadyVetoed();\\n    error AlreadyEndorsedWeek();\\n    error OnlyGCAElectionsCanBeEndorsed();\\n    error MaxGCAEndorsementsReached();\\n    error VetoCouncilElectionsCannotBeVetoed();\\n    error GCACouncilElectionsCannotBeVetoed();\\n    error ProposalsMustBeExecutedSynchonously();\\n    error ProposalNotInitialized();\\n    error RFCPeriodNotEnded();\\n    error ProposalAlreadyExecuted();\\n    error ProposalIdDoesNotMatchMostPopularProposal();\\n    error ProposalNotMostPopular();\\n    error VetoCouncilProposalCreationOldMemberCannotEqualNewMember();\\n    error MaximumNumberOfGCAS();\\n    error InvalidSpendNominationsOnProposalSignature();\\n\\n    error MaxSlashesInGCAElection();\\n    error SpendNominationsOnProposalSignatureExpired();\\n    error ProposalIsVetoed();\\n    error VetoMemberCannotBeNullAddress();\\n    error WeekMustHaveEndedToAcceptRatifyOrRejectVotes();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    enums                                   */\\n    /* -------------------------------------------------------------------------- */\\n    enum ProposalType {\\n        NONE, //default value for unset proposals\\n        VETO_COUNCIL_ELECTION_OR_SLASH,\\n        GCA_COUNCIL_ELECTION_OR_SLASH,\\n        GRANTS_PROPOSAL,\\n        CHANGE_GCA_REQUIREMENTS,\\n        REQUEST_FOR_COMMENT\\n    }\\n\\n    enum ProposalStatus {\\n        NONE,\\n        EXECUTED_WITH_ERROR,\\n        EXECUTED_SUCCESSFULLY,\\n        VETOED\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @param proposalType the type of the proposal\\n     * @param expirationTimestamp the timestamp at which the proposal expires\\n     * @param data the data of the proposal\\n     */\\n    struct Proposal {\\n        ProposalType proposalType;\\n        uint64 expirationTimestamp;\\n        uint184 votes;\\n        bytes data;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                   */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Emitted when a Veto Council Election or Slash proposal is created\\n     * @param proposalId the id of the proposal\\n     * @param proposer the address of the proposer\\n     * @param oldAgent the address of the old agent\\n     * @param newAgent the address of the new agent\\n     * @param slashOldAgent whether or not to slash the old agent\\n     * @param nominationsUsed the amount of nominations used\\n     */\\n    event VetoCouncilElectionOrSlash(\\n        uint256 indexed proposalId,\\n        address indexed proposer,\\n        address oldAgent,\\n        address newAgent,\\n        bool slashOldAgent,\\n        uint256 nominationsUsed\\n    );\\n\\n    /**\\n     * @notice Emitted when a GCA Council Election or Slash proposal is created\\n     * @param proposalId the id of the proposal\\n     * @param proposer the address of the proposer\\n     * @param agentsToSlash the addresses of the agents to slash\\n     * @param newGCAs the addresses of the new GCAs\\n     * @param proposalCreationTimestamp the timestamp at which the proposal was created\\n     *         -   This is necessary due to the proposalHashes logic in GCA\\n     * @param nominationsUsed the amount of nominations used\\n     */\\n    event GCACouncilElectionOrSlashCreation(\\n        uint256 indexed proposalId,\\n        address indexed proposer,\\n        address[] agentsToSlash,\\n        address[] newGCAs,\\n        uint256 proposalCreationTimestamp,\\n        uint256 nominationsUsed\\n    );\\n\\n    /**\\n     * @notice emitted when a grants proposal is created\\n     * @param proposalId the id of the proposal\\n     * @param proposer the address of the proposer\\n     * @param recipient the address of the recipient\\n     * @param amount the amount of tokens to send\\n     * @param hash the hash of the proposal contents\\n     * @param nominationsUsed the amount of nominations used\\n     */\\n    event GrantsProposalCreation(\\n        uint256 indexed proposalId,\\n        address indexed proposer,\\n        address recipient,\\n        uint256 amount,\\n        bytes32 hash,\\n        uint256 nominationsUsed\\n    );\\n\\n    /**\\n     * @notice emitted when a proposal to change the GCA requirements is created\\n     * @param proposalId the id of the proposal\\n     * @param proposer the address of the proposer\\n     * @param requirementsHash the hash of the requirements\\n     * @param nominationsUsed the amount of nominations used\\n     */\\n    event ChangeGCARequirementsProposalCreation(\\n        uint256 indexed proposalId, address indexed proposer, bytes32 requirementsHash, uint256 nominationsUsed\\n    );\\n\\n    /**\\n     * @notice emitted when a request for comment is created\\n     * @param proposalId the id of the proposal\\n     * @param proposer the address of the proposer\\n     * @param rfcHash the hash of the requirements string\\n     * @param nominationsUsed the amount of nominations used\\n     */\\n    event RFCProposalCreation(\\n        uint256 indexed proposalId, address indexed proposer, bytes32 rfcHash, uint256 nominationsUsed\\n    );\\n\\n    /**\\n     * @notice emitted when a long glow staker casts a ratify vote on a proposal\\n     * @param proposalId the id of the proposal\\n     * @param voter the address of the voter\\n     * @param numVotes the number of ratify votes\\n     */\\n    event RatifyCast(uint256 indexed proposalId, address indexed voter, uint256 numVotes);\\n\\n    /**\\n     * @notice emitted when a long glow staker casts a reject vote on a proposal\\n     * @param proposalId the id of the proposal\\n     * @param voter the address of the voter\\n     * @param numVotes the number of reject votes\\n     */\\n    event RejectCast(uint256 indexed proposalId, address indexed voter, uint256 numVotes);\\n\\n    /**\\n     * @notice emitted when nominations are used on a proposal\\n     * @param proposalId the id of the proposal\\n     * @param spender the address of the spender\\n     * @param amount the amount of nominations used\\n     */\\n    event NominationsUsedOnProposal(uint256 indexed proposalId, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice emitted when a proposal is set as the most popular proposal at a week\\n     * @param weekId - the weekId in which the proposal was selected as the most popular proposal\\n     * @param proposalId - the id of the proposal that was selected as the most popular proposal\\n     */\\n    event MostPopularProposalSet(uint256 indexed weekId, uint256 indexed proposalId);\\n\\n    /**\\n     * @notice emitted when a proposal is ratified\\n     * @param weekId - the weekId in which the proposal to be vetoed was selected as the most popular proposal\\n     * @param vetoer - the address of the veto council member who vetoed the proposal\\n     * @param proposalId - the id of the proposal that was vetoed\\n     */\\n    event ProposalVetoed(uint256 indexed weekId, address indexed vetoer, uint256 proposalId);\\n\\n    /**\\n     * @notice emitted when an rfc proposal is executed succesfully.\\n     * - RFC Proposals don't change the state of the system, so rather than performing state changes\\n     *         - we emit an event to alert that the proposal was executed succesfully\\n     *         - and that the rfc requires attention\\n     * @param proposalId - the id of the proposal from which the rfc was created\\n     * @param requirementsHash - the hash of the requirements string\\n     */\\n    event RFCProposalExecuted(uint256 indexed proposalId, bytes32 requirementsHash);\\n\\n    /**\\n     * @notice emitted when a proposal is executed  for the week\\n     * @param week - the week for which the proposal was the most popular proposal\\n     * @param proposalId - the id of the proposal that was executed\\n     * @param proposalType - the type of the proposal that was executed\\n     * @param success - whether or not the proposal was executed succesfully\\n     */\\n    event ProposalExecution(uint256 indexed week, uint256 proposalId, ProposalType proposalType, bool success);\\n\\n    /**\\n     * @notice Allows the GCC contract to grant nominations to {to} when they retire GCC\\n     * @param to the address to grant nominations to\\n     * @param amount the amount of nominations to grant\\n     */\\n    function grantNominations(address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Executes a most popular proposal at a given week\\n     * @dev a proposal that has not been ratified or rejected can be executed\\n     *         - but should never make any changes to the system (exceptions are detailed in the implementation)\\n     * @dev proposals that have met their requirements to perform state changes are executed as well\\n     * @dev no execution of any proposal should ever revert as this will freeze the governance contract\\n     * @param weekId the weekId that containst the 'mostPopularProposal' at that week\\n     * @dev proposals must be executed synchronously to ensure that the state of the system is consistent\\n     */\\n    function executeProposalAtWeek(uint256 weekId) external;\\n\\n    /**\\n     * @notice syncs all proposals that must be synced\\n     */\\n    function syncProposals() external;\\n\\n    /**\\n     * @notice allows a veto council member to endorse a gca election\\n     * @param weekId the weekId of the gca election to endorse\\n     */\\n    function endorseGCAProposal(uint256 weekId) external;\\n}\\n\"\r\n    },\r\n    \"src/CarbonCreditDescendingPriceAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {HalfLifeCarbonCreditAuction} from \\\"@/libraries/HalfLifeCarbonCreditAuction.sol\\\";\\nimport {ICarbonCreditAuction} from \\\"@/interfaces/ICarbonCreditAuction.sol\\\";\\n/**\\n * @title CarbonCreditDescendingPriceAuction\\n * @notice This contract is a reverse dutch auction for GCC.\\n *         - The price has a half life of 1 week\\n *         - The max that the price can grow is 2x per 24 hours\\n *         - For every sale made, the price increases by the % of the total sold that the sale was\\n *             - For example, if 10% of the available GCC is sold, then the price increases by 10%\\n *             - If 100% of the available GCC is sold, then the price doubles\\n *         - GCC is added to the pool of available GCC linearly over the course of a week\\n *         - When new GCC is added, all pending vesting amounts and the new amount are vested over the course of a week\\n *         - There is no cap on the amount of GCC that can be purchased in a single transaction\\n *         - All GCC donations must be registered by the miner pool contract\\n * @author DavidVorick\\n * @author 0xSimon(twitter) -  0xSimbo(github)\\n */\\n\\ncontract CarbonCreditDescendingPriceAuction is ICarbonCreditAuction {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error CallerNotGCC();\\n    error UserPriceNotHighEnough();\\n    error NotEnoughGCCForSale();\\n    error CannotBuyZeroUnits();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @dev The precision (magnifier) used for calculations\\n    uint256 private constant PRECISION = 1e8;\\n    /// @dev The number of seconds in a day\\n    uint256 private constant ONE_DAY = uint256(1 days);\\n    /// @dev The number of seconds in a week\\n    uint256 private constant ONE_WEEK = uint256(7 days);\\n    /**\\n     * @notice the amount of GCC sold within a single unit (0.000000000001 GCC)\\n     * @dev This is equal to 1e-12 GCC\\n     */\\n    uint256 public constant SALE_UNIT = 1e6;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 immutables                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The GLOW token\\n    IERC20 public immutable GLOW;\\n    /// @notice The GCC token\\n    IERC20 public immutable GCC;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev a variable to keep track of the total amount of GCC that has been fully vested\\n     *         - it's not accurate and should only be used in conjunction with\\n     *             - {totalAmountReceived} to calculate the total supply\\n     *             - as shown in {totalSupply}\\n     */\\n    uint256 internal _pesudoTotalAmountFullyAvailableForSale;\\n\\n    /// @notice The total amount of GLOW received from the miner pool\\n    uint256 public totalAmountReceived;\\n\\n    /// @notice The total number of units of GCC sold\\n    uint256 public totalUnitsSold;\\n\\n    /// @notice The price of GCC 24 hours ago\\n    ///         - this price is not accurate if there have been no sales in the last 24 hours\\n    ///         - it should not be relied on for accurate calculations\\n    uint256 public pseudoPrice24HoursAgo;\\n\\n    /// @dev The price of GCC per sale unit\\n    /// @dev this price is not the actual price, and should be used in conjunction with {getPricePerUnit}\\n    uint256 internal pricePerSaleUnit;\\n\\n    /// @notice The timestamps\\n    Timestamps public timestamps;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev A struct to keep track of the timestamps all in a single slot\\n     * @param lastSaleTimestamp the timestamp of the last sale\\n     * @param lastReceivedTimestamp the timestamp of the last time GCC was received from the miner pool\\n     * @param lastPriceChangeTimestamp the timestamp of the last time the price changed\\n     */\\n    struct Timestamps {\\n        uint64 lastSaleTimestamp;\\n        uint64 lastReceivedTimestamp;\\n        uint64 lastPriceChangeTimestamp;\\n        uint64 firstReceivedTimestamp;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @param glow the GLOW token\\n     * @param gcc the GCC token\\n     * @param startingPrice the starting price of 1 unit of GCC\\n     */\\n    constructor(IERC20 glow, IERC20 gcc, uint256 startingPrice) payable {\\n        GLOW = glow;\\n        GCC = gcc;\\n        pricePerSaleUnit = startingPrice;\\n        pseudoPrice24HoursAgo = startingPrice;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 buy gcc                                    */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function buyGCC(uint256 unitsToBuy, uint256 maxPricePerUnit) external {\\n        if (unitsToBuy == 0) {\\n            _revert(CannotBuyZeroUnits.selector);\\n        }\\n        Timestamps memory _timestamps = timestamps;\\n        uint256 _lastPriceChangeTimestamp = _timestamps.lastPriceChangeTimestamp;\\n        uint256 _pseudoPrice24HoursAgo = pseudoPrice24HoursAgo;\\n        uint256 price = getPricePerUnit();\\n        if (price > maxPricePerUnit) {\\n            _revert(UserPriceNotHighEnough.selector);\\n        }\\n        uint256 gccPurchasing = unitsToBuy * SALE_UNIT;\\n        uint256 glowToTransfer = unitsToBuy * price;\\n\\n        uint256 totalSaleUnitsAvailable = totalSaleUnits();\\n        uint256 saleUnitsLeftForSale = totalSaleUnitsAvailable - totalUnitsSold;\\n\\n        if (saleUnitsLeftForSale < unitsToBuy) {\\n            _revert(NotEnoughGCCForSale.selector);\\n        }\\n\\n        uint256 newPrice = price + (price * (unitsToBuy * PRECISION / saleUnitsLeftForSale) / PRECISION);\\n\\n        //The new price can never grow more than 100% in 24 hours\\n        if (newPrice * PRECISION / _pseudoPrice24HoursAgo > 2 * PRECISION) {\\n            newPrice = _pseudoPrice24HoursAgo * 2;\\n        }\\n        //If it's been more than a day since the last sale, then update the price\\n        //To the price in the current tx\\n        //Also update the last price change timestamp\\n        if (block.timestamp - _lastPriceChangeTimestamp > ONE_DAY) {\\n            pseudoPrice24HoursAgo = price;\\n            _lastPriceChangeTimestamp = block.timestamp;\\n        }\\n\\n        //\\n        pricePerSaleUnit = newPrice;\\n\\n        totalUnitsSold += unitsToBuy;\\n        timestamps = Timestamps({\\n            lastSaleTimestamp: uint64(block.timestamp),\\n            lastReceivedTimestamp: _timestamps.lastReceivedTimestamp,\\n            lastPriceChangeTimestamp: uint64(_lastPriceChangeTimestamp),\\n            firstReceivedTimestamp: _timestamps.firstReceivedTimestamp\\n        });\\n        GLOW.transferFrom(msg.sender, address(this), glowToTransfer);\\n        GCC.transfer(msg.sender, gccPurchasing);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 receive gcc                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function receiveGCC(uint256 amount) external {\\n        if (msg.sender != address(GCC)) {\\n            _revert(CallerNotGCC.selector);\\n        }\\n        Timestamps memory _timestamps = timestamps;\\n        _pesudoTotalAmountFullyAvailableForSale = totalSupply();\\n        timestamps = Timestamps({\\n            lastSaleTimestamp: _timestamps.lastSaleTimestamp,\\n            lastReceivedTimestamp: uint64(block.timestamp),\\n            lastPriceChangeTimestamp: _timestamps.lastPriceChangeTimestamp,\\n            firstReceivedTimestamp: _timestamps.firstReceivedTimestamp == 0\\n                ? uint64(block.timestamp)\\n                : _timestamps.firstReceivedTimestamp\\n        });\\n        totalAmountReceived += amount;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function getPricePerUnit() public view returns (uint256) {\\n        Timestamps memory _timestamps = timestamps;\\n        uint256 _lastSaleTimestamp = _timestamps.lastSaleTimestamp;\\n        uint256 firstReceivedTimestamp = _timestamps.firstReceivedTimestamp;\\n        if (firstReceivedTimestamp == 0) {\\n            return pricePerSaleUnit;\\n        }\\n        if (_lastSaleTimestamp == 0) {\\n            _lastSaleTimestamp = firstReceivedTimestamp;\\n        }\\n        uint256 _pricePerSaleUnit = pricePerSaleUnit;\\n        return\\n            HalfLifeCarbonCreditAuction.calculateHalfLifeValue(_pricePerSaleUnit, block.timestamp - _lastSaleTimestamp);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        Timestamps memory _timestamps = timestamps;\\n        uint256 _lastReceivedTimestamp = _timestamps.lastReceivedTimestamp;\\n        uint256 _totalAmountReceived = totalAmountReceived;\\n        uint256 amountThatNeedsToVest = _totalAmountReceived - _pesudoTotalAmountFullyAvailableForSale;\\n        uint256 timeDiff = _min(ONE_WEEK, block.timestamp - _lastReceivedTimestamp);\\n        return (_pesudoTotalAmountFullyAvailableForSale + amountThatNeedsToVest * timeDiff / ONE_WEEK);\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function unitsForSale() external view returns (uint256) {\\n        return totalSaleUnits() - totalUnitsSold;\\n    }\\n\\n    /**\\n     * @inheritdoc ICarbonCreditAuction\\n     */\\n    function totalSaleUnits() public view returns (uint256) {\\n        return totalSupply() / (SALE_UNIT);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                     utils                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @param a the first number\\n     * @param b the second number\\n     * @return smaller - the smaller of the two numbers\\n     */\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? b : a;\\n    }\\n\\n    /**\\n     * @notice More efficiently reverts with a bytes4 selector\\n     * @param selector The selector to revert with\\n     */\\n    function _revert(bytes4 selector) private pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0x0, selector)\\n            revert(0x0, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUniswapRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapRouterV2 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function factory() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/ImpactCatalyst.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IUniswapRouterV2} from \\\"@/interfaces/IUniswapRouterV2.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IUniswapV2Pair} from \\\"@/interfaces/IUniswapV2Pair.sol\\\";\\nimport {UniswapV2Library} from \\\"@/libraries/UniswapV2Library.sol\\\";\\n/**\\n * @title ImpactCatalyst\\n * @notice A contract for managing the GCC and USDC commitment\\n *         A commitment is when a user `donates` their GCC or USDC to the GCC-USDC pool\\n *         to increase the liquidity of the pool and earn nominations\\n *         For each commit, `amount` of GCC or USDC is swapped for the other token\\n *         for the optimal amount such that the return amount of the other token\\n *         is exactly enough to add liquidity to the GCC-USDC pool without any leftover of either token\\n *         (precision errors may have small dust)\\n *         - Nominations are granted as (sqrt(amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition))\\n *                 - or as the amount of liquidity tokens created from adding liquidity to the GCC-USDC pool\\n *         - This is done to battle the quadratic nature of K in the UniswapV2Pair contract and standardize nominations\\n * @dev only the GCC contract can call this contract since GCC is the only contract that is allowed to grant nominations\\n * - having the catalyst calls be open would lead to commitment that would not earn any impact points / rewards / nominations\\n */\\n\\ncontract ImpactCatalyst {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error CallerNotGCC();\\n    error PrecisionLossLeadToUnderflow();\\n    error NotEnoughImpactPowerFromCommitment();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @dev the magnification of GCC to use in {findOptimalAmountToSwap} to reduce precision loss\\n    /// @dev GCC is in 18 decimals, so we can make it 1e18 to reduce precision loss\\n    uint256 private constant GCC_MAGNIFICATION = 1e18;\\n\\n    /// @dev the magnification of USDC to use in {findOptimalAmountToSwap} to reduce precision loss\\n    /// @dev USDC is in 6 decimals, so we can make it 1e24 to reduce precision loss\\n    uint256 private constant USDC_MAGNIFICATION = 1e24;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 immutables                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice the GCC token\\n    address public immutable GCC;\\n\\n    /// @notice the USDC token\\n    address public immutable USDC;\\n\\n    /// @notice the uniswap router\\n    IUniswapRouterV2 public immutable UNISWAP_ROUTER;\\n\\n    /// @notice the uniswap factory\\n    address public immutable UNISWAP_V2_FACTORY;\\n\\n    /// @notice the uniswap pair of GCC and USDC\\n    address public immutable UNISWAP_V2_PAIR;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @param _usdc - the address of the USDC token\\n     * @param router - the address of the uniswap router\\n     * @param factory - the address of the uniswap factory\\n     * @param pair - the address of the uniswap pair of GCC and USDC\\n     */\\n    constructor(address _usdc, address router, address factory, address pair) payable {\\n        GCC = msg.sender;\\n        USDC = _usdc;\\n        UNISWAP_ROUTER = IUniswapRouterV2(router);\\n        UNISWAP_V2_FACTORY = factory;\\n        UNISWAP_V2_PAIR = pair;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 gcc commits                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice entry point for GCC to commit GCC\\n     * @dev the commit process is as follows:\\n     *         1. GCC is swapped for USDC\\n     *         2. GCC and USDC are added to the GCC-USDC pool\\n     *         3. The user receives impact points and nominations (handled in GCC contract)\\n     *     - The point is to commit the GCC while adding liquidity to increase incentives for farms\\n     * @param amount the amount of GCC to commit\\n     * @param minImpactPower the minimum amount of impact power expected to be earned from the commitment\\n     * @return usdcEffect - the amount of USDC used in the LP Position\\n     * @return nominations - the amount of nominations to earn sqrt(amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition)\\n     *                        - we do this to battle the quadratic nature of K in the UniswapV2Pair contract and standardize nominations\\n     */\\n    function commitGCC(uint256 amount, uint256 minImpactPower)\\n        external\\n        returns (uint256 usdcEffect, uint256 nominations)\\n    {\\n        // Commitments can only be made through the GCC contract\\n        if (msg.sender != GCC) {\\n            _revert(CallerNotGCC.selector);\\n        }\\n        // Find the reserves of GCC and USDC in the GCC-USDC pool\\n        (uint256 reserveA, uint256 reserveB,) = IUniswapV2Pair(UNISWAP_V2_PAIR).getReserves();\\n        //Find the reserve of GCC and USDC in the GCC-USDC pool\\n        uint256 reserveGCC = GCC < USDC ? reserveA : reserveB;\\n\\n        // Find the optimal amount of GCC to swap for USDC\\n        // This ensures that the return amount of USDC after the swap\\n        // Should be exactly enough to add liquidity to the GCC-USDC pool with the remainder of `amount` of GCC left over\\n        uint256 amountToSwap =\\n            findOptimalAmountToSwap(amount * GCC_MAGNIFICATION, reserveGCC * GCC_MAGNIFICATION) / GCC_MAGNIFICATION;\\n\\n        //Approve the GCC token to be spent by the router\\n        IERC20(GCC).approve(address(UNISWAP_ROUTER), amount);\\n        //Create the path for the swap\\n        address[] memory path = new address[](2);\\n        path[0] = GCC;\\n        path[1] = USDC;\\n        //Swap the GCC for USDC\\n\\n        // If impact power = sqrt(amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition)\\n        // square both sides, and we get impact power ^ 2 = amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition\\n        // so we can find the minimum amount of USDC expected from the swap by doing\\n        // minimumUSDCExpected = (minImpactPower * minImpactPower) / (amount - amountToSwap)\\n        // since amount - amountToSwap is the expected amount of GCC used in the liquidity position\\n        uint256 minimumUSDCExpected = (minImpactPower * minImpactPower) / (amount - amountToSwap);\\n        uint256[] memory amounts = UNISWAP_ROUTER.swapExactTokensForTokens({\\n            amountIn: amountToSwap,\\n            // we allow for a 1% slippage based on the minimum impact power,\\n            // due to potential rounding errors in the findOptimalAmountToSwap function\\n            amountOutMin: minimumUSDCExpected * 99 / 100,\\n            path: path,\\n            to: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        //Find how much USDC was received from the swap\\n        uint256 amountUSDCReceived = amounts[1];\\n        //Approve the USDC token to be spent by the router\\n        IERC20(USDC).approve(address(UNISWAP_ROUTER), amountUSDCReceived);\\n        uint256 amountToAddInLiquidity = amount - amounts[0];\\n\\n        // Add liquidity to the GCC-USDC pool\\n        // Note: There could be a tax due to USDC Upgrades, and there could also be ERC777 type upgrades,\\n        // When glow relaunches after the guarded launch, this will be accounted for\\n        (uint256 actualAmountGCCUsedInLP, uint256 actualAmountUSDCUsedInLP,) = UNISWAP_ROUTER.addLiquidity({\\n            tokenA: GCC,\\n            tokenB: USDC,\\n            amountADesired: amountToAddInLiquidity,\\n            amountBDesired: amountUSDCReceived,\\n            // we allow for a 1% slippage due to potential rounding errors\\n            // This seems high, but it's simply a precaution to prevent the transaction from reverting\\n            // The bulk of the calculation happens in the logic above\\n            amountAMin: amountToAddInLiquidity * 99 / 100,\\n            amountBMin: amountUSDCReceived * 99 / 100,\\n            to: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        uint256 actualImpactPowerEarned = sqrt(actualAmountGCCUsedInLP * actualAmountUSDCUsedInLP);\\n        usdcEffect = actualAmountUSDCUsedInLP;\\n        if (actualImpactPowerEarned < minImpactPower) {\\n            _revert(NotEnoughImpactPowerFromCommitment.selector);\\n        }\\n\\n        // Set usdcEffect to the amount of USDC used in the liquidity position\\n        // set the nominations to sqrt(amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition)\\n        nominations = actualImpactPowerEarned;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 usdc commits                               */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice entry point for GCC to commit USDC\\n     * @dev the commit process is as follows:\\n     *         1. USDC is swapped for GCC\\n     *         2. GCC and USDC are added to the GCC-USDC pool\\n     *         3. The user receives impact points and nominations (handled in GCC contract)\\n     * @param amount the amount of USDC to commit\\n     * @param minImpactPower the minimum amount of impact power expected to be earned from the commitment\\n     * @return nominations - the amount of nominations to earn sqrt(amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition)\\n     *                        - we do this to battle the quadratic nature of K in the UniswapV2Pair contract and standardize nominations\\n     */\\n    function commitUSDC(uint256 amount, uint256 minImpactPower) external returns (uint256 nominations) {\\n        // Commitments can only be made through the GCC contract\\n        if (msg.sender != GCC) {\\n            _revert(CallerNotGCC.selector);\\n        }\\n        // Find the reserves of GCC and USDC in the GCC-USDC pool\\n        (uint256 reserveA, uint256 reserveB,) = IUniswapV2Pair(UNISWAP_V2_PAIR).getReserves();\\n        // Find the reserve of GCC and USDC in the GCC-USDC pool\\n        uint256 reserveUSDC = USDC < GCC ? reserveA : reserveB;\\n        // Find the optimal amount of USDC to swap for GCC\\n        // This ensures that the the return amount of GCC after the swap\\n        // Should be exactly enough to add liquidity to the GCC-USDC pool with the remainder of `amount`  USDC left over\\n        uint256 optimalSwapAmount =\\n            findOptimalAmountToSwap(amount * USDC_MAGNIFICATION, reserveUSDC * USDC_MAGNIFICATION) / USDC_MAGNIFICATION;\\n\\n        //Approve the USDC token to be spent by the router\\n        IERC20(USDC).approve(address(UNISWAP_ROUTER), amount);\\n        //Create the path for the swap\\n        address[] memory path = new address[](2);\\n        path[0] = USDC;\\n        path[1] = GCC;\\n\\n        // If impact power = sqrt(amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition)\\n        // square both sides, and we get impact power ^ 2 = amountGCCUsedInLiquidityPosition * amountUSDCUsedInLiquidityPosition\\n        // so we can find the minimum amount of GCC expected from the swap by doing\\n        // minimumGCCExpected = (minImpactPower * minImpactPower) / (amount - optimalSwapAmount)\\n        // since amount - optimalSwapAmount is the expected amount of USDC used in the liquidity position\\n        uint256 minimumGCCExpected = (minImpactPower * minImpactPower) / (amount - optimalSwapAmount);\\n\\n        // Swap the USDC for GCC\\n        uint256[] memory amounts = UNISWAP_ROUTER.swapExactTokensForTokens({\\n            amountIn: optimalSwapAmount,\\n            // we allow for a 1% slippage based on the minimum impact power,\\n            // due to potential rounding errors in the findOptimalAmountToSwap function\\n            amountOutMin: minimumGCCExpected * 99 / 100,\\n            path: path,\\n            to: address(this),\\n            deadline: block.timestamp\\n        });\\n        // Approve the GCC token to be spent by the router\\n        IERC20(GCC).approve(address(UNISWAP_ROUTER), amounts[1]);\\n\\n        uint256 amountToAddInLiquidity = amount - amounts[0];\\n\\n        // Add liquidity to the GCC-USDC pool\\n        // Note: There could be a tax due to USDC Upgrades, and there could also be ERC777 type upgrades,\\n        // When glow relaunches after the guarded launch, this will be accounted for\\n        (uint256 actualAmountUSDCUsedInLP, uint256 actualAmountGCCUsedInLP,) = UNISWAP_ROUTER.addLiquidity({\\n            tokenA: USDC,\\n            tokenB: GCC,\\n            amountADesired: amountToAddInLiquidity,\\n            amountBDesired: amounts[1],\\n            // we allow for a 1% slippage due to potential rounding errors\\n            // This seems high, but it's simply a precaution to prevent the transaction from reverting\\n            // The bulk of the calculation happens in the logic above\\n            amountAMin: amountToAddInLiquidity * 99 / 100,\\n            amountBMin: amounts[1] * 99 / 100,\\n            to: address(this),\\n            deadline: block.timestamp\\n        });\\n\\n        uint256 actualImpactPowerEarned = sqrt(actualAmountGCCUsedInLP * actualAmountUSDCUsedInLP);\\n        if (actualImpactPowerEarned < minImpactPower) {\\n            _revert(NotEnoughImpactPowerFromCommitment.selector);\\n        }\\n\\n        nominations = actualImpactPowerEarned;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice a helper function to estimate the impact power expected from a GCC commit\\n     * @dev there may be a slight difference between the actual impact power earned and the estimated impact power\\n     *     - A max .5% divergence should be accounted for when using this function\\n     * @param amount the amount of GCC to commit\\n     * @return expectedImpactPower - the amount of impact power expected to be earned from the commitment\\n     */\\n    function estimateUSDCCommitImpactPower(uint256 amount) external view returns (uint256 expectedImpactPower) {\\n        uint256 expectedImpactPower = _estimateUSDCCommitImpactPower(amount);\\n        return expectedImpactPower;\\n    }\\n\\n    /**\\n     * @notice a helper function to estimate the impact power expected from a USDC commit\\n     * @dev there may be a slight difference between the actual impact power earned and the estimated impact power\\n     *     - A max .5% divergence should be accounted for when using this function\\n     * @param amount the amount of USDC to commit\\n     * @return expectedImpactPower - the amount of impact power expected to be earned from the commitment\\n     */\\n    function estimateGCCCommitImpactPower(uint256 amount) external view returns (uint256 expectedImpactPower) {\\n        uint256 expectedImpactPower = _estimateGCCCommitImpactPower(amount);\\n        return expectedImpactPower;\\n    }\\n\\n    /**\\n     * @notice helper function to find the optimal amount of tokens to swap\\n     * @param amountTocommit the amount of tokens to commit\\n     * @param totalReservesOfToken the total reserves of the token to commit\\n     * @return optimalAmount - the optimal amount of tokens to swap\\n     */\\n    function findOptimalAmountToSwap(uint256 amountTocommit, uint256 totalReservesOfToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 a = sqrt(totalReservesOfToken) + 1; //adjust for div round down errors\\n        uint256 b = sqrt(3988000 * amountTocommit + 3988009 * totalReservesOfToken);\\n        uint256 c = 1997 * totalReservesOfToken;\\n        uint256 d = 1994;\\n        if (c > a * b) _revert(PrecisionLossLeadToUnderflow.selector); // prevent underflow\\n        uint256 res = ((a * b) - c) / d;\\n        return res;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                               internal view funcs                          */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns {optimalSwapAmount, amountToAddInLiquidity, impactPowerExpected} for an USDC commit\\n     * @param amount the amount of USDC to commit\\n     * @dev there may be a slight difference between the actual impact power earned and the estimated impact power\\n     *     - A max .5% divergence should be accounted for when using this function\\n     * @return impactPowerExpected - the amount of impact power expected to be earned from the commitment\\n     */\\n    function _estimateUSDCCommitImpactPower(uint256 amount) internal view returns (uint256 impactPowerExpected) {\\n        // Get the reserves of GCC and USDC in the GCC-USDC pool\\n        (uint256 reserveA, uint256 reserveB,) = IUniswapV2Pair(UNISWAP_V2_PAIR).getReserves();\\n        // Get GCC Reserve\\n        uint256 reserveGCC = GCC < USDC ? reserveA : reserveB;\\n        // Get USDC Reserve\\n        uint256 reserveUSDC = USDC < GCC ? reserveA : reserveB;\\n\\n        // Calculate the optimal amount of USDC to swap for GCC\\n        uint256 optimalSwapAmount =\\n            findOptimalAmountToSwap(amount * USDC_MAGNIFICATION, reserveUSDC * USDC_MAGNIFICATION) / USDC_MAGNIFICATION;\\n\\n        // Since we commit USDC, we want to simulate how much GCC we would get from the swap\\n        // This is also the same amount of GCC that will be used to add liquidity to the GCC-USDC pool\\n        uint256 gccEstimate = UniswapV2Library.getAmountOut(optimalSwapAmount, reserveUSDC, reserveGCC);\\n\\n        // This is the amount of USDC to add in the LP, which is the amount-optimalSwapAmount\\n        // This number represents the balance of USDC after the swap\\n        uint256 amountUSDCToAddInLiquidity = amount - optimalSwapAmount;\\n\\n        // The new reserves of GCC and USDC after the swap\\n        // We add the optimalSwapAmount to USDC, since we used it to swap for GCC\\n        // and, we subtract the gccEstimate from GCC, since it was used when we swapped our USDC\\n        uint256 reserveUSDC_afterSwap = reserveUSDC + optimalSwapAmount;\\n        uint256 reserveGCC_afterSwap = reserveGCC - gccEstimate;\\n\\n        uint256 amountGCCOptimal =\\n            UniswapV2Library.quote(amountUSDCToAddInLiquidity, reserveUSDC_afterSwap, reserveGCC_afterSwap);\\n\\n        if (amountGCCOptimal <= gccEstimate) {\\n            return sqrt(amountGCCOptimal * amountUSDCToAddInLiquidity);\\n        } else {\\n            uint256 amountUSDCOptimal = UniswapV2Library.quote(gccEstimate, reserveGCC_afterSwap, reserveUSDC_afterSwap);\\n            return sqrt(gccEstimate * amountUSDCOptimal);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns {optimalSwapAmount, amountToAddInLiquidity, impactPowerExpected} for a GCC commit\\n     * @param amount the amount of GCC to commit\\n     * @dev there may be a slight difference between the actual impact power earned and the estimated impact power\\n     *     - A max .5% divergence should be accounted for when using this function\\n     * @return impactPowerExpected - the amount of impact power expected to be earned from the commitment\\n     */\\n    function _estimateGCCCommitImpactPower(uint256 amount) internal view returns (uint256 impactPowerExpected) {\\n        //Get the reserves of GCC and USDC in the GCC-USDC pool\\n        (uint256 reserveA, uint256 reserveB,) = IUniswapV2Pair(UNISWAP_V2_PAIR).getReserves();\\n\\n        // Get GCC Reserve\\n        uint256 reserveGCC = GCC < USDC ? reserveA : reserveB;\\n        // Get USDC Reserve\\n        uint256 reserveUSDC = USDC < GCC ? reserveA : reserveB;\\n\\n        // Calculate the optimal amount of GCC to swap for USDC\\n        uint256 optimalSwapAmount =\\n            findOptimalAmountToSwap(amount * GCC_MAGNIFICATION, reserveGCC * GCC_MAGNIFICATION) / GCC_MAGNIFICATION;\\n\\n        // Since we commit GCC, we want to simulate how much USDC we would get from the swap\\n        uint256 usdcEstimate = UniswapV2Library.getAmountOut(optimalSwapAmount, reserveGCC, reserveUSDC);\\n\\n        //This is the amount of GCC to add in the LP, which is the amount-optimalSwapAmount\\n        uint256 amountGCCToAddInLiquidity = amount - optimalSwapAmount;\\n\\n        // The new reserves of GCC and USDC after the swap\\n        // We add the optimalSwapAmount to GCC reserves, since we used it to swap for USDC\\n        // and, we subtract the usdcEstimate from USDC reserves, since it was used when we swapped our GCC\\n        uint256 reserveGCC_afterSwap = reserveGCC + optimalSwapAmount;\\n        uint256 reserveUSDC_afterSwap = reserveUSDC - usdcEstimate;\\n\\n        uint256 amountUSDCOptimal =\\n            UniswapV2Library.quote(amountGCCToAddInLiquidity, reserveGCC_afterSwap, reserveUSDC_afterSwap);\\n\\n        if (amountUSDCOptimal <= usdcEstimate) {\\n            impactPowerExpected = sqrt(amountGCCToAddInLiquidity * amountUSDCOptimal);\\n            return impactPowerExpected;\\n        } else {\\n            uint256 amountGCCOptimal = UniswapV2Library.quote(usdcEstimate, reserveUSDC_afterSwap, reserveGCC_afterSwap);\\n            impactPowerExpected = sqrt(usdcEstimate * amountGCCOptimal);\\n            return impactPowerExpected;\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    utils                                   */\\n    /* -------------------------------------------------------------------------- */\\n    /// @dev forked from solady library\\n    /// @param x - the number to calculate the square root of\\n    /// @return z - the square root of x\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    /**\\n     * @notice returns the minimum of two numbers\\n     * @param a - the first number\\n     * @param b - the second number\\n     * @return the minimum of a and b\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice More efficiently reverts with a bytes4 selector\\n     * @param selector The selector to revert with\\n     */\\n\\n    function _revert(bytes4 selector) private pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x0, selector)\\n            revert(0x0, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/MinerPoolAndGCA/GCA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IGCA} from \\\"@/interfaces/IGCA.sol\\\";\\nimport {IGlow} from \\\"@/interfaces/IGlow.sol\\\";\\nimport {GCASalaryHelper} from \\\"./GCASalaryHelper.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {_BUCKET_DURATION} from \\\"@/Constants/Constants.sol\\\";\\n\\n/**\\n * @title GCA (Glow Certification Agent)\\n * @author @DavidVorick\\n * @author @0xSimon(twitter) - 0xSimon(github)\\n *  @notice this contract is the entry point for GCAs to submit reports and claim payouts\\n *  @notice GCA's submit weekly reports that contain how many carbon credits have been created\\n *             - and which farms should get rewarded for the creation of those credits\\n * @notice The weekly reports that GCA's submit into are called `buckets`\\n * @notice Each `bucket` has a 1 week period for report submission\\n *             - followed by a 1 week period before its finalized\\n *             - during this finalization period, the veto council can decide to delay the bucket by 90 days\\n *             - should they find anything suspicious in the bucket.\\n *                - A delayed bucket should always finalize 90 days after the delay event\\n *                - This should give governance enough time to slash the GCA that submitted the faulty report\\n *                - This slash event causes all buckets that were not finalized at the time of the slash, to be permanently slashed\\n *                - The exception is that the current GCA's have 1-2 weeks after the slash to reinstate the bucket\\n *                - Reinstating the buckets deletes all the past reports and allows the GCAs to submit fresh reports\\n *             - after the bucket has passed this finalization period, the bucket's rewards become available for distribution to solar farms,\\n *                and the GCC created is minted and sent to the Carbon Credit Auction\\n *             - These actions above take place in the `MinerPoolAndGCA` contract\\n * @notice Governance has the ability to change and slash the GCA's.\\n *\\n */\\ncontract GCA is IGCA, GCASalaryHelper {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @dev the return value if an index position is not found in an array\\n    uint256 private constant _INDEX_NOT_FOUND = type(uint256).max;\\n\\n    /// @notice the shift to apply to the bitpacked compensation plans\\n    uint256 private constant _UINT24_SHIFT = 24;\\n\\n    /// @notice the mask to apply to the bitpacked compensation plans\\n    uint256 private constant _UINT24_MASK = 0xFFFFFF;\\n\\n    /// @dev 200 Billion in 18 decimals\\n    uint256 private constant _200_BILLION = 200_000_000_000 ether;\\n\\n    /// @dev the max uint64 divided by 5\\n    /// @dev this is used to check if the total weight of a report is less than the max uint64 / 5\\n    /// @dev the max sum of all weights is type(uint64).max, so we can not allow an overflow by a bad\\n    uint256 private constant _UINT64_MAX_DIV5 = type(uint64).max / 5;\\n\\n    /// @dev mask to apply a uint128 mask to a uint256\\n    /// @dev this is used to get the `finalizationTimestamp` from the `Bucket` struct\\n    ///     - which is a uint128 stored in the last 128 bits of the uint256\\n    uint256 internal constant _UINT128_MASK = (1 << 128) - 1;\\n\\n    /// @dev mask to apply a uint64 mask to a uint256\\n    /// @dev this is used to get the `originalNonce` and `lastUpdatedNonce` from the `Bucket` struct\\n    /// -  `originalNonce` is a uint64 stored in the first 64 bits of the uint256\\n    /// -  `lastUpdatedNonce` is a uint64 stored in the second 64 bits of the uint256\\n    uint256 internal constant _UINT64_MASK = (1 << 64) - 1;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 immutables                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice the address of the glow token\\n    IGlow public immutable GLOW_TOKEN;\\n\\n    /// @notice the address of the governance contract\\n    address public immutable GOVERNANCE;\\n\\n    /// @notice the timestamp of the genesis block\\n    uint256 public immutable GENESIS_TIMESTAMP;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice the index of the last proposal that was updated + 1\\n    uint256 public nextProposalIndexToUpdate;\\n\\n    /// @notice the hashes of the proposals that have been submitted from {GOVERNANCE}\\n    bytes32[] public proposalHashes;\\n\\n    /// @notice the addresses of the gca agents\\n    address[] public gcaAgents;\\n\\n    /**\\n     * @notice the requirements hash of GCA Agents\\n     */\\n    bytes32 public requirementsHash;\\n\\n    /**\\n     * @notice the current slash nonce\\n     */\\n    uint256 public slashNonce;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   mappings                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice the timestamp of the slash event as [nonce]\\n     * @dev nonce -> slash timestamp\\n     */\\n    mapping(uint256 => uint256) public slashNonceToSlashTimestamp;\\n\\n    /// @notice the gca payouts\\n    mapping(address => IGCA.GCAPayout) private _gcaPayouts;\\n\\n    /// @notice bucket -> Bucket Struct\\n    mapping(uint256 => IGCA.Bucket) internal _buckets;\\n\\n    /// @notice bucket -> Global State\\n    mapping(uint256 => IGCA.BucketGlobalState) internal _bucketGlobalState;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice constructs a new GCA contract\\n     * @param _gcaAgents the addresses of the gca agents the contract starts with\\n     * @param _glowToken the address of the glow token\\n     * @param _governance the address of the governance contract\\n     * @param _requirementsHash the requirements hash of GCA Agents\\n     */\\n    constructor(address[] memory _gcaAgents, address _glowToken, address _governance, bytes32 _requirementsHash)\\n        payable\\n        GCASalaryHelper(_gcaAgents)\\n    {\\n        //Set the glow token\\n        GLOW_TOKEN = IGlow(_glowToken);\\n        //Set governance\\n        GOVERNANCE = _governance;\\n        //Set the GCA's\\n        _setGCAs(_gcaAgents);\\n        //Set the genesis timestamp\\n        GENESIS_TIMESTAMP = GLOW_TOKEN.GENESIS_TIMESTAMP();\\n        //Initialize the payouts for the gcas\\n        for (uint256 i; i < _gcaAgents.length; ++i) {\\n            _gcaPayouts[_gcaAgents[i]].lastClaimedTimestamp = uint64(GENESIS_TIMESTAMP);\\n        }\\n        //Set the GCA requirements hash\\n        requirementsHash = _requirementsHash;\\n        GCASalaryHelper.setZeroPaymentStartTimestamp();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              submit comp plans                             */\\n    /* -------------------------------------------------------------------------- */\\n    /// @inheritdoc IGCA\\n    function submitCompensationPlan(uint32[5] calldata plan, uint256 indexOfGCA) external {\\n        _revertIfFrozen();\\n        uint256 gcaLength = gcaAgents.length;\\n        if (msg.sender != gcaAgents[indexOfGCA]) _revert(IGCA.CallerNotGCAAtIndex.selector);\\n        GCASalaryHelper.handleCompensationPlanSubmission(plan, indexOfGCA, gcaLength);\\n        emit IGCA.CompensationPlanSubmitted(msg.sender, plan);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              submitting reports                            */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice allows GCAs to submit a weekly report and emit {data}\\n     *         - {data} is a bytes array that can be used to emit any data\\n     *         - it could contain the merkle tree, or any other data\\n     *         - it is not strictly enforced and GCA's should communicate what they are emitting\\n     * @param bucketId - the id of the bucket\\n     * @param totalNewGCC - the total amount of GCC to be created from the report\\n     * @param totalGlwRewardsWeight - the total amount of glw rewards weight in the report\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight in the report\\n     * @param root - the merkle root containing all the reports (leaves) for the period\\n     */\\n    function submitWeeklyReport(\\n        uint256 bucketId,\\n        uint256 totalNewGCC,\\n        uint256 totalGlwRewardsWeight,\\n        uint256 totalGRCRewardsWeight,\\n        bytes32 root\\n    ) external {\\n        _submitWeeklyReport(bucketId, totalNewGCC, totalGlwRewardsWeight, totalGRCRewardsWeight, root);\\n        emit IGCA.BucketSubmissionEvent(\\n            bucketId, msg.sender, slashNonce, totalNewGCC, totalGlwRewardsWeight, totalGRCRewardsWeight, root, \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice allows GCAs to submit a weekly report and emit {data}\\n     *         - {data} is a bytes array that can be used to emit any data\\n     *         - it could contain the merkle tree, or any other data\\n     *         - it is not strictly enforced and GCA's should communicate what they are emitting\\n     * @param bucketId - the id of the bucket\\n     * @param totalNewGCC - the total amount of GCC to be created from the report\\n     * @param totalGlwRewardsWeight - the total amount of glw rewards weight in the report\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight in the report\\n     * @param root - the merkle root containing all the reports (leaves) for the period\\n     * @param data - the data to emit\\n     */\\n    function submitWeeklyReportWithBytes(\\n        uint256 bucketId,\\n        uint256 totalNewGCC,\\n        uint256 totalGlwRewardsWeight,\\n        uint256 totalGRCRewardsWeight,\\n        bytes32 root,\\n        bytes calldata data\\n    ) external {\\n        _submitWeeklyReport(bucketId, totalNewGCC, totalGlwRewardsWeight, totalGRCRewardsWeight, root);\\n        emit IGCA.BucketSubmissionEvent(\\n            bucketId, msg.sender, slashNonce, totalNewGCC, totalGlwRewardsWeight, totalGRCRewardsWeight, root, data\\n        );\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              governance interaction                        */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc IGCA\\n     */\\n    function setRequirementsHash(bytes32 _requirementsHash) external {\\n        if (msg.sender != GOVERNANCE) _revert(IGCA.CallerNotGovernance.selector);\\n        requirementsHash = _requirementsHash;\\n        emit IGCA.RequirementsHashUpdated(_requirementsHash);\\n    }\\n\\n    /**\\n     * @inheritdoc IGCA\\n     */\\n    function pushHash(bytes32 hash, bool incrementSlashNonce) external {\\n        if (msg.sender != GOVERNANCE) _revert(IGCA.CallerNotGovernance.selector);\\n        if (incrementSlashNonce) {\\n            ++slashNonce;\\n        }\\n        proposalHashes.push(hash);\\n        emit IGCA.ProposalHashPushed(hash);\\n    }\\n\\n    /**\\n     * @notice allows anyone to call this function to ensure that governance proposals are being taken into effect\\n     * @param gcasToSlash - the gca agents to slash\\n     * @param newGCAs - the new gca agents\\n     * @dev - this is a standalone function that anyone can call to ensure that\\n     *             - users dont pay too much gas when syncing proposals.\\n     * @dev if there is a hash to execute against, the contract will be frozen\\n     *             - if there is no hash to execute against, the contract will be available\\n     *             - to execute actions\\n     */\\n    function executeAgainstHash(\\n        address[] calldata gcasToSlash,\\n        address[] calldata newGCAs,\\n        uint256 proposalCreationTimestamp\\n    ) external {\\n        uint256 _nextProposalIndexToUpdate = nextProposalIndexToUpdate;\\n        uint256 len = proposalHashes.length;\\n        if (len == 0) _revert(IGCA.ProposalHashesEmpty.selector);\\n        bytes32 derivedHash = keccak256(abi.encode(gcasToSlash, newGCAs, proposalCreationTimestamp));\\n        //Slash nonce already get's incremented so we need to subtract 1\\n        if (gcasToSlash.length > 0) {\\n            slashNonceToSlashTimestamp[slashNonce - 1] = proposalCreationTimestamp;\\n        }\\n        if (proposalHashes[_nextProposalIndexToUpdate] != derivedHash) {\\n            _revert(IGCA.ProposalHashDoesNotMatch.selector);\\n        }\\n\\n        GCASalaryHelper.callbackInElectionEvent(newGCAs);\\n        _setGCAs(newGCAs);\\n        _slashGCAs(gcasToSlash);\\n        nextProposalIndexToUpdate = _nextProposalIndexToUpdate + 1;\\n        emit IGCA.ProposalHashUpdate(_nextProposalIndexToUpdate, derivedHash);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 glow inflation                             */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice - an open function to claim the glow from inflation\\n     */\\n    function claimGlowFromInflation() public virtual {\\n        _claimGlowFromInflation();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n    /// @inheritdoc IGCA\\n    function isGCA(address account, uint256 index) public view returns (bool) {\\n        if (_isFrozen()) return false;\\n        return gcaAgents[index] == account;\\n    }\\n\\n    /// @inheritdoc IGCA\\n    function isGCA(address account) public view returns (bool) {\\n        if (_isFrozen()) return false;\\n        uint256 len = gcaAgents.length;\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                if (gcaAgents[i] == account) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @inheritdoc IGCA\\n    function allGcas() public view returns (address[] memory) {\\n        return gcaAgents;\\n    }\\n\\n    /// @inheritdoc IGCA\\n    function gcaPayoutData(address gca) public view returns (IGCA.GCAPayout memory) {\\n        return _gcaPayouts[gca];\\n    }\\n\\n    /**\\n     * @inheritdoc IGCA\\n     */\\n    function getProposalHashes() external view returns (bytes32[] memory) {\\n        return proposalHashes;\\n    }\\n\\n    /**\\n     * @inheritdoc IGCA\\n     */\\n    function getProposalHashes(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        if (end > proposalHashes.length) end = proposalHashes.length;\\n        if (start > end) return new bytes32[](0);\\n        bytes32[] memory result = new bytes32[](end - start);\\n        unchecked {\\n            for (uint256 i = start; i < end; ++i) {\\n                result[i - start] = proposalHashes[i];\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @inheritdoc IGCA\\n     */\\n    function bucketGlobalState(uint256 bucketId) external view returns (IGCA.BucketGlobalState memory) {\\n        return _bucketGlobalState[bucketId];\\n    }\\n\\n    /**\\n     * @notice returns the start submission timestamp of a bucket\\n     * @param bucketId - the id of the bucket\\n     * @return the start submission timestamp of a bucket\\n     * @dev should not be used for reinstated buckets or buckets that need to be reinstated\\n     */\\n    function bucketStartSubmissionTimestampNotReinstated(uint256 bucketId) public view returns (uint128) {\\n        return SafeCast.toUint128(bucketId * bucketDuration() + GENESIS_TIMESTAMP);\\n    }\\n\\n    /**\\n     * @notice returns the end submission timestamp of a bucket\\n     *         - GCA's wont be able to submit if block.timestamp >= endSubmissionTimestamp\\n     * @param bucketId - the id of the bucket\\n     * @return the end submission timestamp of a bucket\\n     * @dev should not be used for reinstated buckets or buckets that need to be reinstated\\n     */\\n    function bucketEndSubmissionTimestampNotReinstated(uint256 bucketId) public view returns (uint128) {\\n        return SafeCast.toUint128(bucketStartSubmissionTimestampNotReinstated(bucketId) + bucketDuration());\\n    }\\n\\n    /**\\n     * @notice returns the finalization timestamp of a bucket\\n     * @param bucketId - the id of the bucket\\n     * @return the finalization timestamp of a bucket\\n     * @dev should not be used for reinstated buckets or buckets that need to be reinstated\\n     */\\n    function bucketFinalizationTimestampNotReinstated(uint256 bucketId) public view returns (uint128) {\\n        return SafeCast.toUint128(bucketEndSubmissionTimestampNotReinstated(bucketId) + bucketDuration());\\n    }\\n\\n    /**\\n     * @inheritdoc IGCA\\n     */\\n    function bucket(uint256 bucketId) public view returns (IGCA.Bucket memory bucket) {\\n        return _buckets[bucketId];\\n    }\\n\\n    /**\\n     * @inheritdoc IGCA\\n     */\\n    function isBucketFinalized(uint256 bucketId) public view returns (bool) {\\n        uint256 packedData;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0x0, bucketId)\\n            mstore(0x20, _buckets.slot)\\n            let slot := keccak256(0x0, 0x40)\\n            // nonce, reinstated and finalizationTimestamp are all in the first slot\\n            packedData := sload(slot)\\n        }\\n\\n        uint256 bucketLastUpdatedNonce = (packedData >> 64) & _UINT64_MASK;\\n        //First bit.\\n        //first 64 bits are originalNonce, next 64 bits are lastUpdatedNonce, last 128 bits are finalizationTimestamp\\n        //no need to us to use a mask since finalizationTimestamp takes up the last 128 bits\\n        uint256 finalizationTimestamp = packedData >> 128;\\n\\n        uint256 _slashNonce = slashNonce;\\n        return _isBucketFinalized(bucketLastUpdatedNonce, finalizationTimestamp, _slashNonce);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   internal                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice allows GCAs to submit a weekly report and emit {data}\\n     *         - {data} is a bytes array that can be used to emit any data\\n     *         - it could contain the merkle tree, or any other data\\n     *         - it is not strictly enforced and GCA's should communicate what they are emitting\\n     * @param bucketId - the id of the bucket\\n     * @param totalNewGCC - the total amount of GCC to be created from the report\\n     * @param totalGlwRewardsWeight - the total amount of glw rewards weight in the report\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight in the report\\n     * @param root - the merkle root containing all the reports (leaves) for the period\\n     */\\n\\n    function _submitWeeklyReport(\\n        uint256 bucketId,\\n        uint256 totalNewGCC,\\n        uint256 totalGlwRewardsWeight,\\n        uint256 totalGRCRewardsWeight,\\n        bytes32 root\\n    ) internal {\\n        //GCAs can't submit if the contract is frozen (pending a proposal hash update)\\n        _revertIfFrozen();\\n        if (!isGCA(msg.sender)) _revert(NotGCA.selector);\\n        checkBucketSubmissionArithmeticInputs(totalGlwRewardsWeight, totalGRCRewardsWeight, totalNewGCC);\\n        //Need to check if bucket is slashed\\n        Bucket storage bucket = _buckets[bucketId];\\n        //Cache values\\n        uint256 len = bucket.reports.length;\\n        {\\n            uint256 bucketFinalizationTimestamp = bucket.finalizationTimestamp;\\n\\n            uint256 lastUpdatedNonce = bucket.lastUpdatedNonce;\\n            //Get the submission start itimestamp\\n            uint256 bucketSubmissionStartTimestamp = bucketStartSubmissionTimestampNotReinstated(bucketId);\\n            if (block.timestamp < bucketSubmissionStartTimestamp) _revert(IGCA.BucketSubmissionNotOpen.selector);\\n\\n            //Keep in mind, all bucketNonces start with 0\\n            //So on the first init, we need to set the bucketNonce to the slashNonce in storage\\n            {\\n                uint256 _slashNonce = slashNonce;\\n                //If not inititialized, intitialize the bucket\\n                if (bucketFinalizationTimestamp == 0) {\\n                    bucket.originalNonce = SafeCast.toUint64(_slashNonce);\\n                    bucket.lastUpdatedNonce = SafeCast.toUint64(_slashNonce);\\n                    bucket.finalizationTimestamp =\\n                        SafeCast.toUint128(bucketFinalizationTimestampNotReinstated(bucketId));\\n                    lastUpdatedNonce = _slashNonce;\\n                }\\n\\n                {\\n                    /**\\n                     * If the bucket needs to be reinstated\\n                     *             we need to update the bucket accordingly\\n                     *             and we need to change the finalization timestamp\\n                     *             lastly, we need to delete all reports in storage if there are any\\n                     */\\n                    uint256 bucketSubmissionEndTimestamp = _calculateBucketSubmissionEndTimestamp(\\n                        bucketId, bucket.originalNonce, lastUpdatedNonce, _slashNonce, bucketFinalizationTimestamp\\n                    );\\n                    if (block.timestamp >= bucketSubmissionEndTimestamp) _revert(IGCA.BucketSubmissionEnded.selector);\\n\\n                    if (lastUpdatedNonce != _slashNonce) {\\n                        bucket.lastUpdatedNonce = SafeCast.toUint64(_slashNonce);\\n                        //Need to check before storing the finalization timestamp in case\\n                        //the bucket was delayed.\\n                        if (bucketSubmissionEndTimestamp + bucketDuration() > bucketFinalizationTimestamp) {\\n                            bucket.finalizationTimestamp =\\n                                SafeCast.toUint128(bucketSubmissionEndTimestamp + bucketDuration());\\n                        }\\n                        //conditionally delete all reports in storage\\n                        if (len > 0) {\\n                            len = 0;\\n                            //delete all reports in storage\\n                            //by setting the length to 0\\n                            // solhint-disable-next-line no-inline-assembly\\n                            assembly {\\n                                //1 slot offset for buckets length\\n                                sstore(add(1, bucket.slot), 0)\\n                            }\\n                            delete _bucketGlobalState[bucketId];\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        uint256 reportArrayStartSlot;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            //add 1 for reports offset\\n            mstore(0x0, add(bucket.slot, 1))\\n            // hash the reports start slot to get the start of the data\\n            reportArrayStartSlot := keccak256(0x0, 0x20)\\n        }\\n\\n        (uint256 foundIndex, uint256 gcaReportStartSlot) = findReportIndexOrUintMax(reportArrayStartSlot, len);\\n        handleGlobalBucketStateStore(\\n            totalNewGCC, totalGlwRewardsWeight, totalGRCRewardsWeight, bucketId, foundIndex, gcaReportStartSlot\\n        );\\n        handleBucketStore(bucket, foundIndex, totalNewGCC, totalGlwRewardsWeight, totalGRCRewardsWeight, root);\\n    }\\n\\n    /**\\n     * @dev handles the store for a new report in a bucket\\n     * @param gcaTotalNewGCC - the total amount of new gcc that the gca is reporting\\n     * @param gcaTotalGlwRewardsWeight - the total amount of glw rewards weight that the gca is reporting\\n     * @param gcaTotalGRCRewardsWeight - the total amount of grc rewards weight that the gca is reporting\\n     * @param bucketId - the id of the bucket\\n     * @param foundIndex - the index of the report in the bucket\\n     * @param gcaReportStartSlot - the start slot of the gca report\\n     */\\n    function handleGlobalBucketStateStore(\\n        uint256 gcaTotalNewGCC,\\n        uint256 gcaTotalGlwRewardsWeight,\\n        uint256 gcaTotalGRCRewardsWeight,\\n        uint256 bucketId,\\n        uint256 foundIndex,\\n        uint256 gcaReportStartSlot\\n    ) internal {\\n        uint256 packedGlobalState;\\n        uint256 slot;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0x0, bucketId)\\n            mstore(0x20, _bucketGlobalState.slot)\\n            slot := keccak256(0x0, 0x40)\\n            packedGlobalState := sload(slot)\\n        }\\n\\n        uint256 gccInBucketPlusGcaGcc = (packedGlobalState & _UINT128_MASK) + gcaTotalNewGCC;\\n        uint256 glwWeightInBucketPlusGcaGlwWeight = (packedGlobalState >> 128 & _UINT64_MASK) + gcaTotalGlwRewardsWeight;\\n        //No need to shift on `grcWeightInBucketPlusGcaGrcWeight` since  the grcWeight is the last 64 bits\\n        uint256 grcWeightInBucketPlusGcaGrcWeight = (packedGlobalState >> 192) + gcaTotalGRCRewardsWeight;\\n\\n        if (foundIndex == 0) {\\n            //gcc is uint128, glwWeight is uint64, grcWeight is uint64\\n            packedGlobalState = gccInBucketPlusGcaGcc | (glwWeightInBucketPlusGcaGlwWeight << 128)\\n                | (grcWeightInBucketPlusGcaGrcWeight << 192);\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sstore(slot, packedGlobalState)\\n            }\\n            return;\\n        }\\n\\n        uint256 packedDataInReport;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            packedDataInReport := sload(gcaReportStartSlot)\\n        }\\n\\n        gccInBucketPlusGcaGcc -= packedDataInReport & _UINT128_MASK;\\n        glwWeightInBucketPlusGcaGlwWeight -= (packedDataInReport >> 128) & _UINT64_MASK;\\n        //no need to mask since the grcWeight is the last 64 bits\\n        grcWeightInBucketPlusGcaGrcWeight -= (packedDataInReport >> 192);\\n\\n        packedGlobalState = gccInBucketPlusGcaGcc | (glwWeightInBucketPlusGcaGlwWeight << 128)\\n            | (grcWeightInBucketPlusGcaGrcWeight << 192);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, packedGlobalState)\\n        }\\n    }\\n\\n    function _transferGlow(address to, uint256 amount) internal override(GCASalaryHelper) {\\n        GLOW_TOKEN.transfer(to, amount);\\n    }\\n\\n    /// @dev claims the glow from inflation\\n    function _claimGlowFromInflation() internal virtual override(GCASalaryHelper) {\\n        GLOW_TOKEN.claimGLWFromGCAAndMinerPool();\\n    }\\n\\n    /**\\n     * @dev handles the store for a new report in a bucket\\n     * @param bucket - the bucket to store the report in\\n     * @param foundIndex - the index of the report in the bucket\\n     * @param totalNewGCC - the total amount of new gcc that the gca is reporting\\n     * @param totalGlwRewardsWeight - the total amount of glw rewards weight that the gca is reporting\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight that the gca is reporting\\n     * @param root - the merkle root containing all the reports (leaves) for the period\\n     */\\n    function handleBucketStore(\\n        IGCA.Bucket storage bucket,\\n        uint256 foundIndex,\\n        uint256 totalNewGCC,\\n        uint256 totalGlwRewardsWeight,\\n        uint256 totalGRCRewardsWeight,\\n        bytes32 root\\n    ) internal {\\n        //If the array was empty\\n        // we need to push\\n        if (foundIndex == 0) {\\n            bucket.reports.push(\\n                IGCA.Report({\\n                    proposingAgent: msg.sender,\\n                    totalNewGCC: SafeCast.toUint128(totalNewGCC),\\n                    totalGLWRewardsWeight: SafeCast.toUint64(totalGlwRewardsWeight),\\n                    totalGRCRewardsWeight: SafeCast.toUint64(totalGRCRewardsWeight),\\n                    merkleRoot: root\\n                })\\n            );\\n            //else we write the the index we found\\n        } else {\\n            bucket.reports[foundIndex == _INDEX_NOT_FOUND ? 0 : foundIndex] = IGCA.Report({\\n                //Redundant sstore on {proposingAgent}\\n                proposingAgent: msg.sender,\\n                totalNewGCC: SafeCast.toUint128(totalNewGCC),\\n                totalGLWRewardsWeight: SafeCast.toUint64(totalGlwRewardsWeight),\\n                totalGRCRewardsWeight: SafeCast.toUint64(totalGRCRewardsWeight),\\n                merkleRoot: root\\n            });\\n        }\\n    }\\n\\n    /**\\n     * @dev sets the gca agents\\n     *         -  removes all previous gca agents\\n     *         -  sets the new gca agents\\n     */\\n    function _setGCAs(address[] memory gcaAddresses) internal {\\n        gcaAgents = gcaAddresses;\\n        emit IGCA.NewGCAsAppointed(gcaAddresses);\\n    }\\n\\n    /**\\n     * @dev slashes the gca agents\\n     * @param gcasToSlash - the gca agents to slash\\n     */\\n    function _slashGCAs(address[] memory gcasToSlash) internal {\\n        unchecked {\\n            for (uint256 i; i < gcasToSlash.length; ++i) {\\n                GCASalaryHelper._slash(gcasToSlash[i]);\\n            }\\n        }\\n        emit IGCA.GCAsSlashed(gcasToSlash);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                        internal / private view functions                   */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev checks if the weights are valid\\n     *     - this check is necessary to ensure that GCA's cant cause the weights to overflow in their reports\\n     *     - and also ensures that the total new gcc minted isnt greated than 200 billion * number of gcas\\n     * @param totalGlwRewardsWeight - the total amount of glw rewards weight\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight\\n     * @param totalNewGCC - the total amount of new gcc\\n     */\\n    function checkBucketSubmissionArithmeticInputs(\\n        uint256 totalGlwRewardsWeight,\\n        uint256 totalGRCRewardsWeight,\\n        uint256 totalNewGCC\\n    ) internal pure {\\n        //Arithmetic Checks\\n        //To make sure that the weight's dont result in an overflow,\\n        // we need to make sure that the total weight is less than 1/5 of the max uint64\\n        if (totalGlwRewardsWeight > _UINT64_MAX_DIV5) _revert(IGCA.ReportWeightMustBeLTUint64MaxDiv5.selector);\\n        if (totalGRCRewardsWeight > _UINT64_MAX_DIV5) _revert(IGCA.ReportWeightMustBeLTUint64MaxDiv5.selector);\\n        //Max of 1 trillion GCC per week\\n        //Since there are a max of 5 GCA's at any point in time,\\n        // this means that the max amount of GCC that can be minted per GCA is 200 Billion\\n        if (totalNewGCC > _200_BILLION) _revert(IGCA.ReportGCCMustBeLT200Billion.selector);\\n    }\\n\\n    /**\\n     * @dev finds the index of the report in the bucket\\n     *             - if the report is not found, it returns _INDEX_NOT_FOUND\\n     * @param reportArrayStartSlot - the storage start slot of the reports\\n     * @param len - the length of the reports array\\n     * @return foundIndex - the index of the report in the bucket\\n     * @return gcaReportStartSlot - the start slot of the report in storage\\n     */\\n    function findReportIndexOrUintMax(uint256 reportArrayStartSlot, uint256 len)\\n        internal\\n        view\\n        returns (uint256 foundIndex, uint256)\\n    {\\n        unchecked {\\n            {\\n                for (uint256 i; i < len; ++i) {\\n                    address proposingAgent;\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        //the address is stored in the [0,1,2] - 3rd slot\\n                        //                                  ^\\n                        //that means the slot to read from is i*3 + startSlot + 2\\n                        proposingAgent := sload(add(reportArrayStartSlot, 2))\\n                        reportArrayStartSlot := add(reportArrayStartSlot, 3)\\n                    }\\n                    if (proposingAgent == msg.sender) {\\n                        foundIndex = i == 0 ? _INDEX_NOT_FOUND : i;\\n                        // solhint-disable-next-line no-inline-assembly\\n                        assembly {\\n                            //since we incremented the slot by 3, we need to decrement it by 3 to get the start of the packed data\\n                            reportArrayStartSlot := sub(reportArrayStartSlot, 3)\\n                        }\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        //Increased readability\\n        uint256 gcaReportStartSlot = reportArrayStartSlot;\\n        return (foundIndex, gcaReportStartSlot);\\n    }\\n\\n    /**\\n     * @notice returns the length (in seconds) of a bucket duration\\n     * @return the length (in seconds) of a bucket duration\\n     */\\n    function bucketDuration() internal pure virtual override returns (uint256) {\\n        return _BUCKET_DURATION;\\n    }\\n\\n    /**\\n     * @dev an efficient function to get the merkle root of a bucket at a given index\\n     * @param bucketId - the bucket id to find the root for\\n     * @param index - the index of the report in the reports[] array for the bucket\\n     * @return root - the merkle root for the report for the given bucket at the specific index\\n     */\\n\\n    function getBucketRootAtIndexEfficient(uint256 bucketId, uint256 index) internal view returns (bytes32 root) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            //Store the key\\n            mstore(0x0, bucketId)\\n            //Store the slot\\n            mstore(0x20, _buckets.slot)\\n            //Find storage slot where bucket starts\\n            let slot := keccak256(0x0, 0x40)\\n            //Reports start at the second slot so we add 1\\n            slot := add(slot, 1)\\n\\n            //Check length\\n            let len := sload(slot)\\n            if gt(add(index, 1), len) {\\n                //cast sig \\\"BucketIndexOutOfBounds()\\\"\\n                mstore(0x0, 0xfdbe8876)\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x0, slot)\\n            //calculate slot for the reports\\n            slot := keccak256(0x0, 0x20)\\n            //slot is now the start of the reports\\n            //each report is 3 slots long\\n            //So, our index needs to be multiplied by 3\\n            index := mul(index, 3)\\n            //the root is the second slot so we need to add 1\\n            index := add(index, 1)\\n            //Calculate the slot to sload from\\n            slot := add(slot, index)\\n            //sload the root\\n            root := sload(slot)\\n        }\\n\\n        if (uint256(root) == 0) _revert(IGCA.EmptyRoot.selector);\\n    }\\n\\n    /**\\n     * @dev a function that reverts if proposal hashes are not up to date\\n     */\\n    function _revertIfFrozen() internal view {\\n        if (_isFrozen()) _revert(IGCA.ProposalHashesNotUpdated.selector);\\n    }\\n\\n    /// @dev returns true if the contract is frozen, false otherwise\\n    function _isFrozen() internal view returns (bool) {\\n        uint256 len = proposalHashes.length;\\n        //If no proposals have been submitted, we don't need to check\\n        if (len == 0) return false;\\n        if (len != nextProposalIndexToUpdate) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev checks if a bucket is finalized\\n     * @param bucketLastUpdatedNonce the last updated nonce of the bucket\\n     * @param bucketFinalizationTimestamp the finalization timestamp of the bucket\\n     * @param _slashNonce the current slash nonce\\n     * @return true if the bucket is finalized, false otherwise\\n     */\\n    function _isBucketFinalized(\\n        uint256 bucketLastUpdatedNonce,\\n        uint256 bucketFinalizationTimestamp,\\n        uint256 _slashNonce\\n    ) internal view returns (bool) {\\n        //If the bft(bucket finalization timestamp) = 0,\\n        // that means that bucket hasn't been initialized yet\\n        // so that also means it's not finalized.\\n        // this also means that we return false if\\n        // the bucket was indeed finalized. but it was never pushed to\\n        // in that case, we return a false negative,\\n        // but it has no side effects since the bucket is empty\\n        // and no one can claim rewards from it.\\n        if (bucketFinalizationTimestamp == 0) return false;\\n\\n        //This checks if the bucket has finalized in regards to the timestamp stored\\n        bool finalized = block.timestamp >= bucketFinalizationTimestamp;\\n        //If there hasn't been a slash event and the bucket is finalized\\n        // then we return true;\\n        if (bucketLastUpdatedNonce == _slashNonce) {\\n            if (finalized) return true;\\n        }\\n\\n        //If there has been a slash event\\n        if (bucketLastUpdatedNonce != _slashNonce) {\\n            //If the slash event happened after the bucket's finalization timestamp\\n            //That means the bucket had already been finalized and we can return true;\\n            if (slashNonceToSlashTimestamp[bucketLastUpdatedNonce] >= bucketFinalizationTimestamp) {\\n                if (finalized) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev will underflow and revert if slashNonceToSlashTimestamp[_slashNonce] has not yet been written to\\n     * @dev returns the WCEIL for the given slash nonce.\\n     * @dev WCEIL is equal to the end bucket submission time for the bucket that the slash nonce was slashed in + 2 weeks\\n     * @dev it's two weeks instead of one to make sure there is adequate time for GCA's to submit reports\\n     * @dev the finalization timestamp is the end of the submission period + 1 week\\n     */\\n    function _WCEIL(uint256 _slashNonce) internal view returns (uint256) {\\n        //This will underflow if slashNonceToSlashTimestamp[_slashNonce] has not yet been written to\\n        uint256 bucketNonceWasSlashedAt =\\n            (slashNonceToSlashTimestamp[_slashNonce] - GENESIS_TIMESTAMP) / bucketDuration();\\n        //the end submission period is the bucket + 2\\n        return (bucketNonceWasSlashedAt + 2) * bucketDuration() + GENESIS_TIMESTAMP;\\n    }\\n\\n    function getPackedBucketGlobalState(uint256 bucketId) internal view returns (uint256 packedGlobalState) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0x0, bucketId)\\n            mstore(0x20, _bucketGlobalState.slot)\\n            let slot := keccak256(0x0, 0x40)\\n            packedGlobalState := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @notice calculates the bucket submission end timestamp\\n     * @param bucketId - the id of the bucket\\n     * @param bucketOriginNonce - the original nonce of the bucket\\n     * @param bucketLastUpdatedNonce - the last updated nonce of the bucket\\n     * @param _slashNonce - the current slash nonce\\n     * @param bucketFinalizationTimestamp - the finalization timestamp of the bucket\\n     * @dev this function is used to calculate the bucket submission start timestamp\\n     *     - under normal conditions, a bucket should be finalized 2 weeks after its submission period has open\\n     *     - however, if a slash event occurs, the bucket submission start timestamp will be shifted to the WCEIL() of the slash nonce\\n     *     - if the slash event occurs after the bucket has been finalized, the bucket submission start timestamp will be shifted to the WCEIL() of the slash nonce\\n     *         - this is to ensure the gcas have enough time to reinstante proper reports\\n     */\\n    function _calculateBucketSubmissionEndTimestamp(\\n        uint256 bucketId,\\n        uint256 bucketOriginNonce,\\n        uint256 bucketLastUpdatedNonce,\\n        uint256 _slashNonce,\\n        uint256 bucketFinalizationTimestamp\\n    ) internal view returns (uint256) {\\n        // if the bucket has never been initialized\\n        if (bucketFinalizationTimestamp == 0) return bucketEndSubmissionTimestampNotReinstated(bucketId);\\n        if (bucketOriginNonce == _slashNonce) return bucketEndSubmissionTimestampNotReinstated(bucketId);\\n        if (bucketLastUpdatedNonce == _slashNonce) return bucketFinalizationTimestamp;\\n        uint256 bucketSubmissionStartTimestamp = bucketStartSubmissionTimestampNotReinstated(bucketId);\\n        //If the slash occurred between the start of the submission period and the bucket finalization timestamp\\n        for (uint256 i = bucketLastUpdatedNonce; i < _slashNonce;) {\\n            if (_between(slashNonceToSlashTimestamp[i], bucketSubmissionStartTimestamp, bucketFinalizationTimestamp)) {\\n                bucketSubmissionStartTimestamp = _WCEIL(i);\\n            } else {\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return bucketSubmissionStartTimestamp;\\n    }\\n\\n    /**\\n     * @dev checks if `a` is between `b` and `c`\\n     * @param a the number to check\\n     * @param b the lower bound\\n     * @param c the upper bound\\n     * @return true if `a` is between `b` and `c`, false otherwise\\n     */\\n    function _between(uint256 a, uint256 b, uint256 c) internal pure returns (bool) {\\n        return a >= b && a <= c;\\n    }\\n\\n    function _genesisTimestamp() internal view virtual override(GCASalaryHelper) returns (uint256) {\\n        return GENESIS_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev calculates the shift to apply to the bitpacked compensation plans\\n     *     @param index - the index of the gca agent\\n     *     @return the shift to apply to the bitpacked compensation plans\\n     */\\n    function _calculateShift(uint256 index) private pure returns (uint256) {\\n        return index * _UINT24_SHIFT;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             functions to override                           */\\n    /* -------------------------------------------------------------------------- */\\n    /// @dev this must be overriden to return the current week in the parent contract\\n    function _currentWeek() internal view virtual override(GCASalaryHelper) returns (uint256) {\\n        // solhint-disable-next-line reason-string, custom-errors\\n        revert();\\n    }\\n\\n    /// @dev returns the domain seperator for the current contract, must be overriden\\n    function _domainSeperatorV4Main() internal view virtual override(GCASalaryHelper) returns (bytes32) {\\n        // solhint-disable-next-line reason-string, custom-errors\\n        revert();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGCA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IGCA {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                  */\\n    /* -------------------------------------------------------------------------- */\\n    error NotGCA();\\n    error CallerNotGCA();\\n    error CompensationPlanLengthMustBeGreaterThanZero();\\n    error InsufficientShares();\\n    error NoBalanceToPayout();\\n    error CallerNotGovernance();\\n    error ProposalHashesNotUpdated();\\n    error ProposalHashDoesNotMatch();\\n    error IndexDoesNotMatchNextProposalIndex();\\n    error ProposalHashesEmpty();\\n    error ProposalAlreadyUpdated();\\n    error BucketAlreadyFinalized();\\n    error ReportGCCMustBeLT200Billion();\\n    error ReportWeightMustBeLTUint64MaxDiv5();\\n    error BucketSubmissionNotOpen();\\n    error BucketSubmissionEnded();\\n    error EmptyRoot();\\n    error CallerNotGCAAtIndex();\\n    error GCCAlreadySet();\\n    error BucketIndexOutOfBounds();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev a struct to represent a compensation plan\\n     * @dev packed into a single uint256\\n     * @param shares - the amount of shares to be distributed\\n     * @param agent - the address of the gca agent to receive the shares\\n     */\\n    struct ICompensation {\\n        uint80 shares;\\n        address agent;\\n    }\\n\\n    /**\\n     * @dev a struct to represent a gca payout\\n     * @param lastClaimedTimestamp - the last time the gca claimed their payout\\n     * @param totalSlashableBalance - the total slashable balance of the gca\\n     */\\n    struct GCAPayout {\\n        uint64 lastClaimedTimestamp;\\n        uint64 maxClaimTimestamp;\\n        uint128 totalSlashableBalance;\\n    }\\n\\n    /**\\n     * @dev a struct to represent a report\\n     * @param totalNewGCC - the total amount of new gcc\\n     * @param totalGLWRewardsWeight - the total amount of glw rewards weight\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight\\n     * @param merkleRoot - the root containing all the reports (leaves) for the period\\n     *             - The leaf structure is as follows:\\n     *                 -   (address payoutWallet,uint256 glwRewardsWeight,uint256 grcRewardsWeight)\\n     * @param proposingAgent - the address of the gca agent proposing the report\\n     */\\n    struct Report {\\n        uint128 totalNewGCC;\\n        uint64 totalGLWRewardsWeight;\\n        uint64 totalGRCRewardsWeight;\\n        bytes32 merkleRoot;\\n        address proposingAgent;\\n    }\\n    //3 slots\\n\\n    /**\\n     * @param originalNonce - the slash nonce in storage at the time of report submission\\n     * @param lastUpdatedNonce - the slash nonce in storage at the time of the last report submission\\n     * @param finalizationTimestamp - the finalization timestamp for the bucket according to the weekly bucket schedule\\n     * @param reports - the reports for the bucket\\n     */\\n    struct Bucket {\\n        uint64 originalNonce;\\n        uint64 lastUpdatedNonce;\\n        uint128 finalizationTimestamp;\\n        Report[] reports;\\n    }\\n\\n    /**\\n     * @dev a struct to represent a bucket global state\\n     * @dev its used as a caching mechanism to avoid iterating over all buckets\\n     * @param totalNewGCC - the total amount of new gcc\\n     * @param totalGLWRewardsWeight - the total amount of glw rewards weight\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight\\n     */\\n    struct BucketGlobalState {\\n        uint128 totalNewGCC;\\n        uint64 totalGLWRewardsWeight;\\n        uint64 totalGRCRewardsWeight;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                   */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev Emitted when a gca submits a new compensation plan.\\n     * @param agent - the address of the gca agent proposing\\n     * @param plan - the compensation plan of the agent\\n     */\\n    event CompensationPlanSubmitted(address indexed agent, uint32[5] plan);\\n\\n    /**\\n     * @dev Emitted when a gca claims their payout\\n     * @param agent - the address of the gca agent claiming\\n     * @param amount - the amount of tokens claimed\\n     * @param totalSlashableBalance - the total slashable balance of the gca\\n     */\\n    event GCAPayoutClaimed(address indexed agent, uint256 amount, uint256 totalSlashableBalance);\\n\\n    /**\\n     * @dev Emitted when a proposal hash is acted upon\\n     * @param index - the index of the proposal hash inside the {proposalHashes} array\\n     * @param proposalHash - the proposal hash\\n     */\\n    event ProposalHashUpdate(uint256 indexed index, bytes32 proposalHash);\\n\\n    /**\\n     * @dev emitted when a proposal hash is pushed\\n     * @param proposalHash - the proposal hash\\n     */\\n    event ProposalHashPushed(bytes32 proposalHash);\\n\\n    /**\\n     * @dev Emitted when governacne updates the {requirementsHash}\\n     * @param requirementsHash - the new requirements hash gcas must abide by\\n     */\\n    event RequirementsHashUpdated(bytes32 requirementsHash);\\n\\n    /**\\n     * @dev emitted when new GCAs are appointed\\n     * @dev the new GCAs completely replace the old ones\\n     * @param newGcas - the new GCAs\\n     */\\n    event NewGCAsAppointed(address[] newGcas);\\n\\n    /**\\n     * @dev emitted when GCAs are slashed\\n     * @param slashedGcas - the slashed GCAs\\n     */\\n    event GCAsSlashed(address[] slashedGcas);\\n\\n    /**\\n     * @notice emitted when a GCA submits a report for a bucket\\n     * @param bucketId - the id of the bucket\\n     * @param gca - the address of the gca agent submitting the report\\n     * @param slashNonce - the slash nonce at the time of report submission\\n     * @param totalNewGCC - the total amount of new gcc from the farms the GCA is reporting on\\n     * @param totalGlwRewardsWeight - the total amount of glw rewards weight from the farms the GCA is reporting on\\n     * @param totalGRCRewardsWeight - the total amount of grc rewards weight from the farms the GCA is reporting on\\n     * @param root - the merkle root of the reports\\n     * @param extraData - extra data to be emitted.\\n     *                         - This extra data can be anything as long as the GCA communicates it to the community\\n     *                         - and should ideally, if possible, be the leaves of the merkle tree\\n     */\\n    event BucketSubmissionEvent(\\n        uint256 indexed bucketId,\\n        address gca,\\n        uint256 slashNonce,\\n        uint256 totalNewGCC,\\n        uint256 totalGlwRewardsWeight,\\n        uint256 totalGRCRewardsWeight,\\n        bytes32 root,\\n        bytes extraData\\n    );\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state changing funcs                       */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice allows governance to push a hash to execute against\\n     * @param hash - the hash to execute against\\n     * @param incrementSlashNonce - whether or not to increment the slash nonce\\n     *         - incrementing the slash nonce means that all non-finalized buckets will be slashed\\n     *             - and must be reinstated\\n     * @dev the hash is the abi.encode of the following:\\n     *         - the gca agents to slash\\n     *         - the new gca agents\\n     *         - the proposal creation timestamp\\n     */\\n    function pushHash(bytes32 hash, bool incrementSlashNonce) external;\\n\\n    /**\\n     * @notice allows governance to change the requirements hash of GCA's\\n     *         - the requirements hash represents a hash of the duties and responsibilities of a GCA\\n     * @param  _requirementsHash - the new requirements hash\\n     */\\n    function setRequirementsHash(bytes32 _requirementsHash) external;\\n\\n    /// @dev allows GCAs to submit a compensation plan\\n    function submitCompensationPlan(uint32[5] calldata plan, uint256 indexOfGCA) external;\\n\\n    /// @dev allows the contract to pull glow from inflation\\n    function claimGlowFromInflation() external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   view functions                            */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns true if the caller is a gca\\n     * @param account - the address of the account to check\\n     * @return status -  true if the account is a gca , false otherwise\\n     */\\n    function isGCA(address account) external view returns (bool);\\n\\n    /**\\n     * @notice returns true if the caller is a gca\\n     * @param account - the address of the account to check\\n     * @param index - the index of the gca in the gca array\\n     * @return status -  true if the account is a gca , false otherwise\\n     */\\n    function isGCA(address account, uint256 index) external view returns (bool);\\n\\n    /// @return - returns all the gcas\\n    function allGcas() external view returns (address[] memory);\\n\\n    /**\\n     * @param gca - the address of the gca to check\\n     * @return - returns the {GCAPayout} struct data for a gca\\n     */\\n    function gcaPayoutData(address gca) external view returns (GCAPayout memory);\\n\\n    /**\\n     * @notice - returns all proposal hashes\\n     * @return proposalHashes - the proposal hashes\\n     */\\n    function getProposalHashes() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice - returns a range of proposal hashes\\n     * @param start - the start index\\n     * @param end - the end index\\n     * @return proposalHashes - the proposal hashes\\n     */\\n    function getProposalHashes(uint256 start, uint256 end) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice returns the global state of a bucket\\n     * @param bucketId - the id of the bucket\\n     * @return the global state of a bucket\\n     */\\n    function bucketGlobalState(uint256 bucketId) external view returns (BucketGlobalState memory);\\n\\n    /**\\n     * @notice returns the {Bucket} struct for a given week / bucketId\\n     * @param bucketId - the id of the bucket\\n     * @return bucket - the {Bucket} struct for a given bucketId\\n     */\\n    function bucket(uint256 bucketId) external view returns (Bucket memory);\\n\\n    /**\\n     * @notice returns if the bucket is finalized or not\\n     * @param bucketId - the id of the bucket\\n     */\\n\\n    function isBucketFinalized(uint256 bucketId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMinerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IMinerPool {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                    */\\n    /* -------------------------------------------------------------------------- */\\n    error ElectricityFuturesSignatureExpired();\\n    error ElectricityFuturesAuctionEnded();\\n    error ElectricityFuturesAuctionBidTooLow();\\n    error ElectricityFuturesAuctionAuthorizationTooLong();\\n    error ElectricityFuturesAuctionInvalidSignature();\\n    error ElectricityFutureAuctionBidMustBeGreaterThanMinimumBid();\\n    error CallerNotEarlyLiquidity();\\n    error NotUSDCToken();\\n    error InvalidProof();\\n    error UserAlreadyClaimed();\\n    error AlreadyMintedToCarbonCreditAuction();\\n    error BucketNotFinalized();\\n    error CallerNotVetoCouncilMember();\\n    error CannotDelayEmptyBucket();\\n    error CannotDelayBucketThatNeedsToUpdateSlashNonce();\\n    error BucketAlreadyDelayed();\\n    error SignerNotGCA();\\n    error SignatureDoesNotMatchUser();\\n    error GlowWeightOverflow();\\n    error USDCWeightOverflow();\\n    error GlowWeightGreaterThanTotalWeight();\\n    error USDCWeightGreaterThanTotalWeight();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                     state-changing                        */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Allows anyone to donate USDC into the miner USDC rewards pool\\n     * @notice the amount is split across 192 weeks starting at the current week + 16\\n     * @param amount -  amount to deposit\\n     */\\n    function donateToUSDCMinerRewardsPool(uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the early liquidity to donate USDC into the miner USDC rewards pool\\n     * @notice the amount is split across 192 weeks starting at the current week + 16\\n     * @dev the USDC token must be a valid USDC token\\n     * @dev early liquidity will safeTransfer from the user to the miner pool\\n     *     -   and then call this function directly.\\n     *     -   we do this to prevent extra transfers.\\n     * @param amount -  amount to deposit\\n     */\\n    function donateToUSDCMinerRewardsPoolEarlyLiquidity(uint256 amount) external;\\n\\n    /**\\n     * @notice allows a user to claim their rewards for a bucket\\n     * @dev It's highly recommended to use a CLI or UI to call this function.\\n     *             - the proof can only be generated off-chain with access to the entire tree\\n     *             - furthermore, USDC tokens must be correctly input in order to receive rewards\\n     *             - the USDC tokens should be kept on record off-chain.\\n     *             - failure to input all correct USDC Tokens will result in lost rewards\\n     * @param bucketId - the id of the bucket\\n     * @param glwWeight - the weight of the user's glw rewards\\n     * @param USDCWeight - the weight of the user's USDC rewards\\n     * @param proof - the merkle proof of the user's rewards\\n     *                     - the leaves are {payoutWallet, glwWeight, USDCWeight}\\n     * @param index - the index of the report in the bucket\\n     *                     - that contains the merkle root where the user's rewards are stored\\n     * @param user - the address of the user\\n     * @param claimFromInflation - whether or not to claim glow from inflation\\n     * @param signature - the eip712 signature that allows a relayer to execute the action\\n     *               - to claim for a user.\\n     *               - the relayer is not able to access rewards under any means\\n     *               - rewards are always sent to the {user}\\n     */\\n    function claimRewardFromBucket(\\n        uint256 bucketId,\\n        uint256 glwWeight,\\n        uint256 USDCWeight,\\n        bytes32[] calldata proof,\\n        uint256 index,\\n        address user,\\n        bool claimFromInflation,\\n        bytes memory signature\\n    ) external;\\n\\n    /**\\n     * @notice allows a veto council member to delay the finalization of a bucket\\n     * @dev the bucket must already be initialized in order to be delayed\\n     * @dev the bucket cannot be finalized in order to be delayed\\n     * @dev the bucket can be delayed multiple times\\n     * @param bucketId - the id of the bucket to delay\\n     */\\n    function delayBucketFinalization(uint256 bucketId) external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   view                                    */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns true if a bucket has been delayed\\n     * @param bucketId - the id of the bucket\\n     * @return true if the bucket has been delayed\\n     */\\n    function hasBucketBeenDelayed(uint256 bucketId) external view returns (bool);\\n\\n    /**\\n     * @notice returns the bytes32 digest of the claim reward from bucket message\\n     * @param bucketId - the id of the bucket\\n     * @param glwWeight - the weight of the user's glw rewards in the leaf of the report root\\n     * @param USDCWeight - the weight of the user's USDC rewards in the leaf of the report root\\n     * @param index - the index of the report in the bucket\\n     *                     - that contains the merkle root where the user's rewards are stored\\n     * @param claimFromInflation - whether or not to claim glow from inflation\\n     * @return the bytes32 digest of the claim reward from bucket message\\n     */\\n    function createClaimRewardFromBucketDigest(\\n        uint256 bucketId,\\n        uint256 glwWeight,\\n        uint256 USDCWeight,\\n        uint256 index,\\n        bool claimFromInflation\\n    ) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/MinerPoolAndGCA/BucketSubmission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {_BUCKET_DURATION} from \\\"@/Constants/Constants.sol\\\";\\n\\ncontract BucketSubmission {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice the start offset to the current bucket for the grc deposit\\n     * @dev when depositing grc, the grc is evenly distributed across 192 weeks\\n     *         -   The first bucket to receive grc is the current bucket + 16 weeks\\n     *         -   The last bucket to receive grc is the current bucket + 208 weeks\\n     */\\n    uint256 public constant OFFSET_LEFT = 16;\\n\\n    /**\\n     * @notice the end offset to the current bucket for the grc deposit\\n     * @dev the amount to offset b(x) by to get the final bucket number where the grc will have finished vesting\\n     *         - where b(x) is the current bucket\\n     */\\n    uint256 public constant OFFSET_RIGHT = 208;\\n\\n    /// @notice a constant holding the total vesting periods for a grc donation (192)\\n    uint256 public constant TOTAL_VESTING_PERIODS = OFFSET_RIGHT - OFFSET_LEFT;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev a helper to cache the last updated bucket\\n     *         -   and the first bucket that USDC was deposited to\\n     *         -   and the last bucket that USDC was deposited to\\n     */\\n    BucketTracker internal bucketTracker;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   mappings                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice mappings bucketId -> WeeklyReward\\n    mapping(uint256 => WeeklyReward) internal rewards;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev a helper to keep track of last updated bucket ids for buckets\\n     * @param lastUpdatedBucket - the last bucket + 16 that grc was deposited to this bucket\\n     * @param maxBucketId - the lastUpdatedBucket + 191 since the range of buckets is (lastUpdatedBucket, lastUpdatedBucket + 192]\\n     *                                                                                       ^ inclusive,             exclusive ^\\n     * @param firstAddedBucketId - the first bucket + 16 that grc was deposited to this bucket\\n     * @dev none of the params should overflow, since they represent weeks\\n     *         - it's safe to assume by 2^48 weeks climate should should have better solutions\\n     */\\n    struct BucketTracker {\\n        uint48 lastUpdatedBucket;\\n        uint48 maxBucketId;\\n        uint48 firstAddedBucketId;\\n    }\\n\\n    /**\\n     * @dev a struct to help track the amount in weekly rewards\\n     * @param inheritedFromLastWeek - a flag to see if the bucket has inherited\\n     *             -   its vesting amount from past buckets\\n     * @param amountInBucket - the current amount in the bucket available as rewards\\n     * @param amountToDeduct - the amount to deduct from the {amountInBucket} when it initializes itself\\n     */\\n    struct WeeklyReward {\\n        bool inheritedFromLastWeek;\\n        uint256 amountInBucket;\\n        uint256 amountToDeduct;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    events                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Emitted when a user donates usdc to the contract\\n     * @param bucketId - the bucket id in which the donation happened.\\n     *        - the result of this donation vests from bucketId + 16 to bucketId + 208\\n     * @param totalAmountDonated - the total amount donated at `bucketId`\\n     *         - the total amount donated at `bucketId` is evenly distributed over 192 buckets\\n     */\\n    event AmountDonatedToBucket(uint256 indexed bucketId, uint256 totalAmountDonated);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice returns the current bucket\\n     * @return currentBucket - the current bucket\\n     */\\n    function currentBucket() public view returns (uint256) {\\n        return (block.timestamp - _genesisTimestamp()) / bucketDuration();\\n    }\\n\\n    /**\\n     * @notice returns the bucket tracker for a given grc token\\n     * @return bucketTracker - the bucket tracker struct\\n     */\\n    function getBucketTracker() external view returns (BucketTracker memory) {\\n        return bucketTracker;\\n    }\\n\\n    /**\\n     * @notice returns the weekly reward for a given bucket and grc token\\n     * @param id - the bucketId (week) to query for\\n     * @return bucket - the  weekly reward struct for the bucket\\n     */\\n    function reward(uint256 id) public view returns (WeeklyReward memory) {\\n        (WeeklyReward memory bucket,) = _rewardWithNeedsInitializing(id);\\n        return bucket;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             internal add to bucket                         */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice adds the usdc to the current bucket\\n     * @dev this function is called when a user donates usdc to the contract\\n     * @param amount - the amount of usdc to add\\n     *                  - the `amount` gets distributed over 192 buckets with the first bucket being the current bucket + OFFSET_LEFT\\n     */\\n    function _addToCurrentBucket(uint256 amount) internal {\\n        //Calculate the current bucket\\n        uint256 currentBucketId = currentBucket();\\n        //The bucket to add to is always the current bucket + OFFSET_LEFT\\n        uint256 bucketToAddTo = currentBucketId + OFFSET_LEFT;\\n        //The bucket to deduct from is always the bucketToAddTo + TOTAL_VESTING_PERIODS\\n        uint256 bucketToDeductFrom = bucketToAddTo + TOTAL_VESTING_PERIODS;\\n\\n        //The amount to add to the bucketToAddTo OR subtract from the bucketToDeductFrom\\n        uint256 amountToAddOrSubtract = amount / TOTAL_VESTING_PERIODS;\\n\\n        //Load  bucketTracker into memory\\n        //Bucket trackers are used to keep track of the last updated bucket\\n        //and are used for caching to reduce gas costs\\n        BucketTracker memory _bucketTracker = bucketTracker;\\n\\n        //Load the current bucket into memory\\n        WeeklyReward memory currentWeeklyReward = rewards[bucketToAddTo];\\n\\n        //If the bucket has already reconciled with its past weeks,\\n        //then we can just add the amount to the bucket\\n        //We also deduct the amount from the bucketToDeductFrom bucket\\n        if (currentWeeklyReward.inheritedFromLastWeek) {\\n            rewards[bucketToAddTo].amountInBucket += amountToAddOrSubtract;\\n            rewards[bucketToDeductFrom].amountToDeduct += amountToAddOrSubtract;\\n            emit AmountDonatedToBucket(currentBucketId, amount);\\n            return;\\n        }\\n\\n        //Cache the last updated bucket\\n        //The last updated bucket is the last bucket thats {amountInBucket} was updated\\n        //If the last updated bucket has never been set (aka == 0),\\n        //then that means the first bucket to be updated is the bucketToAddTo\\n        //If the last updated bucket was already set, then we use that\\n        uint256 lastUpdatedBucket =\\n            _bucketTracker.lastUpdatedBucket == 0 ? bucketToAddTo : _bucketTracker.lastUpdatedBucket;\\n        WeeklyReward memory lastBucket = rewards[lastUpdatedBucket];\\n\\n        //We already know we are going to add {amountToAddOrSubtract} to the {bucketToDeductFrom}\\n        rewards[bucketToDeductFrom].amountToDeduct += amountToAddOrSubtract;\\n\\n        //This means that we don't need to look backwards\\n        //Since all the vested amount from that bucket would have been emptied by now if the bucket hadnt been refreshed in 192 weeks\\n        // If the lastUpdatedBucket is the current bucket, we also don't need to look backwards\\n        //If the {bucketToAddTo} is greater than the {maxBucketId} then we don't need to look backwards\\n        //This is so because if {bucketToAddTo} is > {maxBucketId} then that means that all the tokens have already vested\\n        //because tokens vest in between {bucketToAddTo} and {maxBucketId}\\n        //This would only be the case if there has been a long period of time where no one has called {claimRewards}\\n        //Or, no one has donated the grc to the contract\\n        //Also, if the last bucket is the same as the bucket to add to, then we don't need to look backwards neither\\n        bool pastDataIrrelevant = bucketToAddTo > _bucketTracker.maxBucketId || lastUpdatedBucket == bucketToAddTo;\\n        //If past data is irrelevant, we can assume that we start fresh from the current bucket\\n        uint256 totalToDeductFromBucket = pastDataIrrelevant ? 0 : currentWeeklyReward.amountToDeduct;\\n\\n        //As such, we don't need to look backwards if the past data is irrelevant\\n        if (!pastDataIrrelevant) {\\n            //However, if the past data is relavant,\\n            //We start at the last bucket that was updated,\\n            //And we look forwards until we reach the bucketToAddTo\\n            for (uint256 i = lastUpdatedBucket; i < bucketToAddTo; ++i) {\\n                totalToDeductFromBucket += rewards[i].amountToDeduct;\\n            }\\n        } else {\\n            //If the past data is irrelevant, then we set the amount in the bucket to 0\\n            //Such that the write below does not incorrectly add to the bucket\\n            lastBucket.amountInBucket = 0;\\n        }\\n\\n        /**\\n         * We then set\\n         *         {\\n         *             amountInBucket: (lastBucket.amountInBucket + amountToAddOrSubtract) - totalToDeductFromBucket,\\n         *             amountToDeduct: 0,\\n         *             inheritedFromLastWeek: true\\n         *         }\\n         *         We know that lastBucket.amountInBucket will always have a value > 0 (if the bucket has been donated to),\\n         *         and we also know that every time a bucket is donated to, it becomes the last updated bucket,\\n         *         therefore, {lastBucket.amountInBucket} is intended to be a cumulative sum of all the donations\\n         *         with {totalToDeductFromBucket} being the amount that is needed to be deducted from the bucket\\n         *         Once we adjust the amount in the bucket, we set the {inheritedFromLastWeek} to true\\n         *         We also set the {amountToDeduct} to 0 since we don't need to deduct anything from the bucket anymore\\n         */\\n        rewards[bucketToAddTo] = WeeklyReward({\\n            inheritedFromLastWeek: true,\\n            amountInBucket: (lastBucket.amountInBucket + amountToAddOrSubtract) - totalToDeductFromBucket,\\n            amountToDeduct: 0\\n        });\\n\\n        //If the lastUpdatedBucket has changed, then we update the lastUpdatedBucket\\n        if (_bucketTracker.lastUpdatedBucket != bucketToAddTo) {\\n            bucketTracker = BucketTracker(\\n                uint48(bucketToAddTo),\\n                uint48(bucketToAddTo + TOTAL_VESTING_PERIODS - 1),\\n                _bucketTracker.firstAddedBucketId\\n            );\\n        }\\n\\n        emit AmountDonatedToBucket(currentBucketId, amount);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                internal helpers                            */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev gets the total amount of grc in a bucket that is available to withdraw and initializes it\\n     *             - this is a helper function only meant to be used inside the claimRewards function\\n     * @param id - the id of the bucket\\n     */\\n    function _getAmountForTokenAndInitIfNot(uint256 id) internal returns (uint256) {\\n        (WeeklyReward memory weeklyReward, bool needsInitializing) = _rewardWithNeedsInitializing(id);\\n        if (needsInitializing) {\\n            weeklyReward.inheritedFromLastWeek = true;\\n            weeklyReward.amountToDeduct = 0;\\n            rewards[id] = weeklyReward;\\n        }\\n        return weeklyReward.amountInBucket;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 internal view                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns the weekly reward for a given bucket\\n     * @dev if the bucket has not yet been initialized,\\n     *             - the function will look backwards to calculate the correct amount\\n     *             - if the bucket has been initialized, it will return the bucket\\n     * @param id - the bucketId (week) to query for\\n     * @return bucket - the  weekly reward struct for the bucket\\n     * @return needsInitializing -- flag to see if the bucket needs to be initialized\\n     * @dev `needsInitializing` should be used in the withdraw reward function to see if the bucket needs to be initialized\\n     */\\n    function _rewardWithNeedsInitializing(uint256 id) private view returns (WeeklyReward memory, bool) {\\n        WeeklyReward memory bucket = rewards[id];\\n        // If the bucket has already been initialized\\n        // Then we can just return the bucket.\\n        if (bucket.inheritedFromLastWeek || id < OFFSET_LEFT) {\\n            return (bucket, false);\\n        }\\n\\n        // If the index to search for is greater than the maxBucketId\\n        // than that means all the tokens would have vested,\\n        // So we return the empty bucket\\n        BucketTracker memory _bucketTracker = bucketTracker;\\n        if (id > _bucketTracker.maxBucketId) {\\n            return (bucket, false);\\n        }\\n\\n        uint256 amountToSubtract = bucket.amountToDeduct;\\n        //Can't underflow since we start at id 16\\n        uint256 lastBucketId = id - 1;\\n\\n        //We get the first added bucket id from the bucket tracker.\\n        //The tracker helps us prevent uneccessary backward lookups\\n        uint256 firstUpdatedBucket = _bucketTracker.firstAddedBucketId;\\n        while (true) {\\n            // if the firstUpdatedbucket is greater than the last bucket id\\n            //then we break out of the loop\\n            //This happens in the case where the bucket has not been initialized yet\\n            //And also in the case where we re-add a grc token to the contract\\n            // after all its vesting periods have ended\\n            if (firstUpdatedBucket > lastBucketId) {\\n                break;\\n            }\\n            //Load the last bucket into memory\\n            WeeklyReward memory lastBucket = rewards[lastBucketId--];\\n            // add the amount to deduct from the last bucket to the amount to subtract\\n            amountToSubtract += lastBucket.amountToDeduct;\\n\\n            //If the last bucket has inherited from the last week\\n            if (lastBucket.inheritedFromLastWeek) {\\n                //We set the amount in the bucket to the last bucket amount - the amount to subtract\\n                //This marks the point at which we can stop looking backwards\\n                //It's also important to keep in mind that this algorithm only works\\n                //because we know that the last bucket will always have a value\\n                //If it does not have a value -- that means that the bucket has not been initialized\\n                // and therefore there are no rewards that need to be accounted for in those buckets\\n                bucket.amountInBucket = lastBucket.amountInBucket - amountToSubtract;\\n                break;\\n            }\\n        }\\n        return (bucket, true);\\n    }\\n\\n    function bucketDuration() internal pure virtual returns (uint256) {\\n        return _BUCKET_DURATION;\\n    }\\n    /* -------------------------------------------------------------------------- */\\n    /*                              functions to override                         */\\n    /* -------------------------------------------------------------------------- */\\n    /// @dev this must be overriden inside the parent contract.\\n\\n    function _genesisTimestamp() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/MerkleProofLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Gas optimized verification of proof of inclusion for a leaf in a Merkle tree.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/MerkleProofLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/MerkleProofLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol)\\nlibrary MerkleProofLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*            MERKLE PROOF VERIFICATION OPERATIONS            */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns whether `leaf` exists in the Merkle tree with `root`, given `proof`.\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf)\\n        internal\\n        pure\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(proof) {\\n                // Initialize `offset` to the offset of `proof` elements in memory.\\n                let offset := add(proof, 0x20)\\n                // Left shift by 5 is equivalent to multiplying by 0x20.\\n                let end := add(offset, shl(5, mload(proof)))\\n                // Iterate over proof elements to compute root hash.\\n                for {} 1 {} {\\n                    // Slot of `leaf` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(leaf, mload(offset)))\\n                    // Store elements to hash contiguously in scratch space.\\n                    // Scratch space is 64 bytes (0x00 - 0x3f) and both elements are 32 bytes.\\n                    mstore(scratch, leaf)\\n                    mstore(xor(scratch, 0x20), mload(offset))\\n                    // Reuse `leaf` to store the hash to reduce stack operations.\\n                    leaf := keccak256(0x00, 0x40)\\n                    offset := add(offset, 0x20)\\n                    if iszero(lt(offset, end)) { break }\\n                }\\n            }\\n            isValid := eq(leaf, root)\\n        }\\n    }\\n\\n    /// @dev Returns whether `leaf` exists in the Merkle tree with `root`, given `proof`.\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf)\\n        internal\\n        pure\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if proof.length {\\n                // Left shift by 5 is equivalent to multiplying by 0x20.\\n                let end := add(proof.offset, shl(5, proof.length))\\n                // Initialize `offset` to the offset of `proof` in the calldata.\\n                let offset := proof.offset\\n                // Iterate over proof elements to compute root hash.\\n                for {} 1 {} {\\n                    // Slot of `leaf` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(leaf, calldataload(offset)))\\n                    // Store elements to hash contiguously in scratch space.\\n                    // Scratch space is 64 bytes (0x00 - 0x3f) and both elements are 32 bytes.\\n                    mstore(scratch, leaf)\\n                    mstore(xor(scratch, 0x20), calldataload(offset))\\n                    // Reuse `leaf` to store the hash to reduce stack operations.\\n                    leaf := keccak256(0x00, 0x40)\\n                    offset := add(offset, 0x20)\\n                    if iszero(lt(offset, end)) { break }\\n                }\\n            }\\n            isValid := eq(leaf, root)\\n        }\\n    }\\n\\n    /// @dev Returns whether all `leaves` exist in the Merkle tree with `root`,\\n    /// given `proof` and `flags`.\\n    function verifyMultiProof(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        bool[] memory flags\\n    ) internal pure returns (bool isValid) {\\n        // Rebuilds the root by consuming and producing values on a queue.\\n        // The queue starts with the `leaves` array, and goes into a `hashes` array.\\n        // After the process, the last element on the queue is verified\\n        // to be equal to the `root`.\\n        //\\n        // The `flags` array denotes whether the sibling\\n        // should be popped from the queue (`flag == true`), or\\n        // should be popped from the `proof` (`flag == false`).\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cache the lengths of the arrays.\\n            let leavesLength := mload(leaves)\\n            let proofLength := mload(proof)\\n            let flagsLength := mload(flags)\\n\\n            // Advance the pointers of the arrays to point to the data.\\n            leaves := add(0x20, leaves)\\n            proof := add(0x20, proof)\\n            flags := add(0x20, flags)\\n\\n            // If the number of flags is correct.\\n            for {} eq(add(leavesLength, proofLength), add(flagsLength, 1)) {} {\\n                // For the case where `proof.length + leaves.length == 1`.\\n                if iszero(flagsLength) {\\n                    // `isValid = (proof.length == 1 ? proof[0] : leaves[0]) == root`.\\n                    isValid := eq(mload(xor(leaves, mul(xor(proof, leaves), proofLength))), root)\\n                    break\\n                }\\n\\n                // The required final proof offset if `flagsLength` is not zero, otherwise zero.\\n                let proofEnd := mul(iszero(iszero(flagsLength)), add(proof, shl(5, proofLength)))\\n                // We can use the free memory space for the queue.\\n                // We don't need to allocate, since the queue is temporary.\\n                let hashesFront := mload(0x40)\\n                // Copy the leaves into the hashes.\\n                // Sometimes, a little memory expansion costs less than branching.\\n                // Should cost less, even with a high free memory offset of 0x7d00.\\n                leavesLength := shl(5, leavesLength)\\n                for { let i := 0 } iszero(eq(i, leavesLength)) { i := add(i, 0x20) } {\\n                    mstore(add(hashesFront, i), mload(add(leaves, i)))\\n                }\\n                // Compute the back of the hashes.\\n                let hashesBack := add(hashesFront, leavesLength)\\n                // This is the end of the memory for the queue.\\n                // We recycle `flagsLength` to save on stack variables (sometimes save gas).\\n                flagsLength := add(hashesBack, shl(5, flagsLength))\\n\\n                for {} 1 {} {\\n                    // Pop from `hashes`.\\n                    let a := mload(hashesFront)\\n                    // Pop from `hashes`.\\n                    let b := mload(add(hashesFront, 0x20))\\n                    hashesFront := add(hashesFront, 0x40)\\n\\n                    // If the flag is false, load the next proof,\\n                    // else, pops from the queue.\\n                    if iszero(mload(flags)) {\\n                        // Loads the next proof.\\n                        b := mload(proof)\\n                        proof := add(proof, 0x20)\\n                        // Unpop from `hashes`.\\n                        hashesFront := sub(hashesFront, 0x20)\\n                    }\\n\\n                    // Advance to the next flag.\\n                    flags := add(flags, 0x20)\\n\\n                    // Slot of `a` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(a, b))\\n                    // Hash the scratch space and push the result onto the queue.\\n                    mstore(scratch, a)\\n                    mstore(xor(scratch, 0x20), b)\\n                    mstore(hashesBack, keccak256(0x00, 0x40))\\n                    hashesBack := add(hashesBack, 0x20)\\n                    if iszero(lt(hashesBack, flagsLength)) { break }\\n                }\\n                isValid :=\\n                    and(\\n                        // Checks if the last value in the queue is same as the root.\\n                        eq(mload(sub(hashesBack, 0x20)), root),\\n                        // And whether all the proofs are used, if required (i.e. `proofEnd != 0`).\\n                        or(iszero(proofEnd), eq(proofEnd, proof))\\n                    )\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns whether all `leaves` exist in the Merkle tree with `root`,\\n    /// given `proof` and `flags`.\\n    function verifyMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32[] calldata leaves,\\n        bool[] calldata flags\\n    ) internal pure returns (bool isValid) {\\n        // Rebuilds the root by consuming and producing values on a queue.\\n        // The queue starts with the `leaves` array, and goes into a `hashes` array.\\n        // After the process, the last element on the queue is verified\\n        // to be equal to the `root`.\\n        //\\n        // The `flags` array denotes whether the sibling\\n        // should be popped from the queue (`flag == true`), or\\n        // should be popped from the `proof` (`flag == false`).\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the number of flags is correct.\\n            for {} eq(add(leaves.length, proof.length), add(flags.length, 1)) {} {\\n                // For the case where `proof.length + leaves.length == 1`.\\n                if iszero(flags.length) {\\n                    // `isValid = (proof.length == 1 ? proof[0] : leaves[0]) == root`.\\n                    // forgefmt: disable-next-item\\n                    isValid := eq(\\n                        calldataload(\\n                            xor(leaves.offset, mul(xor(proof.offset, leaves.offset), proof.length))\\n                        ),\\n                        root\\n                    )\\n                    break\\n                }\\n\\n                // The required final proof offset if `flagsLength` is not zero, otherwise zero.\\n                let proofEnd :=\\n                    mul(iszero(iszero(flags.length)), add(proof.offset, shl(5, proof.length)))\\n                // We can use the free memory space for the queue.\\n                // We don't need to allocate, since the queue is temporary.\\n                let hashesFront := mload(0x40)\\n                // Copy the leaves into the hashes.\\n                // Sometimes, a little memory expansion costs less than branching.\\n                // Should cost less, even with a high free memory offset of 0x7d00.\\n                calldatacopy(hashesFront, leaves.offset, shl(5, leaves.length))\\n                // Compute the back of the hashes.\\n                let hashesBack := add(hashesFront, shl(5, leaves.length))\\n                // This is the end of the memory for the queue.\\n                // We recycle `flagsLength` to save on stack variables (sometimes save gas).\\n                flags.length := add(hashesBack, shl(5, flags.length))\\n\\n                // We don't need to make a copy of `proof.offset` or `flags.offset`,\\n                // as they are pass-by-value (this trick may not always save gas).\\n\\n                for {} 1 {} {\\n                    // Pop from `hashes`.\\n                    let a := mload(hashesFront)\\n                    // Pop from `hashes`.\\n                    let b := mload(add(hashesFront, 0x20))\\n                    hashesFront := add(hashesFront, 0x40)\\n\\n                    // If the flag is false, load the next proof,\\n                    // else, pops from the queue.\\n                    if iszero(calldataload(flags.offset)) {\\n                        // Loads the next proof.\\n                        b := calldataload(proof.offset)\\n                        proof.offset := add(proof.offset, 0x20)\\n                        // Unpop from `hashes`.\\n                        hashesFront := sub(hashesFront, 0x20)\\n                    }\\n\\n                    // Advance to the next flag offset.\\n                    flags.offset := add(flags.offset, 0x20)\\n\\n                    // Slot of `a` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(a, b))\\n                    // Hash the scratch space and push the result onto the queue.\\n                    mstore(scratch, a)\\n                    mstore(xor(scratch, 0x20), b)\\n                    mstore(hashesBack, keccak256(0x00, 0x40))\\n                    hashesBack := add(hashesBack, 0x20)\\n                    if iszero(lt(hashesBack, flags.length)) { break }\\n                }\\n                isValid :=\\n                    and(\\n                        // Checks if the last value in the queue is same as the root.\\n                        eq(mload(sub(hashesBack, 0x20)), root),\\n                        // And whether all the proofs are used, if required (i.e. `proofEnd != 0`).\\n                        or(iszero(proofEnd), eq(proofEnd, proof.offset))\\n                    )\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   EMPTY CALLDATA HELPERS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns an empty calldata bytes32 array.\\n    function emptyProof() internal pure returns (bytes32[] calldata proof) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            proof.length := 0\\n        }\\n    }\\n\\n    /// @dev Returns an empty calldata bytes32 array.\\n    function emptyLeaves() internal pure returns (bytes32[] calldata leaves) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            leaves.length := 0\\n        }\\n    }\\n\\n    /// @dev Returns an empty calldata bool array.\\n    function emptyFlags() internal pure returns (bool[] calldata flags) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            flags.length := 0\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SafetyDelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IVetoCouncil} from \\\"@/interfaces/IVetoCouncil.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Struct representing a holding of tokens in the HoldingContract.\\n * @param amount The amount of tokens being held.\\n * @param expirationTimestamp The timestamp at which the holding expires and can be withdrawn.\\n */\\nstruct Holding {\\n    uint192 amount;\\n    uint64 expirationTimestamp;\\n}\\n\\n/**\\n * @dev a helper type to organize claim holdings arguments\\n * @param user the address of the user\\n * @param token the address of the USDC token to withdraw\\n */\\nstruct ClaimHoldingArgs {\\n    address user;\\n    address token;\\n}\\n\\ninterface ISafetyDelay {\\n    function addHolding(address user, address token, uint192 amount) external;\\n    function holdings(address user, address token) external view returns (Holding memory);\\n    function claimHoldings(ClaimHoldingArgs[] memory args) external;\\n}\\n\\n/**\\n * @title SafetyDelay\\n * @notice This contract is used to hold tokens for users\\n *         - This contract holds all USDC tokens that are part of the protocol\\n *         - Once farms withdraw, there is a 1 week delay before they can claim their tokens\\n *         - The Miner Pool Contract assigns these holdings as part of the withdraw process\\n *         - Veto Agents can delay all withdrawals by 13 weeks\\n *         - A holding can be max delayed for 97 days\\n */\\ncontract SafetyDelay is ISafetyDelay {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error OnlyMinerPoolCanAddHoldings();\\n    error WithdrawalNotReady();\\n    error CallerMustBeVetoCouncilMember();\\n    error DelayStillOnCooldown();\\n    error NetworkIsFrozen();\\n    error AlreadyWithdrawnFromHolding();\\n    error MinerPoolAlreadySet();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice the default delay for withdrawals\\n     * @dev the default delay is 7 days\\n     * Whenever a user withdraws from the miner pool,\\n     *       their funds are locked for 7 days\\n     */\\n    uint256 public constant DEFAULT_DELAY = uint256(7 days);\\n\\n    /**\\n     * @dev 90 days in seconds\\n     */\\n    uint256 public constant NINETY_DAYS = uint256(90 days);\\n\\n    /**\\n     * @notice the delay for withdrawals after the network is delayed\\n     * @dev the delay is 13 weeks\\n     * all withdrawals will be delayed for 13 weeks\\n     */\\n    uint256 public constant VETO_HOLDING_DELAY = uint256(13 weeks);\\n\\n    /**\\n     * @dev a cached version of five weeks in seconds\\n     * @dev used in delayNetwork to ensure that the network can only be delayed every 5 weeks\\n     * @dev This helps prevent bad veto agents from spamming the delay network function\\n     *         - by giving governance enough time to kick out the veto agent\\n     */\\n    uint256 public constant FIVE_WEEKS = uint256(5 weeks);\\n\\n    /* -------------------------------------------------------------e------------- */\\n    /*                                 immutables                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice the address of the veto council\\n     * @dev veto council members can delay the network\\n     */\\n    IVetoCouncil public immutable VETO_COUNCIL;\\n\\n    /**\\n     * @notice the address of the miner pool\\n     * @dev this is the address that can add holdings to the contract\\n     */\\n    address public immutable MINER_POOL;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice the minimum timestamp for withdrawals\\n     * @dev any claims below this timestamp will revert\\n     */\\n    uint256 public minimumWithdrawTimestamp;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   mappings                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice the holdings for each user\\n     *     Note: We could have chosen an array of holdings\\n     *     such that each withdraw truly is a FIFO queue with 1 week delay\\n     *     However, we chose to store all holdings in a single slot\\n     *     to avoid cold sstores and sloads\\n     *     The downside of this approach is that we can't have a FIFO queue\\n     *     and that any time a withdraw is made from the miner pool contract\\n     *     the user's holdings are locked for 7 days\\n     */\\n    mapping(address => mapping(address => Holding)) private _holdings;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev emitted when there is a network delay\\n     * @param vetoAgent the address of the veto agent that delayed the network\\n     * @param timestamp the timestamp at which the network was delayed\\n     */\\n    event NetworkDelay(address vetoAgent, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted whenever a holding is added to a user\\n     * @param user the address of the user\\n     * @param token the address of the USDC token\\n     * @param amount the amount of tokens added to the holding\\n     * @dev we dont emit a {HoldingClaimed} event since there may be a tax\\n     *     - on the token that will mess up the data.\\n     *     - we rely on catching transfer events\\n     */\\n    event HoldingAdded(address indexed user, address indexed token, uint192 amount);\\n\\n    /*\\n        * @notice emitted when a user claims their holding\\n        * @param user the address of the user\\n        * @param token the address of the USDC token\\n        * @param amount the amount of tokens claimed\\n    */\\n    event HoldingClaimed(address indexed user, address indexed token, uint192 amount);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @param _vetoCouncil the address of the veto council\\n     * @param _minerPool the address of the miner pool\\n     */\\n    constructor(address _vetoCouncil, address _minerPool) payable {\\n        VETO_COUNCIL = IVetoCouncil(_vetoCouncil);\\n        MINER_POOL = _minerPool;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    delay                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice allows veto council members to delay the network by 13 weeks\\n     */\\n    function delayNetwork() external {\\n        if (!VETO_COUNCIL.isCouncilMember(msg.sender)) {\\n            _revert(CallerMustBeVetoCouncilMember.selector);\\n        }\\n        uint256 _minimumWithdrawTimestamp = minimumWithdrawTimestamp;\\n        if (_minimumWithdrawTimestamp == 0) {\\n            minimumWithdrawTimestamp = block.timestamp + VETO_HOLDING_DELAY;\\n            emit NetworkDelay(msg.sender, block.timestamp);\\n            return;\\n        }\\n        if (block.timestamp < _minimumWithdrawTimestamp) {\\n            //The block.timestamp needs to be within 5 weeks of\\n            //minimumWithdrawTimestamp\\n            uint256 timeLeftInDelay = _minimumWithdrawTimestamp - block.timestamp;\\n            if (timeLeftInDelay > FIVE_WEEKS) {\\n                _revert(DelayStillOnCooldown.selector);\\n            }\\n        }\\n\\n        minimumWithdrawTimestamp = block.timestamp + VETO_HOLDING_DELAY;\\n        emit NetworkDelay(msg.sender, block.timestamp);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   claim                                    */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice entrypoint to claim holdings\\n     * @param args - an array of {ClaimHoldingArgs}\\n     * @dev this is a batch method to claim holdings\\n     *     - this is more gas efficient than calling claimHolding for each holding\\n     *     - the protocol may use a relayer to bundle claims\\n     */\\n    function claimHoldings(ClaimHoldingArgs[] memory args) external {\\n        //If the network is frozen, don't allow withdrawals\\n        bool networkIsFrozen = isNetworkFrozen();\\n        //Loop over all the arguments\\n        uint256 len = args.length;\\n        for (uint256 i; i < len;) {\\n            ClaimHoldingArgs memory arg = args[i];\\n            _claimHolding(arg.user, arg.token, networkIsFrozen);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice entrypoint to claim a single holding\\n     * @param user the address of the user\\n     * @param token the address of the USDC token to withdraw\\n     * @dev should be used if the user only wants to claim their holding\\n     */\\n    function claimHoldingSingleton(address user, address token) external {\\n        // If the network is frozen and timestamp since expiration is not more than 90 days, don't allow withdrawals\\n        bool networkIsFrozen = isNetworkFrozen();\\n        _claimHolding(user, token, networkIsFrozen);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 add holdings                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice an internal method to increment the amount in a holding\\n     * @param user the address of the user\\n     * @param token the address of the USDC token to withdraw\\n     * @param amount the amount of tokens to add to the holding\\n     */\\n    function addHolding(address user, address token, uint192 amount) external {\\n        if (msg.sender != MINER_POOL) {\\n            _revert(OnlyMinerPoolCanAddHoldings.selector);\\n        }\\n        _holdings[user][token].amount += amount;\\n        _holdings[user][token].expirationTimestamp = uint64(block.timestamp + DEFAULT_DELAY);\\n        emit HoldingAdded(user, token, amount);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns the Holding struct for a user and token pair\\n     * @param user the address of the user\\n     * @param token the address of the USDC token to withdraw\\n     * @return holding - the Holding struct\\n     */\\n    function holdings(address user, address token) external view returns (Holding memory) {\\n        return _holdings[user][token];\\n    }\\n\\n    /**\\n     * @notice returns true if the network is frozen\\n     * @dev the network is frozen if the minimumWithdrawTimestamp is greater than the current block timestamp\\n     * @return isNetworkFrozen - true if the network is frozen\\n     */\\n    function isNetworkFrozen() public view returns (bool) {\\n        return block.timestamp < minimumWithdrawTimestamp;\\n    }\\n\\n    /**\\n     * @dev checks if the holding is available to be withdrawn\\n     * @param holdingExpirationTimestamp the timestamp at which the holding expires\\n     * @param isNetworkFrozen whether or not the network is currently frozen\\n     * @dev - if the network is frozen, the holding can be withdrawn only if it's been more than 90 days past the expiration of the holding\\n     *      - if the network is not frozen, the holding can be withdrawn only if it's past the expiration date of the holding\\n     */\\n    function checkHoldingAvailable(uint64 holdingExpirationTimestamp, bool isNetworkFrozen) internal view {\\n        if (block.timestamp < holdingExpirationTimestamp) {\\n            _revert(WithdrawalNotReady.selector);\\n        }\\n        //Can't underflow because of the check above\\n        //No claim should be able to be held for more than 97 days\\n        //If it's been less than than 97 days since the proposal has expired,\\n        //(expiration timestamp is always claim timestamp + 1 week, so )\\n        //in order for proposal to be held maximum 97 days,\\n        //We need to check if the diff is 90 days\\n        if (block.timestamp - holdingExpirationTimestamp < NINETY_DAYS) {\\n            if (isNetworkFrozen) {\\n                _revert(NetworkIsFrozen.selector);\\n            }\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   utils                                    */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @dev an internal method to claim a holding\\n     * @param user the address of the user\\n     * @param token the address of the USDC token to withdraw\\n     * @param networkIsFrozen whether or not the network is currently frozen\\n     */\\n    function _claimHolding(address user, address token, bool networkIsFrozen) internal {\\n        Holding memory holding = _holdings[user][token];\\n        checkHoldingAvailable(holding.expirationTimestamp, networkIsFrozen);\\n        //Delete the holding args.\\n        //Should set all the data to zero.\\n        delete _holdings[user][token];\\n        //Add the amount to the amount to transfer\\n        SafeERC20.safeTransfer(IERC20(token), user, holding.amount);\\n        emit HoldingClaimed(user, token, holding.amount);\\n    }\\n\\n    /**\\n     * @dev more efficient reverts\\n     * @param selector the selector of the error\\n     */\\n\\n    function _revert(bytes4 selector) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0, selector)\\n            revert(0, 4)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Constants/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nuint256 constant _BUCKET_DURATION = uint256(7 days);\\nuint256 constant _GENESIS_TIMESTAMP = 1700352000;\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `hash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32 digest) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(\\n        address validator,\\n        bytes memory data\\n    ) internal pure returns (bytes32 digest) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"src/libraries/HalfLifeCarbonCreditAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ABDKMath64x64} from \\\"@/libraries/ABDKMath64x64.sol\\\";\\n\\nlibrary HalfLifeCarbonCreditAuction {\\n    /**\\n     * @dev the halving period in seconds (7 days)\\n     * @dev the price of the carbon credit auction decays with a half-life or 7 days\\n     *         - the price will shrink exponentially every 7 days unless there are purchases\\n     */\\n    uint256 constant HALVING_PERIOD = uint256(7 days);\\n\\n    /**\\n     * @notice calculates the value remaining after a given amount of time has elapsed\\n     *         - using a half-life of 52 weeks\\n     * @param initialValue the initial value\\n     * @param elapsedSeconds the number of seconds that have elapsed\\n     * @return value - the value remaining given a half-life of 52 weeks\\n     */\\n    function calculateHalfLifeValue(uint256 initialValue, uint256 elapsedSeconds) public pure returns (uint256) {\\n        if (elapsedSeconds == 0) {\\n            return initialValue;\\n        }\\n        // Convert the half-life from months to seconds\\n        uint256 halfLifeSeconds = HALVING_PERIOD;\\n\\n        // Calculate the ratio of elapsed time to half-life in fixed point format\\n        int128 tOverT =\\n            ABDKMath64x64.div(ABDKMath64x64.fromUInt(elapsedSeconds), ABDKMath64x64.fromUInt(halfLifeSeconds));\\n\\n        // Calculate (1/2)^(t/T) using the fact that e^(ln(0.5)*t/T) = (0.5)^(t/T)\\n        int128 halfPowerTOverT =\\n            ABDKMath64x64.exp(ABDKMath64x64.mul(ABDKMath64x64.ln(ABDKMath64x64.divu(1, 2)), tOverT));\\n\\n        // Calculate the final amount\\n        uint256 finalValue = ABDKMath64x64.mulu(halfPowerTOverT, initialValue);\\n\\n        return finalValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/MinerPoolAndGCA/GCASalaryHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {VestingMathLib} from \\\"@/libraries/VestingMathLib.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {_BUCKET_DURATION} from \\\"@/Constants/Constants.sol\\\";\\n\\nabstract contract GCASalaryHelper {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error HashesNotUpdated();\\n    error CannotSetNonceToZero();\\n    error InvalidRelaySignature();\\n    error InvalidGCAHash();\\n    error InvalidUserIndex();\\n    error InvalidShares();\\n    error SlashedAgentCannotClaimReward();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @dev 10_000 GLW Per Week available as rewards to all GCAs\\n    uint256 public constant REWARDS_PER_SECOND_FOR_ALL = 10_000 ether / uint256(7 days);\\n\\n    /**\\n     * @notice the amount of shares required per agent when submitting a compensation plan\\n     * @dev this is not strictly enforced, but rather the\\n     *         the total shares in a comp plan must equal the SHARES_REQUIRED_PER_COMP_PLAN\\n     */\\n    uint256 public constant SHARES_REQUIRED_PER_COMP_PLAN = 100_000;\\n\\n    /// @dev the type hash for a claim payout relay permit\\n    bytes32 public constant CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH =\\n        keccak256(\\\"ClaimPayoutRelay(address relayer,uint256 paymentNonce,uint256 relayNonce)\\\");\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    ///  Private payment nonce.\\n    /// Private payment nonce only needs to be incremented when a gca submits a new overriding comp plan.\\n    /// The public paymentNonce() function is also incremented whenever there's a slash event\\n    /// The public paymentNonce() function should be the _privatePaymentNonce + proposalHashes.length;\\n    uint256 private _privatePaymentNonce;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   mappings                                  */\\n    /* -------------------------------------------------------------------------- */\\n    //payment nonce -> gca index -> comp plan\\n    mapping(uint256 => mapping(uint256 => uint32[5])) private _paymentNonceToCompensationPlan;\\n    //payment nonce -> shift start timestamp\\n    mapping(uint256 => uint256) private _paymentNonceToShiftStartTimestamp;\\n\\n    // agent -> payment nonce -> amount already withdrawn\\n    mapping(address => mapping(uint256 => uint256)) public amountWithdrawnAtPaymentNonce;\\n\\n    /// @dev slashed agents cannot claim rewards\\n    mapping(address => bool) public isSlashed;\\n\\n    // paymentNonce -> keccak256(abi.encodePacked(address[]));\\n    mapping(uint256 => bytes32) private _paymentNonceToGCAs;\\n\\n    /// @notice the next nonce to use in the relay signature\\n    mapping(address => uint256) public nextRelayNonce;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @param startingAgents the starting gca agents\\n     */\\n    constructor(address[] memory startingAgents) payable {\\n        if (startingAgents.length == 0) return;\\n        _paymentNonceToGCAs[0] = keccak256(abi.encodePacked(startingAgents));\\n        unchecked {\\n            for (uint256 i; i < startingAgents.length; ++i) {\\n                //starting payment nonce is 0\\n                //so we set the comp plan for all the agents to the identity matrix\\n                //for the first payment nonce\\n                _paymentNonceToCompensationPlan[0][i] = defaultCompPlan(i);\\n            }\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                               claiming payout                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev we don't need a deadline on the sig since the relayer cant make the funds go anywhere else,\\n     *             except for the user's address.\\n     *             AND - the relayer is restricted to a certian nonce.\\n     * @param user the user to claim the payout for\\n     * @param paymentNonce the payment nonce to claim the payout for\\n     * @param activeGCAsAtPaymentNonce the active gca agents at the payment nonce\\n     * @param userIndex the index of the user in the active gca agents array\\n     * @param claimFromInflation whether or not to claim glow from inflation\\n     * @param sig the relay signature\\n     */\\n\\n    function claimPayout(\\n        address user,\\n        uint256 paymentNonce,\\n        address[] calldata activeGCAsAtPaymentNonce,\\n        uint256 userIndex,\\n        bool claimFromInflation,\\n        bytes memory sig\\n    ) external {\\n        if (isSlashed[user]) {\\n            _revert(SlashedAgentCannotClaimReward.selector);\\n        }\\n        if (msg.sender != user) {\\n            bytes32 digest = createRelayDigest(msg.sender, paymentNonce, nextRelayNonce[user]++);\\n            if (!SignatureChecker.isValidSignatureNow(user, digest, sig)) {\\n                _revert(InvalidRelaySignature.selector);\\n            }\\n        }\\n        if (claimFromInflation) {\\n            _claimGlowFromInflation();\\n        }\\n        (uint256 withdrawableAmount,, uint256 amountAlreadyWithdrawn) =\\n            getPayoutData(user, paymentNonce, activeGCAsAtPaymentNonce, userIndex);\\n        amountWithdrawnAtPaymentNonce[user][paymentNonce] = amountAlreadyWithdrawn + withdrawableAmount;\\n        _transferGlow(user, withdrawableAmount);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                view functions                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns the bytes32 digest used for the relay signature\\n     * @param relayer the relayer that is being granted permission\\n     * @param paymentNonce the payment nonce that the relayer is being granted permission for\\n     * @param relayNonce the relay nonce that the relayer is being granted permission for\\n     * @return digest - the bytes32 digest\\n     */\\n    function createRelayDigest(address relayer, uint256 paymentNonce, uint256 relayNonce)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _domainSeperatorV4Main(),\\n                keccak256(abi.encode(CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH, relayer, paymentNonce, relayNonce))\\n            )\\n        );\\n        return digest;\\n    }\\n\\n    /**\\n     * @notice gets the payout data for an agent\\n     * @param user the user to get the payout data for\\n     * @param paymentNonce the payment nonce to get the payout data for\\n     * @param activeGCAsAtPaymentNonce the active gca agents at the payment nonce\\n     * @param userIndex the index of the user in the active gca agents array\\n     * @dev the function must take in the activeGCAsAtPaymentNonce array to prevent\\n     *         -   a user from submitting a different array of gca agents\\n     *         -   and receiving false payout data\\n     */\\n    function getPayoutData(\\n        address user,\\n        uint256 paymentNonce,\\n        address[] calldata activeGCAsAtPaymentNonce,\\n        uint256 userIndex\\n    ) public view returns (uint256 withdrawableAmount, uint256 slashableAmount, uint256 amountAlreadyWithdrawn) {\\n        if (keccak256(abi.encodePacked(activeGCAsAtPaymentNonce)) != _paymentNonceToGCAs[paymentNonce]) {\\n            _revert(InvalidGCAHash.selector);\\n        }\\n        if (user != activeGCAsAtPaymentNonce[userIndex]) {\\n            _revert(InvalidUserIndex.selector);\\n        }\\n        uint256 userShares;\\n        uint256 len = activeGCAsAtPaymentNonce.length;\\n        unchecked {\\n            for (uint256 i; i < len; ++i) {\\n                userShares += _paymentNonceToCompensationPlan[paymentNonce][i][userIndex];\\n            }\\n        }\\n        amountAlreadyWithdrawn = amountWithdrawnAtPaymentNonce[user][paymentNonce];\\n\\n        uint256 shiftStartTimestamp = _paymentNonceToShiftStartTimestamp[paymentNonce];\\n        uint256 shiftEndTimestamp = _paymentNonceToShiftStartTimestamp[paymentNonce + 1];\\n        if (shiftEndTimestamp == 0) {\\n            shiftEndTimestamp = block.timestamp;\\n        } else {\\n            shiftEndTimestamp = _min(shiftEndTimestamp, block.timestamp);\\n        }\\n        uint256 secondsWorked = shiftEndTimestamp - shiftStartTimestamp;\\n        uint256 secondsStopped;\\n        if (block.timestamp > shiftEndTimestamp) {\\n            secondsStopped = block.timestamp - shiftEndTimestamp;\\n        }\\n        uint256 totalShares = len * SHARES_REQUIRED_PER_COMP_PLAN;\\n\\n        uint256 rewardPerSecond = userShares * REWARDS_PER_SECOND_FOR_ALL / totalShares;\\n\\n        (withdrawableAmount, slashableAmount) = VestingMathLib.calculateWithdrawableAmountAndSlashableAmount(\\n            rewardPerSecond, secondsWorked, secondsStopped, amountAlreadyWithdrawn\\n        );\\n\\n        return (withdrawableAmount, slashableAmount, amountAlreadyWithdrawn);\\n    }\\n\\n    /**\\n     * @notice returns the shift start timestamp for a payment nonce\\n     * @param nonce the payment nonce to get the shift start timestamp for\\n     * @return shiftStartTimestamp - the shift start timestamp for the payment nonce or 0 if it does not exist\\n     */\\n    function paymentNonceToShiftStartTimestamp(uint256 nonce) external view returns (uint256) {\\n        return _paymentNonceToShiftStartTimestamp[nonce];\\n    }\\n\\n    /**\\n     * @notice returns the gca agents hash for a payment nonce\\n     * @param nonce the payment nonce to get the gca agents hash for\\n     * @return gcaHash - the gca agents hash for the payment nonce\\n     */\\n    function payoutNonceToGCAHash(uint256 nonce) external view returns (bytes32) {\\n        return _paymentNonceToGCAs[nonce];\\n    }\\n\\n    /**\\n     * @notice returns the comp plan for a payment nonce and gca index\\n     * @param nonce the payment nonce to get the comp plan for\\n     * @param index the gca index to get the comp plan for\\n     * @return shares - the comp plan for the payment nonce and gca index\\n     */\\n    function paymentNonceToCompensationPlan(uint256 nonce, uint256 index) external view returns (uint32[5] memory) {\\n        return _paymentNonceToCompensationPlan[nonce][index];\\n    }\\n\\n    /**\\n     * @notice returns the current payment nonce in storage\\n     * @return paymentNonce - the current payment nonce\\n     */\\n    function paymentNonce() public view returns (uint256) {\\n        return _privatePaymentNonce;\\n    }\\n\\n    /// @dev should only be used once in the constructor of GCA\\n    function setZeroPaymentStartTimestamp() internal {\\n        _paymentNonceToShiftStartTimestamp[0] = _genesisTimestamp();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  internal                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice slashes an agent\\n     * @param user the user to slash\\n     */\\n\\n    function _slash(address user) internal {\\n        isSlashed[user] = true;\\n    }\\n\\n    /**\\n     * @param compPlan the comp plans to submit\\n     * @param indexOfGCA the index of the gca submitting the comp plan\\n     * @param totalGCAs the total number of gca agents\\n     */\\n    function handleCompensationPlanSubmission(uint32[5] calldata compPlan, uint256 indexOfGCA, uint256 totalGCAs)\\n        internal\\n    {\\n        uint256 totalShares;\\n        for (uint256 i; i < totalGCAs; ++i) {\\n            totalShares += compPlan[i];\\n        }\\n        if (totalShares != SHARES_REQUIRED_PER_COMP_PLAN) {\\n            _revert(InvalidShares.selector);\\n        }\\n\\n        //Get the current payment nonce.\\n        uint256 _paymentNonce = paymentNonce();\\n        uint256 nextPaymentNonce = _paymentNonce + 1;\\n\\n        uint256 currentShiftStartTimestamp = _paymentNonceToShiftStartTimestamp[_paymentNonce];\\n\\n        /**\\n         * When we create a new comp plan, we increment the payment nonce by 1.\\n         *         We only increment the nonce when the comp. period has actually begun.\\n         *\\n         *         For example, if we're in comp period 1, and we submit a new comp plan for comp period 2,\\n         *         we initialize comp period 2 to start at block.timestamp + `bucketDuration()`,\\n         *         Therefore, there is a 1 week period where the comp plan is not active and comp plan 1\\n         *         is still being acted upon, BUT, the nonce has already been incremented.\\n         *\\n         *         Therefore, that means that {currentShiftStartTimestamp} is the start of period 2,\\n         *         and if block.timestamp is LESS than that, that means that comp period 2 has not started\\n         *         and all comp. plans that are submitted will have an effect on comp period 2.\\n         *\\n         *         Once block.timestamp is greater than {currentShiftStartTimestamp}, that means that\\n         *         comp period 2 has started, and all comp plans submitted will have an effect on comp period 3.\\n         *\\n         *         This keeps going on and on and on.\\n         */\\n\\n        /**\\n         * This evaluates as the initializer for the comp plan being proposed.\\n         */\\n        if (block.timestamp > currentShiftStartTimestamp) {\\n            //We need to increment the nonce\\n            _paymentNonceToShiftStartTimestamp[nextPaymentNonce] = block.timestamp + bucketDuration();\\n\\n            //Make sure that all the hashes are updated\\n            bytes32 gcaHash = _paymentNonceToGCAs[_paymentNonce];\\n            _paymentNonceToGCAs[nextPaymentNonce] = gcaHash;\\n            for (uint256 i; i < totalGCAs; ++i) {\\n                if (i == indexOfGCA) {\\n                    _paymentNonceToCompensationPlan[nextPaymentNonce][i] = compPlan;\\n                } else {\\n                    _paymentNonceToCompensationPlan[nextPaymentNonce][i] =\\n                        _paymentNonceToCompensationPlan[_paymentNonce][i];\\n                }\\n            }\\n            _privatePaymentNonce = nextPaymentNonce;\\n            return;\\n        }\\n\\n        //If we are still in the current week, we need to put the comp plan\\n        //in the current payment nonce (which is the next upcoming plan).\\n\\n        _paymentNonceToCompensationPlan[_paymentNonce][indexOfGCA] = compPlan;\\n    }\\n\\n    /**\\n     * @param gcaAgents the gca agents\\n     * @dev handles incrementing payment nonce,\\n     *             - setting the gca agents hash\\n     *             - setting the shift start timestamp\\n     *             - setting the comp plans to the identity matrix\\n     *                 - (i.e. each gca agent gets 100_000 shares)\\n     */\\n    function callbackInElectionEvent(address[] memory gcaAgents) internal {\\n        uint256 _paymentNonce = paymentNonce();\\n        uint256 currentShiftStartTimestamp = _paymentNonceToShiftStartTimestamp[_paymentNonce];\\n\\n        //If the current bucket has started, we move to the next bucket\\n        if (block.timestamp > currentShiftStartTimestamp) {\\n            ++_paymentNonce;\\n            _privatePaymentNonce = _paymentNonce;\\n        }\\n\\n        //Set the gca agents hash\\n        _paymentNonceToGCAs[_paymentNonce] = keccak256(abi.encodePacked(gcaAgents));\\n        _paymentNonceToShiftStartTimestamp[_paymentNonce] = block.timestamp;\\n        //All the reports in here need to be set to a identity matrix\\n        unchecked {\\n            for (uint256 i; i < gcaAgents.length; ++i) {\\n                _paymentNonceToCompensationPlan[_paymentNonce][i] = defaultCompPlan(i);\\n            }\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                         internal view/pure functions                       */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns the default comp plan for a gca agent\\n     * @param gcaIndex the index of the gca agent\\n     * @dev the default comp plan is the identity matrix\\n     * @return shares - the default comp plan for a gca agent at index {gcaIndex}\\n     */\\n    function defaultCompPlan(uint256 gcaIndex) internal pure returns (uint32[5] memory shares) {\\n        shares[gcaIndex] = uint32(SHARES_REQUIRED_PER_COMP_PLAN);\\n        return shares;\\n    }\\n\\n    /**\\n     * @notice returns the bucket duration\\n     * @return bucketDuration - the bucket duration\\n     */\\n    function bucketDuration() internal pure virtual returns (uint256) {\\n        return _BUCKET_DURATION;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                            functions to override                           */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice claims glow from inflation\\n     * @dev the function must be overriden by the parent contract\\n     */\\n    function _claimGlowFromInflation() internal virtual;\\n\\n    /**\\n     * @notice returns the domain seperator for the relay signature\\n     * @dev the function must be overriden by the parent contract\\n     * @return domainSeperator - the domain seperator for the relay signature\\n     */\\n    function _domainSeperatorV4Main() internal view virtual returns (bytes32);\\n    /**\\n     * @notice returns the genesis timestamp of the glow protocol\\n     * @return genesisTimestamp - the genesis timestamp of the glow protocol\\n     * @dev the function must be overriden by the parent contract\\n     */\\n    function _genesisTimestamp() internal view virtual returns (uint256);\\n    /**\\n     * @notice returns the current week\\n     * @return week - the current week\\n     * @dev the function must be overriden by the parent contract\\n     */\\n    function _currentWeek() internal view virtual returns (uint256);\\n\\n    /**\\n     * @notice transfers glow to an address\\n     * @param to the address to transfer glow to\\n     * @param amount the amount of glow to transfer\\n     * @dev the function must be overriden by the parent contract\\n     */\\n    function _transferGlow(address to, uint256 amount) internal virtual;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    utils                                   */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev returns the min of (a,b)\\n     * @param a the first number\\n     * @param b the second number\\n     * @return min - the min of (a,b)\\n     */\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice More efficiently reverts with a bytes4 selector\\n     * @param selector The selector to revert with\\n     */\\n    function _revert(bytes4 selector) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(0x0, selector)\\n            revert(0x0, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n    * Minimum value signed 64.64-bit fixed point number may have. \\n    */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n    * Maximum value signed 64.64-bit fixed point number may have. \\n    */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(x << 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        unchecked {\\n            return int64(x >> 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = x >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        unchecked {\\n            return int256(x) << 64;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) * y >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        unchecked {\\n            if (x == MIN_64x64) {\\n                require(\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                        && y <= 0x1000000000000000000000000000000000000000000000000\\n                );\\n                return -y << 63;\\n            } else {\\n                bool negativeResult = false;\\n                if (x < 0) {\\n                    x = -x;\\n                    negativeResult = true;\\n                }\\n                if (y < 0) {\\n                    y = -y; // We rely on overflow behavior here\\n                    negativeResult = !negativeResult;\\n                }\\n                uint256 absoluteResult = mulu(x, uint256(y));\\n                if (negativeResult) {\\n                    require(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\n                } else {\\n                    require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                    return int256(absoluteResult);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            int256 result = (int256(x) << 64) / y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x; // We rely on overflow behavior here\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n            if (negativeResult) {\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(absoluteResult); // We rely on overflow behavior here\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divuu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return -x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            return int128((int256(x) + int256(y)) >> 1);\\n        }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 m = int256(x) * int256(y);\\n            require(m >= 0);\\n            require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\n            return int128(sqrtu(uint256(m)));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = absX * absX >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= 0);\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = msb - 64 << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return int128(int256(uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0) {\\n                result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n            }\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return exp_2(int128(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result = (x << 64) / y;\\n            } else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                result += xh == hi >> 128 ? xl / y : 1;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) {\\n                return 0;\\n            } else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x4) r <<= 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/VestingMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nuint256 constant VESTING_PERIODS = 100;\\n/// @dev the maximum amount of seconds a second can vest for\\n/// @dev this is to prevent a second from over-vesting in payout\\n/// @dev since rewards vest at 1% per week, this is 100 weeks\\nuint256 constant MAX_VESTING_SECONDS = uint256(7 days) * 100;\\n\\nlibrary VestingMathLib {\\n    /**\\n     * @dev Find total owed now and slashable balance using the summation of an arithmetic series\\n     * @dev formula = n/2 * (2a + (n-1)d) or n/2 * (a + l)\\n     * @dev read more about this  https://github.com/glowlabs-org/glow-docs/issues/4\\n     * @param rewardsPerSecond - the amount of glow per second the agent earns\\n     * @param secondsActive - the amount of seconds the agent has worked on a given shift\\n     * @param secondsStopped - the amount of seconds since the agent has stopped working on their shift\\n     * @param amountAlreadyWithdrawn - the amount of glow already withdrawn by the agent\\n     * @return withdrawableAmount - the amount of glow owed now\\n     * @return slashableAmount - the total slashable amount of glow (total owed - withdrawableAmount)\\n     */\\n    function calculateWithdrawableAmountAndSlashableAmount(\\n        uint256 rewardsPerSecond,\\n        uint256 secondsActive,\\n        uint256 secondsStopped,\\n        uint256 amountAlreadyWithdrawn\\n    ) internal pure returns (uint256 withdrawableAmount, uint256 slashableAmount) {\\n        //Placeholder for fully vested seconds.\\n        uint256 fullyVestedSeconds;\\n\\n        //If (secondsActive + secondsStopped) > MAX_VESTING_SECONDS,\\n        //That means that there are some seconds that are fully vested.\\n        if (secondsActive + secondsStopped > MAX_VESTING_SECONDS) {\\n            //The fully vested seconds are as follows:\\n            fullyVestedSeconds = secondsActive + secondsStopped - MAX_VESTING_SECONDS;\\n        }\\n\\n        //We make sure that the fully vested seconds are not greater than the seconds active.\\n        //This can happen as secondsStopped grows once the agent stops working\\n        if (fullyVestedSeconds > secondsActive) {\\n            fullyVestedSeconds = secondsActive;\\n        }\\n\\n        //The fully vested rewards are a result of the fully vested seconds * the rewards per second.\\n        uint256 fullyVestedRewards = rewardsPerSecond * fullyVestedSeconds;\\n\\n        //The partially vested seconds are the seconds active minus the fully vested seconds.\\n        uint256 partiallyVestedSeconds = secondsActive - fullyVestedSeconds;\\n\\n        uint256 lowestValueSecond = (1 + secondsStopped) * rewardsPerSecond / MAX_VESTING_SECONDS;\\n\\n        uint256 highestValueSecond = (secondsActive + secondsStopped) * rewardsPerSecond / MAX_VESTING_SECONDS;\\n        if (highestValueSecond > rewardsPerSecond) {\\n            highestValueSecond = rewardsPerSecond;\\n        }\\n\\n        //Arithmetic series\\n        uint256 partiallyVestedSecondsValue = partiallyVestedSeconds * (lowestValueSecond + highestValueSecond) / 2;\\n\\n        uint256 totalRewards = secondsActive * rewardsPerSecond;\\n        withdrawableAmount = fullyVestedRewards + partiallyVestedSecondsValue;\\n        slashableAmount = totalRewards - withdrawableAmount;\\n        withdrawableAmount -= amountAlreadyWithdrawn;\\n\\n        return (withdrawableAmount, slashableAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@/=src/\",\r\n      \"@solady/=lib/solady/src/\",\r\n      \"@unifapv2/=src/UnifapV2/\",\r\n      \"clones/=lib/clones-with-immutable-args/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@clones/=lib/unifap-v2/lib/clones-with-immutable-args/src/\",\r\n      \"@ds/=lib/unifap-v2/lib/ds-test/src/\",\r\n      \"@solmate/=lib/unifap-v2/lib/solmate/src/\",\r\n      \"@std/=lib/unifap-v2/lib/forge-std/src/\",\r\n      \"abdk-libraries-solidity/=lib/abdk-libraries-solidity/\",\r\n      \"clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\r\n      \"clones/=lib/unifap-v2/lib/clones-with-immutable-args/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solady/=lib/solady/\",\r\n      \"unifap-v2/=lib/unifap-v2/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/libraries/HalfLife.sol\": {\r\n        \"HalfLife\": \"0xcf4d7552ca9f07c474d69e89a88943fabb60b199\"\r\n      },\r\n      \"src/libraries/HalfLifeCarbonCreditAuction.sol\": {\r\n        \"HalfLifeCarbonCreditAuction\": \"0xd178525026bafc51d045a2e98b0c79a526d446de\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_earlyLiquidityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gcaAndMinerPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vetoCouncilAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_grantsTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gccContract\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotGCA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotGrantsTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotVetoCouncil\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimZeroTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotStakeZeroTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUnstakeZeroTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"ERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrIsContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNotVetoCouncilMember\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrPermanentlyFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientClaimableBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeAmountExceedsStakedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakingOnEmergencyCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimUnstakedGLW\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PermanentFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_LIQUIDITY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_COOLDOWN_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GCA_AND_MINER_POOL_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GCA_AND_MINER_POOL_INFLATION_PER_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENESIS_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRANTS_TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRANTS_TREASURY_INFLATION_PER_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UNSTAKES_BEFORE_EMERGENCY_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VETO_COUNCIL_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VETO_COUNCIL_INFLATION_PER_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountUnstakedPositionPointers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"tail\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"head\",\"type\":\"uint128\"}],\"internalType\":\"struct IGlow.Pointers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGLWFromGCAAndMinerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGLWFromGrantsTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGLWFromVetoCouncil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimUnstakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emergencyLastUnstakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gcaAndMinerPoolLastClaimedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gcaInflationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAlreadyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glowUnlocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantsTreasuryInflationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAlreadyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantsTreasuryLastClaimedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyFreezeTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"unstakedPositionsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"cooldownEnd\",\"type\":\"uint64\"}],\"internalType\":\"struct IGlow.UnstakedPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unstakedPositionsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"amount\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"cooldownEnd\",\"type\":\"uint64\"}],\"internalType\":\"struct IGlow.UnstakedPosition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vetoCouncilInflationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAlreadyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vetoCouncilLastClaimedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GlowGuardedLaunch", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000d5abe236d2f2f5d10231c054e078788ea3447dfc000000000000000000000000000000000000000000000000000000000000dead0000000000000000000000006fa8c7a89b22bf3212392b778905b12f3dbaf5c4000000000000000000000000a3a32d3c9a5a593bc35d69bacbe2df5ea2c3cf5c0000000000000000000000000116da066517f010e59b32274bf18083af34e1080000000000000000000000005a57a85b5162136026874aef76249af1f5149e5e000000000000000000000000e010ec500720be9ef3f82129e7ed2ee1fb7955f20000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f00000000000000000000000021c46173591f39afc1d2b634b74c98f0576a272b", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}