{"SourceCode": "/**\r\nTG: https://t.me/twolandstokenportal\r\nWebsite: https://twolandstoken.com/\r\nAuthor: @bLock_doctor\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.12;\r\n \r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ninterface IUniRouterV1\r\n{\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniRouterV2 is IUniRouterV1\r\n{\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n}\r\n \r\ncontract TwoLands is IERC20, Ownable {\r\n \r\n    uint8 private _buyTax = 5;\r\n    uint8 private _sellTax = 5;\r\n    uint8 private constant START_TAX = 90;\r\n    uint8 private constant TAX_DECREMENT = 10;\r\n    uint8 private constant _decimals = 18;\r\n \r\n    uint16 private _liquidityTax = 30;\r\n    uint16 private _marketingTax = 35;\r\n    uint16 private _operationsTax = 35; \r\n \r\n    uint256 private constant _totalSupply = 1000000000 * 10 ** _decimals;\r\n    uint256 private _swapTokenThreshold = 500000 * 10 ** _decimals;\r\n    uint256 private _maxWallet = 5000000 * 10 ** _decimals;\r\n    uint256 private _maxTransaction = 5000000 * 10 ** _decimals;\r\n    uint256 private _tradingEnabledTimeStamp;\r\n    uint256 private constant DECREMENT_INTERVAL = 1 minutes;\r\n \r\n    bool private _tradingEnabled;\r\n    bool private _swapEnabled;\r\n    bool private _inSwap;\r\n \r\n    string private constant _tokenName = \"Two Lands\";\r\n    string private constant _tokenSymbol = \"LANDS\";\r\n \r\n    IUniRouterV2 private _router;\r\n    address private _pairAddress;\r\n    address public constant burnWallet = address(0xdead);\r\n    address public constant zeroAddress = address(0);\r\n    address public marketingWallet = 0xcea821B9aDd4949e4a9703b87DF70E37039b884c;\r\n    address public operationsWallet = 0xe96AE647dac359DB5c0c3afc41e73a7E7C6A731C;\r\n \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _excludedFromFees;\r\n    mapping(address => bool) private _automatedMarketMakers;\r\n    mapping(address => mapping (address => uint256)) private _allowances;\r\n \r\n    modifier LockTheSwap {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n \r\n    event SwapAndLiquify(\r\n        uint256 liquidityTokens,\r\n        uint256 liquidityETH\r\n    );\r\n \r\n    constructor() {\r\n        _router = IUniRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _pairAddress = IDEXFactory(_router.factory()).createPair(_router.WETH(), address(this));\r\n        _allowances[address(this)][address(_router)] = type(uint256).max;\r\n        _automatedMarketMakers[_pairAddress] = true;\r\n        _excludedFromFees[msg.sender] = true;\r\n        _excludedFromFees[address(this)] = true;\r\n        _excludedFromFees[burnWallet] = true;\r\n        _excludedFromFees[zeroAddress] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        bool isExcluded = _excludedFromFees[from] || _excludedFromFees[to];\r\n        bool isBuy = _automatedMarketMakers[from];\r\n        bool isSell = _automatedMarketMakers[to];\r\n        if (isExcluded) _transferTokens(from, to, amount, 0);\r\n        else {\r\n            require(_tradingEnabled, \"Trading is not enabled!\");\r\n            if (isBuy) _buyTokens(from, to, amount);\r\n            else if (isSell) {\r\n                if (_swapEnabled && !_inSwap) _swapAndLiquify(false);\r\n                _sellTokens(from, to, amount);\r\n            } else _transferTokens(from, to, amount, 0);\r\n        }\r\n    }\r\n \r\n    function _getBuyTax() private view returns (uint8) {\r\n        uint256 timeElapsed = block.timestamp - _tradingEnabledTimeStamp;\r\n        uint256 decrements = timeElapsed / DECREMENT_INTERVAL;\r\n        if (decrements < 8) {\r\n            return uint8(START_TAX - (decrements * TAX_DECREMENT));\r\n        } else {\r\n            return _buyTax;\r\n        }\r\n    }\r\n \r\n    function _buyTokens(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount <= _maxTransaction, \"Cannot exceed max transaction.\");\r\n        require(_balances[to] + amount <= _maxWallet, \"Cannot exceed max wallet.\");\r\n        _transferTokens(from, to, amount, _getBuyTax());\r\n    }\r\n \r\n    function _sellTokens(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount <= _maxTransaction, \"Cannot exceed max transaction.\");\r\n        _transferTokens(from, to, amount, _sellTax);\r\n    }\r\n \r\n    function _transferTokens(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint8 taxPercent\r\n    ) private {\r\n        uint256 taxedTokens = amount * taxPercent / 100;\r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += taxedTokens;\r\n        _balances[to] += (amount - taxedTokens);\r\n        emit Transfer(from, to, (amount - taxedTokens));\r\n    }\r\n \r\n    function _swapAndLiquify(\r\n        bool ignoreLimits\r\n    ) private LockTheSwap {\r\n        uint256 contractTokenBalance = _balances[address(this)];\r\n        uint256 toSwap = _swapTokenThreshold;\r\n        if (contractTokenBalance < toSwap) {\r\n            if (ignoreLimits && contractTokenBalance > 0) {\r\n                toSwap = contractTokenBalance;\r\n            } else return;\r\n        }\r\n        uint256 totalLiquidityTokens = toSwap * _liquidityTax / 100;\r\n        uint256 tokensRemaining = toSwap - totalLiquidityTokens;\r\n        uint256 liquidityTokens = totalLiquidityTokens / 2;\r\n        uint256 liquidityETHTokens = totalLiquidityTokens - liquidityTokens;\r\n        toSwap = tokensRemaining + liquidityETHTokens;\r\n        uint256 oldETH = address(this).balance;\r\n        _swapTokensForETH(toSwap);\r\n        uint256 newETH = address(this).balance - oldETH;\r\n        uint256 liquidityETH = (newETH * liquidityETHTokens) / toSwap;\r\n        uint256 remainingETH = newETH - liquidityETH;\r\n        uint256 operationsETH = remainingETH * _operationsTax / 100;\r\n        uint256 marketingETH = remainingETH - operationsETH;\r\n        (bool transferOperations,) = payable(operationsWallet).call{value: operationsETH, gas: 30000}(\"\");\r\n        transferOperations = false;\r\n        (bool transferMarketing,) = payable(marketingWallet).call{value: marketingETH, gas: 30000}(\"\");\r\n        transferMarketing = false;\r\n        _addLiquidity(liquidityTokens,liquidityETH);\r\n        emit SwapAndLiquify(\r\n            liquidityTokens,\r\n            liquidityETH\r\n        );\r\n    }\r\n \r\n    // ROUTER FUNCTIONS \\\\\r\n \r\n    function _swapTokensForETH(\r\n        uint256 tokenAmount\r\n    ) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n        _approve(address(this), address(_router), tokenAmount);\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _addLiquidity(\r\n        uint256 tokenAmount,\r\n        uint256 amountWei\r\n    ) private {\r\n        _approve(address(this), address(_router), tokenAmount);\r\n        _router.addLiquidityETH{value: amountWei}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(0xdead),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    // END OF ROUTER FUNCTIONS \\\\\r\n \r\n    // OWNER FUNCTIONS \\\\\r\n \r\n    function ownerEnableTrading() public onlyOwner {\r\n        require(!_tradingEnabled, \"Trading is already enabled!\");\r\n        _tradingEnabledTimeStamp = block.timestamp;\r\n        _tradingEnabled = true;\r\n    }\r\n \r\n    function ownerExcludeFromFees(\r\n        address wallet,\r\n        bool excluded\r\n    ) public onlyOwner {\r\n        _excludedFromFees[wallet] = excluded;\r\n    }\r\n \r\n    function ownerUpdateAMM(\r\n        address marketMaker,\r\n        bool enabled\r\n    ) public onlyOwner {\r\n        require(marketMaker != _pairAddress, \"Cannot disable pair address!\");\r\n        _automatedMarketMakers[marketMaker] = enabled;\r\n    }\r\n \r\n    function ownerUpdatePrimaryTaxes(\r\n        uint8 buyTax,\r\n        uint8 sellTax\r\n    ) public onlyOwner {\r\n        require(buyTax + sellTax <= 20, \"Taxes cannot exceed 10!\");\r\n        _buyTax = buyTax;\r\n        _sellTax = sellTax;\r\n    }\r\n \r\n    function ownerUpdateSwapTaxes(\r\n        uint16 liquidityTax,\r\n        uint16 marketingTax,\r\n        uint16 operationsTax\r\n    ) public onlyOwner {\r\n        require(\r\n            liquidityTax > 0 &&\r\n            marketingTax > 0 &&\r\n            operationsTax > 0 &&\r\n            liquidityTax + marketingTax + operationsTax == 100,\r\n            \"Each tax must be greater than zero, and must equal to 100!\"\r\n        );\r\n        _liquidityTax = liquidityTax;\r\n        _marketingTax = marketingTax;\r\n        _operationsTax = operationsTax;\r\n    }\r\n \r\n    function ownerUpdateMaxWallet(\r\n        uint256 maxWallet\r\n    ) public onlyOwner {\r\n        require(maxWallet >= 5000000, \"Max wallet cannot be lower than 0.5 percent!\");\r\n        _maxWallet = maxWallet * 10 ** _decimals;\r\n    }\r\n \r\n    function ownerUpdateMaxTransaction(\r\n        uint256 maxTransaction\r\n    ) public onlyOwner {\r\n        require(maxTransaction >= 5000000, \"Max transaction cannot be lower than 0.5 percent!\");\r\n        _maxTransaction = maxTransaction * 10 ** _decimals;\r\n    }\r\n \r\n    function ownerToggleSwap(\r\n        bool swapEnabled\r\n    ) public onlyOwner {\r\n        _swapEnabled = swapEnabled;\r\n    }\r\n \r\n    function ownerSetSwapThreshold(\r\n        uint256 swapTokenThreshold\r\n    ) public onlyOwner {\r\n        require(\r\n            swapTokenThreshold > 0 &&\r\n            swapTokenThreshold <= 1000000,\r\n            \"Swap threshold cannot be zero, and cannot exceed 0.5 percent!\"\r\n        );\r\n        _swapTokenThreshold = swapTokenThreshold * 10 ** _decimals;\r\n    }\r\n \r\n    function ownerTriggerSwap(\r\n        bool ignoreLimits\r\n    ) public onlyOwner {\r\n        _swapAndLiquify(ignoreLimits);\r\n    }\r\n \r\n    function ownerUpdateMarketingWallet(\r\n        address newMarketingWallet\r\n    ) public onlyOwner {\r\n        require(\r\n            newMarketingWallet != address(this) &&\r\n            newMarketingWallet != address(0) &&\r\n            newMarketingWallet != address(0xdead),\r\n            \"Cannot set marketing wallet to zero or dead address!\"\r\n        );\r\n        marketingWallet = newMarketingWallet;\r\n    }\r\n \r\n    function ownerUpdateOperationsWallet(\r\n        address newOperationsWallet\r\n    ) public onlyOwner {\r\n        require(\r\n            newOperationsWallet != address(this) &&\r\n            newOperationsWallet != address(0) &&\r\n            newOperationsWallet != address(0xdead),\r\n            \"Cannot set operations wallet to zero or dead address!\"\r\n        );\r\n        operationsWallet = newOperationsWallet;\r\n    }\r\n \r\n    function ownerWithdrawStrandedToken(\r\n        address strandedToken\r\n    ) public onlyOwner {\r\n        require(strandedToken != address(this), \"Cannot withdraw native token!\");\r\n        IERC20 token = IERC20(strandedToken);\r\n        token.transfer(owner(), token.balanceOf(address(this)));\r\n    }\r\n \r\n    function ownerWithdrawStuckETH() public onlyOwner {\r\n        (bool success,) = msg.sender.call{value:(address(this).balance)}(\"\");\r\n        require(success);\r\n    }\r\n \r\n    // END OF OWNER FUNCTIONS \\\\\r\n \r\n    // START OF GETTERS \\\\\r\n \r\n    function showPrimaryTaxes() public view returns (\r\n        uint8 buyTax,\r\n        uint8 sellTax\r\n    ) {\r\n        buyTax = _getBuyTax();\r\n        sellTax = _sellTax;\r\n    }\r\n \r\n    function showSwapTaxes() public view returns (\r\n        uint16 liquidityTax,\r\n        uint16 marketingTax,\r\n        uint16 operationsTax\r\n    ) {\r\n        liquidityTax = _liquidityTax;\r\n        marketingTax = _marketingTax;\r\n        operationsTax = _operationsTax;\r\n    }\r\n \r\n    function isSwapEnabled() public view returns (bool) {\r\n        return _swapEnabled;\r\n    }\r\n \r\n    function showSwapTokenThreshold() public view returns (uint256) {\r\n        return _swapTokenThreshold;\r\n    }\r\n \r\n    function isExcludedFromFees(\r\n        address wallet\r\n    ) public view returns (bool) {\r\n        return _excludedFromFees[wallet];\r\n    }\r\n \r\n    // END OF GETTERS \\\\\r\n \r\n    function transfer(\r\n        address recipient, \r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        uint256 allowance_ = _allowances[sender][msg.sender];\r\n        _transfer(sender, recipient, amount);\r\n        require(allowance_ >= amount);\r\n        _approve(sender, msg.sender, allowance_ - amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function _approve(\r\n        address owner, \r\n        address spender, \r\n        uint256 amount\r\n    ) private {\r\n        require((owner != address(0) && spender != address(0)), \"Owner/Spender address cannot be 0.\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function approve(\r\n        address spender, \r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function allowance(\r\n        address owner_,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n    function balanceOf(\r\n        address account\r\n    ) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function name() external pure returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n    function symbol() external pure returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n    receive() external payable  {}\r\n \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityETH\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ownerExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokenThreshold\",\"type\":\"uint256\"}],\"name\":\"ownerSetSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"ownerToggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ignoreLimits\",\"type\":\"bool\"}],\"name\":\"ownerTriggerSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketMaker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ownerUpdateAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"ownerUpdateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransaction\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperationsWallet\",\"type\":\"address\"}],\"name\":\"ownerUpdateOperationsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"}],\"name\":\"ownerUpdatePrimaryTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidityTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketingTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"operationsTax\",\"type\":\"uint16\"}],\"name\":\"ownerUpdateSwapTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strandedToken\",\"type\":\"address\"}],\"name\":\"ownerWithdrawStrandedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showPrimaryTaxes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSwapTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidityTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketingTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"operationsTax\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showSwapTokenThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TwoLands", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://754d5ee66d922d7fa6357dd7156781260f0940a82c63935412820e3c4b0ef02f"}