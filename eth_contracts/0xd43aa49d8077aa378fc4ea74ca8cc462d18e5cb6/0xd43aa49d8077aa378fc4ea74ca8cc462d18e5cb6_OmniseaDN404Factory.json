{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/DN404/OmniseaDN404Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"../interfaces/IOmniseaDN404.sol\\\";\\r\\nimport \\\"./OmniseaDN404Proxy.sol\\\";\\r\\nimport \\\"../interfaces/IOmniseaDN404Factory.sol\\\";\\r\\nimport {CreateParams} from \\\"../structs/dn404/DN404Structs.sol\\\";\\r\\nimport \\\"../util/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract OmniseaDN404Factory is IOmniseaDN404Factory, ReentrancyGuard {\\r\\n    address internal _manager;\\r\\n    address public owner;\\r\\n    address public scheduler;\\r\\n    mapping(address => bool) public drops;\\r\\n\\r\\n    event Created(address indexed collection);\\r\\n\\r\\n    constructor(address _scheduler) {\\r\\n        owner = msg.sender;\\r\\n        scheduler = _scheduler;\\r\\n    }\\r\\n\\r\\n    function create(CreateParams calldata _params) external override nonReentrant {\\r\\n        OmniseaDN404Proxy proxy = new OmniseaDN404Proxy();\\r\\n        address proxyAddress = address(proxy);\\r\\n        IOmniseaDN404(proxyAddress).initialize(_params, msg.sender, _manager, scheduler);\\r\\n        drops[proxyAddress] = true;\\r\\n        emit Created(proxyAddress);\\r\\n    }\\r\\n\\r\\n    function setManager(address manager_) external {\\r\\n        require(msg.sender == owner);\\r\\n        _manager = manager_;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IOmniseaDN404.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport {CreateParams} from \\\"../structs/dn404/DN404Structs.sol\\\";\\n\\ninterface IOmniseaDN404 {\\n    function initialize(CreateParams memory params, address _owner, address _manager, address _scheduler) external;\\n    function mint(address _minter, uint24 _quantity, bytes32[] memory _merkleProof, uint8 _phaseId) external returns (uint256);\\n    function mintPrice(uint8 _phaseId) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function dropsManager() external view returns (address);\\n    function endTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/contracts/DN404/OmniseaDN404Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ncontract OmniseaDN404Proxy {\\r\\n    fallback() external payable {\\r\\n        _delegate(address(0xF5f776F43de27762099cc95788Ab19e895152AE2));\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        _delegate(address(0xF5f776F43de27762099cc95788Ab19e895152AE2));\\r\\n    }\\r\\n\\r\\n    function _delegate(address _proxyTo) internal {\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), _proxyTo, ptr, calldatasize(), 0, 0)\\r\\n            let size := returndatasize()\\r\\n            returndatacopy(ptr, 0, size)\\r\\n\\r\\n            switch result\\r\\n            case 0 { revert(ptr, size) }\\r\\n            default { return(ptr, size) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IOmniseaDN404Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport {CreateParams} from \\\"../structs/dn404/DN404Structs.sol\\\";\\r\\n\\r\\ninterface IOmniseaDN404Factory {\\r\\n    function create(CreateParams calldata params) external;\\r\\n    function drops(address) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/structs/dn404/DN404Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nstruct CreateParams {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string uri;\\r\\n    string tokensURI;\\r\\n    uint24 maxSupply;\\r\\n    uint24 royaltyAmount;\\r\\n    uint256 endTime;\\r\\n    bool isEdition;\\r\\n    uint256 premintQuantity;\\r\\n}\\r\\n\\r\\nstruct MintParams {\\r\\n    address to;\\r\\n    address collection;\\r\\n    uint24 quantity;\\r\\n    bytes32[] merkleProof;\\r\\n    uint8 phaseId;\\r\\n}\\r\\n\\r\\nstruct Phase {\\r\\n    uint256 from;\\r\\n    uint256 to;\\r\\n    uint24 maxPerAddress;\\r\\n    uint256 price;\\r\\n    bytes32 merkleRoot;\\r\\n    address token;\\r\\n    uint256 minToken;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/util/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Reentrancy guard mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Unauthorized reentrant call.\\n    error Reentrancy();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Equivalent to: `uint72(bytes9(keccak256(\\\"_REENTRANCY_GUARD_SLOT\\\")))`.\\n    /// 9 bytes is large enough to avoid collisions with lower slots,\\n    /// but not too large to result in excessive bytecode bloat.\\n    uint256 private constant _REENTRANCY_GUARD_SLOT = 0x929eee149b4bd21268;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      REENTRANCY GUARD                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Guards a function from reentrancy.\\n    modifier nonReentrant() virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if eq(sload(_REENTRANCY_GUARD_SLOT), address()) {\\n                mstore(0x00, 0xab143c06) // `Reentrancy()`.\\n                revert(0x1c, 0x04)\\n            }\\n            sstore(_REENTRANCY_GUARD_SLOT, address())\\n        }\\n        _;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            sstore(_REENTRANCY_GUARD_SLOT, codesize())\\n        }\\n    }\\n\\n    /// @dev Guards a view function from read-only reentrancy.\\n    modifier nonReadReentrant() virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if eq(sload(_REENTRANCY_GUARD_SLOT), address()) {\\n                mstore(0x00, 0xab143c06) // `Reentrancy()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokensURI\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"royaltyAmount\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEdition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"premintQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OmniseaDN404Factory", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000f2ceda574f0c15664f3b0eb5a2d8ec0163878bfc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}