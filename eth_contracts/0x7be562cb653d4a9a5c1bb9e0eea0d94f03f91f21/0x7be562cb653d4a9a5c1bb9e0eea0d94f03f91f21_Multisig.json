{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Multisig.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\nimport \\\"Multiownable.sol\\\";\\nimport \\\"IProposal.sol\\\";\\n\\ncontract Multisig is Multiownable\\n{\\n\\tuint256 public timeout;\\n\\n\\tmapping (bytes32 => uint256) public initiationTimeByOperation;\\n\\n\\tevent TimeoutExpired(bytes32 operation);\\n\\n\\tevent OperationCreatedWithParams(bytes32 indexed operation, address contractAddress, bytes data);\\n\\n\\tmodifier onlyNotExpired(address contractAddress, bytes data)\\n\\t{\\n\\t\\tbytes32 operation = keccak256(msg.data, ownersGeneration);\\n\\t\\tif (initiationTimeByOperation[operation] == 0)\\n\\t\\t{\\n\\t\\t\\tinitiationTimeByOperation[operation] = block.timestamp;\\n\\t\\t\\temit OperationCreatedWithParams(operation, contractAddress, data);\\n\\t\\t}\\n\\n\\t\\tif (block.timestamp - initiationTimeByOperation[operation] > timeout)\\n\\t\\t{\\n\\t\\t\\tinitiationTimeByOperation[operation] = 0;\\n\\t\\t\\tdeleteOperation(operation);\\n\\n\\t\\t\\temit TimeoutExpired(operation);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t_;\\n\\t\\t}\\n\\t}\\n\\n\\tconstructor(uint256 _timeout) Multiownable() public\\n\\t{\\n\\t\\ttimeout = _timeout;\\n\\t}\\n\\n\\tfunction voteForCall(address to, bytes data) external onlyNotExpired(to, data) onlyManyOwners()\\n\\t{\\n\\t\\tbool success = to.call(data);\\n\\t\\trequire(success, \\\"call failed\\\");\\n\\t}\\n\\n\\tfunction getOwners() external view returns (address[])\\n\\t{\\n\\t\\treturn owners;\\n\\t}\\n\\n\\tfunction voteForDelegatecall(address proposal) external onlyNotExpired(proposal, \\\"\\\") onlyManyOwners()\\n\\t{\\n\\t\\tproposal.delegatecall(abi.encodeWithSignature(\\\"execute()\\\"));\\n\\t}\\n}\"\r\n    },\r\n    \"Multiownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\n\\ncontract Multiownable {\\n\\n    // VARIABLES\\n\\n    uint256 public ownersGeneration;\\n    uint256 public howManyOwnersDecide;\\n    address[] public owners;\\n    bytes32[] public allOperations;\\n    address internal insideCallSender;\\n    uint256 internal insideCallCount;\\n\\n    // Reverse lookup tables for owners and allOperations\\n    mapping(address => uint) public ownersIndices; // Starts from 1\\n    mapping(bytes32 => uint) public allOperationsIndicies;\\n\\n    // Owners voting mask per operations\\n    mapping(bytes32 => uint256) public votesMaskByOperation;\\n    mapping(bytes32 => uint256) public votesCountByOperation;\\n\\n    // EVENTS\\n\\n    event OwnershipTransferred(address[] previousOwners, uint howManyOwnersDecide, address[] newOwners, uint newHowManyOwnersDecide);\\n    event OperationCreated(bytes32 operation, uint howMany, uint ownersCount, address proposer);\\n    event OperationUpvoted(bytes32 operation, uint votes, uint howMany, uint ownersCount, address upvoter);\\n    event OperationPerformed(bytes32 operation, uint howMany, uint ownersCount, address performer);\\n    event OperationDownvoted(bytes32 operation, uint votes, uint ownersCount,  address downvoter);\\n    event OperationCancelled(bytes32 operation, address lastCanceller);\\n    \\n    // ACCESSORS\\n\\n    function isOwner(address wallet) public constant returns(bool) {\\n        return ownersIndices[wallet] > 0;\\n    }\\n\\n    function ownersCount() public constant returns(uint) {\\n        return owners.length;\\n    }\\n\\n    function allOperationsCount() public constant returns(uint) {\\n        return allOperations.length;\\n    }\\n\\n    // MODIFIERS\\n\\n    /**\\n    * @dev Allows to perform method by any of the owners\\n    */\\n    modifier onlyAnyOwner {\\n        if (checkHowManyOwners(1)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = 1;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows to perform method only after many owners call it with the same arguments\\n    */\\n    modifier onlyManyOwners {\\n        if (checkHowManyOwners(howManyOwnersDecide)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = howManyOwnersDecide;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows to perform method only after all owners call it with the same arguments\\n    */\\n    modifier onlyAllOwners {\\n        if (checkHowManyOwners(owners.length)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = owners.length;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows to perform method only after some owners call it with the same arguments\\n    */\\n    modifier onlySomeOwners(uint howMany) {\\n        require(howMany > 0, \\\"onlySomeOwners: howMany argument is zero\\\");\\n        require(howMany <= owners.length, \\\"onlySomeOwners: howMany argument exceeds the number of owners\\\");\\n        \\n        if (checkHowManyOwners(howMany)) {\\n            bool update = (insideCallSender == address(0));\\n            if (update) {\\n                insideCallSender = msg.sender;\\n                insideCallCount = howMany;\\n            }\\n            _;\\n            if (update) {\\n                insideCallSender = address(0);\\n                insideCallCount = 0;\\n            }\\n        }\\n    }\\n\\n    // CONSTRUCTOR\\n\\n    constructor() public {\\n        owners.push(msg.sender);\\n        ownersIndices[msg.sender] = 1;\\n        howManyOwnersDecide = 1;\\n    }\\n\\n    // INTERNAL METHODS\\n\\n    /**\\n     * @dev onlyManyOwners modifier helper\\n     */\\n    function checkHowManyOwners(uint howMany) internal returns(bool) {\\n        if (insideCallSender == msg.sender) {\\n            require(howMany <= insideCallCount, \\\"checkHowManyOwners: nested owners modifier check require more owners\\\");\\n            return true;\\n        }\\n\\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\\n        require(ownerIndex < owners.length, \\\"checkHowManyOwners: msg.sender is not an owner\\\");\\n        bytes32 operation = keccak256(msg.data, ownersGeneration);\\n\\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) == 0, \\\"checkHowManyOwners: owner already voted for the operation\\\");\\n        votesMaskByOperation[operation] |= (2 ** ownerIndex);\\n        uint operationVotesCount = votesCountByOperation[operation] + 1;\\n        votesCountByOperation[operation] = operationVotesCount;\\n        if (operationVotesCount == 1) {\\n            allOperationsIndicies[operation] = allOperations.length;\\n            allOperations.push(operation);\\n            emit OperationCreated(operation, howMany, owners.length, msg.sender);\\n        }\\n        emit OperationUpvoted(operation, operationVotesCount, howMany, owners.length, msg.sender);\\n\\n        // If enough owners confirmed the same operation\\n        if (votesCountByOperation[operation] == howMany) {\\n            deleteOperation(operation);\\n            emit OperationPerformed(operation, howMany, owners.length, msg.sender);\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Used to delete cancelled or performed operation\\n    * @param operation defines which operation to delete\\n    */\\n    function deleteOperation(bytes32 operation) internal {\\n        uint index = allOperationsIndicies[operation];\\n        if (index < allOperations.length - 1) { // Not last\\n            allOperations[index] = allOperations[allOperations.length - 1];\\n            allOperationsIndicies[allOperations[index]] = index;\\n        }\\n        allOperations.length--;\\n\\n        delete votesMaskByOperation[operation];\\n        delete votesCountByOperation[operation];\\n        delete allOperationsIndicies[operation];\\n    }\\n\\n    // PUBLIC METHODS\\n\\n    /**\\n    * @dev Allows owners to change their mind by cacnelling votesMaskByOperation operations\\n    * @param operation defines which operation to delete\\n    */\\n    function cancelPending(bytes32 operation) public onlyAnyOwner {\\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) != 0, \\\"cancelPending: operation not found for this user\\\");\\n        votesMaskByOperation[operation] &= ~(2 ** ownerIndex);\\n        uint operationVotesCount = votesCountByOperation[operation] - 1;\\n        votesCountByOperation[operation] = operationVotesCount;\\n        emit OperationDownvoted(operation, operationVotesCount, owners.length, msg.sender);\\n        if (operationVotesCount == 0) {\\n            deleteOperation(operation);\\n            emit OperationCancelled(operation, msg.sender);\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows owners to change ownership\\n    * @param newOwners defines array of addresses of new owners\\n    */\\n    function transferOwnership(address[] newOwners) public {\\n        transferOwnershipWithHowMany(newOwners, newOwners.length);\\n    }\\n\\n    /**\\n    * @dev Allows owners to change ownership\\n    * @param newOwners defines array of addresses of new owners\\n    * @param newHowManyOwnersDecide defines how many owners can decide\\n    */\\n    function transferOwnershipWithHowMany(address[] newOwners, uint256 newHowManyOwnersDecide) public onlyManyOwners {\\n        require(newOwners.length > 0, \\\"transferOwnershipWithHowMany: owners array is empty\\\");\\n        require(newOwners.length <= 256, \\\"transferOwnershipWithHowMany: owners count is greater then 256\\\");\\n        require(newHowManyOwnersDecide > 0, \\\"transferOwnershipWithHowMany: newHowManyOwnersDecide equal to 0\\\");\\n        require(newHowManyOwnersDecide <= newOwners.length, \\\"transferOwnershipWithHowMany: newHowManyOwnersDecide exceeds the number of owners\\\");\\n\\n        // Reset owners reverse lookup table\\n        for (uint j = 0; j < owners.length; j++) {\\n            delete ownersIndices[owners[j]];\\n        }\\n        for (uint i = 0; i < newOwners.length; i++) {\\n            require(newOwners[i] != address(0), \\\"transferOwnershipWithHowMany: owners array contains zero\\\");\\n            require(ownersIndices[newOwners[i]] == 0, \\\"transferOwnershipWithHowMany: owners array contains duplicates\\\");\\n            ownersIndices[newOwners[i]] = i + 1;\\n        }\\n        \\n        emit OwnershipTransferred(owners, howManyOwnersDecide, newOwners, newHowManyOwnersDecide);\\n        owners = newOwners;\\n        howManyOwnersDecide = newHowManyOwnersDecide;\\n        allOperations.length = 0;\\n        ownersGeneration++;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"IProposal.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.23;\\n\\ninterface IProposal\\n{\\n\\tfunction execute() external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"byzantium\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"Multisig.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOperationsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howManyOwnersDecide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"initiationTimeByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOperations\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"voteForCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesMaskByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"cancelPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesCountByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersIndices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"},{\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"transferOwnershipWithHowMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allOperationsIndicies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"voteForDelegatecall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_timeout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"TimeoutExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OperationCreatedWithParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"howManyOwnersDecide\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"OperationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"upvoter\",\"type\":\"address\"}],\"name\":\"OperationUpvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"performer\",\"type\":\"address\"}],\"name\":\"OperationPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"downvoter\",\"type\":\"address\"}],\"name\":\"OperationDownvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lastCanceller\",\"type\":\"address\"}],\"name\":\"OperationCancelled\",\"type\":\"event\"}]", "ContractName": "Multisig", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000001e13380", "EVMVersion": "byzantium", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}