{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TheSpread.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\ninterface IConcord {\\n    function burn(address _from, uint256 _token, uint256 _quantity) external;\\n}\\n\\ncontract TheSpread {\\n    event InfectionSpread(address indexed sender, uint256 indexed infectedToken, uint256 time);\\n\\n    address public concordAddress;\\n    uint256 public infectionPrice = 0.01 ether;\\n\\n    address public constant WAGDIE = 0x8d2Eb1c6Ab5D87C5091f09fFE4a5ed31B1D9CF71;\\n\\n    constructor(address _concordAddress) {\\n        concordAddress = _concordAddress;\\n    }\\n\\n    function spreadInfections(uint256 quantity) external {\\n        // Burn the mushrooms\\n        IConcord(concordAddress).burn(msg.sender, 15, quantity);\\n        // Emit infection events\\n        for (uint256 i = 0; i < quantity; i++) {\\n            emit InfectionSpread(msg.sender, random(6666, i), block.timestamp);\\n        }\\n    }\\n\\n    function infectWagdie(uint256 tokenId) external payable {\\n        require(tokenId > 0, \\\"Invalid token\\\");\\n        require(msg.value == infectionPrice, \\\"More sacrifice required\\\");\\n        // Sweep payment\\n        // solhint-disable-next-line no-unused-vars\\n        (bool sent, bytes memory data) = WAGDIE.call{ value: msg.value }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // Increase price for next infection\\n        infectionPrice = infectionPrice + 0.0025 ether;\\n        // Burn Concord\\n        IConcord(concordAddress).burn(msg.sender, 15, 1);\\n        // Emit infection\\n        emit InfectionSpread(msg.sender, tokenId, block.timestamp);\\n    }\\n\\n    // Basic Random Function\\n    function random(uint256 num, uint256 iteration) public view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender, iteration))) % num;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-test/src/\",\r\n      \"solc_version /= \\\"0.8.19\\\"/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_concordAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"infectedToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"InfectionSpread\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WAGDIE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"concordAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"infectWagdie\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infectionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"spreadInfections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheSpread", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000001d38150f1fd989fb89ab19518a9c4e93c5554634", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}