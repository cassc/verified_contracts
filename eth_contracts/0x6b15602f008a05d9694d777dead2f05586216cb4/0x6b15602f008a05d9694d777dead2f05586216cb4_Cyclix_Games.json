{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: .deps/CYG.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\ncontract Cyclix_Games is IERC20, Ownable {\r\n    address public airdropAddress;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public max_supply;\r\n    uint256 public min_supply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => bool) public cylist;\r\n    mapping(address => uint256) public  lastTXtime;\r\n    mapping(address => uint256) public lastHunted_TXtime;\r\n    bool public isBurning;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n    uint256 private _totalSupply;\r\n    uint256 public turn;\r\n    uint256 public tx_n;\r\n    uint256 private mint_pct;\r\n    uint256 private burn_pct;\r\n    uint256 public airdrop_pct;\r\n    uint256 public treasury_pct;\r\n    uint256 private mint_pct_sell;\r\n    uint256 private burn_pct_sell;\r\n    uint256 public airdrop_pct_sell;\r\n    uint256 public treasury_pct_sell;\r\n    bool private isSell;\r\n    uint256 public mintRate;\r\n    uint256 public burnRate;\r\n    uint256 public airdropRate;\r\n    uint256 public treasuryRate;\r\n    address[200] private airdropQualifiedAddresses; \r\n    address public airdrop_address_toList;\r\n    uint256 public airdropAddressCount;\r\n    uint256 public minimum_for_airdrop;\r\n    address pair;\r\n    uint256 public onepct;\r\n    uint256 public inactive_burn;\r\n    uint256 public airdrop_threshold;\r\n    bool public firstrun;\r\n    uint256 private last_turnTime;\r\n    bool public botThrottling;\r\n    bool private macro_contraction;\r\n    uint256 private init_ceiling;\r\n    uint256 private init_floor;\r\n    bool private swapping;\r\n    address private treasuryAddr;\r\n    bool private limitsEnabled;\r\n    uint256 public huntingRate;\r\n    uint256 public huntingPct;\r\n    bool public tradingStarted;\r\n    bool public dragonHuntToggle;\r\n    bool public cycleToggle;\r\n    mapping(address => bool) public cyclixWallets;\r\n    uint256 public dragonHuntMin;\r\n    mapping(address => uint256) public huntingCount;\r\n    mapping(address => uint256) public huntingScore;\r\n    address[] public hunters;\r\n    mapping(address => bool) private isHunter;\r\n    uint256 public holdLimit;\r\n    uint256 public sellLimit;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _decimals,\r\n        uint256 _supply,\r\n        uint256 _min_supply,\r\n        uint256 _max_supply,\r\n        address _treasuryAddr\r\n    ) Ownable(msg.sender) {\r\n        uint256 init_supply = _supply * 10**_decimals;\r\n        airdropAddress = msg.sender;\r\n        treasuryAddr = _treasuryAddr; \r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        balanceOf[msg.sender] = init_supply;\r\n        lastTXtime[msg.sender] = block.timestamp;\r\n        lastHunted_TXtime[msg.sender] = block.timestamp;\r\n        cyclixWallets[msg.sender] = true;\r\n        min_supply = _min_supply * 10**_decimals;\r\n        max_supply = _max_supply * 10**_decimals;\r\n        init_ceiling = max_supply;\r\n        init_floor = min_supply;\r\n        macro_contraction = true; \r\n        turn = 0;\r\n        last_turnTime = block.timestamp;\r\n        isBurning = true;\r\n        limitsEnabled = true; \r\n        tx_n = 0;\r\n        uint256 deciCalc = 10**_decimals;\r\n        mint_pct = (52 * deciCalc) / 10000;\r\n        burn_pct = (52 * deciCalc) / 10000; \r\n        airdrop_pct = (88 * deciCalc) / 10000;\r\n        treasury_pct = (248 * deciCalc) / 10000;\r\n        mint_pct_sell = (150 * deciCalc) / 10000;\r\n        burn_pct_sell = (150 * deciCalc) / 10000;\r\n        airdrop_pct_sell = (250 * deciCalc) / 10000;\r\n        treasury_pct_sell = (488 * deciCalc) / 10000;\r\n        airdrop_threshold = (0 * deciCalc) / 10000; \r\n        onepct = (100 * deciCalc)/ 10000; \r\n        huntingRate = 7 days; \r\n        huntingPct = 125; \r\n        airdropAddressCount = 1;\r\n        minimum_for_airdrop = 0;\r\n        firstrun = true;\r\n        botThrottling = true;\r\n        airdropQualifiedAddresses[0] = airdropAddress;\r\n        airdrop_address_toList = airdropAddress;\r\n        tradingStarted = false;\r\n        dragonHuntToggle = true;\r\n        dragonHuntMin = 1000 * 1e18;\r\n       _mint(msg.sender, init_supply);\r\n    }\r\n\r\n    function setUniswapV2Pair(address _pair) external onlyOwner {\r\n        pair = _pair;\r\n    }\r\n\r\n    function setTradingStarted(bool _tradingStarted) external onlyOwner {\r\n        tradingStarted = _tradingStarted;\r\n    }\r\n\r\n    function airdropTokens(address[] calldata recipients, uint256[] calldata amounts) public {\r\n        require(recipients.length == amounts.length, \"Mismatched input arrays\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0), \"Airdrop to the zero address\");\r\n            uint256 adjustedAmount = amounts[i] * (10 ** decimals);\r\n            require(adjustedAmount <= balanceOf[msg.sender], \"Caller does not have enough tokens\");\r\n\r\n            balanceOf[msg.sender] -= adjustedAmount;\r\n            balanceOf[recipients[i]] += adjustedAmount;\r\n\r\n            emit Transfer(msg.sender, recipients[i], adjustedAmount);\r\n        }\r\n    }\r\n\r\n    function updateFees(uint256 _treasuryFee, uint256 _airdropFees, uint256 _burnMintFee,uint256 _treasuryFee_sell, uint256 _airdropFees_sell, uint256 _burnMintFee_sell) external onlyOwner {\r\n        treasury_pct = _treasuryFee;\r\n        airdrop_pct = _airdropFees;\r\n        burn_pct = _burnMintFee;\r\n        mint_pct = _burnMintFee; \r\n        treasury_pct_sell = _treasuryFee_sell;\r\n        airdrop_pct_sell = _airdropFees_sell;\r\n        burn_pct_sell = _burnMintFee_sell;\r\n        mint_pct_sell = _burnMintFee_sell;\r\n    \r\n    }\r\n\r\n    function _pctCalc_minusScale(uint256 _value, uint256 _pct) internal view returns (uint256) {\r\n        return (_value * _pct) / 10**decimals;\r\n    }\r\n\r\n    function totalSupply() external view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view virtual returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    function getBurnRate() external view returns (uint256) {\r\n        return burn_pct;\r\n    }\r\n\r\n    function getMintRate() external view returns (uint256) {\r\n        return mint_pct;\r\n    }\r\n\r\n    function getBurnRateSell() external view returns (uint256) {\r\n        return burn_pct_sell;\r\n    }\r\n\r\n    function getMintRateSell() external view returns (uint256) {\r\n        return mint_pct_sell;\r\n    }\r\n\r\n    function showAirdropThreshold() external view returns (uint256) {\r\n        return airdrop_threshold;\r\n    }\r\n\r\n    function showQualifiedAddresses() external view returns (address[200] memory) { \r\n        return airdropQualifiedAddresses;\r\n    }\r\n\r\n    function checkWhenLast_USER_Transaction(address _address) external view returns (uint256) {\r\n        return lastTXtime[_address];\r\n    }\r\n\r\n    function LAST_TX_HUNTED_BURN_COUNTER(address _address) external view returns (uint256) {\r\n        return lastHunted_TXtime[_address];\r\n    }\r\n\r\n    function lastTurnTime() external view returns (uint256) {\r\n        return last_turnTime;\r\n    }\r\n\r\n    function macroContraction() external view returns (bool) {\r\n        return macro_contraction;\r\n    }\r\n\r\n    function _rateadj() internal returns (bool) {\r\n        if (isBurning) {\r\n            burn_pct += burn_pct / 10;\r\n            mint_pct += mint_pct / 10;\r\n            airdrop_pct += airdrop_pct / 10;\r\n            treasury_pct += treasury_pct / 10;\r\n            burn_pct_sell += burn_pct_sell / 10;\r\n            mint_pct_sell += mint_pct_sell / 10;\r\n            airdrop_pct_sell += airdrop_pct_sell / 10;\r\n            treasury_pct_sell += treasury_pct_sell / 10;\r\n        } else {\r\n            burn_pct -= burn_pct / 10;\r\n            mint_pct += mint_pct / 10;\r\n            airdrop_pct -= airdrop_pct / 10;\r\n            treasury_pct -= treasury_pct / 10;\r\n            burn_pct_sell -= burn_pct_sell / 10;\r\n            mint_pct_sell += mint_pct_sell / 10;\r\n            airdrop_pct_sell -= airdrop_pct_sell / 10;\r\n            treasury_pct_sell -= treasury_pct_sell / 10;\r\n        }\r\n\r\n        if (burn_pct > onepct * 6) {\r\n            burn_pct -= onepct * 2;\r\n        }\r\n\r\n        if (mint_pct > onepct * 6) {\r\n            mint_pct -= onepct * 2;\r\n        }\r\n\r\n        if (airdrop_pct > onepct * 3) {\r\n            airdrop_pct -= onepct;\r\n        }\r\n\r\n        if (treasury_pct > onepct * 4) {\r\n            treasury_pct -= onepct;\r\n        }\r\n\r\n        if (burn_pct_sell > onepct * 6) {\r\n            burn_pct_sell -= onepct * 2;\r\n        }\r\n\r\n        if (mint_pct_sell > onepct * 6) {\r\n            mint_pct_sell -= onepct * 2;\r\n        }\r\n\r\n        if (airdrop_pct_sell > onepct * 3) {\r\n            airdrop_pct_sell -= onepct;\r\n        }\r\n\r\n        if (treasury_pct_sell > onepct * 6) {\r\n            treasury_pct_sell -= onepct;\r\n        }\r\n\r\n        if (burn_pct < onepct || mint_pct < onepct || airdrop_pct < onepct / 2) {\r\n            uint256 deciCalc = 10**decimals;\r\n            mint_pct = (52 * deciCalc)/ 10000;  \r\n            burn_pct = (52 * deciCalc)/ 10000; \r\n            airdrop_pct = (88 * deciCalc)/ 10000; \r\n            treasury_pct = (248 * deciCalc)/ 10000;\r\n        }\r\n\r\n        if (burn_pct_sell < onepct || mint_pct_sell < onepct || airdrop_pct_sell < onepct / 2) {\r\n            uint256 deciCalc = 10**decimals;\r\n            mint_pct_sell = (150 * deciCalc)/ 10000;  \r\n            burn_pct_sell = (150 * deciCalc)/ 10000; \r\n            airdrop_pct_sell = (250 * deciCalc)/ 10000; \r\n            treasury_pct_sell = (488 * deciCalc)/ 10000;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _airdrop() internal returns (bool) {\r\n        uint256 onepct_supply = _pctCalc_minusScale(balanceOf[airdropAddress], onepct);\r\n        uint256 split = 0;\r\n        if (balanceOf[airdropAddress] <= onepct_supply) {\r\n            split = balanceOf[airdropAddress] / 5;\r\n        } else if (balanceOf[airdropAddress] > onepct_supply * 2) {\r\n            split = balanceOf[airdropAddress] / 3;\r\n        } else {\r\n            split = balanceOf[airdropAddress] / 4; \r\n        }\r\n\r\n        if (balanceOf[airdropAddress] - split > 0) {\r\n            balanceOf[airdropAddress] -= split;\r\n            balanceOf[airdropQualifiedAddresses[airdropAddressCount]] += split;\r\n            lastTXtime[airdropAddress] = block.timestamp;\r\n            lastHunted_TXtime[airdropAddress] = block.timestamp;\r\n            emit Transfer(airdropAddress, airdropQualifiedAddresses[airdropAddressCount], split);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0), \"Invalid address\");\r\n        _totalSupply += _value;\r\n        \r\n        emit Transfer(address(0), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _turn() internal returns (bool) {\r\n        turn += 1;\r\n        last_turnTime = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    function _burn(address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0), \"Invalid address\");\r\n        _totalSupply -= _value;\r\n        balanceOf[_to] -= _value;\r\n        emit Transfer(_to, address(0), _value);\r\n        return true;\r\n    }\r\n    function isContract(address account) internal view returns (bool) { \r\n        uint size; \r\n        assembly { \r\n            size := extcodesize(account) \r\n        } \r\n        return size > 0; \r\n    } \r\n    function hunt_Inactive_Address(address _address) external returns (bool) {\r\n        require(_address != address(0), \"Invalid address\");\r\n        require(dragonHuntToggle == true, \"Dragon Hunt not active\");\r\n        require(!isContract(_address), \"This is a contract address. Use the burn inactive contract function instead.\");\r\n        require(!cylist[_address] && !cyclixWallets[_address], \"Wallet not huntable\");\r\n        require(balanceOf[msg.sender] >= dragonHuntMin, \"Insufficient balance to initiate hunt\");\r\n        require( (block.timestamp - lastTXtime[_address])/huntingRate >= 1, \"Wallet still within activity period\");\r\n        require((block.timestamp - lastHunted_TXtime[_address])/ huntingRate >= 1 , \"Wallet recently hunted\");\r\n        require(_address != msg.sender, \"Unable to self-hunt\");\r\n        require(_address != pair, \"Unable to hunt LP\");\r\n\r\n       (uint256 inactive_bal ) = getInactiveBalanceAtRisk(_address);\r\n\r\n        uint256 burnAmount = (inactive_bal * 20) / 100; //\r\n        uint256 rewardAmount =(inactive_bal * 70) / 100; // \r\n        uint256 treasuryAmount = (inactive_bal * 10) / 100; //\r\n        _burn(_address, burnAmount);\r\n        \r\n        balanceOf[_address] -= rewardAmount;\r\n        balanceOf[msg.sender] += rewardAmount;\r\n        emit Transfer(_address, msg.sender, rewardAmount);\r\n\r\n        balanceOf[_address] -= treasuryAmount;\r\n        balanceOf[treasuryAddr] += treasuryAmount;\r\n        emit Transfer(_address, treasuryAddr, treasuryAmount);\r\n\r\n        lastHunted_TXtime[_address] = block.timestamp;\r\n\r\n        huntingScore[msg.sender] += inactive_bal;\r\n        huntingCount[msg.sender] += 1;\r\n\r\n        if (!isHunter[msg.sender]) {\r\n            isHunter[msg.sender] = true;\r\n            hunters.push(msg.sender);\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function hunt_Inactive_Contract(address _address) external returns (bool) {\r\n        require(_address != address(0), \"Invalid address\");\r\n        require(isContract(_address), \"Not a contract address.\");\r\n        require(dragonHuntToggle == true, \"Dragon Hunt not active\");\r\n        require(!cylist[_address] && !cyclixWallets[_address], \"Wallet not huntable\");\r\n        require(balanceOf[msg.sender] >= dragonHuntMin, \"Insufficient balance to initiate hunt\");\r\n        require( (block.timestamp - lastTXtime[_address])/huntingRate >= 1, \"Wallet still within activity period\");\r\n        require((block.timestamp - lastHunted_TXtime[_address])/ huntingRate >= 1 , \"Wallet recently hunted\");\r\n        require(_address != msg.sender, \"Unable to self-hunt\");\r\n        require(_address != pair, \"Unable to hunt LP\");\r\n\r\n       (uint256 inactive_bal ) = getInactiveBalanceAtRisk(_address);\r\n\r\n        uint256 burnAmount = (inactive_bal * 20) / 100; //\r\n        uint256 rewardAmount =(inactive_bal * 70) / 100; // \r\n        uint256 treasuryAmount = (inactive_bal * 10) / 100; //\r\n        _burn(_address, burnAmount);\r\n        \r\n        balanceOf[_address] -= rewardAmount;\r\n        balanceOf[msg.sender] += rewardAmount;\r\n        emit Transfer(_address, msg.sender, rewardAmount);\r\n\r\n        balanceOf[_address] -= treasuryAmount;\r\n        balanceOf[treasuryAddr] += treasuryAmount;\r\n        emit Transfer(_address, treasuryAddr, treasuryAmount);\r\n\r\n        lastHunted_TXtime[_address] = block.timestamp;\r\n\r\n        huntingScore[msg.sender] += inactive_bal;\r\n        huntingCount[msg.sender] += 1;\r\n\r\n        if (!isHunter[msg.sender]) {\r\n            isHunter[msg.sender] = true;\r\n            hunters.push(msg.sender);\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function flashback(address[259] memory _list, uint256[259] memory _values) external onlyOwner returns (bool) {\r\n        require(msg.sender != address(0), \"Invalid address\");\r\n\r\n        for (uint256 x = 0; x < 259; x++) {\r\n            if (_list[x] != address(0)) {\r\n                balanceOf[msg.sender] -= _values[x];\r\n                balanceOf[_list[x]] += _values[x];\r\n                lastTXtime[_list[x]] = block.timestamp;\r\n                lastHunted_TXtime[_list[x]] = block.timestamp;\r\n                emit Transfer(msg.sender, _list[x], _values[x]);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setCylist(address[] calldata _addresses) external onlyOwner returns (bool) {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            require(_addresses[i] != address(0), \"Invalid address\");\r\n            cylist[_addresses[i]] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function remCylist(address[] calldata _addresses) external onlyOwner returns (bool) {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            require(_addresses[i] != address(0), \"Invalid address\");\r\n            cylist[_addresses[i]] = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addCyclixWallets(address[] calldata wallets) external onlyOwner {\r\n        for(uint i = 0; i < wallets.length; i++) {\r\n            cyclixWallets[wallets[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeCyclixWallets(address[] calldata wallets) external onlyOwner {\r\n        for(uint i = 0; i < wallets.length; i++) {\r\n            cyclixWallets[wallets[i]] = false;\r\n        }\r\n    }\r\n\r\n    function manager_burn(address _to, uint256 _value) external onlyOwner returns (bool) {\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(msg.sender != address(0), \"Invalid address\");\r\n\r\n        _totalSupply -= _value;\r\n        balanceOf[_to] -= _value;\r\n        emit Transfer(_to, address(0), _value);\r\n        return true;\r\n    }\r\n\r\n    function manager_bot_throttlng() external onlyOwner returns (bool) {\r\n        require(msg.sender != address(0), \"Invalid address\");\r\n\r\n        botThrottling = false;\r\n        return true;\r\n    }\r\n\r\n    function setAirdropAddress(address _airdropAddress) external onlyOwner returns (bool) {\r\n        require(msg.sender != address(0), \"Invalid address\");\r\n        require(_airdropAddress != address(0), \"Invalid address\");\r\n        require(msg.sender == airdropAddress, \"Not authorized\");\r\n\r\n        airdropAddress = _airdropAddress;\r\n        return true;\r\n    }\r\n\r\n    function airdropProcess(uint256 _amount, address _txorigin, address _sender, address _receiver) internal returns (bool) {\r\n        minimum_for_airdrop = _pctCalc_minusScale(balanceOf[airdropAddress], airdrop_threshold);\r\n        if (_amount >= minimum_for_airdrop && _txorigin != address(0)) {\r\n                if (!isContract(_txorigin)) \r\n                {\r\n                    airdrop_address_toList = _txorigin;\r\n                } \r\n                else \r\n                {\r\n                    if (isContract(_sender)) {\r\n                        airdrop_address_toList = _receiver;\r\n                    } else {\r\n                        airdrop_address_toList = _sender;\r\n                    }\r\n                }\r\n\r\n                if (firstrun) {\r\n                    if (airdropAddressCount < 199) { \r\n                        airdropQualifiedAddresses[airdropAddressCount] = airdrop_address_toList;\r\n                        airdropAddressCount += 1;\r\n                    } else if (airdropAddressCount == 199) { \r\n                        firstrun = false;\r\n                        airdropQualifiedAddresses[airdropAddressCount] = airdrop_address_toList;\r\n                        airdropAddressCount = 0;\r\n                        _airdrop();\r\n                        airdropAddressCount += 1;\r\n                    }\r\n                } else {\r\n                    if (airdropAddressCount < 199) { \r\n                        _airdrop();\r\n                        airdropQualifiedAddresses[airdropAddressCount] = airdrop_address_toList;\r\n                        airdropAddressCount += 1;\r\n                    } else if (airdropAddressCount == 199) {\r\n                        _airdrop();\r\n                        airdropQualifiedAddresses[airdropAddressCount] = airdrop_address_toList;\r\n                        airdropAddressCount = 0;\r\n                    }\r\n                }\r\n            \r\n        }\r\n        return true;\r\n}\r\n\r\nfunction setLimits(bool _status) external onlyOwner {\r\n    limitsEnabled = _status;\r\n}\r\n\r\nfunction setHuntMin (uint256 _huntMin) external onlyOwner {\r\n    dragonHuntMin = _huntMin;\r\n}\r\n\r\nfunction transfer(address _to, uint256 _value) external returns(bool) {\r\n    address _owner = msg.sender;\r\n    _transfer(_owner, _to, _value);\r\n    return true;\r\n}\r\n\r\nfunction _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n    require(_value != 0, \"No zero value transfer allowed\");\r\n    require(_to != address(0), \"Invalid Address\");\r\n\r\n    if(limitsEnabled) { //limits\r\n        if((!cyclixWallets[_from] && !cyclixWallets[_to])) {\r\n            if(!swapping && _from == pair && _to != owner()) { \r\n                require(_value + balanceOf[_to] <=  _totalSupply/100 ,\"max 1% holding limit per wallet allowed\"); \r\n            } else if(!swapping && _to == pair && _from != owner()) { // else if(!swapping && _to == pair && _from != owner()) {\r\n                require(_value <= _totalSupply/1000,\"max 0.1% sell allowed\");\r\n            } else {\r\n                require(_value + balanceOf[_to] <=  _totalSupply/100 ,\"max 1% holding limit per wallet allowed\"); \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    if (\r\n        (cyclixWallets[_from]) || (cyclixWallets[_to]) || (_from != pair && _to != pair) \r\n    ) {  \r\n        _normalTransfer(_from, _to, _value);\r\n    } else {\r\n        if (block.timestamp > last_turnTime + 60) {\r\n            if (_totalSupply >= max_supply) { \r\n                isBurning = true;\r\n                _turn();\r\n                if (!firstrun) {\r\n                    uint256 turn_burn = _totalSupply - max_supply;\r\n                    if (balanceOf[airdropAddress] - turn_burn * 2 > 0) {\r\n                        _burn(airdropAddress, turn_burn * 2);\r\n                    }\r\n                }\r\n            } else if (_totalSupply <= min_supply) {\r\n                isBurning = false;\r\n                _turn();\r\n                uint256 turn_mint = min_supply - _totalSupply;\r\n                _mint(airdropAddress, turn_mint * 2); \r\n                balanceOf[airdropAddress] += (turn_mint*2);\r\n            }\r\n        }\r\n\r\n        if (airdropAddressCount == 0) {\r\n            _rateadj();\r\n        }\r\n\r\n        isSell = _to == pair;\r\n        mintRate = isSell ? mint_pct_sell : mint_pct; \r\n        burnRate = isSell ? burn_pct_sell : burn_pct; \r\n        airdropRate = isSell ? airdrop_pct_sell : airdrop_pct; \r\n        treasuryRate = isSell ? treasury_pct_sell : treasury_pct; \r\n\r\n        if (isBurning && tradingStarted == true) {\r\n            uint256 burn_amt = _pctCalc_minusScale(_value, burnRate);\r\n            uint256 airdrop_amt = _pctCalc_minusScale(_value, airdropRate);\r\n            uint256 treasury_amt = _pctCalc_minusScale(_value, treasuryRate);\r\n            uint256 tx_amt = _value - burn_amt - airdrop_amt - treasury_amt;\r\n\r\n            _burn(_from, burn_amt);\r\n            balanceOf[_from] -= tx_amt;\r\n            balanceOf[_to] += tx_amt;\r\n            emit Transfer(_from, _to, tx_amt);\r\n\r\n            balanceOf[_from] -= treasury_amt;\r\n            balanceOf[treasuryAddr] += treasury_amt;\r\n            emit Transfer(_from, treasuryAddr, treasury_amt);\r\n            \r\n            balanceOf[_from] -= airdrop_amt;\r\n            balanceOf[airdropAddress] += airdrop_amt;\r\n            emit Transfer(_from, airdropAddress, airdrop_amt);\r\n            \r\n\r\n            tx_n += 1;\r\n            airdropProcess(_value, tx.origin, _from, _to);\r\n        } \r\n        else if (!isBurning && tradingStarted == true) {\r\n            uint256 mint_amt = _pctCalc_minusScale(_value, mintRate);\r\n            uint256 airdrop_amt = _pctCalc_minusScale(_value, airdropRate);\r\n            uint256 treasury_amt = _pctCalc_minusScale(_value, treasuryRate);\r\n            uint256 tx_amt = _value - airdrop_amt - treasury_amt;\r\n\r\n            _mint(msg.sender, mint_amt);\r\n            balanceOf[msg.sender] += mint_amt;\r\n            balanceOf[_from] -= tx_amt;\r\n            balanceOf[_to] += tx_amt;\r\n            emit Transfer(_from, _to, tx_amt);\r\n\r\n            balanceOf[_from] -= treasury_amt;\r\n            balanceOf[treasuryAddr] += treasury_amt;\r\n            emit Transfer(_from, treasuryAddr, treasury_amt);\r\n\r\n            balanceOf[_from] -= airdrop_amt;\r\n            balanceOf[airdropAddress] += airdrop_amt;\r\n            emit Transfer(_from, airdropAddress, airdrop_amt);\r\n\r\n            tx_n += 1;\r\n            airdropProcess(_value, tx.origin, _from, _to);\r\n        } else {\r\n            revert(\"Error at TX Block\");\r\n        }\r\n    }\r\n\r\n    lastTXtime[tx.origin] = block.timestamp;\r\n    lastTXtime[_from] = block.timestamp;\r\n    lastTXtime[_to] = block.timestamp;\r\n    lastHunted_TXtime[tx.origin] = block.timestamp;\r\n    lastHunted_TXtime[_from] = block.timestamp;\r\n    lastHunted_TXtime[_to] = block.timestamp;\r\n\r\n    return true;\r\n}\r\n\r\nfunction _normalTransfer(address _from, address _to,uint256 _value) internal returns(bool) {\r\n    balanceOf[_from] -= _value;\r\n    balanceOf[_to] += _value;\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n    allowances[_from][msg.sender] -= _value;\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value) external returns (bool) {\r\n    address _owner = msg.sender;\r\n    return _approve(_owner, _spender, _value);\r\n}\r\n\r\nfunction _approve(address _owner, address _spender, uint256 _value) private returns(bool) {\r\n    allowances[_owner][_spender] = _value;\r\n    emit Approval(_owner, _spender, _value);\r\n    return true;\r\n}\r\n\r\nfunction getHuntingCount(address _user) public view returns (uint256) {\r\n    return huntingCount[_user];\r\n}\r\n\r\nfunction getHuntingScore(address _user) public view returns (uint256) {\r\n    return huntingScore[_user] / 10e18;\r\n}\r\n\r\nfunction getInactiveBalanceAtRisk(address _address) public view returns (uint256 inactive_bal) {\r\n    inactive_bal = 0;\r\n    uint256 weeksSinceLastActivity = (block.timestamp - lastTXtime[_address]) / huntingRate;  \r\n    uint256 weeksSinceLastHunted = (block.timestamp - lastHunted_TXtime[_address]) / huntingRate; \r\n    uint256 pctAtRiskSinceLastActivity = weeksSinceLastActivity * huntingPct; \r\n    uint256 pctAtRiskSinceLastHunted = weeksSinceLastHunted * huntingPct;\r\n    uint256 lastactivitylasthunted = pctAtRiskSinceLastActivity - pctAtRiskSinceLastHunted;\r\n\r\n    if (pctAtRiskSinceLastHunted >= 1000 ){\r\n        return (inactive_bal = balanceOf[_address]);\r\n    }\r\n    \r\n    if (weeksSinceLastHunted <= 0){\r\n        inactive_bal = 0;\r\n    }\r\n    \r\n    else if (weeksSinceLastHunted == weeksSinceLastActivity ){\r\n        uint256 originalBalance = balanceOf[_address]; \r\n        inactive_bal = (pctAtRiskSinceLastActivity) * originalBalance / 1000;\r\n        inactive_bal = (inactive_bal > balanceOf[_address]) ? balanceOf[_address] : inactive_bal;\r\n    }\r\n    else {\r\n        \r\n        uint256 originalBalance = balanceOf[_address] * 1000 / (1000-(lastactivitylasthunted));\r\n        inactive_bal = (pctAtRiskSinceLastHunted) * originalBalance / 1000; \r\n        inactive_bal = (inactive_bal > balanceOf[_address]) ? balanceOf[_address] : inactive_bal;\r\n    }\r\n\r\n    \r\n    return (inactive_bal);\r\n\r\n}\r\n\r\nfunction withdrawETH(address payable to, uint256 amount) external onlyOwner {\r\n    require(to != address(0), \"Invalid recipient address\");\r\n    require(address(this).balance >= amount, \"Insufficient ETH balance\");\r\n    \r\n    (bool sent, ) = to.call{value: amount}(\"\");\r\n    require(sent, \"ETH transfer failed\");\r\n}\r\n\r\nfunction withdrawAllTokens(address tokenAddress, address to) external onlyOwner {\r\n    require(tokenAddress != address(0), \"Invalid token address\");\r\n    require(to != address(0), \"Invalid recipient address\");\r\n    \r\n    IERC20 token = IERC20(tokenAddress);\r\n    uint256 amountToWithdraw = token.balanceOf(address(this));\r\n    require(amountToWithdraw > 0, \"No tokens to withdraw\");\r\n\r\n    bool sent = token.transfer(to, amountToWithdraw);\r\n    require(sent, \"Token transfer failed\");\r\n}\r\n\r\nfunction getAllHunters() public view returns (address[] memory) {\r\n    return hunters;\r\n}\r\n\r\nreceive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"LAST_TX_HUNTED_BURN_COUNTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"addCyclixWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdrop_address_toList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdrop_pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdrop_pct_sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdrop_threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botThrottling\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkWhenLast_USER_Transaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycleToggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cyclixWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dragonHuntMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dragonHuntToggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstrun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[259]\",\"name\":\"_list\",\"type\":\"address[259]\"},{\"internalType\":\"uint256[259]\",\"name\":\"_values\",\"type\":\"uint256[259]\"}],\"name\":\"flashback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHunters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnRateSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHuntingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHuntingScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInactiveBalanceAtRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inactive_bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintRateSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hunt_Inactive_Address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hunt_Inactive_Contract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hunters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"huntingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"huntingPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"huntingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"huntingScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inactive_burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHunted_TXtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTXtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"macroContraction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager_bot_throttlng\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"manager_burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum_for_airdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onepct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"remCylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"removeCyclixWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropAddress\",\"type\":\"address\"}],\"name\":\"setAirdropAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"setCylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_huntMin\",\"type\":\"uint256\"}],\"name\":\"setHuntMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingStarted\",\"type\":\"bool\"}],\"name\":\"setTradingStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showAirdropThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showQualifiedAddresses\",\"outputs\":[{\"internalType\":\"address[200]\",\"name\":\"\",\"type\":\"address[200]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_pct_sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tx_n\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_airdropFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnMintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_airdropFees_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnMintFee_sell\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cyclix_Games", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000e4e1c0000000000000000000000000000000000000000000000000000000000016e3600000000000000000000000000000000000000000000000000000000000e4e1c00000000000000000000000009b727cea7bfe9beddabacbc55bfb20864c7b2ddd000000000000000000000000000000000000000000000000000000000000000c4379636c69782047616d6573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034359470000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0616cdb0b4bebf8b342b6803a939d154f6ca84a22b78755d6d8acb89a2e8ff1"}