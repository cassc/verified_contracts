{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.10;\n\n\n\n\n\ncontract MainnetCurveUsdAddresses {\n    address internal constant CRVUSD_CONTROLLER_FACTORY_ADDR = 0xC9332fdCB1C491Dcc683bAe86Fe3cb70360738BC;\n    address internal constant CRVUSD_TOKEN_ADDR = 0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E;\n    address internal constant CURVE_ADDRESS_PROVIDER = 0x0000000022D53366457F9d5E68Ec105046FC4383;\n}\n\n\n\n\ninterface IAddressProvider {\n    function admin() external view returns (address);\n    function get_registry() external view returns (address);\n    function get_address(uint256 _id) external view returns (address);\n}\n\n\n\n\n\ninterface ICrvUsdController {\n    function create_loan(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands) external payable;\n    function create_loan_extended(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands, address _callbacker, uint256[] memory _callbackArgs) external payable;\n\n    /// @dev all functions below: if _collateralAmount is 0 will just return\n    function add_collateral(uint256 _collateralAmount) external payable;\n    function add_collateral(uint256 _collateralAmount, address _for) external payable;\n\n    function remove_collateral(uint256 _collateralAmount) external;\n    /// @param _useEth relevant only for ETH collateral pools (currently not deployed)\n    function remove_collateral(uint256 _collateralAmount, bool _useEth) external;\n\n    /// @dev all functions below: if _debtAmount is 0 will just return\n    function borrow_more(uint256 _collateralAmount, uint256 _debtAmount) external payable;\n\n    /// @dev if _debtAmount > debt will do full repay\n    function repay(uint256 _debtAmount) external payable;\n    function repay(uint256 _debtAmount, address _for) external payable;\n    /// @param _maxActiveBand Don't allow active band to be higher than this (to prevent front-running the repay)\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand) external payable;\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand, bool _useEth) external payable;\n    function repay_extended(address _callbacker, uint256[] memory _callbackArgs) external;\n\n    function liquidate(address user, uint256 min_x) external;\n    function liquidate(address user, uint256 min_x, bool _useEth) external;\n    function liquidate_extended(address user, uint256 min_x, uint256 frac, bool use_eth, address callbacker, uint256[] memory _callbackArgs) external;\n\n\n    /// GETTERS\n    function amm() external view returns (address);\n    function monetary_policy() external view returns (address);\n    function collateral_token() external view returns (address);\n    function debt(address) external view returns (uint256);\n    function total_debt() external view returns (uint256);\n    function health_calculator(address, int256, int256, bool, uint256) external view returns (int256);\n    function health_calculator(address, int256, int256, bool) external view returns (int256);\n    function health(address) external view returns (int256);\n    function health(address, bool) external view returns (int256);\n    function max_borrowable(uint256 collateralAmount, uint256 nBands) external view returns (uint256);\n    function min_collateral(uint256 debtAmount, uint256 nBands) external view returns (uint256);\n    function calculate_debt_n1(uint256, uint256, uint256) external view returns (int256);\n    function minted() external view returns (uint256);\n    function redeemed() external view returns (uint256);\n    function amm_price() external view returns (uint256);\n    function user_state(address) external view returns (uint256[4] memory);\n    function user_prices(address) external view returns (uint256[2] memory);\n    function loan_exists(address) external view returns (bool);\n    function liquidation_discount() external view returns (uint256);\n}\n\ninterface ICrvUsdControllerFactory {\n    function get_controller(address) external view returns (address); \n    function debt_ceiling(address) external view returns (uint256);\n}\n\ninterface ILLAMMA {\n    function active_band_with_skip() external view returns (int256);\n    function get_sum_xy(address) external view returns (uint256[2] memory);\n    function get_xy(address) external view returns (uint256[][2] memory);\n    function get_p() external view returns (uint256);\n    function read_user_tick_numbers(address) external view returns (int256[2] memory);\n    function p_oracle_up(int256) external view returns (uint256);\n    function p_oracle_down(int256) external view returns (uint256);\n    function p_current_up(int256) external view returns (uint256);\n    function p_current_down(int256) external view returns (uint256);\n    function bands_x(int256) external view returns (uint256);\n    function bands_y(int256) external view returns (uint256);\n    function get_base_price() external view returns (uint256);\n    function price_oracle() external view returns (uint256);\n    function active_band() external view returns (int256);\n    function A() external view returns (uint256);\n    function min_band() external view returns (int256);\n    function max_band() external view returns (int256);\n    function rate() external view returns (uint256);\n    function exchange(uint256 i, uint256 j, uint256 in_amount, uint256 min_amount) external returns (uint256[2] memory);\n    function coins(uint256 i) external view returns (address);\n    function user_state(address _user) external view returns (uint256[4] memory);\n}\n\ninterface IAGG {\n    function rate() external view returns (uint256);\n    function rate0() external view returns (uint256);\n    function target_debt_fraction() external view returns (uint256);\n    function sigma() external view returns (int256);\n    function peg_keepers(uint256) external view returns (address); \n}\n\ninterface IPegKeeper {\n    function debt() external view returns (uint256);\n}\n\ninterface ICurveUsdSwapper {\n    function encodeSwapParams(uint256[3][4] memory swapParams,  uint32 gasUsed, uint32 dfsFeeDivider, uint8 useSteth) external pure returns (uint256 encoded);\n    function setAdditionalRoutes(address[6] memory _additionalRoutes) external;\n}\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\nabstract contract IWETH {\n    function allowance(address, address) public virtual view returns (uint256);\n\n    function balanceOf(address) public virtual view returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public virtual returns (bool);\n\n    function deposit() public payable virtual;\n\n    function withdraw(uint256) public virtual;\n}\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance < amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance < value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n\n\n\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    address public constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address public constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    function approveToken(\n        address _tokenAddr,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_tokenAddr == ETH_ADDR) return;\n\n        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\n        }\n    }\n\n    function pullTokensIfNeeded(\n        address _token,\n        address _from,\n        uint256 _amount\n    ) internal returns (uint256) {\n        // handle max uint amount\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, _from);\n        }\n\n        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        }\n\n        return _amount;\n    }\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, address(this));\n        }\n\n        if (_to != address(0) && _to != address(this) && _amount != 0) {\n            if (_token != ETH_ADDR) {\n                IERC20(_token).safeTransfer(_to, _amount);\n            } else {\n                (bool success, ) = _to.call{value: _amount}(\"\");\n                require(success, \"Eth send fail\");\n            }\n        }\n\n        return _amount;\n    }\n\n    function depositWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).deposit{value: _amount}();\n    }\n\n    function withdrawWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).withdraw(_amount);\n    }\n\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n        if (_tokenAddr == ETH_ADDR) {\n            return _acc.balance;\n        } else {\n            return IERC20(_tokenAddr).balanceOf(_acc);\n        }\n    }\n\n    function getTokenDecimals(address _token) internal view returns (uint256) {\n        if (_token == ETH_ADDR) return 18;\n\n        return IERC20(_token).decimals();\n    }\n}\n\n\n\n\n\n\ncontract CurveUsdHelper is MainnetCurveUsdAddresses {\n    using TokenUtils for address;\n\n    error CurveUsdInvalidController();\n\n    IAddressProvider addressProvider = IAddressProvider(CURVE_ADDRESS_PROVIDER);\n\n    bytes4 constant CURVE_SWAPPER_ID = bytes4(keccak256(\"CurveUsdSwapper\"));\n\n    function isControllerValid(address _controllerAddr) public view returns (bool) {\n        return\n            ICrvUsdControllerFactory(CRVUSD_CONTROLLER_FACTORY_ADDR).debt_ceiling(\n                _controllerAddr\n            ) != 0;\n    }\n\n    function userMaxWithdraw(\n        address _controllerAddress,\n        address _user\n    ) public view returns (uint256 maxWithdraw) {\n        uint256[4] memory userState = ICrvUsdController(_controllerAddress).user_state(_user);\n        return\n            userState[0] -\n            ICrvUsdController(_controllerAddress).min_collateral(userState[2], userState[3]);\n    }\n\n    function userMaxBorrow(\n        address _controllerAddress,\n        address _user\n    ) public view returns (uint256 maxBorrow) {\n        uint256[4] memory userState = ICrvUsdController(_controllerAddress).user_state(_user);\n        return\n            ICrvUsdController(_controllerAddress).max_borrowable(userState[0], userState[3]) -\n            userState[2];\n    }\n\n    function getCollAmountsFromAMM(\n        address _controllerAddress,\n        address _user\n    ) public view returns (uint256 crvUsdAmount, uint256 collAmount) {\n        address llammaAddress = ICrvUsdController(_controllerAddress).amm();\n        uint256[2] memory xy = ILLAMMA(llammaAddress).get_sum_xy(_user);\n        crvUsdAmount = xy[0];\n        collAmount = xy[1];\n    }\n\n    function _sendLeftoverFunds(address _controllerAddress, address _to) internal {\n        address collToken = ICrvUsdController(_controllerAddress).collateral_token();\n\n        CRVUSD_TOKEN_ADDR.withdrawTokens(_to, type(uint256).max);\n        collToken.withdrawTokens(_to, type(uint256).max);\n    }\n\n    /// @dev Helper method for advanced actions to setup the curve path and write to transient storage in CurveUsdSwapper\n    function _setupCurvePath(\n        address _curveUsdSwapper,\n        bytes memory _additionalData,\n        uint256 _swapAmount,\n        uint256 _minSwapAmount,\n        uint32 _gasUsed,\n        uint32 _dfsFeeDivider,\n        uint8 _useSteth\n    ) internal returns (uint256[] memory swapData) {\n        (address[9] memory _route, uint256[3][4] memory _swap_params) = abi.decode(\n            _additionalData,\n            (address[9], uint256[3][4])\n        );\n\n        swapData = new uint256[](5);\n        swapData[0] = _swapAmount;\n        swapData[1] = _minSwapAmount;\n        swapData[2] = ICurveUsdSwapper(_curveUsdSwapper).encodeSwapParams(_swap_params, _gasUsed, _dfsFeeDivider, _useSteth);\n        swapData[3] = uint256(uint160(_route[1]));\n        swapData[4] = uint256(uint160(_route[2]));\n\n        address[6] memory _path = [\n            _route[3],\n            _route[4],\n            _route[5],\n            _route[6],\n            _route[7],\n            _route[8]\n        ];\n\n        ICurveUsdSwapper(_curveUsdSwapper).setAdditionalRoutes(_path);\n    }\n}\n\n\n\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x + y;\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x - y;\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\n\n\n\ninterface ILendingPoolAddressesProviderV2 {\n  event LendingPoolUpdated(address indexed newAddress);\n  event ConfigurationAdminUpdated(address indexed newAddress);\n  event EmergencyAdminUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n  function setAddress(bytes32 id, address newAddress) external;\n\n  function setAddressAsProxy(bytes32 id, address impl) external;\n\n  function getAddress(bytes32 id) external view returns (address);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address pool) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n\n  function getLendingPoolCollateralManager() external view returns (address);\n\n  function setLendingPoolCollateralManager(address manager) external;\n\n  function getPoolAdmin() external view returns (address);\n\n  function setPoolAdmin(address admin) external;\n\n  function getEmergencyAdmin() external view returns (address);\n\n  function setEmergencyAdmin(address admin) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address lendingRateOracle) external;\n}\n\n\n\n\n\nabstract contract IPriceOracleGetterAave {\n    function getAssetPrice(address _asset) external virtual view returns (uint256);\n    function getAssetsPrices(address[] calldata _assets) external virtual view returns(uint256[] memory);\n    function getSourceOfAsset(address _asset) external virtual view returns(address);\n    function getFallbackOracle() external virtual view returns(address);\n}\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n}\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\nabstract contract IDFSRegistry {\n \n    function getAddr(bytes4 _id) public view virtual returns (address);\n\n    function addNewContract(\n        bytes32 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public virtual;\n\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n\n    function approveContractChange(bytes32 _id) public virtual;\n\n    function cancelContractChange(bytes32 _id) public virtual;\n\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n}\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\ncontract FeeRecipient is AdminAuth {\n\n    address public wallet;\n\n    constructor(address _newWallet) {\n        wallet = _newWallet;\n    }\n\n    function getFeeAddr() public view returns (address) {\n        return wallet;\n    }\n\n    function changeWalletAddr(address _newWallet) public onlyOwner {\n        wallet = _newWallet;\n    }\n}\n\n\n\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function getTimestamp(uint256 _roundId) external view returns (uint256);\n\n    function phaseId() external view returns (uint16);\n\n    function phaseAggregators(uint16 _phaseId) external view returns (address);\n}\n\n\n\n\ninterface IFeedRegistry {\n  struct Phase {\n    uint16 phaseId;\n    uint80 startingAggregatorRoundId;\n    uint80 endingAggregatorRoundId;\n  }\n\n  event FeedProposed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed proposedAggregator,\n    address currentAggregator,\n    address sender\n  );\n  event FeedConfirmed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed latestAggregator,\n    address previousAggregator,\n    uint16 nextPhaseId,\n    address sender\n  );\n\n  // V3 AggregatorV3Interface\n\n  function decimals(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function latestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function getRoundData(\n    address base,\n    address quote,\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // V2 AggregatorInterface\n\n  function latestAnswer(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function latestTimestamp(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n  function latestRound(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 roundId\n    );\n\n  function getAnswer(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function getTimestamp(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n\n  function isFeedEnabled(\n    address aggregator\n  )\n    external\n    view\n    returns (\n      bool\n    );\n\n  function getPhase(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      Phase memory phase\n    );\n\n  // Round helpers\n\n\n  function getPhaseRange(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      uint80 startingRoundId,\n      uint80 endingRoundId\n    );\n\n  function getPreviousRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 previousRoundId\n    );\n\n  function getNextRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 nextRoundId\n    );\n\n  // Feed management\n\n  function proposeFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  function confirmFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  // Proposed aggregator\n\n  function proposedGetRoundData(\n    address base,\n    address quote,\n    uint80 roundId\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function proposedLatestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // Phases\n  function getCurrentPhaseId(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint16 currentPhaseId\n    );\n\n    function getFeed(address base, address quote) external view returns (address);\n}\n\n\n\n\n\ninterface IWStEth {\n    function wrap(uint256 _stETHAmount) external returns (uint256);\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\n    function stEthPerToken() external view returns (uint256);\n}\n\n\n\n\n\nlibrary Denominations {\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\n  address public constant USD = address(840);\n  address public constant GBP = address(826);\n  address public constant EUR = address(978);\n  address public constant JPY = address(392);\n  address public constant KRW = address(410);\n  address public constant CNY = address(156);\n  address public constant AUD = address(36);\n  address public constant CAD = address(124);\n  address public constant CHF = address(756);\n  address public constant ARS = address(32);\n  address public constant PHP = address(608);\n  address public constant NZD = address(554);\n  address public constant SGD = address(702);\n  address public constant NGN = address(566);\n  address public constant ZAR = address(710);\n  address public constant RUB = address(643);\n  address public constant INR = address(356);\n  address public constant BRL = address(986);\n}\n\n\n\n\n\ncontract MainnetUtilAddresses {\n    address internal refillCaller = 0x33fDb79aFB4456B604f376A45A546e7ae700e880;\n    address internal feeAddr = 0x76720aC2574631530eC8163e4085d6F98513fb27;\n\n    address internal constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\n    address internal constant UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address internal constant MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n    address internal constant AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\n\n    address internal constant PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997;\n    address internal constant DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed;\n\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address internal constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address internal constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    address internal constant WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    address internal constant CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n    address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address internal constant FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06;\n\n    address internal constant UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    address internal constant UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6;\n\n    address internal constant FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n\n    // not needed on mainnet\n    address internal constant DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address public constant CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf;\n}\n\n\n\n\n\ncontract UtilHelper is MainnetUtilAddresses{\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenPriceHelper is DSMath, UtilHelper {\n    IFeedRegistry public constant feedRegistry = IFeedRegistry(CHAINLINK_FEED_REGISTRY);\n\n    /// @dev Helper function that returns chainlink price data\n    /// @param _inputTokenAddr Token address we are looking the usd price for\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId, IAggregatorV3 aggregator)\n        public\n        view\n        returns (uint256, uint256 updateTimestamp)\n    {\n        int256 price;\n\n        if (_roundId == 0) {\n            (, price, , updateTimestamp, ) = aggregator.latestRoundData();\n        } else {\n            (, price, , updateTimestamp, ) = aggregator.getRoundData(_roundId);\n        }\n\n        // no price for wsteth, can calculate from steth\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\n\n        return (uint256(price), updateTimestamp);\n    }\n\n    /// @dev Helper function that returns chainlink price data\n    /// @param _inputTokenAddr Token address we are looking the usd price for\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId)\n        public\n        view\n        returns (uint256, uint256 updateTimestamp)\n    {\n        address tokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n        IAggregatorV3 aggregator = IAggregatorV3(feedRegistry.getFeed(tokenAddr, Denominations.USD));\n\n        return getRoundInfo(_inputTokenAddr, _roundId, aggregator);\n    }\n\n    /// @dev helper function that returns latest token price in USD\n    /// @dev 1. Chainlink USD feed\n    /// @dev 2. Chainlink ETH feed\n    /// @dev 3. Aave feed\n    /// @dev if no price found return 0\n    function getPriceInUSD(address _inputTokenAddr) public view returns (uint256) {\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n\n        int256 price;\n        price = getChainlinkPriceInUSD(chainlinkTokenAddr, true);\n        if (price == 0){\n            price = int256(getAaveTokenPriceInUSD(_inputTokenAddr));\n        }\n        if (price == 0){\n            return 0;\n        }\n\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\n        if (_inputTokenAddr == WBTC_ADDR) price = getWBtcPrice(price);\n        return uint256(price);\n    }\n\n    /// @dev helper function that returns latest token price in USD\n    /// @dev 1. Chainlink USD feed\n    /// @dev 2. Chainlink ETH feed\n    /// @dev 3. Aave feed\n    /// @dev if no price found return 0\n    /// @dev expect WBTC and WSTETH to have chainlink USD price\n    function getPriceInETH(address _inputTokenAddr) public view returns (uint256) {\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n\n        uint256 chainlinkPriceInUSD = uint256(getChainlinkPriceInUSD(chainlinkTokenAddr, false));\n        if (chainlinkPriceInUSD != 0){\n            uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n            uint256 priceInEth = wdiv(chainlinkPriceInUSD, chainlinkETHPriceInUSD);\n            if (_inputTokenAddr == WSTETH_ADDR) return uint256(getWStEthPrice(int256(priceInEth)));\n            if (_inputTokenAddr == WBTC_ADDR) return uint256(getWBtcPrice(int256(priceInEth)));\n            return priceInEth;\n        }\n\n        uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(chainlinkTokenAddr));\n        if (chainlinkPriceInETH != 0) return chainlinkPriceInETH;\n\n\n        uint256 aavePriceInETH = getAaveTokenPriceInETH(_inputTokenAddr);\n        if (aavePriceInETH != 0) return aavePriceInETH;\n        \n        return 0;\n    }\n\n    /// @dev If there's no USD price feed can fallback to ETH price feed, if there's no USD or ETH price feed return 0\n    function getChainlinkPriceInUSD(address _inputTokenAddr, bool _useFallback) public view returns (int256 chainlinkPriceInUSD) {\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.USD) returns (uint80, int256 answer, uint256, uint256, uint80){\n            chainlinkPriceInUSD = answer;\n        } catch {\n            if (_useFallback){\n                uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(_inputTokenAddr));\n                uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n                chainlinkPriceInUSD = int256(wmul(chainlinkPriceInETH, chainlinkETHPriceInUSD));\n            } else {\n                chainlinkPriceInUSD = 0;\n            }\n        }\n    }\n\n    /// @dev If there's no ETH price feed returns 0\n    function getChainlinkPriceInETH(address _inputTokenAddr) public view returns (int256 chainlinkPriceInETH) {\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.ETH) returns (uint80, int256 answer, uint256, uint256, uint80){\n            chainlinkPriceInETH = answer;\n        } catch {\n            chainlinkPriceInETH = 0;\n        }\n    }\n    \n    /// @dev chainlink uses different addresses for WBTC and ETH\n    /// @dev there is only STETH price feed so we use that for WSTETH and handle later \n    function getAddrForChainlinkOracle(address _inputTokenAddr)\n        public\n        pure\n        returns (address tokenAddrForChainlinkUsage)\n    {\n        if (_inputTokenAddr == WETH_ADDR) {\n            tokenAddrForChainlinkUsage = ETH_ADDR;\n        } else if (_inputTokenAddr == WSTETH_ADDR) {\n            tokenAddrForChainlinkUsage = STETH_ADDR;\n        } else if (_inputTokenAddr == WBTC_ADDR) {\n            tokenAddrForChainlinkUsage = CHAINLINK_WBTC_ADDR;\n        } else {\n            tokenAddrForChainlinkUsage = _inputTokenAddr;\n        }\n    }\n\n    function getWStEthPrice(int256 _stEthPrice) public view returns (int256 wStEthPrice) {\n        wStEthPrice = int256(wmul(uint256(_stEthPrice), IWStEth(WSTETH_ADDR).stEthPerToken()));\n    }\n\n    function getWBtcPrice(int256 _btcPrice) public view returns (int256 wBtcPrice) {\n        (, int256 wBtcPriceToPeg, , , ) = feedRegistry.latestRoundData(WBTC_ADDR, CHAINLINK_WBTC_ADDR);\n        wBtcPrice = (_btcPrice * wBtcPriceToPeg + 1e8 / 2) / 1e8;\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveTokenPriceInETH(address _tokenAddr) public view returns (uint256 price) {\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(AAVE_MARKET).getPriceOracle();\n\n        price = IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr);\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveTokenPriceInUSD(address _tokenAddr) public view returns (uint256) {\n        uint256 tokenAavePriceInETH = getAaveTokenPriceInETH(_tokenAddr);\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n\n        return wmul(tokenAavePriceInETH, ethPriceInUSD);\n    }\n}\n\n\n\n\n\n\n\n\n\n\ncontract GasFeeHelper is DSMath, TokenPriceHelper {\n    using TokenUtils for address;\n\n    FeeRecipient public constant feeRecipient = FeeRecipient(FEE_RECIPIENT);\n\n    uint256 public constant SANITY_GAS_PRICE = 1000 gwei;\n\n    /// @dev Divider for input amount, 5 bps\n    uint256 public constant MAX_DFS_FEE = 2000;\n\n    function calcGasCost(uint256 _gasUsed, address _feeToken, uint256 _l1GasCostInEth) public view returns (uint256 txCost) {\n        uint256 gasPrice = tx.gasprice;\n\n        // gas price must be in a reasonable range\n        if (tx.gasprice > SANITY_GAS_PRICE) {\n            gasPrice = SANITY_GAS_PRICE;\n        }\n\n        // can't use more gas than the block gas limit\n        if (_gasUsed > block.gaslimit) {\n            _gasUsed = block.gaslimit;\n        }\n\n        // calc gas used\n        txCost = (_gasUsed * gasPrice) + _l1GasCostInEth;\n\n        // convert to token amount\n        if (_feeToken != TokenUtils.WETH_ADDR) {\n            uint256 price = getPriceInETH(_feeToken);\n            uint256 tokenDecimals = _feeToken.getTokenDecimals();\n\n            require(tokenDecimals <= 18, \"Token decimal too big\");\n\n            if (price > 0) {\n                txCost = wdiv(txCost, uint256(price)) / (10**(18 - tokenDecimals));\n            } else {\n                txCost = 0;\n            }\n        }\n    }\n}\n\n\n\n\n\ncontract MainnetExchangeAddresses {\n\n    address internal constant FEE_RECIPIENT_ADDRESS = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n    address internal constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n    address internal constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\n    address internal constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant GROUP_REGISTRY = 0xcA49e64FE1FE8be40ED30F682edA1b27a6c8611c;\n    address internal constant TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2;\n}\n\n\n\n\n\ncontract ExchangeHelper is MainnetExchangeAddresses {\n}\n\n\n\n\ncontract TokenGroupRegistry is AdminAuth {\n    /// @dev 0.25% fee as we divide the amount with this number\n    uint256 public constant STANDARD_FEE_DIVIDER = 400;\n\n    uint256 public constant STABLE_FEE_DIVIDER = 1000;\n    uint256 public constant MAX_FEE_DIVIDER = 50;\n\n    /// @dev maps token address to a registered group it belongs to\n    mapping(address => uint256) public groupIds;\n\n    /// @dev Array of groups where the index is the grouped id and the value is the fee\n    uint256[] public feesPerGroup;\n\n    enum Groups { NOT_LISTED, BANNED, STABLECOIN, ETH_BASED, BTC_BASED}\n\n    error FeeTooHigh(uint256 fee);\n    error GroupNonExistent(uint256 groupId);\n\n    constructor() {\n        feesPerGroup.push(STANDARD_FEE_DIVIDER); // NOT_LISTED\n        feesPerGroup.push(0);                    // BANNED\n        feesPerGroup.push(STABLE_FEE_DIVIDER);   // STABLECOIN\n        feesPerGroup.push(STABLE_FEE_DIVIDER);   // ETH_BASED\n        feesPerGroup.push(STABLE_FEE_DIVIDER);   // BTC_BASED\n    }\n\n    /// @notice Checks if 2 tokens are in the same group and returns the correct exchange fee for the pair\n    function getFeeForTokens(address _sellToken, address _buyToken) public view returns (uint256) {\n        uint256 firstId = groupIds[_sellToken];\n        uint256 secondId = groupIds[_buyToken];\n\n        // check if in the ban list, can just check the first token as we take fee from it\n        if (firstId == uint8(Groups.BANNED)) {\n            return 0;\n        }\n    \n        if (firstId == secondId) {\n            return feesPerGroup[secondId];\n        }\n\n        return STANDARD_FEE_DIVIDER;\n    }\n\n    /////////////////////////////// ONLY OWNER FUNCTIONS ///////////////////////////////\n\n    /// @notice Adds token to an existing group\n    /// @dev This will overwrite if token is part of a different group\n    /// @dev Groups needs to exist to add to it\n    function addTokenInGroup(address _tokenAddr, uint256 _groupId) public onlyOwner {\n        if (_groupId > feesPerGroup.length) revert GroupNonExistent(_groupId);\n\n        groupIds[_tokenAddr] = _groupId;\n    }\n\n    /// @notice Add multiple tokens to a group\n    function addTokensInGroup(address[] memory _tokensAddr, uint256 _groupId) public onlyOwner {\n        if (_groupId > feesPerGroup.length) revert GroupNonExistent(_groupId);\n\n        for (uint256 i; i < _tokensAddr.length; ++i) {\n            groupIds[_tokensAddr[i]] = _groupId;\n        }\n    }\n\n    /// @notice Create new group and add tokens\n    /// @dev Divider has to gte 50, which means max fee is 2%\n    function addNewGroup(address[] memory _tokensAddr, uint256 _feeDivider) public onlyOwner {\n        if(_feeDivider < MAX_FEE_DIVIDER) revert FeeTooHigh(_feeDivider);\n\n        feesPerGroup.push(_feeDivider);\n\n        addTokensInGroup(_tokensAddr, feesPerGroup.length - 1);\n    }\n\n    /// @notice Change existing group fee\n    /// @dev Divider has to be gte 50, which means max fee is 2%\n    function changeGroupFee(uint256 _groupId, uint256 _newFeeDivider) public onlyOwner {\n        if(_newFeeDivider < MAX_FEE_DIVIDER) revert FeeTooHigh(_newFeeDivider);\n\n        feesPerGroup[_groupId] = _newFeeDivider;\n    }\n\n}\n\n\n\n\ninterface ISwaps {\n\n    ///@notice Perform an exchange using the pool that offers the best rate\n    ///@dev Prior to calling this function, the caller must approve\n    ///        this contract to transfer `_amount` coins from `_from`\n    ///        Does NOT check rates in factory-deployed pools\n    ///@param _from Address of coin being sent\n    ///@param _to Address of coin being received\n    ///@param _amount Quantity of `_from` being sent\n    ///@param _expected Minimum quantity of `_from` received\n    ///        in order for the transaction to succeed\n    ///@param _receiver Address to transfer the received tokens to\n    ///@return uint256 Amount received\n    function exchange_with_best_rate(\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint256 _expected,\n        address _receiver\n    ) external payable returns (uint256);\n\n\n    ///@notice Perform an exchange using a specific pool\n    ///@dev Prior to calling this function, the caller must approve\n    ///        this contract to transfer `_amount` coins from `_from`\n    ///        Works for both regular and factory-deployed pools\n    ///@param _pool Address of the pool to use for the swap\n    ///@param _from Address of coin being sent\n    ///@param _to Address of coin being received\n    ///@param _amount Quantity of `_from` being sent\n    ///@param _expected Minimum quantity of `_from` received\n    ///        in order for the transaction to succeed\n    ///@param _receiver Address to transfer the received tokens to\n    ///@return uint256 Amount received\n    function exchange(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount,\n        uint256 _expected,\n        address _receiver\n    ) external payable returns (uint256);\n\n\n\n    ///@notice Find the pool offering the best rate for a given swap.\n    ///@dev Checks rates for regular and factory pools\n    ///@param _from Address of coin being sent\n    ///@param _to Address of coin being received\n    ///@param _amount Quantity of `_from` being sent\n    ///@param _exclude_pools A list of up to 8 addresses which shouldn't be returned\n    ///@return Pool address, amount received\n    function get_best_rate(\n        address _from,\n        address _to,\n        uint256 _amount,\n        address[8] memory _exclude_pools\n    ) external view returns (address, uint256);\n\n\n    ///@notice Get the current number of coins received in an exchange\n    ///@dev Works for both regular and factory-deployed pools\n    ///@param _pool Pool address\n    ///@param _from Address of coin to be sent\n    ///@param _to Address of coin to be received\n    ///@param _amount Quantity of `_from` to be sent\n    ///@return Quantity of `_to` to be received\n    function get_exchange_amount(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external view returns (uint256);\n\n\n    ///@notice Get the current number of coins required to receive the given amount in an exchange\n    ///@param _pool Pool address\n    ///@param _from Address of coin to be sent\n    ///@param _to Address of coin to be received\n    ///@param _amount Quantity of `_to` to be received\n    ///@return Quantity of `_from` to be sent\n    function get_input_amount(\n        address _pool,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external view returns (uint256);\n\n\n    ///@notice Get the current number of coins required to receive the given amount in an exchange\n    ///@param _pool Pool address\n    ///@param _from Address of coin to be sent\n    ///@param _to Address of coin to be received\n    ///@param _amounts Quantity of `_to` to be received\n    ///@return Quantity of `_from` to be sent\n    function get_exchange_amounts(\n        address _pool,\n        address _from,\n        address _to,\n        uint256[] memory _amounts\n    ) external view returns (uint256[] memory);\n\n\n    ///@notice Set calculator contract\n    ///@dev Used to calculate `get_dy` for a pool\n    ///@param _pool Pool address\n    ///@return `CurveCalc` address\n    function get_calculator(address _pool) external view returns (address);\n\n\n    /// @notice Perform up to four swaps in a single transaction\n    /// @dev Routing and swap params must be determined off-chain. This\n    ///     functionality is designed for gas efficiency over ease-of-use.\n    /// @param _route Array of [initial token, pool, token, pool, token, ...]\n    ///     The array is iterated until a pool address of 0x00, then the last\n    ///     given token is transferred to `_receiver`\n    /// @param _swap_params Multidimensional array of [i, j, swap type] where i and j are the correct\n    ///     values for the n'th pool in `_route`. The swap type should be 1 for\n    ///     a stableswap `exchange`, 2 for stableswap `exchange_underlying`, 3\n    ///     for a cryptoswap `exchange`, 4 for a cryptoswap `exchange_underlying`,\n    ///     5 for Polygon factory metapools `exchange_underlying`, 6-8 for\n    ///     underlying coin -> LP token \"exchange\" (actually `add_liquidity`), 9 and 10\n    ///     for LP token -> underlying coin \"exchange\" (actually `remove_liquidity_one_coin`)\n    /// @param _amount The amount of `_route[0]` token being sent.\n    /// @param _expected The minimum amount received after the final swap.\n    /// @param _pools Array of pools for swaps via zap contracts. This parameter is only needed for\n    ///     Polygon meta-factories underlying swaps.\n    /// @param _receiver Address to transfer the final output token to.\n    /// @return Received amount of the final output token\n    function exchange_multiple(\n        address[9] memory _route,\n        uint256[3][4] memory _swap_params,\n        uint256 _amount,\n        uint256 _expected,\n        address[4] memory _pools,\n        address _receiver\n    ) external payable returns (uint256);\n\n    function exchange_multiple(\n        address[9] memory _route,\n        uint256[3][4] memory _swap_params,\n        uint256 _amount,\n        uint256 _expected\n    ) external payable returns (uint256);\n\n    function get_exchange_multiple_amount(\n        address[9] memory _route,\n        uint256[3][4] memory _swap_params,\n        uint256 _amount\n    ) external view returns (uint256);\n}\n\n\n\n\ncontract Discount {\n    address public owner;\n    mapping(address => CustomServiceFee) public serviceFees;\n\n    uint256 constant MAX_SERVICE_FEE = 400;\n\n    error OnlyOwner();\n    error WrongFeeValue();\n\n    struct CustomServiceFee {\n        bool active;\n        uint256 amount;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint256) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint256 _fee) public {\n        if (msg.sender != owner){\n            revert OnlyOwner();\n        }\n\n        if (!(_fee >= MAX_SERVICE_FEE || _fee == 0)){\n            revert WrongFeeValue();\n        }\n\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n    }\n\n    function disableServiceFee(address _user) public {\n        if (msg.sender != owner){\n            revert OnlyOwner();\n        }\n\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract CurveUsdSwapper is CurveUsdHelper, ExchangeHelper, GasFeeHelper, AdminAuth {\n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    uint256 internal constant STANDARD_DFS_FEE = 400;\n\n    struct CallbackData {\n        uint256 stablecoins;\n        uint256 collateral;\n    }\n\n    struct SwapRoutes {\n        address[9] route;\n        uint256[3][4] swap_params;\n    }\n\n    /// @dev Transient store of curve swap routes as we can\"t fit whole data in callback params\n    address[6] internal additionalRoutes;\n\n    ///@dev Called by curve controller from repay_extended method, sends collateral tokens to this contract\n    function callback_repay(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory swapData\n    ) external returns (CallbackData memory cb) {\n        address controllerAddr = msg.sender; // this should be a callback from the controller\n\n        // check if controller is valid\n        if (!isControllerValid(controllerAddr)) revert CurveUsdInvalidController();\n\n        // we get _ethCollAmount in tokens from curve\n        address collToken = ICrvUsdController(controllerAddr).collateral_token();\n\n        uint256 swappedAmount = _curveSwap(_user, swapData, collToken, true);\n\n        // how many crvUsd we got after the trade that will be the repay amount\n        cb.stablecoins = swappedAmount;\n\n        // how much collateral we have left\n        cb.collateral = IERC20(collToken).balanceOf(address(this));\n\n        // approve the controller to create new position\n        IERC20(collToken).safeApprove(controllerAddr, cb.collateral);\n        IERC20(CRVUSD_TOKEN_ADDR).safeApprove(controllerAddr, cb.stablecoins);\n    }\n\n    function callback_deposit(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory swapData\n    ) external returns (CallbackData memory cb) {\n        address controllerAddr = msg.sender; // this should be a callback from the controller\n\n        // check if controller is valid\n        if (!isControllerValid(controllerAddr)) revert CurveUsdInvalidController();\n\n        address collToken = ICrvUsdController(controllerAddr).collateral_token();\n        // controller sent swapData[0] of crvUSD to swapper\n        uint256 swappedAmount = _curveSwap(_user, swapData, collToken, false);\n\n        // set collAmount and approve for controller to pull\n        cb.collateral = swappedAmount;\n        IERC20(collToken).safeApprove(controllerAddr, cb.collateral);\n    }\n\n    function callback_liquidate(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory swapData\n    ) external returns (CallbackData memory cb) {\n        address controllerAddr = msg.sender;\n\n        // check if controller is valid\n        if (!isControllerValid(controllerAddr)) revert CurveUsdInvalidController();\n\n        // we get _ethCollAmount in tokens from curve\n        address collToken = ICrvUsdController(controllerAddr).collateral_token();\n\n        // if we want to sell the whole coll amount we take the whole balance\n        if (swapData[0] == type(uint256).max) {\n            swapData[0] = IERC20(collToken).balanceOf(address(this));\n        }\n\n        uint256 swappedAmount = _curveSwap(_user, swapData, collToken, true);\n\n        // how many crvUsd we got after the trade that will be the repay amount\n        cb.stablecoins = swappedAmount;\n        IERC20(CRVUSD_TOKEN_ADDR).safeApprove(controllerAddr, cb.stablecoins);\n\n        // approve to pick up extra coll and send to user\n        cb.collateral = IERC20(collToken).balanceOf(address(this));\n        IERC20(collToken).safeApprove(controllerAddr, cb.collateral);\n    }\n\n    /// @dev Called by our actions to transiently store curve swap routes\n    /// @param _additionalRoutes Array of 6 addresses to store in transient storage\n    function setAdditionalRoutes(address[6] memory _additionalRoutes) external {\n        additionalRoutes = _additionalRoutes;\n    }\n\n    /// @dev No funds should be stored on this contract, but if anything is left send back to the user\n    function withdrawAll(address _controllerAddress) external {\n        address collToken = ICrvUsdController(_controllerAddress).collateral_token();\n\n        CRVUSD_TOKEN_ADDR.withdrawTokens(msg.sender, type(uint256).max);\n        collToken.withdrawTokens(msg.sender, type(uint256).max);\n    }\n\n    /////////////////////////////// INTERNAL FUNCTIONS ///////////////////////////////\n\n    function _curveSwap(\n        address _user,\n        uint256[] memory _swapData,\n        address _collToken,\n        bool _collToUsd\n    ) internal returns (uint256 amountOut) {\n        ISwaps exchangeContract = ISwaps(addressProvider.get_address(2));\n\n        // get swap params\n        uint256 swapAmount = _swapData[0];\n        uint256 minAmountOut = _swapData[1];\n\n        address srcToken = _collToUsd ? _collToken : CRVUSD_TOKEN_ADDR;\n        address destToken = _collToUsd ? CRVUSD_TOKEN_ADDR : _collToken;\n\n        (\n            SwapRoutes memory swapRoutes,\n            uint32 gasUsed,\n            uint32 dfsFeeDivider,\n            bool useSteth\n        ) = getSwapPath(_swapData, _collToken, _collToUsd);\n\n        // if we are doing coll -> usd trade and the unwrap is true convert wsteth -> steth\n        if (useSteth && _collToUsd) {\n            swapAmount = IWStEth(WSTETH_ADDR).unwrap(swapAmount);\n\n            srcToken = STETH_ADDR;\n            swapRoutes.route[0] = STETH_ADDR;\n        }\n\n        // check custom fee if front sends a non standard fee param\n        if (dfsFeeDivider != STANDARD_DFS_FEE) {\n            dfsFeeDivider = uint32(\n                TokenGroupRegistry(GROUP_REGISTRY).getFeeForTokens(srcToken, destToken)\n            );\n        }\n\n        // get dfs fee and update swap amount\n        swapAmount -= takeSwapAndGasCostFee(swapAmount, _user, srcToken, dfsFeeDivider, gasUsed);\n\n        IERC20(srcToken).safeApprove(address(exchangeContract), swapAmount);\n\n        amountOut = exchangeContract.exchange_multiple(\n            swapRoutes.route,\n            swapRoutes.swap_params,\n            swapAmount,\n            minAmountOut\n        );\n\n        if (useSteth && !_collToUsd) {\n            // wrap any leftover steth\n            uint256 stethBalance = IERC20(STETH_ADDR).balanceOf(address(this));\n            IERC20(STETH_ADDR).safeApprove(WSTETH_ADDR, stethBalance);\n\n            amountOut = IWStEth(WSTETH_ADDR).wrap(stethBalance);\n        }\n\n        // free the storage only needed inside tx as transient storage\n        delete additionalRoutes;\n    }\n\n    /// @dev Unpack the curve swap path from calldata and additionalRoutes\n    function getSwapPath(\n        uint256[] memory swapData,\n        address _collToken,\n        bool _collToUsd\n    )\n        public\n        view\n        returns (SwapRoutes memory swapRoutes, uint32 gasUsed, uint32 dfsFeeDivider, bool useSteth)\n    {\n        (swapRoutes.swap_params, gasUsed, dfsFeeDivider, useSteth) = decodeSwapParams(swapData[2]);\n\n        address firstAddr = _collToUsd ? _collToken : CRVUSD_TOKEN_ADDR;\n\n        swapRoutes.route[0] = firstAddr;\n        swapRoutes.route[1] = address(uint160(swapData[3]));\n        swapRoutes.route[2] = address(uint160(swapData[4]));\n\n        swapRoutes.route[3] = additionalRoutes[0];\n        swapRoutes.route[4] = additionalRoutes[1];\n        swapRoutes.route[5] = additionalRoutes[2];\n        swapRoutes.route[6] = additionalRoutes[3];\n        swapRoutes.route[7] = additionalRoutes[4];\n        swapRoutes.route[8] = additionalRoutes[5];\n    }\n\n    function takeSwapAndGasCostFee(\n        uint256 _amount,\n        address _user,\n        address _token,\n        uint256 _dfsFeeDivider,\n        uint32 _gasUsed\n    ) internal returns (uint256 feeAmount) {\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\n        }\n\n        // we need to take the fee for tx cost as well, as it\"s in a strategy\n        if (_gasUsed != 0) {\n            feeAmount += calcGasCost(_gasUsed, _token, 0);\n        }\n\n        // take dfs fee if set, and add to feeAmount\n        if (_dfsFeeDivider != 0) {\n            feeAmount += _amount / _dfsFeeDivider;\n        }\n\n        // fee can\"t go over 10% of the whole amount\n        if (feeAmount > (_amount / 10)) {\n            feeAmount = _amount / 10;\n        }\n\n        address walletAddr = FeeRecipient(FEE_RECIPIENT_ADDRESS).getFeeAddr();\n        _token.withdrawTokens(walletAddr, feeAmount);\n    }\n\n    /// @dev Encode swapParams in 1 uint256 as the values are small\n    function encodeSwapParams(\n        uint256[3][4] memory swapParams,\n        uint32 gasUsed,\n        uint32 dfsFeeDivider,\n        uint8 useSteth\n    ) public pure returns (uint256 encoded) {\n        encoded |= swapParams[0][0];\n        encoded |= (swapParams[0][1] << 16);\n        encoded |= (swapParams[0][2] << 32);\n        encoded |= (swapParams[1][0] << 48);\n        encoded |= (swapParams[1][1] << 64);\n        encoded |= (swapParams[1][2] << 80);\n        encoded |= (swapParams[2][0] << 96);\n        encoded |= (swapParams[2][1] << 112);\n        encoded |= (swapParams[2][2] << 128);\n        encoded |= (swapParams[3][0] << 144);\n        encoded |= (swapParams[3][1] << 160);\n        encoded |= (swapParams[3][2] << 176);\n        encoded |= uint256(gasUsed) << 192;\n        encoded |= uint256(dfsFeeDivider) << 224;\n        encoded |= uint256(useSteth) << 248;\n    }\n\n    /// @dev Decode swapParams from 1 uint256\n    function decodeSwapParams(\n        uint256 swapParamEncoded\n    )\n        public\n        pure\n        returns (\n            uint256[3][4] memory swapParams,\n            uint32 gasUsed,\n            uint32 dfsFeeDivider,\n            bool useSteth\n        )\n    {\n        swapParams[0] = [\n            uint256(uint16(swapParamEncoded)),\n            uint256(uint16(swapParamEncoded >> 16)),\n            uint256(uint16(swapParamEncoded >> 32))\n        ];\n        swapParams[1] = [\n            uint256(uint16(swapParamEncoded >> 48)),\n            uint256(uint16(swapParamEncoded >> 64)),\n            uint256(uint16(swapParamEncoded >> 80))\n        ];\n        swapParams[2] = [\n            uint256(uint16(swapParamEncoded >> 96)),\n            uint256(uint16(swapParamEncoded >> 112)),\n            uint256(uint16(swapParamEncoded >> 128))\n        ];\n        swapParams[3] = [\n            uint256(uint16(swapParamEncoded >> 144)),\n            uint256(uint16(swapParamEncoded >> 160)),\n            uint256(uint16(swapParamEncoded >> 176))\n        ];\n        gasUsed = uint32(swapParamEncoded >> 192);\n        dfsFeeDivider = uint24(swapParamEncoded >> 224);\n        useSteth = uint8(swapParamEncoded >> 248) == 1;\n    }\n}\n", "ABI": "[{\"inputs\":[],\"name\":\"CurveUsdInvalidController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINLINK_FEED_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DFS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SANITY_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l1GasCostInEth\",\"type\":\"uint256\"}],\"name\":\"calcGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"swapData\",\"type\":\"uint256[]\"}],\"name\":\"callback_deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveUsdSwapper.CallbackData\",\"name\":\"cb\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"swapData\",\"type\":\"uint256[]\"}],\"name\":\"callback_liquidate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveUsdSwapper.CallbackData\",\"name\":\"cb\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"swapData\",\"type\":\"uint256[]\"}],\"name\":\"callback_repay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveUsdSwapper.CallbackData\",\"name\":\"cb\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapParamEncoded\",\"type\":\"uint256\"}],\"name\":\"decodeSwapParams\",\"outputs\":[{\"internalType\":\"uint256[3][4]\",\"name\":\"swapParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"uint32\",\"name\":\"gasUsed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dfsFeeDivider\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"useSteth\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3][4]\",\"name\":\"swapParams\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"uint32\",\"name\":\"gasUsed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dfsFeeDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"useSteth\",\"type\":\"uint8\"}],\"name\":\"encodeSwapParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"encoded\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract FeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRegistry\",\"outputs\":[{\"internalType\":\"contract IFeedRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveTokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveTokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getAddrForChainlinkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddrForChainlinkUsage\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getChainlinkPriceInETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chainlinkPriceInETH\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useFallback\",\"type\":\"bool\"}],\"name\":\"getChainlinkPriceInUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chainlinkPriceInUSD\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollAmountsFromAMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"crvUsdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"contract IAggregatorV3\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"swapData\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_collToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_collToUsd\",\"type\":\"bool\"}],\"name\":\"getSwapPath\",\"outputs\":[{\"components\":[{\"internalType\":\"address[9]\",\"name\":\"route\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"swap_params\",\"type\":\"uint256[3][4]\"}],\"internalType\":\"struct CurveUsdSwapper.SwapRoutes\",\"name\":\"swapRoutes\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"gasUsed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dfsFeeDivider\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"useSteth\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_btcPrice\",\"type\":\"int256\"}],\"name\":\"getWBtcPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"wBtcPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_stEthPrice\",\"type\":\"int256\"}],\"name\":\"getWStEthPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"wStEthPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddr\",\"type\":\"address\"}],\"name\":\"isControllerValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[6]\",\"name\":\"_additionalRoutes\",\"type\":\"address[6]\"}],\"name\":\"setAdditionalRoutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBorrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CurveUsdSwapper", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}