{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Fed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Blockrock is IERC20, Ownable {       \\r\\n    string private constant _name = \\\"BlockRock\\\";\\r\\n    string private constant _symbol = \\\"FED\\\";\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 private constant _totalSupply = 10_000_000 * 10**_decimals;\\r\\n    address private _owner;\\r\\n\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) private _blocked;\\r\\n    mapping (address => bool) private isTaxExempt; \\r\\n\\r\\n    mapping (address => uint256) private _lastTradeBlock;\\r\\n    mapping (address => bool) private isContractExempt;\\r\\n    uint256 private tradeCooldown = 1;\\r\\n    \\r\\n    uint256 public constant maxWalletAmount = 100_000 * 10**_decimals;\\r\\n    uint256 private constant contractSwapLimit = 50_000 * 10**_decimals;\\r\\n    uint256 private constant contractSwapMax = 2_000_000 * 10**_decimals;\\r\\n\\r\\n    struct TradingFees{\\r\\n        uint256 buyTax;\\r\\n        uint256 sellTax;\\r\\n    }  \\r\\n\\r\\n    TradingFees public tradingFees = TradingFees(4,6);\\r\\n    uint256 public constant sniperTax = 50;\\r\\n\\r\\n    IUniswapV2Router private constant uniswapRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address private immutable ETH = uniswapRouter.WETH();\\r\\n    address private immutable uniswapPair;\\r\\n\\r\\n    address payable private immutable deployerAddress = payable(msg.sender);\\r\\n    address payable private constant devWallet = payable(0xd40ABA76d0983dEA3F289cBaD60577Dd12b438e1);\\r\\n    address payable private constant fundWallet = payable(0xDDe5275aB429B6741Dd6e28CadD49d9df31227Fa);\\r\\n\\r\\n    bool private tradingOpen = false;\\r\\n    bool private swapping = false;\\r\\n    bool private antiMEV = false;\\r\\n    uint256 private startingBlock;\\r\\n    uint private preLaunch;\\r\\n\\r\\n    modifier swapLock {\\r\\n        swapping = true;\\r\\n        _;\\r\\n        swapping = false;\\r\\n    }\\r\\n\\r\\n    modifier tradingLock() {\\r\\n        require(tradingOpen, \\\"Trading is not open yet.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), ETH);\\r\\n        isContractExempt[address(this)] = true;\\r\\n\\r\\n        uint256 deployerTokens = _totalSupply * 75 / 100;\\r\\n        uint256 devWalletTokens = _totalSupply - deployerTokens; \\r\\n\\r\\n        _balances[msg.sender] = deployerTokens;\\r\\n        emit Transfer(address(0), msg.sender, deployerTokens);\\r\\n\\r\\n        _balances[devWallet] = devWalletTokens;\\r\\n        emit Transfer(address(0), devWallet, devWalletTokens);\\r\\n\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public pure returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\r\\n        require(_allowances[sender][msg.sender] >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\r\\n        _transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) tradingLock() private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Token: transfer amount must be greater than zero\\\");\\r\\n\\r\\n        _balances[from] -= amount;\\r\\n\\r\\n        if (from != address(this) && from != devWallet && to != devWallet && to != deployerAddress) {\\r\\n            \\r\\n            if(antiMEV && !isContractExempt[from] && !isContractExempt[to]){\\r\\n                address human = ensureOneHuman(from, to);\\r\\n                ensureMaxTxFrequency(human);\\r\\n                _lastTradeBlock[human] = block.number;\\r\\n            }\\r\\n\\r\\n            if (from == uniswapPair && to != address(uniswapRouter)) {\\r\\n                require(balanceOf(to) + amount <= maxWalletAmount, \\\"Token: transfer implies violation of max wallet\\\");\\r\\n            }\\r\\n\\r\\n           uint256 contractTokenBalance = balanceOf(address(this));\\r\\n           if (shouldSwapback(from, contractTokenBalance)) \\r\\n               swapback(contractTokenBalance);                            \\r\\n\\r\\n           uint256 taxedTokens = takeFee(from, amount);\\r\\n           if(taxedTokens > 0){\\r\\n                amount -= taxedTokens;\\r\\n                _balances[address(this)] += taxedTokens;\\r\\n                emit Transfer(from, address(this), taxedTokens);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _balances[to] += amount;\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function swapback(uint256 tokenAmount) private swapLock {\\r\\n        tokenAmount = getSwapAmount(tokenAmount);\\r\\n        if(allowance(address(this), address(uniswapRouter)) < tokenAmount) {\\r\\n            _approve(address(this), address(uniswapRouter), _totalSupply);\\r\\n        }\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = ETH;\\r\\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n        uint256 contractETHBalance = address(this).balance;\\r\\n        if (contractETHBalance > 0) {\\r\\n            uint256 devShare = contractETHBalance * 25 / 100;\\r\\n            uint256 fundShare = contractETHBalance - devShare;\\r\\n\\r\\n            devWallet.transfer(devShare);\\r\\n            fundWallet.transfer(fundShare);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function shouldSwapback(address from, uint256 tokenAmount) private view returns (bool shouldSwap) {\\r\\n        shouldSwap = !swapping && from != uniswapPair && tokenAmount > contractSwapLimit && 1 + startingBlock <= block.number;\\r\\n    }\\r\\n\\r\\n    function getSwapAmount(uint256 tokenAmount) private pure returns (uint256 swapAmount) {\\r\\n        swapAmount = tokenAmount > contractSwapMax ? contractSwapMax : contractSwapLimit;\\r\\n    }\\r\\n\\r\\n    function takeFee(address from, uint256 amount) private view returns (uint256 feeAmount) {\\r\\n        if (isTaxExempt[from]) {\\r\\n            return 0; // No fee charged for tax-exempt addresses\\r\\n        }\\r\\n\\r\\n        // Continue with the existing fee calculation\\r\\n        if (_blocked[from] || block.number <= startingBlock) {\\r\\n            feeAmount = amount * sniperTax / 100;\\r\\n        } else {\\r\\n            feeAmount = amount * (from == uniswapPair ? tradingFees.buyTax : tradingFees.sellTax) / 100;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isContract(address account) private view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function ensureOneHuman(address _to, address _from) private view returns (address) {\\r\\n        require(!isContract(_to) || !isContract(_from));\\r\\n        if (isContract(_to)) return _from;\\r\\n        else return _to;\\r\\n    }\\r\\n\\r\\n    function setTaxExempt(address account, bool value) external onlyOwner {\\r\\n        isTaxExempt[account] = value;\\r\\n    }\\r\\n\\r\\n    function ensureMaxTxFrequency(address addr) view private {\\r\\n        bool isAllowed = _lastTradeBlock[addr] == 0 ||\\r\\n            ((_lastTradeBlock[addr] + tradeCooldown) < (block.number + 1));\\r\\n        require(isAllowed, \\\"Max tx frequency exceeded!\\\");\\r\\n    }\\r\\n\\r\\n    function toggleAntiMEV(bool toggle) external onlyOwner {\\r\\n        require(msg.sender == deployerAddress);\\r\\n        antiMEV = toggle;\\r\\n    }\\r\\n\\r\\n    function setTradeCooldown(uint256 newTradeCooldown) external onlyOwner {\\r\\n        require(msg.sender == deployerAddress);\\r\\n        require(newTradeCooldown > 0 && newTradeCooldown < 4, \\\"Token: only trade cooldown values in range (0,4) permissible\\\");\\r\\n        tradeCooldown = newTradeCooldown;\\r\\n    }\\r\\n\\r\\n    function manualSwapback(uint256 percent) external onlyOwner {\\r\\n        require(msg.sender == deployerAddress);\\r\\n        require(0 < percent && percent <= 100, \\\"Token: only percent values in range (0,100] permissible\\\");\\r\\n        uint256 tokensToSwap = percent * balanceOf(address(this)) / 100;\\r\\n        swapback(tokensToSwap);\\r\\n    }\\r\\n\\r\\n    function setFees(uint256 newBuyTax, uint256 newSellTax) external onlyOwner {\\r\\n        require(msg.sender == deployerAddress);\\r\\n        require(newBuyTax <= tradingFees.buyTax, \\\"Token: only fee reduction permitted\\\");\\r\\n        require(newSellTax <= tradingFees.sellTax, \\\"Token: only fee reduction permitted\\\");\\r\\n        tradingFees.buyTax = newBuyTax;\\r\\n        tradingFees.sellTax = newSellTax;\\r\\n    }\\r\\n\\r\\n    function setContractExempt(address account, bool value) external onlyOwner {\\r\\n        require(account != address(this));\\r\\n        isContractExempt[account] = value;\\r\\n    }\\r\\n\\r\\n    function setBots(address[] calldata bots, bool shouldBlock) external onlyOwner {\\r\\n        for (uint i = 0; i < bots.length; i++) {\\r\\n            require(bots[i] != uniswapPair && \\r\\n                    bots[i] != address(uniswapRouter) &&\\r\\n                    bots[i] != address(this));\\r\\n            _blocked[bots[i]] = shouldBlock;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initialize() external onlyOwner {\\r\\n        require(preLaunch++<2);\\r\\n    }\\r\\n\\r\\n    function modifyParameters(bool[] calldata param, uint256 nrBlocks) external onlyOwner {\\r\\n        assert(preLaunch<2&&preLaunch+1>=2); \\r\\n        preLaunch++;param;\\r\\n        startingBlock += nrBlocks;\\r\\n    }\\r\\n\\r\\n    function toggleTrading(bool _status) external onlyOwner {\\r\\n        tradingOpen = _status;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualSwapback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"param\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"nrBlocks\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"shouldBlock\",\"type\":\"bool\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setContractExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTradeCooldown\",\"type\":\"uint256\"}],\"name\":\"setTradeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sniperTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"toggleAntiMEV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"toggleTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Blockrock", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}