{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract yHaaSProxy {\r\n    address public owner;\r\n    address public governance;\r\n\r\n    mapping(address => bool) public keepers;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function harvestStrategy(address _strategyAddress) public onlyKeepers {\r\n        StrategyAPI strategy = StrategyAPI(_strategyAddress);\r\n        strategy.report();\r\n    }\r\n\r\n    function tendStrategy(address _strategyAddress) public onlyKeepers {\r\n        StrategyAPI strategy = StrategyAPI(_strategyAddress);\r\n        strategy.tend();\r\n    }\r\n\r\n    function updateVaultDebt(address _debtAllocatorAddress, address _strategy, uint256 _targetDebt) public onlyKeepers {\r\n        DebtAllocatorAPI debtAllocator = DebtAllocatorAPI(_debtAllocatorAddress);\r\n        debtAllocator.update_debt(_strategy, _targetDebt);\r\n    }\r\n\r\n    function forwardCall(address debtAllocatorAddress, bytes memory data) public onlyKeepers returns (bool success) {\r\n        (success, ) = debtAllocatorAddress.call(data);\r\n    }\r\n\r\n    function setKeeper(address _address, bool _allowed) external virtual onlyAuthorized {\r\n        keepers[_address] = _allowed;\r\n    }\r\n\r\n    /**\r\n    @notice Changes the `owner` address.\r\n    @param _owner The new address to assign as `owner`.\r\n    */\r\n    function setOwner(address _owner) external onlyAuthorized {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    @notice Changes the `governance` address.\r\n    @param _governance The new address to assign as `governance`.\r\n    */\r\n    function setGovernance(address _governance) external onlyGovernance {\r\n        require(_governance != address(0));\r\n        governance = _governance;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(msg.sender == owner || keepers[msg.sender] == true || msg.sender == governance, \"!keeper yHaaSProxy\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == owner || msg.sender == governance, \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n} \r\n\r\ninterface StrategyAPI {\r\n    function tend() external;\r\n    function report() external returns (uint256 _profit, uint256 _loss);\r\n    function keeper() external view returns (address);\r\n}\r\n\r\ninterface DebtAllocatorAPI {\r\n    function update_debt(address _strategy, uint256 _targetDebt) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"debtAllocatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forwardCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddress\",\"type\":\"address\"}],\"name\":\"tendStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtAllocatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetDebt\",\"type\":\"uint256\"}],\"name\":\"updateVaultDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "yHaaSProxy", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a1f61eaeb432f05f049510005ff73e1d2175b19add378de0ff39fda9ee4d3480"}