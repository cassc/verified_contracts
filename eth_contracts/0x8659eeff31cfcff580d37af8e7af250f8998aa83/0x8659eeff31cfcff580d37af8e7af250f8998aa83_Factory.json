{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: 2024 Kiln <contact@kiln.fi>\\n//\\n// \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n//\\npragma solidity 0.8.22;\\n\\nimport {Ownable, Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {Splitter} from \\\"./Splitter.sol\\\";\\nimport {Operator} from \\\"./Operator.sol\\\";\\n\\n/// @title Factory\\n/// @notice Helper contract in charge of creating new Operator and Splitter contracts\\ncontract Factory is Ownable2Step {\\n    /// @notice The implementation of the Splitter contract\\n    /// @dev Used with the Clones library to create new Splitter instances\\n    Splitter public immutable IMPLEMENTATION;\\n\\n    /// @notice The list of Operator contracts\\n    mapping(address => bool) public isOperator;\\n\\n    /// @notice Emitted when a new Splitter is created\\n    /// @param splitter The new Splitter contract\\n    /// @param operator The Operator contract that will receive a portion of the funds\\n    /// @param owner The owner of the contract\\n    /// @param salt The salt used to create the deterministic address\\n    event NewSplitter(Splitter splitter, Operator operator, address owner, bytes32 salt);\\n\\n    /// @notice Emitted when a new Operator is created\\n    /// @param operator The new Operator contract\\n    /// @param owner The owner of the contract\\n    /// @param operatorFee The fee that is taken on each Splitter\\n    /// @param recipients The list of recipients\\n    /// @param percents The list of percentages for each recipient\\n    event NewOperator(Operator operator, address owner, uint256 operatorFee, address[] recipients, uint256[] percents);\\n\\n    /// @notice Emitted when the provided operator address is invalid\\n    error InvalidOperatorAddress();\\n\\n    /// @notice Emitted when a subcall reverts\\n    /// @param revertData The revert data\\n    error SubCallRevert(bytes revertData);\\n\\n    /// @notice Emitted when the provided implementation address is invalid\\n    error InvalidImplementationAddress();\\n\\n    /// @param _owner The owner of the contract\\n    /// @param implementation The implementation of the Splitter contract\\n    constructor(address _owner, Splitter implementation) Ownable(_owner) {\\n        if (address(implementation) == address(0) || address(implementation).code.length == 0) {\\n            revert InvalidImplementationAddress();\\n        }\\n        IMPLEMENTATION = implementation;\\n    }\\n\\n    /// @notice Creates a new Operator contract\\n    /// @param _owner The owner of the contract\\n    /// @param _name The name of the Operator\\n    /// @param _operatorFee The fee that is taken on each Splitter\\n    /// @param _maximumOperatorFee The maximum fee that can be configured on the Operator\\n    /// @param _recipients The list of recipients, sorted in ascending order without duplicates\\n    /// @param _percents The list of percentages for each recipient\\n    function createOperator(\\n        address _owner,\\n        string calldata _name,\\n        uint256 _operatorFee,\\n        uint256 _maximumOperatorFee,\\n        address[] calldata _recipients,\\n        uint256[] calldata _percents\\n    ) external onlyOwner returns (Operator newOperator) {\\n        newOperator = new Operator(_owner, _name, _operatorFee, _maximumOperatorFee, _recipients, _percents);\\n        isOperator[address(newOperator)] = true;\\n        emit NewOperator(newOperator, _owner, _operatorFee, _recipients, _percents);\\n    }\\n\\n    /// @notice Creates a new Splitter contract\\n    /// @param operator The Operator contract that will receive a portion of the funds\\n    /// @param salt The salt used to create the deterministic address\\n    /// @return The new Splitter contract\\n    function createSplitter(Operator operator, bytes32 salt) external returns (Splitter) {\\n        return _createSplitter(operator, salt);\\n    }\\n\\n    /// @notice Creates a new Splitter contract and calls an address with the provided data and value\\n    /// @param operator The Operator contract that will receive a portion of the funds\\n    /// @param salt The salt used to create the deterministic address\\n    /// @param callAddress The address to call\\n    /// @param data The calldata to send\\n    /// @return newSplitter The new Splitter contract\\n    function createSplitterAndCall(Operator operator, bytes32 salt, address callAddress, bytes calldata data)\\n        external\\n        payable\\n        returns (Splitter newSplitter)\\n    {\\n        newSplitter = _createSplitter(operator, salt);\\n        (bool success, bytes memory rdata) = callAddress.call{value: msg.value}(data);\\n        if (!success) {\\n            revert SubCallRevert(rdata);\\n        }\\n    }\\n\\n    /// @notice Predicts the address of a new Splitter contract\\n    /// @param operator The Operator contract that will receive a portion of the funds\\n    /// @param owner The owner of the contract\\n    /// @return The Splitter contract address for the given parameters\\n    function predictSplitter(Operator operator, address owner, bytes32 salt) external view returns (address) {\\n        return Clones.predictDeterministicAddress(\\n            address(IMPLEMENTATION), keccak256(abi.encodePacked(operator, owner, salt))\\n        );\\n    }\\n\\n    /// @notice Internal utility function to create a new Splitter contract\\n    /// @param operator The Operator contract that will receive a portion of the funds\\n    /// @param salt The salt used to create the deterministic address\\n    /// @return newSplitter The new Splitter contract\\n    function _createSplitter(Operator operator, bytes32 salt) internal returns (Splitter newSplitter) {\\n        if (!isOperator[address(operator)]) {\\n            revert InvalidOperatorAddress();\\n        }\\n        newSplitter = Splitter(\\n            payable(\\n                Clones.cloneDeterministic(\\n                    address(IMPLEMENTATION), keccak256(abi.encodePacked(operator, msg.sender, salt))\\n                )\\n            )\\n        );\\n        newSplitter.init(operator, msg.sender);\\n        emit NewSplitter(newSplitter, operator, msg.sender, salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Splitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: 2024 Kiln <contact@kiln.fi>\\n//\\n// \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n//\\npragma solidity 0.8.22;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Operator} from \\\"./Operator.sol\\\";\\n\\n/// @title Splitter\\n/// @notice The Splitter contract is used to directly split any funds it receives between its owner and linked Operator\\ncontract Splitter {\\n    /// @notice The Operator contract that will receive a portion of the funds\\n    Operator public operator;\\n\\n    /// @notice The owner of the contract\\n    address public owner;\\n\\n    /// @notice The maximum value for a percentage in bps\\n    uint256 internal constant MAX_BPS = 10000;\\n\\n    /// @notice Emitted when the contract is configured\\n    /// @param operator The Operator contract that will receive a portion of the funds\\n    /// @param owner The owner of the contract\\n    event Configured(address indexed operator, address indexed owner);\\n\\n    /// @notice Emitted when the received funds are split\\n    /// @param operator The operator of the contract\\n    /// @param recipient The recipient of the funds\\n    /// @param operatorAmount The amount of funds that were sent to the operator\\n    /// @param recipientAmount The amount of funds that were sent to the recipient\\n    event Split(address indexed operator, address indexed recipient, uint256 operatorAmount, uint256 recipientAmount);\\n\\n    /// @notice Emitted when the transfer to the owner fails and we explicitly do not revert\\n    /// @param errorData The error data returned by the transfer\\n    event OwnerTransferFailureCaught(bytes errorData);\\n\\n    /// @notice Thrown when the contract is already initialized\\n    error AlreadyInitialized();\\n\\n    /// @notice Thrown when the sender is not the owner\\n    /// @param sender The sender of the transaction\\n    error Unauthorized(address sender);\\n\\n    /// @notice Thrown when the transfer to the owner fails\\n    /// @param recipient The recipient of the transfer\\n    /// @param errorData The error data returned by the transfer\\n    error OwnerTransferFailed(address recipient, bytes errorData);\\n\\n    /// @notice Thrown when the transfer to the operator fails\\n    /// @param errorData The error data returned by the transfer\\n    error OperatorTransferFailed(bytes errorData);\\n\\n    /// @notice Thrown when the provided address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice Thrown when the provided operator address is not a contract\\n    error InvalidOperatorAddress();\\n\\n    /// @notice Thrown when the initialization is performed more than once\\n    modifier uninitialized() {\\n        if (address(operator) != address(0) || address(owner) != address(0)) {\\n            revert AlreadyInitialized();\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        operator = Operator(payable(address(uint160(uint256(bytes32(\\\"implem initialized\\\"))))));\\n    }\\n\\n    /// @notice The receive function is used to receive ETH\\n    receive() external payable {\\n        _split(owner, false);\\n    }\\n\\n    /// @notice The fallback function is used to receive ETH when there is additional calldata\\n    fallback() external payable {\\n        _split(owner, false);\\n    }\\n\\n    /// @notice Initializes the contract\\n    /// @param _operator The Operator contract that will receive a portion of the funds\\n    /// @param _owner The owner of the contract\\n    function init(Operator _operator, address _owner) external uninitialized {\\n        if (address(_operator) == address(0) || address(_owner) == address(0)) {\\n            revert InvalidZeroAddress();\\n        }\\n        if (address(_operator).code.length == 0) {\\n            revert InvalidOperatorAddress();\\n        }\\n        operator = _operator;\\n        owner = _owner;\\n        emit Configured(address(_operator), _owner);\\n    }\\n\\n    /// @notice Claims the funds from the contract\\n    function claim() external {\\n        _split(owner, true);\\n    }\\n\\n    /// @notice Claims the funds from the contract and sends them to the provided recipient\\n    /// @param recipient The recipient of the funds\\n    function claim(address recipient) external {\\n        if (msg.sender != owner) {\\n            revert Unauthorized(msg.sender);\\n        }\\n        _split(recipient, true);\\n    }\\n\\n    /// @notice Claims the funds from the contract and sends them to the provided recipients\\n    /// @param recipient The recipient that receives the funds for the owner\\n    function _split(address recipient, bool revertOnTransferFail) internal {\\n        uint256 balance = address(this).balance;\\n        if (balance == 0) {\\n            return;\\n        }\\n        uint256 operatorFee = operator.operatorFee();\\n        uint256 operatorAmount = operatorFee > 0 ? Math.mulDiv(balance, operatorFee, MAX_BPS) : 0;\\n        uint256 ownerAmount = balance - operatorAmount;\\n        (bool success, bytes memory rdata) = recipient.call{value: ownerAmount}(\\\"\\\");\\n        if (!success) {\\n            if (revertOnTransferFail) {\\n                revert OwnerTransferFailed(recipient, rdata);\\n            } else {\\n                emit OwnerTransferFailureCaught(rdata);\\n                return;\\n            }\\n        }\\n        (success, rdata) = address(operator).call{value: operatorAmount}(\\\"\\\");\\n        if (!success) {\\n            revert OperatorTransferFailed(rdata);\\n        }\\n        emit Split(address(operator), recipient, operatorAmount, ownerAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Operator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: 2024 Kiln <contact@kiln.fi>\\n//\\n// \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\n// \u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\n// \u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\n// \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\n//\\npragma solidity 0.8.22;\\n\\nimport {Ownable, Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @title Operator\\n/// @notice The Operator contract is used to store a commission distribution scheme for one or several Splitter instances\\n/// @notice It stores a list of recipients alongside their respective percentages, and a fee that is taken on each Splitter\\n/// @notice It then handles the dispatching of the commission between the configured recipient\\ncontract Operator is Ownable2Step {\\n    /// @notice The fee that is taken on each Splitter\\n    uint256 public operatorFee;\\n\\n    /// @notice The maximum fee that can be configured on the Operator\\n    // solhint-disable-next-line immutable-vars-naming\\n    uint256 public immutable maximumOperatorFee;\\n\\n    /// @notice The list of recipients\\n    address[] public recipients;\\n\\n    /// @notice The list of percentages for each recipient\\n    uint256[] public percents;\\n\\n    /// @notice The name of the operator\\n    string public name;\\n\\n    /// @notice The maximum value for a percentage in bps\\n    uint256 internal constant MAX_BPS = 10000;\\n\\n    /// @notice Emitted when the recipients are updated\\n    /// @param recipients The new list of recipients\\n    /// @param percentsBps The new list of percentages\\n    event UpdatedRecipients(address[] recipients, uint256[] percentsBps);\\n\\n    /// @notice Emitted when the operator fee is updated\\n    /// @param operatorFee The new operator fee\\n    event UpdatedOperatorFee(uint256 operatorFee);\\n\\n    /// @notice Emitted when the operator name is updated\\n    /// @param name The new operator name\\n    event UpdatedOperatorName(string name);\\n\\n    /// @notice Emitted when the maximum operator fee is updated\\n    /// @param maximumOperatorFee The new maximum operator fee\\n    event UpdatedMaximumOperatorFee(uint256 maximumOperatorFee);\\n\\n    /// @notice Emitted when the commission is claimed\\n    /// @param amount The amount that was claimed\\n    event Claimed(uint256 amount);\\n\\n    /// @notice Thrown when the provided recipient list is empty\\n    error NoRecipients();\\n\\n    /// @notice Thrown when the provided recipient is null\\n    error ZeroAddress();\\n\\n    /// @notice Thrown when the provided percent value is zero\\n    error ZeroPercentBps();\\n\\n    /// @notice Thrown when the transfer to a recipient fails\\n    /// @param recipient The recipient that failed to receive the funds\\n    /// @param errorData The error data returned by the transfer\\n    error RecipientTransferFailed(address recipient, bytes errorData);\\n\\n    /// @notice Thrown when the provided recipient list is empty\\n    error EmptyRecipientArguments();\\n\\n    /// @notice Thrown when the provided recipient list and percentage list have different lengths\\n    error InvalidArgumentLengths();\\n\\n    /// @notice Thrown when the provided percentages do not sum up to 10000\\n    error InvalidPercentSum();\\n\\n    /// @notice Thrown when the provided fee is invalid\\n    /// @param feeBps The provided fee\\n    error InvalidFeeBps(uint256 feeBps);\\n\\n    /// @notice Thrown when the provided name is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice Thrown when the provided recipients are not sorted\\n    error InvalidUnsortedRecipients();\\n\\n    /// @param _owner The owner of the contract\\n    /// @param _operatorFee The fee that is taken on each Splitter\\n    /// @param _recipients The list of recipients, sorted in ascending order without duplicates\\n    /// @param _percents The list of percentages for each recipient\\n    constructor(\\n        address _owner,\\n        string memory _name,\\n        uint256 _operatorFee,\\n        uint256 _maximumOperatorFee,\\n        address[] memory _recipients,\\n        uint256[] memory _percents\\n    ) Ownable(_owner) {\\n        if (_maximumOperatorFee > MAX_BPS) {\\n            revert InvalidFeeBps(_maximumOperatorFee);\\n        }\\n        maximumOperatorFee = _maximumOperatorFee;\\n        emit UpdatedMaximumOperatorFee(_maximumOperatorFee);\\n\\n        _setOperatorFee(_operatorFee);\\n        _setRecipients(_recipients, _percents);\\n        _setName(_name);\\n    }\\n\\n    /// @notice The receive function is used to receive ETH\\n    receive() external payable {\\n        // do nothing\\n    }\\n\\n    /// @notice The fallback function is used to receive ETH when there is additional calldata\\n    fallback() external payable {\\n        // do nothing\\n    }\\n\\n    /// @notice Changes the operator fee\\n    /// @param _operatorFee The new operator fee\\n    function setOperatorFee(uint256 _operatorFee) external onlyOwner {\\n        _setOperatorFee(_operatorFee);\\n    }\\n\\n    /// @notice Changes the recipients and their respective percentages\\n    /// @param _recipients The new list of recipients, sorted in ascending order without duplicates\\n    /// @param _percents The new list of percentages\\n    function setRecipients(address[] calldata _recipients, uint256[] calldata _percents) external onlyOwner {\\n        _setRecipients(_recipients, _percents);\\n    }\\n\\n    /// @notice Changes the operator name\\n    /// @param _name The new operator name\\n    function setName(string calldata _name) external onlyOwner {\\n        _setName(_name);\\n    }\\n\\n    /// @notice Claims the commission for all the recipients\\n    function claim() external {\\n        uint256 balance = address(this).balance;\\n        uint256 totalSent = 0;\\n        for (uint256 i = 0; i < recipients.length - 1;) {\\n            uint256 value = Math.mulDiv(balance, percents[i], MAX_BPS);\\n            (bool success, bytes memory rdata) = recipients[i].call{value: value}(\\\"\\\");\\n            if (!success) {\\n                revert RecipientTransferFailed(recipients[i], rdata);\\n            }\\n            totalSent += value;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        {\\n            (bool success, bytes memory rdata) = recipients[recipients.length - 1].call{value: balance - totalSent}(\\\"\\\");\\n            if (!success) {\\n                revert RecipientTransferFailed(recipients[recipients.length - 1], rdata);\\n            }\\n        }\\n        emit Claimed(balance);\\n    }\\n\\n    /// @notice Internal utility function to set the operator fee\\n    /// @param _operatorFee The new operator fee\\n    function _setOperatorFee(uint256 _operatorFee) internal {\\n        if (_operatorFee > maximumOperatorFee) {\\n            revert InvalidFeeBps(_operatorFee);\\n        }\\n        operatorFee = _operatorFee;\\n        emit UpdatedOperatorFee(_operatorFee);\\n    }\\n\\n    /// @notice Internal utility function to set the recipients and their respective percentages\\n    /// @param _recipients The new list of recipients, sorted in ascending order without duplicates\\n    /// @param _percentsBps The new list of percentages\\n    function _setRecipients(address[] memory _recipients, uint256[] memory _percentsBps) internal {\\n        uint256 recipientsLength = _recipients.length;\\n        if (recipientsLength == 0) {\\n            revert EmptyRecipientArguments();\\n        }\\n        if (recipientsLength != _percentsBps.length) {\\n            revert InvalidArgumentLengths();\\n        }\\n        uint256 totalPercentsBps = 0;\\n        for (uint256 i = 0; i < recipientsLength; ++i) {\\n            totalPercentsBps += _percentsBps[i];\\n            if (i > 0 && uint160(_recipients[i]) <= uint160(_recipients[i - 1])) {\\n                revert InvalidUnsortedRecipients();\\n            }\\n            if (_recipients[i] == address(0)) {\\n                revert ZeroAddress();\\n            }\\n            if (_percentsBps[i] == 0) {\\n                revert ZeroPercentBps();\\n            }\\n        }\\n        if (totalPercentsBps != MAX_BPS) {\\n            revert InvalidPercentSum();\\n        }\\n        recipients = _recipients;\\n        percents = _percentsBps;\\n        emit UpdatedRecipients(_recipients, _percentsBps);\\n    }\\n\\n    /// @notice Internal utility function to set the operator name\\n    /// @param _name The new operator name\\n    function _setName(string memory _name) internal {\\n        if (bytes(_name).length == 0) {\\n            revert InvalidEmptyString();\\n        }\\n        name = _name;\\n        emit UpdatedOperatorName(_name);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"vulcan/=lib/vulcan/src/\",\r\n      \"deploy.sol/=lib/deploy.sol/src/\",\r\n      \"solmate/=lib/deploy.sol/lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract Splitter\",\"name\":\"implementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementationAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperatorAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"revertData\",\"type\":\"bytes\"}],\"name\":\"SubCallRevert\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Operator\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"}],\"name\":\"NewOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Splitter\",\"name\":\"splitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract Operator\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"NewSplitter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IMPLEMENTATION\",\"outputs\":[{\"internalType\":\"contract Splitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_operatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumOperatorFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percents\",\"type\":\"uint256[]\"}],\"name\":\"createOperator\",\"outputs\":[{\"internalType\":\"contract Operator\",\"name\":\"newOperator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Operator\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createSplitter\",\"outputs\":[{\"internalType\":\"contract Splitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Operator\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createSplitterAndCall\",\"outputs\":[{\"internalType\":\"contract Splitter\",\"name\":\"newSplitter\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Operator\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Factory", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000060cfac5cd4aeed165023a81f57a0bc92d7cfeb6e0000000000000000000000002f0bb99ffc519a37c3ba3d128e51b29a70c64e84", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}