{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MigrationZapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IStaking} from \\\"./interfaces/IStaking.sol\\\";\\nimport {IMigrator} from \\\"./interfaces/IMigrator.sol\\\";\\nimport {IMintableERC20} from \\\"./interfaces/IMintableERC20.sol\\\";\\n\\ncontract MigrationZapper {\\n    IMintableERC20 public immutable ogv;\\n    IMintableERC20 public immutable ogn;\\n\\n    IMigrator public immutable migrator;\\n    IStaking public immutable ognStaking;\\n\\n    address public immutable governor;\\n\\n    error NotGovernor();\\n\\n    constructor(address _ogv, address _ogn, address _migrator, address _ognStaking, address _governor) {\\n        ogv = IMintableERC20(_ogv);\\n        ogn = IMintableERC20(_ogn);\\n        migrator = IMigrator(_migrator);\\n        ognStaking = IStaking(_ognStaking);\\n\\n        governor = _governor;\\n    }\\n\\n    function initialize() external {\\n        // Migrator can move OGV and OGN from this contract\\n        ogv.approve(address(migrator), type(uint256).max);\\n        ogn.approve(address(ognStaking), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Migrates the specified amount of OGV to OGN.\\n     * @param ogvAmount Amount of OGV to migrate\\n     */\\n    function migrate(uint256 ogvAmount) external {\\n        // Take tokens in\\n        ogv.transferFrom(msg.sender, address(this), ogvAmount);\\n\\n        // Proxy migrate call\\n        uint256 ognReceived = migrator.migrate(ogvAmount);\\n\\n        // Transfer OGN to the receiver\\n        ogn.transfer(msg.sender, ognReceived);\\n    }\\n\\n    /**\\n     * @notice Migrates the specified amount of OGV to OGN\\n     *         and stakes it.\\n     * @param ogvAmount Amount of OGV to migrate\\n     */\\n    function migrate(uint256 ogvAmount, uint256 newStakeAmount, uint256 newStakeDuration) external {\\n        // Take tokens in\\n        ogv.transferFrom(msg.sender, address(this), ogvAmount);\\n\\n        // Migrate\\n        uint256 ognReceived = migrator.migrate(ogvAmount);\\n\\n        // Stake on behalf of user\\n        ognStaking.stake(\\n            newStakeAmount,\\n            newStakeDuration,\\n            msg.sender,\\n            false,\\n            -1 // New stake\\n        );\\n\\n        // Transfer remaining OGN to the receiver\\n        if (ognReceived > newStakeAmount) {\\n            ogn.transfer(msg.sender, ognReceived - newStakeAmount);\\n        }\\n    }\\n\\n    /**\\n     * Transfers any tokens sent by mistake out of the contract\\n     * @param token Token address\\n     * @param amount Amount of token to transfer\\n     */\\n    function transferTokens(address token, uint256 amount) external {\\n        if (msg.sender != governor) {\\n            revert NotGovernor();\\n        }\\n\\n        IMintableERC20(token).transfer(governor, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IStaking {\\n    function delegates(address staker) external view returns (address);\\n\\n    // From OGVStaking.sol\\n    function unstakeFrom(address staker, uint256[] memory lockupIds) external returns (uint256, uint256);\\n\\n    // From ExponentialStaking.sol\\n    function stake(uint256 amountIn, uint256 duration, address to, bool stakeRewards, int256 lockupId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMigrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IMigrator {\\n    function migrate(uint256 ogvAmount) external returns (uint256);\\n\\n    function migrate(\\n        uint256[] calldata lockupIds,\\n        uint256 ogvAmountFromWallet,\\n        uint256 ognAmountFromWallet,\\n        bool migrateRewards,\\n        uint256 newStakeAmount,\\n        uint256 newStakeDuration\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.10;\\n\\ninterface IMintableERC20 {\\n    function mint(address to, uint256 amount) external;\\n    function balanceOf(address owner) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address _from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 allowance) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"contracts/=contracts/\",\r\n      \"script/=script/\",\r\n      \"tests/=tests/\",\r\n      \"utils/=contracts/utils/\",\r\n      \"OpenZeppelin/openzeppelin-contracts@02fcc75bb7f35376c22def91b0fb9bc7a50b9458/=lib/openzeppelin-contracts/\",\r\n      \"OpenZeppelin/openzeppelin-contracts-upgradeable@a16f26a063cd018c4c986832c3df332a131f53b9/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"OpenZeppelin/openzeppelin-contracts@4.6.0/=lib/openzeppelin-contracts/\",\r\n      \"OpenZeppelin/openzeppelin-contracts-upgradeable@4.6.0/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"paulrberg/prb-math@2.5.0/=lib/prb-math/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"prb-math/=lib/prb-math/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {\r\n      \"contracts/utils/VmHelper.sol\": {\r\n        \"VmHelper\": \"0x183c9273BBE483bcF1bd72639fB24d2DB539DE17\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ogv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ogn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ognStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ogvAmount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ogvAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakeDuration\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogn\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ognStaking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogv\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MigrationZapper", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009c354503c38481a7a7a51629142963f98ecc12d00000000000000000000000008207c1ffc5b6804f6024322ccf34f29c3541ae2600000000000000000000000095c347d6214614a780847b8aaf4f96eb84f4da6d00000000000000000000000063898b3b6ef3d39332082178656e9862bee45c5700000000000000000000000035918cde7233f2dd33fa41ae3cb6ae0e42e0e69f", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}