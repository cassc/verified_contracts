{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Auth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nimport {CommonErrors} from \\\"./Errors.sol\\\";\\n\\n/// @title Auth\\ncontract Auth {\\n    /// @dev Emitted when the Golem Foundation multisig address is set.\\n    /// @param oldValue The old Golem Foundation multisig address.\\n    /// @param newValue The new Golem Foundation multisig address.\\n    event MultisigSet(address oldValue, address newValue);\\n\\n    /// @dev Emitted when ownership transfer is initiated.\\n    /// @param previousOwner Old multisig, one that initiated the process.\\n    /// @param newOwner New multisig, one that should finalize the process.\\n    event OwnershipTransferStarted(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @dev The multisig address.\\n    address public multisig;\\n\\n    /// @dev Pending multisig address.\\n    address public pendingOwner;\\n\\n    /// @param _multisig The initial Golem Foundation multisig address.\\n    constructor(address _multisig) {\\n        require(_multisig != address(0), CommonErrors.INVALID_ARGUMENT);\\n        multisig = _multisig;\\n        emit MultisigSet(address(0), multisig);\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0));\\n        require(msg.sender == multisig, CommonErrors.UNAUTHORIZED_CALLER);\\n        pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(multisig, newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        require(msg.sender == pendingOwner, CommonErrors.UNAUTHORIZED_CALLER);\\n        emit MultisigSet(multisig, pendingOwner);\\n        multisig = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.18;\\n\\nlibrary DepositsErrors {\\n    /// @notice Thrown when transfer operation fails in GLM smart contract.\\n    /// @return HN:Deposits/cannot-transfer-from-sender\\n    string public constant GLM_TRANSFER_FAILED =\\n        \\\"HN:Deposits/cannot-transfer-from-sender\\\";\\n\\n    /// @notice Thrown when trying to withdraw more GLMs than are in deposit.\\n    /// @return HN:Deposits/deposit-is-smaller\\n    string public constant DEPOSIT_IS_TO_SMALL =\\n        \\\"HN:Deposits/deposit-is-smaller\\\";\\n}\\n\\nlibrary EpochsErrors {\\n    /// @notice Thrown when calling the contract before the first epoch started.\\n    /// @return HN:Epochs/not-started-yet\\n    string public constant NOT_STARTED = \\\"HN:Epochs/not-started-yet\\\";\\n\\n    /// @notice Thrown when getFinalizedEpoch function is called before any epoch has been finalized.\\n    /// @return HN:Epochs/not-finalized\\n    string public constant NOT_FINALIZED = \\\"HN:Epochs/not-finalized\\\";\\n\\n    /// @notice Thrown when getPendingEpoch function is called during closed decision window.\\n    /// @return HN:Epochs/not-pending\\n    string public constant NOT_PENDING = \\\"HN:Epochs/not-pending\\\";\\n\\n    /// @notice Thrown when updating epoch props to invalid values (decision window bigger than epoch duration.\\n    /// @return HN:Epochs/decision-window-bigger-than-duration\\n    string public constant DECISION_WINDOW_TOO_BIG =\\n        \\\"HN:Epochs/decision-window-bigger-than-duration\\\";\\n}\\n\\nlibrary ProposalsErrors {\\n    /// @notice Thrown when trying to change proposals that could already have been voted upon.\\n    /// @return HN:Proposals/only-future-proposals-changing-is-allowed\\n    string public constant CHANGING_PROPOSALS_IN_THE_PAST =\\n        \\\"HN:Proposals/only-future-proposals-changing-is-allowed\\\";\\n\\n    /// @notice Thrown when setting epochs multiple times.\\n    /// @return HN:Proposals/cannot-set-epochs-twice\\n    string public constant CANNOT_SET_EPOCHS_TWICE =\\n        \\\"HN:Proposals/cannot-set-epochs-twice\\\";\\n\\n    /// @notice Thrown when setting proposal with zero address.\\n    /// @return HN:Proposals/invalid-proposal\\n    string public constant INVALID_PROPOSAL = \\\"HN:Proposals/invalid-proposal\\\";\\n}\\n\\nlibrary VaultErrors {\\n    /// @notice Thrown when trying to set merkle root for an epoch multiple times.\\n    /// @return HN:Vault/merkle-root-already-set\\n    string public constant MERKLE_ROOT_ALREADY_SET =\\n        \\\"HN:Vault/merkle-root-already-set\\\";\\n\\n    /// @notice Thrown when trying to set invalid merkle root.\\n    /// @return HN:Vault/invalid-merkle-root\\n    string public constant INVALID_MERKLE_ROOT = \\\"HN:Vault/invalid-merkle-root\\\";\\n\\n    /// @notice Thrown when trying to withdraw without providing valid merkle proof.\\n    /// @return HN:Vault/invalid-merkle-proof\\n    string public constant INVALID_MERKLE_PROOF =\\n        \\\"HN:Vault/invalid-merkle-proof\\\";\\n\\n    /// @notice Thrown when trying to withdraw multiple times.\\n    /// @return HN:Vault/already-claimed\\n    string public constant ALREADY_CLAIMED = \\\"HN:Vault/already-claimed\\\";\\n\\n    /// @notice Thrown when trying to send empty payload list.\\n    /// @return HN:Vault/empty-payloads\\n    string public constant EMPTY_PAYLOADS = \\\"HN:Vault/empty-payloads\\\";\\n}\\n\\nlibrary CommonErrors {\\n    /// @notice Thrown when trying to call as an unauthorized account.\\n    /// @return HN:Common/unauthorized-caller\\n    string public constant UNAUTHORIZED_CALLER =\\n        \\\"HN:Common/unauthorized-caller\\\";\\n\\n    /// @notice Thrown when failed to send eth.\\n    /// @return HN:Common/failed-to-send\\n    string public constant FAILED_TO_SEND = \\\"HN:Common/failed-to-send\\\";\\n\\n    /// @notice Thrown when invalid argument provided.\\n    /// @return HN:Common/invalid-argument\\n    string public constant INVALID_ARGUMENT = \\\"HN:Common/invalid-argument\\\";\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"MultisigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Auth", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a40fcb633d0a6c0d27aa9367047635ff656229b0", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}