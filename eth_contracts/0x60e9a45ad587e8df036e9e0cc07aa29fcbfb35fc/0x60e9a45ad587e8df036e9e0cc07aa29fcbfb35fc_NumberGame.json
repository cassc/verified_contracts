{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"numbergame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n\\r\\nTelegram - https://t.me/the_number_game \\r\\nTwitter - https://twitter.com/numberscoin\\r\\nWebsite - https://numberscoin.info\\r\\n\\r\\n    _______ _            _   _                 _                  _____                      \\r\\n   |__   __| |          | \\\\ | |               | |                / ____|                     \\r\\n      | |  | |__   ___  |  \\\\| |_   _ _ __ ___ | |__   ___ _ __  | |  __  __ _ _ __ ___   ___ \\r\\n      | |  | '_ \\\\ / _ \\\\ | . ` | | | | '_ ` _ \\\\| '_ \\\\ / _ \\\\ '__| | | |_ |/ _` | '_ ` _ \\\\ / _ \\\\\\r\\n      | |  | | | |  __/ | |\\\\  | |_| | | | | | | |_) |  __/ |    | |__| | (_| | | | | | |  __/\\r\\n      |_|  |_| |_|\\\\___| |_| \\\\_|\\\\__,_|_| |_| |_|_.__/ \\\\___|_|     \\\\_____|\\\\__,_|_| |_| |_|\\\\___|\\r\\n\\r\\nWelcome to The Number Game. Here are the rules:\\r\\n\\r\\n\u25b6 There are 10 levels. Each level gets 10x harder to guess the number correctly than the last.\\r\\n  For example, on level 1 the chances of guessing correctly are 1/10.\\r\\n  On level 2 the chances of guessing correctly are 1/100.\\r\\n  On level 3 the chances of guessing correctly are 1/1000.\\r\\n  And so on...\\r\\n\\r\\n\u25b6 Anyone can guess a number using the guessNumber() function. \\r\\n  Each player's guesses are unique to their public address, so MEV is not an issue.\\r\\n\\r\\n\u25b6 If a player guesses the number correctly, the player will be able to successfully claim 1% of the total supply of tokens.\\r\\n  The game will then proceed to the next level each time a prize is claimed until the game is over after level 10.\\r\\n\\r\\n\u25b6 Finally, in order to claim the prize a player must own at least 0.1% of the total supply.\\r\\n\\r\\nGood luck!\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Library for converting numbers into strings and other string operations.\\r\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\r\\nlibrary LibString {\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                        CUSTOM ERRORS                       */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev The `length` of the output is too small to contain all the hex digits.\\r\\n    error HexLengthInsufficient();\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                         CONSTANTS                          */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev The constant returned when the `search` is not found in the string.\\r\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                     DECIMAL OPERATIONS                     */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the base 10 decimal representation of `value`.\\r\\n    function toString(uint256 value) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\r\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\r\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\r\\n            // and 3 words for a maximum of 78 digits.\\r\\n            str := add(mload(0x40), 0x80)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, add(str, 0x20))\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := str\\r\\n\\r\\n            let w := not(0) // Tsk.\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for { let temp := value } 1 {} {\\r\\n                str := add(str, w) // `sub(str, 1)`.\\r\\n                // Write the character to the pointer.\\r\\n                // The ASCII index of the '0' character is 48.\\r\\n                mstore8(str, add(48, mod(temp, 10)))\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n            let length := sub(end, str)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            str := sub(str, 0x20)\\r\\n            // Store the length.\\r\\n            mstore(str, length)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the base 10 decimal representation of `value`.\\r\\n    function toString(int256 value) internal pure returns (string memory str) {\\r\\n        if (value >= 0) {\\r\\n            return toString(uint256(value));\\r\\n        }\\r\\n        unchecked {\\r\\n            str = toString(uint256(-value));\\r\\n        }\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We still have some spare memory space on the left,\\r\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\r\\n            let length := mload(str) // Load the string length.\\r\\n            mstore(str, 0x2d) // Store the '-' character.\\r\\n            str := sub(str, 1) // Move back the string pointer by a byte.\\r\\n            mstore(str, add(length, 1)) // Update the string length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                   HEXADECIMAL OPERATIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`,\\r\\n    /// left-padded to an input length of `length` bytes.\\r\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\r\\n    /// giving a total length of `length * 2 + 2` bytes.\\r\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value, length);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`,\\r\\n    /// left-padded to an input length of `length` bytes.\\r\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\r\\n    /// giving a total length of `length * 2` bytes.\\r\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\r\\n    function toHexStringNoPrefix(uint256 value, uint256 length)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory str)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\\r\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\r\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\r\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\r\\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\\r\\n            // Allocate the memory.\\r\\n            mstore(0x40, add(str, 0x20))\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end to calculate the length later.\\r\\n            let end := str\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            let start := sub(str, add(length, length))\\r\\n            let w := not(1) // Tsk.\\r\\n            let temp := value\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for {} 1 {} {\\r\\n                str := add(str, w) // `sub(str, 2)`.\\r\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\r\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\r\\n                temp := shr(8, temp)\\r\\n                if iszero(xor(str, start)) { break }\\r\\n            }\\r\\n\\r\\n            if temp {\\r\\n                // Store the function selector of `HexLengthInsufficient()`.\\r\\n                mstore(0x00, 0x2194895a)\\r\\n                // Revert with (offset, size).\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n\\r\\n            // Compute the string's length.\\r\\n            let strLength := sub(end, str)\\r\\n            // Move the pointer and write the length.\\r\\n            str := sub(str, 0x20)\\r\\n            mstore(str, strLength)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\r\\n    /// As address are 20 bytes long, the output will left-padded to have\\r\\n    /// a length of `20 * 2 + 2` bytes.\\r\\n    function toHexString(uint256 value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\".\\r\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\r\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\r\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(add(str, o), 0x3078) // Write the \\\"0x\\\" prefix, accounting for leading zero.\\r\\n            str := sub(add(str, o), 2) // Move the pointer, accounting for leading zero.\\r\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\r\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\r\\n    function toMinimalHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\r\\n            let strLength := mload(str) // Get the length.\\r\\n            str := add(str, o) // Move the pointer, accounting for leading zero.\\r\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    /// As address are 20 bytes long, the output will left-padded to have\\r\\n    /// a length of `20 * 2` bytes.\\r\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\r\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\r\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\r\\n            str := add(mload(0x40), 0x80)\\r\\n            // Allocate the memory.\\r\\n            mstore(0x40, add(str, 0x20))\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end to calculate the length later.\\r\\n            let end := str\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            let w := not(1) // Tsk.\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for { let temp := value } 1 {} {\\r\\n                str := add(str, w) // `sub(str, 2)`.\\r\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\r\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\r\\n                temp := shr(8, temp)\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n            // Compute the string's length.\\r\\n            let strLength := sub(end, str)\\r\\n            // Move the pointer and write the length.\\r\\n            str := sub(str, 0x20)\\r\\n            mstore(str, strLength)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\r\\n    /// and the alphabets are capitalized conditionally according to\\r\\n    /// https://eips.ethereum.org/EIPS/eip-55\\r\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\r\\n        str = toHexString(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\r\\n            let o := add(str, 0x22)\\r\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\r\\n            let t := shl(240, 136) // `0b10001000 << 240`\\r\\n            for { let i := 0 } 1 {} {\\r\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\r\\n                i := add(i, 1)\\r\\n                if eq(i, 20) { break }\\r\\n            }\\r\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\r\\n            o := add(o, 0x20)\\r\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexString(address value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            str := mload(0x40)\\r\\n\\r\\n            // Allocate the memory.\\r\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\r\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\r\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\r\\n            mstore(0x40, add(str, 0x80))\\r\\n\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            str := add(str, 2)\\r\\n            mstore(str, 40)\\r\\n\\r\\n            let o := add(str, 0x20)\\r\\n            mstore(add(o, 40), 0)\\r\\n\\r\\n            value := shl(96, value)\\r\\n\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for { let i := 0 } 1 {} {\\r\\n                let p := add(o, add(i, i))\\r\\n                let temp := byte(i, value)\\r\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\r\\n                mstore8(p, mload(shr(4, temp)))\\r\\n                i := add(i, 1)\\r\\n                if eq(i, 20) { break }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hex encoded string from the raw bytes.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(raw);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hex encoded string from the raw bytes.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let length := mload(raw)\\r\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\r\\n            mstore(str, add(length, length)) // Store the length of the output.\\r\\n\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            let o := add(str, 0x20)\\r\\n            let end := add(raw, length)\\r\\n\\r\\n            for {} iszero(eq(raw, end)) {} {\\r\\n                raw := add(raw, 1)\\r\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\r\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\r\\n                o := add(o, 2)\\r\\n            }\\r\\n            mstore(o, 0) // Zeroize the slot after the string.\\r\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                   RUNE STRING OPERATIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the number of UTF characters in the string.\\r\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            if mload(s) {\\r\\n                mstore(0x00, div(not(0), 255))\\r\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\r\\n                let o := add(s, 0x20)\\r\\n                let end := add(o, mload(s))\\r\\n                for { result := 1 } 1 { result := add(result, 1) } {\\r\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\r\\n                    if iszero(lt(o, end)) { break }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\r\\n    /// (i.e. all characters codes are in [0..127])\\r\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let mask := shl(7, div(not(0), 255))\\r\\n            result := 1\\r\\n            let n := mload(s)\\r\\n            if n {\\r\\n                let o := add(s, 0x20)\\r\\n                let end := add(o, n)\\r\\n                let last := mload(end)\\r\\n                mstore(end, 0)\\r\\n                for {} 1 {} {\\r\\n                    if and(mask, mload(o)) {\\r\\n                        result := 0\\r\\n                        break\\r\\n                    }\\r\\n                    o := add(o, 0x20)\\r\\n                    if iszero(lt(o, end)) { break }\\r\\n                }\\r\\n                mstore(end, last)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                   BYTE STRING OPERATIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    // For performance and bytecode compactness, all indices of the following operations\\r\\n    // are byte (ASCII) offsets, not UTF character offsets.\\r\\n\\r\\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\\r\\n    function replace(string memory subject, string memory search, string memory replacement)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            let searchLength := mload(search)\\r\\n            let replacementLength := mload(replacement)\\r\\n\\r\\n            subject := add(subject, 0x20)\\r\\n            search := add(search, 0x20)\\r\\n            replacement := add(replacement, 0x20)\\r\\n            result := add(mload(0x40), 0x20)\\r\\n\\r\\n            let subjectEnd := add(subject, subjectLength)\\r\\n            if iszero(gt(searchLength, subjectLength)) {\\r\\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\\r\\n                let h := 0\\r\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\r\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\r\\n                let s := mload(search)\\r\\n                for {} 1 {} {\\r\\n                    let t := mload(subject)\\r\\n                    // Whether the first `searchLength % 32` bytes of\\r\\n                    // `subject` and `search` matches.\\r\\n                    if iszero(shr(m, xor(t, s))) {\\r\\n                        if h {\\r\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\r\\n                                mstore(result, t)\\r\\n                                result := add(result, 1)\\r\\n                                subject := add(subject, 1)\\r\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                                continue\\r\\n                            }\\r\\n                        }\\r\\n                        // Copy the `replacement` one word at a time.\\r\\n                        for { let o := 0 } 1 {} {\\r\\n                            mstore(add(result, o), mload(add(replacement, o)))\\r\\n                            o := add(o, 0x20)\\r\\n                            if iszero(lt(o, replacementLength)) { break }\\r\\n                        }\\r\\n                        result := add(result, replacementLength)\\r\\n                        subject := add(subject, searchLength)\\r\\n                        if searchLength {\\r\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                            continue\\r\\n                        }\\r\\n                    }\\r\\n                    mstore(result, t)\\r\\n                    result := add(result, 1)\\r\\n                    subject := add(subject, 1)\\r\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            let resultRemainder := result\\r\\n            result := add(mload(0x40), 0x20)\\r\\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\\r\\n            // Copy the rest of the string one word at a time.\\r\\n            for {} lt(subject, subjectEnd) {} {\\r\\n                mstore(resultRemainder, mload(subject))\\r\\n                resultRemainder := add(resultRemainder, 0x20)\\r\\n                subject := add(subject, 0x20)\\r\\n            }\\r\\n            result := sub(result, 0x20)\\r\\n            let last := add(add(result, 0x20), k) // Zeroize the slot after the string.\\r\\n            mstore(last, 0)\\r\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n            mstore(result, k) // Store the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from left to right, starting from `from`.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function indexOf(string memory subject, string memory search, uint256 from)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            for { let subjectLength := mload(subject) } 1 {} {\\r\\n                if iszero(mload(search)) {\\r\\n                    if iszero(gt(from, subjectLength)) {\\r\\n                        result := from\\r\\n                        break\\r\\n                    }\\r\\n                    result := subjectLength\\r\\n                    break\\r\\n                }\\r\\n                let searchLength := mload(search)\\r\\n                let subjectStart := add(subject, 0x20)\\r\\n\\r\\n                result := not(0) // Initialize to `NOT_FOUND`.\\r\\n\\r\\n                subject := add(subjectStart, from)\\r\\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\\r\\n\\r\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\r\\n                let s := mload(add(search, 0x20))\\r\\n\\r\\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\\r\\n\\r\\n                if iszero(lt(searchLength, 0x20)) {\\r\\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\r\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\r\\n                            if eq(keccak256(subject, searchLength), h) {\\r\\n                                result := sub(subject, subjectStart)\\r\\n                                break\\r\\n                            }\\r\\n                        }\\r\\n                        subject := add(subject, 1)\\r\\n                        if iszero(lt(subject, end)) { break }\\r\\n                    }\\r\\n                    break\\r\\n                }\\r\\n                for {} 1 {} {\\r\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\r\\n                        result := sub(subject, subjectStart)\\r\\n                        break\\r\\n                    }\\r\\n                    subject := add(subject, 1)\\r\\n                    if iszero(lt(subject, end)) { break }\\r\\n                }\\r\\n                break\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from left to right.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function indexOf(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        result = indexOf(subject, search, 0);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from right to left, starting from `from`.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            for {} 1 {} {\\r\\n                result := not(0) // Initialize to `NOT_FOUND`.\\r\\n                let searchLength := mload(search)\\r\\n                if gt(searchLength, mload(subject)) { break }\\r\\n                let w := result\\r\\n\\r\\n                let fromMax := sub(mload(subject), searchLength)\\r\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\r\\n\\r\\n                let end := add(add(subject, 0x20), w)\\r\\n                subject := add(add(subject, 0x20), from)\\r\\n                if iszero(gt(subject, end)) { break }\\r\\n                // As this function is not too often used,\\r\\n                // we shall simply use keccak256 for smaller bytecode size.\\r\\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\r\\n                    if eq(keccak256(subject, searchLength), h) {\\r\\n                        result := sub(subject, add(end, 1))\\r\\n                        break\\r\\n                    }\\r\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\r\\n                    if iszero(gt(subject, end)) { break }\\r\\n                }\\r\\n                break\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from right to left.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function lastIndexOf(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether `subject` starts with `search`.\\r\\n    function startsWith(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let searchLength := mload(search)\\r\\n            // Just using keccak256 directly is actually cheaper.\\r\\n            // forgefmt: disable-next-item\\r\\n            result := and(\\r\\n                iszero(gt(searchLength, mload(subject))),\\r\\n                eq(\\r\\n                    keccak256(add(subject, 0x20), searchLength),\\r\\n                    keccak256(add(search, 0x20), searchLength)\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether `subject` ends with `search`.\\r\\n    function endsWith(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let searchLength := mload(search)\\r\\n            let subjectLength := mload(subject)\\r\\n            // Whether `search` is not longer than `subject`.\\r\\n            let withinRange := iszero(gt(searchLength, subjectLength))\\r\\n            // Just using keccak256 directly is actually cheaper.\\r\\n            // forgefmt: disable-next-item\\r\\n            result := and(\\r\\n                withinRange,\\r\\n                eq(\\r\\n                    keccak256(\\r\\n                        // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\\r\\n                        add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\\r\\n                        searchLength\\r\\n                    ),\\r\\n                    keccak256(add(search, 0x20), searchLength)\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns `subject` repeated `times`.\\r\\n    function repeat(string memory subject, uint256 times)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            if iszero(or(iszero(times), iszero(subjectLength))) {\\r\\n                subject := add(subject, 0x20)\\r\\n                result := mload(0x40)\\r\\n                let output := add(result, 0x20)\\r\\n                for {} 1 {} {\\r\\n                    // Copy the `subject` one word at a time.\\r\\n                    for { let o := 0 } 1 {} {\\r\\n                        mstore(add(output, o), mload(add(subject, o)))\\r\\n                        o := add(o, 0x20)\\r\\n                        if iszero(lt(o, subjectLength)) { break }\\r\\n                    }\\r\\n                    output := add(output, subjectLength)\\r\\n                    times := sub(times, 1)\\r\\n                    if iszero(times) { break }\\r\\n                }\\r\\n                mstore(output, 0) // Zeroize the slot after the string.\\r\\n                let resultLength := sub(output, add(result, 0x20))\\r\\n                mstore(result, resultLength) // Store the length.\\r\\n                // Allocate the memory.\\r\\n                mstore(0x40, add(result, add(resultLength, 0x20)))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\r\\n    /// `start` and `end` are byte offsets.\\r\\n    function slice(string memory subject, uint256 start, uint256 end)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\\r\\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\\r\\n            if lt(start, end) {\\r\\n                result := mload(0x40)\\r\\n                let resultLength := sub(end, start)\\r\\n                mstore(result, resultLength)\\r\\n                subject := add(subject, start)\\r\\n                let w := not(0x1f)\\r\\n                // Copy the `subject` one word at a time, backwards.\\r\\n                for { let o := and(add(resultLength, 0x1f), w) } 1 {} {\\r\\n                    mstore(add(result, o), mload(add(subject, o)))\\r\\n                    o := add(o, w) // `sub(o, 0x20)`.\\r\\n                    if iszero(o) { break }\\r\\n                }\\r\\n                // Zeroize the slot after the string.\\r\\n                mstore(add(add(result, 0x20), resultLength), 0)\\r\\n                // Allocate memory for the length and the bytes,\\r\\n                // rounded up to a multiple of 32.\\r\\n                mstore(0x40, add(result, and(add(resultLength, 0x3f), w)))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\r\\n    /// `start` is a byte offset.\\r\\n    function slice(string memory subject, uint256 start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        result = slice(subject, start, uint256(int256(-1)));\\r\\n    }\\r\\n\\r\\n    /// @dev Returns all the indices of `search` in `subject`.\\r\\n    /// The indices are byte offsets.\\r\\n    function indicesOf(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[] memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            let searchLength := mload(search)\\r\\n\\r\\n            if iszero(gt(searchLength, subjectLength)) {\\r\\n                subject := add(subject, 0x20)\\r\\n                search := add(search, 0x20)\\r\\n                result := add(mload(0x40), 0x20)\\r\\n\\r\\n                let subjectStart := subject\\r\\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\\r\\n                let h := 0\\r\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\r\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\r\\n                let s := mload(search)\\r\\n                for {} 1 {} {\\r\\n                    let t := mload(subject)\\r\\n                    // Whether the first `searchLength % 32` bytes of\\r\\n                    // `subject` and `search` matches.\\r\\n                    if iszero(shr(m, xor(t, s))) {\\r\\n                        if h {\\r\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\r\\n                                subject := add(subject, 1)\\r\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                                continue\\r\\n                            }\\r\\n                        }\\r\\n                        // Append to `result`.\\r\\n                        mstore(result, sub(subject, subjectStart))\\r\\n                        result := add(result, 0x20)\\r\\n                        // Advance `subject` by `searchLength`.\\r\\n                        subject := add(subject, searchLength)\\r\\n                        if searchLength {\\r\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                            continue\\r\\n                        }\\r\\n                    }\\r\\n                    subject := add(subject, 1)\\r\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                }\\r\\n                let resultEnd := result\\r\\n                // Assign `result` to the free memory pointer.\\r\\n                result := mload(0x40)\\r\\n                // Store the length of `result`.\\r\\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\\r\\n                // Allocate memory for result.\\r\\n                // We allocate one more word, so this array can be recycled for {split}.\\r\\n                mstore(0x40, add(resultEnd, 0x20))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\\r\\n    function split(string memory subject, string memory delimiter)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string[] memory result)\\r\\n    {\\r\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let w := not(0x1f)\\r\\n            let indexPtr := add(indices, 0x20)\\r\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\r\\n            mstore(add(indicesEnd, w), mload(subject))\\r\\n            mstore(indices, add(mload(indices), 1))\\r\\n            let prevIndex := 0\\r\\n            for {} 1 {} {\\r\\n                let index := mload(indexPtr)\\r\\n                mstore(indexPtr, 0x60)\\r\\n                if iszero(eq(index, prevIndex)) {\\r\\n                    let element := mload(0x40)\\r\\n                    let elementLength := sub(index, prevIndex)\\r\\n                    mstore(element, elementLength)\\r\\n                    // Copy the `subject` one word at a time, backwards.\\r\\n                    for { let o := and(add(elementLength, 0x1f), w) } 1 {} {\\r\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\r\\n                        o := add(o, w) // `sub(o, 0x20)`.\\r\\n                        if iszero(o) { break }\\r\\n                    }\\r\\n                    // Zeroize the slot after the string.\\r\\n                    mstore(add(add(element, 0x20), elementLength), 0)\\r\\n                    // Allocate memory for the length and the bytes,\\r\\n                    // rounded up to a multiple of 32.\\r\\n                    mstore(0x40, add(element, and(add(elementLength, 0x3f), w)))\\r\\n                    // Store the `element` into the array.\\r\\n                    mstore(indexPtr, element)\\r\\n                }\\r\\n                prevIndex := add(index, mload(delimiter))\\r\\n                indexPtr := add(indexPtr, 0x20)\\r\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\r\\n            }\\r\\n            result := indices\\r\\n            if iszero(mload(delimiter)) {\\r\\n                result := add(indices, 0x20)\\r\\n                mstore(result, sub(mload(indices), 2))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a concatenated string of `a` and `b`.\\r\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\r\\n    function concat(string memory a, string memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let w := not(0x1f)\\r\\n            result := mload(0x40)\\r\\n            let aLength := mload(a)\\r\\n            // Copy `a` one word at a time, backwards.\\r\\n            for { let o := and(add(aLength, 0x20), w) } 1 {} {\\r\\n                mstore(add(result, o), mload(add(a, o)))\\r\\n                o := add(o, w) // `sub(o, 0x20)`.\\r\\n                if iszero(o) { break }\\r\\n            }\\r\\n            let bLength := mload(b)\\r\\n            let output := add(result, aLength)\\r\\n            // Copy `b` one word at a time, backwards.\\r\\n            for { let o := and(add(bLength, 0x20), w) } 1 {} {\\r\\n                mstore(add(output, o), mload(add(b, o)))\\r\\n                o := add(o, w) // `sub(o, 0x20)`.\\r\\n                if iszero(o) { break }\\r\\n            }\\r\\n            let totalLength := add(aLength, bLength)\\r\\n            let last := add(add(result, 0x20), totalLength)\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(last, 0)\\r\\n            // Stores the length.\\r\\n            mstore(result, totalLength)\\r\\n            // Allocate memory for the length and the bytes,\\r\\n            // rounded up to a multiple of 32.\\r\\n            mstore(0x40, and(add(last, 0x1f), w))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\r\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\r\\n    function toCase(string memory subject, bool toUpper)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let length := mload(subject)\\r\\n            if length {\\r\\n                result := add(mload(0x40), 0x20)\\r\\n                subject := add(subject, 1)\\r\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\r\\n                let w := not(0)\\r\\n                for { let o := length } 1 {} {\\r\\n                    o := add(o, w)\\r\\n                    let b := and(0xff, mload(add(subject, o)))\\r\\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\\r\\n                    if iszero(o) { break }\\r\\n                }\\r\\n                result := mload(0x40)\\r\\n                mstore(result, length) // Store the length.\\r\\n                let last := add(add(result, 0x20), length)\\r\\n                mstore(last, 0) // Zeroize the slot after the string.\\r\\n                mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a lowercased copy of the string.\\r\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\r\\n    function lower(string memory subject) internal pure returns (string memory result) {\\r\\n        result = toCase(subject, false);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns an UPPERCASED copy of the string.\\r\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\r\\n    function upper(string memory subject) internal pure returns (string memory result) {\\r\\n        result = toCase(subject, true);\\r\\n    }\\r\\n\\r\\n    /// @dev Escapes the string to be used within HTML tags.\\r\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            for {\\r\\n                let end := add(s, mload(s))\\r\\n                result := add(mload(0x40), 0x20)\\r\\n                // Store the bytes of the packed offsets and strides into the scratch space.\\r\\n                // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\r\\n                mstore(0x1f, 0x900094)\\r\\n                mstore(0x08, 0xc0000000a6ab)\\r\\n                // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\r\\n                mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\r\\n            } iszero(eq(s, end)) {} {\\r\\n                s := add(s, 1)\\r\\n                let c := and(mload(s), 0xff)\\r\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\r\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\r\\n                    mstore8(result, c)\\r\\n                    result := add(result, 1)\\r\\n                    continue\\r\\n                }\\r\\n                let t := shr(248, mload(c))\\r\\n                mstore(result, mload(and(t, 0x1f)))\\r\\n                result := add(result, shr(5, t))\\r\\n            }\\r\\n            let last := result\\r\\n            mstore(last, 0) // Zeroize the slot after the string.\\r\\n            result := mload(0x40)\\r\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\r\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\r\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            for {\\r\\n                let end := add(s, mload(s))\\r\\n                result := add(mload(0x40), 0x20)\\r\\n                // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\r\\n                // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n                // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\r\\n                // into the scratch space.\\r\\n                mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\r\\n                // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\r\\n                let e := or(shl(0x22, 1), shl(0x5c, 1))\\r\\n            } iszero(eq(s, end)) {} {\\r\\n                s := add(s, 1)\\r\\n                let c := and(mload(s), 0xff)\\r\\n                if iszero(lt(c, 0x20)) {\\r\\n                    if iszero(and(shl(c, 1), e)) {\\r\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\r\\n                        mstore8(result, c)\\r\\n                        result := add(result, 1)\\r\\n                        continue\\r\\n                    }\\r\\n                    mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\r\\n                    mstore8(add(result, 1), c)\\r\\n                    result := add(result, 2)\\r\\n                    continue\\r\\n                }\\r\\n                if iszero(and(shl(c, 1), 0x3700)) {\\r\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\r\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\r\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\r\\n                    mstore(result, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\r\\n                    result := add(result, 6)\\r\\n                    continue\\r\\n                }\\r\\n                mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\r\\n                mstore8(add(result, 1), mload(add(c, 8)))\\r\\n                result := add(result, 2)\\r\\n            }\\r\\n            let last := result\\r\\n            mstore(last, 0) // Zeroize the slot after the string.\\r\\n            result := mload(0x40)\\r\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\r\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether `a` equals `b`.\\r\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\r\\n        assembly {\\r\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Packs a single string with its length into a single word.\\r\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\r\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We don't need to zero right pad the string,\\r\\n            // since this is our own custom non-standard packing scheme.\\r\\n            result :=\\r\\n                mul(\\r\\n                    // Load the length and the bytes.\\r\\n                    mload(add(a, 0x1f)),\\r\\n                    // `length != 0 && length < 32`. Abuses underflow.\\r\\n                    // Assumes that the length is valid and within the block gas limit.\\r\\n                    lt(sub(mload(a), 1), 0x1f)\\r\\n                )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Unpacks a string packed using {packOne}.\\r\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\r\\n    /// If `packed` is not an output of {packOne}, the output behaviour is undefined.\\r\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Grab the free memory pointer.\\r\\n            result := mload(0x40)\\r\\n            // Allocate 2 words (1 for the length, 1 for the bytes).\\r\\n            mstore(0x40, add(result, 0x40))\\r\\n            // Zeroize the length slot.\\r\\n            mstore(result, 0)\\r\\n            // Store the length and bytes.\\r\\n            mstore(add(result, 0x1f), packed)\\r\\n            // Right pad with zeroes.\\r\\n            mstore(add(add(result, 0x20), mload(result)), 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Packs two strings with their lengths into a single word.\\r\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\r\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let aLength := mload(a)\\r\\n            // We don't need to zero right pad the strings,\\r\\n            // since this is our own custom non-standard packing scheme.\\r\\n            result :=\\r\\n                mul(\\r\\n                    // Load the length and the bytes of `a` and `b`.\\r\\n                    or(\\r\\n                        shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\\r\\n                        mload(sub(add(b, 0x1e), aLength))\\r\\n                    ),\\r\\n                    // `totalLength != 0 && totalLength < 31`. Abuses underflow.\\r\\n                    // Assumes that the lengths are valid and within the block gas limit.\\r\\n                    lt(sub(add(aLength, mload(b)), 1), 0x1e)\\r\\n                )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Unpacks strings packed using {packTwo}.\\r\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\r\\n    /// If `packed` is not an output of {packTwo}, the output behaviour is undefined.\\r\\n    function unpackTwo(bytes32 packed)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory resultA, string memory resultB)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Grab the free memory pointer.\\r\\n            resultA := mload(0x40)\\r\\n            resultB := add(resultA, 0x40)\\r\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\r\\n            mstore(0x40, add(resultB, 0x40))\\r\\n            // Zeroize the length slots.\\r\\n            mstore(resultA, 0)\\r\\n            mstore(resultB, 0)\\r\\n            // Store the lengths and bytes.\\r\\n            mstore(add(resultA, 0x1f), packed)\\r\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\r\\n            // Right pad with zeroes.\\r\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\r\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Directly returns `a` without copying.\\r\\n    function directReturn(string memory a) internal pure {\\r\\n        assembly {\\r\\n            // Assumes that the string does not start from the scratch space.\\r\\n            let retStart := sub(a, 0x20)\\r\\n            let retSize := add(mload(a), 0x40)\\r\\n            // Right pad with zeroes. Just in case the string is produced\\r\\n            // by a method that doesn't zero right pad.\\r\\n            mstore(add(retStart, retSize), 0)\\r\\n            // Store the return offset.\\r\\n            mstore(retStart, 0x20)\\r\\n            // End the transaction, returning the string.\\r\\n            return(retStart, retSize)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\ncontract NumberGame is ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    error ZeroValue();\\r\\n    error InvalidNumber();\\r\\n    error GameNotActive();\\r\\n    error TransferFailed();\\r\\n    error DoesntEqualTotal();\\r\\n    error GameNotConfigured();\\r\\n    error GameAlreadyStarted();\\r\\n\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n    address public constant deadAddress = address(0xdead);\\r\\n\\r\\n    bool private swapping;\\r\\n    bool public gameActive;\\r\\n\\r\\n    address private marketingWallet;\\r\\n    address private devWallet;\\r\\n\\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    uint256 public maxWallet;\\r\\n\\r\\n    bool public limitsInEffect = true;\\r\\n    bool public tradingActive = false;\\r\\n    bool public swapEnabled = false;\\r\\n\\r\\n    uint256 private launchedAt;\\r\\n    uint256 private launchedTime;\\r\\n    uint256 public deadBlocks;\\r\\n\\r\\n    uint256 public buyTotalFees;\\r\\n\\r\\n    uint256 public sellTotalFees;\\r\\n\\r\\n    uint256 public numberGuessBalance;\\r\\n    uint256 public currentLevel;\\r\\n    uint256 public totalLevels;\\r\\n    uint256 public minGuessHoldings;\\r\\n    mapping(uint256 => uint256) public payoutPerLevel;\\r\\n\\r\\n    mapping(address => bool) private _isExcludedFromFees;\\r\\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\\r\\n\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);\\r\\n\\r\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\\r\\n\\r\\n    event GameStarted();\\r\\n    event GameEnded();\\r\\n    event CorrectGuess(address indexed guesser, uint256 indexed level, uint256 indexed number);\\r\\n\\r\\n    constructor() ERC20(\\\"Number Game\\\", \\\"NUMBER\\\") {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D );\\r\\n\\r\\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\\r\\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\r\\n\\r\\n        uint256 totalSupply = 1_000_000_000 * 1e18;\\r\\n        // TODO: Manually define numberGuessSupply\\r\\n        uint256 numberGuessSupply = 100_000_000 * 1e18;\\r\\n        minGuessHoldings = 1_000_000 * 1e18;\\r\\n\\r\\n        maxTransactionAmount = 5_000_000 * 1e18;\\r\\n        maxWallet = 5_000_000 * 1e18;\\r\\n        swapTokensAtAmount = 150_000 * 1e18; // 0.015% * 20 = 0.3%\\r\\n\\r\\n        marketingWallet = msg.sender;\\r\\n        devWallet = msg.sender;\\r\\n\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(0xdead), true);\\r\\n\\r\\n        excludeFromMaxTransaction(owner(), true);\\r\\n        excludeFromMaxTransaction(address(this), true);\\r\\n        excludeFromMaxTransaction(address(0xdead), true);\\r\\n\\r\\n        // Adjusted supply mints to account for numberGuessSupply being stored in contract\\r\\n        _mint(msg.sender, totalSupply - numberGuessSupply);\\r\\n        _mint(address(this), numberGuessSupply);\\r\\n        // Store the tokens allocated to number guess game for proper accounting\\r\\n        numberGuessBalance = numberGuessSupply;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function updateMinimumTokenHoldings(uint256 _newMin) external onlyOwner {\\r\\n        minGuessHoldings = _newMin * 1e18;\\r\\n    }\\r\\n\\r\\n    // Configure number guess game by specifying number of levels and the payout per level\\r\\n    function configureGuessGame(uint256[] calldata _payouts) external onlyOwner {\\r\\n        // Prevent reconfiguration if game has already started\\r\\n        if (gameActive) { revert GameAlreadyStarted(); }\\r\\n        // Store each level's payout value and tally payouts to prevent exceeding allocation\\r\\n        uint256 totalPayout;\\r\\n        for (uint256 i; i < _payouts.length;) {\\r\\n            if (_payouts[i] == 0) { revert ZeroValue(); }\\r\\n            payoutPerLevel[i + 1] = _payouts[i];\\r\\n            unchecked {\\r\\n                totalPayout += _payouts[i];\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        if (totalPayout != numberGuessBalance) { revert DoesntEqualTotal(); }\\r\\n        // Set totalLevels to _payouts length so mapping doesn't have to be iterable\\r\\n        totalLevels = _payouts.length;\\r\\n    }\\r\\n\\r\\n    // One-way switch to activate the game\\r\\n    function activateGame() external onlyOwner {\\r\\n        if (gameActive) { revert GameAlreadyStarted(); }\\r\\n        if (totalLevels == 0) { revert GameNotConfigured(); }\\r\\n        gameActive = true;\\r\\n        currentLevel += 1;\\r\\n        emit GameStarted();\\r\\n    }\\r\\n\\r\\n    // Calculate sender+block-specific hash for any given number\\r\\n    function hashNum(uint256 _num) public view returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(msg.sender, _num));\\r\\n    }\\r\\n\\r\\n    // Guess the number for a particular level (starts at 1)\\r\\n    function guessNumber(uint256 _num) external {\\r\\n        // Player must hold 1m tokens (0.1%)\\r\\n        require(balanceOf(msg.sender) >= minGuessHoldings);\\r\\n        // Confirm game is active\\r\\n        uint256 level = currentLevel;\\r\\n        if (level == 0) { revert GameNotActive(); }\\r\\n        // Calculate address + number hash\\r\\n        bytes memory numHash = abi.encodePacked(hashNum(_num));\\r\\n        // Convert bytes32 to string\\r\\n        string memory numHashString = LibString.toHexStringNoPrefix(numHash);\\r\\n        // Determine difficulty by calculating repeating \\\"0\\\" prefix based on current level\\r\\n        string memory difficultyPrefix = LibString.repeat(\\\"0\\\", level);\\r\\n        // Verify number hash starts with the difficulty prefix\\r\\n        bool confirmed = LibString.startsWith(numHashString, difficultyPrefix);\\r\\n        if (!confirmed) { revert InvalidNumber(); }\\r\\n        else {\\r\\n            uint256 payout = payoutPerLevel[level];\\r\\n            // Adjust internal accounting\\r\\n            numberGuessBalance -= payout;\\r\\n            currentLevel += 1;\\r\\n            // Check msg.sender's balance beforehand\\r\\n            uint256 balance = balanceOf(msg.sender);\\r\\n            // Call pre-override ERC20 _transfer function to avoid tax logic\\r\\n            ERC20._transfer(address(this), msg.sender, payout);\\r\\n            // Confirm transfer was successful as _transfer doesn't perform completion checks\\r\\n            if (balanceOf(msg.sender) - payout != balance) { revert TransferFailed(); }\\r\\n            emit CorrectGuess(msg.sender, level, _num);\\r\\n            // If final level win, end game\\r\\n            if (level == totalLevels) {\\r\\n                // Setting currentLevel to zero prevents guessNumber from being callable\\r\\n                currentLevel = 0;\\r\\n                emit GameEnded();\\r\\n                // gameActive is not set to false as it would allow for a theoretical rerun with no tokens\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enableTrading(uint256 _deadBlocks) external onlyOwner {\\r\\n        deadBlocks = _deadBlocks;\\r\\n        tradingActive = true;\\r\\n        swapEnabled = true;\\r\\n        launchedAt = block.number;\\r\\n        launchedTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function removeLimits() external onlyOwner returns (bool) {\\r\\n        limitsInEffect = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool) {\\r\\n        require(newAmount >= (totalSupply() * 1) / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\r\\n        require(newAmount <= (totalSupply() * 5) / 1000, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\r\\n        swapTokensAtAmount = newAmount;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\\r\\n        require(newNum >= ((totalSupply() * 1) / 1000) / 1e18, \\\"Cannot set maxTransactionAmount lower than 0.1%\\\");\\r\\n        maxTransactionAmount = newNum * (10 ** 18);\\r\\n    }\\r\\n\\r\\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\\r\\n        require(newNum >= ((totalSupply() * 5) / 1000) / 1e18, \\\"Cannot set maxWallet lower than 0.5%\\\");\\r\\n        maxWallet = newNum * (10 ** 18);\\r\\n    }\\r\\n\\r\\n    function whitelistContract(address _whitelist, bool isWL) public onlyOwner {\\r\\n        _isExcludedMaxTransactionAmount[_whitelist] = isWL;\\r\\n\\r\\n        _isExcludedFromFees[_whitelist] = isWL;\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\\r\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\r\\n    }\\r\\n\\r\\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\r\\n    function updateSwapEnabled(bool enabled) external onlyOwner {\\r\\n        swapEnabled = enabled;\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function manualswap(uint256 amount) external {\\r\\n        require(_msgSender() == marketingWallet);\\r\\n        // Corrected require statement to account for number guess game allocation\\r\\n        require(amount <= (balanceOf(address(this)) - numberGuessBalance) && amount > 0, \\\"Wrong amount\\\");\\r\\n        swapTokensForEth(amount);\\r\\n    }\\r\\n\\r\\n    function manualsend() external {\\r\\n        bool success;\\r\\n        (success,) = address(devWallet).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"The pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateBuyFees(uint256 _marketingFee) external onlyOwner {\\r\\n        buyTotalFees = _marketingFee;\\r\\n        require(buyTotalFees <= 5, \\\"Must keep fees at 5% or less\\\");\\r\\n    }\\r\\n\\r\\n    function updateSellFees(uint256 _marketingFee) external onlyOwner {\\r\\n        sellTotalFees = _marketingFee;\\r\\n        require(sellTotalFees <= 5, \\\"Must keep fees at 5% or less\\\");\\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {\\r\\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\\r\\n        marketingWallet = newMarketingWallet;\\r\\n    }\\r\\n\\r\\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts) external {\\r\\n        require(addresses.length > 0 && amounts.length == addresses.length);\\r\\n        address from = msg.sender;\\r\\n\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            _transfer(from, addresses[i], amounts[i] * (10 ** 18));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (limitsInEffect) {\\r\\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {\\r\\n                if ((launchedAt + deadBlocks) >= block.number) {\\r\\n                    buyTotalFees = 35;\\r\\n                    sellTotalFees = 35;\\r\\n                } else if (block.number <= launchedAt + 5) {\\r\\n                    buyTotalFees = 25;\\r\\n                    sellTotalFees = 25;\\r\\n                } else if (block.number <= launchedAt + 10) {\\r\\n                    buyTotalFees = 10;\\r\\n                    sellTotalFees = 10;\\r\\n                } else {\\r\\n                    buyTotalFees = 3;\\r\\n                    sellTotalFees = 3;\\r\\n                }\\r\\n\\r\\n                if (!tradingActive) {\\r\\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \\\"Trading is not active.\\\");\\r\\n                }\\r\\n\\r\\n                //when buy\\r\\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\\r\\n                    require(amount <= maxTransactionAmount, \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\");\\r\\n                    require(amount + balanceOf(to) <= maxWallet, \\\"Max wallet exceeded\\\");\\r\\n                }\\r\\n                //when sell\\r\\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\\r\\n                    require(amount <= maxTransactionAmount, \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\");\\r\\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\\r\\n                    require(amount + balanceOf(to) <= maxWallet, \\\"Max wallet exceeded\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Corrected to account for number guess game allocation\\r\\n        uint256 contractTokenBalance = balanceOf(address(this)) - numberGuessBalance;\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if (\\r\\n            canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from]\\r\\n                && !_isExcludedFromFees[to]\\r\\n        ) {\\r\\n            swapping = true;\\r\\n\\r\\n            swapBack();\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee = !swapping;\\r\\n\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        uint256 fees = 0;\\r\\n        // only take fees on buys/sells, do not take on wallet transfers\\r\\n        if (takeFee) {\\r\\n            // on sell\\r\\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\\r\\n                fees = amount.mul(sellTotalFees).div(100);\\r\\n            }\\r\\n            // on buy\\r\\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\\r\\n                fees = amount.mul(buyTotalFees).div(100);\\r\\n            }\\r\\n\\r\\n            if (fees > 0) {\\r\\n                super._transfer(from, address(this), fees);\\r\\n            }\\r\\n\\r\\n            amount -= fees;\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapBack() private {\\r\\n        // Corrected to account for number guess game allocation\\r\\n        uint256 contractBalance = balanceOf(address(this)) - numberGuessBalance;\\r\\n        bool success;\\r\\n\\r\\n        if (contractBalance == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (contractBalance > swapTokensAtAmount * 20) {\\r\\n            contractBalance = swapTokensAtAmount * 20;\\r\\n        }\\r\\n\\r\\n        // Halve the amount of liquidity tokens\\r\\n\\r\\n        uint256 amountToSwapForETH = contractBalance;\\r\\n\\r\\n        swapTokensForEth(amountToSwapForETH);\\r\\n\\r\\n        uint256 ethForDev = (address(this).balance).div(5);\\r\\n        uint256 ethforMarketing = address(this).balance;\\r\\n\\r\\n        (success,) = address(devWallet).call{value: ethForDev}(\\\"\\\");\\r\\n\\r\\n        (success,) = address(marketingWallet).call{value: ethforMarketing}(\\\"\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DoesntEqualTotal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameAlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guesser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"CorrectGuess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_payouts\",\"type\":\"uint256[]\"}],\"name\":\"configureGuessGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"guessNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"hashNum\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGuessHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberGuessBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payoutPerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMin\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWL\",\"type\":\"bool\"}],\"name\":\"whitelistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NumberGame", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}