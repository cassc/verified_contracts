{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n\\nimport \\\"./lib/utils/Address.sol\\\";\\nimport \\\"./lib/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./lib/token/ERC20/IERC20.sol\\\";\\nimport \\\"./lib/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./lib/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./lib/security/ReentrancyGuard.sol\\\";\\n\\n\\n\\n/**\\n* @title IFlashLoanReceiver interface\\n* @notice Interface for the Unilend fee IFlashLoanReceiver.\\n* @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n**/\\ninterface IFlashLoanReceiver {\\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\\n}\\n\\ninterface IUnilendV2Oracle {\\n    function getAssetPrice(address token0, address token1, uint amount) external view returns (uint256);\\n}\\n\\ninterface IUnilendV2Position {\\n    function newPosition(address _pool, address _recipient) external returns (uint nftID);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function getNftId(address _pool, address _user) external view returns (uint nftID);\\n}\\n\\n\\ninterface IUnilendV2Pool {\\n    function setLTV(uint8 _number) external;\\n    function setLB(uint8 _number) external;\\n    function setRF(uint8 _number) external;\\n    function setInterestRateAddress(address _address) external;\\n    function accrueInterest() external;\\n\\n    function lend(uint _nftID, int amount) external returns(int);\\n    function redeem(uint _nftID, int tok_amount, address _receiver) external returns(int);\\n    function redeemUnderlying(uint _nftID, int amount, address _receiver) external returns(int);\\n    function borrow(uint _nftID, int amount, address payable _recipient) external;\\n    function repay(uint _nftID, int amount, address payer) external returns(int);\\n    function liquidate(uint _nftID, int amount, address _receiver, uint _toNftID) external returns(int);\\n    function liquidateMulti(uint[] calldata _nftIDs, int[] calldata amount, address _receiver, uint _toNftID) external returns(int);\\n    \\n    function processFlashLoan(address _receiver, int _amount) external;\\n    function transferFlashLoanProtocolFee(address _distributorAddress, address _token, uint256 _amount) external;\\n    function init(address _token0, address _token1, address _interestRate, uint8 _ltv, uint8 _lb, uint8 _rf) external;\\n    \\n    function getLTV() external view returns (uint);\\n    function getLB() external view returns (uint);\\n    function getRF() external view returns (uint);\\n    \\n    function userBalanceOftoken0(uint _nftID) external view returns (uint _lendBalance0, uint _borrowBalance0);\\n    function userBalanceOftoken1(uint _nftID) external view returns (uint _lendBalance1, uint _borrowBalance1);\\n    function userBalanceOftokens(uint _nftID) external view returns (uint _lendBalance0, uint _borrowBalance0, uint _lendBalance1, uint _borrowBalance1);\\n    function userSharesOftoken0(uint _nftID) external view returns (uint _lendShare0, uint _borrowShare0);\\n    function userSharesOftoken1(uint _nftID) external view returns (uint _lendShare1, uint _borrowShare1);\\n    function userSharesOftokens(uint _nftID) external view returns (uint _lendShare0, uint _borrowShare0, uint _lendShare1, uint _borrowShare1);\\n    function userHealthFactor(uint _nftID) external view returns (uint256 _healthFactor0, uint256 _healthFactor1);\\n\\n    function getAvailableLiquidity0() external view returns (uint _available);\\n    function getAvailableLiquidity1() external view returns (uint _available);\\n}\\n\\n\\n\\n\\n\\n\\ncontract UnilendV2Core is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    \\n    address public governor;\\n    address public defaultInterestRate;\\n    address public poolMasterAddress;\\n    address payable public distributorAddress;\\n    address public oracleAddress;\\n    address public positionsAddress;\\n    \\n    uint public poolLength;\\n    \\n    uint256 private FLASHLOAN_FEE_TOTAL = 5;\\n    uint256 private FLASHLOAN_FEE_PROTOCOL = 3000;\\n\\n\\n    uint8 private default_LTV = 70;\\n    uint8 private default_LB = 10;\\n    uint8 private default_RF = 10;\\n\\n\\n    \\n    mapping(address => mapping(address => address)) public getPool;\\n    mapping(address => poolTokens) private Pool;\\n    \\n    struct poolTokens {\\n        address token0;\\n        address token1;\\n    }\\n    \\n    \\n    constructor(address _poolMasterAddress) {\\n        require(_poolMasterAddress != address(0), \\\"UnilendV2: ZERO ADDRESS\\\");\\n        governor = msg.sender;\\n        poolMasterAddress = _poolMasterAddress;\\n    }\\n    \\n    \\n    event PoolCreated(address indexed token0, address indexed token1, address pool, uint);\\n    \\n    \\n    /**\\n    * @dev emitted when a flashloan is executed\\n    * @param _target the address of the flashLoanReceiver\\n    * @param _reserve the address of the reserve\\n    * @param _amount the amount requested\\n    * @param _totalFee the total fee on the amount\\n    * @param _protocolFee the part of the fee for the protocol\\n    * @param _timestamp the timestamp of the action\\n    **/\\n    event FlashLoan(\\n        address indexed _target,\\n        address indexed _reserve,\\n        int _amount,\\n        uint256 _totalFee,\\n        uint256 _protocolFee,\\n        uint256 _timestamp\\n    );\\n    \\n    event NewDefaultMarketConfig(uint8 _ltv, uint8 _lb, uint8 _rf);\\n    event NewDefaultInterestRateAddress(address indexed _address);\\n    event NewGovernorAddress(address indexed _address);\\n    event NewPositionAddress(address indexed _address);\\n    event NewOracleAddress(address indexed _address);\\n    \\n    \\n    modifier onlyGovernor {\\n        require(\\n            governor == msg.sender,\\n            \\\"The caller must be a governor\\\"\\n        );\\n        _;\\n    }\\n    \\n    /**\\n    * @dev functions affected by this modifier can only be invoked if the provided _amount input parameter\\n    * is not zero.\\n    * @param _amount the amount provided\\n    **/\\n    modifier onlyAmountNotZero(int _amount) {\\n        require(_amount != 0, \\\"Amount must not be 0\\\");\\n        _;\\n    }\\n    \\n    /**\\n    * @dev returns the fee applied to a flashloan and the portion to redirect to the protocol, in basis points.\\n    **/\\n    function getFlashLoanFeesInBips() public view returns (uint256, uint256) {\\n        return (FLASHLOAN_FEE_TOTAL, FLASHLOAN_FEE_PROTOCOL);\\n    }\\n    \\n    \\n    function getOraclePrice(address _token0, address _token1, uint _amount) public view returns(uint){\\n        return IUnilendV2Oracle(oracleAddress).getAssetPrice(_token1, _token0, _amount);\\n    }\\n    \\n\\n    function getPoolLTV(address _pool) public view returns (uint _ltv) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            _ltv = IUnilendV2Pool(_pool).getLTV();\\n        }\\n    }\\n\\n    function getPoolTokens(address _pool) public view returns (address, address) {\\n        poolTokens memory pt = Pool[_pool];\\n        return (pt.token0, pt.token1);\\n    }\\n\\n    function getPoolByTokens(address _token0, address _token1) public view returns (address) {\\n        return getPool[_token0][_token1];\\n    }\\n    \\n    \\n    function balanceOfUserToken0(address _pool, address _address) external view returns (uint _lendBalance0, uint _borrowBalance0) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _address);\\n            if(_nftID > 0){\\n                (_lendBalance0, _borrowBalance0) = IUnilendV2Pool(_pool).userBalanceOftoken0(_nftID);\\n            }\\n        }\\n    }\\n    \\n\\n    function balanceOfUserToken1(address _pool, address _address) external view returns (uint _lendBalance1, uint _borrowBalance1) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _address);\\n            if(_nftID > 0){\\n                (_lendBalance1, _borrowBalance1) = IUnilendV2Pool(_pool).userBalanceOftoken1(_nftID);\\n            }\\n        }\\n    }\\n    \\n    function balanceOfUserTokens(address _pool, address _address) external view returns (uint _lendBalance0, uint _borrowBalance0, uint _lendBalance1, uint _borrowBalance1) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _address);\\n            if(_nftID > 0){\\n                (_lendBalance0, _borrowBalance0, _lendBalance1, _borrowBalance1) = IUnilendV2Pool(_pool).userBalanceOftokens(_nftID);\\n            }\\n        }\\n    }\\n    \\n    \\n    function shareOfUserToken0(address _pool, address _address) external view returns (uint _lendShare0, uint _borrowShare0) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _address);\\n            if(_nftID > 0){\\n                (_lendShare0, _borrowShare0) = IUnilendV2Pool(_pool).userSharesOftoken0(_nftID);\\n            }\\n        }\\n    }\\n    \\n\\n    function shareOfUserToken1(address _pool, address _address) external view returns (uint _lendShare1, uint _borrowShare1) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _address);\\n            if(_nftID > 0){\\n                (_lendShare1, _borrowShare1) = IUnilendV2Pool(_pool).userSharesOftoken1(_nftID);\\n            }\\n        }\\n    }\\n    \\n\\n    function shareOfUserTokens(address _pool, address _address) external view returns (uint _lendShare0, uint _borrowShare0, uint _lendShare1, uint _borrowShare1) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _address);\\n            if(_nftID > 0){\\n                (_lendShare0, _borrowShare0, _lendShare1, _borrowShare1) = IUnilendV2Pool(_pool).userSharesOftokens(_nftID);\\n            }\\n        }\\n    }\\n    \\n\\n    function getUserHealthFactor(address _pool, address _address) external view returns (uint _healthFactor0, uint _healthFactor1) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _address);\\n            if(_nftID > 0){\\n                (_healthFactor0, _healthFactor1) = IUnilendV2Pool(_pool).userHealthFactor(_nftID);\\n            }\\n        }\\n    }\\n\\n\\n    function getPoolAvailableLiquidity(address _pool) external view returns (uint _token0Liquidity, uint _token1Liquidity) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            _token0Liquidity = IUnilendV2Pool(_pool).getAvailableLiquidity0();\\n            _token1Liquidity = IUnilendV2Pool(_pool).getAvailableLiquidity1();\\n        }\\n    }\\n    \\n\\n\\n\\n\\n    function setDefaultMarketConfig(uint8 _ltv, uint8 _lb, uint8 _rf) external onlyGovernor {\\n        require(_ltv > 0 && _ltv < 99, \\\"UnilendV2: INVALID RANGE\\\");\\n        require(_lb > 0 && _lb < (100-_ltv), \\\"UnilendV2: INVALID RANGE\\\");\\n        require(_rf > 0 && _rf < 90, \\\"UnilendV2: INVALID RANGE\\\");\\n        \\n        default_LTV = _ltv;\\n        default_LB = _lb;\\n        default_RF = _rf;\\n\\n        emit NewDefaultMarketConfig(_ltv, _lb, _rf); \\n    }\\n\\n    \\n    function setPoolLTV(address _pool, uint8 _number) external onlyGovernor {\\n        require(_number > 0 && _number < 99, \\\"UnilendV2: INVALID RANGE\\\");\\n\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            IUnilendV2Pool(_pool).setLTV(_number);\\n        }\\n    }\\n    \\n    function setPoolLB(address _pool, uint8 _number) external onlyGovernor {\\n        require(_number > 0 && _number < 99, \\\"UnilendV2: INVALID RANGE\\\");\\n\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            IUnilendV2Pool(_pool).setLB(_number);\\n        }\\n    }\\n    \\n    function setPoolRF(address _pool, uint8 _number) external onlyGovernor {\\n        require(_number > 0 && _number < 99, \\\"UnilendV2: INVALID RANGE\\\");\\n\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            IUnilendV2Pool(_pool).setRF(_number);\\n        }\\n    }\\n\\n    function setPoolInterestRateAddress(address _pool, address _address) external onlyGovernor {\\n        require(_address != address(0), \\\"UnilendV2: ZERO ADDRESS\\\");\\n\\n        (address _token0, ) = getPoolTokens(_pool);\\n        if(_token0 != address(0)){\\n            IUnilendV2Pool(_pool).setInterestRateAddress(_address);\\n        }\\n    }\\n\\n    function setDefaultInterestRateAddress(address _address) external onlyGovernor {\\n        require(_address != address(0), \\\"UnilendV2: ZERO ADDRESS\\\");\\n        defaultInterestRate = _address;\\n\\n        emit NewDefaultInterestRateAddress(_address); \\n    }\\n\\n\\n    /**\\n    * @dev set new admin for contract.\\n    * @param _address the address of new governor\\n    **/\\n    function setGovernor(address _address) external onlyGovernor {\\n        require(_address != address(0), \\\"UnilendV2: ZERO ADDRESS\\\");\\n        governor = _address;\\n\\n        emit NewGovernorAddress(_address); \\n    }\\n    \\n    function setPositionAddress(address _address) external onlyGovernor {\\n        require(_address != address(0), \\\"UnilendV2: ZERO ADDRESS\\\");\\n        require(positionsAddress == address(0), \\\"UnilendV2: Position Address Already Set\\\");\\n        positionsAddress = _address;\\n\\n        emit NewPositionAddress(_address); \\n    }\\n    \\n    /**\\n    * @dev set new oracle address.\\n    * @param _address new address\\n    **/\\n    function setOracleAddress(address _address) external onlyGovernor {\\n        require(_address != address(0), \\\"UnilendV2: ZERO ADDRESS\\\");\\n        oracleAddress = _address;\\n\\n        emit NewOracleAddress(_address); \\n    }\\n    \\n    /**\\n    * @dev set new distributor address.\\n    * @param _address new address\\n    **/\\n    function setDistributorAddress(address payable _address) external onlyGovernor {\\n        require(_address != address(0), \\\"UnilendV2: ZERO ADDRESS\\\");\\n        distributorAddress = _address;\\n    }\\n    \\n    /**\\n    * @dev set new flash loan fees.\\n    * @param _newFeeTotal total fee\\n    * @param _newFeeProtocol protocol fee\\n    **/\\n    function setFlashLoanFeesInBips(uint _newFeeTotal, uint _newFeeProtocol) external onlyGovernor returns (bool) {\\n        require(_newFeeTotal > 0 && _newFeeTotal < 10000, \\\"UnilendV1: INVALID TOTAL FEE RANGE\\\");\\n        require(_newFeeProtocol > 0 && _newFeeProtocol < 10000, \\\"UnilendV1: INVALID PROTOCOL FEE RANGE\\\");\\n        \\n        FLASHLOAN_FEE_TOTAL = _newFeeTotal;\\n        FLASHLOAN_FEE_PROTOCOL = _newFeeProtocol;\\n        \\n        return true;\\n    }\\n    \\n    \\n    function transferFlashLoanProtocolFeeInternal(address _pool, address _token, uint256 _amount) internal {\\n        if(distributorAddress != address(0)){\\n            IUnilendV2Pool(_pool).transferFlashLoanProtocolFee(distributorAddress, _token, _amount);\\n        }\\n    }\\n    \\n    \\n    /**\\n    * @dev allows smartcontracts to access the liquidity of the pool within one transaction,\\n    * as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts\\n    * that must be kept into consideration.\\n    * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.\\n    * @param _pool the address of the principal reserve pool\\n    * @param _amount the amount requested for this flashloan\\n    **/\\n    function flashLoan(address _receiver, address _pool, int _amount, bytes calldata _params)\\n        external\\n        nonReentrant\\n    {\\n        (address _token0, address _token1) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n        \\n        address _reserve = _amount < 0 ? _token0 : _token1;\\n        uint _amountU =  _amount < 0 ? uint(-_amount) : uint(_amount);\\n\\n        //check that the reserve has enough available liquidity\\n        uint256 availableLiquidityBefore = IERC20(_reserve).balanceOf(_pool);\\n        \\n        require(\\n            availableLiquidityBefore >= _amountU,\\n            \\\"There is not enough liquidity available to borrow\\\"\\n        );\\n\\n        (uint256 totalFeeBips, uint256 protocolFeeBips) = getFlashLoanFeesInBips();\\n        //calculate amount fee\\n        uint256 amountFee = _amountU.mul(totalFeeBips).div(10000);\\n\\n        //protocol fee is the part of the amountFee reserved for the protocol - the rest goes to depositors\\n        uint256 protocolFee = amountFee.mul(protocolFeeBips).div(10000);\\n        require(\\n            amountFee > 0 && protocolFee > 0,\\n            \\\"The requested amount is too small for a flashLoan.\\\"\\n        );\\n        \\n        IUnilendV2Pool(_pool).processFlashLoan(_receiver, _amount);\\n        \\n        IFlashLoanReceiver(_receiver).executeOperation(_reserve, _amountU, amountFee, _params);\\n\\n        //check that the actual balance of the core contract includes the returned amount\\n        uint256 availableLiquidityAfter = IERC20(_reserve).balanceOf(_pool);\\n\\n        require(\\n            availableLiquidityAfter == availableLiquidityBefore.add(amountFee),\\n            \\\"The actual balance of the protocol is inconsistent\\\"\\n        );\\n        \\n        transferFlashLoanProtocolFeeInternal(_pool, _reserve, protocolFee);\\n\\n        // solium-disable-next-line\\n        emit FlashLoan(_receiver, _reserve, _amount, amountFee, protocolFee, block.timestamp);\\n    }\\n    \\n    \\n\\n    \\n    \\n    /**\\n    * @dev deposits The underlying asset into the reserve.\\n    * @param _pool the address of the pool\\n    * @param _amount the amount to be deposited\\n    **/\\n    function lend(address _pool, int _amount) external onlyAmountNotZero(_amount) nonReentrant returns(int mintedTokens) {\\n        (address _token0, address _token1) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n\\n        uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, msg.sender);\\n        if(_nftID == 0){\\n            _nftID = IUnilendV2Position(positionsAddress).newPosition(_pool, msg.sender);\\n        }\\n\\n        address _reserve = _amount < 0 ? _token0 : _token1;\\n        mintedTokens = iLend(_pool, _reserve, _amount, _nftID);\\n    }\\n    \\n    function iLend(address _pool, address _token, int _amount, uint _nftID) internal returns(int mintedTokens) {\\n        address _user = msg.sender;\\n        IUnilendV2Pool(_pool).accrueInterest();\\n        \\n        if(_amount < 0){\\n            uint reserveBalance = IERC20(_token).balanceOf(_pool);\\n            IERC20(_token).safeTransferFrom(_user, _pool, uint(-_amount));\\n            _amount = -int( ( IERC20(_token).balanceOf(_pool) ).sub(reserveBalance) );\\n        }\\n        \\n        if(_amount > 0){\\n            uint reserveBalance = IERC20(_token).balanceOf(_pool);\\n            IERC20(_token).safeTransferFrom(_user, _pool, uint(_amount));\\n            _amount = int( ( IERC20(_token).balanceOf(_pool) ).sub(reserveBalance) );\\n        }\\n\\n        mintedTokens = IUnilendV2Pool(_pool).lend(_nftID, _amount);\\n    }\\n    \\n    \\n    /**\\n    * @dev Redeems the uTokens for underlying assets.\\n    * @param _pool the address of the pool\\n    * @param _token_amount the amount to be redeemed\\n    **/\\n    function redeem(address _pool, int _token_amount, address _receiver) external nonReentrant returns(int redeemTokens) {\\n        (address _token0, ) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n\\n        uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, msg.sender);\\n        require(_nftID > 0, 'UnilendV2: POSITION NOT FOUND');\\n        \\n        redeemTokens = IUnilendV2Pool(_pool).redeem(_nftID, _token_amount, _receiver);\\n    }\\n    \\n    /**\\n    * @dev Redeems the underlying amount of assets.\\n    * @param _pool the address of the pool\\n    * @param _amount the amount to be redeemed\\n    **/\\n    function redeemUnderlying(address _pool, int _amount, address _receiver) external onlyAmountNotZero(_amount) nonReentrant returns(int _token_amount){\\n        (address _token0, ) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n\\n        uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, msg.sender);\\n        require(_nftID > 0, 'UnilendV2: POSITION NOT FOUND');\\n        \\n        _token_amount = IUnilendV2Pool(_pool).redeemUnderlying(_nftID, _amount, _receiver);\\n    }\\n    \\n    \\n    \\n    function borrow(address _pool, int _amount, uint _collateral_amount, address payable _recipient) external onlyAmountNotZero(_amount) nonReentrant {\\n        (address _token0, address _token1) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n        \\n        IUnilendV2Pool _poolContract = IUnilendV2Pool(_pool);\\n        address _user = msg.sender;\\n\\n        uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _user);\\n        if(_nftID == 0){\\n            _nftID = IUnilendV2Position(positionsAddress).newPosition(_pool, _user);\\n        }\\n        \\n        if(_amount < 0){\\n            require(\\n                _poolContract.getAvailableLiquidity0() >= uint(-_amount),\\n                \\\"There is not enough liquidity0 available to borrow\\\"\\n            );\\n            \\n            // lend collateral \\n            if(_collateral_amount > 0){\\n                iLend(_pool, _token1, int(_collateral_amount), _nftID);\\n            }\\n        }\\n        \\n        \\n        if(_amount > 0){\\n            require(\\n                _poolContract.getAvailableLiquidity1() >= uint(_amount),\\n                \\\"There is not enough liquidity1 available to borrow\\\"\\n            );\\n            \\n            // lend collateral \\n            if(_collateral_amount > 0){\\n                iLend(_pool, _token0, -int(_collateral_amount), _nftID);\\n            }\\n        }\\n        \\n        _poolContract.borrow(_nftID, _amount, _recipient);\\n    }\\n    \\n    \\n    function repay(address _pool, int _amount, address _for) external onlyAmountNotZero(_amount) nonReentrant returns (int _retAmount) {\\n        (address _token0, address _token1) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n        \\n        IUnilendV2Pool _poolContract = IUnilendV2Pool(_pool);\\n        address _user = msg.sender;\\n\\n        uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _for);\\n        require(_nftID > 0, 'UnilendV2: POSITION NOT FOUND');\\n        \\n        _retAmount = _poolContract.repay(_nftID, _amount, _user);\\n        \\n        if(_retAmount < 0){\\n            IERC20(_token0).safeTransferFrom(_user, _pool, uint(-_retAmount));\\n        }\\n        \\n        if(_retAmount > 0){\\n            IERC20(_token1).safeTransferFrom(_user, _pool, uint(_retAmount));\\n        }\\n    }\\n    \\n    \\n    \\n    \\n    function liquidate(address _pool, address _for, int _amount, address _receiver, bool uPosition) external onlyAmountNotZero(_amount) nonReentrant returns(int payAmount) {\\n        (address _token0, address _token1) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n        \\n        IUnilendV2Pool _poolContract = IUnilendV2Pool(_pool);\\n        address _user = msg.sender;\\n\\n        uint _nftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _for);\\n        require(_nftID > 0, 'UnilendV2: POSITION NOT FOUND');\\n\\n        if(uPosition){\\n            uint _toNftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _receiver);\\n            if(_toNftID == 0){\\n                _toNftID = IUnilendV2Position(positionsAddress).newPosition(_pool, _receiver);\\n            }\\n\\n            payAmount = _poolContract.liquidate(_nftID, _amount, _receiver, _toNftID);\\n        } \\n        else {\\n            payAmount = _poolContract.liquidate(_nftID, _amount, _receiver, 0);\\n        }\\n        \\n\\n        if(payAmount < 0){\\n            IERC20(_token0).safeTransferFrom(_user, _pool, uint(-payAmount));\\n        }\\n        \\n        if(payAmount > 0){\\n            IERC20(_token1).safeTransferFrom(_user, _pool, uint(payAmount));\\n        }\\n    }\\n\\n    \\n    function liquidateMulti(address _pool, uint[] calldata _nftIDs, int[] calldata _amounts, address _receiver, bool uPosition) external nonReentrant returns (int payAmount){\\n        (address _token0, address _token1) = getPoolTokens(_pool);\\n        require(_token0 != address(0), 'UnilendV2: POOL NOT FOUND');\\n        require(_nftIDs.length == _amounts.length, 'UnilendV2: INVALID ARRAY LENGTH');\\n        \\n        IUnilendV2Pool _poolContract = IUnilendV2Pool(_pool);\\n        address _user = msg.sender;\\n\\n        if(uPosition){\\n            uint _toNftID = IUnilendV2Position(positionsAddress).getNftId(_pool, _receiver);\\n            if(_toNftID == 0){\\n                _toNftID = IUnilendV2Position(positionsAddress).newPosition(_pool, _receiver);\\n            }\\n\\n            payAmount = _poolContract.liquidateMulti(_nftIDs, _amounts, _receiver, _toNftID);\\n        } \\n        else {\\n            payAmount = _poolContract.liquidateMulti(_nftIDs, _amounts, _receiver, 0);\\n        }\\n\\n        if(payAmount < 0){\\n            IERC20(_token0).safeTransferFrom(_user, _pool, uint(-payAmount));\\n        }\\n        \\n        if(payAmount > 0){\\n            IERC20(_token1).safeTransferFrom(_user, _pool, uint(payAmount));\\n        }\\n    }\\n    \\n    \\n    \\n    /**\\n    * @dev Creates pool for assets.\\n    * This function is executed by the overlying uToken contract.\\n    * @param _tokenA the address of the token0\\n    * @param _tokenB the address of the token1\\n    **/\\n    function createPool(address _tokenA, address _tokenB) public returns (address) {\\n        (address token0, address token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n        require(_tokenA != address(0), 'UnilendV2: ZERO ADDRESS');\\n        require(_tokenA != _tokenB, 'UnilendV2: IDENTICAL ADDRESSES');\\n        require(getPool[token0][token1] == address(0), 'UnilendV2: POOL ALREADY CREATED');\\n        \\n        address _poolNft;\\n        bytes20 targetBytes = bytes20(poolMasterAddress);\\n\\n        require(IERC20Metadata(token0).totalSupply() > 0, 'UnilendV2: INVALID ERC20 TOKEN');\\n        require(IERC20Metadata(token1).totalSupply() > 0, 'UnilendV2: INVALID ERC20 TOKEN');\\n\\n        \\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            _poolNft := create(0, clone, 0x37)\\n        }\\n        \\n        address _poolAddress = address(_poolNft);\\n        \\n        IUnilendV2Pool(_poolAddress).init(token0, token1, defaultInterestRate, default_LTV, default_LB, default_RF);\\n        \\n        poolTokens storage pt = Pool[_poolAddress];\\n        pt.token0 = token0;\\n        pt.token1 = token1;\\n        \\n        getPool[token0][token1] = _poolAddress;\\n        getPool[token1][token0] = _poolAddress; // populate mapping in the reverse direction\\n        \\n        poolLength++;\\n        \\n        emit PoolCreated(token0, token1, _poolAddress, poolLength);\\n        \\n        return _poolAddress;\\n    }\\n    \\n    \\n}\\n\"\r\n    },\r\n    \"/contracts/lib/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolMasterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewDefaultInterestRateAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_ltv\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_lb\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_rf\",\"type\":\"uint8\"}],\"name\":\"NewDefaultMarketConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewGovernorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewOracleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewPositionAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOfUserToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendBalance0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowBalance0\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOfUserToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendBalance1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowBalance1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOfUserTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendBalance0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowBalance0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendBalance1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowBalance1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultInterestRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeesInBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getOraclePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_token0Liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1Liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"getPoolByTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_healthFactor0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_healthFactor1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"mintedTokens\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"uPosition\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"payAmount\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_nftIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_amounts\",\"type\":\"int256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"uPosition\",\"type\":\"bool\"}],\"name\":\"liquidateMulti\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"payAmount\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolMasterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_token_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"redeemTokens\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_token_amount\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"_retAmount\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDefaultInterestRateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_ltv\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_lb\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_rf\",\"type\":\"uint8\"}],\"name\":\"setDefaultMarketConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeeProtocol\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeesInBips\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPoolInterestRateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_number\",\"type\":\"uint8\"}],\"name\":\"setPoolLB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_number\",\"type\":\"uint8\"}],\"name\":\"setPoolLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_number\",\"type\":\"uint8\"}],\"name\":\"setPoolRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPositionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"shareOfUserToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendShare0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowShare0\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"shareOfUserToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendShare1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowShare1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"shareOfUserTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lendShare0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowShare0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendShare1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowShare1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnilendV2Core", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c86d2555f8c360d3c5e8e4364f42c1f2d169330e", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}