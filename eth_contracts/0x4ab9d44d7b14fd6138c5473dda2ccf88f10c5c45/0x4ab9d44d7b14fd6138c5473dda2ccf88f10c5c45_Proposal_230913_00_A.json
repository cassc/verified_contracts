{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Proposal_230913_00_Add_New_Pancake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport {IProposal} from \\\"src/interfaces/IProposal.sol\\\";\\nimport {ISingleAssetVault} from \\\"src/interfaces/ISingleAssetVault.sol\\\";\\n\\n/// @title This proposal should be executed on Mainnet and adds new Pancake V3 USDT/TUSD strategy to USDT single asset vault\\ncontract Proposal_230913_00_Add_New_Pancake is IProposal\\n{\\n\\tfunction execute() external\\n\\t{\\n\\t\\tISingleAssetVault sav = ISingleAssetVault(0x85983B29Ee3795559d654cF210a089CD66876fce);\\n        sav.addVault(0x3BD6b26C7F805E24fCCF8164302b8d72A728Edf7);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IProposal.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface IProposal {\\n    function execute() external;\\n}\"\r\n    },\r\n    \"src/interfaces/ISingleAssetVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface ISingleAssetVault {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event VaultAdded(address vault);\\n    event VaultRemoved(address vault);\\n    event Withdraw(\\n        address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares\\n    );\\n\\n    struct CallData {\\n        address to;\\n        bytes data;\\n        uint256 value;\\n    }\\n\\n    function addVault(address vault) external;\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function asset() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function call(CallData[] memory calls) external;\\n    function computeScoreDeviationInPpm(address vaultAddress) external view returns (int256);\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n    function decimals() external view returns (uint8);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n    function getVault(uint256 index) external view returns (address);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function name() external view returns (string memory);\\n    function oracle() external view returns (address);\\n    function owner() external view returns (address);\\n    function previewRedeem(uint256 shares) external returns (uint256 assets);\\n    function previewRedeemHelper(uint256 shares) external;\\n    function pricePerToken() external view returns (uint256);\\n    function rebalance(address sourceVault, address destinationVault, uint256 shares) external;\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n    function removeVault(address vault) external;\\n    function renounceOwnership() external;\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n    function symbol() external view returns (string memory);\\n    function totalAssets() external view returns (uint256);\\n    function totalPortfolioScore() external view returns (uint256 total);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function transferOwnership(address newOwner) external;\\n    function vaultsLength() external view returns (uint256);\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Proposal_230913_00_Add_New_Pancake", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}