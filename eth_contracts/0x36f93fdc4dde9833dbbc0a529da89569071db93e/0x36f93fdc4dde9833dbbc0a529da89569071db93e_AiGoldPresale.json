{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AIGOLD presale.sol\": {\r\n      \"content\": \"///SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts@5.0.0/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts@5.0.0/interfaces/IERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts@5.0.0/access/Ownable.sol\\\";\\r\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts@5.0.0/access/Ownable2Step.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts@5.0.0/utils/ReentrancyGuard.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract AiGoldPresale is Ownable2Step, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    ///Custom errors\\r\\n    error ZeroAmountNotAllowed();\\r\\n    error ZeroAddressNotAllowed();\\r\\n    error InvalidRound();\\r\\n    error ClaimsAreNotAvailableYet();\\r\\n    error TokenClaimFailed();\\r\\n    error CannotClaimNativeTokens();\\r\\n    error MaxWalletCapReached();\\r\\n    error AmountExceedsAvailableTokens();\\r\\n    error USDPaymentFailed();\\r\\n    error ETHTransferFailed();\\r\\n    error MinimumAmountIs10USD();\\r\\n    error PresaleRoundIsAlreadyOver();\\r\\n    error AlreadyClaimed();\\r\\n    error ClaimsAreEnabledAlready();\\r\\n    error CannotSetDateInPast();\\r\\n    error CannotSetThePastRoundPrice();\\r\\n    error PresaleIsPaused();\\r\\n    error AmountMustBeLessThanAvailableTokens();\\r\\n    error PresaleIsOver();\\r\\n    error ETHRefundFailed();\\r\\n    error ValuesAlreadyExists();\\r\\n    error PriceCantNotBeZero();\\r\\n    error UpdateBoolValue();\\r\\n    error AlreadyAMultiSigWallet();\\r\\n\\r\\n    ////struct for Round details\\r\\n    struct Round {\\r\\n        uint256 currentPrice;\\r\\n        uint256 nextPrice;\\r\\n        uint256 totalTokens;\\r\\n        uint256 totalSold;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n    }\\r\\n\\r\\n    /// struct for user information\\r\\n    struct User {\\r\\n        uint256 totalUSDContributed;\\r\\n        uint256 totalTokensBought;\\r\\n        uint256 totalTokensClaimed;\\r\\n    }\\r\\n    //// CONSTANTS ////\\r\\n\\r\\n    /// @notice token decimals\\r\\n    uint256 private constant TOKEN_DECIMALS = 9;\\r\\n    /// @notice usdt decimals\\r\\n    uint256 private constant USDT_DECIMALS = 6;\\r\\n    /// @notice base decimals (wei)\\r\\n    uint256 private constant BASE_DECIMALS = 18;\\r\\n    /// @notice max wallet limit for user, how much tokens a user can buy\\r\\n    uint256 private constant MAX_WALLET_CAP = 30_000_000 * 10 ** TOKEN_DECIMALS;\\r\\n    /// @notice no. of tokens in each round\\r\\n    uint256 private constant tokensPerRound = 112_500_000 * 10 ** TOKEN_DECIMALS;\\r\\n    /// @notice total no. of rounds\\r\\n    uint256 private constant totalRounds = 12;\\r\\n\\r\\n    /// @notice token that will be accepted in presale with eth\\r\\n    IERC20 public immutable USDT;\\r\\n    /// @notice chainlink price feed\\r\\n    AggregatorV3Interface private immutable priceFeed;\\r\\n\\r\\n    /// @notice multisig, where all funds will be stored\\r\\n    address public multiSig;\\r\\n    /// @notice token for sale\\r\\n    IERC20 public token;\\r\\n\\r\\n    /// @notice total tokens for sale\\r\\n    uint256 public totalTokensForSale = tokensPerRound * totalRounds;\\r\\n    /// @notice total usdt raised\\r\\n    uint256 public totalUSDRaised;\\r\\n    /// @notice total tokens sold\\r\\n    uint256 public totalTokensSold;\\r\\n    /// @notice current round\\r\\n    uint256 public currentRound = 1;\\r\\n    /// @notice claim enabled status\\r\\n    bool private claimEnabled = false;\\r\\n    /// @notice presale status if paused or not \\r\\n    bool private paused = false;\\r\\n\\r\\n    /// @notice mapping for user info\\r\\n    mapping(address => User) public users;\\r\\n    /// @notice mapping for rounds info\\r\\n    mapping(uint256 => Round) public rounds;\\r\\n\\r\\n    //// Events\\r\\n    event TokensClaimed(address indexed user, uint256 indexed amount);\\r\\n    event TokensBought(address indexed user, uint256 indexed usd);\\r\\n    event ClaimEnabled (bool indexed value);\\r\\n    event PresalePaused (bool indexed value);\\r\\n    event PriceUpdated (uint256 indexed currentRoundPrice, uint256 indexed nextRoundPrice);\\r\\n    event PresaleDateUpdated (uint256 indexed newEndTime);\\r\\n    event MultiSigUpdated(address indexed newMultiSig);\\r\\n    event NextRoundStarted(uint256 indexed round);\\r\\n\\r\\n    /// @dev create a presale contract using openzeppelin ownable2Step, ReentrancyGuard and\\r\\n    /// using safeERC20, chainlink aggregator interface. Initilizing the token, usdt and price feed values\\r\\n    /// along with multisig and starting first round.\\r\\n    constructor() Ownable(msg.sender) {\\r\\n        USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n        priceFeed = AggregatorV3Interface(\\r\\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\r\\n        );\\r\\n        \\r\\n        multiSig = 0x6cAaD4f38661a9fC783758CAAf0b1e8713e68E8B; \\r\\n        switchRound(1);\\r\\n    }\\r\\n\\r\\n    //// modifier which checks if round is valid and user is buying\\r\\n    /// within valid time (that's within round start and end date)\\r\\n    modifier validRoundCheck() {\\r\\n        if (paused) {\\r\\n            revert PresaleIsPaused();\\r\\n        }\\r\\n        if ( currentRound > 12) {\\r\\n            revert InvalidRound();\\r\\n        }\\r\\n        Round storage liveRound = rounds[currentRound];\\r\\n        uint256 availableTokens = liveRound.totalTokens - liveRound.totalSold;\\r\\n        if (availableTokens == 0 && currentRound == 12) {\\r\\n            revert PresaleIsOver();\\r\\n        }\\r\\n        if (\\r\\n             block.timestamp > liveRound.endTime\\r\\n        ) {\\r\\n            revert PresaleRoundIsAlreadyOver();\\r\\n        }\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// internal function to switch to next round\\r\\n    /// @param _round: round to switch\\r\\n    function switchRound(uint256 _round) internal {\\r\\n        if ( _round > 12) {\\r\\n            revert InvalidRound();\\r\\n        }\\r\\n        if (_round == 1) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 3500;\\r\\n            round.nextPrice = 4500;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n\\r\\n        } else if (_round == 2) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 4500;\\r\\n            round.nextPrice = 5500;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n\\r\\n        } else if (_round == 3) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 5500;\\r\\n            round.nextPrice = 7500;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n\\r\\n        } else if (_round == 4) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 7500;\\r\\n            round.nextPrice = 10000;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n\\r\\n        } else if (_round == 5) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 10000;\\r\\n            round.nextPrice = 12500;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n\\r\\n        } else if (_round == 6) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 12500;\\r\\n            round.nextPrice = 15000;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n\\r\\n        } else if (_round == 7) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 15000;\\r\\n            round.nextPrice = 17500;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n        \\r\\n        } else if (_round == 8) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 17500;\\r\\n            round.nextPrice = 20000;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n            \\r\\n        } else if (_round == 9) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 20000;\\r\\n            round.nextPrice = 22500;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n            \\r\\n        } else if (_round == 10) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 22500;\\r\\n            round.nextPrice = 25000;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n            \\r\\n        }\\r\\n\\r\\n        else if (_round == 11) {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 25000;\\r\\n            round.nextPrice = 30000;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n            \\r\\n        } else {\\r\\n            Round storage round = rounds[_round];\\r\\n            round.currentPrice = 30000;\\r\\n            round.nextPrice = 35000;\\r\\n            round.totalTokens = tokensPerRound;\\r\\n            round.totalSold = 0;\\r\\n            round.startTime = block.timestamp;\\r\\n            round.endTime = block.timestamp + 14 days;\\r\\n            \\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// users can buy tokens using usdt\\r\\n    /// @param _usdAmount: usd amount user want to spend to buy tokens\\r\\n    function buyWithUSDT(\\r\\n        uint256 _usdAmount\\r\\n    ) external validRoundCheck nonReentrant {\\r\\n        buyTokens(_usdAmount, true);\\r\\n    }\\r\\n\\r\\n    /// @dev buys tokens using ether\\r\\n    /// users can buy tokens by inputting the ether amount.\\r\\n    function buyWithETH() external payable validRoundCheck nonReentrant {\\r\\n        uint256 _usdAmount = ethUSDHelper(msg.value);\\r\\n        buyTokens(_usdAmount, false);\\r\\n    }\\r\\n\\r\\n    /// @notice users can claim tokens, as soon as claims are enabled\\r\\n    function claim() external nonReentrant {\\r\\n        if (!claimEnabled) {\\r\\n            revert ClaimsAreNotAvailableYet();\\r\\n        }\\r\\n        User storage user = users[msg.sender];\\r\\n        if (user.totalTokensClaimed > 0) {\\r\\n            revert AlreadyClaimed();\\r\\n        }\\r\\n        uint256 availableToClaim = user.totalTokensBought;\\r\\n        user.totalTokensClaimed = availableToClaim;\\r\\n\\r\\n        uint256 balanceBefore = token.balanceOf(msg.sender);\\r\\n        token.safeTransfer(msg.sender, availableToClaim);\\r\\n        uint256 balanceAfter = token.balanceOf(msg.sender);\\r\\n\\r\\n        if (balanceAfter - balanceBefore != availableToClaim) {\\r\\n            revert TokenClaimFailed();\\r\\n        }\\r\\n        emit TokensClaimed(msg.sender, availableToClaim);\\r\\n    }\\r\\n\\r\\n    /// @dev manage token buy for eth, usd\\r\\n    ///Requirements -\\r\\n    /// Minimum amount is 10 usd\\r\\n    /// user can buy within duration of sale\\r\\n    /// if user USD amount is more than worth existing round tokens, it will\\r\\n    /// calculate the remaining usd for next round price.\\r\\n    /// Example - if token price for round 1 is 0.01 usd and 100 tokens are left.\\r\\n    /// now user input 100 usd, so he will get 100 tokens at the rate of 0.01 usd (1 usd)\\r\\n    /// For remaing 99 usd, he will get price of round 2. (which can be say 0.015 usd per token)\\r\\n    /// In case it's round 12, then extra amount is refunded. If he is buying using usdt, then\\r\\n    /// only required amount is deducted. In case of eth, any extra supplied eth is sent back to\\r\\n    /// user within same tx\\r\\n    /// user can max buy upto maxWalletLimit.\\r\\n    function buyTokens(uint256 _usdAmount, bool value) private {\\r\\n        if (_usdAmount < 10e6) {\\r\\n            revert MinimumAmountIs10USD();\\r\\n        }\\r\\n        \\r\\n        User storage user = users[msg.sender];\\r\\n        Round storage round = rounds[currentRound];\\r\\n        uint256 availableTokens = round.totalTokens - round.totalSold;\\r\\n        uint256 outputTokens = getTokenAmount(_usdAmount);\\r\\n\\r\\n        if (availableTokens >= outputTokens) {\\r\\n            round.totalSold = round.totalSold + outputTokens;\\r\\n        } else {\\r\\n            round.totalSold = round.totalSold + availableTokens;\\r\\n        }\\r\\n\\r\\n        if (outputTokens > availableTokens && currentRound < 12) {\\r\\n            /// cache round price from prev round\\r\\n            uint256 currentRoundPrice = round.nextPrice;\\r\\n            currentRound = currentRound + 1;\\r\\n            switchRound(currentRound);\\r\\n            Round storage roundNext = rounds[currentRound];\\r\\n            roundNext.totalSold =\\r\\n                roundNext.totalSold +\\r\\n                (outputTokens - availableTokens);\\r\\n            /// if price is updated in prev round for this round,\\r\\n            /// should reflect here as well    \\r\\n            if(roundNext.currentPrice != currentRoundPrice){\\r\\n                roundNext.currentPrice = currentRoundPrice;\\r\\n            }    \\r\\n        }\\r\\n\\r\\n        \\r\\n        uint256 extraUsd = 0;\\r\\n        if (currentRound == 12 && outputTokens > availableTokens) {\\r\\n           uint256 usdRequired =\\r\\n                (availableTokens * round.currentPrice) /\\r\\n                10 ** TOKEN_DECIMALS;\\r\\n            /// When user input is say 100 usd, but tokens available are worth \\r\\n            /// 80 usd only, then only 80 usd is deducted by the presale contract\\r\\n            /// 20 stays in his wallet    \\r\\n            /// When he pays in eth, then as he is sending msg.value worth 100 usd,\\r\\n            /// so 20 usd worth is returned to user within same tx.\\r\\n            if (usdRequired > 0) {\\r\\n                 extraUsd = _usdAmount - usdRequired;\\r\\n                _usdAmount = usdRequired; /// only deduct required usd amount\\r\\n                outputTokens = availableTokens;\\r\\n            }\\r\\n        }\\r\\n       \\r\\n        if (user.totalTokensBought + outputTokens > MAX_WALLET_CAP) {\\r\\n            revert MaxWalletCapReached();\\r\\n        }\\r\\n         \\r\\n        if (value) {\\r\\n            uint256 multiSigBalanceBefore = USDT.balanceOf(multiSig);\\r\\n            USDT.safeTransferFrom(msg.sender, multiSig, _usdAmount);\\r\\n            uint256 multiSigBalanceAfter = USDT.balanceOf(multiSig);\\r\\n\\r\\n            if (multiSigBalanceAfter <= multiSigBalanceBefore) {\\r\\n                revert USDPaymentFailed();\\r\\n            }\\r\\n        } else  {\\r\\n            uint256 refund = 0;\\r\\n            uint256 ethRequired = msg.value;\\r\\n            if (extraUsd > 0) {\\r\\n                uint256 oneETH = getLatestPrice();\\r\\n                uint256 priceFeedDecimals = priceFeed.decimals();\\r\\n                ///using multiplier to keep eth calculation upto 18 decimals (wei)\\r\\n                uint256 multiplier = BASE_DECIMALS + priceFeedDecimals - USDT_DECIMALS;\\r\\n                ethRequired = (_usdAmount * 10 ** multiplier) / oneETH;\\r\\n                refund  = msg.value - ethRequired;\\r\\n            }\\r\\n             \\r\\n             /// send required eth to multisig\\r\\n            (bool success, ) = payable(multiSig).call{value: ethRequired}(\\\"\\\");\\r\\n            if (!success) {\\r\\n                revert ETHTransferFailed();\\r\\n            }\\r\\n            /// if user has refund, sent that back to user\\r\\n            if (refund > 0) {\\r\\n                (bool sent, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\r\\n                if (!sent) {\\r\\n                    revert ETHRefundFailed();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        user.totalUSDContributed = user.totalUSDContributed + _usdAmount;\\r\\n        user.totalTokensBought = user.totalTokensBought + outputTokens;\\r\\n\\r\\n        totalTokensSold = totalTokensSold + outputTokens;\\r\\n        totalUSDRaised = totalUSDRaised + _usdAmount;\\r\\n        emit TokensBought(msg.sender, _usdAmount);\\r\\n    }\\r\\n\\r\\n    /// @dev enables claims globally, once enabled user can claim there tokens\\r\\n    /// make sure the contract has enough tokens in it\\r\\n    function enableClaims() external onlyOwner {\\r\\n        if (claimEnabled) {\\r\\n            revert ClaimsAreEnabledAlready();\\r\\n        }\\r\\n        \\r\\n        claimEnabled = true;\\r\\n        emit ClaimEnabled(true);\\r\\n    }\\r\\n\\r\\n    /// @dev update the current round end date\\r\\n    /// @param endDate: unixTimestamp for new end date for current round\\r\\n    function setEndDateForCurrentRound(uint256 endDate) external onlyOwner {\\r\\n        Round storage round = rounds[currentRound];\\r\\n        if (endDate < block.timestamp) {\\r\\n            revert CannotSetDateInPast();\\r\\n        }\\r\\n        round.endTime = endDate;\\r\\n        emit PresaleDateUpdated(endDate);\\r\\n    }\\r\\n\\r\\n    /// @dev update the price of token for current round\\r\\n    /// @param _newPrice: price in wei format (usd has 6 decimals only so set\\r\\n    /// @param _nextPrice; token price in wei format for next round than input\\r\\n    ///                  accordingly.\\r\\n    ///                  eg. 100 - 0.0001 usd\\r\\n    ///                      1000 - 0.001 usd, 10000 - 0.01 usd\\r\\n    function setPrice(\\r\\n        uint256 _newPrice,\\r\\n        uint256 _nextPrice\\r\\n    ) external onlyOwner {\\r\\n        if(_newPrice == 0 || _nextPrice == 0){\\r\\n            revert PriceCantNotBeZero();\\r\\n        }\\r\\n\\r\\n        Round storage round = rounds[currentRound];\\r\\n        \\r\\n        /// one of value can stay same if owner want to update only one value \\r\\n        if(_newPrice == round.currentPrice && _nextPrice == round.nextPrice){\\r\\n            revert ValuesAlreadyExists();\\r\\n        }\\r\\n        round.currentPrice = _newPrice;\\r\\n        round.nextPrice = _nextPrice;\\r\\n\\r\\n        emit PriceUpdated(_newPrice, _nextPrice);\\r\\n    }\\r\\n\\r\\n    /// @dev set the sale token address\\r\\n    /// @param _token: address of sale token\\r\\n    function setToken(address _token) external onlyOwner {\\r\\n        if (_token == address(0)) {\\r\\n            revert ZeroAddressNotAllowed();\\r\\n        }\\r\\n        token = IERC20(_token);\\r\\n    }\\r\\n\\r\\n    /// @dev update multisig/payment wallet address\\r\\n    /// @param _multisig: new wallet address\\r\\n    function updateMultiSigWallet (address _multisig) external onlyOwner {\\r\\n        if(_multisig == address(0)){\\r\\n            revert ZeroAddressNotAllowed();\\r\\n        }\\r\\n        if(_multisig == multiSig){\\r\\n            revert AlreadyAMultiSigWallet();\\r\\n        }\\r\\n        multiSig = _multisig;\\r\\n        emit MultiSigUpdated (_multisig);\\r\\n    }\\r\\n\\r\\n    /// @dev claim other erc20 tokens\\r\\n    function claimOtherERC20(\\r\\n        address othertkn,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        if (othertkn == address(token)) {\\r\\n            revert CannotClaimNativeTokens();\\r\\n        }\\r\\n        IERC20 otherToken = IERC20(othertkn);\\r\\n        otherToken.safeTransfer(owner(), amount);\\r\\n    }\\r\\n\\r\\n    /// @dev switch to next round\\r\\n    /// Requirements -\\r\\n    /// can't switch if it's already a last round\\r\\n    function switchToNextRound() external onlyOwner {\\r\\n        currentRound = currentRound + 1;\\r\\n        switchRound(currentRound);\\r\\n        emit NextRoundStarted (currentRound);\\r\\n    }\\r\\n\\r\\n    /// @dev claim ether if any\\r\\n    function claimEther() external onlyOwner {\\r\\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert ETHTransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev pause/unpause presale\\r\\n    function togglePauseUnpause() external onlyOwner {\\r\\n        paused = !paused;\\r\\n        emit PresalePaused(paused);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev add tokens to current sale round\\r\\n    /// @param amount: token amount to add\\r\\n    function addTokensToSale(uint256 amount) external onlyOwner {\\r\\n        Round storage round = rounds[currentRound];\\r\\n        round.totalTokens = round.totalTokens + amount;\\r\\n        totalTokensForSale = totalTokensForSale + amount;\\r\\n    }\\r\\n\\r\\n    /// @dev remove tokens to current sale round\\r\\n    /// @param amount: token amount to remove\\r\\n    function removeTokensFromSale(uint256 amount) external onlyOwner {\\r\\n        Round storage round = rounds[currentRound];\\r\\n        if (amount > round.totalTokens - round.totalSold) {\\r\\n            revert AmountMustBeLessThanAvailableTokens();\\r\\n        }\\r\\n        round.totalTokens = round.totalTokens - amount;\\r\\n        totalTokensForSale = totalTokensForSale - amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    /////// Getters ////////\\r\\n\\r\\n    /// @notice returns tokens for given usd amount\\r\\n    /// @param _usdAmount: usdt amount\\r\\n    /// @return tokensOutput : returns the tokens amount\\r\\n    function getTokenAmount(\\r\\n        uint256 _usdAmount\\r\\n    ) public view returns (uint256 tokensOutput) {\\r\\n        Round storage round = rounds[currentRound];\\r\\n        uint256 totalAvailableTokens = round.totalTokens - round.totalSold;\\r\\n        uint256 tokensAtCurrentPrice = (_usdAmount * 10 ** TOKEN_DECIMALS) /\\r\\n            round.currentPrice;\\r\\n\\r\\n        if (totalAvailableTokens >= tokensAtCurrentPrice) {\\r\\n            return tokensAtCurrentPrice;\\r\\n        } else if (\\r\\n            totalAvailableTokens < tokensAtCurrentPrice\\r\\n        ) {\\r\\n            uint256 usdUsed = (totalAvailableTokens * round.currentPrice) /\\r\\n                10 ** TOKEN_DECIMALS;\\r\\n            uint256 usdLeft = _usdAmount - usdUsed;\\r\\n            uint256 tokensFromNewRound;\\r\\n            if(currentRound < 12){\\r\\n                tokensFromNewRound = (usdLeft * 10 ** TOKEN_DECIMALS) /\\r\\n                round.nextPrice;\\r\\n            } else {\\r\\n                tokensFromNewRound = (usdLeft * 10 ** TOKEN_DECIMALS) /\\r\\n                round.currentPrice;\\r\\n                }\\r\\n            return tokensFromNewRound + totalAvailableTokens;\\r\\n        } \\r\\n    }\\r\\n\\r\\n    /// @dev Helper funtion to get USDT price for given amount of eth\\r\\n    /// @param amount No of tokens to buy\\r\\n    /// @return usdAmount for given input eth\\r\\n    function ethUSDHelper(\\r\\n        uint256 amount\\r\\n    ) public view returns (uint256 usdAmount) {\\r\\n        /// chainlink oracle return price upto 8 decimals\\r\\n        uint256 perEthPrice = getLatestPrice(); \\r\\n        /// as per chainlink docs, for non-eth pair(x/usd), oracles return values\\r\\n        /// upto 8 decimals. For eth pairs(x/eth) it return upto 18 decimals.\\r\\n        /// here, it's 8 decimals\\r\\n        uint256 priceFeedDecimals = priceFeed.decimals();\\r\\n        /// calculate difference b/w base decimals and usdt decimals\\r\\n        uint256 divisor  = BASE_DECIMALS + priceFeedDecimals - USDT_DECIMALS;\\r\\n        /// return usd amount upto 6 decimals\\r\\n        usdAmount = (perEthPrice * amount) / 10 ** divisor;\\r\\n    \\r\\n    }\\r\\n\\r\\n    /// @return Latest ETH price in usd\\r\\n    function getLatestPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @return  hardcap of current round in usd\\r\\n    function getHardcapCurrentRound() public view returns (uint256 hardcap) {\\r\\n        uint256 totalTokens = rounds[currentRound].totalTokens;\\r\\n        uint256 currentPrice = rounds[currentRound].currentPrice;\\r\\n        hardcap = (totalTokens * currentPrice) / 10 ** TOKEN_DECIMALS;\\r\\n       \\r\\n    }\\r\\n\\r\\n    /// @return raised amount of usd for current round\\r\\n    function getRaisedAmountCurrentRound()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 raised)\\r\\n    {\\r\\n        uint256 totalSold = rounds[currentRound].totalSold;\\r\\n        uint256 currentPrice = rounds[currentRound].currentPrice;\\r\\n        raised = (totalSold * currentPrice) / 10 ** TOKEN_DECIMALS;\\r\\n    }\\r\\n\\r\\n    /// @return endDate of current round\\r\\n    function getEndDateOfCurrentRound() public view returns (uint256 endDate) {\\r\\n        return rounds[currentRound].endTime;\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @return claim status if enabled or not\\r\\n    function getClaimStatus() public view returns (bool) {\\r\\n        return claimEnabled;\\r\\n    }\\r\\n\\r\\n    /// @return if presale is paused or not\\r\\n    function presalePausedStatus() public view returns (bool) {\\r\\n        return paused;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@5.0.0/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyAMultiSigWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountExceedsAvailableTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountMustBeLessThanAvailableTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimNativeTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetDateInPast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetThePastRoundPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimsAreEnabledAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimsAreNotAvailableYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHRefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxWalletCapReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountIs10USD\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleIsOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleRoundIsAlreadyOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceCantNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenClaimFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USDPaymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateBoolValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValuesAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ClaimEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMultiSig\",\"type\":\"address\"}],\"name\":\"MultiSigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"NextRoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"PresaleDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentRoundPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nextRoundPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokensToSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"othertkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimOtherERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethUSDHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndDateOfCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHardcapCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaisedAmountCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePausedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeTokensFromSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"setEndDateForCurrentRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchToNextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePauseUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"updateMultiSigWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUSDContributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AiGoldPresale", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}