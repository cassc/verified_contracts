{"SourceCode": "// SPDX-Liscence-Identifier: MIT\r\n\r\n/*\r\n\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWNNXKK00OOOkkxxddooodddddddxxxxkkOO0KKXNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXKK0OOkxxxxxxddddddddoooooooooolllllllccclllodxkO0XNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXK00Okkkkxxxxxxxxxxxddddddddooooooollllcccc:::::ccccccclodkOKXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNXK00OOOOOkkkkkxkkkkxxxxdddddddddooooollcc:::;;;;;;;;;:::::::::::cldxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXK00000OOOOOOkkkkkxxxxxxddddddddoooollllllcc:;;,,,,,'',,,,,,;;;;;::::::::coxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXK00000000OOOOkkkkkxxxxxxdddddddooollllllllccc::;,,,'''..'''''',,,;;::::::::::;:cox0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNXXXKK00000OOOOkkkkkxxxxxxdddddddooooollllccccccc::;;,,'''.....'''''',,;;;;:::::::::;;;:lx0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNXXXKKK0000OOkkkkkxxxxxxxxxxddddddooollllcccc::::::::;;,,,'''''''''''''',,,,,;;,,;;:::::::;;:lxKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXXXXKK000OOOOkkkkkxxxxxxxxxxxxxxdddooollllcccc::::::::;;;;,,,,,,,,''',,,,,,,,,,,,,,,;;:;;;;;;;;;:dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMWWNNXXXKKK00OOOOkkkkkxxxxxxxxxxkkkkkkkxxxddoollllccc::::::::;;;;;;,,,,;;,,,,,,,,,,,,,,,,'',,,,,'',,,,''';dKWMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMWWNXXXKK0000OOkkkxxxxxddxxxxxxxxkkkOkkkkkxxddoolllcccc:::::::;;;;;;;;;;;;,,,,,,,,,,,,,''''''.....'''..'''',:dKWMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMWWWNNXXKKK000OOOkkkxxxxxddxxxdddxxkkkkOkkkkkxxdddoolllccc::::::::;;;;;;;;,,,,,,,,,,,;;,,,''''''..........''''',;cd0NMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMWWNNXXKKK000OOOkkkkkxxxxxxxxxddddddxkkkkkkkkxxddddoollcc::;;;,,,,,,,,,,,;;,,,,,,,,,,;;;;,,,'''.............'''',;;;:oONWMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMWWNNXXKKK0000OOOkkkkkkkxxxxxxdddddooodxkxxxxkkxdlc:,''......         .......',,,,,;;,,,,,,,,,'''..............',;::;;;;:o0WMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMWWNNXXKK00000OOOOkkOkkkkkkxxxxxdddooddodddolc;,'..                            ....',;,,,,,,''''''............''';:c::;,,,,:xXWMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMWWNNXXKKK00000OOOOOOkkkkkkkkxxxxxdddoooool:,..                                       ..',,,,''''..............''',,;;;;,,,'',;l0WMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMWWWNNXXKKK00000OOOOOOOOOOOkkxxxxxxxddddol:,.                                             ..''''''''..........'''''',,,,,,,,,,,,,;ckNMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMWWNNXXXXKKK000000OOOOOOOOOOOkkxxxxxdddol;..                                                 ..'''',,,'.......''''''''''',,,;;;::;;;:dXWMMMMMMMMMMMM\r\nMMMMMMMMMMMMWWNNXXXXKKKK00000000OOOOOOOOOOOkxxxxddl;.                                                      ..',,,,,''...''''''''''',,,,;;;:::;;;;;lOWMMMMMMMMMMM\r\nMMMMMMMMMMWWWNNXXXXKKKKKKKK000OO00O00OOOOOOOOOOOkd;.                                                         .';;,,,''''''''',,,,,,,,,,,,,,,,,,,;;;cxXMMMMMMMMMM\r\nMMMMMMMMMMWWNNNXXXKKKKKKKKK000000000000OOOOOOOOOk:.                                                            .';;,,''',,,,,,,,,,,;;,,,,,,,,,,,;;;;:oKWMMMMMMMM\r\nMMMMMMMMWWWNNXXXKKKKKKKKK0000K000000000000OOOOOko'                                                               .,,,,,,;;;;;;;,,,,,,,,,,,,,,,,;;;:;;;l0WMMMMMMM\r\nMMMMMMMWWWNNXXXKKKKKKKKKK0000K000000000000O00OOkc...............                                                  ..,;;;;:::::::;;;,,,,,,,,,,,,;:::::;;cOWMMMMMM\r\nMMMMMMMWWNNXXXKKKKK000000000000000000000000OOOko,..''''..........                                                   .',;;:::::::::;;,,,,,,,;;;;;;:::::;;cOWMMMMM\r\nMMMMMMWWNNXXXKKKK00000000000000000OOOkkkkkOOkxl;,,'''''''........                                                    .,;::::cc::::;;;;,,;;;;::::::c::::;;cOWMMMM\r\nMMMMMWWWNNXXKKKK0000O00000000OkkOkxxxxxxxxxxoc;,,,,'''''''......                                                      .,::ccc:::::;;;;;;;;;:::ccccc::::::;l0MMMM\r\nMMMMWWWNNXXXKK00000000OO000000OOOOOOOOOkxxxo:;;;;,,,'''''.....                                                         .;:cccccc::::;;;;;;;;:ccccccccc:::::dXMMM\r\nMMMMWWNNNXXK00OO000000OO00000000000000Okkxl:;;;;;;,,,,'''....                                                           'clccccccc:::::;;;:::::cccccccc:::::kWMM\r\nMMMWWWNNXXK000OO0OO0000000000KK00000000OOxc;::::;;;,,,''....                                                            .;llllllllcccc:::cclcccccccccccc::::lKMM\r\nMMMWWNNXXK000OOOOOOO000000KKKK0000000000Oo:;::::::;;,,'....                                                              .:oooooollccccccllooollcc:ccccc:::::xNM\r\nMMWWWNNXXK0OOOOOOOO000000KKKKK00000000OOxc;;::::::;;;,,'...                                                               .coodddooooolllllllllllcccccccccc::l0M\r\nMMWWNNXXKK0OOOOO00OO000KKKKKKKK00OOOOOkkl;;;:::::;;;;;,'....                                                               ,ldddxddddoooollcccccllc::cccccc::cxN\r\nMWWWNNXXKK0OkkkkOOOO000KKKKKKKK0000OOOkd:;;;;::;;;;;;;,'''...                                                              .:dddxddddooooollcccccccccccccccc::oK\r\nMWWNNXXK0OOkkkxxkOOO00000KKKKK000K00OOxl;;;;;;;;;;;;;,,''.....                                                              .lxdddddoooooollllccclccccccclool:cO\r\nMWWNNXK0OkkkxxxddxOOO00000K00000000OOko;,,,,''',,,,,,,,'........                                                             ,oxxxddoddddoolllcccllllccccoddoccx\r\nWWWNNXK00OkxxddddxkOO0000KK000O0000OOx:'.........'''''''............                                                         .;dxxdddooddooolllllllllcccccllcccd\r\nMWWNNXK0OOkxxddddxxkOO000KK0000KK0000x;....'',,'....................                                                          .cdxxddddddooollllllllllcccccccccl\r\nMWWNNXK0OkkxxddddxxO0000000OO00KKKK00Ol'...',;;,,'..................                                                          .,oxxxdddddoooollllllllllccccccccl\r\nMWWNNXXK00OkxxddxkkO0000000OOO0000000Od;'....,,'',''................                                                          .'lxxxxdddddooollllllllllccccccccc\r\nMWWNNXXKK00kxxxxxxxkOOO000K0000000000Od:,'....'..',,,''''...........           ..                                             .'cdxxxxdddddooolllllllccllcccllcc\r\nMWWNNXXKK0OkkxxxxxxkkOO00KKKKK0000000kl;,...'',,,,;;;,'''...........                                                          ..:xkkxxxxdddooollllllllcccccllllc\r\nMWWNXXXKK0OkkkxxxxkkOO000KKXKK000000Oo;,'..',,;;;;;;;,,,''..........       .....                                              .'cxkkkkxxddddooolllllllllllllllll\r\nMWWNXXKK00OOkkxxxxkkOO000KKKKKKK000ko;'..',,;;;::;;;;,'''.........    ..........      .                                      ..;okkkkkxxxddoooollllccclllllllllo\r\nMWWNNXKK000OOkkkkxkkOO000KKKKKKKK0xl;,...',;:::::::;,''..........    .....',,..     ....                                     .,lxkkkkkkxxddolollllllllllllllllld\r\nMMWWNNXKK00OOOkkkkOOOO00KKKXKKKKOd:,'....',;::::::;;,'.........    .......','.   ........                                    .cdxkkkxxxxxddooolllllllllloooooolx\r\nMMWWWNXKK00OOOOOOOOkkO00KKKKKKKOl;''......';;::::;;,'.....................''....'.......                                     .cdxxxxxxxxxdddoolllllooooooooooook\r\nMMWWWNNXKK00OOOOOOkkkO00KKKXXKOl;,'.'......,;:;;;,,''..........................'''....                                       .;oxxxkkxxxxxddoolloooooddoooddood0\r\nMMWWWNNXXKK0OOOOkkkkOO0KKKXXXKd:'..'''.....';;;;;,,''...............................                                         .;oxkkkkxxxxxdddddoodddddddddddooxX\r\nMMMWWWNNXXKK0OOOkkOOO0KKKXXXXKOo;'.........';:;;;;,,''..........................                                             .cxkkkkkxxxxxxdddddddddxdddddddod0W\r\nMMMWWWWNNXXK000OO000KKKXXXXXKKKK0Oxdl:'''',;;;;;;;,,,''....................                                                 .,okkkkkkxxxddxxxxddddxxxxxxxxdddxXM\r\nMMMWWWWWNNNXKK0000KKXXXXXXXXXKKKKKKKKkc,;;;;;;;;;;,,,''...................                                                  'cdkkkkxxxxddxxxxxxxxxxxxkkkxxxdd0WM\r\nMMMMMWWWWNNNNXXXXXXXXXXXXXXXXKKKKKK00Ol;;;;;;;;,,,,,,''.................                                                   .;oxkkkkkkkxxxxxxxxxxxxxxkkkkkxxdkNMM\r\nMMMMMWWWWWWNNNNNNNNNNNNNNXXXKKKK0OOOOkc,',,,,;;,,,,,,''................                                                   .;coxkkkkkkkkxxxxxxxxxxxkkkkkkkxxxKWMM\r\nMMMMWWWWWWWWWWWWNNWNNNNNXXXXKKKK00OOOOl'.....,;,,,,,,'................                                                    ..;coxkkkkkkxxxxxdxxxxxxkkkkkkkxx0WMMM\r\nMMMMMMMWWWWWWWWWWWWWNNNNXXXKKK0OkOOOkxo:,,,,,;;,'',,,'.............                                                       ..,:oxkkkkkxxxxxxdxxxxxxkkOOkkkxONMMMM\r\nMMMMMMWWWWWWWWWWWWWNNNNXXXKKK0Okkkkxxxoc;,;;;;;,''',,'.............             ...                                    .';:coxOOkkkkxxxxxxxxxxxxkkkOOkkkkOXMMMMM\r\nMMMMMMWWMWWWWWWWWWWNNNNXXXKKK0Okkkxxxxdc;,;;;;;,''',,'.............         ......                                 .....cdxkkOOOOkkkkxxxxxxxxxkkkOOkkkkkOXMMMMMM\r\nMMMMMMMMWMWWWWWWWWWNNNNXXXKKK0Okkkxxxxdl;;;;;;,,'''''...............  ..  .......                                  .;ccldkOOOOOOkkkkkxxxxxxxxkkkkOOkkkkOXWMMMMMM\r\nMMMMMMMMMMWWWWWWWWWWNNNXXXK00Okkkkxxxdoc;;;;;,,''...............................                                   .;okOO00OOOOkkkkkxxxxxxxkkkkOOOOOkO0XWMMMMMMM\r\nMMMMMMMMMWWWMWWNNNWWNNNXXXXK00Okkkkxxxo:;;;;,''.................................                                .';coxkOO00OOOOkkkkkkxxxxxkkkOOOOOOOO0NMMMMMMMMM\r\nMMMMMMMMMMWWWWWWNWWWWNXXXXXXKK0OOkkkxxo:;;,,'...................................                             ..:oxkOOOOOOOOOOkkkkkkkkkkkkkkOOO00000OKNMMMMMMMMMM\r\nMMMMMMMMMMMMWWMWWWWWWNNNNNXXXK0OOOkkkxdl;''........................''''''........                       'cc:cokOOOOOOOOOOOOOkkkkkkkkkkkkkOOO0000000XWMMMMMMMMMMM\r\nMMMMMMMMMMMMMWWMMWWWWWWNNNNXXKK0OOOOkkxxoc;,......................''''''.........          ...         .c0KKKK000OOOOOOOOOOOkkkkkOOOkkkOOOO000000KXWMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMWWWWWWNWWNNNNXXXK0OOOOkkkxxdolcc:::;,'............',,,'''.............  ........        .oKKKKK0000OOOOOOOOOOOOkkkkkkOOOOO00000KKXNMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMWWWWWWWWWNNNNXXXK00OOOOkkxxddooooooolll:,..'...'',,,,,''.......................        .l0KKKKK00000OOOOOOOOOOkkkkkOOO000KKKKKKNWMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMWWWWWWWWWNNNXXXXK000OOOkxxxddddoodxxkko;''''',,,,;,,''........................        ;kK000KK000000OOOOOOOOOOOkOOO00KKKXXXXWMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMWWWMWWWWWWNNNNNXK000OOOkkxxxdddxOO000xc,,,,,,,;;,,,''.........................       .o000KKKK00000000OOOOOOOOOOO0KKXXXXXNWMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWNNNNNXXK0000OOkxxxxxO000000d:,,,,,;;;,''''...............'''''.......      .ckKKKKKKK000000000000000KKKXXXXXNWMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMWWWWMWWWWWNNNNNXXKK00OOOkkxxk00KKKKOl;,,,,;;,,'''.............''',,'.............   .,d0KKKKKKKK00000000KKKKXXNNNNNWMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWNNNNXXKKKK0OOOO0KKKKXKkl,,,;;;,,''''.........'''',,''..'''''''.......   .l0KKKKKKKKKKKKKKKKXXXNNNNWWMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWNNNNXXXXKK0KKKXXXXXKOo;,;;;,,''''''..''.'',,,,'..',;,,,,,''''.......  .;d0KKKKKKKKKKKXXXNNNNWWMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWMWWWWWWNNNNNNNXXXKXXXXNNNNKd:;;;,,,,''''''''',,,,'..,;;;;;;;,,,''''.....     .;d0KXXXXXXXXNNNNWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWNNNNNNNNNNNNNNNX0l;;;;,,,,''''',,,,''.',;;;;;;;;;,,,''''.....       .;d0XXXNNNNWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWWNNNNNNNNNNNX0o:;;;;;;,,,,,''''''',;;;;;;;;;,,,,'''........        .,o0XNWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWWWWWWWNWNN0o;;;;;,,'''''.''',,,,,;;;;;;,,''''...........          .c0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWWWWWWNXx:;,,'''',''''''',,,,,,,;;,,,,''.............       ..:okXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWWXx;',,,,;;;,,,''',,,;;;,,,,,,,''............     ..,cdOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWNKd:,;;;;;;;,,,,'',,,,,,,,,,,,'''..............';ldOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWNKkxdolc:;;;,,,,,,;;,,,,,,,,,,'''....',;:cloxOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXK0kxollc::::;;,,,,;;;;;;::cloxO0KNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n\r\n\r\n\r\n    Token:      $MOONBRAH\r\n    Website:    https://moonbrah.com\r\n    Telegram:   https://t.me/Moonbrah_official\r\n    X:          https://x.com/moonbrahcoin\r\n\r\n\r\n\r\n*/\r\n\r\n// File: contracts/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// File: contracts/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: contracts/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n// File: contracts/draft-IERC6093.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard ERC-20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC-721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC-1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n// File: contracts/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n// File: contracts/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n// File: contracts/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC-20\r\n * applications.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\r\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     *\r\n     * ```solidity\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: contracts/MoonBrah.sol\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MoonBrah is ERC20, Ownable {\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    uint public purchaseLimit;\r\n    uint public buySellTax;\r\n\r\n    address public feeWallet;\r\n\r\n    mapping (address => bool) private _isExemptFromTax;\r\n\r\n    event ExemptFromTax(address indexed account, bool isExempt);\r\n    event BatchExemptFromTax(address[] account, bool[] isExempt);\r\n\r\n    event TaxUpdated(uint taxPercent);\r\n    event PurchaseLimitUpdated(uint limitPercent);\r\n    event ETHWithdrawn(address indexed to, uint256 amount);\r\n    event ERC20Withdrawn(address indexed to, uint256 amount);\r\n\r\n    constructor(\r\n        uint256 _buySellTax,\r\n        uint256 _purchaseLimit, \r\n        address _router, \r\n        address _feeWallet) \r\n        ERC20(\"bryan\", \"MOONBRAH\") Ownable(msg.sender) {\r\n        _mint(_msgSender(), 28e6 ether);\r\n\r\n        feeWallet = payable(_feeWallet);\r\n        address uniswapRouter = _router;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(uniswapRouter);\r\n        IUniswapV2Factory _uniswapFactory = IUniswapV2Factory(_uniswapV2Router.factory());\r\n\r\n        address _uniswapV2Pair = _uniswapFactory.createPair(\r\n            address(this), \r\n            _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        buySellTax = _buySellTax * 100;\r\n        purchaseLimit = _purchaseLimit;\r\n\r\n        exemptFromTax(uniswapV2Pair, true);\r\n        exemptFromTax(address(uniswapRouter), true);\r\n        exemptFromTax(_msgSender(), true);\r\n        exemptFromTax(address(this), true);\r\n        exemptFromTax(feeWallet, true);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _transfer(\r\n        address from, \r\n        address to, \r\n        uint256 amount) internal override {\r\n        require(amount > 0, \"Transfer amount must be greater than 0\");\r\n\r\n        uint256 taxAmount = 0;\r\n\r\n        // Max Purchase Limitation\r\n        if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExemptFromTax[to]) {\r\n            require(amount <= totalSupply() * purchaseLimit / 1e4, \"Amount exceeds max purchase amount.\");\r\n        }\r\n\r\n        if((!_isExemptFromTax[from] || !_isExemptFromTax[to]) && from != address(this)){\r\n            if((from == uniswapV2Pair || to == uniswapV2Pair) && buySellTax > 0){\r\n                taxAmount = amount * buySellTax / 1e4;\r\n                super._transfer(from, feeWallet, taxAmount);\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, (amount-taxAmount));\r\n    }\r\n\r\n    function setSellBuyTax(uint256 newTaxPercentage) external onlyOwner {\r\n        uint256 currentTaxInPercentage = buySellTax / 100;\r\n        require(newTaxPercentage <= currentTaxInPercentage, \"You can only lower fees\");\r\n\r\n        buySellTax = newTaxPercentage * 100;\r\n        \r\n        emit TaxUpdated(buySellTax);\r\n    }\r\n\r\n    function setPurchaseLimit(uint _limit) external onlyOwner {\r\n        purchaseLimit = _limit;\r\n        emit PurchaseLimitUpdated(_limit);\r\n    }\r\n\r\n    function exemptFromTax(\r\n        address account, \r\n        bool exempt) public onlyOwner {\r\n        _isExemptFromTax[account] = exempt;\r\n        emit ExemptFromTax(account, exempt);\r\n    }\r\n\r\n    function batchExemptFromTax(\r\n        address[] calldata account, \r\n        bool[] calldata exempt) public onlyOwner {\r\n        for(uint i = 0 ; i < account.length ; i ++) {\r\n            _isExemptFromTax[account[i]] = exempt[i];\r\n        }\r\n        emit BatchExemptFromTax(account, exempt);\r\n    }\r\n\r\n    function withdrawETH(address payable _to) external onlyOwner {\r\n        require(address(this).balance > 0, \"No ETH to withdraw\");\r\n        uint256 amount = address(this).balance;\r\n        (bool sent, ) = _to.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        emit ETHWithdrawn(_to, amount);\r\n    }\r\n\r\n    function withdrawERC20Token(address token, address to) public onlyOwner {\r\n        uint256 balance = IERC20(address(token)).balanceOf(address(this));\r\n        require(balance > 0, \"Not enough tokens in contract\");\r\n        IERC20(address(token)).transfer(to, balance);\r\n        emit ERC20Withdrawn(to, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buySellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"isExempt\",\"type\":\"bool[]\"}],\"name\":\"BatchExemptFromTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"ExemptFromTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitPercent\",\"type\":\"uint256\"}],\"name\":\"PurchaseLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxPercent\",\"type\":\"uint256\"}],\"name\":\"TaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"exempt\",\"type\":\"bool[]\"}],\"name\":\"batchExemptFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"exemptFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setPurchaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxPercentage\",\"type\":\"uint256\"}],\"name\":\"setSellBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MoonBrah", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000640000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000ab6b4304c67c24f3cbdadbc11e15bcd89a8f162c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ac4ae5ca1a4b6df1e76adda2cee843b05825bbc0782043bbb74c3502399fe22"}