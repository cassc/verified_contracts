{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/Staking/StakingTokenV1.sol:StakingTokenV1\": {\r\n        \"Math\": \"0xF71D8C31F77A1b8dd2207066eaa4cb5CB991Df32\",\r\n        \"SafeERC20\": \"0x7804D4203Cad579e4fCF0509444a7B8a277C510E\"\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/Control/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IAuthorizable } from \\\"./IAuthorizable.sol\\\";\\r\\nimport { OwnableV2 } from \\\"./OwnableV2.sol\\\";\\r\\n\\r\\nabstract contract Authorizable is IAuthorizable, OwnableV2 {\\r\\n  constructor(address owner_) OwnableV2(owner_) {}\\r\\n\\r\\n  mapping(address => bool) internal _authorized;\\r\\n\\r\\n  modifier onlyAuthorized() {\\r\\n    require(_isAuthorized(_msgSender()), \\\"Unauthorized\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _isAuthorized(address account) internal virtual view returns (bool) {\\r\\n    // always return true for the owner\\r\\n    return account == _owner() ? true : _authorized[account];\\r\\n  }\\r\\n\\r\\n  function isAuthorized(address account) external view override returns (bool) {\\r\\n    return _isAuthorized(account);\\r\\n  }\\r\\n\\r\\n  function _authorize(address account, bool value) internal virtual {\\r\\n    _authorized[account] = value;\\r\\n\\r\\n    emit Authorized(account, value);\\r\\n  }\\r\\n\\r\\n  /** @dev only allow the owner to authorize more accounts */\\r\\n  function authorize(address account, bool value) external override onlyOwner {\\r\\n    _authorize(account, value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/IAuthorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IOwnableV2 } from \\\"./IOwnableV2.sol\\\";\\r\\n\\r\\ninterface IAuthorizable {\\r\\n  event Authorized(address indexed account, bool value);\\r\\n\\r\\n  function isAuthorized(address account) external view returns (bool);\\r\\n  function authorize(address account, bool value) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/IOwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * \\r\\n * parent for ownable contracts\\r\\n */\\r\\ninterface IOwnableV2 {\\r\\n  event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n  function owner() external view returns (address);\\r\\n  function transferOwnership(address newOwner_) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IOwnableV2 } from \\\"./IOwnableV2.sol\\\";\\r\\n\\r\\ninterface IPausable is IOwnableV2 {\\r\\n  function paused() external view returns (bool);\\r\\n  function setPaused(bool value) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/OwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { Context } from \\\"../library/Context.sol\\\";\\r\\nimport { IOwnableV2 } from \\\"./IOwnableV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * \\r\\n * parent for ownable contracts\\r\\n */\\r\\nabstract contract OwnableV2 is IOwnableV2, Context {\\r\\n  constructor(address owner_) {\\r\\n    _owner_ = owner_;\\r\\n    emit OwnershipTransferred(address(0), _owner());\\r\\n  }\\r\\n\\r\\n  address internal _owner_;\\r\\n\\r\\n  function _owner() internal virtual view returns (address) {\\r\\n    return _owner_;\\r\\n  }\\r\\n\\r\\n  function owner() external virtual override view returns (address) {\\r\\n    return _owner();\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner() == _msgSender(), \\\"Only the owner can execute this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _transferOwnership(address newOwner_) internal virtual onlyOwner {\\r\\n    // keep track of old owner for event\\r\\n    address oldOwner = _owner();\\r\\n\\r\\n    // set the new owner\\r\\n    _owner_ = newOwner_;\\r\\n\\r\\n    // emit event about ownership change\\r\\n    emit OwnershipTransferred(oldOwner, _owner());\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner_) external virtual override onlyOwner {\\r\\n    _transferOwnership(newOwner_);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IPausable } from \\\"./IPausable.sol\\\";\\r\\nimport { OwnableV2 } from \\\"./OwnableV2.sol\\\";\\r\\n\\r\\nabstract contract Pausable is IPausable, OwnableV2 {\\r\\n  bool internal _paused;\\r\\n\\r\\n  modifier onlyNotPaused() {\\r\\n    require(!_paused, \\\"Contract is paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function paused() external view override returns (bool) {\\r\\n    return _paused;\\r\\n  }\\r\\n\\r\\n  function _setPaused(bool value) internal virtual {\\r\\n    _paused = value;\\r\\n  }\\r\\n\\r\\n  function setPaused(bool value) external override onlyOwner {\\r\\n    _setPaused(value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/IDCounter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IIDCounter } from \\\"./IIDCounter.sol\\\";\\r\\n\\r\\nabstract contract IDCounter is IIDCounter {\\r\\n  uint256 internal _count;\\r\\n\\r\\n  function count() external view override returns (uint256) {\\r\\n    return _count;\\r\\n  }\\r\\n\\r\\n  function _next() internal virtual returns (uint256) {\\r\\n    return _count++;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/IIDCounter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IIDCounter {\\r\\n  function count() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Math {\\r\\n  function clamp8(uint8 n, uint8 _min, uint8 _max) internal pure returns (uint8) {\\r\\n    return n > _min ? n < _max ? n : _max : _min;\\r\\n  }\\r\\n\\r\\n  function clamp16(uint16 n, uint16 _min, uint16 _max) internal pure returns (uint16) {\\r\\n    return n > _min ? n < _max ? n : _max : _min;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculate x * y / scale rounding down.\\r\\n   *\\r\\n   * https://ethereum.stackexchange.com/a/79736\\r\\n   */\\r\\n  function mulScale(uint256 x, uint256 y, uint128 scale) internal pure returns (uint256) {\\r\\n    uint256 a = x / scale;\\r\\n    uint256 b = x % scale;\\r\\n    uint256 c = y / scale;\\r\\n    uint256 d = y % scale;\\r\\n\\r\\n    return a * c * scale + a * d + b * c + b * d / scale;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return `numerator` percentage of `denominator`\\r\\n   *\\r\\n   * https://ethereum.stackexchange.com/a/18877\\r\\n   * https://stackoverflow.com/a/42739843\\r\\n   */\\r\\n  function percent(uint256 numerator, uint256 denominator, uint256 precision) internal pure returns (uint256) {\\r\\n    // caution, check safe-to-multiply here\\r\\n    // NOTE - solidity 0.8 and above throws on overflows automatically\\r\\n    uint256 _numerator = numerator * 10 ** (precision+1);\\r\\n    // with rounding of last digit\\r\\n    return ((_numerator / denominator) + 5) / 10;\\r\\n  }\\r\\n\\r\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a > b ? a : b;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Staking/IStakingTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IStakingV1 } from \\\"./IStakingV1.sol\\\";\\r\\n\\r\\ninterface IStakingTokenV1 is IStakingV1 {\\r\\n  function rewardsToken() external view returns (address);\\r\\n  function recoverEth() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Staking/IStakingV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IAuthorizable } from \\\"../Control/IAuthorizable.sol\\\";\\r\\nimport { IPausable } from \\\"../Control/IPausable.sol\\\";\\r\\n\\r\\ninterface IStakingV1 is IAuthorizable, IPausable {\\r\\n  /** events */\\r\\n  event DepositedEth(address indexed account, uint256 amount);\\r\\n  event DepositedTokens(address indexed account, uint256 amount);\\r\\n  event WithdrewTokens(address indexed account, uint256 amount);\\r\\n  event ClaimedRewards(address indexed account, uint256 amount);\\r\\n\\r\\n  // function stakingType() external view returns (uint8);\\r\\n  function rewardsAreToken() external pure returns (bool);\\r\\n  function autoClaimEnabled() external view returns (bool);\\r\\n  function setAutoClaimEnabled(bool value) external;\\r\\n  function accuracy() external view returns (uint256);\\r\\n  function setAccuracy(uint256 value) external;\\r\\n  function setAutoClaimOnDeposit(bool value) external;\\r\\n  function setAutoClaimOnClaim(bool value) external;\\r\\n  function getAutoClaimOptOut(address account) external view returns (bool);\\r\\n  function setAutoClaimOptOut(bool value) external;\\r\\n  function removeLockDuration() external;\\r\\n  function getPlaceInQueue(address account) external view returns (uint256);\\r\\n  function autoClaimGasLimit() external view returns (uint256);\\r\\n  function setAutoClaimGasLimit(uint256 value) external;\\r\\n  function token() external view returns (address);\\r\\n  function getStakingData() external view returns (\\r\\n    uint8 stakingType,\\r\\n    address stakedToken,\\r\\n    uint8 decimals,\\r\\n    uint256 totalStaked,\\r\\n    uint256 totalRewards,\\r\\n    uint256 totalClaimed\\r\\n  );\\r\\n  function getStakingDataForAccount(address account) external view returns (\\r\\n    uint256 amount,\\r\\n    uint64 lastClaimedAt,\\r\\n    uint256 pendingRewards,\\r\\n    uint256 totalClaimed\\r\\n  );\\r\\n  function pending(address account) external view returns (uint256);\\r\\n  function claimFor(address account, bool revertOnFailure, bool doAutoClaim) external;\\r\\n  function claim() external;\\r\\n  function deposit(uint256 amount) external;\\r\\n  function getUnlockTime(address account) external view returns (uint64);\\r\\n  function withdraw(uint256 amount) external;\\r\\n  function emergencyWithdraw() external;\\r\\n  function processAutoClaim() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Staking/StakingTokenV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IStakingV1 } from \\\"./IStakingV1.sol\\\";\\r\\nimport { IStakingTokenV1 } from \\\"./IStakingTokenV1.sol\\\";\\r\\nimport { StakingV1 } from \\\"./StakingV1.sol\\\";\\r\\nimport { Address } from \\\"../library/Address.sol\\\";\\r\\nimport { IERC20 } from \\\"../library/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"../library/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * token reflection\\r\\n */\\r\\ncontract StakingTokenV1 is IStakingTokenV1, StakingV1 {\\r\\n  using Address for address payable;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  constructor(\\r\\n    address owner_,\\r\\n    address tokenAddress_,\\r\\n    address rewardsTokenAddress_,\\r\\n    uint16 lockDurationDays_\\r\\n  ) StakingV1(\\r\\n    owner_,\\r\\n    tokenAddress_,\\r\\n    lockDurationDays_\\r\\n  ) {\\r\\n    //\\r\\n    _rewardsToken = IERC20(rewardsTokenAddress_);\\r\\n  }\\r\\n\\r\\n  IERC20 internal immutable _rewardsToken;\\r\\n\\r\\n  function _stakingType() internal virtual override view returns (uint8) {\\r\\n    return 1;\\r\\n  }\\r\\n\\r\\n  function rewardsToken() external virtual view returns (address) {\\r\\n    return address(_rewardsToken);\\r\\n  }\\r\\n\\r\\n  function rewardsAreToken() public virtual override(IStakingV1, StakingV1) pure returns (bool) {\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _sendRewards(address account, uint256 amount) internal virtual override returns (bool) {\\r\\n    _rewardsToken.safeTransfer(account, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _getRewardsBalance() internal virtual override view returns (uint256) {\\r\\n    if (_rewardsToken == _token) {\\r\\n      require(_rewardsToken.balanceOf(address(this)) >= _totalStaked, \\\"Contract balance is lower than staked balance.\\\");\\r\\n      return _rewardsToken.balanceOf(address(this)) - _totalStaked;\\r\\n    }\\r\\n    return _rewardsToken.balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev since we're dealing with tokens instead of eth,\\r\\n   * use this to recover any eth mistakenly sent to this contract.\\r\\n   * this probably would never happen since receive() is reverting.\\r\\n   *\\r\\n   * this must be called by the owner, and sends eth to owner\\r\\n   */\\r\\n  function recoverEth() external virtual onlyOwner {\\r\\n    payable(_owner()).sendValue(address(this).balance);\\r\\n  }\\r\\n\\r\\n  /** @dev override this since we're no longer tracking eth deposits */\\r\\n  receive() external virtual override payable {\\r\\n    revert();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Staking/StakingV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IStakingV1 } from \\\"./IStakingV1.sol\\\";\\r\\nimport { Address } from \\\"../library/Address.sol\\\";\\r\\nimport { Authorizable } from \\\"../Control/Authorizable.sol\\\";\\r\\nimport { Pausable } from \\\"../Control/Pausable.sol\\\";\\r\\nimport { IDCounter } from \\\"../IDCounter.sol\\\";\\r\\nimport { IERC20 } from \\\"../library/IERC20.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"../library/ReentrancyGuard.sol\\\";\\r\\nimport { SafeERC20 } from \\\"../library/SafeERC20.sol\\\";\\r\\nimport { Util } from \\\"../Util.sol\\\";\\r\\nimport { Math } from \\\"../Math.sol\\\";\\r\\n\\r\\nstruct StakerData {\\r\\n  bool autoClaimOptOut;\\r\\n  /** amount currently staked */\\r\\n  uint256 amount;\\r\\n  /** total amount of eth claimed */\\r\\n  uint256 totalClaimed;\\r\\n  uint256 totalExcluded;\\r\\n  uint256 lastDeposit;\\r\\n  uint256 lastClaim;\\r\\n}\\r\\n\\r\\n/**\\r\\n * eth reflection - also base contract for token reflection\\r\\n */\\r\\ncontract StakingV1 is IStakingV1, Authorizable, Pausable, ReentrancyGuard {\\r\\n  /** libraries */\\r\\n  using Address for address payable;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  constructor(\\r\\n    address owner_,\\r\\n    address tokenAddress_,\\r\\n    uint16 lockDurationDays_\\r\\n  ) Authorizable(owner_) {\\r\\n    //\\r\\n    _token = IERC20(tokenAddress_);\\r\\n    _decimals = _token.decimals();\\r\\n    _lockDurationDays = lockDurationDays_;\\r\\n  }\\r\\n\\r\\n  /** @dev reference to the staked token */\\r\\n  IERC20 internal immutable _token;\\r\\n\\r\\n  /** @dev cached copy of the staked token decimals value */\\r\\n  uint8 internal immutable _decimals;\\r\\n\\r\\n  uint16 internal _lockDurationDays;\\r\\n\\r\\n  uint256 internal _totalStaked;\\r\\n  uint256 internal _totalClaimed;\\r\\n\\r\\n  uint256 internal _lastBalance;\\r\\n  uint256 internal _rewardsPerToken;\\r\\n  uint256 internal _accuracy = 10 ** 18;\\r\\n\\r\\n  /** @dev current number of stakers */\\r\\n  uint64 internal _currentNumStakers;\\r\\n\\r\\n  /** @dev total number of stakers - not reduced when a staker withdraws all */\\r\\n  uint64 internal _totalNumStakers;\\r\\n\\r\\n  /** @dev used to limit the amount of gas spent during auto claim */\\r\\n  uint256 internal _autoClaimGasLimit = 200000;\\r\\n\\r\\n  /** @dev current index used for auto claim iteration */\\r\\n  uint64 internal _autoClaimIndex;\\r\\n\\r\\n  bool internal _autoClaimEnabled = true;\\r\\n\\r\\n  /** @dev should autoClaim be run automatically on deposit? */\\r\\n  bool internal _autoClaimOnDeposit = true;\\r\\n\\r\\n  /** @dev should autoClaim be run automatically on manual claim? */\\r\\n  bool internal _autoClaimOnClaim = true;\\r\\n\\r\\n  /** @dev account => staker data */\\r\\n  mapping(address => StakerData) internal _stakers;\\r\\n\\r\\n  /** @dev this is essentially an index in the order that new users are added. */\\r\\n  mapping(uint64 => address) internal _autoClaimQueue;\\r\\n  /** @dev reverse lookup for _autoClaimQueue. allows getting index by address */\\r\\n  mapping(address => uint64) internal _autoClaimQueueReverse;\\r\\n\\r\\n  // modifier autoClaimAfter {\\r\\n  //   _;\\r\\n  //   _autoClaim();\\r\\n  // }\\r\\n\\r\\n  function _stakingType() internal virtual view returns (uint8) {\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  // function stakingType() external virtual override view returns (uint8) {\\r\\n  //   return _stakingType();\\r\\n  // }\\r\\n\\r\\n  function _totalRewards() internal virtual view returns (uint256) {\\r\\n    return _getRewardsBalance() + _totalClaimed;\\r\\n  }\\r\\n\\r\\n  function rewardsAreToken() public virtual override pure returns (bool) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function autoClaimEnabled() external virtual override view returns (bool) {\\r\\n    return _autoClaimEnabled;\\r\\n  }\\r\\n\\r\\n  function setAutoClaimEnabled(bool value) external virtual override {\\r\\n    _autoClaimEnabled = value;\\r\\n  }\\r\\n\\r\\n  function accuracy() external virtual override view returns (uint256) {\\r\\n    return _accuracy;\\r\\n  }\\r\\n\\r\\n  function setAccuracy(uint256 value) external virtual override onlyAuthorized {\\r\\n    _rewardsPerToken = _rewardsPerToken * value / _accuracy;\\r\\n    _accuracy = value;\\r\\n  }\\r\\n\\r\\n  function setAutoClaimOnDeposit(bool value) external virtual override onlyAuthorized {\\r\\n    _autoClaimOnDeposit = value;\\r\\n  }\\r\\n\\r\\n  function setAutoClaimOnClaim(bool value) external virtual override onlyAuthorized {\\r\\n    _autoClaimOnClaim = value;\\r\\n  }\\r\\n\\r\\n  function getAutoClaimOptOut(address account) external virtual override view returns (bool) {\\r\\n    return _stakers[account].autoClaimOptOut;\\r\\n  }\\r\\n\\r\\n  function setAutoClaimOptOut(bool value) external virtual override {\\r\\n    _stakers[_msgSender()].autoClaimOptOut = value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev allow removing the lock duration, but not setting it directly.\\r\\n   * this removes the possibility of creating a long lock duration after\\r\\n   * people have deposited their tokens, essentially turning the staking\\r\\n   * contract into a honeypot.\\r\\n   *\\r\\n   * removing the lock is necessary in case of emergencies,\\r\\n   * like migrating to a new staking contract.\\r\\n   */\\r\\n  function removeLockDuration() external virtual override onlyAuthorized {\\r\\n    _lockDurationDays = 0;\\r\\n  }\\r\\n\\r\\n  function getPlaceInQueue(address account) external virtual override view returns (uint256) {\\r\\n    if (_autoClaimQueueReverse[account] >= _autoClaimIndex)\\r\\n      return _autoClaimQueueReverse[account] - _autoClaimIndex;\\r\\n\\r\\n    return _totalNumStakers - (_autoClaimIndex - _autoClaimQueueReverse[account]);\\r\\n  }\\r\\n\\r\\n  function autoClaimGasLimit() external virtual override view returns (uint256) {\\r\\n    return _autoClaimGasLimit;\\r\\n  }\\r\\n\\r\\n  function setAutoClaimGasLimit(uint256 value) external virtual override onlyAuthorized {\\r\\n    _autoClaimGasLimit = value;\\r\\n  }\\r\\n\\r\\n  /** @return the address of the staked token */\\r\\n  function token() external virtual override view returns (address) {\\r\\n    return address(_token);\\r\\n  }\\r\\n\\r\\n  function getStakingData() external virtual override view returns (\\r\\n    uint8 stakingType,\\r\\n    address stakedToken,\\r\\n    uint8 decimals,\\r\\n    uint256 totalStaked,\\r\\n    uint256 totalRewards,\\r\\n    uint256 totalClaimed\\r\\n  ) {\\r\\n    stakingType = _stakingType();\\r\\n    stakedToken = address(_token);\\r\\n    decimals = _decimals;\\r\\n    totalStaked = _totalStaked;\\r\\n    totalRewards = _totalRewards();\\r\\n    totalClaimed = _totalClaimed;\\r\\n  }\\r\\n\\r\\n  function getStakingDataForAccount(address account) external virtual override view returns (\\r\\n    uint256 amount,\\r\\n    uint64 lastClaimedAt,\\r\\n    uint256 pendingRewards,\\r\\n    uint256 totalClaimed\\r\\n  ) {\\r\\n    amount = _stakers[account].amount;\\r\\n    lastClaimedAt = uint64(_lastClaimTime(account));\\r\\n    pendingRewards = _pending(account);\\r\\n    totalClaimed = _stakers[account].totalClaimed;\\r\\n  }\\r\\n\\r\\n  function _earned(address account) internal virtual view returns (uint256) {\\r\\n    if (_stakers[account].amount == 0)\\r\\n      return 0;\\r\\n\\r\\n    uint256 rewards = _getCumalativeRewards(_stakers[account].amount);\\r\\n    uint256 excluded = _stakers[account].totalExcluded;\\r\\n\\r\\n    return rewards > excluded ? rewards - excluded : 0;\\r\\n  }\\r\\n\\r\\n  function _pending(address account) internal virtual view returns (uint256) {\\r\\n    if (_stakers[account].amount == 0)\\r\\n      return 0;\\r\\n    \\r\\n    uint256 rewards = _stakers[account].amount * _getRewardsPerToken() / _accuracy;\\r\\n    uint256 excluded = _stakers[account].totalExcluded;\\r\\n\\r\\n    return rewards > excluded ? rewards - excluded : 0;\\r\\n  }\\r\\n\\r\\n  function pending(address account) external virtual override view returns (uint256) {\\r\\n    return _pending(account);\\r\\n  }\\r\\n\\r\\n  function _sendRewards(address account, uint256 amount) internal virtual returns (bool) {\\r\\n    // payable(account).sendValue(amount);\\r\\n\\r\\n    // don't revert on failure, otherwise we risk dos attacks\\r\\n    (bool success,) = account.call{value: amount}(\\\"\\\");\\r\\n\\r\\n    return success;\\r\\n  }\\r\\n\\r\\n  function _claim(address account) internal virtual returns (bool) {\\r\\n    _updateRewards();\\r\\n\\r\\n    uint256 pendingRewards = _earned(account);\\r\\n\\r\\n    if (_stakers[account].amount == 0 || pendingRewards == 0)\\r\\n      return false;\\r\\n\\r\\n    uint256 lastLastClaim = _stakers[account].lastClaim;\\r\\n\\r\\n    _stakers[account].totalClaimed += pendingRewards;\\r\\n    _stakers[account].totalExcluded += pendingRewards;\\r\\n    _stakers[account].lastClaim = block.timestamp;\\r\\n    _totalClaimed += pendingRewards;\\r\\n\\r\\n    // reset everything if the transfer failed\\r\\n    // is this -really- safe?\\r\\n    if (!_sendRewards(account, pendingRewards)) {\\r\\n      _stakers[account].totalClaimed -= pendingRewards;\\r\\n      _stakers[account].totalExcluded -= pendingRewards;\\r\\n      _stakers[account].lastClaim = lastLastClaim;\\r\\n      _totalClaimed -= pendingRewards;\\r\\n\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    _updateRewards();\\r\\n\\r\\n    emit ClaimedRewards(account, pendingRewards);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function claimFor(address account, bool revertOnFailure, bool doAutoClaim) external virtual override nonReentrant {\\r\\n    if (revertOnFailure)\\r\\n      require(_claim(account), \\\"Claim failed\\\");\\r\\n    else\\r\\n      _claim(account);\\r\\n\\r\\n    if (doAutoClaim) _autoClaim();\\r\\n  }\\r\\n\\r\\n  function claim() external virtual override nonReentrant {\\r\\n    require(_claim(_msgSender()), \\\"Claim failed\\\");\\r\\n\\r\\n    if (_autoClaimOnClaim) _autoClaim();\\r\\n  }\\r\\n\\r\\n  function _deposit(address account, uint256 amount) internal virtual onlyNotPaused {\\r\\n    require(amount != 0, \\\"Deposit amount cannot be 0\\\");\\r\\n\\r\\n    // claim before depositing\\r\\n    _claim(account);\\r\\n\\r\\n    if (_autoClaimQueueReverse[account] == 0) {\\r\\n      _totalNumStakers++;\\r\\n      _currentNumStakers++;\\r\\n      _autoClaimQueueReverse[account] = _totalNumStakers;\\r\\n      _autoClaimQueue[_totalNumStakers] = account;\\r\\n    }\\r\\n\\r\\n    _stakers[account].amount += amount;\\r\\n    _stakers[account].totalExcluded = _getCumalativeRewards(_stakers[account].amount);\\r\\n    _stakers[account].lastDeposit = block.timestamp;\\r\\n    _totalStaked += amount;\\r\\n\\r\\n    // store previous balance to determine actual amount transferred\\r\\n    uint256 oldBalance = _token.balanceOf(address(this));\\r\\n    // make the transfer\\r\\n    _token.safeTransferFrom(account, address(this), amount);\\r\\n    // check for lost tokens - this is an unsupported situation currently.\\r\\n    // tokens could be lost during transfer if the token has tax.\\r\\n    require(\\r\\n      amount == _token.balanceOf(address(this)) - oldBalance,\\r\\n      \\\"Lost tokens during transfer\\\"\\r\\n    );\\r\\n\\r\\n    emit DepositedTokens(account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev deposit amount of tokens to the staking pool.\\r\\n   * reverts if tokens are lost during transfer.\\r\\n   */\\r\\n  function deposit(uint256 amount) external virtual override nonReentrant {\\r\\n    _deposit(_msgSender(), amount);\\r\\n  }\\r\\n\\r\\n  function _getUnlockTime(address account) internal virtual view returns (uint64) {\\r\\n    return _lockDurationDays == 0 ? 0 : uint64(_lastClaimTime(account)) + (uint64(_lockDurationDays) * 86400);\\r\\n  }\\r\\n\\r\\n  function getUnlockTime(address account) external virtual override view returns (uint64) {\\r\\n    uint64 unlockTime = _getUnlockTime(account);\\r\\n    if (unlockTime <= block.timestamp) return 0;\\r\\n    return unlockTime;\\r\\n  }\\r\\n\\r\\n  function _withdraw(address account, uint256 amount, bool claimFirst) internal virtual {\\r\\n    require(\\r\\n      _stakers[account].amount != 0 && _stakers[account].amount >= amount,\\r\\n      \\\"Attempting to withdraw too many tokens\\\"\\r\\n    );\\r\\n\\r\\n    if (_lockDurationDays != 0)\\r\\n      require(\\r\\n        block.timestamp > _getUnlockTime(account),\\r\\n        \\\"Wait for tokens to unlock before withdrawing\\\"\\r\\n      );\\r\\n\\r\\n    if (claimFirst)\\r\\n      _claim(account);\\r\\n\\r\\n    _stakers[account].amount -= amount;\\r\\n    _stakers[account].totalExcluded = _getCumalativeRewards(_stakers[account].amount);\\r\\n    _totalStaked -= amount;\\r\\n\\r\\n    if (_stakers[account].amount == 0) {\\r\\n      // decrement current number of stakers\\r\\n      _currentNumStakers--;\\r\\n      // remove account from auto claim queue\\r\\n      _autoClaimQueue[_autoClaimQueueReverse[account]] = address(0);\\r\\n      _autoClaimQueueReverse[account] = 0;\\r\\n    }\\r\\n\\r\\n    // transfer tokens after modifying internal state\\r\\n    _token.safeTransfer(account, amount);\\r\\n\\r\\n    emit WithdrewTokens(account, amount);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount) external virtual override nonReentrant {\\r\\n    _withdraw(_msgSender(), amount, true);\\r\\n  }\\r\\n\\r\\n  /** this withdraws all and skips the claiming step */\\r\\n  function emergencyWithdraw() external virtual override nonReentrant {\\r\\n    _withdraw(_msgSender(), _stakers[_msgSender()].amount, false);\\r\\n  }\\r\\n\\r\\n  function _lastClaimTime(address account) internal virtual view returns (uint256) {\\r\\n    return _stakers[account].lastClaim;\\r\\n  }\\r\\n\\r\\n  function _depositRewards(address account, uint256 amount) internal virtual onlyNotPaused {\\r\\n    require(amount != 0, \\\"Receive value cannot be 0\\\");\\r\\n\\r\\n    // _totalRewards += amount;\\r\\n\\r\\n    emit DepositedEth(account, amount);\\r\\n  }\\r\\n\\r\\n  function _autoClaim() internal virtual {\\r\\n    if (!_autoClaimEnabled) return;\\r\\n\\r\\n    uint256 startingGas = gasleft();\\r\\n    uint256 iterations = 0;\\r\\n\\r\\n    while (startingGas - gasleft() < _autoClaimGasLimit && iterations++ < _totalNumStakers) {\\r\\n      // use unchecked here so index can overflow, since it doesn't matter.\\r\\n      // this prevents the incredibly unlikely future problem of running\\r\\n      // into an overflow error and probably saves some gas\\r\\n      uint64 index;\\r\\n      unchecked {\\r\\n        index = _autoClaimIndex++;\\r\\n      }\\r\\n\\r\\n      address autoClaimAddress = _autoClaimQueue[1 + (index % _totalNumStakers)];\\r\\n\\r\\n      if (!_stakers[autoClaimAddress].autoClaimOptOut)\\r\\n        _claim(autoClaimAddress);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /** @dev allow anyone to process autoClaim functionality manually */\\r\\n  function processAutoClaim() external virtual override nonReentrant {\\r\\n    _autoClaim();\\r\\n  }\\r\\n\\r\\n  function _getRewardsPerToken() internal virtual view returns (uint256) {\\r\\n    uint256 rewardsBalance = _getRewardsBalance();\\r\\n\\r\\n    if (rewardsBalance < _lastBalance || _totalStaked == 0)\\r\\n      return 0;\\r\\n\\r\\n    return _rewardsPerToken + ((rewardsBalance - _lastBalance) * _accuracy / _totalStaked);\\r\\n  }\\r\\n\\r\\n  function _updateRewards() internal virtual {\\r\\n    uint256 rewardsBalance = _getRewardsBalance();\\r\\n\\r\\n    if (rewardsBalance > _lastBalance && _totalStaked != 0)\\r\\n      _rewardsPerToken += (rewardsBalance - _lastBalance) * _accuracy / _totalStaked;\\r\\n\\r\\n    if (_totalStaked != 0)\\r\\n      _lastBalance = rewardsBalance;\\r\\n  }\\r\\n\\r\\n  function _getCumalativeRewards(uint256 amount) internal virtual view returns (uint256) {\\r\\n    return amount * _rewardsPerToken / _accuracy;\\r\\n  }\\r\\n\\r\\n  function _getRewardsBalance() internal virtual view returns (uint256) {\\r\\n    return address(this).balance;\\r\\n  }\\r\\n\\r\\n  receive() external virtual payable nonReentrant {\\r\\n    _depositRewards(_msgSender(), msg.value);\\r\\n\\r\\n    if (_autoClaimOnDeposit) _autoClaim();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Util.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"./library/IERC20.sol\\\";\\r\\nimport { IUniswapV2Pair } from \\\"./library/Dex.sol\\\";\\r\\n\\r\\nlibrary Util {\\r\\n  /**\\r\\n   * @dev retrieves basic information about a token, including sender balance\\r\\n   */\\r\\n  function getTokenData(address address_) external view returns (\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    uint8 decimals,\\r\\n    uint256 totalSupply,\\r\\n    uint256 balance\\r\\n  ){\\r\\n    IERC20 _token = IERC20(address_);\\r\\n\\r\\n    name = _token.name();\\r\\n    symbol = _token.symbol();\\r\\n    decimals = _token.decimals();\\r\\n    totalSupply = _token.totalSupply();\\r\\n    balance = _token.balanceOf(msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev this throws an error on false, instead of returning false,\\r\\n   * but can still be used the same way on frontend.\\r\\n   */\\r\\n  function isLpToken(address address_) external view returns (bool) {\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(address_);\\r\\n\\r\\n    try pair.token0() returns (address tokenAddress_) {\\r\\n      // any address returned successfully should be valid?\\r\\n      // but we might as well check that it's not 0\\r\\n      return tokenAddress_ != address(0);\\r\\n    } catch Error(string memory /* reason */) {\\r\\n      return false;\\r\\n    } catch (bytes memory /* lowLevelData */) {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev this function will revert the transaction if it's called\\r\\n   * on a token that isn't an LP token. so, it's recommended to be\\r\\n   * sure that it's being called on an LP token, or expect the error.\\r\\n   */\\r\\n  function getLpData(address address_) external view returns (\\r\\n    address token0,\\r\\n    address token1,\\r\\n    uint256 balance0,\\r\\n    uint256 balance1,\\r\\n    uint256 price0,\\r\\n    uint256 price1\\r\\n  ) {\\r\\n    IUniswapV2Pair _pair = IUniswapV2Pair(address_);\\r\\n\\r\\n    token0 = _pair.token0();\\r\\n    token1 = _pair.token1();\\r\\n\\r\\n    balance0 = IERC20(token0).balanceOf(address(_pair));\\r\\n    balance1 = IERC20(token1).balanceOf(address(_pair));\\r\\n\\r\\n    price0 = _pair.price0CumulativeLast();\\r\\n    price1 = _pair.price1CumulativeLast();\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"src/library/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/Dex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n  function feeTo() external view returns (address);\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n  function allPairs(uint) external view returns (address pair);\\r\\n  function allPairsLength() external view returns (uint);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n  function setFeeTo(address) external;\\r\\n  function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n  function symbol() external pure returns (string memory);\\r\\n  function decimals() external pure returns (uint8);\\r\\n  function totalSupply() external view returns (uint);\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint amount0In,\\r\\n    uint amount1In,\\r\\n    uint amount0Out,\\r\\n    uint amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n  function factory() external view returns (address);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n  function skim(address to) external;\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n  function factory() external pure returns (address);\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint amountTokenDesired,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n  function swapExactTokensForTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n  function swapTokensForExactTokens(\\r\\n    uint amountOut,\\r\\n    uint amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountETH);\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable;\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol\\r\\ninterface IERC20 {\\r\\n  function name() external view returns (string memory);\\r\\n  function symbol() external view returns (string memory);\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function decimals() external view returns (uint8);\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"lockDurationDays_\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accuracy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoClaimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoClaimGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revertOnFailure\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"doAutoClaim\",\"type\":\"bool\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAutoClaimOptOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPlaceInQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingData\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stakingType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakingDataForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lastClaimedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAreToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAccuracy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoClaimEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAutoClaimGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoClaimOnClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoClaimOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoClaimOptOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingTokenV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009a42a20d3e3a25c968c8a80ae5d2ab445920854c0000000000000000000000009dd86c35096efdf7fea1a24710c10de049f081480000000000000000000000009dd86c35096efdf7fea1a24710c10de049f081480000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}