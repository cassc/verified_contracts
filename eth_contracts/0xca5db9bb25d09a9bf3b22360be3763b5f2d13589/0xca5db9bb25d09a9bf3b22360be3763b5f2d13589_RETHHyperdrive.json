{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/src/external/Hyperdrive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { HyperdriveTarget0 } from \\\"../external/HyperdriveTarget0.sol\\\";\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveCore } from \\\"../interfaces/IHyperdriveCore.sol\\\";\\nimport { IMultiTokenCore } from \\\"../interfaces/IMultiTokenCore.sol\\\";\\nimport { HyperdriveAdmin } from \\\"../internal/HyperdriveAdmin.sol\\\";\\nimport { HyperdriveCheckpoint } from \\\"../internal/HyperdriveCheckpoint.sol\\\";\\nimport { HyperdriveLong } from \\\"../internal/HyperdriveLong.sol\\\";\\nimport { HyperdriveLP } from \\\"../internal/HyperdriveLP.sol\\\";\\nimport { HyperdriveShort } from \\\"../internal/HyperdriveShort.sol\\\";\\nimport { HyperdriveStorage } from \\\"../internal/HyperdriveStorage.sol\\\";\\n\\n///      ______  __                           _________      _____\\n///      ___  / / /____  ___________________________  /_________(_)__   ______\\n///      __  /_/ /__  / / /__  __ \\\\  _ \\\\_  ___/  __  /__  ___/_  /__ | / /  _ \\\\\\n///      _  __  / _  /_/ /__  /_/ /  __/  /   / /_/ / _  /   _  / __ |/ //  __/\\n///      /_/ /_/  _\\\\__, / _   ___/\\\\___//_/    \\\\__,_/  /_/    /_/  _____/ \\\\___/\\n///               /____/   /_/\\n///                     XXX          ++          ++          XXX\\n///     ############   XXXXX        ++0+        +0++        XXXXX   ###########\\n///   ##////////////########       ++00++      ++00++       ########///////////##\\n///  ##////////////##########      ++000++    ++000++      ##########///////////##\\n///  ##%%%%%%/////      ######     ++0000+    +0000++     ######     /////%%%%%%##\\n///    %%%%%%%%&&             ##   ++0000+    +0000++   ##           &&%%%%%%%%%\\n///         %&&&                ##  +o000+    +000o+  ##              &&&%\\n///                              ## ++00+-    -+00++ ##\\n///                               #% ++0+      +0++ %#\\n///                               ###-:Oo.++++.oO:-###\\n///                                ##: 00++++++00 :##\\n///                    #S###########* 0++00+++00++0 *##########S#\\n///                  #S               % $ 0+++0 $ %              S#\\n///                #S   ----------   %+++++:#:+++++%-----------    S#\\n///              #S   ------------- %++++: ### :++++%------------    S#\\n///             S    ---------------%++++*\\\\ | /*++++%-------------     S\\n///           #S     --------------- %++++ ~W~ ++++%666--o UUUU o-      S#\\n///         #S?      ---------------  %+++++~+++++%&&&8 o  \\\\  /  o       ?S#\\n///        ?*????**+++;::,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,::;+++**????*?\\n///      #?+////////////////////////////////////////////////////////////////+?#\\n///    #;;;;;//////////////////////////////////////////////////////////////;;;;;#\\n///  S;;;;;;;;;//////////////////////////////////////////////////////////;;;;;;;;;S\\n/// /;;;;;;;;;;;///////////////////////////////////////////////////////;;;;;;;;;;;;\\\\\\n/// |||OOOOOOOO||OOOOOOOO=========== __  ___        ===========OOOOOOOO||OOOOOOOO|||\\n/// |||OOOOOOOO||OOOOOOOO===========|  \\\\[__ |   \\\\  /===========OOOOOOOO||OOOOOOOO|||\\n/// |||OOOOOOOO||OOOOOOOO===========|__/[___|___ \\\\/ ===========OOOOOOOO||OOOOOOOO|||\\n/// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\n/// |||////////000000000000\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|:::::::::::::::|////////00000000000\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||\\n/// SSS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\000000000000////////|:::::0x666:::::|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\00000000000//////////SSS\\n/// SSS|||||||||||||||||||||||||||||:::::::::::::::||||||||||||||||||||||||||||||SSS\\n/// SSSSSSSS|_______________|______________||_______________|______________|SSSSSSSS\\n/// SSSSSSSS                                                                SSSSSSSS\\n/// SSSSSSSS                                                                SSSSSSSS\\n///\\n/// @author DELV\\n/// @title Hyperdrive\\n/// @notice A fixed-rate AMM that mints bonds on demand for longs and shorts.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract Hyperdrive is\\n    IHyperdriveCore,\\n    HyperdriveAdmin,\\n    HyperdriveLP,\\n    HyperdriveLong,\\n    HyperdriveShort,\\n    HyperdriveCheckpoint\\n{\\n    /// @notice The target0 address. This is a logic contract that contains all\\n    ///         of the getters for the Hyperdrive pool as well as some stateful\\n    ///         functions.\\n    address public immutable target0;\\n\\n    /// @notice The target1 address. This is a logic contract that contains\\n    ///         stateful functions.\\n    address public immutable target1;\\n\\n    /// @notice The target2 address. This is a logic contract that contains\\n    ///         stateful functions.\\n    address public immutable target2;\\n\\n    /// @notice The target3 address. This is a logic contract that contains\\n    ///         stateful functions.\\n    address public immutable target3;\\n\\n    /// @notice The target4 address. This is a logic contract that contains\\n    ///         stateful functions.\\n    address public immutable target4;\\n\\n    /// @notice The typehash used to calculate the EIP712 hash for `permitForAll`.\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"PermitForAll(address owner,address spender,bool _approved,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /// @notice Instantiates a Hyperdrive pool.\\n    /// @param __name The pool's name.\\n    /// @param _config The configuration of the pool.\\n    /// @param _target0 The target0 address.\\n    /// @param _target1 The target1 address.\\n    /// @param _target2 The target2 address.\\n    /// @param _target3 The target3 address.\\n    /// @param _target4 The target4 address.\\n    constructor(\\n        string memory __name,\\n        IHyperdrive.PoolConfig memory _config,\\n        address _target0,\\n        address _target1,\\n        address _target2,\\n        address _target3,\\n        address _target4\\n    ) HyperdriveStorage(_config) {\\n        // NOTE: This is initialized here rather than in `HyperdriveStorage` to\\n        // avoid needing to set the name in all of the target contracts. Since\\n        // this is a storage value, it will still be accessible.\\n        //\\n        // Initialize the pool's name.\\n        _name = __name;\\n\\n        // Initialize the target contracts.\\n        target0 = _target0;\\n        target1 = _target1;\\n        target2 = _target2;\\n        target3 = _target3;\\n        target4 = _target4;\\n    }\\n\\n    /// @notice If we get to the fallback function, we make a read-only\\n    ///         delegatecall to the target0 contract. This target contains all\\n    ///         of the getters for the Hyperdrive pool.\\n    /// @param _data The data to be passed to the data provider.\\n    /// @return The return data from the data provider.\\n    fallback(bytes calldata _data) external returns (bytes memory) {\\n        // We use a force-revert delegatecall pattern to ensure that no state\\n        // changes were made during the read call.\\n        (bool success, bytes memory returndata) = target0.delegatecall(_data);\\n        if (success) {\\n            revert IHyperdrive.UnexpectedSuccess();\\n        }\\n        bytes4 selector = bytes4(returndata);\\n        if (selector != IHyperdrive.ReturnData.selector) {\\n            assembly {\\n                revert(add(returndata, 32), mload(returndata))\\n            }\\n        }\\n\\n        // Read calls return their data inside of a `ReturnData(bytes)` error.\\n        // We unwrap the error and return the contents.\\n        assembly {\\n            mstore(add(returndata, 0x4), sub(mload(returndata), 4))\\n            returndata := add(returndata, 0x4)\\n        }\\n        returndata = abi.decode(returndata, (bytes));\\n\\n        return returndata;\\n    }\\n\\n    /// Longs ///\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function openLong(\\n        uint256,\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external payable returns (uint256, uint256) {\\n        _delegate(target2);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function closeLong(\\n        uint256,\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external returns (uint256) {\\n        _delegate(target1);\\n    }\\n\\n    /// Shorts ///\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function openShort(\\n        uint256,\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external payable returns (uint256, uint256) {\\n        _delegate(target2);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function closeShort(\\n        uint256,\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external returns (uint256) {\\n        _delegate(target1);\\n    }\\n\\n    /// LPs ///\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function initialize(\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external payable returns (uint256) {\\n        _delegate(target3);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function addLiquidity(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external payable returns (uint256) {\\n        _delegate(target3);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function removeLiquidity(\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external returns (uint256, uint256) {\\n        _delegate(target4);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function redeemWithdrawalShares(\\n        uint256,\\n        uint256,\\n        IHyperdrive.Options calldata\\n    ) external returns (uint256, uint256) {\\n        _delegate(target4);\\n    }\\n\\n    /// Checkpoints ///\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function checkpoint(uint256, uint256) external {\\n        _delegate(target4);\\n    }\\n\\n    /// Admin ///\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function collectGovernanceFee(\\n        IHyperdrive.Options calldata\\n    ) external returns (uint256) {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function pause(bool) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function setFeeCollector(address) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function setSweepCollector(address) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function setCheckpointRewarder(address) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function setGovernance(address) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function setPauser(address, bool) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IHyperdriveCore\\n    function sweep(IERC20) external {\\n        _delegate(target0);\\n    }\\n\\n    /// MultiToken ///\\n\\n    /// @inheritdoc IMultiTokenCore\\n    function transferFrom(uint256, address, address, uint256) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IMultiTokenCore\\n    function transferFromBridge(\\n        uint256,\\n        address,\\n        address,\\n        uint256,\\n        address\\n    ) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IMultiTokenCore\\n    function setApprovalBridge(uint256, address, uint256, address) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IMultiTokenCore\\n    function setApprovalForAll(address, bool) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IMultiTokenCore\\n    function setApproval(uint256, address, uint256) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @inheritdoc IMultiTokenCore\\n    function batchTransferFrom(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata\\n    ) external {\\n        _delegate(target0);\\n    }\\n\\n    /// @notice Allows a caller who is not the owner of an account to execute the\\n    ///      functionality of 'approve' for all assets with the owners signature.\\n    /// @param owner The owner of the account which is having the new approval set.\\n    /// @param spender The address which will be allowed to spend owner's tokens.\\n    /// @param _approved A boolean of the approval status to set to.\\n    /// @param deadline The timestamp which the signature must be submitted by\\n    ///        to be valid.\\n    /// @param v Extra ECDSA data which allows public key recovery from\\n    ///        signature assumed to be 27 or 28.\\n    /// @param r The r component of the ECDSA signature.\\n    /// @param s The s component of the ECDSA signature.\\n    /// @dev The signature for this function follows EIP 712 standard and should\\n    ///      be generated with the eth_signTypedData JSON RPC call instead of\\n    ///      the eth_sign JSON RPC call. If using out of date parity signing\\n    ///      libraries the v component may need to be adjusted. Also it is very\\n    ///      rare but possible for v to be other values, those values are not\\n    ///      supported.\\n    function permitForAll(\\n        address owner,\\n        address spender,\\n        bool _approved,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        (bool success, bytes memory result) = target0.delegatecall(\\n            abi.encodeCall(\\n                HyperdriveTarget0.permitForAll,\\n                (\\n                    domainSeparator(),\\n                    PERMIT_TYPEHASH,\\n                    owner,\\n                    spender,\\n                    _approved,\\n                    deadline,\\n                    v,\\n                    r,\\n                    s\\n                )\\n            )\\n        );\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n        assembly {\\n            return(add(result, 32), mload(result))\\n        }\\n    }\\n\\n    /// EIP712\\n\\n    /// @notice Computes the EIP712 domain separator which prevents user signed\\n    ///         messages for this contract to be replayed in other contracts:\\n    ///         https://eips.ethereum.org/EIPS/eip-712.\\n    /// @return The EIP712 domain separator.\\n    function domainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /// Helpers ///\\n\\n    /// @dev Makes a delegatecall to the extras contract with the provided\\n    ///      calldata. This will revert if the call is unsuccessful.\\n    /// @param _target The target of the delegatecall.\\n    /// @return The returndata of the delegatecall.\\n    function _delegate(address _target) internal returns (bytes memory) {\\n        (bool success, bytes memory result) = _target.delegatecall(msg.data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n        assembly {\\n            return(add(result, 32), mload(result))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/external/HyperdriveTarget0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveRead } from \\\"../interfaces/IHyperdriveRead.sol\\\";\\nimport { HyperdriveAdmin } from \\\"../internal/HyperdriveAdmin.sol\\\";\\nimport { HyperdriveCheckpoint } from \\\"../internal/HyperdriveCheckpoint.sol\\\";\\nimport { HyperdriveLong } from \\\"../internal/HyperdriveLong.sol\\\";\\nimport { HyperdriveLP } from \\\"../internal/HyperdriveLP.sol\\\";\\nimport { HyperdriveMultiToken } from \\\"../internal/HyperdriveMultiToken.sol\\\";\\nimport { HyperdriveShort } from \\\"../internal/HyperdriveShort.sol\\\";\\nimport { HyperdriveStorage } from \\\"../internal/HyperdriveStorage.sol\\\";\\nimport { AssetId } from \\\"../libraries/AssetId.sol\\\";\\nimport { VERSION } from \\\"../libraries/Constants.sol\\\";\\nimport { FixedPointMath } from \\\"../libraries/FixedPointMath.sol\\\";\\nimport { LPMath } from \\\"../libraries/LPMath.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveTarget0\\n/// @notice Hyperdrive's target 0 logic contract.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveTarget0 is\\n    IHyperdriveRead,\\n    HyperdriveAdmin,\\n    HyperdriveMultiToken,\\n    HyperdriveLP,\\n    HyperdriveLong,\\n    HyperdriveShort,\\n    HyperdriveCheckpoint\\n{\\n    using FixedPointMath for uint256;\\n\\n    /// @notice Instantiates target0.\\n    /// @param _config The configuration of the Hyperdrive pool.\\n    constructor(\\n        IHyperdrive.PoolConfig memory _config\\n    ) HyperdriveStorage(_config) {}\\n\\n    /// Admin ///\\n\\n    /// @notice This function collects the governance fees accrued by the pool.\\n    /// @param _options The options that configure how the fees are settled.\\n    /// @return proceeds The governance fees collected. The units of this\\n    ///         quantity are either base or vault shares, depending on the value\\n    ///         of `_options.asBase`.\\n    function collectGovernanceFee(\\n        IHyperdrive.Options calldata _options\\n    ) external returns (uint256 proceeds) {\\n        return _collectGovernanceFee(_options);\\n    }\\n\\n    /// @notice Allows an authorized address to pause this contract.\\n    /// @param _status True to pause all deposits and false to unpause them.\\n    function pause(bool _status) external {\\n        _pause(_status);\\n    }\\n\\n    /// @notice Allows governance to change the fee collector.\\n    /// @param _who The new fee collector address.\\n    function setFeeCollector(address _who) external {\\n        _setFeeCollector(_who);\\n    }\\n\\n    /// @notice Allows governance to change the sweep collector.\\n    /// @param _who The new sweep collector address.\\n    function setSweepCollector(address _who) external {\\n        _setSweepCollector(_who);\\n    }\\n\\n    /// @dev Allows governance to transfer the checkpoint rewarder.\\n    /// @param _checkpointRewarder The new checkpoint rewarder.\\n    function setCheckpointRewarder(address _checkpointRewarder) external {\\n        _setCheckpointRewarder(_checkpointRewarder);\\n    }\\n\\n    /// @notice Allows governance to change governance.\\n    /// @param _who The new governance address.\\n    function setGovernance(address _who) external {\\n        _setGovernance(_who);\\n    }\\n\\n    /// @notice Allows governance to change the pauser status of an address.\\n    /// @param who The address to change.\\n    /// @param status The new pauser status.\\n    function setPauser(address who, bool status) external {\\n        _setPauser(who, status);\\n    }\\n\\n    /// @notice Transfers the contract's balance of a target token to the sweep\\n    ///         collector address.\\n    /// @dev WARN: It is unlikely but possible that there is a selector overlap\\n    ///      with 'transfer'. Any integrating contracts should be checked\\n    ///      for that, as it may result in an unexpected call from this address.\\n    /// @param _target The target token to sweep.\\n    function sweep(IERC20 _target) external {\\n        _sweep(_target);\\n    }\\n\\n    /// MultiToken ///\\n\\n    /// @notice Transfers an amount of assets from the source to the destination.\\n    /// @param tokenID The token identifier.\\n    /// @param from The address whose balance will be reduced.\\n    /// @param to The address whose balance will be increased.\\n    /// @param amount The amount of token to move.\\n    function transferFrom(\\n        uint256 tokenID,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        // Forward to our internal version\\n        _transferFrom(tokenID, from, to, amount, msg.sender);\\n    }\\n\\n    /// @notice Permissioned transfer for the bridge to access, only callable by\\n    ///         the ERC20 linking bridge.\\n    /// @param tokenID The token identifier.\\n    /// @param from The address whose balance will be reduced.\\n    /// @param to The address whose balance will be increased.\\n    /// @param amount The amount of token to move.\\n    /// @param caller The msg.sender from the bridge.\\n    function transferFromBridge(\\n        uint256 tokenID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address caller\\n    ) external onlyLinker(tokenID) {\\n        // Route to our internal transfer\\n        _transferFrom(tokenID, from, to, amount, caller);\\n    }\\n\\n    /// @notice Allows the compatibility linking contract to forward calls to\\n    ///         set asset approvals.\\n    /// @param tokenID The asset to approve the use of.\\n    /// @param operator The address who will be able to use the tokens.\\n    /// @param amount The max tokens the approved person can use, setting to\\n    ///        uint256.max will cause the value to never decrement [saving gas\\n    ///        on transfer].\\n    /// @param caller The eth address which called the linking contract.\\n    function setApprovalBridge(\\n        uint256 tokenID,\\n        address operator,\\n        uint256 amount,\\n        address caller\\n    ) external onlyLinker(tokenID) {\\n        _setApproval(tokenID, operator, amount, caller);\\n    }\\n\\n    /// @notice Allows a user to approve an operator to use all of their assets.\\n    /// @param operator The eth address which can access the caller's assets.\\n    /// @param approved True to approve, false to remove approval.\\n    function setApprovalForAll(address operator, bool approved) external {\\n        // set the appropriate state\\n        _isApprovedForAll[msg.sender][operator] = approved;\\n        // Emit an event to track approval\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Allows a user to set an approval for an individual asset with\\n    ///         specific amount.\\n    /// @param tokenID The asset to approve the use of.\\n    /// @param operator The address who will be able to use the tokens.\\n    /// @param amount The max tokens the approved person can use, setting to\\n    ///        uint256.max will cause the value to never decrement (saving gas\\n    ///        on transfer).\\n    function setApproval(\\n        uint256 tokenID,\\n        address operator,\\n        uint256 amount\\n    ) external {\\n        _setApproval(tokenID, operator, amount, msg.sender);\\n    }\\n\\n    /// @notice Transfers several assets from one account to another.\\n    /// @param from The source account.\\n    /// @param to The destination account.\\n    /// @param ids The array of token ids of the asset to transfer.\\n    /// @param values The amount of each token to transfer.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) external {\\n        _batchTransferFrom(from, to, ids, values);\\n    }\\n\\n    /// @notice Allows a caller who is not the owner of an account to execute\\n    ///         the functionality of 'approve' for all assets with the owner's\\n    ///         signature.\\n    /// @param domainSeparator The EIP712 domain separator of the contract.\\n    /// @param permitTypeHash The EIP712 domain separator of the contract.\\n    /// @param owner The owner of the account which is having the new approval set.\\n    /// @param spender The address which will be allowed to spend owner's tokens.\\n    /// @param _approved A boolean of the approval status to set to.\\n    /// @param deadline The timestamp which the signature must be submitted by\\n    ///        to be valid.\\n    /// @param v Extra ECDSA data which allows public key recovery from\\n    ///        signature assumed to be 27 or 28.\\n    /// @param r The r component of the ECDSA signature.\\n    /// @param s The s component of the ECDSA signature.\\n    /// @dev The signature for this function follows EIP 712 standard and should\\n    ///      be generated with the eth_signTypedData JSON RPC call instead of\\n    ///      the eth_sign JSON RPC call. If using out of date parity signing\\n    ///      libraries the v component may need to be adjusted. Also it is very\\n    ///      rare but possible for v to be other values, those values are not\\n    ///      supported.\\n    function permitForAll(\\n        bytes32 domainSeparator,\\n        bytes32 permitTypeHash,\\n        address owner,\\n        address spender,\\n        bool _approved,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        _permitForAll(\\n            domainSeparator,\\n            permitTypeHash,\\n            owner,\\n            spender,\\n            _approved,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// Getters ///\\n\\n    /// @notice Gets the instance's name.\\n    /// @return The instance's name.\\n    function name() external view returns (string memory) {\\n        _revert(abi.encode(_name));\\n    }\\n\\n    /// @notice Gets the instance's kind.\\n    /// @return The instance's kind.\\n    function kind() external pure virtual returns (string memory);\\n\\n    /// @notice Gets the instance's version.\\n    /// @return The instance's version.\\n    function version() external pure returns (string memory) {\\n        _revert(abi.encode(VERSION));\\n    }\\n\\n    /// @notice Gets the pauser status of an address.\\n    /// @param _account The account to check.\\n    /// @return The pauser status.\\n    function isPauser(address _account) external view returns (bool) {\\n        _revert(abi.encode(_pausers[_account]));\\n    }\\n\\n    /// @notice Gets the base token.\\n    /// @return The base token address.\\n    function baseToken() external view returns (address) {\\n        _revert(abi.encode(_baseToken));\\n    }\\n\\n    /// @notice Gets the vault shares token.\\n    /// @return The vault shares token address.\\n    function vaultSharesToken() external view returns (address) {\\n        _revert(abi.encode(_vaultSharesToken));\\n    }\\n\\n    /// @notice Gets a specified checkpoint.\\n    /// @param _checkpointTime The checkpoint time.\\n    /// @return The checkpoint.\\n    function getCheckpoint(\\n        uint256 _checkpointTime\\n    ) external view returns (IHyperdrive.Checkpoint memory) {\\n        _revert(abi.encode(_checkpoints[_checkpointTime]));\\n    }\\n\\n    /// @notice Gets the checkpoint exposure at a specified time.\\n    /// @param _checkpointTime The checkpoint time.\\n    /// @return The checkpoint exposure.\\n    function getCheckpointExposure(\\n        uint256 _checkpointTime\\n    ) external view returns (int256) {\\n        _revert(\\n            abi.encode(_nonNettedLongs(_checkpointTime + _positionDuration))\\n        );\\n    }\\n\\n    /// @notice Gets the pool's configuration parameters.\\n    /// @dev These parameters are immutable, so this should only need to be\\n    ///      called once.\\n    /// @return The PoolConfig struct.\\n    function getPoolConfig()\\n        external\\n        view\\n        returns (IHyperdrive.PoolConfig memory)\\n    {\\n        _revert(\\n            abi.encode(\\n                IHyperdrive.PoolConfig({\\n                    baseToken: _baseToken,\\n                    vaultSharesToken: _vaultSharesToken,\\n                    linkerFactory: _linkerFactory,\\n                    linkerCodeHash: _linkerCodeHash,\\n                    initialVaultSharePrice: _initialVaultSharePrice,\\n                    minimumShareReserves: _minimumShareReserves,\\n                    minimumTransactionAmount: _minimumTransactionAmount,\\n                    circuitBreakerDelta: _circuitBreakerDelta,\\n                    positionDuration: _positionDuration,\\n                    checkpointDuration: _checkpointDuration,\\n                    timeStretch: _timeStretch,\\n                    governance: _governance,\\n                    feeCollector: _feeCollector,\\n                    sweepCollector: _sweepCollector,\\n                    checkpointRewarder: _checkpointRewarder,\\n                    fees: IHyperdrive.Fees(\\n                        _curveFee,\\n                        _flatFee,\\n                        _governanceLPFee,\\n                        _governanceZombieFee\\n                    )\\n                })\\n            )\\n        );\\n    }\\n\\n    /// @notice Gets info about the pool's reserves and other state that is\\n    ///         important to evaluate potential trades.\\n    /// @return The pool info.\\n    function getPoolInfo() external view returns (IHyperdrive.PoolInfo memory) {\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        uint256 lpTotalSupply = _totalSupply[AssetId._LP_ASSET_ID] +\\n            _totalSupply[AssetId._WITHDRAWAL_SHARE_ASSET_ID] -\\n            _withdrawPool.readyToWithdraw;\\n        uint256 presentValue;\\n        if (vaultSharePrice > 0) {\\n            (presentValue, ) = LPMath.calculatePresentValueSafe(\\n                _getPresentValueParams(vaultSharePrice)\\n            );\\n            presentValue = presentValue.mulDown(vaultSharePrice);\\n        }\\n        IHyperdrive.PoolInfo memory poolInfo = IHyperdrive.PoolInfo({\\n            shareReserves: _marketState.shareReserves,\\n            shareAdjustment: _marketState.shareAdjustment,\\n            zombieBaseProceeds: _marketState.zombieBaseProceeds,\\n            zombieShareReserves: _marketState.zombieShareReserves,\\n            bondReserves: _marketState.bondReserves,\\n            vaultSharePrice: vaultSharePrice,\\n            longsOutstanding: _marketState.longsOutstanding,\\n            longAverageMaturityTime: _marketState.longAverageMaturityTime,\\n            shortsOutstanding: _marketState.shortsOutstanding,\\n            shortAverageMaturityTime: _marketState.shortAverageMaturityTime,\\n            lpTotalSupply: lpTotalSupply,\\n            lpSharePrice: lpTotalSupply == 0\\n                ? 0\\n                : presentValue.divDown(lpTotalSupply),\\n            withdrawalSharesReadyToWithdraw: _withdrawPool.readyToWithdraw,\\n            withdrawalSharesProceeds: _withdrawPool.proceeds,\\n            longExposure: _marketState.longExposure\\n        });\\n        _revert(abi.encode(poolInfo));\\n    }\\n\\n    /// @notice Gets information about the withdrawal pool.\\n    /// @return Hyperdrive's withdrawal pool information.\\n    function getWithdrawPool()\\n        external\\n        view\\n        returns (IHyperdrive.WithdrawPool memory)\\n    {\\n        _revert(\\n            abi.encode(\\n                IHyperdrive.WithdrawPool({\\n                    readyToWithdraw: _withdrawPool.readyToWithdraw,\\n                    proceeds: _withdrawPool.proceeds\\n                })\\n            )\\n        );\\n    }\\n\\n    /// @notice Gets info about the fees presently accrued by the pool.\\n    /// @return Governance fees denominated in shares yet to be collected.\\n    function getUncollectedGovernanceFees() external view returns (uint256) {\\n        _revert(abi.encode(_governanceFeesAccrued));\\n    }\\n\\n    /// @notice Gets the market state.\\n    /// @return The market state.\\n    function getMarketState()\\n        external\\n        view\\n        returns (IHyperdrive.MarketState memory)\\n    {\\n        _revert(abi.encode(_marketState));\\n    }\\n\\n    /// @notice Allows plugin data libs to provide getters or other complex\\n    ///         logic instead of the main.\\n    /// @param _slots The storage slots the caller wants the data from.\\n    /// @return A raw array of loaded data.\\n    function load(\\n        uint256[] calldata _slots\\n    ) external view returns (bytes32[] memory) {\\n        bytes32[] memory loaded = new bytes32[](_slots.length);\\n\\n        // Iterate on requested loads and then do them.\\n        for (uint256 i = 0; i < _slots.length; ) {\\n            uint256 slot = _slots[i];\\n            bytes32 data;\\n            assembly (\\\"memory-safe\\\") {\\n                data := sload(slot)\\n            }\\n            loaded[i] = data;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _revert(abi.encode(loaded));\\n    }\\n\\n    /// @notice Convert an amount of vault shares to an amount of base.\\n    /// @param _shareAmount The vault shares amount.\\n    /// @return baseAmount The base amount.\\n    function convertToBase(\\n        uint256 _shareAmount\\n    ) external view returns (uint256) {\\n        _revert(abi.encode(_convertToBase(_shareAmount)));\\n    }\\n\\n    /// @notice Convert an amount of base to an amount of vault shares.\\n    /// @param _baseAmount The base amount.\\n    /// @return shareAmount The vault shares amount.\\n    function convertToShares(\\n        uint256 _baseAmount\\n    ) external view returns (uint256) {\\n        _revert(abi.encode(_convertToShares(_baseAmount)));\\n    }\\n\\n    /// @notice Gets an account's balance of a sub-token.\\n    /// @param tokenId The sub-token id.\\n    /// @param account The account.\\n    /// @return The balance.\\n    function balanceOf(\\n        uint256 tokenId,\\n        address account\\n    ) external view returns (uint256) {\\n        _revert(abi.encode(_balanceOf[tokenId][account]));\\n    }\\n\\n    /// @notice Gets the total supply of a sub-token.\\n    /// @param tokenId The sub-token id.\\n    /// @return The total supply.\\n    function totalSupply(uint256 tokenId) external view returns (uint256) {\\n        _revert(abi.encode(_totalSupply[tokenId]));\\n    }\\n\\n    /// @notice Gets the approval status of an operator for an account.\\n    /// @param account The account.\\n    /// @param operator The operator.\\n    /// @return The approval status.\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool) {\\n        _revert(abi.encode(_isApprovedForAll[account][operator]));\\n    }\\n\\n    /// @notice Gets the approval status of an operator for an account.\\n    /// @param tokenId The sub-token id.\\n    /// @param account The account.\\n    /// @param spender The spender.\\n    /// @return The approval status.\\n    function perTokenApprovals(\\n        uint256 tokenId,\\n        address account,\\n        address spender\\n    ) external view returns (uint256) {\\n        _revert(abi.encode(_perTokenApprovals[tokenId][account][spender]));\\n    }\\n\\n    /// @notice Gets the decimals of the MultiToken. This is the same as the\\n    ///         decimals used by the base token.\\n    /// @return The decimals of the MultiToken.\\n    function decimals() external view virtual returns (uint8) {\\n        _revert(abi.encode(_baseToken.decimals()));\\n    }\\n\\n    /// @notice Gets the name of a sub-token.\\n    /// @param tokenId The sub-token id.\\n    /// @return The name.\\n    function name(uint256 tokenId) external pure returns (string memory) {\\n        _revert(abi.encode(AssetId.assetIdToName(tokenId)));\\n    }\\n\\n    /// @notice Gets the symbol of a sub-token.\\n    /// @param tokenId The sub-token id.\\n    /// @return The symbol.\\n    function symbol(uint256 tokenId) external pure returns (string memory) {\\n        _revert(abi.encode(AssetId.assetIdToSymbol(tokenId)));\\n    }\\n\\n    /// @notice Gets the permitForAll signature nonce for an account.\\n    /// @param account The account.\\n    /// @return The signature nonce.\\n    function nonces(address account) external view returns (uint256) {\\n        _revert(abi.encode(_nonces[account]));\\n    }\\n\\n    /// Helpers ///\\n\\n    /// @dev Reverts with the provided bytes. This is useful in getters used\\n    ///      with the force-revert delegatecall pattern.\\n    /// @param _bytes The bytes to revert with.\\n    function _revert(bytes memory _bytes) internal pure {\\n        revert IHyperdrive.ReturnData(_bytes);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/instances/reth/RETHBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { ERC20 } from \\\"openzeppelin/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { HyperdriveBase } from \\\"../../internal/HyperdriveBase.sol\\\";\\nimport { IHyperdrive } from \\\"../../interfaces/IHyperdrive.sol\\\";\\nimport { IRocketTokenRETH } from \\\"../../interfaces/IRocketTokenRETH.sol\\\";\\n\\n/// @author DELV\\n/// @title RETHHyperdrive\\n/// @notice The base contract for the rETH Hyperdrive implementation.\\n/// @dev Rocket Pool has it's own notion of shares to account for the accrual of\\n///      interest on the ether pooled in the Rocket Pool protocol. Instead of\\n///      maintaining a balance of shares, this integration can simply use Rocket Pool\\n///      shares directly.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract RETHBase is HyperdriveBase {\\n    using SafeERC20 for ERC20;\\n\\n    /// Yield Source ///\\n\\n    function _depositWithBase(\\n        uint256, // unused\\n        bytes calldata // unused\\n    ) internal pure override returns (uint256, uint256) {\\n        // Deposits with ETH is not supported because of accounting\\n        // issues due to the Rocket Pool deposit fee.\\n        revert IHyperdrive.UnsupportedToken();\\n    }\\n\\n    /// @dev Process a deposit in vault shares.\\n    /// @param _shareAmount The vault shares amount to deposit.\\n    function _depositWithShares(\\n        uint256 _shareAmount,\\n        bytes calldata // unused\\n    ) internal override {\\n        // Transfer rETH shares into the contract.\\n        ERC20(address(_vaultSharesToken)).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _shareAmount\\n        );\\n    }\\n\\n    /// @dev Process a withdrawal in base and send the proceeds to the\\n    ///      destination.\\n    /// @param _shareAmount The amount of vault shares to withdraw.\\n    /// @param _destination The destination of the withdrawal.\\n    /// @return amountWithdrawn The amount of base withdrawn.\\n    function _withdrawWithBase(\\n        uint256 _shareAmount,\\n        address _destination,\\n        bytes calldata // unused\\n    ) internal override returns (uint256 amountWithdrawn) {\\n        // Burning rETH shares in exchange for ether.\\n        // Ether proceeds are credited to this contract.\\n        IRocketTokenRETH(address(_vaultSharesToken)).burn(_shareAmount);\\n\\n        // Amount of ETH that was withdrawn from the yield source and\\n        // will be sent to the destination address.\\n        amountWithdrawn = address(this).balance;\\n\\n        // Return withdrawn ether to the destination.\\n        (bool success, ) = payable(_destination).call{ value: amountWithdrawn }(\\n            \\\"\\\"\\n        );\\n        if (!success) {\\n            revert IHyperdrive.TransferFailed();\\n        }\\n    }\\n\\n    /// @dev Process a withdrawal in vault shares and send the proceeds to the\\n    ///      destination.\\n    /// @param _shareAmount The amount of vault shares to withdraw.\\n    /// @param _destination The destination of the withdrawal.\\n    function _withdrawWithShares(\\n        uint256 _shareAmount,\\n        address _destination,\\n        bytes calldata // unused\\n    ) internal override {\\n        // Transfer the rETH shares to the destination.\\n        ERC20(address(_vaultSharesToken)).safeTransfer(\\n            _destination,\\n            _shareAmount\\n        );\\n    }\\n\\n    /// @dev Convert an amount of vault shares to an amount of base.\\n    /// @param _shareAmount The vault shares amount.\\n    /// @return baseAmount The base amount.\\n    function _convertToBase(\\n        uint256 _shareAmount\\n    ) internal view override returns (uint256) {\\n        return\\n            IRocketTokenRETH(address(_vaultSharesToken)).getEthValue(\\n                _shareAmount\\n            );\\n    }\\n\\n    /// @dev Convert an amount of base to an amount of vault shares.\\n    /// @param _baseAmount The base amount.\\n    /// @return shareAmount The vault shares amount.\\n    function _convertToShares(\\n        uint256 _baseAmount\\n    ) internal view override returns (uint256) {\\n        return\\n            IRocketTokenRETH(address(_vaultSharesToken)).getRethValue(\\n                _baseAmount\\n            );\\n    }\\n\\n    /// @dev Gets the total amount of shares held by the pool in the yield\\n    ///      source.\\n    /// @return shareAmount The total amount of shares.\\n    function _totalShares()\\n        internal\\n        view\\n        override\\n        returns (uint256 shareAmount)\\n    {\\n        return _vaultSharesToken.balanceOf(address(this));\\n    }\\n\\n    /// @dev We override the message value check since this integration is\\n    ///      not payable.\\n    function _checkMessageValue() internal view override {\\n        if (msg.value != 0) {\\n            revert IHyperdrive.NotPayable();\\n        }\\n    }\\n\\n    /// @dev Allows ether to be received only from the Rocket Pool rETH\\n    ///      token contract. Supports withdrawing as ethers from this\\n    ///      yield source.\\n    receive() external payable {\\n        if (msg.sender != address(_vaultSharesToken)) {\\n            revert IHyperdrive.TransferFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/instances/reth/RETHHyperdrive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { Hyperdrive } from \\\"../../external/Hyperdrive.sol\\\";\\nimport { IHyperdrive } from \\\"../../interfaces/IHyperdrive.sol\\\";\\nimport { RETHBase } from \\\"./RETHBase.sol\\\";\\n\\n///      ______  __                           _________      _____\\n///      ___  / / /____  ___________________________  /_________(_)__   ______\\n///      __  /_/ /__  / / /__  __ \\\\  _ \\\\_  ___/  __  /__  ___/_  /__ | / /  _ \\\\\\n///      _  __  / _  /_/ /__  /_/ /  __/  /   / /_/ / _  /   _  / __ |/ //  __/\\n///      /_/ /_/  _\\\\__, / _   ___/\\\\___//_/    \\\\__,_/  /_/    /_/  _____/ \\\\___/\\n///               /____/   /_/\\n///                     XXX          ++          ++          XXX\\n///     ############   XXXXX        ++0+        +0++        XXXXX   ###########\\n///   ##////////////########       ++00++      ++00++       ########///////////##\\n///  ##////////////##########      ++000++    ++000++      ##########///////////##\\n///  ##%%%%%%/////      ######     ++0000+    +0000++     ######     /////%%%%%%##\\n///    %%%%%%%%&&             ##   ++0000+    +0000++   ##           &&%%%%%%%%%\\n///         %&&&                ##  +o000+    +000o+  ##              &&&%\\n///                              ## ++00+-    -+00++ ##\\n///                               #% ++0+      +0++ %#\\n///                               ###-:Oo.++++.oO:-###\\n///                                ##: 00++++++00 :##\\n///                    #S###########* 0++00+++00++0 *##########S#\\n///                  #S               % $ 0+++0 $ %              S#\\n///                #S   ----------   %+++++:#:+++++%-----------    S#\\n///              #S   ------------- %++++: ### :++++%------------    S#\\n///             S    ---------------%++++*\\\\ | /*++++%-------------     S\\n///           #S     --------------- %++++ ~W~ ++++%666--o UUUU o-      S#\\n///         #S?      ---------------  %+++++~+++++%&&&8 o  \\\\  /  o       ?S#\\n///        ?*????**+++;::,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,::;+++**????*?\\n///      #?+////////////////////////////////////////////////////////////////+?#\\n///    #;;;;;//////////////////////////////////////////////////////////////;;;;;#\\n///  S;;;;;;;;;//////////////////////////////////////////////////////////;;;;;;;;;S\\n/// /;;;;;;;;;;;///////////////////////////////////////////////////////;;;;;;;;;;;;\\\\\\n/// |||OOOOOOOO||OOOOOOOO=========== __  ___        ===========OOOOOOOO||OOOOOOOO|||\\n/// |||OOOOOOOO||OOOOOOOO===========|  \\\\[__ |   \\\\  /===========OOOOOOOO||OOOOOOOO|||\\n/// |||OOOOOOOO||OOOOOOOO===========|__/[___|___ \\\\/ ===========OOOOOOOO||OOOOOOOO|||\\n/// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\n/// |||////////000000000000\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|:::::::::::::::|////////00000000000\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||\\n/// SSS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\000000000000////////|:::::0x666:::::|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\00000000000//////////SSS\\n/// SSS|||||||||||||||||||||||||||||:::::::::::::::||||||||||||||||||||||||||||||SSS\\n/// SSSSSSSS|_______________|______________||_______________|______________|SSSSSSSS\\n/// SSSSSSSS                                                                SSSSSSSS\\n/// SSSSSSSS                                                                SSSSSSSS\\n///\\n/// @author DELV\\n/// @title RETHHyperdrive\\n/// @notice A Hyperdrive instance that uses RETH as the yield source.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\ncontract RETHHyperdrive is Hyperdrive, RETHBase {\\n    /// @notice Instantiates Hyperdrive with RETH as the yield source.\\n    /// @param __name The name of the Hyperdrive pool.\\n    /// @param _config The configuration of the Hyperdrive pool.\\n    /// @param _target0 The target0 address.\\n    /// @param _target1 The target1 address.\\n    /// @param _target2 The target2 address.\\n    /// @param _target3 The target3 address.\\n    /// @param _target4 The target4 address.\\n    constructor(\\n        string memory __name,\\n        IHyperdrive.PoolConfig memory _config,\\n        address _target0,\\n        address _target1,\\n        address _target2,\\n        address _target3,\\n        address _target4\\n    )\\n        Hyperdrive(\\n            __name,\\n            _config,\\n            _target0,\\n            _target1,\\n            _target2,\\n            _target3,\\n            _target4\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    /// @notice Emitted when tokens are transferred from one account to another.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an owner changes the approval for a spender.\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice Updates the allowance of a spender on behalf of the sender.\\n    /// @param spender The account with the allowance.\\n    /// @param amount The new allowance of the spender.\\n    /// @return A flag indicating whether or not the approval succeeded.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers tokens from the sender's account to another account.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of tokens that will be transferred.\\n    /// @return A flag indicating whether or not the transfer succeeded.\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers tokens from an owner to a recipient. This draws from\\n    ///         the sender's allowance.\\n    /// @param from The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of tokens that will be transferred.\\n    /// @return A flag indicating whether or not the transfer succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Gets the token's name.\\n    /// @return The token's name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the token's symbol.\\n    /// @return The token's symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the token's decimals.\\n    /// @return The token's decimals.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Gets the token's total supply.\\n    /// @return The token's total supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Gets the allowance of a spender for an owner.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The spender of the tokens.\\n    /// @return The allowance of the spender for the owner.\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /// @notice Gets the balance of an account.\\n    /// @param account The owner of the tokens.\\n    /// @return The account's balance.\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IHyperdrive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { IHyperdriveCore } from \\\"./IHyperdriveCore.sol\\\";\\nimport { IHyperdriveEvents } from \\\"./IHyperdriveEvents.sol\\\";\\nimport { IHyperdriveRead } from \\\"./IHyperdriveRead.sol\\\";\\nimport { IMultiToken } from \\\"./IMultiToken.sol\\\";\\n\\ninterface IHyperdrive is\\n    IHyperdriveEvents,\\n    IHyperdriveRead,\\n    IHyperdriveCore,\\n    IMultiToken\\n{\\n    /// Structs ///\\n\\n    struct MarketState {\\n        /// @dev The pool's share reserves.\\n        uint128 shareReserves;\\n        /// @dev The pool's bond reserves.\\n        uint128 bondReserves;\\n        /// @dev The global exposure of the pool due to open longs\\n        uint128 longExposure;\\n        /// @dev The amount of longs that are still open.\\n        uint128 longsOutstanding;\\n        /// @dev The net amount of shares that have been added and removed from\\n        ///      the share reserves due to flat updates.\\n        int128 shareAdjustment;\\n        /// @dev The amount of shorts that are still open.\\n        uint128 shortsOutstanding;\\n        /// @dev The average maturity time of outstanding long positions.\\n        uint128 longAverageMaturityTime;\\n        /// @dev The average maturity time of outstanding short positions.\\n        uint128 shortAverageMaturityTime;\\n        /// @dev A flag indicating whether or not the pool has been initialized.\\n        bool isInitialized;\\n        /// @dev A flag indicating whether or not the pool is paused.\\n        bool isPaused;\\n        /// @dev The proceeds in base of the unredeemed matured positions.\\n        uint112 zombieBaseProceeds;\\n        /// @dev The shares reserved for unredeemed matured positions.\\n        uint128 zombieShareReserves;\\n    }\\n\\n    struct Checkpoint {\\n        /// @dev The time-weighted average spot price of the checkpoint. This is\\n        ///      used to implement circuit-breakers that prevents liquidity from\\n        ///      being added when the pool's rate moves too quickly.\\n        uint128 weightedSpotPrice;\\n        /// @dev The last time the weighted spot price was updated.\\n        uint128 lastWeightedSpotPriceUpdateTime;\\n        /// @dev The vault share price during the first transaction in the\\n        ///      checkpoint. This is used to track the amount of interest\\n        ///      accrued by shorts as well as the vault share price at closing\\n        ///      of matured longs and shorts.\\n        uint128 vaultSharePrice;\\n    }\\n\\n    struct WithdrawPool {\\n        /// @dev The amount of withdrawal shares that are ready to be redeemed.\\n        uint128 readyToWithdraw;\\n        /// @dev The proceeds recovered by the withdrawal pool.\\n        uint128 proceeds;\\n    }\\n\\n    struct Fees {\\n        /// @dev The LP fee applied to the curve portion of a trade.\\n        uint256 curve;\\n        /// @dev The LP fee applied to the flat portion of a trade.\\n        uint256 flat;\\n        /// @dev The portion of the LP fee that goes to governance.\\n        uint256 governanceLP;\\n        /// @dev The portion of the zombie interest that goes to governance.\\n        uint256 governanceZombie;\\n    }\\n\\n    struct PoolDeployConfig {\\n        /// @dev The address of the base token.\\n        IERC20 baseToken;\\n        /// @dev The address of the vault shares token.\\n        IERC20 vaultSharesToken;\\n        /// @dev The linker factory used by this Hyperdrive instance.\\n        address linkerFactory;\\n        /// @dev The hash of the ERC20 linker's code. This is used to derive the\\n        ///      create2 addresses of the ERC20 linkers used by this instance.\\n        bytes32 linkerCodeHash;\\n        /// @dev The minimum share reserves.\\n        uint256 minimumShareReserves;\\n        /// @dev The minimum amount of tokens that a position can be opened or\\n        ///      closed with.\\n        uint256 minimumTransactionAmount;\\n        /// @dev The maximum delta between the last checkpoint's weighted spot\\n        ///      APR and the current spot APR for an LP to add liquidity. This\\n        ///      protects LPs from sandwich attacks.\\n        uint256 circuitBreakerDelta;\\n        /// @dev The duration of a position prior to maturity.\\n        uint256 positionDuration;\\n        /// @dev The duration of a checkpoint.\\n        uint256 checkpointDuration;\\n        /// @dev A parameter which decreases slippage around a target rate.\\n        uint256 timeStretch;\\n        /// @dev The address of the governance contract.\\n        address governance;\\n        /// @dev The address which collects governance fees\\n        address feeCollector;\\n        /// @dev The address which collects swept tokens.\\n        address sweepCollector;\\n        /// @dev The address that will reward checkpoint minters.\\n        address checkpointRewarder;\\n        /// @dev The fees applied to trades.\\n        IHyperdrive.Fees fees;\\n    }\\n\\n    struct PoolConfig {\\n        /// @dev The address of the base token.\\n        IERC20 baseToken;\\n        /// @dev The address of the vault shares token.\\n        IERC20 vaultSharesToken;\\n        /// @dev The linker factory used by this Hyperdrive instance.\\n        address linkerFactory;\\n        /// @dev The hash of the ERC20 linker's code. This is used to derive the\\n        ///      create2 addresses of the ERC20 linkers used by this instance.\\n        bytes32 linkerCodeHash;\\n        /// @dev The initial vault share price.\\n        uint256 initialVaultSharePrice;\\n        /// @dev The minimum share reserves.\\n        uint256 minimumShareReserves;\\n        /// @dev The minimum amount of tokens that a position can be opened or\\n        ///      closed with.\\n        uint256 minimumTransactionAmount;\\n        /// @dev The maximum delta between the last checkpoint's weighted spot\\n        ///      APR and the current spot APR for an LP to add liquidity. This\\n        ///      protects LPs from sandwich attacks.\\n        uint256 circuitBreakerDelta;\\n        /// @dev The duration of a position prior to maturity.\\n        uint256 positionDuration;\\n        /// @dev The duration of a checkpoint.\\n        uint256 checkpointDuration;\\n        /// @dev A parameter which decreases slippage around a target rate.\\n        uint256 timeStretch;\\n        /// @dev The address of the governance contract.\\n        address governance;\\n        /// @dev The address which collects governance fees\\n        address feeCollector;\\n        /// @dev The address which collects swept tokens.\\n        address sweepCollector;\\n        /// @dev The address that will reward checkpoint minters.\\n        address checkpointRewarder;\\n        /// @dev The fees applied to trades.\\n        IHyperdrive.Fees fees;\\n    }\\n\\n    struct PoolInfo {\\n        /// @dev The reserves of shares held by the pool.\\n        uint256 shareReserves;\\n        /// @dev The adjustment applied to the share reserves when pricing\\n        ///      bonds. This is used to ensure that the pricing mechanism is\\n        ///      held invariant under flat updates for security reasons.\\n        int256 shareAdjustment;\\n        /// @dev The proceeds in base of the unredeemed matured positions.\\n        uint256 zombieBaseProceeds;\\n        /// @dev The shares reserved for unredeemed matured positions.\\n        uint256 zombieShareReserves;\\n        /// @dev The reserves of bonds held by the pool.\\n        uint256 bondReserves;\\n        /// @dev The total supply of LP shares.\\n        uint256 lpTotalSupply;\\n        /// @dev The current vault share price.\\n        uint256 vaultSharePrice;\\n        /// @dev An amount of bonds representing outstanding unmatured longs.\\n        uint256 longsOutstanding;\\n        /// @dev The average maturity time of the outstanding longs.\\n        uint256 longAverageMaturityTime;\\n        /// @dev An amount of bonds representing outstanding unmatured shorts.\\n        uint256 shortsOutstanding;\\n        /// @dev The average maturity time of the outstanding shorts.\\n        uint256 shortAverageMaturityTime;\\n        /// @dev The amount of withdrawal shares that are ready to be redeemed.\\n        uint256 withdrawalSharesReadyToWithdraw;\\n        /// @dev The proceeds recovered by the withdrawal pool.\\n        uint256 withdrawalSharesProceeds;\\n        /// @dev The share price of LP shares. This can be used to mark LP\\n        ///      shares to market.\\n        uint256 lpSharePrice;\\n        /// @dev The global exposure of the pool due to open positions\\n        uint256 longExposure;\\n    }\\n\\n    struct Options {\\n        /// @dev The address that receives the proceeds of a trade or LP action.\\n        address destination;\\n        /// @dev A boolean indicating that the trade or LP action should be\\n        ///      settled in base if true and in the yield source shares if false.\\n        bool asBase;\\n        /// @dev Additional data that can be used to implement custom logic in\\n        ///      implementation contracts.\\n        bytes extraData;\\n    }\\n\\n    /// Errors ///\\n\\n    /// @notice Thrown when the inputs to a batch transfer don't match in\\n    ///         length.\\n    error BatchInputLengthMismatch();\\n\\n    /// @notice Thrown when the initializer doesn't provide sufficient liquidity\\n    ///         to cover the minimum share reserves and the LP shares that are\\n    ///         burned on initialization.\\n    error BelowMinimumContribution();\\n\\n    /// @notice Thrown when the add liquidity circuit breaker is triggered.\\n    error CircuitBreakerTriggered();\\n\\n    /// @notice Thrown when the exponent to `FixedPointMath.exp` would cause the\\n    ///         the result to be larger than the representable scale.\\n    error ExpInvalidExponent();\\n\\n    /// @notice Thrown when a permit signature is expired.\\n    error ExpiredDeadline();\\n\\n    /// @notice Thrown when a user doesn't have a sufficient balance to perform\\n    ///         an action.\\n    error InsufficientBalance();\\n\\n    /// @notice Thrown when the pool doesn't have sufficient liquidity to\\n    ///         complete the trade.\\n    error InsufficientLiquidity();\\n\\n    /// @notice Thrown when the pool's APR is outside the bounds specified by\\n    ///         a LP when they are adding liquidity.\\n    error InvalidApr();\\n\\n    /// @notice Thrown when the checkpoint time provided to `checkpoint` is\\n    ///         larger than the current checkpoint or isn't divisible by the\\n    ///         checkpoint duration.\\n    error InvalidCheckpointTime();\\n\\n    /// @notice Thrown when the effective share reserves don't exceed the\\n    ///         minimum share reserves when the pool is initialized.\\n    error InvalidEffectiveShareReserves();\\n\\n    /// @notice Thrown when the caller of one of MultiToken's bridge-only\\n    ///         functions is not the corresponding bridge.\\n    error InvalidERC20Bridge();\\n\\n    /// @notice Thrown when a destination other than the fee collector is\\n    ///         specified in `collectGovernanceFee`.\\n    error InvalidFeeDestination();\\n\\n    /// @notice Thrown when the initial share price doesn't match the share\\n    ///         price of the underlying yield source on deployment.\\n    error InvalidInitialVaultSharePrice();\\n\\n    /// @notice Thrown when the LP share price couldn't be calculated in a\\n    ///         critical situation.\\n    error InvalidLPSharePrice();\\n\\n    /// @notice Thrown when the present value calculation fails.\\n    error InvalidPresentValue();\\n\\n    /// @notice Thrown when an invalid signature is used provide permit access\\n    ///         to the MultiToken. A signature is considered to be invalid if\\n    ///         it fails to recover to the owner's address.\\n    error InvalidSignature();\\n\\n    /// @notice Thrown when the timestamp used to construct an asset ID exceeds\\n    ///         the uint248 scale.\\n    error InvalidTimestamp();\\n\\n    /// @notice Thrown when the input to `FixedPointMath.ln` is less than or\\n    ///         equal to zero.\\n    error LnInvalidInput();\\n\\n    /// @notice Thrown when vault share price is smaller than the minimum share\\n    ///         price. This protects traders from unknowingly opening a long or\\n    ///         short after negative interest has accrued.\\n    error MinimumSharePrice();\\n\\n    /// @notice Thrown when the input or output amount of a trade is smaller\\n    ///         than the minimum transaction amount. This protects traders and\\n    ///         LPs from losses of precision that can occur at small scales.\\n    error MinimumTransactionAmount();\\n\\n    /// @notice Thrown when the present value prior to adding liquidity results in a\\n    ///         decrease in present value after liquidity. This is caused by a\\n    ///         shortage in liquidity that prevents all the open positions being\\n    ///         closed on the curve and therefore marked to 1.\\n    error DecreasedPresentValueWhenAddingLiquidity();\\n\\n    /// @notice Thrown when ether is sent to an instance that doesn't accept\\n    ///         ether as a deposit asset.\\n    error NotPayable();\\n\\n    /// @notice Thrown when a slippage guard is violated.\\n    error OutputLimit();\\n\\n    /// @notice Thrown when the pool is already initialized and a trader calls\\n    ///         `initialize`. This prevents the pool from being reinitialized\\n    ///         after it has been initialized.\\n    error PoolAlreadyInitialized();\\n\\n    /// @notice Thrown when the pool is paused and a trader tries to add\\n    ///         liquidity, open a long, or open a short. Traders can still\\n    ///         close their existing positions while the pool is paused.\\n    error PoolIsPaused();\\n\\n    /// @notice Thrown when the owner passed to permit is the zero address. This\\n    ///         prevents users from spending the funds in address zero by\\n    ///         sending an invalid signature to ecrecover.\\n    error RestrictedZeroAddress();\\n\\n    /// @notice Thrown by a read-only function called by the proxy. Unlike a\\n    ///         normal error, this error actually indicates that a read-only\\n    ///         call succeeded. The data that it wraps is the return data from\\n    ///         the read-only call.\\n    error ReturnData(bytes data);\\n\\n    /// @notice Thrown when an asset is swept from the pool and one of the\\n    ///         pool's depository assets changes.\\n    error SweepFailed();\\n\\n    /// @notice Thrown when the distribute excess idle calculation fails due\\n    ///         to the starting present value calculation failing.\\n    error DistributeExcessIdleFailed();\\n\\n    /// @notice Thrown when an ether transfer fails.\\n    error TransferFailed();\\n\\n    /// @notice Thrown when an unauthorized user attempts to access admin\\n    ///         functionality.\\n    error Unauthorized();\\n\\n    /// @notice Thrown when a read-only call succeeds. The proxy architecture\\n    ///         uses a force-revert delegatecall pattern to ensure that calls\\n    ///         that are intended to be read-only are actually read-only.\\n    error UnexpectedSuccess();\\n\\n    /// @notice Thrown when casting a value to a uint112 that is outside of the\\n    ///         uint128 scale.\\n    error UnsafeCastToUint112();\\n\\n    /// @notice Thrown when casting a value to a uint128 that is outside of the\\n    ///         uint128 scale.\\n    error UnsafeCastToUint128();\\n\\n    /// @notice Thrown when casting a value to a int128 that is outside of the\\n    ///         int128 scale.\\n    error UnsafeCastToInt128();\\n\\n    /// @notice Thrown when casting a value to a int256 that is outside of the\\n    ///         int256 scale.\\n    error UnsafeCastToInt256();\\n\\n    /// @notice Thrown when an unsupported option is passed to a function or\\n    ///         a user attempts to sweep an invalid token. The options and sweep\\n    ///         targets that are supported vary between instances.\\n    error UnsupportedToken();\\n\\n    /// @notice Thrown when `LPMath.calculateUpdateLiquidity` fails.\\n    error UpdateLiquidityFailed();\\n\\n    /// Getters ///\\n\\n    /// @notice Gets the target0 address.\\n    /// @return The target0 address.\\n    function target0() external view returns (address);\\n\\n    /// @notice Gets the target1 address.\\n    /// @return The target1 address.\\n    function target1() external view returns (address);\\n\\n    /// @notice Gets the target2 address.\\n    /// @return The target2 address.\\n    function target2() external view returns (address);\\n\\n    /// @notice Gets the target3 address.\\n    /// @return The target3 address.\\n    function target3() external view returns (address);\\n\\n    /// @notice Gets the target4 address.\\n    /// @return The target4 address.\\n    function target4() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IHyperdriveCheckpointRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { IHyperdriveCheckpointSubrewarder } from \\\"../interfaces/IHyperdriveCheckpointSubrewarder.sol\\\";\\n\\ninterface IHyperdriveCheckpointRewarder {\\n    /// @notice Emitted when the admin is transferred.\\n    event AdminUpdated(address indexed admin);\\n\\n    /// @notice Emitted when the subrewarder is updated.\\n    event SubrewarderUpdated(\\n        IHyperdriveCheckpointSubrewarder indexed subrewarder\\n    );\\n\\n    /// @notice Emitted when a checkpoint reward is claimed.\\n    event CheckpointRewardClaimed(\\n        address indexed instance,\\n        address indexed claimant,\\n        bool indexed isTrader,\\n        uint256 checkpointTime,\\n        IERC20 rewardToken,\\n        uint256 rewardAmount\\n    );\\n\\n    /// @notice Thrown when caller is not governance.\\n    error Unauthorized();\\n\\n    /// @notice Allows the admin to transfer the admin role.\\n    /// @param _admin The new admin address.\\n    function updateAdmin(address _admin) external;\\n\\n    /// @notice Allows the admin to update the subrewarder.\\n    /// @param _subrewarder The rewarder that will be delegated to.\\n    function updateSubrewarder(\\n        IHyperdriveCheckpointSubrewarder _subrewarder\\n    ) external;\\n\\n    /// @notice Claims a checkpoint reward.\\n    /// @param _claimant The address that is claiming the checkpoint reward.\\n    /// @param _checkpointTime The time of the checkpoint that was minted.\\n    /// @param _isTrader A boolean indicating whether or not the checkpoint was\\n    ///        minted by a trader or by someone calling checkpoint directly.\\n    function claimCheckpointReward(\\n        address _claimant,\\n        uint256 _checkpointTime,\\n        bool _isTrader\\n    ) external;\\n\\n    /// @notice Gets the rewarder's name.\\n    /// @return The rewarder's name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the rewarder's kind.\\n    /// @return The rewarder's kind.\\n    function kind() external pure returns (string memory);\\n\\n    /// @notice Gets the rewarder's version.\\n    /// @return The rewarder's version.\\n    function version() external pure returns (string memory);\\n\\n    /// @notice Returns the admin address that updates the rewarder's\\n    ///         configuration.\\n    /// @return The rewarder's admin address.\\n    function admin() external view returns (address);\\n\\n    /// @notice Returns the subrewarder address that processes checkpoint\\n    ///         rewards.\\n    /// @return The rewarder's subrewarder address.\\n    function subrewarder()\\n        external\\n        view\\n        returns (IHyperdriveCheckpointSubrewarder);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IHyperdriveCheckpointSubrewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { IHyperdriveRegistry } from \\\"../interfaces/IHyperdriveRegistry.sol\\\";\\n\\ninterface IHyperdriveCheckpointSubrewarder {\\n    /// @notice Emitted when the admin is transferred.\\n    event AdminUpdated(address indexed admin);\\n\\n    /// @notice Emitted when the registry is updated.\\n    event RegistryUpdated(IHyperdriveRegistry indexed registry);\\n\\n    /// @notice Emitted when the reward token is updated.\\n    event RewardTokenUpdated(IERC20 indexed rewardToken);\\n\\n    /// @notice Emitted when the source is updated.\\n    event SourceUpdated(address indexed source);\\n\\n    /// @notice Emitted when the trader reward amount is updated.\\n    event TraderRewardAmountUpdated(uint256 indexed traderRewardAmount);\\n\\n    /// @notice Emitted when the minter reward amount is updated.\\n    event MinterRewardAmountUpdated(uint256 indexed minterRewardAmount);\\n\\n    /// @notice Thrown when caller is not governance.\\n    error Unauthorized();\\n\\n    /// @notice Allows the admin to transfer the admin role.\\n    /// @param _admin The new admin address.\\n    function updateAdmin(address _admin) external;\\n\\n    /// @notice Allows the admin to update the source address that supplies the\\n    ///         rewards.\\n    /// @param _source The new source address that will supply the rewards.\\n    function updateSource(address _source) external;\\n\\n    /// @notice Allows the admin to update the reward token.\\n    /// @param _rewardToken The new reward token.\\n    function updateRewardToken(IERC20 _rewardToken) external;\\n\\n    /// @notice Allows the admin to update the registry.\\n    /// @param _registry The new registry.\\n    function updateRegistry(IHyperdriveRegistry _registry) external;\\n\\n    /// @notice Allows the admin to update the minter reward amount.\\n    /// @param _minterRewardAmount The new minter reward amount.\\n    function updateMinterRewardAmount(uint256 _minterRewardAmount) external;\\n\\n    /// @notice Allows the admin to update the trader reward amount.\\n    /// @param _traderRewardAmount The new trader reward amount.\\n    function updateTraderRewardAmount(uint256 _traderRewardAmount) external;\\n\\n    /// @notice Processes a checkpoint reward.\\n    /// @param _instance The instance that submitted the claim.\\n    /// @param _claimant The address that is claiming the checkpoint reward.\\n    /// @param _checkpointTime The time of the checkpoint that was minted.\\n    /// @param _isTrader A boolean indicating whether or not the checkpoint was\\n    ///        minted by a trader or by someone calling checkpoint directly.\\n    /// @return The reward token that was transferred.\\n    /// @return The reward amount.\\n    function processReward(\\n        address _instance,\\n        address _claimant,\\n        uint256 _checkpointTime,\\n        bool _isTrader\\n    ) external returns (IERC20, uint256);\\n\\n    /// @notice Gets the subrewarder's name.\\n    /// @return The subrewarder's name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the subrewarder's kind.\\n    /// @return The subrewarder's kind.\\n    function kind() external pure returns (string memory);\\n\\n    /// @notice Gets the subrewarder's version.\\n    /// @return The subrewarder's version.\\n    function version() external pure returns (string memory);\\n\\n    /// @notice Gets the rewarder address that can delegate to this subrewarder.\\n    /// @return The rewarder address.\\n    function rewarder() external view returns (address);\\n\\n    /// @notice Gets the admin address.\\n    /// @return The admin address.\\n    function admin() external view returns (address);\\n\\n    /// @notice Gets the address that is the source for the reward funds.\\n    /// @return The source address.\\n    function source() external view returns (address);\\n\\n    /// @notice Gets the associated registry. This is what will be used to\\n    ///         determine which instances should receive checkpoint rewards.\\n    /// @return The registry address.\\n    function registry() external view returns (IHyperdriveRegistry);\\n\\n    /// @notice Gets the reward token.\\n    /// @return The reward token.\\n    function rewardToken() external view returns (IERC20);\\n\\n    /// @notice Gets the minter reward amount. This is the reward amount paid\\n    ///         when checkpoints are minted through the `checkpoint` function.\\n    /// @return The minter reward amount.\\n    function minterRewardAmount() external view returns (uint256);\\n\\n    /// @notice Gets the trader reward amount. This is the reward amount paid\\n    ///         when checkpoints are minted through `openLong`, `openShort`,\\n    ///         `closeLong`, `closeShort`, `addLiquidity`, `removeLiquidity`, or\\n    ///         `redeemWithdrawalShares`.\\n    function traderRewardAmount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IHyperdriveCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { IHyperdrive } from \\\"./IHyperdrive.sol\\\";\\nimport { IMultiTokenCore } from \\\"./IMultiTokenCore.sol\\\";\\n\\ninterface IHyperdriveCore is IMultiTokenCore {\\n    /// Longs ///\\n\\n    /// @notice Opens a long position.\\n    /// @param _amount The amount of capital provided to open the long. The\\n    ///        units of this quantity are either base or vault shares, depending\\n    ///        on the value of `_options.asBase`.\\n    /// @param _minOutput The minimum number of bonds to receive.\\n    /// @param _minVaultSharePrice The minimum vault share price at which to\\n    ///        open the long. This allows traders to protect themselves from\\n    ///        opening a long in a checkpoint where negative interest has\\n    ///        accrued.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return maturityTime The maturity time of the bonds.\\n    /// @return bondProceeds The amount of bonds the user received.\\n    function openLong(\\n        uint256 _amount,\\n        uint256 _minOutput,\\n        uint256 _minVaultSharePrice,\\n        IHyperdrive.Options calldata _options\\n    ) external payable returns (uint256 maturityTime, uint256 bondProceeds);\\n\\n    /// @notice Closes a long position with a specified maturity time.\\n    /// @param _maturityTime The maturity time of the long.\\n    /// @param _bondAmount The amount of longs to close.\\n    /// @param _minOutput The minimum proceeds the trader will accept. The units\\n    ///        of this quantity are either base or vault shares, depending on\\n    ///        the value of `_options.asBase`.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return proceeds The proceeds the user receives. The units of this\\n    ///         quantity are either base or vault shares, depending on the value\\n    ///         of `_options.asBase`.\\n    function closeLong(\\n        uint256 _maturityTime,\\n        uint256 _bondAmount,\\n        uint256 _minOutput,\\n        IHyperdrive.Options calldata _options\\n    ) external returns (uint256 proceeds);\\n\\n    /// Shorts ///\\n\\n    /// @notice Opens a short position.\\n    /// @param _bondAmount The amount of bonds to short.\\n    /// @param _maxDeposit The most the user expects to deposit for this trade.\\n    ///        The units of this quantity are either base or vault shares,\\n    ///        depending on the value of `_options.asBase`.\\n    /// @param _minVaultSharePrice The minimum vault share price at which to open\\n    ///        the short. This allows traders to protect themselves from opening\\n    ///        a short in a checkpoint where negative interest has accrued.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return maturityTime The maturity time of the short.\\n    /// @return deposit The amount the user deposited for this trade. The units\\n    ///         of this quantity are either base or vault shares, depending on\\n    ///         the value of `_options.asBase`.\\n    function openShort(\\n        uint256 _bondAmount,\\n        uint256 _maxDeposit,\\n        uint256 _minVaultSharePrice,\\n        IHyperdrive.Options calldata _options\\n    ) external payable returns (uint256 maturityTime, uint256 deposit);\\n\\n    /// @notice Closes a short position with a specified maturity time.\\n    /// @param _maturityTime The maturity time of the short.\\n    /// @param _bondAmount The amount of shorts to close.\\n    /// @param _minOutput The minimum output of this trade. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return proceeds The proceeds of closing this short. The units of this\\n    ///         quantity are either base or vault shares, depending on the value\\n    ///         of `_options.asBase`.\\n    function closeShort(\\n        uint256 _maturityTime,\\n        uint256 _bondAmount,\\n        uint256 _minOutput,\\n        IHyperdrive.Options calldata _options\\n    ) external returns (uint256 proceeds);\\n\\n    /// LPs ///\\n\\n    /// @notice Allows the first LP to initialize the market with a target APR.\\n    /// @param _contribution The amount of capital to supply. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _apr The target APR.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return lpShares The initial number of LP shares created.\\n    function initialize(\\n        uint256 _contribution,\\n        uint256 _apr,\\n        IHyperdrive.Options calldata _options\\n    ) external payable returns (uint256 lpShares);\\n\\n    /// @notice Allows LPs to supply liquidity for LP shares.\\n    /// @param _contribution The amount of capital to supply. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _minLpSharePrice The minimum LP share price the LP is willing\\n    ///        to accept for their shares. LPs incur negative slippage when\\n    ///        adding liquidity if there is a net curve position in the market,\\n    ///        so this allows LPs to protect themselves from high levels of\\n    ///        slippage. The units of this quantity are either base or vault\\n    ///        shares, depending on the value of `_options.asBase`.\\n    /// @param _minApr The minimum APR at which the LP is willing to supply.\\n    /// @param _maxApr The maximum APR at which the LP is willing to supply.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return lpShares The LP shares received by the LP.\\n    function addLiquidity(\\n        uint256 _contribution,\\n        uint256 _minLpSharePrice,\\n        uint256 _minApr,\\n        uint256 _maxApr,\\n        IHyperdrive.Options calldata _options\\n    ) external payable returns (uint256 lpShares);\\n\\n    /// @notice Allows an LP to burn shares and withdraw from the pool.\\n    /// @param _lpShares The LP shares to burn.\\n    /// @param _minOutputPerShare The minimum amount the LP expects to receive\\n    ///        for each withdrawal share that is burned. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return proceeds The amount the LP removing liquidity receives. The\\n    ///         units of this quantity are either base or vault shares,\\n    ///         depending on the value of `_options.asBase`.\\n    /// @return withdrawalShares The base that the LP receives buys out some of\\n    ///         their LP shares, but it may not be sufficient to fully buy the\\n    ///         LP out. In this case, the LP receives withdrawal shares equal in\\n    ///         value to the present value they are owed. As idle capital\\n    ///         becomes available, the pool will buy back these shares.\\n    function removeLiquidity(\\n        uint256 _lpShares,\\n        uint256 _minOutputPerShare,\\n        IHyperdrive.Options calldata _options\\n    ) external returns (uint256 proceeds, uint256 withdrawalShares);\\n\\n    /// @notice Redeems withdrawal shares by giving the LP a pro-rata amount of\\n    ///         the withdrawal pool's proceeds. This function redeems the\\n    ///         maximum amount of the specified withdrawal shares given the\\n    ///         amount of withdrawal shares ready to withdraw.\\n    /// @param _withdrawalShares The withdrawal shares to redeem.\\n    /// @param _minOutputPerShare The minimum amount the LP expects to\\n    ///        receive for each withdrawal share that is burned. The units of\\n    ///        this quantity are either base or vault shares, depending on the\\n    ///        value of `_options.asBase`.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return proceeds The amount the LP received. The units of this quantity\\n    ///         are either base or vault shares, depending on the value of\\n    ///         `_options.asBase`.\\n    /// @return withdrawalSharesRedeemed The amount of withdrawal shares that\\n    ///         were redeemed.\\n    function redeemWithdrawalShares(\\n        uint256 _withdrawalShares,\\n        uint256 _minOutputPerShare,\\n        IHyperdrive.Options calldata _options\\n    ) external returns (uint256 proceeds, uint256 withdrawalSharesRedeemed);\\n\\n    /// Checkpoints ///\\n\\n    /// @notice Attempts to mint a checkpoint with the specified checkpoint time.\\n    /// @param _checkpointTime The time of the checkpoint to create.\\n    /// @param _maxIterations The number of iterations to use in the Newton's\\n    ///        method component of `_distributeExcessIdleSafe`. This defaults to\\n    ///        `LPMath.SHARE_PROCEEDS_MAX_ITERATIONS` if the specified value is\\n    ///        smaller than the constant.\\n    function checkpoint(\\n        uint256 _checkpointTime,\\n        uint256 _maxIterations\\n    ) external;\\n\\n    /// Admin ///\\n\\n    /// @notice This function collects the governance fees accrued by the pool.\\n    /// @param _options The options that configure how the fees are settled.\\n    /// @return proceeds The governance fees collected. The units of this\\n    ///         quantity are either base or vault shares, depending on the value\\n    ///         of `_options.asBase`.\\n    function collectGovernanceFee(\\n        IHyperdrive.Options calldata _options\\n    ) external returns (uint256 proceeds);\\n\\n    /// @notice Allows an authorized address to pause this contract.\\n    /// @param _status True to pause all deposits and false to unpause them.\\n    function pause(bool _status) external;\\n\\n    /// @notice Allows governance to transfer the fee collector role.\\n    /// @param _who The new fee collector address.\\n    function setFeeCollector(address _who) external;\\n\\n    /// @notice Allows governance to transfer the sweep collector role.\\n    /// @param _who The new sweep collector address.\\n    function setSweepCollector(address _who) external;\\n\\n    /// @dev Allows governance to transfer the checkpoint rewarder.\\n    /// @param _checkpointRewarder The new checkpoint rewarder.\\n    function setCheckpointRewarder(address _checkpointRewarder) external;\\n\\n    /// @notice Allows governance to transfer the governance role.\\n    /// @param _who The new governance address.\\n    function setGovernance(address _who) external;\\n\\n    /// @notice Allows governance to change the pauser status of an address.\\n    /// @param who The address to change.\\n    /// @param status The new pauser status.\\n    function setPauser(address who, bool status) external;\\n\\n    /// @notice Transfers the contract's balance of a target token to the fee\\n    ///         collector address.\\n    /// @dev WARN: It is unlikely but possible that there is a selector overlap\\n    ///      with 'transferFrom'. Any integrating contracts should be checked\\n    ///      for that, as it may result in an unexpected call from this address.\\n    /// @param _target The target token to sweep.\\n    function sweep(IERC20 _target) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IHyperdriveEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IMultiTokenEvents } from \\\"./IMultiTokenEvents.sol\\\";\\n\\ninterface IHyperdriveEvents is IMultiTokenEvents {\\n    /// @notice Emitted when the Hyperdrive pool is initialized.\\n    event Initialize(\\n        address indexed provider,\\n        uint256 lpAmount,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        uint256 apr,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when an LP adds liquidity to the Hyperdrive pool.\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256 lpAmount,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        uint256 lpSharePrice,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when an LP removes liquidity from the Hyperdrive pool.\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        address indexed destination,\\n        uint256 lpAmount,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        uint256 withdrawalShareAmount,\\n        uint256 lpSharePrice,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when an LP redeems withdrawal shares.\\n    event RedeemWithdrawalShares(\\n        address indexed provider,\\n        address indexed destination,\\n        uint256 withdrawalShareAmount,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when a long position is opened.\\n    event OpenLong(\\n        address indexed trader,\\n        uint256 indexed assetId,\\n        uint256 maturityTime,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        uint256 bondAmount,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when a short position is opened.\\n    event OpenShort(\\n        address indexed trader,\\n        uint256 indexed assetId,\\n        uint256 maturityTime,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        uint256 baseProceeds,\\n        uint256 bondAmount,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when a long position is closed.\\n    event CloseLong(\\n        address indexed trader,\\n        address indexed destination,\\n        uint256 indexed assetId,\\n        uint256 maturityTime,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        uint256 bondAmount,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when a short position is closed.\\n    event CloseShort(\\n        address indexed trader,\\n        address indexed destination,\\n        uint256 indexed assetId,\\n        uint256 maturityTime,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase,\\n        uint256 basePayment,\\n        uint256 bondAmount,\\n        bytes extraData\\n    );\\n\\n    /// @notice Emitted when a checkpoint is created.\\n    event CreateCheckpoint(\\n        uint256 indexed checkpointTime,\\n        uint256 checkpointVaultSharePrice,\\n        uint256 vaultSharePrice,\\n        uint256 maturedShorts,\\n        uint256 maturedLongs,\\n        uint256 lpSharePrice\\n    );\\n\\n    /// @notice Emitted when governance fees are collected.\\n    event CollectGovernanceFee(\\n        address indexed collector,\\n        uint256 amount,\\n        uint256 vaultSharePrice,\\n        bool asBase\\n    );\\n\\n    /// @notice Emitted when the fee collector address is updated.\\n    event FeeCollectorUpdated(address indexed newFeeCollector);\\n\\n    /// @notice Emitted when the sweep collector address is updated.\\n    event SweepCollectorUpdated(address indexed newSweepCollector);\\n\\n    /// @notice Emitted when the checkpoint rewarder address is updated.\\n    event CheckpointRewarderUpdated(address indexed newCheckpointRewarder);\\n\\n    /// @notice Emitted when the governance address is updated.\\n    event GovernanceUpdated(address indexed newGovernance);\\n\\n    /// @notice Emitted when a pauser is updated.\\n    event PauserUpdated(address indexed newPauser, bool status);\\n\\n    /// @notice Emitted when the pause status is updated.\\n    event PauseStatusUpdated(bool isPaused);\\n\\n    /// @notice Emitted when tokens are swept.\\n    event Sweep(address indexed collector, address indexed target);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IHyperdriveRead.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"./IHyperdrive.sol\\\";\\nimport { IMultiTokenRead } from \\\"./IMultiTokenRead.sol\\\";\\n\\ninterface IHyperdriveRead is IMultiTokenRead {\\n    /// @notice Gets the instance's name.\\n    /// @return The instance's name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the instance's kind.\\n    /// @return The instance's kind.\\n    function kind() external pure returns (string memory);\\n\\n    /// @notice Gets the instance's version.\\n    /// @return The instance's version.\\n    function version() external pure returns (string memory);\\n\\n    /// @notice Gets the Hyperdrive pool's base token.\\n    /// @return The base token.\\n    function baseToken() external view returns (address);\\n\\n    /// @notice Gets the Hyperdrive pool's vault shares token.\\n    /// @return The vault shares token.\\n    function vaultSharesToken() external view returns (address);\\n\\n    /// @notice Gets one of the pool's checkpoints.\\n    /// @param _checkpointTime The checkpoint time.\\n    /// @return The checkpoint.\\n    function getCheckpoint(\\n        uint256 _checkpointTime\\n    ) external view returns (IHyperdrive.Checkpoint memory);\\n\\n    /// @notice Gets the pool's exposure from a checkpoint. This is the number\\n    ///         of non-netted longs in the checkpoint.\\n    /// @param _checkpointTime The checkpoint time.\\n    /// @return The checkpoint exposure.\\n    function getCheckpointExposure(\\n        uint256 _checkpointTime\\n    ) external view returns (int256);\\n\\n    /// @notice Gets the pool's state relating to the Hyperdrive market.\\n    /// @return The market state.\\n    function getMarketState()\\n        external\\n        view\\n        returns (IHyperdrive.MarketState memory);\\n\\n    /// @notice Gets the pool's configuration parameters.\\n    /// @return The pool configuration.\\n    function getPoolConfig()\\n        external\\n        view\\n        returns (IHyperdrive.PoolConfig memory);\\n\\n    /// @notice Gets info about the pool's reserves and other state that is\\n    ///         important to evaluate potential trades.\\n    /// @return The pool info.\\n    function getPoolInfo() external view returns (IHyperdrive.PoolInfo memory);\\n\\n    /// @notice Gets the amount of governance fees that haven't been collected.\\n    /// @return The amount of uncollected governance fees.\\n    function getUncollectedGovernanceFees() external view returns (uint256);\\n\\n    /// @notice Gets information relating to the pool's withdrawal pool. This\\n    ///         includes the total proceeds underlying the withdrawal pool and\\n    ///         the number of withdrawal shares ready to be redeemed.\\n    /// @return The withdrawal pool information.\\n    function getWithdrawPool()\\n        external\\n        view\\n        returns (IHyperdrive.WithdrawPool memory);\\n\\n    /// @notice Gets an account's pauser status within the Hyperdrive pool.\\n    /// @param _account The account to check.\\n    /// @return The account's pauser status.\\n    function isPauser(address _account) external view returns (bool);\\n\\n    /// @notice Gets the storage values at the specified slots.\\n    /// @dev This serves as a generalized getter that allows consumers to create\\n    ///      custom getters to suit their purposes.\\n    /// @param _slots The storage slots to load.\\n    /// @return The values at the specified slots.\\n    function load(\\n        uint256[] calldata _slots\\n    ) external view returns (bytes32[] memory);\\n\\n    /// @notice Convert an amount of vault shares to an amount of base.\\n    /// @param _shareAmount The vault shares amount.\\n    /// @return baseAmount The base amount.\\n    function convertToBase(\\n        uint256 _shareAmount\\n    ) external view returns (uint256);\\n\\n    /// @notice Convert an amount of base to an amount of vault shares.\\n    /// @param _baseAmount The base amount.\\n    /// @return shareAmount The vault shares amount.\\n    function convertToShares(\\n        uint256 _baseAmount\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IHyperdriveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\ninterface IHyperdriveRegistry {\\n    /// @dev The info collected for each Hyperdrive factory.\\n    struct FactoryInfo {\\n        /// @dev Data about the factory. Different registries can utilize\\n        ///      different schemas for these values.\\n        uint256 data;\\n    }\\n\\n    /// @dev The info collected for each Hyperdrive factory along with the\\n    ///      metadata associated with each instance.\\n    struct FactoryInfoWithMetadata {\\n        /// @dev Data about the factory. Different registries can utilize\\n        ///      different schemas for these values.\\n        uint256 data;\\n        /// @dev The factory's name.\\n        string name;\\n        /// @dev The factory's kind.\\n        string kind;\\n        /// @dev The factory's version.\\n        string version;\\n    }\\n\\n    /// @dev The info related to each Hyperdrive instance.\\n    struct InstanceInfo {\\n        /// @dev Data about the instance. Different registries can utilize\\n        ///      different schemas for these values.\\n        uint256 data;\\n        /// @dev The factory that deployed this instance.\\n        address factory;\\n    }\\n\\n    /// @dev The info related to each Hyperdrive instance along with the\\n    ///      metadata associated with each instance.\\n    struct InstanceInfoWithMetadata {\\n        /// @dev Data about the instance. Different registries can utilize\\n        ///      different schemas for these values.\\n        uint256 data;\\n        /// @dev The factory that deployed this instance.\\n        address factory;\\n        /// @dev The instance's name.\\n        string name;\\n        /// @dev The instance's kind.\\n        string kind;\\n        /// @dev The instance's version.\\n        string version;\\n    }\\n\\n    /// @notice Gets the registry's name.\\n    /// @return The registry's name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the registry's kind.\\n    /// @return The registry's kind.\\n    function kind() external pure returns (string memory);\\n\\n    /// @notice Gets the registry's version.\\n    /// @return The registry's version.\\n    function version() external pure returns (string memory);\\n\\n    /// @notice Gets the number of Hyperdrive factories that have been registered.\\n    /// @return The number of registered factories.\\n    function getNumberOfFactories() external view returns (uint256);\\n\\n    /// @notice Gets the registered factory at an index.\\n    /// @param _index The index of the factory.\\n    /// @return The registered factory.\\n    function getFactoryAtIndex(uint256 _index) external view returns (address);\\n\\n    /// @notice Gets the registered factories in the range of the provided\\n    ///         indices.\\n    /// @param _startIndex The start of the range (inclusive).\\n    /// @param _endIndex The end of the range (exclusive).\\n    /// @return The list of registered factories in the range.\\n    function getFactoriesInRange(\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Gets the Hyperdrive factory info for a factory.\\n    /// @param _factory The factory.\\n    /// @return The factory info.\\n    function getFactoryInfo(\\n        address _factory\\n    ) external view returns (FactoryInfo memory);\\n\\n    /// @notice Gets the Hyperdrive factory info for a list of factories.\\n    /// @param __factories The list of factories.\\n    /// @return The list of factory info.\\n    function getFactoryInfos(\\n        address[] calldata __factories\\n    ) external view returns (FactoryInfo[] memory);\\n\\n    /// @notice Gets the Hyperdrive factory info with associated metadata for a\\n    ///         factory.\\n    /// @param _factory The factory.\\n    /// @return The factory info with associated metadata.\\n    function getFactoryInfoWithMetadata(\\n        address _factory\\n    ) external view returns (FactoryInfoWithMetadata memory);\\n\\n    /// @notice Gets the Hyperdrive factory info with associated metadata for a\\n    ///         list of factories.\\n    /// @param __factories The list of factories.\\n    /// @return The list of factory info with associated metadata.\\n    function getFactoryInfosWithMetadata(\\n        address[] calldata __factories\\n    ) external view returns (FactoryInfoWithMetadata[] memory);\\n\\n    /// @notice Gets the number of Hyperdrive instances that have been registered.\\n    /// @return The number of registered instances.\\n    function getNumberOfInstances() external view returns (uint256);\\n\\n    /// @notice Gets the registered instance at an index.\\n    /// @param _index The index of the instance.\\n    /// @return The registered instance.\\n    function getInstanceAtIndex(uint256 _index) external view returns (address);\\n\\n    /// @notice Gets the registered instances in the range of the provided\\n    ///         indices.\\n    /// @param _startIndex The start of the range (inclusive).\\n    /// @param _endIndex The end of the range (exclusive).\\n    /// @return The list of registered instances in the range.\\n    function getInstancesInRange(\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Gets the instance info for an instance.\\n    /// @param _instance The instance.\\n    /// @return The instance info.\\n    function getInstanceInfo(\\n        address _instance\\n    ) external view returns (InstanceInfo memory);\\n\\n    /// @notice Gets the instance info for a list of instances.\\n    /// @param __instances The list of instances.\\n    /// @return The list of instance info.\\n    function getInstanceInfos(\\n        address[] calldata __instances\\n    ) external view returns (InstanceInfo[] memory);\\n\\n    /// @notice Gets the instance info with associated metadata for an instance.\\n    /// @param _instance The instance.\\n    /// @return The instance info with associated metadata.\\n    function getInstanceInfoWithMetadata(\\n        address _instance\\n    ) external view returns (InstanceInfoWithMetadata memory);\\n\\n    /// @notice Gets the instance info with associated metadata for a list of\\n    ///         instances.\\n    /// @param __instances The list of instances.\\n    /// @return The list of instance info with associated metadata.\\n    function getInstanceInfosWithMetadata(\\n        address[] calldata __instances\\n    ) external view returns (InstanceInfoWithMetadata[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IMultiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IMultiTokenCore } from \\\"./IMultiTokenCore.sol\\\";\\nimport { IMultiTokenEvents } from \\\"./IMultiTokenEvents.sol\\\";\\nimport { IMultiTokenMetadata } from \\\"./IMultiTokenMetadata.sol\\\";\\nimport { IMultiTokenRead } from \\\"./IMultiTokenRead.sol\\\";\\n\\ninterface IMultiToken is\\n    IMultiTokenEvents,\\n    IMultiTokenRead,\\n    IMultiTokenCore,\\n    IMultiTokenMetadata\\n{}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IMultiTokenCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\ninterface IMultiTokenCore {\\n    /// @notice Transfers an amount of assets from the source to the destination.\\n    /// @param tokenID The token identifier.\\n    /// @param from The address whose balance will be reduced.\\n    /// @param to The address whose balance will be increased.\\n    /// @param amount The amount of token to move.\\n    function transferFrom(\\n        uint256 tokenID,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Permissioned transfer for the bridge to access, only callable by\\n    ///         the ERC20 linking bridge.\\n    /// @param tokenID The token identifier.\\n    /// @param from The address whose balance will be reduced.\\n    /// @param to The address whose balance will be increased.\\n    /// @param amount The amount of token to move.\\n    /// @param caller The msg.sender or the caller of the ERC20Forwarder.\\n    function transferFromBridge(\\n        uint256 tokenID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address caller\\n    ) external;\\n\\n    /// @notice Allows a user to set an approval for an individual asset with\\n    ///         specific amount.\\n    /// @param tokenID The asset to approve the use of.\\n    /// @param operator The address who will be able to use the tokens.\\n    /// @param amount The max tokens the approved person can use, setting to\\n    ///        uint256.max will cause the value to never decrement (saving gas\\n    ///        on transfer).\\n    function setApproval(\\n        uint256 tokenID,\\n        address operator,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Allows the compatibility linking contract to forward calls to\\n    ///         set asset approvals.\\n    /// @param tokenID The asset to approve the use of.\\n    /// @param operator The address who will be able to use the tokens.\\n    /// @param amount The max tokens the approved person can use, setting to\\n    ///        uint256.max will cause the value to never decrement [saving gas\\n    ///        on transfer].\\n    /// @param caller The eth address which called the linking contract.\\n    function setApprovalBridge(\\n        uint256 tokenID,\\n        address operator,\\n        uint256 amount,\\n        address caller\\n    ) external;\\n\\n    /// @notice Allows a user to approve an operator to use all of their assets.\\n    /// @param operator The eth address which can access the caller's assets.\\n    /// @param approved True to approve, false to remove approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Transfers several assets from one account to another.\\n    /// @param from The source account.\\n    /// @param to The destination account.\\n    /// @param ids The array of token ids of the asset to transfer.\\n    /// @param values The amount of each token to transfer.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) external;\\n\\n    /// @notice Allows a caller who is not the owner of an account to execute the\\n    ///         functionality of 'approve' for all assets with the owner's\\n    ///         signature.\\n    /// @param owner The owner of the account which is having the new approval set.\\n    /// @param spender The address which will be allowed to spend owner's tokens.\\n    /// @param _approved A boolean of the approval status to set to.\\n    /// @param deadline The timestamp which the signature must be submitted by\\n    ///        to be valid.\\n    /// @param v Extra ECDSA data which allows public key recovery from\\n    ///        signature assumed to be 27 or 28.\\n    /// @param r The r component of the ECDSA signature.\\n    /// @param s The s component of the ECDSA signature.\\n    /// @dev The signature for this function follows EIP 712 standard and should\\n    ///      be generated with the eth_signTypedData JSON RPC call instead of\\n    ///      the eth_sign JSON RPC call. If using out of date parity signing\\n    ///      libraries the v component may need to be adjusted. Also it is very\\n    ///      rare but possible for v to be other values, those values are not\\n    ///      supported.\\n    function permitForAll(\\n        address owner,\\n        address spender,\\n        bool _approved,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IMultiTokenEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\ninterface IMultiTokenEvents {\\n    /// @notice Emitted when tokens are transferred from one account to another.\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /// @notice Emitted when an account changes the allowance for another\\n    ///         account.\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice Emitted when an account changes the approval for all of its\\n    ///         tokens.\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IMultiTokenMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\ninterface IMultiTokenMetadata {\\n    /// @notice Gets the EIP712 permit typehash of the MultiToken.\\n    /// @return The EIP712 permit typehash of the MultiToken.\\n    // solhint-disable func-name-mixedcase\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice Gets the EIP712 domain separator of the MultiToken.\\n    /// @return The EIP712 domain separator of the MultiToken.\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IMultiTokenRead.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\ninterface IMultiTokenRead {\\n    /// @notice Gets the decimals of the MultiToken.\\n    /// @return The decimals of the MultiToken.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Gets the name of the MultiToken.\\n    /// @param tokenId The sub-token ID.\\n    /// @return The name of the MultiToken.\\n    function name(uint256 tokenId) external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the MultiToken.\\n    /// @param tokenId The sub-token ID.\\n    /// @return The symbol of the MultiToken.\\n    function symbol(uint256 tokenId) external view returns (string memory);\\n\\n    /// @notice Gets the total supply of the MultiToken.\\n    /// @param tokenId The sub-token ID.\\n    /// @return The total supply of the MultiToken.\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice Gets the approval-for-all status of a spender on behalf of an\\n    ///         owner.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The spender of the tokens.\\n    /// @return The approval-for-all status of the spender for the owner.\\n    function isApprovedForAll(\\n        address owner,\\n        address spender\\n    ) external view returns (bool);\\n\\n    /// @notice Gets the allowance of a spender for a sub-token.\\n    /// @param tokenId The sub-token ID.\\n    /// @param owner The owner of the tokens.\\n    /// @param spender The spender of the tokens.\\n    /// @return The allowance of the spender for the owner.\\n    function perTokenApprovals(\\n        uint256 tokenId,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /// @notice Gets the balance of a spender for a sub-token.\\n    /// @param tokenId The sub-token ID.\\n    /// @param owner The owner of the tokens.\\n    /// @return The balance of the owner.\\n    function balanceOf(\\n        uint256 tokenId,\\n        address owner\\n    ) external view returns (uint256);\\n\\n    /// @notice Gets the permit nonce for an account.\\n    /// @param owner The owner of the tokens.\\n    /// @return The permit nonce of the owner.\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IRocketTokenRETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\ninterface IRocketTokenRETH is IERC20 {\\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\\n\\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\\n\\n    function getExchangeRate() external view returns (uint256);\\n\\n    function getTotalCollateral() external view returns (uint256);\\n\\n    function getCollateralRate() external view returns (uint256);\\n\\n    function depositExcess() external payable;\\n\\n    function depositExcessCollateral() external;\\n\\n    function mint(uint256 _ethAmount, address _to) external;\\n\\n    function burn(uint256 _rethAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { ERC20 } from \\\"openzeppelin/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveEvents } from \\\"../interfaces/IHyperdriveEvents.sol\\\";\\nimport { HyperdriveBase } from \\\"./HyperdriveBase.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveAdmin\\n/// @notice The Hyperdrive admin contract. This contract provides functions that\\n///         governance can use to pause the pool and update permissions.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveAdmin is IHyperdriveEvents, HyperdriveBase {\\n    using SafeERC20 for ERC20;\\n\\n    /// @dev This function collects the governance fees accrued by the pool.\\n    /// @param _options The options that configure how the fees are settled.\\n    /// @return proceeds The governance fees collected. The units of this\\n    ///         quantity are either base or vault shares, depending on the value\\n    ///         of `_options.asBase`.\\n    function _collectGovernanceFee(\\n        IHyperdrive.Options calldata _options\\n    ) internal nonReentrant returns (uint256 proceeds) {\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Ensure that the destination is set to the fee collector.\\n        address feeCollector = _feeCollector;\\n        if (_options.destination != feeCollector) {\\n            revert IHyperdrive.InvalidFeeDestination();\\n        }\\n\\n        // Ensure that the caller is authorized to collect fees.\\n        if (\\n            !_pausers[msg.sender] &&\\n            msg.sender != feeCollector &&\\n            msg.sender != _governance\\n        ) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Withdraw the accrued governance fees to the fee collector.\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        uint256 governanceFeesAccrued = _governanceFeesAccrued;\\n        delete _governanceFeesAccrued;\\n        proceeds = _withdraw(governanceFeesAccrued, vaultSharePrice, _options);\\n        emit CollectGovernanceFee(\\n            feeCollector,\\n            proceeds,\\n            vaultSharePrice,\\n            _options.asBase\\n        );\\n    }\\n\\n    /// @dev Allows an authorized address to pause this contract.\\n    /// @param _status True to pause all deposits and false to unpause them.\\n    function _pause(bool _status) internal {\\n        // Ensure that the sender is authorized to pause the contract.\\n        if (!_pausers[msg.sender] && msg.sender != _governance) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Update the paused status and emit an event.\\n        _marketState.isPaused = _status;\\n        emit PauseStatusUpdated(_status);\\n    }\\n\\n    /// @dev Allows governance to transfer the fee collector role.\\n    /// @param _who The new fee collector.\\n    function _setFeeCollector(address _who) internal {\\n        // Ensure that the sender is governance.\\n        if (msg.sender != _governance) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Update the governance address and emit an event.\\n        _feeCollector = _who;\\n        emit FeeCollectorUpdated(_who);\\n    }\\n\\n    /// @dev Allows governance to transfer the sweep collector role.\\n    /// @param _who The new fee collector.\\n    function _setSweepCollector(address _who) internal {\\n        // Ensure that the sender is governance.\\n        if (msg.sender != _governance) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Update the sweep collector address and emit an event.\\n        _sweepCollector = _who;\\n        emit SweepCollectorUpdated(_who);\\n    }\\n\\n    /// @dev Allows governance to transfer the checkpoint rewarder.\\n    /// @param _newCheckpointRewarder The new checkpoint rewarder.\\n    function _setCheckpointRewarder(address _newCheckpointRewarder) internal {\\n        // Ensure that the sender is governance.\\n        if (msg.sender != _governance) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Update the checkpoint rewarder address and emit an event.\\n        _checkpointRewarder = _newCheckpointRewarder;\\n        emit CheckpointRewarderUpdated(_checkpointRewarder);\\n    }\\n\\n    /// @dev Allows governance to transfer the governance role.\\n    /// @param _who The new governance address.\\n    function _setGovernance(address _who) internal {\\n        // Ensure that the sender is governance.\\n        if (msg.sender != _governance) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Update the governance address and emit an event.\\n        _governance = _who;\\n        emit GovernanceUpdated(_who);\\n    }\\n\\n    /// @dev Allows governance to change the pauser status of an address.\\n    /// @param _who The address to change.\\n    /// @param _status The new pauser status.\\n    function _setPauser(address _who, bool _status) internal {\\n        // Ensure that the sender is governance.\\n        if (msg.sender != _governance) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Update the pauser status and emit an event.\\n        _pausers[_who] = _status;\\n        emit PauserUpdated(_who, _status);\\n    }\\n\\n    /// @dev Transfers the contract's balance of a target token to the sweep\\n    ///      collector address.\\n    /// @dev WARN: It is unlikely but possible that there is a selector overlap\\n    ///      with 'transfer'. Any integrating contracts should be checked\\n    ///      for that, as it may result in an unexpected call from this address.\\n    /// @param _target The target token to sweep.\\n    function _sweep(IERC20 _target) internal nonReentrant {\\n        // Ensure that the caller is authorized to sweep tokens.\\n        address sweepCollector = _sweepCollector;\\n        if (\\n            !_pausers[msg.sender] &&\\n            msg.sender != sweepCollector &&\\n            msg.sender != _governance\\n        ) {\\n            revert IHyperdrive.Unauthorized();\\n        }\\n\\n        // Gets the Hyperdrive's balance of vault shares prior to\\n        // sweeping.\\n        uint256 shareBalance = _totalShares();\\n\\n        // Transfer the entire balance of the sweep target to the sweep\\n        // collector.\\n        uint256 balance = _target.balanceOf(address(this));\\n        ERC20(address(_target)).safeTransfer(sweepCollector, balance);\\n\\n        // Ensure that the vault shares balance hasn't changed.\\n        if (_totalShares() != shareBalance) {\\n            revert IHyperdrive.SweepFailed();\\n        }\\n\\n        emit Sweep(sweepCollector, address(_target));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveEvents } from \\\"../interfaces/IHyperdriveEvents.sol\\\";\\nimport { AssetId } from \\\"../libraries/AssetId.sol\\\";\\nimport { FixedPointMath, ONE } from \\\"../libraries/FixedPointMath.sol\\\";\\nimport { HyperdriveMath } from \\\"../libraries/HyperdriveMath.sol\\\";\\nimport { LPMath } from \\\"../libraries/LPMath.sol\\\";\\nimport { YieldSpaceMath } from \\\"../libraries/YieldSpaceMath.sol\\\";\\nimport { SafeCast } from \\\"../libraries/SafeCast.sol\\\";\\nimport { HyperdriveStorage } from \\\"./HyperdriveStorage.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveBase\\n/// @notice The Hyperdrive base contract that provides a set of helper methods\\n///         and defines the functions that must be overridden by implementations.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveBase is IHyperdriveEvents, HyperdriveStorage {\\n    using FixedPointMath for uint256;\\n    using FixedPointMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    /// Yield Source ///\\n\\n    /// @dev Process a deposit in either base or vault shares.\\n    /// @param _amount The amount of capital to deposit. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _options The options that configure how the deposit is\\n    ///        settled. In particular, the currency used in the deposit is\\n    ///        specified here. Aside from those options, yield sources can\\n    ///        choose to implement additional options.\\n    /// @return sharesMinted The shares created by this deposit.\\n    /// @return vaultSharePrice The vault share price.\\n    function _deposit(\\n        uint256 _amount,\\n        IHyperdrive.Options calldata _options\\n    ) internal returns (uint256 sharesMinted, uint256 vaultSharePrice) {\\n        // Deposit with either base or shares depending on the provided options.\\n        uint256 refund;\\n        if (_options.asBase) {\\n            // Process the deposit in base.\\n            (sharesMinted, refund) = _depositWithBase(\\n                _amount,\\n                _options.extraData\\n            );\\n        } else {\\n            // The refund is equal to the full message value since ETH will\\n            // never be a shares asset.\\n            refund = msg.value;\\n\\n            // Process the deposit in shares.\\n            _depositWithShares(_amount, _options.extraData);\\n\\n            // WARN: This logic doesn't account for slippage in the conversion\\n            // from base to shares. If deposits to the yield source incur\\n            // slippage, this logic will be incorrect.\\n            //\\n            // The amount of shares minted is equal to the input amount.\\n            sharesMinted = _amount;\\n        }\\n\\n        // Calculate the vault share price.\\n        vaultSharePrice = _pricePerVaultShare();\\n\\n        // Return excess ether that was sent to the contract.\\n        if (refund > 0) {\\n            (bool success, ) = payable(msg.sender).call{ value: refund }(\\\"\\\");\\n            if (!success) {\\n                revert IHyperdrive.TransferFailed();\\n            }\\n        }\\n\\n        return (sharesMinted, vaultSharePrice);\\n    }\\n\\n    /// @dev Process a withdrawal and send the proceeds to the destination.\\n    /// @param _shares The vault shares to withdraw from the yield source.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _options The options that configure how the withdrawal is\\n    ///        settled. In particular, the destination and currency used in the\\n    ///        withdrawal are specified here. Aside from those options, yield\\n    ///        sources can choose to implement additional options.\\n    /// @return amountWithdrawn The proceeds of the withdrawal. The units of\\n    ///        this quantity are either base or vault shares, depending on the\\n    ///        value of `_options.asBase`.\\n    function _withdraw(\\n        uint256 _shares,\\n        uint256 _vaultSharePrice,\\n        IHyperdrive.Options calldata _options\\n    ) internal returns (uint256 amountWithdrawn) {\\n        // NOTE: Round down to underestimate the base proceeds.\\n        //\\n        // Correct for any error that crept into the calculation of the share\\n        // amount by converting the shares to base and then back to shares\\n        // using the vault's share conversion logic.\\n        uint256 baseAmount = _shares.mulDown(_vaultSharePrice);\\n        _shares = _convertToShares(baseAmount);\\n\\n        // If we're withdrawing zero shares, short circuit and return 0.\\n        if (_shares == 0) {\\n            return 0;\\n        }\\n\\n        // Withdraw in either base or shares depending on the provided options.\\n        if (_options.asBase) {\\n            // Process the withdrawal in base.\\n            amountWithdrawn = _withdrawWithBase(\\n                _shares,\\n                _options.destination,\\n                _options.extraData\\n            );\\n        } else {\\n            // Process the withdrawal in shares.\\n            _withdrawWithShares(\\n                _shares,\\n                _options.destination,\\n                _options.extraData\\n            );\\n            amountWithdrawn = _shares;\\n        }\\n\\n        return amountWithdrawn;\\n    }\\n\\n    /// @dev Loads the share price from the yield source.\\n    /// @return vaultSharePrice The current vault share price.\\n    function _pricePerVaultShare()\\n        internal\\n        view\\n        returns (uint256 vaultSharePrice)\\n    {\\n        return _convertToBase(ONE);\\n    }\\n\\n    /// @dev Accepts a deposit from the user in base.\\n    /// @param _baseAmount The base amount to deposit.\\n    /// @param _extraData The extra data to use in the deposit.\\n    /// @return sharesMinted The shares that were minted in the deposit.\\n    /// @return refund The amount of ETH to refund. This should be zero for\\n    ///         yield sources that don't accept ETH.\\n    function _depositWithBase(\\n        uint256 _baseAmount,\\n        bytes calldata _extraData\\n    ) internal virtual returns (uint256 sharesMinted, uint256 refund);\\n\\n    /// @dev Process a deposit in vault shares.\\n    /// @param _shareAmount The vault shares amount to deposit.\\n    /// @param _extraData The extra data to use in the deposit.\\n    function _depositWithShares(\\n        uint256 _shareAmount,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n\\n    /// @dev Process a withdrawal in base and send the proceeds to the\\n    ///      destination.\\n    /// @param _shareAmount The amount of vault shares to withdraw.\\n    /// @param _destination The destination of the withdrawal.\\n    /// @param _extraData The extra data used to settle the withdrawal.\\n    /// @return amountWithdrawn The amount of base withdrawn.\\n    function _withdrawWithBase(\\n        uint256 _shareAmount,\\n        address _destination,\\n        bytes calldata _extraData\\n    ) internal virtual returns (uint256 amountWithdrawn);\\n\\n    /// @dev Process a withdrawal in vault shares and send the proceeds to the\\n    ///      destination.\\n    /// @param _shareAmount The amount of vault shares to withdraw.\\n    /// @param _destination The destination of the withdrawal.\\n    /// @param _extraData The extra data used to settle the withdrawal.\\n    function _withdrawWithShares(\\n        uint256 _shareAmount,\\n        address _destination,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n\\n    /// @dev A yield source dependent check that prevents ether from being\\n    ///      transferred to Hyperdrive instances that don't accept ether.\\n    function _checkMessageValue() internal view virtual;\\n\\n    /// @dev A yield source dependent check that verifies that the provided\\n    ///      options are valid. The default check is that the destination is\\n    ///      non-zero to prevent users from accidentally transferring funds\\n    ///      to the zero address. Custom integrations can override this to\\n    ///      implement additional checks.\\n    /// @param _options The provided options for the transaction.\\n    function _checkOptions(\\n        IHyperdrive.Options calldata _options\\n    ) internal pure virtual {\\n        if (_options.destination == address(0)) {\\n            revert IHyperdrive.RestrictedZeroAddress();\\n        }\\n    }\\n\\n    /// @dev Convert an amount of vault shares to an amount of base.\\n    /// @param _shareAmount The vault shares amount.\\n    /// @return baseAmount The base amount.\\n    function _convertToBase(\\n        uint256 _shareAmount\\n    ) internal view virtual returns (uint256 baseAmount);\\n\\n    /// @dev Convert an amount of base to an amount of vault shares.\\n    /// @param _baseAmount The base amount.\\n    /// @return shareAmount The vault shares amount.\\n    function _convertToShares(\\n        uint256 _baseAmount\\n    ) internal view virtual returns (uint256 shareAmount);\\n\\n    /// @dev Gets the total amount of shares held by the pool in the yield\\n    ///      source.\\n    /// @return shareAmount The total amount of shares.\\n    function _totalShares() internal view virtual returns (uint256 shareAmount);\\n\\n    /// Pause ///\\n\\n    /// @dev Blocks a function execution if the contract is paused.\\n    modifier isNotPaused() {\\n        if (_marketState.isPaused) {\\n            revert IHyperdrive.PoolIsPaused();\\n        }\\n        _;\\n    }\\n\\n    /// Checkpoint ///\\n\\n    /// @dev Creates a new checkpoint if necessary.\\n    /// @param _checkpointTime The time of the checkpoint to create.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _maxIterations The number of iterations to use in the Newton's\\n    ///        method component of `_distributeExcessIdleSafe`. This defaults to\\n    ///        `LPMath.SHARE_PROCEEDS_MAX_ITERATIONS` if the specified value is\\n    ///        smaller than the constant.\\n    /// @param _isTrader A boolean indicating whether or not the checkpoint was\\n    ///        minted by a trader or by someone calling checkpoint directly.\\n    /// @return openVaultSharePrice The open vault share price of the latest\\n    ///         checkpoint.\\n    function _applyCheckpoint(\\n        uint256 _checkpointTime,\\n        uint256 _vaultSharePrice,\\n        uint256 _maxIterations,\\n        bool _isTrader\\n    ) internal virtual returns (uint256 openVaultSharePrice);\\n\\n    /// Helpers ///\\n\\n    /// @dev Calculates the normalized time remaining of a position.\\n    /// @param _maturityTime The maturity time of the position.\\n    /// @return timeRemaining The normalized time remaining (in [0, 1]).\\n    function _calculateTimeRemaining(\\n        uint256 _maturityTime\\n    ) internal view returns (uint256 timeRemaining) {\\n        uint256 latestCheckpoint = _latestCheckpoint();\\n        timeRemaining = _maturityTime > latestCheckpoint\\n            ? _maturityTime - latestCheckpoint\\n            : 0;\\n\\n        // NOTE: Round down to underestimate the time remaining.\\n        timeRemaining = timeRemaining.divDown(_positionDuration);\\n    }\\n\\n    /// @dev Calculates the normalized time remaining of a position when the\\n    ///      maturity time is scaled up 18 decimals.\\n    /// @param _maturityTime The maturity time of the position.\\n    function _calculateTimeRemainingScaled(\\n        uint256 _maturityTime\\n    ) internal view returns (uint256 timeRemaining) {\\n        uint256 latestCheckpoint = _latestCheckpoint() * ONE;\\n        timeRemaining = _maturityTime > latestCheckpoint\\n            ? _maturityTime - latestCheckpoint\\n            : 0;\\n\\n        // NOTE: Round down to underestimate the time remaining.\\n        timeRemaining = timeRemaining.divDown(_positionDuration * ONE);\\n    }\\n\\n    /// @dev Gets the most recent checkpoint time.\\n    /// @return latestCheckpoint The latest checkpoint.\\n    function _latestCheckpoint()\\n        internal\\n        view\\n        returns (uint256 latestCheckpoint)\\n    {\\n        latestCheckpoint = HyperdriveMath.calculateCheckpointTime(\\n            block.timestamp,\\n            _checkpointDuration\\n        );\\n    }\\n\\n    /// @dev Gets the effective share reserves.\\n    /// @return The effective share reserves. This is the share reserves used\\n    ///         by the YieldSpace pricing model.\\n    function _effectiveShareReserves() internal view returns (uint256) {\\n        return\\n            HyperdriveMath.calculateEffectiveShareReserves(\\n                _marketState.shareReserves,\\n                _marketState.shareAdjustment\\n            );\\n    }\\n\\n    /// @dev Gets the amount of non-netted longs with a given maturity.\\n    /// @param _maturityTime The maturity time of the longs.\\n    /// @return The amount of non-netted longs. This is a signed value that\\n    ///         can be negative. This is convenient for updating the long\\n    ///         exposure when closing positions.\\n    function _nonNettedLongs(\\n        uint256 _maturityTime\\n    ) internal view returns (int256) {\\n        // The amount of non-netted longs is the difference between the amount\\n        // of longs and the amount of shorts with a given maturity time. If the\\n        // difference is negative, the amount of non-netted longs is zero.\\n        return\\n            _totalSupply[\\n                AssetId.encodeAssetId(AssetId.AssetIdPrefix.Long, _maturityTime)\\n            ].toInt256() -\\n            _totalSupply[\\n                AssetId.encodeAssetId(\\n                    AssetId.AssetIdPrefix.Short,\\n                    _maturityTime\\n                )\\n            ].toInt256();\\n    }\\n\\n    /// @dev Gets the distribute excess idle parameters from the current state.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return params The distribute excess idle parameters.\\n    /// @return success A failure flag indicating if the calculation succeeded.\\n    function _getDistributeExcessIdleParamsSafe(\\n        uint256 _idle,\\n        uint256 _withdrawalSharesTotalSupply,\\n        uint256 _vaultSharePrice\\n    )\\n        internal\\n        view\\n        returns (LPMath.DistributeExcessIdleParams memory params, bool success)\\n    {\\n        // Calculate the starting present value. If this fails, we return a\\n        // failure flag and proceed to avoid impacting checkpointing liveness.\\n        LPMath.PresentValueParams\\n            memory presentValueParams = _getPresentValueParams(\\n                _vaultSharePrice\\n            );\\n        uint256 startingPresentValue;\\n        (startingPresentValue, success) = LPMath.calculatePresentValueSafe(\\n            presentValueParams\\n        );\\n        if (!success) {\\n            return (params, false);\\n        }\\n\\n        // NOTE: For consistency with the present value calculation, we round\\n        // up the long side and round down the short side.\\n        int256 netCurveTrade = presentValueParams\\n            .longsOutstanding\\n            .mulUp(presentValueParams.longAverageTimeRemaining)\\n            .toInt256() -\\n            presentValueParams\\n                .shortsOutstanding\\n                .mulDown(presentValueParams.shortAverageTimeRemaining)\\n                .toInt256();\\n        params = LPMath.DistributeExcessIdleParams({\\n            presentValueParams: presentValueParams,\\n            startingPresentValue: startingPresentValue,\\n            activeLpTotalSupply: _totalSupply[AssetId._LP_ASSET_ID],\\n            withdrawalSharesTotalSupply: _withdrawalSharesTotalSupply,\\n            idle: _idle,\\n            netCurveTrade: netCurveTrade,\\n            originalShareReserves: presentValueParams.shareReserves,\\n            originalShareAdjustment: presentValueParams.shareAdjustment,\\n            originalBondReserves: presentValueParams.bondReserves\\n        });\\n        success = true;\\n    }\\n\\n    /// @dev Gets the present value parameters from the current state.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return params The present value parameters.\\n    function _getPresentValueParams(\\n        uint256 _vaultSharePrice\\n    ) internal view returns (LPMath.PresentValueParams memory params) {\\n        params = LPMath.PresentValueParams({\\n            shareReserves: _marketState.shareReserves,\\n            shareAdjustment: _marketState.shareAdjustment,\\n            bondReserves: _marketState.bondReserves,\\n            vaultSharePrice: _vaultSharePrice,\\n            initialVaultSharePrice: _initialVaultSharePrice,\\n            minimumShareReserves: _minimumShareReserves,\\n            minimumTransactionAmount: _minimumTransactionAmount,\\n            timeStretch: _timeStretch,\\n            longsOutstanding: _marketState.longsOutstanding,\\n            longAverageTimeRemaining: _calculateTimeRemainingScaled(\\n                _marketState.longAverageMaturityTime\\n            ),\\n            shortsOutstanding: _marketState.shortsOutstanding,\\n            shortAverageTimeRemaining: _calculateTimeRemainingScaled(\\n                _marketState.shortAverageMaturityTime\\n            )\\n        });\\n    }\\n\\n    /// @dev Checks if any of the bonds the trader purchased on the curve\\n    ///      were purchased above the price of 1 base per bonds.\\n    /// @param _shareCurveDelta The amount of shares the trader pays the curve.\\n    /// @param _bondCurveDelta The amount of bonds the trader receives from the\\n    ///        curve.\\n    /// @param _maxSpotPrice The maximum allowable spot price for the trade.\\n    /// @return A flag indicating whether the trade was negative interest.\\n    function _isNegativeInterest(\\n        uint256 _shareCurveDelta,\\n        uint256 _bondCurveDelta,\\n        uint256 _maxSpotPrice\\n    ) internal view returns (bool) {\\n        // Calculate the spot price after making the trade on the curve but\\n        // before accounting for fees. Compare this to the max spot price to\\n        // determine if the trade is negative interest.\\n        uint256 endingSpotPrice = HyperdriveMath.calculateSpotPrice(\\n            _effectiveShareReserves() + _shareCurveDelta,\\n            _marketState.bondReserves - _bondCurveDelta,\\n            _initialVaultSharePrice,\\n            _timeStretch\\n        );\\n        return endingSpotPrice > _maxSpotPrice;\\n    }\\n\\n    /// @dev Check solvency by verifying that the share reserves are greater\\n    ///      than the exposure plus the minimum share reserves.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return True if the share reserves are greater than the exposure plus\\n    ///         the minimum share reserves.\\n    function _isSolvent(uint256 _vaultSharePrice) internal view returns (bool) {\\n        // NOTE: Round the lhs down and the rhs up to make the check more\\n        // conservative.\\n        return\\n            uint256(_marketState.shareReserves).mulDown(_vaultSharePrice) >=\\n            _marketState.longExposure +\\n                _minimumShareReserves.mulUp(_vaultSharePrice);\\n    }\\n\\n    /// @dev Updates the global long exposure.\\n    /// @param _before The checkpoint long exposure before the update.\\n    /// @param _after The checkpoint long exposure after the update.\\n    function _updateLongExposure(int256 _before, int256 _after) internal {\\n        _marketState.longExposure = LPMath\\n            .calculateLongExposure(_marketState.longExposure, _before, _after)\\n            .toUint128();\\n    }\\n\\n    /// @dev Update the weighted spot price from a specified checkpoint. The\\n    ///      weighted spot price is a time weighted average of the spot prices\\n    ///      in the checkpoint.\\n    /// @param _checkpointTime The checkpoint time of the checkpoint to update.\\n    /// @param _updateTime The time at which the update is being processed. Most\\n    ///        of the time, this is the latest block time, but when updating\\n    ///        past checkpoints, this may be the time at the end of the\\n    ///        checkpoint.\\n    /// @param _spotPrice The spot price to accumulate into the time weighted\\n    ///        average.\\n    function _updateWeightedSpotPrice(\\n        uint256 _checkpointTime,\\n        uint256 _updateTime,\\n        uint256 _spotPrice\\n    ) internal {\\n        // If the update time is equal to the last update time, the time delta\\n        // is zero, so we don't need to update the time weighted average.\\n        uint256 lastWeightedSpotPriceUpdateTime = _checkpoints[_checkpointTime]\\n            .lastWeightedSpotPriceUpdateTime;\\n        if (_updateTime == lastWeightedSpotPriceUpdateTime) {\\n            return;\\n        }\\n\\n        // If the previous weighted spot price is zero, then the weighted spot\\n        // price is set to the spot price that is being accumulated.\\n        uint256 previousWeightedSpotPrice = _checkpoints[_checkpointTime]\\n            .weightedSpotPrice;\\n        if (previousWeightedSpotPrice == 0) {\\n            _checkpoints[_checkpointTime].weightedSpotPrice = _spotPrice\\n                .toUint128();\\n        }\\n        // Otherwise the previous weighted spot price is non-zero and the update\\n        // time is greater than the latest update time, the we accumulate the\\n        // spot price into the weighted spot price.\\n        else {\\n            _checkpoints[_checkpointTime]\\n                .weightedSpotPrice = previousWeightedSpotPrice\\n                .updateWeightedAverage(\\n                    (lastWeightedSpotPriceUpdateTime - _checkpointTime) * ONE,\\n                    _spotPrice,\\n                    (_updateTime - lastWeightedSpotPriceUpdateTime) * ONE,\\n                    true\\n                )\\n                .toUint128();\\n        }\\n\\n        // Record the update time as the last update time.\\n        _checkpoints[_checkpointTime]\\n            .lastWeightedSpotPriceUpdateTime = _updateTime.toUint128();\\n    }\\n\\n    /// @dev Apply the updates to the market state as a result of closing a\\n    ///      position after maturity. This function also adjusts the proceeds\\n    ///      to account for any negative interest that has accrued in the\\n    ///      zombie reserves.\\n    /// @param _shareProceeds The share proceeds.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return The adjusted share proceeds.\\n    function _applyZombieClose(\\n        uint256 _shareProceeds,\\n        uint256 _vaultSharePrice\\n    ) internal returns (uint256) {\\n        // Collect any zombie interest that has accrued since the last\\n        // collection.\\n        (\\n            uint256 zombieBaseProceeds,\\n            uint256 zombieBaseReserves\\n        ) = _collectZombieInterest(_vaultSharePrice);\\n\\n        // NOTE: Round down to underestimate the proceeds.\\n        //\\n        // If negative interest has accrued in the zombie reserves, we\\n        // discount the share proceeds in proportion to the amount of\\n        // negative interest that has accrued.\\n        uint256 baseProceeds = _shareProceeds.mulDown(_vaultSharePrice);\\n        if (zombieBaseProceeds > zombieBaseReserves) {\\n            _shareProceeds = _shareProceeds.mulDivDown(\\n                zombieBaseReserves,\\n                zombieBaseProceeds\\n            );\\n        }\\n\\n        // Apply the updates to the zombie base proceeds and share reserves.\\n        if (baseProceeds < zombieBaseProceeds) {\\n            unchecked {\\n                zombieBaseProceeds -= baseProceeds;\\n            }\\n        } else {\\n            zombieBaseProceeds = 0;\\n        }\\n        _marketState.zombieBaseProceeds = zombieBaseProceeds.toUint112();\\n        uint256 zombieShareReserves = _marketState.zombieShareReserves;\\n        if (_shareProceeds < zombieShareReserves) {\\n            unchecked {\\n                zombieShareReserves -= _shareProceeds;\\n            }\\n        } else {\\n            zombieShareReserves = 0;\\n        }\\n        _marketState.zombieShareReserves = zombieShareReserves.toUint128();\\n\\n        return _shareProceeds;\\n    }\\n\\n    /// @dev Collect the interest earned on unredeemed matured positions. This\\n    ///      interest is split between the LPs and governance.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return zombieBaseProceeds The base proceeds reserved for zombie\\n    ///         positions.\\n    /// @return zombieBaseReserves The updated base reserves reserved for zombie\\n    ///         positions.\\n    function _collectZombieInterest(\\n        uint256 _vaultSharePrice\\n    )\\n        internal\\n        returns (uint256 zombieBaseProceeds, uint256 zombieBaseReserves)\\n    {\\n        // NOTE: Round down to underestimate the proceeds.\\n        //\\n        // Get the zombie base proceeds and reserves.\\n        zombieBaseReserves = _vaultSharePrice.mulDown(\\n            _marketState.zombieShareReserves\\n        );\\n        zombieBaseProceeds = _marketState.zombieBaseProceeds;\\n\\n        // If the zombie base reserves are greater than the zombie base\\n        // proceeds, then there is interest to collect.\\n        if (zombieBaseReserves > zombieBaseProceeds) {\\n            // The interest collected on the zombie position is simply the\\n            // difference between the base reserves and the base proceeds.\\n            uint256 zombieInterest = zombieBaseReserves - zombieBaseProceeds;\\n\\n            // NOTE: Round up to overestimate the impact that removing the\\n            // interest had on the zombie share reserves.\\n            //\\n            // Remove the zombie interest from the zombie share reserves.\\n            _marketState.zombieShareReserves -= zombieInterest\\n                .divUp(_vaultSharePrice)\\n                .toUint128();\\n\\n            // NOTE: Round down to underestimate the zombie interest given to\\n            // the LPs and governance.\\n            //\\n            // Calculate and collect the governance fee.\\n            // The fee is calculated in terms of shares and paid to\\n            // governance.\\n            uint256 zombieInterestShares = zombieInterest.divDown(\\n                _vaultSharePrice\\n            );\\n            uint256 governanceZombieFeeCollected = zombieInterestShares.mulDown(\\n                _governanceZombieFee\\n            );\\n            _governanceFeesAccrued += governanceZombieFeeCollected;\\n\\n            // The zombie interest that was collected (minus the fees paid to\\n            // governance), are reinvested in the share reserves. The share\\n            // adjustment is updated in lock-step to avoid changing the curve's\\n            // k invariant.\\n            zombieInterestShares -= governanceZombieFeeCollected;\\n            _marketState.shareReserves += zombieInterestShares.toUint128();\\n            _marketState.shareAdjustment += zombieInterestShares.toInt128();\\n\\n            // After collecting the interest, the zombie base reserves are\\n            // equal to the zombie base proceeds.\\n            zombieBaseReserves = zombieBaseProceeds;\\n        }\\n    }\\n\\n    /// @dev Calculates the number of share reserves that are not reserved by\\n    ///      open positions.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return idleShares The amount of shares that are available for LPs to\\n    ///         withdraw.\\n    function _calculateIdleShareReserves(\\n        uint256 _vaultSharePrice\\n    ) internal view returns (uint256 idleShares) {\\n        // NOTE: Round up to underestimate the pool's idle.\\n        uint256 longExposure = uint256(_marketState.longExposure).divUp(\\n            _vaultSharePrice\\n        );\\n        if (_marketState.shareReserves > longExposure + _minimumShareReserves) {\\n            idleShares =\\n                _marketState.shareReserves -\\n                longExposure -\\n                _minimumShareReserves;\\n        }\\n        return idleShares;\\n    }\\n\\n    /// @dev Calculates the LP share price. If the LP share price can't be\\n    ///      calculated, this function returns a failure flag.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return The LP share price in units of (base / lp shares).\\n    /// @return A flag indicating if the calculation succeeded.\\n    function _calculateLPSharePriceSafe(\\n        uint256 _vaultSharePrice\\n    ) internal view returns (uint256, bool) {\\n        // Calculate the present value safely to prevent liveness problems. If\\n        // the calculation fails, we return 0.\\n        (uint256 presentValueShares, bool success) = LPMath\\n            .calculatePresentValueSafe(\\n                _getPresentValueParams(_vaultSharePrice)\\n            );\\n        if (!success) {\\n            return (0, false);\\n        }\\n\\n        // Calculate the LP total supply.\\n        uint256 lpTotalSupply = _totalSupply[AssetId._LP_ASSET_ID] +\\n            _totalSupply[AssetId._WITHDRAWAL_SHARE_ASSET_ID] -\\n            _withdrawPool.readyToWithdraw;\\n\\n        // If the LP total supply is zero, the LP share price can't be computed\\n        // due to a divide-by-zero error.\\n        if (lpTotalSupply == 0) {\\n            return (0, false);\\n        }\\n\\n        // NOTE: Round down to underestimate the LP share price.\\n        //\\n        // Calculate the LP share price.\\n        uint256 lpSharePrice = _vaultSharePrice > 0\\n            ? presentValueShares.mulDivDown(_vaultSharePrice, lpTotalSupply)\\n            : 0;\\n\\n        return (lpSharePrice, true);\\n    }\\n\\n    /// @dev Calculates the pool's solvency if a long is opened that brings the\\n    ///      rate to 0%. This is the maximum possible long that can be opened on\\n    ///      the YieldSpace curve.\\n    /// @param _shareReserves The pool's share reserves.\\n    /// @param _shareAdjustment The pool's share adjustment.\\n    /// @param _bondReserves The pool's bond reserves.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _longExposure The pool's long exposure.\\n    /// @param _checkpointExposure The pool's checkpoint exposure.\\n    /// @return The solvency after opening the max long.\\n    /// @return A flag indicating whether or not the calculation succeeded.\\n    function _calculateSolvencyAfterMaxLongSafe(\\n        uint256 _shareReserves,\\n        int256 _shareAdjustment,\\n        uint256 _bondReserves,\\n        uint256 _vaultSharePrice,\\n        uint256 _longExposure,\\n        int256 _checkpointExposure\\n    ) internal view returns (int256, bool) {\\n        // Calculate the share payment and bond proceeds of opening the largest\\n        // possible long on the YieldSpace curve. This does not include fees.\\n        // These calculations fail when the max long is close to zero, and we\\n        // ignore these failures since we can proceed with the calculation in\\n        // this case.\\n        (uint256 effectiveShareReserves, bool success) = HyperdriveMath\\n            .calculateEffectiveShareReservesSafe(\\n                _shareReserves,\\n                _shareAdjustment\\n            );\\n        if (!success) {\\n            return (0, false);\\n        }\\n        (uint256 maxSharePayment, ) = YieldSpaceMath\\n            .calculateMaxBuySharesInSafe(\\n                effectiveShareReserves,\\n                _bondReserves,\\n                ONE - _timeStretch,\\n                _vaultSharePrice,\\n                _initialVaultSharePrice\\n            );\\n        (uint256 maxBondProceeds, ) = YieldSpaceMath\\n            .calculateBondsOutGivenSharesInDownSafe(\\n                effectiveShareReserves,\\n                _bondReserves,\\n                maxSharePayment,\\n                ONE - _timeStretch,\\n                _vaultSharePrice,\\n                _initialVaultSharePrice\\n            );\\n\\n        // If one of the max share payment or max bond proceeds calculations\\n        // fail or return zero, the max long amount is zero plus or minus a few\\n        // wei.\\n        if (maxSharePayment == 0 || maxBondProceeds == 0) {\\n            maxSharePayment = 0;\\n            maxBondProceeds = 0;\\n        }\\n\\n        // Apply the fees from opening a long to the max share payment and bond\\n        // proceeds. Fees applied to the share payment hurt solvency and fees\\n        // applied to the bond proceeds make the pool more solvent. To be\\n        // conservative, we only apply the fee to the share payment.\\n        uint256 spotPrice = HyperdriveMath.calculateSpotPrice(\\n            effectiveShareReserves,\\n            _bondReserves,\\n            _initialVaultSharePrice,\\n            _timeStretch\\n        );\\n        (maxSharePayment, , ) = _calculateOpenLongFees(\\n            maxSharePayment,\\n            maxBondProceeds,\\n            _vaultSharePrice,\\n            spotPrice\\n        );\\n\\n        // Calculate the pool's solvency after opening the max long.\\n        uint256 shareReserves = _shareReserves + maxSharePayment;\\n        uint256 longExposure = LPMath.calculateLongExposure(\\n            _longExposure,\\n            _checkpointExposure,\\n            _checkpointExposure + maxBondProceeds.toInt256()\\n        );\\n        uint256 vaultSharePrice = _vaultSharePrice;\\n        return (\\n            shareReserves.mulDown(vaultSharePrice).toInt256() -\\n                longExposure.toInt256() -\\n                _minimumShareReserves.mulUp(vaultSharePrice).toInt256(),\\n            true\\n        );\\n    }\\n\\n    /// @dev Calculates the share reserves delta, the bond reserves delta, and\\n    ///      the total governance fee after opening a long.\\n    /// @param _shareReservesDelta The change in the share reserves without fees.\\n    /// @param _bondReservesDelta The change in the bond reserves without fees.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _spotPrice The current spot price.\\n    /// @return The change in the share reserves with fees.\\n    /// @return The change in the bond reserves with fees.\\n    /// @return The governance fee in shares.\\n    function _calculateOpenLongFees(\\n        uint256 _shareReservesDelta,\\n        uint256 _bondReservesDelta,\\n        uint256 _vaultSharePrice,\\n        uint256 _spotPrice\\n    ) internal view returns (uint256, uint256, uint256) {\\n        // Calculate the fees charged to the user (curveFee) and the portion\\n        // of those fees that are paid to governance (governanceCurveFee).\\n        (\\n            uint256 curveFee, // bonds\\n            uint256 governanceCurveFee // bonds\\n        ) = _calculateFeesGivenShares(\\n                _shareReservesDelta,\\n                _spotPrice,\\n                _vaultSharePrice\\n            );\\n\\n        // Calculate the impact of the curve fee on the bond reserves. The curve\\n        // fee benefits the LPs by causing less bonds to be deducted from the\\n        // bond reserves.\\n        _bondReservesDelta -= curveFee;\\n\\n        // NOTE: Round down to underestimate the governance fee.\\n        //\\n        // Calculate the fees owed to governance in shares. Open longs are\\n        // calculated entirely on the curve so the curve fee is the total\\n        // governance fee. In order to convert it to shares we need to multiply\\n        // it by the spot price and divide it by the vault share price:\\n        //\\n        // shares = (bonds * base/bonds) / (base/shares)\\n        // shares = bonds * shares/bonds\\n        // shares = shares\\n        uint256 totalGovernanceFee = governanceCurveFee.mulDivDown(\\n            _spotPrice,\\n            _vaultSharePrice\\n        );\\n\\n        // Calculate the number of shares to add to the shareReserves.\\n        // shareReservesDelta, _shareAmount and totalGovernanceFee\\n        // are all denominated in shares:\\n        //\\n        // shares = shares - shares\\n        _shareReservesDelta -= totalGovernanceFee;\\n\\n        return (_shareReservesDelta, _bondReservesDelta, totalGovernanceFee);\\n    }\\n\\n    /// @dev Calculates the fees that go to the LPs and governance.\\n    /// @param _shareAmount The amount of shares exchanged for bonds.\\n    /// @param _spotPrice The price without slippage of bonds in terms of base\\n    ///         (base/bonds).\\n    /// @param _vaultSharePrice The current vault share price (base/shares).\\n    /// @return curveFee The curve fee. The fee is in terms of bonds.\\n    /// @return governanceCurveFee The curve fee that goes to governance. The\\n    ///         fee is in terms of bonds.\\n    function _calculateFeesGivenShares(\\n        uint256 _shareAmount,\\n        uint256 _spotPrice,\\n        uint256 _vaultSharePrice\\n    ) internal view returns (uint256 curveFee, uint256 governanceCurveFee) {\\n        // NOTE: Round up to overestimate the curve fee.\\n        //\\n        // Fixed Rate (r) = (value at maturity - purchase price)/(purchase price)\\n        //                = (1-p)/p\\n        //                = ((1 / p) - 1)\\n        //                = the ROI at maturity of a bond purchased at price p\\n        //\\n        // Another way to think about it:\\n        //\\n        // p (spot price) tells us how many base a bond is worth -> p = base/bonds\\n        // 1/p tells us how many bonds a base is worth -> 1/p = bonds/base\\n        // 1/p - 1 tells us how many additional bonds we get for each\\n        // base -> (1/p - 1) = additional bonds/base\\n        //\\n        // The curve fee is taken from the additional bonds the user gets for\\n        // each base:\\n        //\\n        // curve fee = ((1 / p) - 1) * phi_curve * c * dz\\n        //           = r * phi_curve * base/shares * shares\\n        //           = bonds/base * phi_curve * base\\n        //           = bonds * phi_curve\\n        curveFee = (ONE.divUp(_spotPrice) - ONE)\\n            .mulUp(_curveFee)\\n            .mulUp(_vaultSharePrice)\\n            .mulUp(_shareAmount);\\n\\n        // NOTE: Round down to underestimate the governance curve fee.\\n        //\\n        // We leave the governance fee in terms of bonds:\\n        // governanceCurveFee = curve_fee * phi_gov\\n        //                    = bonds * phi_gov\\n        governanceCurveFee = curveFee.mulDown(_governanceLPFee);\\n    }\\n\\n    /// @dev Calculates the fees that go to the LPs and governance.\\n    /// @param _bondAmount The amount of bonds being exchanged for shares.\\n    /// @param _normalizedTimeRemaining The normalized amount of time until\\n    ///        maturity.\\n    /// @param _spotPrice The price without slippage of bonds in terms of base\\n    ///        (base/bonds).\\n    /// @param _vaultSharePrice The current vault share price (base/shares).\\n    /// @return curveFee The curve fee. The fee is in terms of shares.\\n    /// @return flatFee The flat fee. The fee is in terms of shares.\\n    /// @return governanceCurveFee The curve fee that goes to governance. The\\n    ///         fee is in terms of shares.\\n    /// @return totalGovernanceFee The total fee that goes to governance. The\\n    ///         fee is in terms of shares.\\n    function _calculateFeesGivenBonds(\\n        uint256 _bondAmount,\\n        uint256 _normalizedTimeRemaining,\\n        uint256 _spotPrice,\\n        uint256 _vaultSharePrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 curveFee,\\n            uint256 flatFee,\\n            uint256 governanceCurveFee,\\n            uint256 totalGovernanceFee\\n        )\\n    {\\n        // NOTE: Round up to overestimate the curve fee.\\n        //\\n        // p (spot price) tells us how many base a bond is worth -> p = base/bonds\\n        // 1 - p tells us how many additional base a bond is worth at\\n        // maturity -> (1 - p) = additional base/bonds\\n        //\\n        // The curve fee is taken from the additional base the user gets for\\n        // each bond at maturity:\\n        //\\n        // curve fee = ((1 - p) * phi_curve * d_y * t)/c\\n        //           = (base/bonds * phi_curve * bonds * t) / (base/shares)\\n        //           = (base/bonds * phi_curve * bonds * t) * (shares/base)\\n        //           = (base * phi_curve * t) * (shares/base)\\n        //           = phi_curve * t * shares\\n        curveFee = _curveFee\\n            .mulUp(ONE - _spotPrice)\\n            .mulUp(_bondAmount)\\n            .mulDivUp(_normalizedTimeRemaining, _vaultSharePrice);\\n\\n        // NOTE: Round down to underestimate the governance curve fee.\\n        //\\n        // Calculate the curve portion of the governance fee:\\n        //\\n        // governanceCurveFee = curve_fee * phi_gov\\n        //                    = shares * phi_gov\\n        governanceCurveFee = curveFee.mulDown(_governanceLPFee);\\n\\n        // NOTE: Round up to overestimate the flat fee.\\n        //\\n        // The flat portion of the fee is taken from the matured bonds.\\n        // Since a matured bond is worth 1 base, it is appropriate to consider\\n        // d_y in units of base:\\n        //\\n        // flat fee = (d_y * (1 - t) * phi_flat) / c\\n        //          = (base * (1 - t) * phi_flat) / (base/shares)\\n        //          = (base * (1 - t) * phi_flat) * (shares/base)\\n        //          = shares * (1 - t) * phi_flat\\n        uint256 flat = _bondAmount.mulDivUp(\\n            ONE - _normalizedTimeRemaining,\\n            _vaultSharePrice\\n        );\\n        flatFee = flat.mulUp(_flatFee);\\n\\n        // NOTE: Round down to underestimate the total governance fee.\\n        //\\n        // We calculate the flat portion of the governance fee as:\\n        //\\n        // governance_flat_fee = flat_fee * phi_gov\\n        //                     = shares * phi_gov\\n        //\\n        // The totalGovernanceFee is the sum of the curve and flat governance fees.\\n        totalGovernanceFee =\\n            governanceCurveFee +\\n            flatFee.mulDown(_governanceLPFee);\\n    }\\n\\n    /// @dev Converts input to what is specified in the options from base.\\n    /// @param _amount The amount to convert.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _options The options that configure the conversion.\\n    /// @return The converted amount.\\n    function _convertToOptionFromBase(\\n        uint256 _amount,\\n        uint256 _vaultSharePrice,\\n        IHyperdrive.Options calldata _options\\n    ) internal pure returns (uint256) {\\n        if (_options.asBase) {\\n            return _amount;\\n        } else {\\n            // NOTE: Round down to underestimate the shares amount.\\n            return _amount.divDown(_vaultSharePrice);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveCheckpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { ExcessivelySafeCall } from \\\"nomad/ExcessivelySafeCall.sol\\\";\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveCheckpointRewarder } from \\\"../interfaces/IHyperdriveCheckpointRewarder.sol\\\";\\nimport { IHyperdriveEvents } from \\\"../interfaces/IHyperdriveEvents.sol\\\";\\nimport { AssetId } from \\\"../libraries/AssetId.sol\\\";\\nimport { FixedPointMath } from \\\"../libraries/FixedPointMath.sol\\\";\\nimport { HyperdriveMath } from \\\"../libraries/HyperdriveMath.sol\\\";\\nimport { SafeCast } from \\\"../libraries/SafeCast.sol\\\";\\nimport { HyperdriveBase } from \\\"./HyperdriveBase.sol\\\";\\nimport { HyperdriveLong } from \\\"./HyperdriveLong.sol\\\";\\nimport { HyperdriveShort } from \\\"./HyperdriveShort.sol\\\";\\n\\n/// @author DELV\\n/// @notice Implements the checkpoint accounting for Hyperdrive.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveCheckpoint is\\n    IHyperdriveEvents,\\n    HyperdriveBase,\\n    HyperdriveLong,\\n    HyperdriveShort\\n{\\n    using ExcessivelySafeCall for address;\\n    using FixedPointMath for uint256;\\n    using FixedPointMath for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Attempts to mint a checkpoint with the specified checkpoint time.\\n    /// @param _checkpointTime The time of the checkpoint to create.\\n    /// @param _maxIterations The number of iterations to use in the Newton's\\n    ///        method component of `_distributeExcessIdleSafe`. This defaults to\\n    ///        `LPMath.SHARE_PROCEEDS_MAX_ITERATIONS` if the specified value is\\n    ///        smaller than the constant.\\n    function _checkpoint(\\n        uint256 _checkpointTime,\\n        uint256 _maxIterations\\n    ) internal nonReentrant {\\n        // If the checkpoint has already been set, attempt to distribute excess\\n        // idle and return early.\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        if (_checkpoints[_checkpointTime].vaultSharePrice != 0) {\\n            // Distribute the excess idle to the withdrawal pool. If the\\n            // distribute excess idle calculation fails, we proceed with the\\n            // calculation since checkpoints should be minted regardless of\\n            // whether idle could be distributed.\\n            _distributeExcessIdleSafe(vaultSharePrice, _maxIterations);\\n\\n            return;\\n        }\\n\\n        // If the checkpoint time isn't divisible by the checkpoint duration\\n        // or is in the future, it's an invalid checkpoint and we should\\n        // revert.\\n        uint256 latestCheckpoint = _latestCheckpoint();\\n        if (\\n            _checkpointTime % _checkpointDuration != 0 ||\\n            latestCheckpoint < _checkpointTime\\n        ) {\\n            revert IHyperdrive.InvalidCheckpointTime();\\n        }\\n\\n        // Apply the checkpoint.\\n        _applyCheckpoint(\\n            _checkpointTime,\\n            vaultSharePrice,\\n            _maxIterations,\\n            false\\n        );\\n    }\\n\\n    /// @dev Creates a new checkpoint if necessary.\\n    /// @param _checkpointTime The time of the checkpoint to create.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _maxIterations The number of iterations to use in the Newton's\\n    ///        method component of `_distributeExcessIdleSafe`. This defaults to\\n    ///        `LPMath.SHARE_PROCEEDS_MAX_ITERATIONS` if the specified value is\\n    ///        smaller than the constant.\\n    /// @param _isTrader A boolean indicating whether or not the checkpoint was\\n    ///        minted by a trader or by someone calling checkpoint directly.\\n    /// @return The opening vault share price of the checkpoint.\\n    function _applyCheckpoint(\\n        uint256 _checkpointTime,\\n        uint256 _vaultSharePrice,\\n        uint256 _maxIterations,\\n        bool _isTrader\\n    ) internal override returns (uint256) {\\n        // Return early if the checkpoint has already been updated.\\n        IHyperdrive.Checkpoint storage checkpoint = _checkpoints[\\n            _checkpointTime\\n        ];\\n        if (\\n            checkpoint.vaultSharePrice != 0 || _checkpointTime > block.timestamp\\n        ) {\\n            return checkpoint.vaultSharePrice;\\n        }\\n\\n        // If the checkpoint time is the latest checkpoint, we use the current\\n        // vault share price and spot price. Otherwise, we use a linear search\\n        // to find the closest non-zero vault share price and use that to\\n        // perform the checkpoint. We use the weighted spot price from the\\n        // checkpoint with the closest vault share price to populate the\\n        // weighted spot price.\\n        uint256 checkpointVaultSharePrice;\\n        uint256 checkpointWeightedSpotPrice;\\n        uint256 latestCheckpoint = _latestCheckpoint();\\n        {\\n            uint256 nextCheckpointTime = _checkpointTime + _checkpointDuration;\\n            for (; nextCheckpointTime < latestCheckpoint; ) {\\n                // If the time isn't the latest checkpoint, we check to see if\\n                // the checkpoint's vault share price is non-zero. If it is,\\n                // that is the vault share price that we'll use to create the\\n                // new checkpoint. We'll use the corresponding weighted spot\\n                // price to instantiate the weighted spot price for the new\\n                // checkpoint.\\n                uint256 futureVaultSharePrice = _checkpoints[nextCheckpointTime]\\n                    .vaultSharePrice;\\n                if (futureVaultSharePrice != 0) {\\n                    checkpointVaultSharePrice = futureVaultSharePrice;\\n                    checkpointWeightedSpotPrice = _checkpoints[\\n                        nextCheckpointTime\\n                    ].weightedSpotPrice;\\n                    break;\\n                }\\n\\n                // Update the next checkpoint time.\\n                unchecked {\\n                    nextCheckpointTime += _checkpointDuration;\\n                }\\n            }\\n            if (checkpointVaultSharePrice == 0) {\\n                checkpointVaultSharePrice = _vaultSharePrice;\\n                checkpointWeightedSpotPrice = HyperdriveMath.calculateSpotPrice(\\n                    _effectiveShareReserves(),\\n                    _marketState.bondReserves,\\n                    _initialVaultSharePrice,\\n                    _timeStretch\\n                );\\n            }\\n        }\\n\\n        // Create the vault share price checkpoint.\\n        checkpoint.vaultSharePrice = checkpointVaultSharePrice.toUint128();\\n\\n        // Update the weighted spot price for the previous checkpoint.\\n        _updateWeightedSpotPrice(\\n            _checkpointTime - _checkpointDuration,\\n            _checkpointTime,\\n            checkpointWeightedSpotPrice\\n        );\\n\\n        // Update the weighted spot price for the current checkpoint.\\n        _updateWeightedSpotPrice(\\n            _checkpointTime,\\n            // NOTE: We use the block time as the update time for the\\n            // latest checkpoint. For past checkpoints, we use the end time of\\n            // the checkpoint.\\n            block.timestamp.min(_checkpointTime + _checkpointDuration),\\n            checkpointWeightedSpotPrice\\n        );\\n\\n        // Collect the interest that has accrued since the last checkpoint.\\n        _collectZombieInterest(_vaultSharePrice);\\n\\n        // Close out all of the short positions that matured at the beginning of\\n        // this checkpoint. This ensures that shorts don't continue to collect\\n        // free variable interest and that LP's can withdraw the proceeds of\\n        // their side of the trade. Closing out shorts first helps with netting\\n        // by ensuring the LP funds that were netted with longs are back in the\\n        // shareReserves before we close out the longs.\\n        uint256 openVaultSharePrice = _checkpoints[\\n            _checkpointTime - _positionDuration\\n        ].vaultSharePrice;\\n        uint256 shortAssetId = AssetId.encodeAssetId(\\n            AssetId.AssetIdPrefix.Short,\\n            _checkpointTime\\n        );\\n        uint256 maturedShortsAmount = _totalSupply[shortAssetId];\\n        bool positionsClosed;\\n        uint256 checkpointTime = _checkpointTime; // avoid stack-too-deep\\n        uint256 vaultSharePrice = _vaultSharePrice; // avoid stack-too-deep\\n        if (maturedShortsAmount > 0) {\\n            // Since we're closing out short positions, we'll need to distribute\\n            // excess idle once the accounting updates have been performed.\\n            positionsClosed = true;\\n\\n            // Apply the governance and LP proceeds from closing out the matured\\n            // short positions to the state.\\n            (\\n                uint256 shareProceeds,\\n                uint256 governanceFee\\n            ) = _calculateMaturedProceeds(\\n                    maturedShortsAmount,\\n                    openVaultSharePrice,\\n                    checkpointVaultSharePrice,\\n                    vaultSharePrice,\\n                    false\\n                );\\n            _governanceFeesAccrued += governanceFee;\\n            _applyCloseShort(\\n                maturedShortsAmount,\\n                0,\\n                shareProceeds,\\n                shareProceeds.toInt256(), // keep the effective share reserves constant\\n                checkpointTime\\n            );\\n\\n            // Add the governance fee back to the share proceeds. We removed it\\n            // from the LP's share proceeds since the fee is paid to governance;\\n            // however, the shorts must pay the flat fee.\\n            shareProceeds += governanceFee;\\n\\n            // Calculate the share proceeds owed to the matured short positions.\\n            // Since the shorts have matured and the bonds have matured to a\\n            // value of 1, this is the amount of variable interest that the\\n            // shorts earned minus the flat fee.\\n            //\\n            // NOTE: Round down to underestimate the short proceeds.\\n            shareProceeds = HyperdriveMath.calculateShortProceedsDown(\\n                maturedShortsAmount,\\n                shareProceeds,\\n                openVaultSharePrice,\\n                checkpointVaultSharePrice,\\n                vaultSharePrice,\\n                _flatFee\\n            );\\n\\n            // Add the short proceeds to the zombie base proceeds and share\\n            // reserves.\\n            //\\n            // NOTE: Round down to underestimate the short proceeds.\\n            _marketState.zombieBaseProceeds += shareProceeds\\n                .mulDown(vaultSharePrice)\\n                .toUint112();\\n            _marketState.zombieShareReserves += shareProceeds.toUint128();\\n        }\\n\\n        // Close out all of the long positions that matured at the beginning of\\n        // this checkpoint.\\n        uint256 longAssetId = AssetId.encodeAssetId(\\n            AssetId.AssetIdPrefix.Long,\\n            checkpointTime\\n        );\\n        uint256 maturedLongsAmount = _totalSupply[longAssetId];\\n        if (maturedLongsAmount > 0) {\\n            // Since we're closing out long positions, we'll need to distribute\\n            // excess idle once the accounting updates have been performed.\\n            positionsClosed = true;\\n\\n            // Apply the governance and LP proceeds from closing out the matured\\n            // long positions to the state.\\n            (\\n                uint256 shareProceeds,\\n                uint256 governanceFee\\n            ) = _calculateMaturedProceeds(\\n                    maturedLongsAmount,\\n                    openVaultSharePrice,\\n                    checkpointVaultSharePrice,\\n                    vaultSharePrice,\\n                    true\\n                );\\n            _governanceFeesAccrued += governanceFee;\\n            _applyCloseLong(\\n                maturedLongsAmount,\\n                0,\\n                shareProceeds,\\n                shareProceeds.toInt256(), // keep the effective share reserves constant\\n                checkpointTime\\n            );\\n\\n            // Subtract the governance fee out when we add\\n            // share proceeds to the zombie share reserves.\\n            shareProceeds -= governanceFee;\\n\\n            // Add the long proceeds to the zombie base proceeds and share\\n            // reserves.\\n            //\\n            // NOTE: Round down to underestimate the long proceeds.\\n            _marketState.zombieBaseProceeds += shareProceeds\\n                .mulDown(vaultSharePrice)\\n                .toUint112();\\n            _marketState.zombieShareReserves += shareProceeds.toUint128();\\n        }\\n\\n        // If we closed any positions, update the global long exposure and\\n        // distribute any excess idle to the withdrawal pool.\\n        if (positionsClosed) {\\n            // Update the global long exposure. Since we've closed some matured\\n            // positions, we can reduce the long exposure for the matured\\n            // checkpoint to zero.\\n            _updateLongExposure(\\n                maturedLongsAmount.toInt256() - maturedShortsAmount.toInt256(),\\n                0\\n            );\\n\\n            // Distribute the excess idle to the withdrawal pool. If the\\n            // distribute excess idle calculation fails, we proceed with the\\n            // calculation since checkpoints should be minted regardless of\\n            // whether idle could be distributed.\\n            uint256 maxIterations = _maxIterations; // avoid stack-too-deep\\n            _distributeExcessIdleSafe(vaultSharePrice, maxIterations);\\n        }\\n\\n        // Emit an event about the checkpoint creation that includes the LP\\n        // share price. If the LP share price calculation fails, we proceed in\\n        // minting the checkpoint and just emit the LP share price as zero. This\\n        // ensures that the system's liveness isn't impacted by temporarily\\n        // being unable to calculate the present value.\\n        (uint256 lpSharePrice, ) = _calculateLPSharePriceSafe(vaultSharePrice);\\n        emit CreateCheckpoint(\\n            checkpointTime,\\n            checkpointVaultSharePrice,\\n            vaultSharePrice,\\n            maturedShortsAmount,\\n            maturedLongsAmount,\\n            lpSharePrice\\n        );\\n\\n        // Claim the checkpoint reward on behalf of the sender.\\n        //\\n        // NOTE: We do this in a low-level call and ignore the status to ensure\\n        // that the checkpoint will be minted regardless of whether or not the\\n        // call succeeds. Furthermore, we use the `ExcessivelySafeCall` library\\n        // to prevent returndata bombing.\\n        if (_checkpointRewarder != address(0)) {\\n            bool isTrader = _isTrader; // avoid stack-too-deep\\n            _checkpointRewarder.excessivelySafeCall(\\n                gasleft(),\\n                0, // value of 0\\n                0, // max copy of 0 bytes\\n                abi.encodeCall(\\n                    IHyperdriveCheckpointRewarder.claimCheckpointReward,\\n                    (msg.sender, checkpointTime, isTrader)\\n                )\\n            );\\n        }\\n\\n        return checkpointVaultSharePrice;\\n    }\\n\\n    /// @dev Calculates the proceeds of the holders of a given position at\\n    ///      maturity.\\n    /// @param _bondAmount The bond amount of the position.\\n    /// @param _openVaultSharePrice The vault share price from the position's\\n    ///        starting checkpoint.\\n    /// @param _closeVaultSharePrice The vault share price from the position's\\n    ///        ending checkpoint.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _isLong A flag indicating whether or not the position is a long.\\n    /// @return shareProceeds The proceeds of the holders in shares.\\n    /// @return governanceFee The fee paid to governance in shares.\\n    function _calculateMaturedProceeds(\\n        uint256 _bondAmount,\\n        uint256 _openVaultSharePrice,\\n        uint256 _closeVaultSharePrice,\\n        uint256 _vaultSharePrice,\\n        bool _isLong\\n    ) internal view returns (uint256 shareProceeds, uint256 governanceFee) {\\n        // Calculate the share proceeds, flat fee, and governance fee. Since the\\n        // position is closed at maturity, the share proceeds are equal to the\\n        // bond amount divided by the vault share price.\\n        //\\n        // NOTE: Round down to underestimate the share proceeds, flat fee, and\\n        // governance fee.\\n        shareProceeds = _bondAmount.divDown(_vaultSharePrice);\\n        uint256 flatFee = shareProceeds.mulDown(_flatFee);\\n        governanceFee = flatFee.mulDown(_governanceLPFee);\\n\\n        // If the position is a long, the share proceeds are removed from the\\n        // share reserves. The proceeds are decreased by the flat fee because\\n        // the trader pays the flat fee. Most of the flat fee is paid to the\\n        // reserves; however, a portion of the flat fee is paid to governance.\\n        // With this in mind, we also increase the share proceeds by the\\n        // governance fee.\\n        if (_isLong) {\\n            shareProceeds -= flatFee - governanceFee;\\n        }\\n        // If the position is a short, the share proceeds are added to the share\\n        // reserves. The proceeds are increased by the flat fee because the pool\\n        // receives the flat fee. Most of the flat fee is paid to the reserves;\\n        // however, a portion of the flat fee is paid to governance. With this\\n        // in mind, we also decrease the share proceeds by the governance fee.\\n        else {\\n            shareProceeds += flatFee - governanceFee;\\n        }\\n\\n        // If negative interest accrued over the period, the proceeds and\\n        // governance fee are given a \\\"haircut\\\" proportional to the negative\\n        // interest that accrued.\\n        if (_closeVaultSharePrice < _openVaultSharePrice) {\\n            // NOTE: Round down to underestimate the proceeds.\\n            shareProceeds = shareProceeds.mulDivDown(\\n                _closeVaultSharePrice,\\n                _openVaultSharePrice\\n            );\\n\\n            // NOTE: Round down to underestimate the governance fee.\\n            governanceFee = governanceFee.mulDivDown(\\n                _closeVaultSharePrice,\\n                _openVaultSharePrice\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveLong.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveEvents } from \\\"../interfaces/IHyperdriveEvents.sol\\\";\\nimport { AssetId } from \\\"../libraries/AssetId.sol\\\";\\nimport { Errors } from \\\"../libraries/Errors.sol\\\";\\nimport { FixedPointMath, ONE } from \\\"../libraries/FixedPointMath.sol\\\";\\nimport { HyperdriveMath } from \\\"../libraries/HyperdriveMath.sol\\\";\\nimport { LPMath } from \\\"../libraries/LPMath.sol\\\";\\nimport { SafeCast } from \\\"../libraries/SafeCast.sol\\\";\\nimport { HyperdriveLP } from \\\"./HyperdriveLP.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveLong\\n/// @notice Implements the long accounting for Hyperdrive.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveLong is IHyperdriveEvents, HyperdriveLP {\\n    using FixedPointMath for uint256;\\n    using FixedPointMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    /// @dev Opens a long position.\\n    /// @param _amount The amount of capital provided to open the long. The\\n    ///        units of this quantity are either base or vault shares, depending\\n    ///        on the value of `_options.asBase`.\\n    /// @param _minOutput The minimum number of bonds to receive.\\n    /// @param _minVaultSharePrice The minimum vault share price at which to\\n    ///        open the long. This allows traders to protect themselves from\\n    ///        opening a long in a checkpoint where negative interest has\\n    ///        accrued.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return maturityTime The maturity time of the bonds.\\n    /// @return bondProceeds The amount of bonds the user received.\\n    function _openLong(\\n        uint256 _amount,\\n        uint256 _minOutput,\\n        uint256 _minVaultSharePrice,\\n        IHyperdrive.Options calldata _options\\n    )\\n        internal\\n        nonReentrant\\n        isNotPaused\\n        returns (uint256 maturityTime, uint256 bondProceeds)\\n    {\\n        // Check that the message value is valid.\\n        _checkMessageValue();\\n\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Deposit the user's input amount.\\n        (uint256 sharesDeposited, uint256 vaultSharePrice) = _deposit(\\n            _amount,\\n            _options\\n        );\\n\\n        // Enforce the minimum user outputs and the minimum vault share price.\\n        //\\n        // NOTE: We use the value that is returned from the deposit to check\\n        // against the minimum transaction amount because in the event of\\n        // slippage on the deposit, we want the inputs to the state updates to\\n        // respect the minimum transaction amount requirements.\\n        //\\n        // NOTE: Round down to underestimate the base deposit. This makes the\\n        //       minimum transaction amount check more conservative.\\n        uint256 baseDeposited = sharesDeposited.mulDown(vaultSharePrice);\\n        if (baseDeposited < _minimumTransactionAmount) {\\n            revert IHyperdrive.MinimumTransactionAmount();\\n        }\\n        if (vaultSharePrice < _minVaultSharePrice) {\\n            revert IHyperdrive.MinimumSharePrice();\\n        }\\n\\n        // Perform a checkpoint.\\n        uint256 latestCheckpoint = _latestCheckpoint();\\n        _applyCheckpoint(\\n            latestCheckpoint,\\n            vaultSharePrice,\\n            LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n            true\\n        );\\n\\n        // Calculate the pool and user deltas using the trading function. We\\n        // backdate the bonds purchased to the beginning of the checkpoint.\\n        // Note: All state deltas are derived from the output of the\\n        // deposit function.\\n        uint256 shareReservesDelta;\\n        uint256 totalGovernanceFee;\\n        uint256 spotPrice;\\n        (\\n            shareReservesDelta,\\n            bondProceeds,\\n            totalGovernanceFee,\\n            spotPrice\\n        ) = _calculateOpenLong(sharesDeposited, vaultSharePrice);\\n\\n        // Enforce the minimum user outputs.\\n        if (bondProceeds < _minOutput) {\\n            revert IHyperdrive.OutputLimit();\\n        }\\n\\n        // Attribute the governance fee.\\n        _governanceFeesAccrued += totalGovernanceFee;\\n\\n        // Update the weighted spot price.\\n        _updateWeightedSpotPrice(latestCheckpoint, block.timestamp, spotPrice);\\n\\n        // Apply the open long to the state.\\n        maturityTime = latestCheckpoint + _positionDuration;\\n        _applyOpenLong(\\n            shareReservesDelta,\\n            bondProceeds,\\n            vaultSharePrice,\\n            maturityTime\\n        );\\n\\n        // Mint the bonds to the trader with an ID of the maturity time.\\n        uint256 assetId = AssetId.encodeAssetId(\\n            AssetId.AssetIdPrefix.Long,\\n            maturityTime\\n        );\\n        _mint(assetId, _options.destination, bondProceeds);\\n\\n        // Emit an OpenLong event.\\n        uint256 amount = _amount; // Avoid stack too deep error.\\n        uint256 maturityTime_ = maturityTime; // Avoid stack too deep error.\\n        uint256 bondProceeds_ = bondProceeds; // Avoid stack too deep error.\\n        uint256 vaultSharePrice_ = vaultSharePrice; // Avoid stack too deep error.\\n        IHyperdrive.Options calldata options = _options; // Avoid stack too deep error.\\n        emit OpenLong(\\n            options.destination,\\n            assetId,\\n            maturityTime_,\\n            amount,\\n            vaultSharePrice_,\\n            options.asBase,\\n            bondProceeds_,\\n            options.extraData\\n        );\\n\\n        return (maturityTime, bondProceeds_);\\n    }\\n\\n    /// @dev Closes a long position with a specified maturity time.\\n    /// @param _maturityTime The maturity time of the long.\\n    /// @param _bondAmount The amount of longs to close.\\n    /// @param _minOutput The minimum proceeds the trader will accept. The units\\n    ///        of this quantity are either base or vault shares, depending on\\n    ///        the value of `_options.asBase`.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return The proceeds the user receives. The units of this quantity are\\n    ///         either base or vault shares, depending on the value of\\n    ///         `_options.asBase`.\\n    function _closeLong(\\n        uint256 _maturityTime,\\n        uint256 _bondAmount,\\n        uint256 _minOutput,\\n        IHyperdrive.Options calldata _options\\n    ) internal nonReentrant returns (uint256) {\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Ensure that the bond amount is greater than or equal to the minimum\\n        // transaction amount.\\n        if (_bondAmount < _minimumTransactionAmount) {\\n            revert IHyperdrive.MinimumTransactionAmount();\\n        }\\n\\n        // If the long hasn't matured, we checkpoint the latest checkpoint.\\n        // Otherwise, we perform a checkpoint at the time the long matured.\\n        // This ensures the long and all of the other positions in the\\n        // checkpoint are closed.\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        if (block.timestamp < _maturityTime) {\\n            _applyCheckpoint(\\n                _latestCheckpoint(),\\n                vaultSharePrice,\\n                LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n                true\\n            );\\n        } else {\\n            _applyCheckpoint(\\n                _maturityTime,\\n                vaultSharePrice,\\n                LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n                true\\n            );\\n        }\\n\\n        // Burn the longs that are being closed.\\n        _burn(\\n            AssetId.encodeAssetId(AssetId.AssetIdPrefix.Long, _maturityTime),\\n            msg.sender,\\n            _bondAmount\\n        );\\n\\n        // Calculate the pool and user deltas using the trading function.\\n        // Note: All state deltas are derived from external function inputs.\\n        (\\n            uint256 bondReservesDelta,\\n            uint256 shareProceeds,\\n            uint256 shareReservesDelta,\\n            int256 shareAdjustmentDelta,\\n            uint256 totalGovernanceFee,\\n            uint256 spotPrice\\n        ) = _calculateCloseLong(_bondAmount, vaultSharePrice, _maturityTime);\\n\\n        // If the position hasn't matured, apply the accounting updates that\\n        // result from closing the long to the reserves and pay out the\\n        // withdrawal pool if necessary.\\n        uint256 maturityTime = _maturityTime; // Avoid stack too deep error.\\n        if (block.timestamp < _maturityTime) {\\n            // Attribute the governance fee.\\n            _governanceFeesAccrued += totalGovernanceFee;\\n\\n            // Update the weighted spot price.\\n            _updateWeightedSpotPrice(\\n                _latestCheckpoint(),\\n                block.timestamp,\\n                spotPrice\\n            );\\n\\n            // Apply the close long to the state.\\n            _applyCloseLong(\\n                _bondAmount,\\n                bondReservesDelta,\\n                shareReservesDelta,\\n                shareAdjustmentDelta,\\n                maturityTime\\n            );\\n\\n            // Update the global long exposure. Since we're closing a long, the\\n            // number of non-netted longs decreases by the bond amount.\\n            int256 nonNettedLongs = _nonNettedLongs(maturityTime);\\n            _updateLongExposure(\\n                nonNettedLongs + _bondAmount.toInt256(),\\n                nonNettedLongs\\n            );\\n\\n            // Closing longs decreases the share reserves. When the longs that\\n            // are being closed are partially or fully netted out, it's possible\\n            // that fully closing the long could make the system insolvent.\\n            if (!_isSolvent(vaultSharePrice)) {\\n                Errors.throwInsufficientLiquidityError();\\n            }\\n\\n            // Distribute the excess idle to the withdrawal pool. If the\\n            // distribute excess idle calculation fails, we revert to avoid\\n            // putting the system in an unhealthy state after the trade is\\n            // processed.\\n            bool success = _distributeExcessIdleSafe(vaultSharePrice);\\n            if (!success) {\\n                revert IHyperdrive.DistributeExcessIdleFailed();\\n            }\\n        } else {\\n            // Apply the zombie close to the state and adjust the share proceeds\\n            // to account for negative interest that might have accrued to the\\n            // zombie share reserves.\\n            shareProceeds = _applyZombieClose(shareProceeds, vaultSharePrice);\\n\\n            // Distribute the excess idle to the withdrawal pool. If the\\n            // distribute excess idle calculation fails, we proceed with the\\n            // calculation since traders should be able to close their positions\\n            // at maturity regardless of whether idle could be distributed.\\n            _distributeExcessIdleSafe(vaultSharePrice);\\n        }\\n\\n        // Withdraw the profit to the trader.\\n        uint256 proceeds = _withdraw(shareProceeds, vaultSharePrice, _options);\\n\\n        // Enforce the minimum user outputs.\\n        //\\n        // NOTE: We use the value that is returned from the withdraw to check\\n        // against the minOutput because in the event of slippage on the\\n        // withdraw, we want it to be caught be the minOutput check.\\n        if (proceeds < _minOutput) {\\n            revert IHyperdrive.OutputLimit();\\n        }\\n\\n        // Emit a CloseLong event.\\n        uint256 bondAmount = _bondAmount; // Avoid stack too deep error.\\n        uint256 vaultSharePrice_ = vaultSharePrice; // Avoid stack too deep error.\\n        IHyperdrive.Options calldata options = _options; // Avoid stack too deep error.\\n        emit CloseLong(\\n            msg.sender, // trader\\n            options.destination, // destination\\n            AssetId.encodeAssetId(AssetId.AssetIdPrefix.Long, maturityTime),\\n            maturityTime,\\n            proceeds,\\n            vaultSharePrice_,\\n            options.asBase,\\n            bondAmount,\\n            options.extraData\\n        );\\n\\n        return proceeds;\\n    }\\n\\n    /// @dev Applies an open long to the state. This includes updating the\\n    ///      reserves and maintaining the reserve invariants.\\n    /// @param _shareReservesDelta The amount of shares paid to the curve.\\n    /// @param _bondReservesDelta The amount of bonds sold by the curve.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _maturityTime The maturity time of the long.\\n    function _applyOpenLong(\\n        uint256 _shareReservesDelta,\\n        uint256 _bondReservesDelta,\\n        uint256 _vaultSharePrice,\\n        uint256 _maturityTime\\n    ) internal {\\n        // Update the average maturity time of long positions.\\n        uint128 longsOutstanding_ = _marketState.longsOutstanding;\\n        _marketState.longAverageMaturityTime = uint256(\\n            _marketState.longAverageMaturityTime\\n        )\\n            .updateWeightedAverage(\\n                longsOutstanding_,\\n                _maturityTime * ONE, // scale up to fixed point scale\\n                _bondReservesDelta,\\n                true\\n            )\\n            .toUint128();\\n\\n        // Apply the trading deltas to the reserves and update the amount of\\n        // longs outstanding.\\n        _marketState.shareReserves += _shareReservesDelta.toUint128();\\n        _marketState.bondReserves -= _bondReservesDelta.toUint128();\\n        longsOutstanding_ += _bondReservesDelta.toUint128();\\n        _marketState.longsOutstanding = longsOutstanding_;\\n\\n        // Update the global long exposure. Since we're opening a long, the\\n        // number of non-netted longs increases by the bond amount.\\n        int256 nonNettedLongs = _nonNettedLongs(_maturityTime);\\n        _updateLongExposure(\\n            nonNettedLongs,\\n            nonNettedLongs + _bondReservesDelta.toInt256()\\n        );\\n\\n        // We need to check solvency because longs increase the system's exposure.\\n        if (!_isSolvent(_vaultSharePrice)) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // Distribute the excess idle to the withdrawal pool. If the distribute\\n        // excess idle calculation fails, we revert to avoid putting the system\\n        // in an unhealthy state after the trade is processed.\\n        bool success = _distributeExcessIdleSafe(_vaultSharePrice);\\n        if (!success) {\\n            revert IHyperdrive.DistributeExcessIdleFailed();\\n        }\\n    }\\n\\n    /// @dev Applies the trading deltas from a closed long to the reserves and\\n    ///      the withdrawal pool.\\n    /// @param _bondAmount The amount of longs that were closed.\\n    /// @param _bondReservesDelta The bonds to add to the reserves.\\n    /// @param _shareReservesDelta The shares to remove from the reserves.\\n    /// @param _shareAdjustmentDelta The amount to decrease the share adjustment.\\n    /// @param _maturityTime The maturity time of the long.\\n    function _applyCloseLong(\\n        uint256 _bondAmount,\\n        uint256 _bondReservesDelta,\\n        uint256 _shareReservesDelta,\\n        int256 _shareAdjustmentDelta,\\n        uint256 _maturityTime\\n    ) internal {\\n        // The share reserves are decreased in this operation, so we need to\\n        // verify the invariant that z >= z_min is satisfied.\\n        uint256 shareReserves = _marketState.shareReserves;\\n        if (\\n            shareReserves < _shareReservesDelta ||\\n            shareReserves - _shareReservesDelta < _minimumShareReserves\\n        ) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n        unchecked {\\n            shareReserves -= _shareReservesDelta;\\n        }\\n\\n        // If the effective share reserves are decreasing, then we need to\\n        // verify that z - zeta >= z_min is satisfied.\\n        //\\n        // NOTE: Avoiding this check when the effective share reserves aren't\\n        // decreasing is important since `removeLiquidity` can result in an\\n        // effective share reserves less than the minimum share reserves, and\\n        // it's important that this doesn't result in failed checkpoints.\\n        int256 shareAdjustment = _marketState.shareAdjustment;\\n        shareAdjustment -= _shareAdjustmentDelta;\\n        if (\\n            _shareReservesDelta.toInt256() > _shareAdjustmentDelta &&\\n            HyperdriveMath.calculateEffectiveShareReserves(\\n                shareReserves,\\n                shareAdjustment\\n            ) <\\n            _minimumShareReserves\\n        ) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // Update the long average maturity time.\\n        uint256 longsOutstanding = _marketState.longsOutstanding;\\n        _marketState.longAverageMaturityTime = uint256(\\n            _marketState.longAverageMaturityTime\\n        )\\n            .updateWeightedAverage(\\n                longsOutstanding,\\n                _maturityTime * ONE, // scale up to fixed point scale\\n                _bondAmount,\\n                false\\n            )\\n            .toUint128();\\n\\n        // Reduce the amount of outstanding longs.\\n        longsOutstanding -= _bondAmount;\\n        _marketState.longsOutstanding = longsOutstanding.toUint128();\\n\\n        // Apply the updates from the curve and flat components of the trade to\\n        // the reserves. The share proceeds are added to the share reserves\\n        // since the LPs are buying bonds for shares.  The bond reserves are\\n        // increased by the curve component to decrease the spot price. The\\n        // share adjustment is increased by the flat component of the share\\n        // reserves update so that we can translate the curve to hold the\\n        // pricing invariant under the flat update.\\n        _marketState.shareReserves = shareReserves.toUint128();\\n        _marketState.shareAdjustment = shareAdjustment.toInt128();\\n        _marketState.bondReserves += _bondReservesDelta.toUint128();\\n    }\\n\\n    /// @dev Calculate the pool reserve and trader deltas that result from\\n    ///      opening a long. This calculation includes trading fees.\\n    /// @param _shareAmount The amount of shares being paid to open the long.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return shareReservesDelta The change in the share reserves.\\n    /// @return bondReservesDelta The change in the bond reserves.\\n    /// @return totalGovernanceFee The governance fee in shares.\\n    /// @return spotPrice The pool's current spot price.\\n    function _calculateOpenLong(\\n        uint256 _shareAmount,\\n        uint256 _vaultSharePrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 shareReservesDelta,\\n            uint256 bondReservesDelta,\\n            uint256 totalGovernanceFee,\\n            uint256 spotPrice\\n        )\\n    {\\n        // Calculate the effect that opening the long should have on the pool's\\n        // reserves as well as the amount of bond the trader receives.\\n        uint256 effectiveShareReserves = _effectiveShareReserves();\\n        bondReservesDelta = HyperdriveMath.calculateOpenLong(\\n            effectiveShareReserves,\\n            _marketState.bondReserves,\\n            _shareAmount, // amountIn\\n            _timeStretch,\\n            _vaultSharePrice,\\n            _initialVaultSharePrice\\n        );\\n\\n        // Ensure that the trader didn't purchase bonds at a negative interest\\n        // rate after accounting for fees.\\n        spotPrice = HyperdriveMath.calculateSpotPrice(\\n            effectiveShareReserves,\\n            _marketState.bondReserves,\\n            _initialVaultSharePrice,\\n            _timeStretch\\n        );\\n        if (\\n            _isNegativeInterest(\\n                _shareAmount,\\n                bondReservesDelta,\\n                HyperdriveMath.calculateOpenLongMaxSpotPrice(\\n                    spotPrice,\\n                    _curveFee,\\n                    _flatFee\\n                )\\n            )\\n        ) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // Calculate the fees paid to open the long and apply these fees to the\\n        // reserves deltas.\\n        (\\n            shareReservesDelta,\\n            bondReservesDelta,\\n            totalGovernanceFee\\n        ) = _calculateOpenLongFees(\\n            _shareAmount,\\n            bondReservesDelta,\\n            _vaultSharePrice,\\n            spotPrice\\n        );\\n\\n        // Ensure that the ending spot price is less than or equal to one.\\n        // Despite the fact that the earlier negative interest check should\\n        // imply this, we perform this check out of an abundance of caution\\n        // since the `pow` function is known to not be monotonic.\\n        if (\\n            HyperdriveMath.calculateSpotPrice(\\n                effectiveShareReserves + shareReservesDelta,\\n                _marketState.bondReserves - bondReservesDelta,\\n                _initialVaultSharePrice,\\n                _timeStretch\\n            ) > ONE\\n        ) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        return (\\n            shareReservesDelta,\\n            bondReservesDelta,\\n            totalGovernanceFee,\\n            spotPrice\\n        );\\n    }\\n\\n    /// @dev Calculate the pool reserve and trader deltas that result from\\n    ///      closing a long. This calculation includes trading fees.\\n    /// @param _bondAmount The amount of bonds being purchased to close the short.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _maturityTime The maturity time of the short position.\\n    /// @return bondReservesDelta The bonds added to the reserves.\\n    /// @return shareProceeds The proceeds in shares of selling the bonds.\\n    /// @return shareReservesDelta The shares removed from the reserves.\\n    /// @return shareAdjustmentDelta The change in the share adjustment.\\n    /// @return totalGovernanceFee The governance fee in shares.\\n    function _calculateCloseLong(\\n        uint256 _bondAmount,\\n        uint256 _vaultSharePrice,\\n        uint256 _maturityTime\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 bondReservesDelta,\\n            uint256 shareProceeds,\\n            uint256 shareReservesDelta,\\n            int256 shareAdjustmentDelta,\\n            uint256 totalGovernanceFee,\\n            uint256 spotPrice\\n        )\\n    {\\n        // Calculate the effect that closing the long should have on the pool's\\n        // reserves as well as the amount of shares the trader receives for\\n        // selling their bonds.\\n        uint256 shareCurveDelta;\\n        {\\n            // Calculate the effect that closing the long should have on the\\n            // pool's reserves as well as the amount of shares the trader\\n            // receives for selling the bonds at the market price.\\n            //\\n            // NOTE: We calculate the time remaining from the latest checkpoint\\n            // to ensure that opening/closing a position doesn't result in\\n            // immediate profit.\\n            uint256 effectiveShareReserves = _effectiveShareReserves();\\n            uint256 timeRemaining = _calculateTimeRemaining(_maturityTime);\\n            uint256 vaultSharePrice = _vaultSharePrice; // avoid stack-too-deep\\n            uint256 bondAmount = _bondAmount; // avoid stack-too-deep\\n            (shareCurveDelta, bondReservesDelta, shareProceeds) = HyperdriveMath\\n                .calculateCloseLong(\\n                    effectiveShareReserves,\\n                    _marketState.bondReserves,\\n                    bondAmount,\\n                    timeRemaining,\\n                    _timeStretch,\\n                    vaultSharePrice,\\n                    _initialVaultSharePrice\\n                );\\n\\n            // Calculate the fees that should be paid by the trader. The trader\\n            // pays a fee on the curve and flat parts of the trade. Most of the\\n            // fees go the LPs, but a portion goes to governance.\\n            uint256 curveFee;\\n            uint256 governanceCurveFee;\\n            uint256 flatFee;\\n            spotPrice = HyperdriveMath.calculateSpotPrice(\\n                effectiveShareReserves,\\n                _marketState.bondReserves,\\n                _initialVaultSharePrice,\\n                _timeStretch\\n            );\\n            (\\n                curveFee, // shares\\n                flatFee, // shares\\n                governanceCurveFee, // shares\\n                totalGovernanceFee // shares\\n            ) = _calculateFeesGivenBonds(\\n                bondAmount,\\n                timeRemaining,\\n                spotPrice,\\n                vaultSharePrice\\n            );\\n\\n            // The curve fee (shares) is paid to the LPs, so we subtract it from\\n            // the share curve delta (shares) to prevent it from being debited\\n            // from the reserves when the state is updated. The governance curve\\n            // fee (shares) is paid to governance, so we add it back to the\\n            // share curve delta (shares) to ensure that the governance fee\\n            // isn't included in the share adjustment.\\n            shareCurveDelta -= (curveFee - governanceCurveFee);\\n\\n            // The trader pays the curve fee (shares) and flat fee (shares) to\\n            // the pool, so we debit them from the trader's share proceeds\\n            // (shares).\\n            shareProceeds -= curveFee + flatFee;\\n\\n            // We applied the full curve and flat fees to the share proceeds,\\n            // which reduce the trader's proceeds. To calculate the payment that\\n            // is applied to the share reserves (and is effectively paid by the\\n            // LPs), we need to add governance's portion of these fees to the\\n            // share proceeds.\\n            shareReservesDelta = shareProceeds + totalGovernanceFee;\\n        }\\n\\n        // Adjust the computed proceeds and delta for negative interest.\\n        // We also compute the share adjustment delta at this step to ensure\\n        // that we don't break our AMM invariant when we account for negative\\n        // interest and flat adjustments.\\n        (\\n            shareProceeds,\\n            shareReservesDelta,\\n            shareCurveDelta,\\n            shareAdjustmentDelta,\\n            totalGovernanceFee\\n        ) = HyperdriveMath.calculateNegativeInterestOnClose(\\n            shareProceeds,\\n            shareReservesDelta,\\n            shareCurveDelta,\\n            totalGovernanceFee,\\n            // NOTE: We use the vault share price from the beginning of the\\n            // checkpoint as the open vault share price. This means that a\\n            // trader that opens a long in a checkpoint that has negative\\n            // interest accrued will be penalized for the negative interest when\\n            // they try to close their position. The `_minVaultSharePrice`\\n            // parameter allows traders to protect themselves from this edge\\n            // case.\\n            _checkpoints[_maturityTime - _positionDuration].vaultSharePrice, // open vault share price\\n            block.timestamp < _maturityTime\\n                ? _vaultSharePrice\\n                : _checkpoints[_maturityTime].vaultSharePrice, // close vault share price\\n            true\\n        );\\n\\n        return (\\n            bondReservesDelta,\\n            shareProceeds,\\n            shareReservesDelta,\\n            shareAdjustmentDelta,\\n            totalGovernanceFee,\\n            spotPrice\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveLP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveEvents } from \\\"../interfaces/IHyperdriveEvents.sol\\\";\\nimport { AssetId } from \\\"../libraries/AssetId.sol\\\";\\nimport { FixedPointMath } from \\\"../libraries/FixedPointMath.sol\\\";\\nimport { HyperdriveMath } from \\\"../libraries/HyperdriveMath.sol\\\";\\nimport { LPMath } from \\\"../libraries/LPMath.sol\\\";\\nimport { SafeCast } from \\\"../libraries/SafeCast.sol\\\";\\nimport { HyperdriveBase } from \\\"./HyperdriveBase.sol\\\";\\nimport { HyperdriveMultiToken } from \\\"./HyperdriveMultiToken.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveLP\\n/// @notice Implements the LP accounting for Hyperdrive.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveLP is\\n    IHyperdriveEvents,\\n    HyperdriveBase,\\n    HyperdriveMultiToken\\n{\\n    using FixedPointMath for uint256;\\n    using FixedPointMath for int256;\\n    using LPMath for LPMath.PresentValueParams;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Allows the first LP to initialize the market with a target APR.\\n    /// @param _contribution The amount of capital to supply. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _apr The target APR.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return lpShares The initial number of LP shares created.\\n    function _initialize(\\n        uint256 _contribution,\\n        uint256 _apr,\\n        IHyperdrive.Options calldata _options\\n    ) internal nonReentrant returns (uint256 lpShares) {\\n        // Check that the message value and base amount are valid.\\n        _checkMessageValue();\\n\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Ensure that the pool hasn't been initialized yet.\\n        if (_marketState.isInitialized) {\\n            revert IHyperdrive.PoolAlreadyInitialized();\\n        }\\n\\n        // Deposit the users contribution and get the amount of shares that\\n        // their contribution was worth.\\n        (uint256 shareContribution, uint256 vaultSharePrice) = _deposit(\\n            _contribution,\\n            _options\\n        );\\n\\n        // Ensure that the contribution is large enough to set aside the minimum\\n        // share reserves permanently. After initialization, none of the LPs\\n        // will have a claim on the minimum share reserves, and longs and shorts\\n        // will not be able to consume this liquidity. This ensures that the\\n        // share reserves are always greater than zero, which prevents a host of\\n        // numerical issues when we are updating the reserves during normal\\n        // operations. As an additional precaution, we will also set aside an\\n        // amount of shares equaling the minimum share reserves as the initial\\n        // LP contribution from the zero address. This ensures that the total\\n        // LP supply will always be greater than or equal to the minimum share\\n        // reserves, which is helping for preventing donation attacks and other\\n        // numerical issues.\\n        if (shareContribution < 2 * _minimumShareReserves) {\\n            revert IHyperdrive.BelowMinimumContribution();\\n        }\\n        unchecked {\\n            lpShares = shareContribution - 2 * _minimumShareReserves;\\n        }\\n\\n        // Set the initialized state to true.\\n        _marketState.isInitialized = true;\\n\\n        // Calculate the initial reserves. We ensure that the effective share\\n        // reserves is larger than the minimum share reserves. This ensures that\\n        // round-trip properties hold after the pool is initialized.\\n        (\\n            uint256 shareReserves,\\n            int256 shareAdjustment,\\n            uint256 bondReserves\\n        ) = LPMath.calculateInitialReserves(\\n                shareContribution,\\n                vaultSharePrice,\\n                _initialVaultSharePrice,\\n                _apr,\\n                _positionDuration,\\n                _timeStretch\\n            );\\n        if (\\n            HyperdriveMath.calculateEffectiveShareReserves(\\n                shareReserves,\\n                shareAdjustment\\n            ) < _minimumShareReserves\\n        ) {\\n            revert IHyperdrive.InvalidEffectiveShareReserves();\\n        }\\n\\n        // Check to see whether or not the initial liquidity will result in\\n        // invalid price discovery. If the spot price can't be brought to one,\\n        // we revert to avoid dangerous pool states.\\n        (\\n            int256 solvencyAfterMaxLong,\\n            bool success\\n        ) = _calculateSolvencyAfterMaxLongSafe(\\n                shareReserves,\\n                shareAdjustment,\\n                bondReserves,\\n                vaultSharePrice,\\n                0,\\n                0\\n            );\\n        if (!success || solvencyAfterMaxLong < 0) {\\n            revert IHyperdrive.CircuitBreakerTriggered();\\n        }\\n\\n        // Initialize the reserves.\\n        _marketState.shareReserves = shareReserves.toUint128();\\n        _marketState.shareAdjustment = shareAdjustment.toInt128();\\n        _marketState.bondReserves = bondReserves.toUint128();\\n\\n        // Mint the minimum share reserves to the zero address as a buffer that\\n        // ensures that the total LP supply is always greater than or equal to\\n        // the minimum share reserves. The initializer will receive slightly\\n        // less shares than they contributed to cover the shares set aside as a\\n        // buffer on the share reserves and the shares set aside for the zero\\n        // address, but this is a small price to pay for the added security\\n        // in practice.\\n        _mint(AssetId._LP_ASSET_ID, address(0), _minimumShareReserves);\\n        _mint(AssetId._LP_ASSET_ID, _options.destination, lpShares);\\n\\n        // Create an initial checkpoint.\\n        _applyCheckpoint(\\n            _latestCheckpoint(),\\n            vaultSharePrice,\\n            LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n            true\\n        );\\n\\n        // Emit an Initialize event.\\n        uint256 contribution = _contribution; // avoid stack-too-deep\\n        uint256 apr = _apr; // avoid stack-too-deep\\n        IHyperdrive.Options calldata options = _options; // avoid stack-too-deep\\n        emit Initialize(\\n            options.destination,\\n            lpShares,\\n            contribution,\\n            vaultSharePrice,\\n            options.asBase,\\n            apr,\\n            options.extraData\\n        );\\n\\n        return lpShares;\\n    }\\n\\n    /// @dev Allows LPs to supply liquidity for LP shares.\\n    /// @param _contribution The amount of capital to supply. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _minLpSharePrice The minimum LP share price the LP is willing\\n    ///        to accept for their shares. LPs incur negative slippage when\\n    ///        adding liquidity if there is a net curve position in the market,\\n    ///        so this allows LPs to protect themselves from high levels of\\n    ///        slippage. The units of this quantity are either base or vault\\n    ///        shares, depending on the value of `_options.asBase`.\\n    /// @param _minApr The minimum APR at which the LP is willing to supply.\\n    /// @param _maxApr The maximum APR at which the LP is willing to supply.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return lpShares The number of LP tokens created.\\n    function _addLiquidity(\\n        uint256 _contribution,\\n        uint256 _minLpSharePrice,\\n        uint256 _minApr,\\n        uint256 _maxApr,\\n        IHyperdrive.Options calldata _options\\n    ) internal nonReentrant isNotPaused returns (uint256 lpShares) {\\n        // Check that the message value is valid.\\n        _checkMessageValue();\\n\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Ensure that the contribution is greater than or equal to the minimum\\n        // transaction amount.\\n        if (_contribution < _minimumTransactionAmount) {\\n            revert IHyperdrive.MinimumTransactionAmount();\\n        }\\n\\n        // Enforce the slippage guard.\\n        uint256 apr = HyperdriveMath.calculateSpotAPR(\\n            _effectiveShareReserves(),\\n            _marketState.bondReserves,\\n            _initialVaultSharePrice,\\n            _positionDuration,\\n            _timeStretch\\n        );\\n        if (apr < _minApr || apr > _maxApr) {\\n            revert IHyperdrive.InvalidApr();\\n        }\\n\\n        // Deposit for the user, this call also transfers from them\\n        (uint256 shareContribution, uint256 vaultSharePrice) = _deposit(\\n            _contribution,\\n            _options\\n        );\\n\\n        // Perform a checkpoint.\\n        uint256 latestCheckpoint = _latestCheckpoint();\\n        _applyCheckpoint(\\n            latestCheckpoint,\\n            vaultSharePrice,\\n            LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n            true\\n        );\\n\\n        // Calculate the solvency after opening a max long before applying the\\n        // add liquidity updates. This is a benchmark for the pool's current\\n        // price discovery. Adding liquidity should not negatively impact price\\n        // discovery.\\n        (\\n            int256 solvencyAfterMaxLongBefore,\\n            bool success\\n        ) = _calculateSolvencyAfterMaxLongSafe(\\n                _marketState.shareReserves,\\n                _marketState.shareAdjustment,\\n                _marketState.bondReserves,\\n                vaultSharePrice,\\n                _marketState.longExposure,\\n                _nonNettedLongs(latestCheckpoint + _positionDuration)\\n            );\\n        if (!success) {\\n            revert IHyperdrive.CircuitBreakerTriggered();\\n        }\\n\\n        // Ensure that the spot APR is close enough to the previous weighted\\n        // spot price to fall within the tolerance.\\n        uint256 contribution = _contribution; // avoid stack-too-deep\\n        {\\n            uint256 previousWeightedSpotAPR = HyperdriveMath\\n                .calculateAPRFromPrice(\\n                    _checkpoints[latestCheckpoint - _checkpointDuration]\\n                        .weightedSpotPrice,\\n                    _positionDuration\\n                );\\n            if (\\n                apr > previousWeightedSpotAPR + _circuitBreakerDelta ||\\n                (previousWeightedSpotAPR > _circuitBreakerDelta &&\\n                    apr < previousWeightedSpotAPR - _circuitBreakerDelta)\\n            ) {\\n                revert IHyperdrive.CircuitBreakerTriggered();\\n            }\\n        }\\n\\n        // Get the initial value for the total LP supply and the total supply\\n        // of withdrawal shares before the liquidity is added. The total LP\\n        // supply is given by `l = l_a + l_w - l_r` where `l_a` is the total\\n        // supply of active LP shares, `l_w` is the total supply of withdrawal\\n        // shares, and `l_r` is the amount of withdrawal shares ready for\\n        // withdrawal.\\n        uint256 withdrawalSharesOutstanding = _totalSupply[\\n            AssetId._WITHDRAWAL_SHARE_ASSET_ID\\n        ] - _withdrawPool.readyToWithdraw;\\n        uint256 lpTotalSupply = _totalSupply[AssetId._LP_ASSET_ID] +\\n            withdrawalSharesOutstanding;\\n\\n        // Calculate the number of LP shares to mint.\\n        uint256 endingPresentValue;\\n        uint256 startingPresentValue;\\n        {\\n            // Calculate the present value before updating the reserves.\\n            LPMath.PresentValueParams memory params = _getPresentValueParams(\\n                vaultSharePrice\\n            );\\n            startingPresentValue = LPMath.calculatePresentValue(params);\\n\\n            // Add the liquidity to the pool's reserves and calculate the new\\n            // present value.\\n            _updateLiquidity(shareContribution.toInt256());\\n            params.shareReserves = _marketState.shareReserves;\\n            params.shareAdjustment = _marketState.shareAdjustment;\\n            params.bondReserves = _marketState.bondReserves;\\n            endingPresentValue = LPMath.calculatePresentValue(params);\\n\\n            // Revert if the present value decreased after adding liquidity.\\n            if (endingPresentValue < startingPresentValue) {\\n                revert IHyperdrive.DecreasedPresentValueWhenAddingLiquidity();\\n            }\\n\\n            // NOTE: Round down to underestimate the amount of LP shares minted.\\n            //\\n            // The LP shares minted to the LP is derived by solving for the\\n            // change in LP shares that preserves the ratio of present value to\\n            // total LP shares. This ensures that LPs are fairly rewarded for\\n            // adding liquidity. This is given by:\\n            //\\n            // PV0 / l0 = PV1 / (l0 + dl) => dl = ((PV1 - PV0) * l0) / PV0\\n            lpShares = (endingPresentValue - startingPresentValue).mulDivDown(\\n                lpTotalSupply,\\n                startingPresentValue\\n            );\\n\\n            // Ensure that enough lp shares are minted so that they can be redeemed.\\n            if (lpShares < _minimumTransactionAmount) {\\n                revert IHyperdrive.MinimumTransactionAmount();\\n            }\\n        }\\n\\n        // NOTE: Round down to make the check more conservative.\\n        //\\n        // Enforce the minimum LP share price slippage guard.\\n        if (contribution.divDown(lpShares) < _minLpSharePrice) {\\n            revert IHyperdrive.OutputLimit();\\n        }\\n\\n        // Mint LP shares to the supplier.\\n        _mint(AssetId._LP_ASSET_ID, _options.destination, lpShares);\\n\\n        // Distribute the excess idle to the withdrawal pool. If the distribute\\n        // excess idle calculation fails, we revert to avoid allowing the system\\n        // to enter an unhealthy state. A failure indicates that the present\\n        // value can't be calculated.\\n        success = _distributeExcessIdleSafe(vaultSharePrice);\\n        if (!success) {\\n            revert IHyperdrive.DistributeExcessIdleFailed();\\n        }\\n\\n        // Check to see whether or not adding this liquidity will result in\\n        // worsened price discovery. If the spot price can't be brought to one\\n        // and price discovery worsened after adding liquidity, we revert to\\n        // avoid dangerous pool states.\\n        uint256 latestCheckpoint_ = latestCheckpoint; // avoid stack-too-deep\\n        uint256 lpShares_ = lpShares; // avoid stack-too-deep\\n        IHyperdrive.Options calldata options = _options; // avoid stack-too-deep\\n        uint256 vaultSharePrice_ = vaultSharePrice; // avoid stack-too-deep\\n        int256 solvencyAfterMaxLongAfter;\\n        (\\n            solvencyAfterMaxLongAfter,\\n            success\\n        ) = _calculateSolvencyAfterMaxLongSafe(\\n            _marketState.shareReserves,\\n            _marketState.shareAdjustment,\\n            _marketState.bondReserves,\\n            vaultSharePrice_,\\n            _marketState.longExposure,\\n            _nonNettedLongs(latestCheckpoint_ + _positionDuration)\\n        );\\n        if (\\n            !success ||\\n            solvencyAfterMaxLongAfter < solvencyAfterMaxLongBefore.min(0)\\n        ) {\\n            revert IHyperdrive.CircuitBreakerTriggered();\\n        }\\n\\n        // Emit an AddLiquidity event.\\n        uint256 lpSharePrice = lpTotalSupply == 0\\n            ? 0 // NOTE: We always round the LP share price down for consistency.\\n            : startingPresentValue.mulDivDown(vaultSharePrice_, lpTotalSupply);\\n        emit AddLiquidity(\\n            options.destination,\\n            lpShares_,\\n            contribution,\\n            vaultSharePrice_,\\n            options.asBase,\\n            lpSharePrice,\\n            options.extraData\\n        );\\n    }\\n\\n    /// @dev Allows an LP to burn shares and withdraw from the pool.\\n    /// @param _lpShares The LP shares to burn.\\n    /// @param _minOutputPerShare The minimum amount the LP expects to receive\\n    ///        for each withdrawal share that is burned. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return proceeds The amount the LP removing liquidity receives. The\\n    ///        units of this quantity are either base or vault shares, depending\\n    ///        on the value of `_options.asBase`.\\n    /// @return withdrawalShares The base that the LP receives buys out some of\\n    ///         their LP shares, but it may not be sufficient to fully buy the\\n    ///         LP out. In this case, the LP receives withdrawal shares equal\\n    ///         in value to the present value they are owed. As idle capital\\n    ///         becomes available, the pool will buy back these shares.\\n    function _removeLiquidity(\\n        uint256 _lpShares,\\n        uint256 _minOutputPerShare,\\n        IHyperdrive.Options calldata _options\\n    )\\n        internal\\n        nonReentrant\\n        returns (uint256 proceeds, uint256 withdrawalShares)\\n    {\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Ensure that the amount of LP shares to remove is greater than or\\n        // equal to the minimum transaction amount.\\n        if (_lpShares < _minimumTransactionAmount) {\\n            revert IHyperdrive.MinimumTransactionAmount();\\n        }\\n\\n        // Perform a checkpoint.\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        _applyCheckpoint(\\n            _latestCheckpoint(),\\n            vaultSharePrice,\\n            LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n            true\\n        );\\n\\n        // Burn the LP's shares.\\n        _burn(AssetId._LP_ASSET_ID, msg.sender, _lpShares);\\n\\n        // Mint an equivalent amount of withdrawal shares.\\n        _mint(\\n            AssetId._WITHDRAWAL_SHARE_ASSET_ID,\\n            _options.destination,\\n            _lpShares\\n        );\\n\\n        // Redeem as many of the withdrawal shares as possible.\\n        uint256 withdrawalSharesRedeemed;\\n        (proceeds, withdrawalSharesRedeemed) = _redeemWithdrawalSharesInternal(\\n            _options.destination,\\n            _lpShares,\\n            vaultSharePrice,\\n            _minOutputPerShare,\\n            _options\\n        );\\n        withdrawalShares = _lpShares - withdrawalSharesRedeemed;\\n\\n        // Emit a RemoveLiquidity event. If the LP share price calculation\\n        // fails, we proceed in removing liquidity and just emit the LP share\\n        // price as zero. This ensures that the system's liveness isn't impacted\\n        // by temporarily being unable to calculate the present value.\\n        (uint256 lpSharePrice, ) = _calculateLPSharePriceSafe(vaultSharePrice);\\n        emit RemoveLiquidity(\\n            msg.sender, // provider\\n            _options.destination, // destination\\n            _lpShares,\\n            proceeds,\\n            vaultSharePrice,\\n            _options.asBase,\\n            uint256(withdrawalShares),\\n            lpSharePrice,\\n            _options.extraData\\n        );\\n\\n        return (proceeds, withdrawalShares);\\n    }\\n\\n    /// @dev Redeems withdrawal shares by giving the LP a pro-rata amount of the\\n    ///      withdrawal pool's proceeds. This function redeems the maximum\\n    ///      amount of the specified withdrawal shares given the amount of\\n    ///      withdrawal shares ready to withdraw.\\n    /// @param _withdrawalShares The withdrawal shares to redeem.\\n    /// @param _minOutputPerShare The minimum amount the LP expects to\\n    ///        receive for each withdrawal share that is burned. The units of\\n    ///        this quantity are either base or vault shares, depending on the\\n    ///        value of `_options.asBase`.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return proceeds The amount the LP received. The units of this quantity\\n    ///         are either base or vault shares, depending on the value of\\n    ///         `_options.asBase`.\\n    /// @return withdrawalSharesRedeemed The amount of withdrawal shares that\\n    ///         were redeemed.\\n    function _redeemWithdrawalShares(\\n        uint256 _withdrawalShares,\\n        uint256 _minOutputPerShare,\\n        IHyperdrive.Options calldata _options\\n    )\\n        internal\\n        nonReentrant\\n        returns (uint256 proceeds, uint256 withdrawalSharesRedeemed)\\n    {\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Perform a checkpoint.\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        _applyCheckpoint(\\n            _latestCheckpoint(),\\n            vaultSharePrice,\\n            LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n            true\\n        );\\n\\n        // Redeem as many of the withdrawal shares as possible.\\n        (proceeds, withdrawalSharesRedeemed) = _redeemWithdrawalSharesInternal(\\n            msg.sender,\\n            _withdrawalShares,\\n            vaultSharePrice,\\n            _minOutputPerShare,\\n            _options\\n        );\\n\\n        // Emit a RedeemWithdrawalShares event.\\n        emit RedeemWithdrawalShares(\\n            msg.sender, // provider\\n            _options.destination, // destination\\n            withdrawalSharesRedeemed,\\n            proceeds,\\n            vaultSharePrice,\\n            _options.asBase,\\n            _options.extraData\\n        );\\n\\n        return (proceeds, withdrawalSharesRedeemed);\\n    }\\n\\n    /// @dev Redeems withdrawal shares by giving the LP a pro-rata amount of the\\n    ///      withdrawal pool's proceeds. This function redeems the maximum\\n    ///      amount of the specified withdrawal shares given the amount of\\n    ///      withdrawal shares ready to withdraw.\\n    /// @param _source The address that owns the withdrawal shares to redeem.\\n    /// @param _withdrawalShares The withdrawal shares to redeem.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _minOutputPerShare The minimum amount the LP expects to\\n    ///        receive for each withdrawal share that is burned. The units of\\n    ///        this quantity are either base or vault shares, depending on the\\n    ///        value of `_options.asBase`.\\n    /// @param _options The options that configure how the operation is settled.\\n    /// @return proceeds The amount the LP received. The units of this quantity\\n    ///         are either base or vault shares, depending on the value of\\n    ///         `_options.asBase`.\\n    /// @return withdrawalSharesRedeemed The amount of withdrawal shares that\\n    ///         were redeemed.\\n    function _redeemWithdrawalSharesInternal(\\n        address _source,\\n        uint256 _withdrawalShares,\\n        uint256 _vaultSharePrice,\\n        uint256 _minOutputPerShare,\\n        IHyperdrive.Options calldata _options\\n    ) internal returns (uint256 proceeds, uint256 withdrawalSharesRedeemed) {\\n        // Distribute the excess idle to the withdrawal pool. If the distribute\\n        // excess idle calculation fails, we proceed with the calculation since\\n        // LPs should be able to redeem their withdrawal shares for existing\\n        // withdrawal proceeds regardless of whether or not idle could be\\n        // distributed.\\n        _distributeExcessIdleSafe(_vaultSharePrice);\\n\\n        // Clamp the shares to the total amount of shares ready for withdrawal\\n        // to avoid unnecessary reverts. We exit early if the user has no shares\\n        // available to redeem.\\n        withdrawalSharesRedeemed = _withdrawalShares;\\n        uint128 readyToWithdraw_ = _withdrawPool.readyToWithdraw;\\n        if (withdrawalSharesRedeemed > readyToWithdraw_) {\\n            withdrawalSharesRedeemed = readyToWithdraw_;\\n        }\\n        if (withdrawalSharesRedeemed == 0) return (0, 0);\\n\\n        // We burn the shares from the user.\\n        _burn(\\n            AssetId._WITHDRAWAL_SHARE_ASSET_ID,\\n            _source,\\n            withdrawalSharesRedeemed\\n        );\\n\\n        // NOTE: Round down to underestimate the share proceeds.\\n        //\\n        // The LP gets the pro-rata amount of the collected proceeds.\\n        uint256 shareProceeds = withdrawalSharesRedeemed.mulDivDown(\\n            _withdrawPool.proceeds,\\n            readyToWithdraw_\\n        );\\n\\n        // Apply the update to the withdrawal pool.\\n        _withdrawPool.readyToWithdraw =\\n            readyToWithdraw_ -\\n            withdrawalSharesRedeemed.toUint128();\\n        _withdrawPool.proceeds -= shareProceeds.toUint128();\\n\\n        // Withdraw the share proceeds to the user.\\n        proceeds = _withdraw(shareProceeds, _vaultSharePrice, _options);\\n\\n        // NOTE: Round up to make the check more conservative.\\n        //\\n        // Enforce the minimum user output per share.\\n        if (proceeds < _minOutputPerShare.mulUp(withdrawalSharesRedeemed)) {\\n            revert IHyperdrive.OutputLimit();\\n        }\\n\\n        return (proceeds, withdrawalSharesRedeemed);\\n    }\\n\\n    /// @dev Distribute as much of the excess idle as possible to the withdrawal\\n    ///      pool while holding the LP share price constant.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @return A failure flag indicating if the calculation succeeded.\\n    function _distributeExcessIdleSafe(\\n        uint256 _vaultSharePrice\\n    ) internal returns (bool) {\\n        return\\n            _distributeExcessIdleSafe(\\n                _vaultSharePrice,\\n                LPMath.SHARE_PROCEEDS_MAX_ITERATIONS\\n            );\\n    }\\n\\n    /// @dev Distribute as much of the excess idle as possible to the withdrawal\\n    ///      pool while holding the LP share price constant.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _maxIterations The number of iterations to use in the Newton's\\n    ///        method component of `_distributeExcessIdleSafe`. This defaults to\\n    ///        `LPMath.SHARE_PROCEEDS_MAX_ITERATIONS` if the specified value is\\n    ///        smaller than the constant.\\n    /// @return A failure flag indicating if the calculation succeeded.\\n    function _distributeExcessIdleSafe(\\n        uint256 _vaultSharePrice,\\n        uint256 _maxIterations\\n    ) internal returns (bool) {\\n        // If there are no withdrawal shares, then there is nothing to\\n        // distribute.\\n        uint256 withdrawalSharesTotalSupply = _totalSupply[\\n            AssetId._WITHDRAWAL_SHARE_ASSET_ID\\n        ] - _withdrawPool.readyToWithdraw;\\n        if (withdrawalSharesTotalSupply == 0) {\\n            return true;\\n        }\\n\\n        // If there is no excess idle, then there is nothing to distribute.\\n        uint256 idle = _calculateIdleShareReserves(_vaultSharePrice);\\n        if (idle == 0) {\\n            return true;\\n        }\\n\\n        // Get the distribute excess idle parameters. If this fails for some\\n        // we return a failure flag so that the caller can handle the failure.\\n        (\\n            LPMath.DistributeExcessIdleParams memory params,\\n            bool success\\n        ) = _getDistributeExcessIdleParamsSafe(\\n                idle,\\n                withdrawalSharesTotalSupply,\\n                _vaultSharePrice\\n            );\\n        if (!success) {\\n            return false;\\n        }\\n\\n        // Calculate the amount of withdrawal shares that should be redeemed\\n        // and their share proceeds.\\n        (uint256 withdrawalSharesRedeemed, uint256 shareProceeds) = LPMath\\n            .calculateDistributeExcessIdle(params, _maxIterations);\\n\\n        // Remove the withdrawal pool proceeds from the reserves.\\n        success = _updateLiquiditySafe(-shareProceeds.toInt256());\\n        if (!success) {\\n            return false;\\n        }\\n\\n        // Update the withdrawal pool's state.\\n        _withdrawPool.readyToWithdraw += withdrawalSharesRedeemed.toUint128();\\n        _withdrawPool.proceeds += shareProceeds.toUint128();\\n\\n        return true;\\n    }\\n\\n    /// @dev Updates the pool's liquidity and holds the pool's spot price\\n    ///      constant.\\n    /// @param _shareReservesDelta The delta that should be applied to share\\n    ///        reserves.\\n    function _updateLiquidity(int256 _shareReservesDelta) internal {\\n        // Attempt updating the pool's liquidity and revert if the update fails.\\n        if (!_updateLiquiditySafe(_shareReservesDelta)) {\\n            revert IHyperdrive.UpdateLiquidityFailed();\\n        }\\n    }\\n\\n    /// @dev Updates the pool's liquidity and holds the pool's spot price\\n    ///      constant.\\n    /// @param _shareReservesDelta The delta that should be applied to share\\n    ///        reserves.\\n    /// @return A flag indicating if the update succeeded.\\n    function _updateLiquiditySafe(\\n        int256 _shareReservesDelta\\n    ) internal returns (bool) {\\n        // Calculate the updated reserves and return false if the calculation fails.\\n        uint256 shareReserves_ = _marketState.shareReserves;\\n        int256 shareAdjustment_ = _marketState.shareAdjustment;\\n        uint256 bondReserves_ = _marketState.bondReserves;\\n        (\\n            uint256 updatedShareReserves,\\n            int256 updatedShareAdjustment,\\n            uint256 updatedBondReserves,\\n            bool success\\n        ) = LPMath.calculateUpdateLiquiditySafe(\\n                shareReserves_,\\n                shareAdjustment_,\\n                bondReserves_,\\n                _minimumShareReserves,\\n                _shareReservesDelta\\n            );\\n        if (!success) {\\n            return false;\\n        }\\n\\n        // Update the market state and return true since the update was successful.\\n        if (updatedShareReserves != shareReserves_) {\\n            _marketState.shareReserves = updatedShareReserves.toUint128();\\n        }\\n        if (updatedShareAdjustment != shareAdjustment_) {\\n            _marketState.shareAdjustment = updatedShareAdjustment.toInt128();\\n        }\\n        if (updatedBondReserves != bondReserves_) {\\n            _marketState.bondReserves = updatedBondReserves.toUint128();\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveMultiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveEvents } from \\\"../interfaces/IHyperdriveEvents.sol\\\";\\nimport { HyperdriveBase } from \\\"./HyperdriveBase.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveMultiToken\\n/// @notice Implements the MultiToken accounting that Hyperdrive uses to track\\n///         user's positions. MultiToken maintains a set of balances and\\n///         approvals for a list of sub-tokens specified by an asset ID. This\\n///         token is mostly ERC1155 compliant; however, we remove on transfer\\n///         callbacks and safe transfer because of the risk of external calls to\\n///         untrusted code.\\n/// @dev Our architecture maintains ERC20 compatibility by allowing users to\\n///      access their balances and approvals through ERC20 forwarding contracts\\n///      deployed by the registered forwarder factory. To ensure that only the\\n///      ERC20 forwarders can call the bridge endpoints, we verify that the\\n///      create2 pre-image of the caller address is the ERC20 forwarder bytecode\\n///      and the token ID.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveMultiToken is IHyperdriveEvents, HyperdriveBase {\\n    /// @notice This modifier checks the caller is the create2 validated\\n    ///         ERC20 bridge.\\n    /// @param tokenID The internal token identifier.\\n    modifier onlyLinker(uint256 tokenID) {\\n        // If the caller does not match the address hash, we revert because it\\n        // is not allowed to access permissioned methods.\\n        if (msg.sender != _deriveForwarderAddress(tokenID)) {\\n            revert IHyperdrive.InvalidERC20Bridge();\\n        }\\n\\n        // Execute the following function.\\n        _;\\n    }\\n\\n    /// @dev Transfers several assets from one account to another.\\n    /// @param from The source account.\\n    /// @param to The destination account.\\n    /// @param ids The array of token ids of the asset to transfer.\\n    /// @param values The amount of each token to transfer.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) internal {\\n        // Checks for inconsistent addresses.\\n        if (from == address(0) || to == address(0)) {\\n            revert IHyperdrive.RestrictedZeroAddress();\\n        }\\n\\n        // Check for inconsistent length.\\n        if (ids.length != values.length) {\\n            revert IHyperdrive.BatchInputLengthMismatch();\\n        }\\n\\n        // Call internal transfer for each asset.\\n        for (uint256 i = 0; i < ids.length; ) {\\n            _transferFrom(ids[i], from, to, values[i], msg.sender);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Performs the actual transfer logic.\\n    /// @param tokenID The token identifier.\\n    /// @param from The address whose balance will be reduced.\\n    /// @param to The address whose balance will be increased.\\n    /// @param amount The amount of token to move.\\n    /// @param caller The msg.sender or the caller of the ERC20Forwarder.\\n    function _transferFrom(\\n        uint256 tokenID,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address caller\\n    ) internal {\\n        // Checks for inconsistent addresses.\\n        if (from == address(0) || to == address(0)) {\\n            revert IHyperdrive.RestrictedZeroAddress();\\n        }\\n\\n        // If the transaction sender is calling no need for further validation.\\n        if (caller != from) {\\n            // Or if the transaction sender can access all user assets, no need\\n            // for more validation.\\n            if (!_isApprovedForAll[from][caller]) {\\n                // Finally we load the per asset approval.\\n                uint256 approved = _perTokenApprovals[tokenID][from][caller];\\n                // If it is not an infinite approval\\n                if (approved != type(uint256).max) {\\n                    // Then we subtract the amount the caller wants to use\\n                    // from how much they can use, reverting on underflow.\\n                    // NOTE: This reverts without message for unapproved callers\\n                    // when debugging that's the likely source of any mystery\\n                    // reverts.\\n                    _perTokenApprovals[tokenID][from][caller] -= amount;\\n                }\\n            }\\n        }\\n\\n        // Reaching this point implies the transfer is authorized so we remove\\n        // from the source and add to the destination.\\n        _balanceOf[tokenID][from] -= amount;\\n        _balanceOf[tokenID][to] += amount;\\n        emit TransferSingle(caller, from, to, tokenID, amount);\\n    }\\n\\n    /// @notice Sets the approval for a sub-token.\\n    /// @param tokenID The asset to approve the use of.\\n    /// @param operator The address who will be able to use the tokens.\\n    /// @param amount The max tokens the approved person can use, setting to\\n    ///               uint256.max will cause the value to never decrement\\n    ///               [saving gas on transfer].\\n    /// @param caller The eth address which initiated the approval call.\\n    function _setApproval(\\n        uint256 tokenID,\\n        address operator,\\n        uint256 amount,\\n        address caller\\n    ) internal {\\n        _perTokenApprovals[tokenID][caller][operator] = amount;\\n\\n        // Emit an event to track approval.\\n        emit Approval(caller, operator, amount);\\n    }\\n\\n    /// @notice Minting function to create tokens.\\n    /// @param tokenID The asset type to create.\\n    /// @param to The address whose balance to increase.\\n    /// @param amount The number of tokens to create.\\n    /// @dev Must be used from inheriting contracts.\\n    function _mint(\\n        uint256 tokenID,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        _balanceOf[tokenID][to] += amount;\\n        _totalSupply[tokenID] += amount;\\n\\n        // Emit an event to track minting.\\n        emit TransferSingle(msg.sender, address(0), to, tokenID, amount);\\n    }\\n\\n    /// @notice Burning function to remove tokens.\\n    /// @param tokenID The asset type to remove.\\n    /// @param from The address whose balance to decrease.\\n    /// @param amount The number of tokens to remove.\\n    /// @dev Must be used from inheriting contracts.\\n    function _burn(uint256 tokenID, address from, uint256 amount) internal {\\n        // Check to see if the balance is sufficient. If it isn't, throw an\\n        // insufficient balance error.\\n        if (_balanceOf[tokenID][from] < amount) {\\n            revert IHyperdrive.InsufficientBalance();\\n        }\\n\\n        // Decrement from the source and supply.\\n        unchecked {\\n            _balanceOf[tokenID][from] -= amount;\\n        }\\n        _totalSupply[tokenID] -= amount;\\n\\n        // Emit an event to track burning.\\n        emit TransferSingle(msg.sender, from, address(0), tokenID, amount);\\n    }\\n\\n    /// @dev Allows a caller who is not the owner of an account to execute the\\n    ///      functionality of 'approve' for all assets with the owners signature.\\n    /// @param domainSeparator The EIP712 domain separator for this contract.\\n    /// @param permitTypehash The EIP712 typehash for the permit data.\\n    /// @param owner The owner of the account which is having the new approval set.\\n    /// @param spender The address which will be allowed to spend owner's tokens.\\n    /// @param _approved A boolean of the approval status to set to.\\n    /// @param deadline The timestamp which the signature must be submitted by\\n    ///        to be valid.\\n    /// @param v Extra ECDSA data which allows public key recovery from\\n    ///        signature assumed to be 27 or 28.\\n    /// @param r The r component of the ECDSA signature.\\n    /// @param s The s component of the ECDSA signature.\\n    /// @dev The signature for this function follows EIP 712 standard and should\\n    ///      be generated with the eth_signTypedData JSON RPC call instead of\\n    ///      the eth_sign JSON RPC call. If using out of date parity signing\\n    ///      libraries the v component may need to be adjusted. Also it is very\\n    ///      rare but possible for v to be other values, those values are not\\n    ///      supported.\\n    function _permitForAll(\\n        bytes32 domainSeparator,\\n        bytes32 permitTypehash,\\n        address owner,\\n        address spender,\\n        bool _approved,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        // Require that the signature is not expired.\\n        if (block.timestamp > deadline) {\\n            revert IHyperdrive.ExpiredDeadline();\\n        }\\n\\n        // Require that the owner is not zero.\\n        if (owner == address(0)) {\\n            revert IHyperdrive.RestrictedZeroAddress();\\n        }\\n\\n        // Check that the signature is valid and recovers to the owner.\\n        bytes32 structHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(\\n                    abi.encode(\\n                        permitTypehash,\\n                        owner,\\n                        spender,\\n                        _approved,\\n                        _nonces[owner],\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address signer = ecrecover(structHash, v, r, s);\\n        if (signer != owner) {\\n            revert IHyperdrive.InvalidSignature();\\n        }\\n\\n        // Increment the signature nonce.\\n        unchecked {\\n            ++_nonces[owner];\\n        }\\n\\n        // Set the state.\\n        _isApprovedForAll[owner][spender] = _approved;\\n\\n        // Emit an event to track approval.\\n        emit ApprovalForAll(owner, spender, _approved);\\n    }\\n\\n    /// @notice Derive the ERC20 forwarder address for a provided `tokenId`.\\n    /// @param tokenId Token Id of the token whose forwarder contract address\\n    ///        need to derived.\\n    /// @return Address of the ERC20 forwarder contract.\\n    function _deriveForwarderAddress(\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        // Get the salt which is used by the deploying contract.\\n        bytes32 salt = keccak256(abi.encode(address(this), tokenId));\\n\\n        // Perform the hash which determines the address of a create2 deployment.\\n        bytes32 addressBytes = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                _linkerFactory,\\n                salt,\\n                _linkerCodeHash\\n            )\\n        );\\n        return address(uint160(uint256(addressBytes)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveShort.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { IHyperdriveEvents } from \\\"../interfaces/IHyperdriveEvents.sol\\\";\\nimport { AssetId } from \\\"../libraries/AssetId.sol\\\";\\nimport { Errors } from \\\"../libraries/Errors.sol\\\";\\nimport { FixedPointMath, ONE } from \\\"../libraries/FixedPointMath.sol\\\";\\nimport { HyperdriveMath } from \\\"../libraries/HyperdriveMath.sol\\\";\\nimport { LPMath } from \\\"../libraries/LPMath.sol\\\";\\nimport { SafeCast } from \\\"../libraries/SafeCast.sol\\\";\\nimport { HyperdriveLP } from \\\"./HyperdriveLP.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveShort\\n/// @notice Implements the short accounting for Hyperdrive.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveShort is IHyperdriveEvents, HyperdriveLP {\\n    using FixedPointMath for uint256;\\n    using FixedPointMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    /// @dev Opens a short position.\\n    /// @param _bondAmount The amount of bonds to short.\\n    /// @param _maxDeposit The most the user expects to deposit for this trade.\\n    ///        The units of this quantity are either base or vault shares,\\n    ///        depending on the value of `_options.asBase`.\\n    /// @param _minVaultSharePrice The minimum vault share price at which to open\\n    ///        the short. This allows traders to protect themselves from opening\\n    ///        a short in a checkpoint where negative interest has accrued.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return The maturity time of the short.\\n    /// @return The amount the user deposited for this trade. The units of this\\n    ///         quantity are either base or vault shares, depending on the value\\n    ///         of `_options.asBase`.\\n    function _openShort(\\n        uint256 _bondAmount,\\n        uint256 _maxDeposit,\\n        uint256 _minVaultSharePrice,\\n        IHyperdrive.Options calldata _options\\n    ) internal nonReentrant isNotPaused returns (uint256, uint256) {\\n        // Check that the message value is valid.\\n        _checkMessageValue();\\n\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Ensure that the bond amount is greater than or equal to the minimum\\n        // transaction amount.\\n        if (_bondAmount < _minimumTransactionAmount) {\\n            revert IHyperdrive.MinimumTransactionAmount();\\n        }\\n\\n        // Perform a checkpoint and compute the amount of interest the short\\n        // would have received if they opened at the beginning of the checkpoint.\\n        // Since the short will receive interest from the beginning of the\\n        // checkpoint, they will receive this backdated interest back at closing.\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        if (vaultSharePrice < _minVaultSharePrice) {\\n            revert IHyperdrive.MinimumSharePrice();\\n        }\\n        uint256 latestCheckpoint = _latestCheckpoint();\\n        uint256 openVaultSharePrice = _applyCheckpoint(\\n            _latestCheckpoint(),\\n            vaultSharePrice,\\n            LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n            true\\n        );\\n\\n        // Calculate the pool and user deltas using the trading function. We\\n        // backdate the bonds sold to the beginning of the checkpoint.\\n        // Note: All state deltas are derived from the external function input.\\n        uint256 maturityTime = latestCheckpoint + _positionDuration;\\n        uint256 baseDeposit;\\n        uint256 shareReservesDelta;\\n        uint256 totalGovernanceFee;\\n        {\\n            uint256 spotPrice;\\n            (\\n                baseDeposit,\\n                shareReservesDelta,\\n                totalGovernanceFee,\\n                spotPrice\\n            ) = _calculateOpenShort(\\n                _bondAmount,\\n                vaultSharePrice,\\n                openVaultSharePrice\\n            );\\n\\n            // Attribute the governance fees.\\n            _governanceFeesAccrued += totalGovernanceFee;\\n\\n            // Update the weighted spot price.\\n            _updateWeightedSpotPrice(\\n                latestCheckpoint,\\n                block.timestamp,\\n                spotPrice\\n            );\\n        }\\n\\n        // Take custody of the trader's deposit and ensure that the trader\\n        // doesn't pay more than their max deposit. The trader's deposit is\\n        // equal to the proceeds that they would receive if they closed\\n        // immediately (without fees). Trader deposit is created to ensure that\\n        // the input to _deposit is denominated according to _options.\\n        //\\n        // NOTE: We don't check the maxDeposit against the output of deposit\\n        // because slippage from a deposit could cause a larger deposit taken\\n        // from the user to pass due to the shares being worth less after deposit.\\n        uint256 deposit = _convertToOptionFromBase(\\n            baseDeposit,\\n            vaultSharePrice,\\n            _options\\n        );\\n        if (_maxDeposit < deposit) {\\n            revert IHyperdrive.OutputLimit();\\n        }\\n        _deposit(deposit, _options);\\n\\n        // Apply the state updates caused by opening the short.\\n        // Note: Updating the state using the result using the\\n        // deltas calculated from function inputs is consistent with\\n        // openLong.\\n        uint256 bondAmount = _bondAmount; // Avoid stack too deep error.\\n        _applyOpenShort(\\n            bondAmount,\\n            shareReservesDelta,\\n            vaultSharePrice,\\n            maturityTime\\n        );\\n\\n        // Mint the short tokens to the trader.\\n        uint256 assetId = AssetId.encodeAssetId(\\n            AssetId.AssetIdPrefix.Short,\\n            maturityTime\\n        );\\n        IHyperdrive.Options calldata options = _options; // Avoid stack too deep error.\\n        _mint(assetId, options.destination, bondAmount);\\n\\n        // Emit an OpenShort event.\\n        uint256 shareReservesDelta_ = shareReservesDelta; // Avoid stack too deep error.\\n        uint256 vaultSharePrice_ = vaultSharePrice; // Avoid stack too deep error.\\n        uint256 totalGovernanceFee_ = totalGovernanceFee; // Avoid stack too deep error.\\n        emit OpenShort(\\n            options.destination,\\n            assetId,\\n            maturityTime,\\n            deposit,\\n            vaultSharePrice_,\\n            options.asBase,\\n            // NOTE: We subtract out the governance fee from the share reserves\\n            // delta since the user is responsible for paying the governance\\n            // fee.\\n            (shareReservesDelta_ - totalGovernanceFee_).mulDown(\\n                vaultSharePrice_\\n            ),\\n            bondAmount,\\n            options.extraData\\n        );\\n\\n        return (maturityTime, deposit);\\n    }\\n\\n    /// @dev Closes a short position with a specified maturity time.\\n    /// @param _maturityTime The maturity time of the short.\\n    /// @param _bondAmount The amount of shorts to close.\\n    /// @param _minOutput The minimum output of this trade. The units of this\\n    ///        quantity are either base or vault shares, depending on the value\\n    ///        of `_options.asBase`.\\n    /// @param _options The options that configure how the trade is settled.\\n    /// @return The proceeds of closing this short. The units of this quantity\\n    ///         are either base or vault shares, depending on the value of\\n    ///         `_options.asBase`.\\n    function _closeShort(\\n        uint256 _maturityTime,\\n        uint256 _bondAmount,\\n        uint256 _minOutput,\\n        IHyperdrive.Options calldata _options\\n    ) internal nonReentrant returns (uint256) {\\n        // Check that the provided options are valid.\\n        _checkOptions(_options);\\n\\n        // Ensure that the bond amount is greater than or equal to the minimum\\n        // transaction amount.\\n        if (_bondAmount < _minimumTransactionAmount) {\\n            revert IHyperdrive.MinimumTransactionAmount();\\n        }\\n\\n        // If the short hasn't matured, we checkpoint the latest checkpoint.\\n        // Otherwise, we perform a checkpoint at the time the short matured.\\n        // This ensures the short and all of the other positions in the\\n        // checkpoint are closed.\\n        uint256 vaultSharePrice = _pricePerVaultShare();\\n        if (block.timestamp < _maturityTime) {\\n            _applyCheckpoint(\\n                _latestCheckpoint(),\\n                vaultSharePrice,\\n                LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n                true\\n            );\\n        } else {\\n            _applyCheckpoint(\\n                _maturityTime,\\n                vaultSharePrice,\\n                LPMath.SHARE_PROCEEDS_MAX_ITERATIONS,\\n                true\\n            );\\n        }\\n\\n        // Burn the shorts that are being closed.\\n        _burn(\\n            AssetId.encodeAssetId(AssetId.AssetIdPrefix.Short, _maturityTime),\\n            msg.sender,\\n            _bondAmount\\n        );\\n\\n        // Calculate the changes to the reserves and the traders proceeds up\\n        // front. This will also verify that the calculated values don't break\\n        // any invariants.\\n        // Note: All state deltas are derived from the external function input.\\n        (\\n            uint256 bondReservesDelta,\\n            uint256 shareProceeds,\\n            uint256 shareReservesDelta,\\n            int256 shareAdjustmentDelta,\\n            uint256 totalGovernanceFee,\\n            uint256 spotPrice\\n        ) = _calculateCloseShort(_bondAmount, vaultSharePrice, _maturityTime);\\n\\n        // If the position hasn't matured, apply the accounting updates that\\n        // result from closing the short to the reserves and pay out the\\n        // withdrawal pool if necessary.\\n        uint256 maturityTime = _maturityTime; // Avoid stack too deep error.\\n        if (block.timestamp < _maturityTime) {\\n            // Attribute the governance fees.\\n            _governanceFeesAccrued += totalGovernanceFee;\\n\\n            // Update the weighted spot price.\\n            _updateWeightedSpotPrice(\\n                _latestCheckpoint(),\\n                block.timestamp,\\n                spotPrice\\n            );\\n\\n            // Update the pool's state to account for the short being closed.\\n            _applyCloseShort(\\n                _bondAmount,\\n                bondReservesDelta,\\n                shareReservesDelta,\\n                shareAdjustmentDelta,\\n                maturityTime\\n            );\\n\\n            // Update the global long exposure. Since we're closing a short, the\\n            // number of non-netted longs increases by the bond amount.\\n            int256 nonNettedLongs = _nonNettedLongs(_maturityTime);\\n            _updateLongExposure(\\n                nonNettedLongs - _bondAmount.toInt256(),\\n                nonNettedLongs\\n            );\\n\\n            // Ensure that the system is still solvent after closing the shorts.\\n            // Closing shorts increases the share reserves, but it also\\n            // increases the long exposure.\\n            if (!_isSolvent(vaultSharePrice)) {\\n                Errors.throwInsufficientLiquidityError();\\n            }\\n\\n            // Distribute the excess idle to the withdrawal pool. If the\\n            // distribute excess idle calculation fails, we revert to avoid\\n            // putting the system in an unhealthy state after the trade is\\n            // processed.\\n            bool success = _distributeExcessIdleSafe(vaultSharePrice);\\n            if (!success) {\\n                revert IHyperdrive.DistributeExcessIdleFailed();\\n            }\\n        } else {\\n            // Apply the zombie close to the state and adjust the share proceeds\\n            // to account for negative interest that might have accrued to the\\n            // zombie share reserves.\\n            shareProceeds = _applyZombieClose(shareProceeds, vaultSharePrice);\\n\\n            // Distribute the excess idle to the withdrawal pool. If the\\n            // distribute excess idle calculation fails, we proceed with the\\n            // calculation since traders should be able to close their positions\\n            // at maturity regardless of whether idle could be distributed.\\n            _distributeExcessIdleSafe(vaultSharePrice);\\n        }\\n\\n        // Withdraw the profit to the trader. This includes the proceeds from\\n        // the short sale as well as the variable interest that was collected\\n        // on the face value of the bonds.\\n        uint256 proceeds = _withdraw(shareProceeds, vaultSharePrice, _options);\\n\\n        // Enforce the user's minimum output.\\n        //\\n        // NOTE: We use the value that is returned from the withdraw to check\\n        // against the minOutput because in the event of slippage on the\\n        // withdraw, we want it to be caught be the minOutput check.\\n        if (proceeds < _minOutput) {\\n            revert IHyperdrive.OutputLimit();\\n        }\\n\\n        // Emit a CloseShort event.\\n        uint256 bondAmount = _bondAmount; // Avoid stack too deep error.\\n        uint256 shareReservesDelta_ = shareReservesDelta; // Avoid stack too deep error.\\n        uint256 totalGovernanceFee_ = totalGovernanceFee; // Avoid stack too deep error.\\n        uint256 vaultSharePrice_ = vaultSharePrice; // Avoid stack too deep error.\\n        IHyperdrive.Options calldata options = _options; // Avoid stack too deep error.\\n        emit CloseShort(\\n            msg.sender, // trader\\n            options.destination, // destination\\n            AssetId.encodeAssetId(AssetId.AssetIdPrefix.Short, maturityTime),\\n            maturityTime,\\n            proceeds,\\n            vaultSharePrice_,\\n            options.asBase,\\n            // NOTE: We add the governance fee to the share reserves delta since\\n            // the user is responsible for paying the governance fee.\\n            (shareReservesDelta_ + totalGovernanceFee_).mulDown(\\n                vaultSharePrice_\\n            ),\\n            bondAmount,\\n            options.extraData\\n        );\\n\\n        return proceeds;\\n    }\\n\\n    /// @dev Applies an open short to the state. This includes updating the\\n    ///      reserves and maintaining the reserve invariants.\\n    /// @param _bondAmount The amount of bonds shorted.\\n    /// @param _shareReservesDelta The amount of shares paid to the curve.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _maturityTime The maturity time of the long.\\n    function _applyOpenShort(\\n        uint256 _bondAmount,\\n        uint256 _shareReservesDelta,\\n        uint256 _vaultSharePrice,\\n        uint256 _maturityTime\\n    ) internal {\\n        // If the share reserves would underflow when the short is opened, then\\n        // we revert with an insufficient liquidity error.\\n        uint256 shareReserves = _marketState.shareReserves;\\n        if (shareReserves < _shareReservesDelta) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n        unchecked {\\n            shareReserves -= _shareReservesDelta;\\n        }\\n\\n        // The share reserves are decreased in this operation, so we need to\\n        // verify that our invariants that z >= z_min and z - zeta >= z_min\\n        // are satisfied. The former is checked when we check solvency (since\\n        // global exposure is greater than or equal to zero, z < z_min\\n        // implies z - e/c - z_min < 0.\\n        if (\\n            HyperdriveMath.calculateEffectiveShareReserves(\\n                shareReserves,\\n                _marketState.shareAdjustment\\n            ) < _minimumShareReserves\\n        ) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // Update the average maturity time of short positions.\\n        _marketState.shortAverageMaturityTime = uint256(\\n            _marketState.shortAverageMaturityTime\\n        )\\n            .updateWeightedAverage(\\n                _marketState.shortsOutstanding,\\n                _maturityTime * ONE, // scale up to fixed point scale\\n                _bondAmount,\\n                true\\n            )\\n            .toUint128();\\n\\n        // Apply the trading deltas to the reserves and increase the bond buffer\\n        // by the amount of bonds that were shorted. We don't need to add the\\n        // margin or pre-paid interest to the reserves because of the way that\\n        // the close short accounting works.\\n        _marketState.shareReserves = shareReserves.toUint128();\\n        _marketState.bondReserves += _bondAmount.toUint128();\\n        _marketState.shortsOutstanding += _bondAmount.toUint128();\\n\\n        // Update the global long exposure. Since we're opening a short, the\\n        // number of non-netted longs decreases by the bond amount.\\n        int256 nonNettedLongs = _nonNettedLongs(_maturityTime);\\n        _updateLongExposure(\\n            nonNettedLongs,\\n            nonNettedLongs - _bondAmount.toInt256()\\n        );\\n\\n        // Opening a short decreases the system's exposure because the short's\\n        // margin can be used to offset some of the long exposure. Despite this,\\n        // opening a short decreases the share reserves, which limits the amount\\n        // of capital available to back non-netted long exposure. Since both\\n        // quantities decrease, we need to check that the system is still solvent.\\n        if (!_isSolvent(_vaultSharePrice)) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // Distribute the excess idle to the withdrawal pool. If the distribute\\n        // excess idle calculation fails, we revert to avoid putting the system\\n        // in an unhealthy state after the trade is processed.\\n        bool success = _distributeExcessIdleSafe(_vaultSharePrice);\\n        if (!success) {\\n            revert IHyperdrive.DistributeExcessIdleFailed();\\n        }\\n    }\\n\\n    /// @dev Applies the trading deltas from a closed short to the reserves and\\n    ///      the withdrawal pool.\\n    /// @param _bondAmount The amount of shorts that were closed.\\n    /// @param _bondReservesDelta The amount of bonds removed from the reserves.\\n    /// @param _shareReservesDelta The amount of shares added to the reserves.\\n    /// @param _shareAdjustmentDelta The amount to increase the share adjustment.\\n    /// @param _maturityTime The maturity time of the short.\\n    function _applyCloseShort(\\n        uint256 _bondAmount,\\n        uint256 _bondReservesDelta,\\n        uint256 _shareReservesDelta,\\n        int256 _shareAdjustmentDelta,\\n        uint256 _maturityTime\\n    ) internal {\\n        // Update the short average maturity time.\\n        uint128 shortsOutstanding_ = _marketState.shortsOutstanding;\\n        _marketState.shortAverageMaturityTime = uint256(\\n            _marketState.shortAverageMaturityTime\\n        )\\n            .updateWeightedAverage(\\n                shortsOutstanding_,\\n                _maturityTime * ONE, // scale up to fixed point scale\\n                _bondAmount,\\n                false\\n            )\\n            .toUint128();\\n\\n        // Decrease the amount of shorts outstanding.\\n        _marketState.shortsOutstanding =\\n            shortsOutstanding_ -\\n            _bondAmount.toUint128();\\n\\n        // Update the reserves and the share adjustment.\\n        _marketState.shareReserves += _shareReservesDelta.toUint128();\\n        _marketState.shareAdjustment += _shareAdjustmentDelta.toInt128();\\n        _marketState.bondReserves -= _bondReservesDelta.toUint128();\\n    }\\n\\n    /// @dev Calculate the pool reserve and trader deltas that result from\\n    ///      opening a short. This calculation includes trading fees.\\n    /// @param _bondAmount The amount of bonds being sold to open the short.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _openVaultSharePrice The vault share price at the beginning of\\n    ///        the checkpoint.\\n    /// @return baseDeposit The deposit, in base, required to open the short.\\n    /// @return shareReservesDelta The change in the share reserves.\\n    /// @return totalGovernanceFee The governance fee in shares.\\n    function _calculateOpenShort(\\n        uint256 _bondAmount,\\n        uint256 _vaultSharePrice,\\n        uint256 _openVaultSharePrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 baseDeposit,\\n            uint256 shareReservesDelta,\\n            uint256 totalGovernanceFee,\\n            uint256 spotPrice\\n        )\\n    {\\n        // Calculate the effect that opening the short should have on the pool's\\n        // reserves as well as the amount of shares the trader receives from\\n        // selling the shorted bonds at the market price.\\n        uint256 effectiveShareReserves = _effectiveShareReserves();\\n        shareReservesDelta = HyperdriveMath.calculateOpenShort(\\n            effectiveShareReserves,\\n            _marketState.bondReserves,\\n            _bondAmount,\\n            _timeStretch,\\n            _vaultSharePrice,\\n            _initialVaultSharePrice\\n        );\\n\\n        // NOTE: Round up to make the check stricter.\\n        //\\n        // If the base proceeds of selling the bonds is greater than the bond\\n        // amount, then the trade occurred in the negative interest domain. We\\n        // revert in these pathological cases.\\n        if (shareReservesDelta.mulUp(_vaultSharePrice) > _bondAmount) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // Calculate the current spot price.\\n        uint256 curveFee;\\n        uint256 governanceCurveFee;\\n        spotPrice = HyperdriveMath.calculateSpotPrice(\\n            effectiveShareReserves,\\n            _marketState.bondReserves,\\n            _initialVaultSharePrice,\\n            _timeStretch\\n        );\\n\\n        // Calculate the fees charged to the user (curveFee) and the portion\\n        // of those fees that are paid to governance (governanceCurveFee).\\n        (curveFee, , governanceCurveFee, ) = _calculateFeesGivenBonds(\\n            _bondAmount,\\n            ONE, // shorts are opened at the beginning of the term\\n            spotPrice,\\n            _vaultSharePrice\\n        );\\n\\n        // Subtract the total curve fee minus the governance curve fee to the\\n        // amount that will be subtracted from the share reserves. This ensures\\n        // that the LPs are credited with the fee the trader paid on the\\n        // curve trade minus the portion of the curve fee that was paid to\\n        // governance.\\n        //\\n        // shareReservesDelta, curveFee and governanceCurveFee are all\\n        // denominated in shares so we just need to subtract out the\\n        // governanceCurveFee from the shareReservesDelta since that fee isn't\\n        // reserved for the LPs.\\n        //\\n        // shares -= shares - shares\\n        shareReservesDelta -= curveFee - governanceCurveFee;\\n\\n        // NOTE: Round up to overestimate the base deposit.\\n        //\\n        // The trader will need to deposit capital to pay for the fixed rate,\\n        // the curve fee, the flat fee, and any back-paid interest that will be\\n        // received back upon closing the trade. If negative interest has\\n        // accrued during the current checkpoint, we set the close vault share\\n        // price to equal the open vault share price. This ensures that shorts\\n        // don't benefit from negative interest that accrued during the current\\n        // checkpoint.\\n        uint256 vaultSharePrice = _vaultSharePrice; // avoid stack-too-deep\\n        baseDeposit = HyperdriveMath\\n            .calculateShortProceedsUp(\\n                _bondAmount,\\n                // NOTE: We subtract the governance fee back to the share\\n                // reserves delta here because the trader will need to provide\\n                // this in their deposit.\\n                shareReservesDelta - governanceCurveFee,\\n                _openVaultSharePrice,\\n                vaultSharePrice.max(_openVaultSharePrice),\\n                vaultSharePrice,\\n                _flatFee\\n            )\\n            .mulUp(_vaultSharePrice);\\n\\n        return (baseDeposit, shareReservesDelta, governanceCurveFee, spotPrice);\\n    }\\n\\n    /// @dev Calculate the pool reserve and trader deltas that result from\\n    ///      closing a short. This calculation includes trading fees.\\n    /// @param _bondAmount The amount of bonds being purchased to close the\\n    ///        short.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _maturityTime The maturity time of the short position.\\n    /// @return bondReservesDelta The change in the bond reserves.\\n    /// @return shareProceeds The proceeds in shares of closing the short.\\n    /// @return shareReservesDelta The shares added to the reserves.\\n    /// @return shareAdjustmentDelta The change in the share adjustment.\\n    /// @return totalGovernanceFee The governance fee in shares.\\n    function _calculateCloseShort(\\n        uint256 _bondAmount,\\n        uint256 _vaultSharePrice,\\n        uint256 _maturityTime\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 bondReservesDelta,\\n            uint256 shareProceeds,\\n            uint256 shareReservesDelta,\\n            int256 shareAdjustmentDelta,\\n            uint256 totalGovernanceFee,\\n            uint256 spotPrice\\n        )\\n    {\\n        // Calculate the effect that closing the short should have on the pool's\\n        // reserves as well as the amount of shares the trader pays to buy the\\n        // bonds that they shorted back at the market price.\\n        uint256 shareCurveDelta;\\n        uint256 effectiveShareReserves = _effectiveShareReserves();\\n        {\\n            // Calculate the effect that closing the short should have on the\\n            // pool's reserves as well as the amount of shares the trader needs\\n            // to pay to purchase the shorted bonds at the market price.\\n            //\\n            // NOTE: We calculate the time remaining from the latest checkpoint\\n            // to ensure that opening/closing a position doesn't result in\\n            // immediate profit.\\n            uint256 timeRemaining = _calculateTimeRemaining(_maturityTime);\\n            uint256 bondAmount = _bondAmount; // Avoid stack too deep.\\n            uint256 vaultSharePrice = _vaultSharePrice; // Avoid stack too deep.\\n            (\\n                shareCurveDelta,\\n                bondReservesDelta,\\n                shareReservesDelta\\n            ) = HyperdriveMath.calculateCloseShort(\\n                effectiveShareReserves,\\n                _marketState.bondReserves,\\n                bondAmount,\\n                timeRemaining,\\n                _timeStretch,\\n                vaultSharePrice,\\n                _initialVaultSharePrice\\n            );\\n\\n            // Ensure that the trader didn't purchase bonds at a negative interest\\n            // rate after accounting for fees.\\n            spotPrice = HyperdriveMath.calculateSpotPrice(\\n                effectiveShareReserves,\\n                _marketState.bondReserves,\\n                _initialVaultSharePrice,\\n                _timeStretch\\n            );\\n            if (\\n                _isNegativeInterest(\\n                    shareCurveDelta,\\n                    bondReservesDelta,\\n                    HyperdriveMath.calculateCloseShortMaxSpotPrice(\\n                        spotPrice,\\n                        _curveFee\\n                    )\\n                )\\n            ) {\\n                Errors.throwInsufficientLiquidityError();\\n            }\\n\\n            // Calculate the fees charged to the user (curveFee and\\n            // flatFee) and the portion of those fees that are paid to\\n            // governance (totalGovernanceFee).\\n            uint256 curveFee;\\n            uint256 flatFee;\\n            uint256 governanceCurveFee;\\n            (\\n                curveFee,\\n                flatFee,\\n                governanceCurveFee,\\n                totalGovernanceFee\\n            ) = _calculateFeesGivenBonds(\\n                bondAmount,\\n                timeRemaining,\\n                spotPrice,\\n                vaultSharePrice\\n            );\\n\\n            // Add the total curve fee minus the governance curve fee to the\\n            // amount that will be added to the share reserves. This ensures\\n            // that the LPs are credited with the fee the trader paid on the\\n            // curve trade minus the portion of the curve fee that was paid to\\n            // governance.\\n            //\\n            // shareCurveDelta, curveFee and governanceCurveFee are all\\n            // denominated in shares so we just need to subtract out the\\n            // governanceCurveFees from the shareCurveDelta since that fee isn't\\n            // reserved for the LPs\\n            shareCurveDelta += curveFee - governanceCurveFee;\\n\\n            // Calculate the shareReservesDelta that the user must make to close\\n            // out the short. We add the curveFee (shares) and flatFee (shares)\\n            // to the shareReservesDelta to ensure that fees are collected.\\n            shareReservesDelta += curveFee + flatFee;\\n        }\\n\\n        // Calculate the share proceeds owed to the short and account for\\n        // negative interest that accrued over the period.\\n        {\\n            uint256 openVaultSharePrice = _checkpoints[\\n                _maturityTime - _positionDuration\\n            ].vaultSharePrice;\\n            uint256 closeVaultSharePrice = block.timestamp < _maturityTime\\n                ? _vaultSharePrice\\n                : _checkpoints[_maturityTime].vaultSharePrice;\\n\\n            // NOTE: Round down to underestimate the short proceeds.\\n            //\\n            // Calculate the share proceeds owed to the short. We calculate this\\n            // before scaling the share payment for negative interest. Shorts\\n            // are responsible for paying for 100% of the negative interest, so\\n            // they aren't benefited when the payment to LPs is decreased due to\\n            // negative interest. Similarly, the governance fee is included in\\n            // the share payment. The LPs don't receive the governance fee, but\\n            // the short is responsible for paying it.\\n            uint256 vaultSharePrice = _vaultSharePrice; // Avoid stack too deep.\\n            shareProceeds = HyperdriveMath.calculateShortProceedsDown(\\n                _bondAmount,\\n                shareReservesDelta,\\n                openVaultSharePrice,\\n                closeVaultSharePrice,\\n                vaultSharePrice,\\n                _flatFee\\n            );\\n\\n            // The governance fee isn't included in the share payment that is\\n            // added to the share reserves. We remove it here to simplify the\\n            // accounting updates.\\n            shareReservesDelta -= totalGovernanceFee;\\n\\n            // Ensure that the ending spot price is less than 1.\\n            if (\\n                HyperdriveMath.calculateSpotPrice(\\n                    effectiveShareReserves + shareCurveDelta,\\n                    _marketState.bondReserves - bondReservesDelta,\\n                    _initialVaultSharePrice,\\n                    _timeStretch\\n                ) > ONE\\n            ) {\\n                Errors.throwInsufficientLiquidityError();\\n            }\\n\\n            // Adjust the computed proceeds and delta for negative interest.\\n            // We also compute the share adjustment delta at this step to ensure\\n            // that we don't break our AMM invariant when we account for negative\\n            // interest and flat adjustments.\\n            (\\n                shareProceeds,\\n                shareReservesDelta,\\n                shareCurveDelta,\\n                shareAdjustmentDelta,\\n                totalGovernanceFee\\n            ) = HyperdriveMath.calculateNegativeInterestOnClose(\\n                shareProceeds,\\n                shareReservesDelta,\\n                shareCurveDelta,\\n                totalGovernanceFee,\\n                openVaultSharePrice,\\n                closeVaultSharePrice,\\n                false\\n            );\\n        }\\n\\n        return (\\n            bondReservesDelta,\\n            shareProceeds,\\n            shareReservesDelta,\\n            shareAdjustmentDelta,\\n            totalGovernanceFee,\\n            spotPrice\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/internal/HyperdriveStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { ReentrancyGuard } from \\\"openzeppelin/utils/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { FixedPointMath } from \\\"../libraries/FixedPointMath.sol\\\";\\n\\n/// @author DELV\\n/// @title HyperdriveStorage\\n/// @notice Hyperdrive's storage contract.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nabstract contract HyperdriveStorage is ReentrancyGuard {\\n    using FixedPointMath for uint256;\\n\\n    /// Metadata ///\\n\\n    /// @dev The instance's name.\\n    string internal _name;\\n\\n    /// Tokens ///\\n\\n    /// @dev The base asset.\\n    IERC20 internal immutable _baseToken;\\n\\n    /// @dev The vault shares asset.\\n    IERC20 internal immutable _vaultSharesToken;\\n\\n    /// Time ///\\n\\n    /// @dev The amount of seconds between vault share price checkpoints.\\n    uint256 internal immutable _checkpointDuration;\\n\\n    /// @dev The amount of seconds that elapse before a bond can be redeemed.\\n    uint256 internal immutable _positionDuration;\\n\\n    /// @dev A parameter that decreases slippage around a target rate.\\n    uint256 internal immutable _timeStretch;\\n\\n    /// Fees ///\\n\\n    /// @dev The LP fee applied to the curve portion of a trade.\\n    uint256 internal immutable _curveFee;\\n\\n    /// @dev The LP fee applied to the flat portion of a trade.\\n    uint256 internal immutable _flatFee;\\n\\n    /// @dev The portion of the LP fee that goes to governance.\\n    uint256 internal immutable _governanceLPFee;\\n\\n    /// @dev The portion of the zombie interest that goes to governance.\\n    uint256 internal immutable _governanceZombieFee;\\n\\n    /// Market State ///\\n\\n    /// @dev The vault share price at the time the pool was created.\\n    uint256 internal immutable _initialVaultSharePrice;\\n\\n    /// @dev The minimum amount of share reserves that must be maintained at all\\n    ///      times. This is used to enforce practical limits on the share\\n    ///      reserves to avoid numerical issues that can occur if the share\\n    ///      reserves become very small or equal to zero.\\n    uint256 internal immutable _minimumShareReserves;\\n\\n    /// @dev The minimum amount of tokens that a position can be opened or\\n    ///      closed with.\\n    uint256 internal immutable _minimumTransactionAmount;\\n\\n    /// @dev The maximum delta between the last checkpoint's weighted spot APR\\n    ///      and the current spot APR for an LP to add liquidity. This protects\\n    ///      LPs from sandwich attacks.\\n    uint256 internal immutable _circuitBreakerDelta;\\n\\n    /// @dev The state of the market. This includes the reserves, buffers, and\\n    ///      other data used to price trades and maintain solvency.\\n    IHyperdrive.MarketState internal _marketState;\\n\\n    /// @dev The state corresponding to the withdraw pool.\\n    IHyperdrive.WithdrawPool internal _withdrawPool;\\n\\n    /// @dev Hyperdrive positions are bucketed into checkpoints, which allows us\\n    ///      to avoid poking in any period that has LP or trading activity. The\\n    ///      checkpoints contain the starting vault share price from the\\n    ///      checkpoint as well as aggregate volume values.\\n    mapping(uint256 checkpointNumber => IHyperdrive.Checkpoint checkpoint)\\n        internal _checkpoints;\\n\\n    /// Admin ///\\n\\n    /// @dev The address that can pause the contract.\\n    address internal _governance;\\n\\n    /// @dev The address which collects governance fees.\\n    address internal _feeCollector;\\n\\n    /// @dev The address which collects swept tokens.\\n    address internal _sweepCollector;\\n\\n    /// @dev The address that will reward checkpoint minters.\\n    address internal _checkpointRewarder;\\n\\n    /// @dev Governance fees that haven't been collected yet denominated in shares.\\n    uint256 internal _governanceFeesAccrued;\\n\\n    /// @dev Addresses approved in this mapping can pause all deposits into the\\n    ///      contract and other non essential functionality.\\n    mapping(address user => bool isPauser) internal _pausers;\\n\\n    /// MultiToken ///\\n\\n    /// @dev The forwarder factory that deploys ERC20 forwarders for this\\n    ///      instance.\\n    address internal immutable _linkerFactory;\\n\\n    /// @dev The bytecode hash of the contract which forwards purely ERC20 calls\\n    ///      to this contract.\\n    bytes32 internal immutable _linkerCodeHash;\\n\\n    /// @dev Allows loading of each balance.\\n    mapping(uint256 tokenId => mapping(address user => uint256 balance))\\n        internal _balanceOf;\\n\\n    /// @dev Allows loading of each total supply.\\n    mapping(uint256 tokenId => uint256 supply) internal _totalSupply;\\n\\n    /// @dev Uniform approval for all tokens.\\n    mapping(address from => mapping(address caller => bool isApproved))\\n        internal _isApprovedForAll;\\n\\n    /// @dev Additional optional per token approvals. This is non-standard for\\n    ///      ERC1155, but it's necessary to replicate the ERC20 interface.\\n    mapping(uint256 tokenId => mapping(address from => mapping(address caller => uint256 approved)))\\n        internal _perTokenApprovals;\\n\\n    /// @dev A mapping to track the permitForAll signature nonces.\\n    mapping(address user => uint256 nonce) internal _nonces;\\n\\n    /// Constructor ///\\n\\n    /// @notice Instantiates Hyperdrive's storage.\\n    /// @param _config The configuration of the Hyperdrive pool.\\n    constructor(IHyperdrive.PoolConfig memory _config) {\\n        // Initialize the base and vault shares token addresses.\\n        _baseToken = _config.baseToken;\\n        _vaultSharesToken = _config.vaultSharesToken;\\n\\n        // Initialize the initial vault share price.\\n        _initialVaultSharePrice = _config.initialVaultSharePrice;\\n\\n        // Initialize the minimum share reserves. The minimum share reserves\\n        // defines the amount of shares that will be reserved to ensure that\\n        // the share reserves are never empty. We will also burn LP shares equal\\n        // to the minimum share reserves upon initialization to ensure that the\\n        // total supply of active LP tokens is always greater than zero.\\n        _minimumShareReserves = _config.minimumShareReserves;\\n\\n        // Initialize the minimum transaction amount. The minimum transaction\\n        // amount defines the minimum input that the system will allow, which\\n        // prevents weird rounding issues that can occur with very small\\n        // amounts.\\n        _minimumTransactionAmount = _config.minimumTransactionAmount;\\n\\n        // Initialize the maximum add liquidity APR delta. The maximum add\\n        // liquidity APR delta defines the maximum delta between the current\\n        // spot APR and the weighted spot APR from the last checkpoint for an\\n        // LP to add liquidity. This mitigates the possibility of LP sandwich\\n        // attacks by making them economically infeasible to pull off.\\n        _circuitBreakerDelta = _config.circuitBreakerDelta;\\n\\n        // Initialize the time configurations. There must be at least one\\n        // checkpoint per term to avoid having a position duration of zero.\\n        _checkpointDuration = _config.checkpointDuration;\\n        _positionDuration = _config.positionDuration;\\n        _timeStretch = _config.timeStretch;\\n\\n        // Initialize the fee parameters.\\n        _curveFee = _config.fees.curve;\\n        _flatFee = _config.fees.flat;\\n        _governanceLPFee = _config.fees.governanceLP;\\n        _governanceZombieFee = _config.fees.governanceZombie;\\n\\n        // Initialize the MultiToken immutables.\\n        _linkerFactory = _config.linkerFactory;\\n        _linkerCodeHash = _config.linkerCodeHash;\\n\\n        // Initialize governance, the fee collector, the sweep collector, and\\n        // the checkpoint rewarder.\\n        _governance = _config.governance;\\n        _feeCollector = _config.feeCollector;\\n        _sweepCollector = _config.sweepCollector;\\n        _checkpointRewarder = _config.checkpointRewarder;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/AssetId.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\n\\n/// @author DELV\\n/// @title Hyperdrive\\n/// @notice A library that handles the encoding and decoding of asset IDs for\\n///         Hyperdrive.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nlibrary AssetId {\\n    uint256 internal constant _LP_ASSET_ID = 0;\\n    uint256 internal constant _WITHDRAWAL_SHARE_ASSET_ID =\\n        uint256(AssetIdPrefix.WithdrawalShare) << 248;\\n\\n    enum AssetIdPrefix {\\n        LP,\\n        Long,\\n        Short,\\n        WithdrawalShare\\n    }\\n\\n    /// @dev Encodes a prefix and a timestamp into an asset ID. Asset IDs are\\n    ///      used so that LP, long, and short tokens can all be represented in a\\n    ///      single MultiToken instance. The zero asset ID indicates the LP\\n    ///      token.\\n    /// @param _prefix A one byte prefix that specifies the asset type.\\n    /// @param _timestamp A timestamp associated with the asset.\\n    /// @return id The asset ID.\\n    function encodeAssetId(\\n        AssetIdPrefix _prefix,\\n        uint256 _timestamp\\n    ) internal pure returns (uint256 id) {\\n        // [identifier: 8 bits][timestamp: 248 bits]\\n        if (\\n            _timestamp >\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        ) {\\n            revert IHyperdrive.InvalidTimestamp();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            id := or(shl(0xf8, _prefix), _timestamp)\\n        }\\n    }\\n\\n    /// @dev Decodes an encoded asset ID into it's constituent parts of an\\n    ///      identifier, data and a timestamp.\\n    /// @param _id The asset ID.\\n    /// @return _prefix A one byte prefix that specifies the asset type.\\n    /// @return _timestamp A timestamp associated with the asset.\\n    function decodeAssetId(\\n        uint256 _id\\n    ) internal pure returns (AssetIdPrefix _prefix, uint256 _timestamp) {\\n        // [identifier: 8 bits][timestamp: 248 bits]\\n        assembly (\\\"memory-safe\\\") {\\n            _prefix := shr(0xf8, _id) // shr 248 bits\\n            _timestamp := and(\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff,\\n                _id\\n            ) // 248 bit-mask\\n        }\\n    }\\n\\n    /// @dev Converts an asset ID to a token name.\\n    /// @param _id The asset ID.\\n    /// @return _name The token name.\\n    function assetIdToName(\\n        uint256 _id\\n    ) internal pure returns (string memory _name) {\\n        (AssetIdPrefix prefix, uint256 timestamp) = decodeAssetId(_id);\\n        string memory _timestamp = toString(timestamp);\\n        if (prefix == AssetIdPrefix.LP) {\\n            _name = \\\"Hyperdrive LP\\\";\\n        } else if (prefix == AssetIdPrefix.Long) {\\n            _name = string(abi.encodePacked(\\\"Hyperdrive Long: \\\", _timestamp));\\n        } else if (prefix == AssetIdPrefix.Short) {\\n            _name = string(abi.encodePacked(\\\"Hyperdrive Short: \\\", _timestamp));\\n        } else if (prefix == AssetIdPrefix.WithdrawalShare) {\\n            _name = \\\"Hyperdrive Withdrawal Share\\\";\\n        }\\n    }\\n\\n    /// @dev Converts an asset ID to a token symbol.\\n    /// @param _id The asset ID.\\n    /// @return _symbol The token symbol.\\n    function assetIdToSymbol(\\n        uint256 _id\\n    ) internal pure returns (string memory _symbol) {\\n        (AssetIdPrefix prefix, uint256 timestamp) = decodeAssetId(_id);\\n        string memory _timestamp = toString(timestamp);\\n        if (prefix == AssetIdPrefix.LP) {\\n            _symbol = \\\"HYPERDRIVE-LP\\\";\\n        } else if (prefix == AssetIdPrefix.Long) {\\n            _symbol = string(abi.encodePacked(\\\"HYPERDRIVE-LONG:\\\", _timestamp));\\n        } else if (prefix == AssetIdPrefix.Short) {\\n            _symbol = string(abi.encodePacked(\\\"HYPERDRIVE-SHORT:\\\", _timestamp));\\n        } else if (prefix == AssetIdPrefix.WithdrawalShare) {\\n            _symbol = \\\"HYPERDRIVE-WS\\\";\\n        }\\n    }\\n\\n    /// @dev Converts an unsigned integer to a string.\\n    /// @param _num The integer to be converted.\\n    /// @return result The stringified integer.\\n    function toString(\\n        uint256 _num\\n    ) internal pure returns (string memory result) {\\n        // We overallocate memory for the string. The maximum number of digits\\n        // that a uint256 can hold is log_10(2 ^ 256) which is approximately\\n        // 77.06. We round up so that we have space for the last digit.\\n        uint256 maxStringLength = 78;\\n        bytes memory rawResult = new bytes(maxStringLength);\\n\\n        // Loop through the integer and add each digit to the raw result,\\n        // starting at the end of the string and working towards the beginning.\\n        uint256 digits = 0;\\n        for (; _num != 0; _num /= 10) {\\n            rawResult[maxStringLength - digits - 1] = bytes1(\\n                uint8((_num % 10) + 48)\\n            );\\n            digits++;\\n        }\\n\\n        // Point the string result to the beginning of the stringified integer\\n        // and update the length.\\n        assembly {\\n            result := add(rawResult, sub(maxStringLength, digits))\\n            mstore(result, digits)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\n/// @dev The placeholder address for ETH.\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n/// @dev The version of the contracts.\\nstring constant VERSION = \\\"v1.0.15\\\";\\n\\n/// @dev The number of targets that must be deployed for a full deployment.\\nuint256 constant NUM_TARGETS = 5;\\n\\n/// @dev The kind of the ERC20 Forwarder.\\nstring constant ERC20_FORWARDER_KIND = \\\"ERC20Forwarder\\\";\\n\\n/// @dev The kind of the ERC20 Forwarder Factory.\\nstring constant ERC20_FORWARDER_FACTORY_KIND = \\\"ERC20ForwarderFactory\\\";\\n\\n/// @dev The kind of the Hyperdrive checkpoint rewarder.\\nstring constant HYPERDRIVE_CHECKPOINT_REWARDER_KIND = \\\"HyperdriveCheckpointRewarder\\\";\\n\\n/// @dev The kind of the Hyperdrive checkpoint subrewarder.\\nstring constant HYPERDRIVE_CHECKPOINT_SUBREWARDER_KIND = \\\"HyperdriveCheckpointSubrewarder\\\";\\n\\n/// @dev The kind of the Hyperdrive factory.\\nstring constant HYPERDRIVE_FACTORY_KIND = \\\"HyperdriveFactory\\\";\\n\\n/// @dev The kind of the Hyperdrive registry.\\nstring constant HYPERDRIVE_REGISTRY_KIND = \\\"HyperdriveRegistry\\\";\\n\\n/// @dev The kind of the AaveHyperdrive deployer coordinator factory.\\nstring constant AAVE_HYPERDRIVE_DEPLOYER_COORDINATOR_KIND = \\\"AaveHyperdriveDeployerCoordinator\\\";\\n\\n/// @dev The kind of the ERC4626Hyperdrive deployer coordinator factory.\\nstring constant ERC4626_HYPERDRIVE_DEPLOYER_COORDINATOR_KIND = \\\"ERC4626HyperdriveDeployerCoordinator\\\";\\n\\n/// @dev The kind of the EzETHHyperdrive deployer coordinator factory.\\nstring constant EZETH_HYPERDRIVE_DEPLOYER_COORDINATOR_KIND = \\\"EzETHHyperdriveDeployerCoordinator\\\";\\n\\n/// @dev The kind of the LsETHHyperdrive deployer coordinator factory.\\nstring constant LSETH_HYPERDRIVE_DEPLOYER_COORDINATOR_KIND = \\\"LsETHHyperdriveDeployerCoordinator\\\";\\n\\n/// @dev The kind of the RETHHyperdrive deployer coordinator factory.\\nstring constant RETH_HYPERDRIVE_DEPLOYER_COORDINATOR_KIND = \\\"RETHHyperdriveDeployerCoordinator\\\";\\n\\n/// @dev The kind of the StETHHyperdrive deployer coordinator factory.\\nstring constant STETH_HYPERDRIVE_DEPLOYER_COORDINATOR_KIND = \\\"StETHHyperdriveDeployerCoordinator\\\";\\n\\n/// @dev The kind of AaveHyperdrive.\\nstring constant AAVE_HYPERDRIVE_KIND = \\\"AaveHyperdrive\\\";\\n\\n/// @dev The kind of ERC4626Hyperdrive.\\nstring constant ERC4626_HYPERDRIVE_KIND = \\\"ERC4626Hyperdrive\\\";\\n\\n/// @dev The kind of EzETHHyperdrive.\\nstring constant EZETH_HYPERDRIVE_KIND = \\\"EzETHHyperdrive\\\";\\n\\n/// @dev The kind of LsETHHyperdrive.\\nstring constant LSETH_HYPERDRIVE_KIND = \\\"LsETHHyperdrive\\\";\\n\\n/// @dev The kind of RETHHyperdrive.\\nstring constant RETH_HYPERDRIVE_KIND = \\\"RETHHyperdrive\\\";\\n\\n/// @dev The kind of StETHHyperdrive.\\nstring constant STETH_HYPERDRIVE_KIND = \\\"StETHHyperdrive\\\";\\n\"\r\n    },\r\n    \"contracts/src/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\n\\nlibrary Errors {\\n    /// @dev Throws an InsufficientLiquidity error. We do this in a helper\\n    ///      function to reduce the code size.\\n    function throwInsufficientLiquidityError() internal pure {\\n        revert IHyperdrive.InsufficientLiquidity();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/FixedPointMath.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { SafeCast } from \\\"./SafeCast.sol\\\";\\n\\nuint256 constant ONE = 1e18;\\n\\n/// @author DELV\\n/// @title FixedPointMath\\n/// @notice A fixed-point math library.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nlibrary FixedPointMath {\\n    using FixedPointMath for uint256;\\n    using SafeCast for uint256;\\n\\n    uint256 internal constant MAX_UINT256 = 2 ** 256 - 1;\\n\\n    /// @param x Fixed point number in 1e18 format.\\n    /// @param y Fixed point number in 1e18 format.\\n    /// @param denominator Fixed point number in 1e18 format.\\n    /// @return z The result of x * y / denominator rounded down.\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(\\n                mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    /// @param a Fixed point number in 1e18 format.\\n    /// @param b Fixed point number in 1e18 format.\\n    /// @return Result of a * b rounded down.\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (mulDivDown(a, b, ONE));\\n    }\\n\\n    /// @param a Fixed point number in 1e18 format.\\n    /// @param b Fixed point number in 1e18 format.\\n    /// @return Result of a / b rounded down.\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (mulDivDown(a, ONE, b)); // Equivalent to (a * 1e18) / b rounded down.\\n    }\\n\\n    /// @param x Fixed point number in 1e18 format.\\n    /// @param y Fixed point number in 1e18 format.\\n    /// @param denominator Fixed point number in 1e18 format.\\n    /// @return z The result of x * y / denominator rounded up.\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(\\n                mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(\\n                gt(mod(mul(x, y), denominator), 0),\\n                div(mul(x, y), denominator)\\n            )\\n        }\\n    }\\n\\n    /// @param a Fixed point number in 1e18 format.\\n    /// @param b Fixed point number in 1e18 format.\\n    /// @return The result of a * b rounded up.\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (mulDivUp(a, b, ONE));\\n    }\\n\\n    /// @param a Fixed point number in 1e18 format.\\n    /// @param b Fixed point number in 1e18 format.\\n    /// @return The result of a / b rounded up.\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (mulDivUp(a, ONE, b));\\n    }\\n\\n    /// @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n    /// @param x Fixed point number in 1e18 format.\\n    /// @param y Fixed point number in 1e18 format.\\n    /// @return The result of x^y.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // If the exponent is 0, return 1.\\n        if (y == 0) {\\n            return ONE;\\n        }\\n\\n        // If the base is 0, return 0.\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Using properties of logarithms we calculate x^y:\\n        // -> ln(x^y) = y * ln(x)\\n        // -> e^(y * ln(x)) = x^y\\n        int256 y_int256 = y.toInt256(); // solhint-disable-line var-name-mixedcase\\n\\n        // Compute y*ln(x)\\n        // Any overflow for x will be caught in ln() in the initial bounds check\\n        int256 lnx = ln(x.toInt256());\\n        int256 ylnx;\\n        assembly (\\\"memory-safe\\\") {\\n            ylnx := mul(y_int256, lnx)\\n        }\\n        ylnx /= int256(ONE);\\n\\n        // Calculate exp(y * ln(x)) to get x^y\\n        return uint256(exp(ylnx));\\n    }\\n\\n    /// @dev Computes e^x in 1e18 fixed point.\\n    /// @dev Credit to Remco (https://github.com/recmo/experiment-solexp/blob/main/src/FixedPointMathLib.sol)\\n    /// @param x Fixed point number in 1e18 format.\\n    /// @return r The result of e^x.\\n    function exp(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589)\\n                revert IHyperdrive.ExpInvalidExponent();\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5 ** 18;\\n\\n            // Reduce range of x to (-\u00bd ln 2, \u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            // Note: 54916777467707473351141471128 = 2^96 ln(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2 ** 95) >>\\n                96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = ((uint256(r) *\\n                3822833074963236453042738258902158003155416615667) >>\\n                uint256(195 - k)).toInt256();\\n        }\\n    }\\n\\n    /// @dev Computes ln(x) in 1e18 fixed point.\\n    /// @dev Credit to Remco (https://github.com/recmo/experiment-solexp/blob/main/src/FixedPointMathLib.sol)\\n    /// @dev Reverts if x is negative or zero.\\n    /// @param x Fixed point number in 1e18 format.\\n    /// @return r Result of ln(x).\\n    function ln(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            if (x <= 0) {\\n                revert IHyperdrive.LnInvalidInput();\\n            }\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // This step inlines the `ilog2` call in Remco's implementation:\\n            // https://github.com/recmo/experiment-solexp/blob/bbc164fb5ec078cfccf3c71b521605106bfae00b/src/FixedPointMathLib.sol#L57-L68\\n            //\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n                r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n                r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n                r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n                r := or(r, shl(3, lt(0xff, shr(r, x))))\\n                r := or(r, shl(2, lt(0xf, shr(r, x))))\\n                r := or(r, shl(1, lt(0x3, shr(r, x))))\\n                r := or(r, lt(0x1, shr(r, x)))\\n            }\\n\\n            // Reduce range of x to [1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = r - 96;\\n            x <<= uint256(159 - k);\\n            x = (uint256(x) >> 159).toInt256();\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r +=\\n                16597577552685614221487285958193947469193820559219878177908093499208371 *\\n                k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /// @dev Updates a weighted average by adding or removing a weighted delta.\\n    /// @param _totalWeight The total weight before the update.\\n    /// @param _deltaWeight The weight of the new value.\\n    /// @param _average The weighted average before the update.\\n    /// @param _delta The new value.\\n    /// @return average The new weighted average.\\n    function updateWeightedAverage(\\n        uint256 _average,\\n        uint256 _totalWeight,\\n        uint256 _delta,\\n        uint256 _deltaWeight,\\n        bool _isAdding\\n    ) internal pure returns (uint256 average) {\\n        // If the delta weight is zero, the average does not change.\\n        if (_deltaWeight == 0) {\\n            return _average;\\n        }\\n\\n        // If the delta weight should be added to the total weight, we compute\\n        // the weighted average as:\\n        //\\n        // average = (totalWeight * average + deltaWeight * delta) /\\n        //           (totalWeight + deltaWeight)\\n        if (_isAdding) {\\n            // NOTE: Round down to underestimate the average.\\n            average = (_totalWeight.mulDown(_average) +\\n                _deltaWeight.mulDown(_delta)).divDown(\\n                    _totalWeight + _deltaWeight\\n                );\\n\\n            // An important property that should always hold when we are adding\\n            // to the average is:\\n            //\\n            // min(_delta, _average) <= average <= max(_delta, _average)\\n            //\\n            // To ensure that this is always the case, we clamp the weighted\\n            // average to this range. We don't have to worry about the\\n            // case where average > _delta.max(average) because rounding down when\\n            // computing this average makes this case infeasible.\\n            uint256 minAverage = _delta.min(_average);\\n            if (average < minAverage) {\\n                average = minAverage;\\n            }\\n        }\\n        // If the delta weight should be subtracted from the total weight, we\\n        // compute the weighted average as:\\n        //\\n        // average = (totalWeight * average - deltaWeight * delta) /\\n        //           (totalWeight - deltaWeight)\\n        else {\\n            if (_totalWeight == _deltaWeight) {\\n                return 0;\\n            }\\n\\n            // NOTE: Round down to underestimate the average.\\n            average = (_totalWeight.mulDown(_average) -\\n                _deltaWeight.mulUp(_delta)).divDown(\\n                    _totalWeight - _deltaWeight\\n                );\\n        }\\n    }\\n\\n    /// @dev Calculates the minimum of two values.\\n    /// @param a The first value.\\n    /// @param b The second value.\\n    /// @return The minimum of the two values.\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? b : a;\\n    }\\n\\n    /// @dev Calculates the maximum of two values.\\n    /// @param a The first value.\\n    /// @param b The second value.\\n    /// @return The maximum of the two values.\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /// @dev Calculates the minimum of two values.\\n    /// @param a The first value.\\n    /// @param b The second value.\\n    /// @return The minimum of the two values.\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? b : a;\\n    }\\n\\n    /// @dev Calculates the maximum of two values.\\n    /// @param a The first value.\\n    /// @param b The second value.\\n    /// @return The maximum of the two values.\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/HyperdriveMath.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\nimport { FixedPointMath, ONE } from \\\"./FixedPointMath.sol\\\";\\nimport { SafeCast } from \\\"./SafeCast.sol\\\";\\nimport { YieldSpaceMath } from \\\"./YieldSpaceMath.sol\\\";\\n\\n/// @author DELV\\n/// @title Hyperdrive\\n/// @notice Math for the Hyperdrive pricing model.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nlibrary HyperdriveMath {\\n    using FixedPointMath for uint256;\\n    using FixedPointMath for int256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Calculates the checkpoint time of a given timestamp.\\n    /// @param _timestamp The timestamp to use to calculate the checkpoint time.\\n    /// @param _checkpointDuration The checkpoint duration.\\n    /// @return The checkpoint time.\\n    function calculateCheckpointTime(\\n        uint256 _timestamp,\\n        uint256 _checkpointDuration\\n    ) internal pure returns (uint256) {\\n        return _timestamp - (_timestamp % _checkpointDuration);\\n    }\\n\\n    /// @dev Calculates the time stretch parameter for the YieldSpace curve.\\n    ///      This parameter modifies the curvature in order to support a larger\\n    ///      or smaller range of APRs. The lower the time stretch, the flatter\\n    ///      the curve will be and the narrower the range of feasible APRs. The\\n    ///      higher the time stretch, the higher the curvature will be and the\\n    ///      wider the range of feasible APRs.\\n    /// @param _apr The target APR to use when calculating the time stretch.\\n    /// @param _positionDuration The position duration in seconds.\\n    /// @return The time stretch parameter.\\n    function calculateTimeStretch(\\n        uint256 _apr,\\n        uint256 _positionDuration\\n    ) internal pure returns (uint256) {\\n        // Calculate the benchmark time stretch. This time stretch is tuned for\\n        // a position duration of 1 year.\\n        uint256 timeStretch = uint256(5.24592e18).divDown(\\n            uint256(0.04665e18).mulDown(_apr * 100)\\n        );\\n        timeStretch = ONE.divDown(timeStretch);\\n\\n        // We know that the following simultaneous equations hold:\\n        //\\n        // (1 + apr) * A ** timeStretch = 1\\n        //\\n        // and\\n        //\\n        // (1 + apr * (positionDuration / 365 days)) * A ** targetTimeStretch = 1\\n        //\\n        // where A is the reserve ratio. We can solve these equations for the\\n        // target time stretch as follows:\\n        //\\n        // targetTimeStretch = (\\n        //     ln(1 + apr * (positionDuration / 365 days)) /\\n        //     ln(1 + apr)\\n        // ) * timeStretch\\n        //\\n        // NOTE: Round down so that the output is an underestimate.\\n        return\\n            (\\n                uint256(\\n                    (ONE + _apr.mulDivDown(_positionDuration, 365 days))\\n                        .toInt256()\\n                        .ln()\\n                ).divDown(uint256((ONE + _apr).toInt256().ln()))\\n            ).mulDown(timeStretch);\\n    }\\n\\n    /// @dev Calculates the APR implied by a price.\\n    /// @param _price The price to convert to an APR.\\n    /// @param _duration The term duration.\\n    /// @return The APR implied by the price.\\n    function calculateAPRFromPrice(\\n        uint256 _price,\\n        uint256 _duration\\n    ) internal pure returns (uint256) {\\n        // NOTE: Round down to underestimate the spot APR.\\n        return\\n            (ONE - _price).divDown(\\n                // NOTE: Round up since this is in the denominator.\\n                _price.mulDivUp(_duration, 365 days)\\n            );\\n    }\\n\\n    /// @dev Calculates the spot price of bonds in terms of base. This\\n    ///      calculation underestimates the pool's spot price.\\n    /// @param _effectiveShareReserves The pool's effective share reserves. The\\n    ///        effective share reserves are a modified version of the share\\n    ///        reserves used when pricing trades.\\n    /// @param _bondReserves The pool's bond reserves.\\n    /// @param _initialVaultSharePrice The initial vault share price.\\n    /// @param _timeStretch The time stretch parameter.\\n    /// @return spotPrice The spot price of bonds in terms of base.\\n    function calculateSpotPrice(\\n        uint256 _effectiveShareReserves,\\n        uint256 _bondReserves,\\n        uint256 _initialVaultSharePrice,\\n        uint256 _timeStretch\\n    ) internal pure returns (uint256 spotPrice) {\\n        // NOTE: Round down to underestimate the spot price.\\n        //\\n        // p = (y / (mu * (z - zeta))) ** -t_s\\n        //   = ((mu * (z - zeta)) / y) ** t_s\\n        spotPrice = _initialVaultSharePrice\\n            .mulDivDown(_effectiveShareReserves, _bondReserves)\\n            .pow(_timeStretch);\\n    }\\n\\n    /// @dev Calculates the spot APR of the pool. This calculation\\n    ///      underestimates the pool's spot APR.\\n    /// @param _effectiveShareReserves The pool's effective share reserves. The\\n    ///        effective share reserves are a modified version of the share\\n    ///        reserves used when pricing trades.\\n    /// @param _bondReserves The pool's bond reserves.\\n    /// @param _initialVaultSharePrice The pool's initial vault share price.\\n    /// @param _positionDuration The amount of time until maturity in seconds.\\n    /// @param _timeStretch The time stretch parameter.\\n    /// @return apr The pool's spot APR.\\n    function calculateSpotAPR(\\n        uint256 _effectiveShareReserves,\\n        uint256 _bondReserves,\\n        uint256 _initialVaultSharePrice,\\n        uint256 _positionDuration,\\n        uint256 _timeStretch\\n    ) internal pure returns (uint256 apr) {\\n        // NOTE: Round down to underestimate the spot APR.\\n        //\\n        // We are interested calculating the fixed APR for the pool. The\\n        // annualized rate is given by the following formula:\\n        //\\n        // r = (1 - p) / (p * t)\\n        //\\n        // where t = _positionDuration / 365.\\n        uint256 spotPrice = calculateSpotPrice(\\n            _effectiveShareReserves,\\n            _bondReserves,\\n            _initialVaultSharePrice,\\n            _timeStretch\\n        );\\n        return calculateAPRFromPrice(spotPrice, _positionDuration);\\n    }\\n\\n    /// @dev Calculates the effective share reserves. The effective share\\n    ///      reserves are the share reserves minus the share adjustment or\\n    ///      z - zeta. We use the effective share reserves as the z-parameter\\n    ///      to the YieldSpace pricing model. The share adjustment is used to\\n    ///      hold the pricing mechanism invariant under the flat component of\\n    ///      flat+curve trades.\\n    /// @param _shareReserves The pool's share reserves.\\n    /// @param _shareAdjustment The pool's share adjustment.\\n    /// @return effectiveShareReserves The effective share reserves.\\n    function calculateEffectiveShareReserves(\\n        uint256 _shareReserves,\\n        int256 _shareAdjustment\\n    ) internal pure returns (uint256 effectiveShareReserves) {\\n        bool success;\\n        (effectiveShareReserves, success) = calculateEffectiveShareReservesSafe(\\n            _shareReserves,\\n            _shareAdjustment\\n        );\\n        if (!success) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n    }\\n\\n    /// @dev Calculates the effective share reserves. The effective share\\n    ///      reserves are the share reserves minus the share adjustment or\\n    ///      z - zeta. We use the effective share reserves as the z-parameter\\n    ///      to the YieldSpace pricing model. The share adjustment is used to\\n    ///      hold the pricing mechanism invariant under the flat component of\\n    ///      flat+curve trades.\\n    /// @param _shareReserves The pool's share reserves.\\n    /// @param _shareAdjustment The pool's share adjustment.\\n    /// @return The effective share reserves.\\n    /// @return A flag indicating if the calculation succeeded.\\n    function calculateEffectiveShareReservesSafe(\\n        uint256 _shareReserves,\\n        int256 _shareAdjustment\\n    ) internal pure returns (uint256, bool) {\\n        int256 effectiveShareReserves = _shareReserves.toInt256() -\\n            _shareAdjustment;\\n        if (effectiveShareReserves < 0) {\\n            return (0, false);\\n        }\\n        return (uint256(effectiveShareReserves), true);\\n    }\\n\\n    /// @dev Calculates the proceeds in shares of closing a short position. This\\n    ///      takes into account the trading profits, the interest that was\\n    ///      earned by the short, the flat fee the short pays, and the amount of\\n    ///      margin that was released by closing the short. The math for the\\n    ///      short's proceeds in base is given by:\\n    ///\\n    ///      proceeds = (1 + flat_fee) * dy - c * dz + (c1 - c0) * (dy / c0)\\n    ///               = (1 + flat_fee) * dy - c * dz + (c1 / c0) * dy - dy\\n    ///               = (c1 / c0 + flat_fee) * dy - c * dz\\n    ///\\n    ///      We convert the proceeds to shares by dividing by the current vault\\n    ///      share price. In the event that the interest is negative and\\n    ///      outweighs the trading profits and margin released, the short's\\n    ///      proceeds are marked to zero.\\n    ///\\n    ///      This variant of the calculation overestimates the short proceeds.\\n    /// @param _bondAmount The amount of bonds underlying the closed short.\\n    /// @param _shareAmount The amount of shares that it costs to close the\\n    ///                     short.\\n    /// @param _openVaultSharePrice The vault share price at the short's open.\\n    /// @param _closeVaultSharePrice The vault share price at the short's close.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _flatFee The flat fee currently within the pool\\n    /// @return shareProceeds The short proceeds in shares.\\n    function calculateShortProceedsUp(\\n        uint256 _bondAmount,\\n        uint256 _shareAmount,\\n        uint256 _openVaultSharePrice,\\n        uint256 _closeVaultSharePrice,\\n        uint256 _vaultSharePrice,\\n        uint256 _flatFee\\n    ) internal pure returns (uint256 shareProceeds) {\\n        // NOTE: Round up to overestimate the short proceeds.\\n        //\\n        // The total value is the amount of shares that underlies the bonds that\\n        // were shorted. The bonds start by being backed 1:1 with base, and the\\n        // total value takes into account all of the interest that has accrued\\n        // since the short was opened.\\n        //\\n        // total_value = (c1 / (c0 * c)) * dy\\n        uint256 totalValue = _bondAmount\\n            .mulDivUp(_closeVaultSharePrice, _openVaultSharePrice)\\n            .divUp(_vaultSharePrice);\\n\\n        // NOTE: Round up to overestimate the short proceeds.\\n        //\\n        // We increase the total value by the flat fee amount, because it is\\n        // included in the total amount of capital underlying the short.\\n        totalValue += _bondAmount.mulDivUp(_flatFee, _vaultSharePrice);\\n\\n        // If the interest is more negative than the trading profits and margin\\n        // released, then the short proceeds are marked to zero. Otherwise, we\\n        // calculate the proceeds as the sum of the trading proceeds, the\\n        // interest proceeds, and the margin released.\\n        if (totalValue > _shareAmount) {\\n            // proceeds = (c1 / (c0 * c)) * dy - dz\\n            unchecked {\\n                shareProceeds = totalValue - _shareAmount;\\n            }\\n        }\\n\\n        return shareProceeds;\\n    }\\n\\n    /// @dev Calculates the proceeds in shares of closing a short position. This\\n    ///      takes into account the trading profits, the interest that was\\n    ///      earned by the short, the flat fee the short pays, and the amount of\\n    ///      margin that was released by closing the short. The math for the\\n    ///      short's proceeds in base is given by:\\n    ///\\n    ///      proceeds = (1 + flat_fee) * dy - c * dz + (c1 - c0) * (dy / c0)\\n    ///               = (1 + flat_fee) * dy - c * dz + (c1 / c0) * dy - dy\\n    ///               = (c1 / c0 + flat_fee) * dy - c * dz\\n    ///\\n    ///      We convert the proceeds to shares by dividing by the current vault\\n    ///      share price. In the event that the interest is negative and\\n    ///      outweighs the trading profits and margin released, the short's\\n    ///      proceeds are marked to zero.\\n    ///\\n    ///      This variant of the calculation underestimates the short proceeds.\\n    /// @param _bondAmount The amount of bonds underlying the closed short.\\n    /// @param _shareAmount The amount of shares that it costs to close the\\n    ///                     short.\\n    /// @param _openVaultSharePrice The vault share price at the short's open.\\n    /// @param _closeVaultSharePrice The vault share price at the short's close.\\n    /// @param _vaultSharePrice The current vault share price.\\n    /// @param _flatFee The flat fee currently within the pool\\n    /// @return shareProceeds The short proceeds in shares.\\n    function calculateShortProceedsDown(\\n        uint256 _bondAmount,\\n        uint256 _shareAmount,\\n        uint256 _openVaultSharePrice,\\n        uint256 _closeVaultSharePrice,\\n        uint256 _vaultSharePrice,\\n        uint256 _flatFee\\n    ) internal pure returns (uint256 shareProceeds) {\\n        // NOTE: Round down to underestimate the short proceeds.\\n        //\\n        // The total value is the amount of shares that underlies the bonds that\\n        // were shorted. The bonds start by being backed 1:1 with base, and the\\n        // total value takes into account all of the interest that has accrued\\n        // since the short was opened.\\n        //\\n        // total_value = (c1 / (c0 * c)) * dy\\n        uint256 totalValue = _bondAmount\\n            .mulDivDown(_closeVaultSharePrice, _openVaultSharePrice)\\n            .divDown(_vaultSharePrice);\\n\\n        // NOTE: Round down to underestimate the short proceeds.\\n        //\\n        // We increase the total value by the flat fee amount, because it is\\n        // included in the total amount of capital underlying the short.\\n        totalValue += _bondAmount.mulDivDown(_flatFee, _vaultSharePrice);\\n\\n        // If the interest is more negative than the trading profits and margin\\n        // released, then the short proceeds are marked to zero. Otherwise, we\\n        // calculate the proceeds as the sum of the trading proceeds, the\\n        // interest proceeds, and the margin released.\\n        if (totalValue > _shareAmount) {\\n            // proceeds = (c1 / (c0 * c)) * dy - dz\\n            unchecked {\\n                shareProceeds = totalValue - _shareAmount;\\n            }\\n        }\\n\\n        return shareProceeds;\\n    }\\n\\n    /// @dev Since traders pay a curve fee when they open longs on Hyperdrive,\\n    ///      it is possible for traders to receive a negative interest rate even\\n    ///      if curve's spot price is less than or equal to 1.\\n    ///\\n    ///      Given the curve fee `phi_c` and the starting spot price `p_0`, the\\n    ///      maximum spot price is given by:\\n    ///\\n    ///      p_max = (1 - phi_f) / (1 + phi_c * (1 / p_0 - 1) * (1 - phi_f))\\n    ///\\n    ///      We underestimate the maximum spot price to be conservative.\\n    /// @param _startingSpotPrice The spot price at the start of the trade.\\n    /// @param _curveFee The curve fee.\\n    /// @param _flatFee The flat fee.\\n    /// @return The maximum spot price.\\n    function calculateOpenLongMaxSpotPrice(\\n        uint256 _startingSpotPrice,\\n        uint256 _curveFee,\\n        uint256 _flatFee\\n    ) internal pure returns (uint256) {\\n        // NOTE: Round down to underestimate the maximum spot price.\\n        return\\n            (ONE - _flatFee).divDown(\\n                // NOTE: Round up since this is in the denominator.\\n                ONE +\\n                    _curveFee.mulUp(ONE.divUp(_startingSpotPrice) - ONE).mulUp(\\n                        ONE - _flatFee\\n                    )\\n            );\\n    }\\n\\n    /// @dev Since traders pay a curve fee when they close shorts on Hyperdrive,\\n    ///      it is possible for traders to receive a negative interest rate even\\n    ///      if curve's spot price is less than or equal to 1.\\n    ///\\n    ///      Given the curve fee `phi_c` and the starting spot price `p_0`, the\\n    ///      maximum spot price is given by:\\n    ///\\n    ///      p_max = 1 - phi_c * (1 - p_0)\\n    ///\\n    ///      We underestimate the maximum spot price to be conservative.\\n    /// @param _startingSpotPrice The spot price at the start of the trade.\\n    /// @param _curveFee The curve fee.\\n    /// @return The maximum spot price.\\n    function calculateCloseShortMaxSpotPrice(\\n        uint256 _startingSpotPrice,\\n        uint256 _curveFee\\n    ) internal pure returns (uint256) {\\n        // Round the rhs down to underestimate the maximum spot price.\\n        return ONE - _curveFee.mulUp(ONE - _startingSpotPrice);\\n    }\\n\\n    /// @dev Calculates the number of bonds a user will receive when opening a\\n    ///      long position.\\n    /// @param _effectiveShareReserves The pool's effective share reserves. The\\n    ///        effective share reserves are a modified version of the share\\n    ///        reserves used when pricing trades.\\n    /// @param _bondReserves The pool's bond reserves.\\n    /// @param _shareAmount The amount of shares the user is depositing.\\n    /// @param _timeStretch The time stretch parameter.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _initialVaultSharePrice The initial vault share price.\\n    /// @return bondReservesDelta The bonds paid by the reserves in the trade.\\n    function calculateOpenLong(\\n        uint256 _effectiveShareReserves,\\n        uint256 _bondReserves,\\n        uint256 _shareAmount,\\n        uint256 _timeStretch,\\n        uint256 _vaultSharePrice,\\n        uint256 _initialVaultSharePrice\\n    ) internal pure returns (uint256) {\\n        // NOTE: We underestimate the trader's bond proceeds to avoid sandwich\\n        // attacks.\\n        return\\n            YieldSpaceMath.calculateBondsOutGivenSharesInDown(\\n                _effectiveShareReserves,\\n                _bondReserves,\\n                _shareAmount,\\n                // NOTE: Since the bonds traded on the curve are newly minted,\\n                // we use a time remaining of 1. This means that we can use\\n                // `_timeStretch = t * _timeStretch`.\\n                ONE - _timeStretch,\\n                _vaultSharePrice,\\n                _initialVaultSharePrice\\n            );\\n    }\\n\\n    /// @dev Calculates the amount of shares a user will receive when closing a\\n    ///      long position.\\n    /// @param _effectiveShareReserves The pool's effective share reserves. The\\n    ///        effective share reserves are a modified version of the share\\n    ///        reserves used when pricing trades.\\n    /// @param _bondReserves The pool's bond reserves.\\n    /// @param _amountIn The amount of bonds the user is closing.\\n    /// @param _normalizedTimeRemaining The normalized time remaining of the\\n    ///        position.\\n    /// @param _timeStretch The time stretch parameter.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _initialVaultSharePrice The vault share price when the pool was\\n    ///        deployed.\\n    /// @return shareCurveDelta The shares paid by the reserves in the trade.\\n    /// @return bondCurveDelta The bonds paid to the reserves in the trade.\\n    /// @return shareProceeds The shares that the user will receive.\\n    function calculateCloseLong(\\n        uint256 _effectiveShareReserves,\\n        uint256 _bondReserves,\\n        uint256 _amountIn,\\n        uint256 _normalizedTimeRemaining,\\n        uint256 _timeStretch,\\n        uint256 _vaultSharePrice,\\n        uint256 _initialVaultSharePrice\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 shareCurveDelta,\\n            uint256 bondCurveDelta,\\n            uint256 shareProceeds\\n        )\\n    {\\n        // NOTE: We underestimate the trader's share proceeds to avoid sandwich\\n        // attacks.\\n        //\\n        // We consider `(1 - timeRemaining) * amountIn` of the bonds to be fully\\n        // matured and timeRemaining * amountIn of the bonds to be newly\\n        // minted. The fully matured bonds are redeemed one-to-one to base\\n        // (our result is given in shares, so we divide the one-to-one\\n        // redemption by the vault share price) and the newly minted bonds are\\n        // traded on a YieldSpace curve configured to `timeRemaining = 1`.\\n        shareProceeds = _amountIn.mulDivDown(\\n            ONE - _normalizedTimeRemaining,\\n            _vaultSharePrice\\n        );\\n        if (_normalizedTimeRemaining > 0) {\\n            // NOTE: Round the `bondCurveDelta` down to underestimate the share\\n            // proceeds.\\n            //\\n            // Calculate the curved part of the trade.\\n            bondCurveDelta = _amountIn.mulDown(_normalizedTimeRemaining);\\n\\n            // NOTE: Round the `shareCurveDelta` down to underestimate the\\n            // share proceeds.\\n            shareCurveDelta = YieldSpaceMath.calculateSharesOutGivenBondsInDown(\\n                _effectiveShareReserves,\\n                _bondReserves,\\n                bondCurveDelta,\\n                // NOTE: Since the bonds traded on the curve are newly minted,\\n                // we use a time remaining of 1. This means that we can use\\n                // `_timeStretch = t * _timeStretch`.\\n                ONE - _timeStretch,\\n                _vaultSharePrice,\\n                _initialVaultSharePrice\\n            );\\n            shareProceeds += shareCurveDelta;\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of shares that will be received given a\\n    ///      specified amount of bonds.\\n    /// @param _effectiveShareReserves The pool's effective share reserves. The\\n    ///        effective share reserves are a modified version of the share\\n    ///        reserves used when pricing trades.\\n    /// @param _bondReserves The pool's bonds reserves.\\n    /// @param _amountIn The amount of bonds the user is providing.\\n    /// @param _timeStretch The time stretch parameter.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _initialVaultSharePrice The initial vault share price.\\n    /// @return The shares paid by the reserves in the trade.\\n    function calculateOpenShort(\\n        uint256 _effectiveShareReserves,\\n        uint256 _bondReserves,\\n        uint256 _amountIn,\\n        uint256 _timeStretch,\\n        uint256 _vaultSharePrice,\\n        uint256 _initialVaultSharePrice\\n    ) internal pure returns (uint256) {\\n        // NOTE: We underestimate the LP's share payment to avoid sandwiches.\\n        return\\n            YieldSpaceMath.calculateSharesOutGivenBondsInDown(\\n                _effectiveShareReserves,\\n                _bondReserves,\\n                _amountIn,\\n                // NOTE: Since the bonds traded on the curve are newly minted,\\n                // we use a time remaining of 1. This means that we can use\\n                // `_timeStretch = t * _timeStretch`.\\n                ONE - _timeStretch,\\n                _vaultSharePrice,\\n                _initialVaultSharePrice\\n            );\\n    }\\n\\n    /// @dev Calculates the amount of base that a user will receive when closing\\n    ///      a short position.\\n    /// @param _effectiveShareReserves The pool's effective share reserves. The\\n    ///        effective share reserves are a modified version of the share\\n    ///        reserves used when pricing trades.\\n    /// @param _bondReserves The pool's bonds reserves.\\n    /// @param _amountOut The amount of the asset that is received.\\n    /// @param _normalizedTimeRemaining The amount of time remaining until\\n    ///        maturity in seconds.\\n    /// @param _timeStretch The time stretch parameter.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _initialVaultSharePrice The initial vault share price.\\n    /// @return shareCurveDelta The shares paid to the reserves in the trade.\\n    /// @return bondCurveDelta The bonds paid by the reserves in the trade.\\n    /// @return sharePayment The shares that the user must pay.\\n    function calculateCloseShort(\\n        uint256 _effectiveShareReserves,\\n        uint256 _bondReserves,\\n        uint256 _amountOut,\\n        uint256 _normalizedTimeRemaining,\\n        uint256 _timeStretch,\\n        uint256 _vaultSharePrice,\\n        uint256 _initialVaultSharePrice\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 shareCurveDelta,\\n            uint256 bondCurveDelta,\\n            uint256 sharePayment\\n        )\\n    {\\n        // NOTE: We overestimate the trader's share payment to avoid sandwiches.\\n        //\\n        // Since we are buying bonds, it's possible that `timeRemaining < 1`.\\n        // We consider `(1 - timeRemaining) * amountOut` of the bonds being\\n        // purchased to be fully matured and `timeRemaining * amountOut of the\\n        // bonds to be newly minted. The fully matured bonds are redeemed\\n        // one-to-one to base (our result is given in shares, so we divide\\n        // the one-to-one redemption by the vault share price) and the newly\\n        // minted bonds are traded on a YieldSpace curve configured to\\n        // timeRemaining = 1.\\n        sharePayment = _amountOut.mulDivUp(\\n            ONE - _normalizedTimeRemaining,\\n            _vaultSharePrice\\n        );\\n        if (_normalizedTimeRemaining > 0) {\\n            // NOTE: Round the `bondCurveDelta` up to overestimate the share\\n            // payment.\\n            bondCurveDelta = _amountOut.mulUp(_normalizedTimeRemaining);\\n\\n            // NOTE: Round the `shareCurveDelta` up to overestimate the share\\n            // payment.\\n            shareCurveDelta = YieldSpaceMath.calculateSharesInGivenBondsOutUp(\\n                _effectiveShareReserves,\\n                _bondReserves,\\n                bondCurveDelta,\\n                // NOTE: Since the bonds traded on the curve are newly minted,\\n                // we use a time remaining of 1. This means that we can use\\n                // `_timeStretch = t * _timeStretch`.\\n                ONE - _timeStretch,\\n                _vaultSharePrice,\\n                _initialVaultSharePrice\\n            );\\n            sharePayment += shareCurveDelta;\\n        }\\n    }\\n\\n    /// @dev If negative interest accrued over the term, we scale the share\\n    ///      proceeds by the negative interest amount. Shorts should be\\n    ///      responsible for negative interest, but negative interest can exceed\\n    ///      the margin that shorts provide. This leaves us with no choice but\\n    ///      to attribute the negative interest to longs. Along with scaling the\\n    ///      share proceeds, we also scale the fee amounts.\\n    ///\\n    ///      In order for our AMM invariant to be maintained, the effective\\n    ///      share reserves need to be adjusted by the same amount as the share\\n    ///      reserves delta calculated with YieldSpace including fees. We reduce\\n    ///      the share reserves by `min(c_1 / c_0, 1) * shareReservesDelta` and\\n    ///      the share adjustment by the `shareAdjustmentDelta`. We can solve\\n    ///      these equations simultaneously to find the share adjustment delta\\n    ///      as:\\n    ///\\n    ///      shareAdjustmentDelta = min(c_1 / c_0, 1) * sharePayment -\\n    ///                             shareReservesDelta\\n    ///\\n    ///      We underestimate the share proceeds to avoid sandwiches, and we\\n    ///      round the share reserves delta and share adjustment in the same\\n    ///      direction for consistency.\\n    /// @param _shareProceeds The proceeds in shares from the trade.\\n    /// @param _shareReservesDelta The change in share reserves from the trade.\\n    /// @param _shareCurveDelta The curve portion of the change in share reserves.\\n    /// @param _totalGovernanceFee The total governance fee.\\n    /// @param _openVaultSharePrice The vault share price at the beginning of\\n    ///        the term.\\n    /// @param _closeVaultSharePrice The vault share price at the end of the term.\\n    /// @param _isLong A flag indicating whether or not the trade is a long.\\n    /// @return The adjusted share proceeds.\\n    /// @return The adjusted share reserves delta.\\n    /// @return The adjusted share close proceeds.\\n    /// @return The share adjustment delta.\\n    /// @return The adjusted total governance fee.\\n    function calculateNegativeInterestOnClose(\\n        uint256 _shareProceeds,\\n        uint256 _shareReservesDelta,\\n        uint256 _shareCurveDelta,\\n        uint256 _totalGovernanceFee,\\n        uint256 _openVaultSharePrice,\\n        uint256 _closeVaultSharePrice,\\n        bool _isLong\\n    ) internal pure returns (uint256, uint256, uint256, int256, uint256) {\\n        // The share reserves delta, share curve delta, and total governance fee\\n        // need to be scaled down in proportion to the negative interest. This\\n        // results in the pool receiving a lower payment, which reflects the\\n        // fact that negative interest is attributed to longs.\\n        //\\n        // In order for our AMM invariant to be maintained, the effective share\\n        // reserves need to be adjusted by the same amount as the share reserves\\n        // delta calculated with YieldSpace including fees. We increase the\\n        // share reserves by `min(c_1 / c_0, 1) * shareReservesDelta` and the\\n        // share adjustment by the `shareAdjustmentDelta`. We can solve these\\n        // equations simultaneously to find the share adjustment delta as:\\n        //\\n        // shareAdjustmentDelta = min(c_1 / c_0, 1) * shareReservesDelta -\\n        //                        shareCurveDelta\\n        int256 shareAdjustmentDelta;\\n        if (_closeVaultSharePrice < _openVaultSharePrice) {\\n            // NOTE: Round down to underestimate the share proceeds.\\n            //\\n            // We only need to scale the proceeds in the case that we're closing\\n            // a long since `calculateShortProceeds` accounts for negative\\n            // interest.\\n            if (_isLong) {\\n                _shareProceeds = _shareProceeds.mulDivDown(\\n                    _closeVaultSharePrice,\\n                    _openVaultSharePrice\\n                );\\n            }\\n\\n            // NOTE: Round down to underestimate the quantities.\\n            //\\n            // Scale the other values.\\n            _shareReservesDelta = _shareReservesDelta.mulDivDown(\\n                _closeVaultSharePrice,\\n                _openVaultSharePrice\\n            );\\n            // NOTE: Using unscaled `shareCurveDelta`.\\n            shareAdjustmentDelta =\\n                _shareReservesDelta.toInt256() -\\n                _shareCurveDelta.toInt256();\\n            _shareCurveDelta = _shareCurveDelta.mulDivDown(\\n                _closeVaultSharePrice,\\n                _openVaultSharePrice\\n            );\\n            _totalGovernanceFee = _totalGovernanceFee.mulDivDown(\\n                _closeVaultSharePrice,\\n                _openVaultSharePrice\\n            );\\n        } else {\\n            shareAdjustmentDelta =\\n                _shareReservesDelta.toInt256() -\\n                _shareCurveDelta.toInt256();\\n        }\\n\\n        return (\\n            _shareProceeds,\\n            _shareReservesDelta,\\n            _shareCurveDelta,\\n            shareAdjustmentDelta,\\n            _totalGovernanceFee\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LPMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { SignedMath } from \\\"openzeppelin/utils/math/SignedMath.sol\\\";\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\nimport { FixedPointMath, ONE } from \\\"./FixedPointMath.sol\\\";\\nimport { HyperdriveMath } from \\\"./HyperdriveMath.sol\\\";\\nimport { SafeCast } from \\\"./SafeCast.sol\\\";\\nimport { YieldSpaceMath } from \\\"./YieldSpaceMath.sol\\\";\\n\\n/// @author DELV\\n/// @title LPMath\\n/// @notice Math for the Hyperdrive LP system.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\nlibrary LPMath {\\n    using FixedPointMath for *;\\n    using SafeCast for uint256;\\n    using SignedMath for int256;\\n\\n    /// @dev The maximum number of iterations for the share proceeds calculation.\\n    uint256 internal constant SHARE_PROCEEDS_MAX_ITERATIONS = 4;\\n\\n    /// @dev The minimum tolerance for the share proceeds calculation to\\n    ///      short-circuit.\\n    uint256 internal constant SHARE_PROCEEDS_SHORT_CIRCUIT_TOLERANCE = 1e9;\\n\\n    /// @dev The minimum tolerance for the share proceeds calculation to\\n    ///      succeed.\\n    uint256 internal constant SHARE_PROCEEDS_TOLERANCE = 1e14;\\n\\n    struct PresentValueParams {\\n        uint256 shareReserves;\\n        int256 shareAdjustment;\\n        uint256 bondReserves;\\n        uint256 vaultSharePrice;\\n        uint256 initialVaultSharePrice;\\n        uint256 minimumShareReserves;\\n        uint256 minimumTransactionAmount;\\n        uint256 timeStretch;\\n        uint256 longsOutstanding;\\n        uint256 longAverageTimeRemaining;\\n        uint256 shortsOutstanding;\\n        uint256 shortAverageTimeRemaining;\\n    }\\n\\n    struct DistributeExcessIdleParams {\\n        PresentValueParams presentValueParams;\\n        uint256 startingPresentValue;\\n        uint256 activeLpTotalSupply;\\n        uint256 withdrawalSharesTotalSupply;\\n        uint256 idle;\\n        int256 netCurveTrade;\\n        uint256 originalShareReserves;\\n        int256 originalShareAdjustment;\\n        uint256 originalBondReserves;\\n    }\\n\\n    /// @dev Calculates the initial reserves. We solve for the initial reserves\\n    ///      by solving the following equations simultaneously:\\n    ///\\n    ///      (1) c * z = c * z_e + p_target * y\\n    ///\\n    ///      (2) p_target = ((mu * z_e) / y) ** t_s\\n    ///\\n    ///      where p_target is the target spot price implied by the target spot\\n    ///      rate.\\n    /// @param _shareAmount The amount of shares used to initialize the pool.\\n    /// @param _vaultSharePrice The vault share price.\\n    /// @param _initialVaultSharePrice The initial vault share price.\\n    /// @param _targetApr The target rate.\\n    /// @param _positionDuration The position duration.\\n    /// @param _timeStretch The time stretch.\\n    /// @return shareReserves The initial share reserves.\\n    /// @return shareAdjustment The initial share adjustment.\\n    /// @return bondReserves The initial bond reserves.\\n    function calculateInitialReserves(\\n        uint256 _shareAmount,\\n        uint256 _vaultSharePrice,\\n        uint256 _initialVaultSharePrice,\\n        uint256 _targetApr,\\n        uint256 _positionDuration,\\n        uint256 _timeStretch\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 shareReserves,\\n            int256 shareAdjustment,\\n            uint256 bondReserves\\n        )\\n    {\\n        // NOTE: Round down to underestimate the initial bond reserves.\\n        //\\n        // Normalize the time to maturity to fractions of a year since the\\n        // provided rate is an APR.\\n        uint256 t = _positionDuration.divDown(365 days);\\n\\n        // NOTE: Round up to underestimate the initial bond reserves.\\n        //\\n        // Calculate the target price implied by the target rate.\\n        uint256 targetPrice = ONE.divUp(ONE + _targetApr.mulDown(t));\\n\\n        // The share reserves is just the share amount since we are initializing\\n        // the pool.\\n        shareReserves = _shareAmount;\\n\\n        // NOTE: Round down to underestimate the initial bond reserves.\\n        //\\n        // Calculate the initial bond reserves. This is given by:\\n        //\\n        // y = (mu * c * z) / (c * p_target ** (1 / t_s) + mu * p_target)\\n        bondReserves = _initialVaultSharePrice.mulDivDown(\\n            _vaultSharePrice.mulDown(shareReserves),\\n            _vaultSharePrice.mulUp(targetPrice.pow(ONE.divDown(_timeStretch))) +\\n                _initialVaultSharePrice.mulUp(targetPrice)\\n        );\\n\\n        // NOTE: Round down to underestimate the initial share adjustment.\\n        //\\n        // Calculate the initial share adjustment. This is given by:\\n        //\\n        // zeta = (p_target * y) / c\\n        shareAdjustment = int256(\\n            bondReserves.mulDivDown(targetPrice, _vaultSharePrice)\\n        );\\n    }\\n\\n    /// @dev Calculates the global long exposure after an update is made to\\n    ///      a checkpoint exposure.\\n    /// @param _longExposure The global long exposure.\\n    /// @param _before The checkpoint long exposure before the update.\\n    /// @param _after The checkpoint long exposure after the update.\\n    /// @return The updated global long exposure.\\n    function calculateLongExposure(\\n        uint256 _longExposure,\\n        int256 _before,\\n        int256 _after\\n    ) internal pure returns (uint256) {\\n        // The global long exposure is the sum of the non-netted longs in each\\n        // checkpoint. To update this value, we subtract the current value\\n        // (`_before.max(0)`) and add the new value (`_after.max(0)`).\\n        int256 delta = FixedPointMath.max(_after, 0) -\\n            FixedPointMath.max(_before, 0);\\n        if (delta > 0) {\\n            _longExposure += uint256(delta);\\n        } else if (delta < 0) {\\n            _longExposure -= uint256(-delta);\\n        }\\n\\n        return _longExposure;\\n    }\\n\\n    /// @dev Calculates the new share reserves, share adjustment, and bond\\n    ///      reserves after liquidity is added or removed from the pool. This\\n    ///      update is made in such a way that the pool's spot price remains\\n    ///      constant.\\n    /// @param _shareReserves The current share reserves.\\n    /// @param _shareAdjustment The current share adjustment.\\n    /// @param _bondReserves The current bond reserves.\\n    /// @param _minimumShareReserves The minimum share reserves.\\n    /// @param _shareReservesDelta The change in share reserves.\\n    /// @return shareReserves The updated share reserves.\\n    /// @return shareAdjustment The updated share adjustment.\\n    /// @return bondReserves The updated bond reserves.\\n    /// @return A flag indicating if the calculation succeeded.\\n    function calculateUpdateLiquiditySafe(\\n        uint256 _shareReserves,\\n        int256 _shareAdjustment,\\n        uint256 _bondReserves,\\n        uint256 _minimumShareReserves,\\n        int256 _shareReservesDelta\\n    )\\n        public\\n        pure\\n        returns (\\n            uint256 shareReserves,\\n            int256 shareAdjustment,\\n            uint256 bondReserves,\\n            bool\\n        )\\n    {\\n        // If the share reserves delta is zero, we can return early since no\\n        // action is needed.\\n        if (_shareReservesDelta == 0) {\\n            return (_shareReserves, _shareAdjustment, _bondReserves, true);\\n        }\\n\\n        // Update the share reserves by applying the share reserves delta. We\\n        // ensure that our minimum share reserves invariant is still maintained.\\n        int256 shareReserves_ = _shareReserves.toInt256() + _shareReservesDelta;\\n        if (shareReserves_ < _minimumShareReserves.toInt256()) {\\n            return (0, 0, 0, false);\\n        }\\n        shareReserves = uint256(shareReserves_);\\n\\n        // Update the share adjustment by holding the ratio of share reserves\\n        // to share adjustment proportional. In general, our pricing model cannot\\n        // support negative values for the z coordinate, so this is important as\\n        // it ensures that if z - zeta starts as a positive value, it ends as a\\n        // positive value. With this in mind, we update the share adjustment as:\\n        //\\n        // zeta_old / z_old = zeta_new / z_new\\n        //                  =>\\n        // zeta_new = zeta_old * (z_new / z_old)\\n        if (_shareAdjustment >= 0) {\\n            // NOTE: Rounding down to have a larger effective share reserves.\\n            shareAdjustment = shareReserves\\n                .mulDivDown(uint256(_shareAdjustment), _shareReserves)\\n                .toInt256();\\n        } else {\\n            // NOTE: Rounding up to have a larger effective share reserves.\\n            shareAdjustment = -shareReserves\\n                .mulDivUp(uint256(-_shareAdjustment), _shareReserves)\\n                .toInt256();\\n        }\\n\\n        // NOTE: Rounding down to avoid introducing dust into the computation.\\n        //\\n        // The liquidity update should hold the spot price invariant. The spot\\n        // price of base in terms of bonds is given by:\\n        //\\n        // p = (mu * (z - zeta) / y) ** tau\\n        //\\n        // This formula implies that holding the ratio of share reserves to bond\\n        // reserves constant will hold the spot price constant. This allows us\\n        // to calculate the updated bond reserves as:\\n        //\\n        // (z_old - zeta_old) / y_old = (z_new - zeta_new) / y_new\\n        //                          =>\\n        // y_new = (z_new - zeta_new) * (y_old / (z_old - zeta_old))\\n        (uint256 oldEffectiveShareReserves, bool success) = HyperdriveMath\\n            .calculateEffectiveShareReservesSafe(\\n                _shareReserves,\\n                _shareAdjustment\\n            );\\n        if (!success) {\\n            return (0, 0, 0, false);\\n        }\\n        uint256 effectiveShareReserves;\\n        (effectiveShareReserves, success) = HyperdriveMath\\n            .calculateEffectiveShareReservesSafe(\\n                shareReserves,\\n                shareAdjustment\\n            );\\n        if (!success) {\\n            return (0, 0, 0, false);\\n        }\\n        bondReserves = _bondReserves.mulDivDown(\\n            effectiveShareReserves,\\n            oldEffectiveShareReserves\\n        );\\n\\n        return (shareReserves, shareAdjustment, bondReserves, true);\\n    }\\n\\n    /// @dev Calculates the present value LPs capital in the pool and reverts\\n    ///      if the value is negative. This calculation underestimates the\\n    ///      present value to avoid paying out more than the pool can afford.\\n    /// @param _params The parameters for the present value calculation.\\n    /// @return The present value of the pool.\\n    function calculatePresentValue(\\n        PresentValueParams memory _params\\n    ) public pure returns (uint256) {\\n        (uint256 presentValue, bool success) = calculatePresentValueSafe(\\n            _params\\n        );\\n        if (!success) {\\n            revert IHyperdrive.InvalidPresentValue();\\n        }\\n        return presentValue;\\n    }\\n\\n    /// @dev Calculates the present value LPs capital in the pool and returns\\n    ///      a flag indicating whether the calculation succeeded or failed.\\n    ///      For the most part, this calculation underestimates the present\\n    ///      value to avoid paying out more than the pool can afford; however,\\n    ///      it adheres faithfully to the rounding utilized when positions are\\n    ///      closed to accurately simulate the impact of closing the net curve\\n    ///      position.\\n    /// @param _params The parameters for the present value calculation.\\n    /// @return The present value of the pool.\\n    /// @return A flag indicating whether the calculation succeeded or failed.\\n    function calculatePresentValueSafe(\\n        PresentValueParams memory _params\\n    ) public pure returns (uint256, bool) {\\n        // We calculate the LP present value by simulating the closing of all\\n        // of the outstanding long and short positions and applying this impact\\n        // on the share reserves. The present value is the share reserves after\\n        // the impact of the trades minus the minimum share reserves:\\n        //\\n        // PV = z + net_c + net_f - z_min\\n        int256 presentValue;\\n        {\\n            (int256 netCurveTrade, bool success) = calculateNetCurveTradeSafe(\\n                _params\\n            );\\n            if (!success) {\\n                return (0, false);\\n            }\\n            presentValue =\\n                _params.shareReserves.toInt256() +\\n                netCurveTrade +\\n                calculateNetFlatTrade(_params) -\\n                _params.minimumShareReserves.toInt256();\\n        }\\n\\n        // If the present value is negative, return a failure flag indicating\\n        // the failure.\\n        if (presentValue < 0) {\\n            return (0, false);\\n        }\\n\\n        return (uint256(presentValue), true);\\n    }\\n\\n    /// @dev Calculates the result of closing the net curve position.\\n    /// @param _params The parameters for the present value calculation.\\n    /// @return The impact of closing the net curve position on the share\\n    ///         reserves.\\n    /// @return A flag indicating whether the calculation succeeded or failed.\\n    function calculateNetCurveTradeSafe(\\n        PresentValueParams memory _params\\n    ) internal pure returns (int256, bool) {\\n        // NOTE: To underestimate the impact of closing the net curve position,\\n        // we round up the long side of the net curve position (since this\\n        // results in a larger value removed from the share reserves) and round\\n        // down the short side of the net curve position (since this results in\\n        // a smaller value added to the share reserves).\\n        //\\n        // The net curve position is the net of the longs and shorts that are\\n        // currently tradeable on the curve. Given the amount of outstanding\\n        // longs `y_l` and shorts `y_s` as well as the average time remaining\\n        // of outstanding longs `t_l` and shorts `t_s`, we can\\n        // compute the net curve position as:\\n        //\\n        // netCurveTrade = y_l * t_l - y_s * t_s.\\n        int256 netCurvePosition = _params\\n            .longsOutstanding\\n            .mulUp(_params.longAverageTimeRemaining)\\n            .toInt256() -\\n            _params\\n                .shortsOutstanding\\n                .mulDown(_params.shortAverageTimeRemaining)\\n                .toInt256();\\n        (uint256 effectiveShareReserves, bool success) = HyperdriveMath\\n            .calculateEffectiveShareReservesSafe(\\n                _params.shareReserves,\\n                _params.shareAdjustment\\n            );\\n        if (!success) {\\n            // NOTE: Return 0 to indicate that the net curve trade couldn't be\\n            // computed.\\n            return (0, false);\\n        }\\n\\n        // If the net curve position is positive, then the pool is net long.\\n        // Closing the net curve position results in the longs being paid out\\n        // from the share reserves, so we negate the result.\\n        if (netCurvePosition > 0) {\\n            uint256 netCurvePosition_ = uint256(netCurvePosition);\\n\\n            // Calculate the maximum amount of bonds that can be sold on\\n            // YieldSpace. If this calculation fails, then we return a failure\\n            // flag.\\n            uint256 maxCurveTrade;\\n            (maxCurveTrade, success) = YieldSpaceMath\\n                .calculateMaxSellBondsInSafe(\\n                    _params.shareReserves,\\n                    _params.shareAdjustment,\\n                    _params.bondReserves,\\n                    _params.minimumShareReserves,\\n                    ONE - _params.timeStretch,\\n                    _params.vaultSharePrice,\\n                    _params.initialVaultSharePrice\\n                );\\n            if (!success) {\\n                // NOTE: Return 0 to indicate that the net curve trade couldn't\\n                // be computed.\\n                return (0, false);\\n            }\\n\\n            // If the max curve trade is greater than the net curve position,\\n            // then we can close the entire net curve position.\\n            if (maxCurveTrade >= netCurvePosition_) {\\n                // NOTE: We round in the same direction as when closing longs\\n                // to accurately estimate the impact of closing the net curve\\n                // position.\\n                //\\n                // Calculate the net curve trade.\\n                uint256 netCurveTrade;\\n                (netCurveTrade, success) = YieldSpaceMath\\n                    .calculateSharesOutGivenBondsInDownSafe(\\n                        effectiveShareReserves,\\n                        _params.bondReserves,\\n                        netCurvePosition_,\\n                        ONE - _params.timeStretch,\\n                        _params.vaultSharePrice,\\n                        _params.initialVaultSharePrice\\n                    );\\n\\n                // If the net curve position is smaller than the minimum\\n                // transaction amount and the trade fails, we mark it to 0. This\\n                // prevents liveness problems when the net curve position is\\n                // very small.\\n                if (\\n                    !success &&\\n                    netCurvePosition_ < _params.minimumTransactionAmount\\n                ) {\\n                    return (0, true);\\n                }\\n                // Otherwise, we return a failure flag.\\n                else if (!success) {\\n                    return (0, false);\\n                }\\n\\n                return (-netCurveTrade.toInt256(), true);\\n            }\\n            // Otherwise, we can only close part of the net curve position.\\n            // Since the spot price is approximately zero after closing the\\n            // entire net curve position, we mark any remaining bonds to zero.\\n            else {\\n                // If the share adjustment is greater than or equal to zero,\\n                // then the effective share reserves are less than or equal to\\n                // the share reserves. In this case, the maximum amount of\\n                // shares that can be removed from the share reserves is\\n                // `effectiveShareReserves - minimumShareReserves`.\\n                if (_params.shareAdjustment >= 0) {\\n                    return (\\n                        -(effectiveShareReserves - _params.minimumShareReserves)\\n                            .toInt256(),\\n                        true\\n                    );\\n                }\\n                // Otherwise, the effective share reserves are greater than the\\n                // share reserves. In this case, the maximum amount of shares\\n                // that can be removed from the share reserves is\\n                // `shareReserves - minimumShareReserves`.\\n                else {\\n                    return (\\n                        -(_params.shareReserves - _params.minimumShareReserves)\\n                            .toInt256(),\\n                        true\\n                    );\\n                }\\n            }\\n        }\\n        // If the net curve position is negative, then the pool is net short.\\n        else if (netCurvePosition < 0) {\\n            uint256 netCurvePosition_ = uint256(-netCurvePosition);\\n\\n            // Calculate the maximum amount of bonds that can be bought on\\n            // YieldSpace.\\n            uint256 maxCurveTrade;\\n            (maxCurveTrade, success) = YieldSpaceMath\\n                .calculateMaxBuyBondsOutSafe(\\n                    effectiveShareReserves,\\n                    _params.bondReserves,\\n                    ONE - _params.timeStretch,\\n                    _params.vaultSharePrice,\\n                    _params.initialVaultSharePrice\\n                );\\n            if (!success) {\\n                return (0, false);\\n            }\\n\\n            // If the max curve trade is greater than the net curve position,\\n            // then we can close the entire net curve position.\\n            if (maxCurveTrade >= netCurvePosition_) {\\n                // NOTE: We round in the same direction as when closing shorts\\n                // to accurately estimate the impact of closing the net curve\\n                // position.\\n                //\\n                // Calculate the net curve trade.\\n                uint256 netCurveTrade;\\n                (netCurveTrade, success) = YieldSpaceMath\\n                    .calculateSharesInGivenBondsOutUpSafe(\\n                        effectiveShareReserves,\\n                        _params.bondReserves,\\n                        netCurvePosition_,\\n                        ONE - _params.timeStretch,\\n                        _params.vaultSharePrice,\\n                        _params.initialVaultSharePrice\\n                    );\\n\\n                // If the net curve position is smaller than the minimum\\n                // transaction amount and the trade fails, we mark it to 0. This\\n                // prevents liveness problems when the net curve position is\\n                // very small.\\n                if (\\n                    !success &&\\n                    netCurvePosition_ < _params.minimumTransactionAmount\\n                ) {\\n                    return (0, true);\\n                }\\n                // Otherwise, we return a failure flag.\\n                else if (!success) {\\n                    return (0, false);\\n                }\\n\\n                return (netCurveTrade.toInt256(), true);\\n            }\\n            // Otherwise, we can only close part of the net curve position.\\n            // Since the spot price is equal to one after closing the entire net\\n            // curve position, we mark any remaining bonds to one.\\n            else {\\n                // Calculate the max share payment.\\n                uint256 maxSharePayment;\\n                (maxSharePayment, success) = YieldSpaceMath\\n                    .calculateMaxBuySharesInSafe(\\n                        effectiveShareReserves,\\n                        _params.bondReserves,\\n                        ONE - _params.timeStretch,\\n                        _params.vaultSharePrice,\\n                        _params.initialVaultSharePrice\\n                    );\\n                if (!success) {\\n                    return (0, false);\\n                }\\n\\n                return (\\n                    // NOTE: We round the difference down to underestimate the\\n                    // impact of closing the net curve position.\\n                    (maxSharePayment +\\n                        (netCurvePosition_ - maxCurveTrade).divDown(\\n                            _params.vaultSharePrice\\n                        )).toInt256(),\\n                    true\\n                );\\n            }\\n        }\\n\\n        return (0, true);\\n    }\\n\\n    /// @dev Calculates the result of closing the net flat position.\\n    /// @param _params The parameters for the present value calculation.\\n    /// @return The impact of closing the net flat position on the share\\n    ///         reserves.\\n    function calculateNetFlatTrade(\\n        PresentValueParams memory _params\\n    ) internal pure returns (int256) {\\n        // NOTE: In order to underestimate the impact of closing all of the\\n        // flat trades, we round the impact of closing the shorts down and round\\n        // the impact of closing the longs up.\\n        //\\n        // The net curve position is the net of the component of longs and\\n        // shorts that have matured. Given the amount of outstanding longs `y_l`\\n        // and shorts `y_s` as well as the average time remaining of outstanding\\n        // longs `t_l` and shorts `t_s`, we can compute the net flat trade as:\\n        //\\n        // netFlatTrade = y_s * (1 - t_s) - y_l * (1 - t_l).\\n        return\\n            (\\n                _params.shortsOutstanding.mulDivDown(\\n                    ONE - _params.shortAverageTimeRemaining,\\n                    _params.vaultSharePrice\\n                )\\n            ).toInt256() -\\n            (\\n                _params.longsOutstanding.mulDivUp(\\n                    ONE - _params.longAverageTimeRemaining,\\n                    _params.vaultSharePrice\\n                )\\n            ).toInt256();\\n    }\\n\\n    /// @dev Calculates the amount of withdrawal shares that can be redeemed and\\n    ///      the share proceeds the withdrawal pool should receive given the\\n    ///      pool's current idle liquidity. We use the following algorithm to\\n    ///      ensure that the withdrawal pool receives the correct amount of\\n    ///      shares to (1) preserve the LP share price and (2) pay out as much\\n    ///      of the idle liquidity as possible to the withdrawal pool:\\n    ///\\n    ///      1. If `y_s * t_s <= y_l * t_l` or\\n    ///         `y_max_out(I) >= y_s * t_s - y_l * t_l`, set `dz_max = I` and\\n    ///         proceed to step (3). Otherwise, proceed to step (2).\\n    ///      2. Solve `y_max_out(dz_max) = y_s * t_s - y_l * t_l` for `dz_max`\\n    ///         using Newton's method.\\n    ///      3. Set `dw = (1 - PV(dz_max) / PV(0)) * l`. If `dw <= w`, then\\n    ///         proceed to step (5). Otherwise, set `dw = w` and continue to\\n    ///         step (4).\\n    ///      4. Solve `PV(0) / l = PV(dz) / (l - dw)` for `dz` using Newton's\\n    ///         method if `y_l * t_l != y_s * t_s` or directly otherwise.\\n    ///      5. Return `dw` and `dz`.\\n    /// @param _params The parameters for the distribute excess idle.\\n    /// @param _maxIterations The number of iterations to use in the share\\n    ///        proceeds. This defaults to `LPMath.SHARE_PROCEEDS_MAX_ITERATIONS`\\n    ///        if the specified value is smaller than the constant.\\n    /// @return The amount of withdrawal shares that can be redeemed.\\n    /// @return The share proceeds the withdrawal pool should receive.\\n    function calculateDistributeExcessIdle(\\n        DistributeExcessIdleParams memory _params,\\n        uint256 _maxIterations\\n    ) external pure returns (uint256, uint256) {\\n        // Steps 1 and 2: Calculate the maximum amount the share reserves can be\\n        // debited. If the effective share reserves or the maximum share\\n        // reserves delta can't be calculated or if the maximum share reserves\\n        // delta is zero, idle can't be distributed.\\n        (uint256 originalEffectiveShareReserves, bool success) = HyperdriveMath\\n            .calculateEffectiveShareReservesSafe(\\n                _params.originalShareReserves,\\n                _params.originalShareAdjustment\\n            );\\n        if (!success) {\\n            return (0, 0);\\n        }\\n        uint256 maxShareReservesDelta;\\n        (maxShareReservesDelta, success) = calculateMaxShareReservesDeltaSafe(\\n            _params,\\n            originalEffectiveShareReserves\\n        );\\n        if (!success || maxShareReservesDelta == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Step 3: Calculate the amount of withdrawal shares that can be\\n        // redeemed given the maximum share reserves delta.  Otherwise, we\\n        // proceed to calculating the amount of shares that should be paid out\\n        // to redeem all of the withdrawal shares.\\n        uint256 withdrawalSharesRedeemed = calculateDistributeExcessIdleWithdrawalSharesRedeemed(\\n                _params,\\n                maxShareReservesDelta\\n            );\\n\\n        // Step 3: If none of the withdrawal shares could be redeemed, then\\n        // we're done and we pay out nothing.\\n        if (withdrawalSharesRedeemed == 0) {\\n            return (0, 0);\\n        }\\n        // Step 3: Otherwise if this amount is less than or equal to the amount\\n        // of withdrawal shares outstanding, then we're done and we pay out the\\n        // full maximum share reserves delta.\\n        else if (\\n            withdrawalSharesRedeemed <= _params.withdrawalSharesTotalSupply\\n        ) {\\n            return (withdrawalSharesRedeemed, maxShareReservesDelta);\\n        }\\n        // Step 3: Otherwise, all of the withdrawal shares are redeemed, and we\\n        // need to calculate the amount of shares the withdrawal pool should\\n        // receive.\\n        else {\\n            withdrawalSharesRedeemed = _params.withdrawalSharesTotalSupply;\\n        }\\n\\n        // Step 4: Solve for the share proceeds that hold the LP share price\\n        // invariant after all of the withdrawal shares are redeemed. If the\\n        // calculation returns a share proceeds of zero, we can't pay out\\n        // anything.\\n        uint256 shareProceeds = calculateDistributeExcessIdleShareProceeds(\\n            _params,\\n            originalEffectiveShareReserves,\\n            maxShareReservesDelta,\\n            _maxIterations\\n        );\\n        if (shareProceeds == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Step 4: If the share proceeds are greater than or equal to the\\n        // maximum share reserves delta that was previously calculated, then\\n        // we can't distribute excess idle since we ruled out the possibility\\n        // of paying out the full maximum share reserves delta in step 3.\\n        if (shareProceeds >= maxShareReservesDelta) {\\n            return (0, 0);\\n        }\\n\\n        // Step 5: Return the amount of withdrawal shares redeemed and the\\n        // share proceeds.\\n        return (withdrawalSharesRedeemed, shareProceeds);\\n    }\\n\\n    /// @dev Calculates the amount of withdrawal shares that can be redeemed\\n    ///      given an amount of shares to remove from the share reserves.\\n    ///      Assuming that dz is the amount of shares to remove from the\\n    ///      reserves and dl is the amount of LP shares to be burned, we can\\n    ///      derive the calculation as follows:\\n    ///\\n    ///      PV(0) / l = PV(dx) / (l - dl)\\n    ///                =>\\n    ///      dl = l - l * (PV(dx) / PV(0))\\n    ///\\n    ///      We round this calculation up to err on the side of slightly too\\n    ///      many withdrawal shares being redeemed.\\n    /// @param _params The parameters for the present value calculation.\\n    /// @param _shareReservesDelta The amount of shares to remove from the\\n    ///        share reserves.\\n    /// @return The amount of withdrawal shares that can be redeemed.\\n    function calculateDistributeExcessIdleWithdrawalSharesRedeemed(\\n        DistributeExcessIdleParams memory _params,\\n        uint256 _shareReservesDelta\\n    ) internal pure returns (uint256) {\\n        // Calculate the present value after debiting the share reserves delta.\\n        bool success;\\n        (\\n            _params.presentValueParams.shareReserves,\\n            _params.presentValueParams.shareAdjustment,\\n            _params.presentValueParams.bondReserves,\\n            success\\n        ) = calculateUpdateLiquiditySafe(\\n            _params.originalShareReserves,\\n            _params.originalShareAdjustment,\\n            _params.originalBondReserves,\\n            _params.presentValueParams.minimumShareReserves,\\n            -_shareReservesDelta.toInt256()\\n        );\\n        if (!success) {\\n            // NOTE: Return zero to indicate that the withdrawal shares redeemed\\n            // couldn't be calculated.\\n            return 0;\\n        }\\n        uint256 endingPresentValue;\\n        (endingPresentValue, success) = calculatePresentValueSafe(\\n            _params.presentValueParams\\n        );\\n        if (!success) {\\n            // NOTE: Return zero to indicate that the withdrawal shares redeemed\\n            // couldn't be calculated.\\n            return 0;\\n        }\\n\\n        // If the ending present value is greater than or equal to the starting\\n        // present value, we short-circuit to avoid distributing excess idle.\\n        // This edge-case can occur when the share reserves is very close to the\\n        // minimum share reserves with a large value of k.\\n        if (endingPresentValue >= _params.startingPresentValue) {\\n            return 0;\\n        }\\n\\n        // NOTE: This subtraction is safe since the ending present value is less\\n        // than the starting present value and the rhs is rounded down.\\n        //\\n        // Calculate the amount of withdrawal shares that can be redeemed.\\n        uint256 lpTotalSupply = _params.activeLpTotalSupply +\\n            _params.withdrawalSharesTotalSupply;\\n        return\\n            lpTotalSupply -\\n            lpTotalSupply.mulDivDown(\\n                endingPresentValue,\\n                _params.startingPresentValue\\n            );\\n    }\\n\\n    /// @dev Calculates the share proceeds to distribute to the withdrawal pool\\n    ///      assuming that all of the outstanding withdrawal shares will be\\n    ///      redeemed. The share proceeds are calculated such that the LP share\\n    ///      price is conserved. When we need to round, we round down to err on\\n    ///      the side of slightly too few shares being paid out.\\n    /// @param _params The parameters for the distribute excess idle calculation.\\n    /// @param _originalEffectiveShareReserves The original effective share\\n    ///        reserves.\\n    /// @param _maxShareReservesDelta The maximum change in the share reserves\\n    ///        that can result from distributing excess idle. This provides an\\n    ///        upper bound on the share proceeds returned from this calculation.\\n    /// @param _maxIterations The number of iterations to use in the share\\n    ///        proceeds. This defaults to `LPMath.SHARE_PROCEEDS_MAX_ITERATIONS`\\n    ///        if the specified value is smaller than the constant.\\n    /// @return The share proceeds to distribute to the withdrawal pool.\\n    function calculateDistributeExcessIdleShareProceeds(\\n        DistributeExcessIdleParams memory _params,\\n        uint256 _originalEffectiveShareReserves,\\n        uint256 _maxShareReservesDelta,\\n        uint256 _maxIterations\\n    ) internal pure returns (uint256) {\\n        // Calculate the LP total supply.\\n        uint256 lpTotalSupply = _params.activeLpTotalSupply +\\n            _params.withdrawalSharesTotalSupply;\\n\\n        // NOTE: Round the initial guess down to avoid overshooting.\\n        //\\n        // We make an initial guess for Newton's method by assuming that the\\n        // ratio of the share reserves delta to the withdrawal shares\\n        // outstanding is equal to the LP share price. In reality, the\\n        // withdrawal pool should receive more than this, but it's a good\\n        // starting point. The calculation is:\\n        //\\n        // x_0 = w * (PV(0) / l)\\n        uint256 shareProceeds = _params.withdrawalSharesTotalSupply.mulDivDown(\\n            _params.startingPresentValue,\\n            lpTotalSupply\\n        );\\n\\n        // If the pool is net neutral, the initial guess is equal to the final\\n        // result.\\n        if (_params.netCurveTrade == 0) {\\n            return shareProceeds;\\n        }\\n\\n        // Proceed with Newton's method. The objective function, `F(x)`, is\\n        // given by:\\n        //\\n        // F(x) = PV(x) * l - PV(0) * (l - w)\\n        //\\n        // Newton's method will terminate as soon as the current iteration is\\n        // within the minimum tolerance or the maximum number of iterations has\\n        // been reached.\\n        int256 smallestDelta;\\n        uint256 closestShareProceeds;\\n        uint256 closestPresentValue;\\n        DistributeExcessIdleParams memory params = _params; // avoid stack-too-deep\\n        if (_maxIterations < SHARE_PROCEEDS_MAX_ITERATIONS) {\\n            _maxIterations = SHARE_PROCEEDS_MAX_ITERATIONS;\\n        }\\n        for (uint256 i = 0; i < _maxIterations; ) {\\n            // Clamp the share proceeds to the max share reserves delta since\\n            // values above this threshold are always invalid.\\n            shareProceeds = shareProceeds.min(_maxShareReservesDelta);\\n\\n            // Simulate applying the share proceeds to the reserves.\\n            bool success;\\n            (\\n                params.presentValueParams.shareReserves,\\n                params.presentValueParams.shareAdjustment,\\n                params.presentValueParams.bondReserves,\\n                success\\n            ) = calculateUpdateLiquiditySafe(\\n                params.originalShareReserves,\\n                params.originalShareAdjustment,\\n                params.originalBondReserves,\\n                params.presentValueParams.minimumShareReserves,\\n                -shareProceeds.toInt256()\\n            );\\n            if (!success) {\\n                // NOTE: If the updated reserves can't be calculated,  we can't\\n                // continue the calculation. Return 0 to indicate that the share\\n                // proceeds couldn't be calculated.\\n                return 0;\\n            }\\n\\n            // Recalculate the present value.\\n            uint256 presentValue;\\n            (presentValue, success) = calculatePresentValueSafe(\\n                _params.presentValueParams\\n            );\\n            if (!success) {\\n                // NOTE: If the present value can't be calculated,  we can't\\n                // continue the calculation. Return 0 to indicate that the share\\n                // proceeds couldn't be calculated.\\n                return 0;\\n            }\\n\\n            // Short-circuit if we are within the minimum tolerance.\\n            if (\\n                shouldShortCircuitDistributeExcessIdleShareProceeds(\\n                    params,\\n                    presentValue,\\n                    lpTotalSupply\\n                )\\n            ) {\\n                return shareProceeds;\\n            }\\n\\n            // If the pool is net long, we can solve for the next iteration of\\n            // Newton's method directly when the net curve trade is greater than\\n            // or equal to the max bond amount.\\n            if (params.netCurveTrade > 0) {\\n                // Calculate the max bond amount. If the calculation fails, we\\n                // return a failure flag.\\n                uint256 maxBondAmount;\\n                (maxBondAmount, success) = YieldSpaceMath\\n                    .calculateMaxSellBondsInSafe(\\n                        params.presentValueParams.shareReserves,\\n                        params.presentValueParams.shareAdjustment,\\n                        params.presentValueParams.bondReserves,\\n                        params.presentValueParams.minimumShareReserves,\\n                        ONE - params.presentValueParams.timeStretch,\\n                        params.presentValueParams.vaultSharePrice,\\n                        params.presentValueParams.initialVaultSharePrice\\n                    );\\n                if (!success) {\\n                    // NOTE: If the max bond amount couldn't be calculated, we\\n                    // can't continue the calculation. Return 0 to indicate that\\n                    // the share proceeds couldn't be calculated.\\n                    return 0;\\n                }\\n\\n                // If the net curve trade is greater than or equal to the max\\n                // bond amount, we can solve directly for the share proceeds.\\n                if (uint256(params.netCurveTrade) >= maxBondAmount) {\\n                    // Solve the objective function directly assuming that it is\\n                    // linear with respect to the share proceeds.\\n                    (\\n                        shareProceeds,\\n                        success\\n                    ) = calculateDistributeExcessIdleShareProceedsNetLongEdgeCaseSafe(\\n                        params\\n                    );\\n                    if (!success) {\\n                        // NOTE: Return 0 to indicate that the share proceeds\\n                        // couldn't be calculated.\\n                        return 0;\\n                    }\\n\\n                    // Simulate applying the share proceeds to the reserves and\\n                    // recalculate the max bond amount.\\n                    (\\n                        params.presentValueParams.shareReserves,\\n                        params.presentValueParams.shareAdjustment,\\n                        params.presentValueParams.bondReserves,\\n                        success\\n                    ) = calculateUpdateLiquiditySafe(\\n                        params.originalShareReserves,\\n                        params.originalShareAdjustment,\\n                        params.originalBondReserves,\\n                        params.presentValueParams.minimumShareReserves,\\n                        -shareProceeds.toInt256()\\n                    );\\n                    if (!success) {\\n                        // NOTE: Return 0 to indicate that the share proceeds\\n                        // couldn't be calculated.\\n                        return 0;\\n                    }\\n                    (maxBondAmount, success) = YieldSpaceMath\\n                        .calculateMaxSellBondsInSafe(\\n                            params.presentValueParams.shareReserves,\\n                            params.presentValueParams.shareAdjustment,\\n                            params.presentValueParams.bondReserves,\\n                            params.presentValueParams.minimumShareReserves,\\n                            ONE - params.presentValueParams.timeStretch,\\n                            params.presentValueParams.vaultSharePrice,\\n                            params.presentValueParams.initialVaultSharePrice\\n                        );\\n                    if (!success) {\\n                        // NOTE: Return 0 to indicate that the share proceeds\\n                        // couldn't be calculated.\\n                        return 0;\\n                    }\\n\\n                    // If the max bond amount is less than or equal to the net\\n                    // curve trade, then Newton's method has terminated since\\n                    // proceeding to the next step would result in reaching the\\n                    // same point.\\n                    if (maxBondAmount <= uint256(_params.netCurveTrade)) {\\n                        return shareProceeds;\\n                    }\\n                    // Otherwise, we continue to the next iteration of Newton's\\n                    // method.\\n                    else {\\n                        continue;\\n                    }\\n                }\\n            }\\n\\n            // We calculate the derivative of F(x) using the derivative of\\n            // `calculateSharesOutGivenBondsIn` when the pool is net long or\\n            // the derivative of `calculateSharesInGivenBondsOut`. when the pool\\n            // is net short.\\n            uint256 derivative;\\n            (\\n                derivative,\\n                success\\n            ) = calculateSharesDeltaGivenBondsDeltaDerivativeSafe(\\n                params,\\n                _originalEffectiveShareReserves,\\n                params.netCurveTrade\\n            );\\n            if (!success || derivative >= ONE) {\\n                // NOTE: Return 0 to indicate that the share proceeds\\n                // couldn't be calculated.\\n                return 0;\\n            }\\n            unchecked {\\n                derivative = ONE - derivative;\\n            }\\n\\n            // NOTE: Round the delta down to avoid overshooting.\\n            //\\n            // Calculate the objective function's value. If the value's magnitude\\n            // is smaller than the previous smallest value, then we update the\\n            // value and record the share proceeds. We'll ultimately return the\\n            // share proceeds that resulted in the smallest value.\\n            int256 delta = presentValue.mulDown(lpTotalSupply).toInt256() -\\n                params\\n                    .startingPresentValue\\n                    .mulUp(params.activeLpTotalSupply)\\n                    .toInt256();\\n            if (smallestDelta == 0 || delta.abs() < smallestDelta.abs()) {\\n                smallestDelta = delta;\\n                closestShareProceeds = shareProceeds;\\n                closestPresentValue = presentValue;\\n            }\\n\\n            // We calculate the updated share proceeds `x_n+1` by proceeding\\n            // with Newton's method. This is given by:\\n            //\\n            // x_n+1 = x_n - F(x_n) / F'(x_n)\\n            if (delta > 0) {\\n                // NOTE: Round the quotient down to avoid overshooting.\\n                shareProceeds =\\n                    shareProceeds +\\n                    uint256(delta).divDown(derivative).divDown(lpTotalSupply);\\n            } else if (delta < 0) {\\n                // NOTE: Round the quotient down to avoid overshooting.\\n                uint256 delta_ = uint256(-delta).divDown(derivative).divDown(\\n                    lpTotalSupply\\n                );\\n                if (delta_ < shareProceeds) {\\n                    unchecked {\\n                        shareProceeds = shareProceeds - delta_;\\n                    }\\n                } else {\\n                    // NOTE: Returning 0 to indicate that the share proceeds\\n                    // couldn't be calculated.\\n                    return 0;\\n                }\\n            } else {\\n                break;\\n            }\\n\\n            // Increment the loop counter.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Calculate the present value after applying the share proceeds.\\n        bool success_;\\n        (\\n            params.presentValueParams.shareReserves,\\n            params.presentValueParams.shareAdjustment,\\n            params.presentValueParams.bondReserves,\\n            success_\\n        ) = calculateUpdateLiquiditySafe(\\n            params.originalShareReserves,\\n            params.originalShareAdjustment,\\n            params.originalBondReserves,\\n            params.presentValueParams.minimumShareReserves,\\n            -shareProceeds.toInt256()\\n        );\\n        if (!success_) {\\n            // NOTE: Return 0 to indicate that the share proceeds couldn't be\\n            // calculated.\\n            return 0;\\n        }\\n        uint256 presentValue_ = calculatePresentValue(\\n            params.presentValueParams\\n        );\\n\\n        // Check to see if the current share proceeds is closer to the optimal\\n        // value than the previous closest value. We'll choose whichever of the\\n        // share proceeds that is closer to the optimal value.\\n        int256 lastDelta = presentValue_.mulDown(lpTotalSupply).toInt256() -\\n            params\\n                .startingPresentValue\\n                .mulUp(params.activeLpTotalSupply)\\n                .toInt256();\\n        if (lastDelta.abs() < smallestDelta.abs()) {\\n            closestShareProceeds = shareProceeds;\\n            closestPresentValue = presentValue_;\\n        }\\n\\n        // Verify that the LP share price was conserved within a reasonable\\n        // tolerance.\\n        if (\\n            // NOTE: Round down to make the check stricter.\\n            closestPresentValue.divDown(params.activeLpTotalSupply) <\\n            params.startingPresentValue.mulDivUp(\\n                ONE - SHARE_PROCEEDS_TOLERANCE,\\n                lpTotalSupply\\n            ) ||\\n            // NOTE: Round up to make the check stricter.\\n            closestPresentValue.divUp(params.activeLpTotalSupply) >\\n            params.startingPresentValue.mulDivDown(\\n                ONE + SHARE_PROCEEDS_TOLERANCE,\\n                lpTotalSupply\\n            )\\n        ) {\\n            // NOTE: Return 0 to indicate that the share proceeds couldn't be\\n            // calculated.\\n            return 0;\\n        }\\n\\n        return closestShareProceeds;\\n    }\\n\\n    /// @dev One of the edge cases that occurs when using Newton's method for\\n    ///      the share proceeds while distributing excess idle is when the net\\n    ///      curve trade is larger than the max bond amount. In this case, the\\n    ///      the present value simplifies to the following:\\n    ///\\n    ///      PV(dz) = (z - dz) + net_c(dz) + net_f - z_min\\n    ///             = (z - dz) - z_max_out(dz) + net_f - z_min\\n    ///\\n    ///      There are two cases to evaluate:\\n    ///\\n    ///      (1) zeta > 0:\\n    ///\\n    ///          z_max_out(dz) = ((z - dz) / z) * (z - zeta) - z_min\\n    ///\\n    ///          =>\\n    ///\\n    ///          PV(dz) = zeta * ((z - dz) / z) + net_f\\n    ///\\n    ///      (2) zeta <= 0:\\n    ///\\n    ///          z_max_out(dz) = (z - dz) - z_min\\n    ///\\n    ///          =>\\n    ///\\n    ///          PV(dz) = net_f\\n    ///\\n    ///      Since the present value is constant with respect to the share\\n    ///      proceeds in case 2, Newton's method has achieved a stationary point\\n    ///      and can't proceed. On the other hand, the present value is linear\\n    ///      with respect to the share proceeds, and we can solve for the next\\n    ///      step of Newton's method directly as follows:\\n    ///\\n    ///      PV(0) / l = PV(dz) / (l - w)\\n    ///\\n    ///      =>\\n    ///\\n    ///      dz = z - ((PV(0) / l) * (l - w) - net_f) / (zeta / z)\\n    ///\\n    ///      We round the share proceeds down to err on the side of the\\n    ///      withdrawal pool receiving slightly less shares.\\n    /// @param _params The parameters for the calculation.\\n    /// @return The share proceeds.\\n    /// @return A flag indicating whether the calculation was successful.\\n    function calculateDistributeExcessIdleShareProceedsNetLongEdgeCaseSafe(\\n        DistributeExcessIdleParams memory _params\\n    ) internal pure returns (uint256, bool) {\\n        // If the original share adjustment is zero or negative, we cannot\\n        // calculate the share proceeds. This should never happen, but for\\n        // safety we return a failure flag and break the loop at this point.\\n        if (_params.originalShareAdjustment <= 0) {\\n            return (0, false);\\n        }\\n\\n        // Calculate the net flat trade.\\n        int256 netFlatTrade = calculateNetFlatTrade(_params.presentValueParams);\\n\\n        // NOTE: Round up since this is the rhs of the final subtraction.\\n        //\\n        // rhs = (PV(0) / l) * (l - w) - net_f\\n        uint256 rhs = _params.startingPresentValue.mulDivUp(\\n            _params.activeLpTotalSupply,\\n            _params.activeLpTotalSupply + _params.withdrawalSharesTotalSupply\\n        );\\n        if (netFlatTrade >= 0) {\\n            if (uint256(netFlatTrade) < rhs) {\\n                unchecked {\\n                    rhs -= uint256(netFlatTrade);\\n                }\\n            } else {\\n                // NOTE: Return a failure flag if computing the rhs would\\n                // underflow.\\n                return (0, false);\\n            }\\n        } else {\\n            rhs += uint256(-netFlatTrade);\\n        }\\n\\n        // NOTE: Round up since this is the rhs of the final subtraction.\\n        //\\n        // rhs = ((PV(0) / l) * (l - w) - net_f) / (zeta / z)\\n        rhs = _params.originalShareReserves.mulDivUp(\\n            rhs,\\n            uint256(_params.originalShareAdjustment)\\n        );\\n\\n        // share proceeds = z - rhs\\n        if (_params.originalShareReserves < rhs) {\\n            return (0, false);\\n        }\\n        unchecked {\\n            return (_params.originalShareReserves - rhs, true);\\n        }\\n    }\\n\\n    /// @dev Checks to see if we should short-circuit the iterative calculation\\n    ///     of the share proceeds when distributing excess idle liquidity. This\\n    ///     verifies that the ending LP share price is greater than or equal to\\n    ///     the starting LP share price and less than or equal to the starting\\n    ///     LP share price plus the minimum tolerance.\\n    /// @param _params The parameters for the calculation.\\n    /// @param _lpTotalSupply The total supply of LP shares.\\n    /// @param _presentValue The present value of the pool at this iteration of\\n    ///        the calculation.\\n    /// @return A flag indicating whether or not we should short-circuit the\\n    ///         calculation.\\n    function shouldShortCircuitDistributeExcessIdleShareProceeds(\\n        DistributeExcessIdleParams memory _params,\\n        uint256 _lpTotalSupply,\\n        uint256 _presentValue\\n    ) internal pure returns (bool) {\\n        return\\n            // Ensure that new LP share price is greater than or equal to the\\n            // previous LP share price:\\n            //\\n            // PV_1 / l_1 >= PV_0 / l_0\\n            //\\n            // NOTE: Round the LHS down to make the check stricter.\\n            _presentValue.divDown(_params.activeLpTotalSupply) >=\\n            // NOTE: Round the RHS up to make the check stricter.\\n            _params.startingPresentValue.divUp(_lpTotalSupply) &&\\n            // Ensure that new LP share price is less than or equal to the\\n            // previous LP share price plus the minimum tolerance:\\n            //\\n            // PV_1 / l_1 <= (PV_0 / l_0) * (1 + tolerance)\\n            //\\n            // NOTE: Round the LHS up to make the check stricter.\\n            _presentValue.divUp(_params.activeLpTotalSupply) <=\\n            // NOTE: Round the RHS down to make the check stricter.\\n            (ONE + SHARE_PROCEEDS_SHORT_CIRCUIT_TOLERANCE).mulDivDown(\\n                _params.startingPresentValue,\\n                _lpTotalSupply\\n            );\\n    }\\n\\n    /// @dev Calculates the upper bound on the share proceeds of distributing\\n    ///      excess idle. When the pool is net long or net neutral, the upper\\n    ///      bound is the amount of idle liquidity. When the pool is net short,\\n    ///      the upper bound is the share reserves delta that results in the\\n    ///      maximum amount of bonds that can be purchased being equal to the\\n    ///      net short position.\\n    /// @param _params The parameters for the distribute excess idle calculation.\\n    /// @param _originalEffectiveShareReserves The original effective share\\n    ///        reserves.\\n    /// @return maxShareReservesDelta The upper bound on the share proceeds.\\n    /// @return success A flag indicating if the calculation succeeded.\\n    function calculateMaxShareReservesDeltaSafe(\\n        DistributeExcessIdleParams memory _params,\\n        uint256 _originalEffectiveShareReserves\\n    ) internal pure returns (uint256 maxShareReservesDelta, bool success) {\\n        // If the net curve position is zero or net long, then the maximum\\n        // share reserves delta is equal to the pool's idle.\\n        if (_params.netCurveTrade >= 0) {\\n            return (_params.idle, true);\\n        }\\n        uint256 netCurveTrade = uint256(-_params.netCurveTrade);\\n\\n        // Calculate the max bond amount. If the calculation fails, we return a\\n        // failure flag. If the calculation succeeds but the max bond amount\\n        // is zero, then we return a failure flag since we can't divide by zero.\\n        uint256 maxBondAmount;\\n        (maxBondAmount, success) = YieldSpaceMath.calculateMaxBuyBondsOutSafe(\\n            _originalEffectiveShareReserves,\\n            _params.originalBondReserves,\\n            ONE - _params.presentValueParams.timeStretch,\\n            _params.presentValueParams.vaultSharePrice,\\n            _params.presentValueParams.initialVaultSharePrice\\n        );\\n        if (!success || maxBondAmount == 0) {\\n            return (0, false);\\n        }\\n\\n        // We can solve for the maximum share reserves delta in one shot using\\n        // the fact that the maximum amount of bonds that can be purchased is\\n        // linear with respect to the scaling factor applied to the reserves.\\n        // In other words, if s > 0 is a factor scaling the reserves, we have\\n        // the following relationship:\\n        //\\n        // y_out^max(s * z, s * y, s * zeta) = s * y_out^max(z, y, zeta)\\n        //\\n        // We solve for the maximum share reserves delta by finding the scaling\\n        // factor that results in the maximum amount of bonds that can be\\n        // purchased being equal to the net curve trade. We can derive this\\n        // maximum using the linearity property mentioned above as follows:\\n        //\\n        // y_out^max(s * z, s * y, s * zeta) - netCurveTrade = 0\\n        //                        =>\\n        // s * y_out^max(z, y, zeta) - netCurveTrade = 0\\n        //                        =>\\n        // s = netCurveTrade / y_out^max(z, y, zeta)\\n        uint256 maxScalingFactor = netCurveTrade.divUp(maxBondAmount);\\n\\n        // Using the maximum scaling factor, we can calculate the maximum share\\n        // reserves delta as:\\n        //\\n        // maxShareReservesDelta = z * (1 - s)\\n        if (maxScalingFactor <= ONE) {\\n            unchecked {\\n                maxShareReservesDelta = ONE - maxScalingFactor;\\n            }\\n            maxShareReservesDelta = maxShareReservesDelta.mulDown(\\n                _params.originalShareReserves\\n            );\\n        } else {\\n            // NOTE: If the max scaling factor is greater than one, the\\n            // calculation fails and we return a failure flag.\\n            return (0, false);\\n        }\\n\\n        // If the maximum share reserves delta is greater than the idle, then\\n        // the maximum share reserves delta is equal to the idle.\\n        if (maxShareReservesDelta > _params.idle) {\\n            return (_params.idle, true);\\n        }\\n        return (maxShareReservesDelta, true);\\n    }\\n\\n    /// @dev Given a signed bond amount, this function calculates the negation\\n    ///      of the derivative of `calculateSharesOutGivenBondsIn` when the\\n    ///      bond amount is positive or the derivative of\\n    ///      `calculateSharesInGivenBondsOut` when the bond amount is negative.\\n    ///      In both cases, the calculation is given by:\\n    ///\\n    ///      derivative = (1 - zeta / z) * (\\n    ///          1 - (1 / c) * (\\n    ///              c * (mu * z_e(x)) ** -t_s +\\n    ///              (y / z_e) * y(x) ** -t_s  -\\n    ///              (y / z_e) * (y(x) + dy) ** -t_s\\n    ///          ) * (\\n    ///              (mu / c) * (k(x) - (y(x) + dy) ** (1 - t_s))\\n    ///          ) ** (t_s / (1 - t_s))\\n    ///      )\\n    ///\\n    ///      This quantity is used in Newton's method to search for the optimal\\n    ///      share proceeds. When the pool is net long, We can express the\\n    ///      derivative of the objective function F(x) by the derivative\\n    ///      -z_out'(x) that this function returns:\\n    ///\\n    ///      -F'(x) = l * -PV'(x)\\n    ///             = l * (1 - net_c'(x))\\n    ///             = l * (1 + z_out'(x))\\n    ///             = l * (1 - derivative)\\n    ///\\n    ///      When the pool is net short, we can express the derivative of the\\n    ///      objective function F(x) by the derivative z_in'(x) that this\\n    ///      function returns:\\n    ///\\n    ///      -F'(x) = l * -PV'(x)\\n    ///             = l * (1 - net_c'(x))\\n    ///             = l * (1 - z_in'(x))\\n    ///             = l * (1 - derivative)\\n    ///\\n    ///      With these calculations in mind, this function rounds its result\\n    ///      down so that F'(x) is overestimated. Since F'(x) is in the\\n    ///      denominator of Newton's method, overestimating F'(x) helps to avoid\\n    ///      overshooting the optimal solution.\\n    /// @param _params The parameters for the calculation.\\n    /// @param _originalEffectiveShareReserves The original effective share\\n    ///        reserves.\\n    /// @param _bondAmount The amount of bonds that are being bought or sold.\\n    /// @return The negation of the derivative of\\n    ///         `calculateSharesOutGivenBondsIn` when the bond amount is\\n    ///         positive or the derivative of `calculateSharesInGivenBondsOut`\\n    ///         when the bond amount is negative.\\n    /// @return A flag indicating whether the derivative could be computed.\\n    function calculateSharesDeltaGivenBondsDeltaDerivativeSafe(\\n        DistributeExcessIdleParams memory _params,\\n        uint256 _originalEffectiveShareReserves,\\n        int256 _bondAmount\\n    ) internal pure returns (uint256, bool) {\\n        // Calculate the bond reserves after the bond amount is applied.\\n        uint256 bondReserves;\\n        if (_bondAmount >= 0) {\\n            bondReserves =\\n                _params.presentValueParams.bondReserves +\\n                uint256(_bondAmount);\\n        } else {\\n            uint256 bondAmount = uint256(-_bondAmount);\\n            if (bondAmount < _params.presentValueParams.bondReserves) {\\n                unchecked {\\n                    bondReserves =\\n                        _params.presentValueParams.bondReserves -\\n                        bondAmount;\\n                }\\n            } else {\\n                // NOTE: Return a failure flag if calculating the bond reserves\\n                // would underflow.\\n                return (0, false);\\n            }\\n        }\\n\\n        // NOTE: Round up since this is on the rhs of the final subtraction.\\n        //\\n        // derivative = c * (mu * z_e(x)) ** -t_s +\\n        //              (y / z_e) * (y(x)) ** -t_s -\\n        //              (y / z_e) * (y(x) + dy) ** -t_s\\n        (uint256 effectiveShareReserves, bool success) = HyperdriveMath\\n            .calculateEffectiveShareReservesSafe(\\n                _params.presentValueParams.shareReserves,\\n                _params.presentValueParams.shareAdjustment\\n            );\\n        if (!success) {\\n            return (0, false);\\n        }\\n        uint256 derivative = _params.presentValueParams.vaultSharePrice.divUp(\\n            _params\\n                .presentValueParams\\n                .initialVaultSharePrice\\n                .mulDown(effectiveShareReserves)\\n                .pow(_params.presentValueParams.timeStretch)\\n        ) +\\n            _params.originalBondReserves.divUp(\\n                _originalEffectiveShareReserves.mulDown(\\n                    _params.presentValueParams.bondReserves.pow(\\n                        _params.presentValueParams.timeStretch\\n                    )\\n                )\\n            );\\n        // NOTE: Round down this rounds the subtraction up.\\n        uint256 rhs = _params.originalBondReserves.divDown(\\n            _originalEffectiveShareReserves.mulUp(\\n                bondReserves.pow(_params.presentValueParams.timeStretch)\\n            )\\n        );\\n        if (derivative < rhs) {\\n            return (0, false);\\n        }\\n        unchecked {\\n            derivative -= rhs;\\n        }\\n\\n        // NOTE: Round up since this is on the rhs of the final subtraction.\\n        //\\n        // inner = (\\n        //             (mu / c) * (k(x) - (y(x) + dy) ** (1 - t_s))\\n        //         ) ** (t_s / (1 - t_s))\\n        uint256 k = YieldSpaceMath.kUp(\\n            effectiveShareReserves,\\n            _params.presentValueParams.bondReserves,\\n            ONE - _params.presentValueParams.timeStretch,\\n            _params.presentValueParams.vaultSharePrice,\\n            _params.presentValueParams.initialVaultSharePrice\\n        );\\n        uint256 inner = bondReserves.pow(\\n            ONE - _params.presentValueParams.timeStretch\\n        );\\n        if (k < inner) {\\n            // NOTE: In this case, we shouldn't proceed with distributing excess\\n            // idle since the derivative couldn't be computed.\\n            return (0, false);\\n        }\\n        unchecked {\\n            inner = k - inner;\\n        }\\n        inner = inner.mulDivUp(\\n            _params.presentValueParams.initialVaultSharePrice,\\n            _params.presentValueParams.vaultSharePrice\\n        );\\n        if (inner >= ONE) {\\n            // NOTE: Round the exponent up since this rounds the result up.\\n            inner = inner.pow(\\n                _params.presentValueParams.timeStretch.divUp(\\n                    ONE - _params.presentValueParams.timeStretch\\n                )\\n            );\\n        } else {\\n            // NOTE: Round the exponent down since this rounds the result up.\\n            inner = inner.pow(\\n                _params.presentValueParams.timeStretch.divDown(\\n                    ONE - _params.presentValueParams.timeStretch\\n                )\\n            );\\n        }\\n\\n        // NOTE: Round up since this is on the rhs of the final subtraction.\\n        derivative = derivative.mulDivUp(\\n            inner,\\n            _params.presentValueParams.vaultSharePrice\\n        );\\n\\n        // derivative = 1 - derivative\\n        if (ONE > derivative) {\\n            unchecked {\\n                derivative = ONE - derivative;\\n            }\\n        } else {\\n            // NOTE: Small rounding errors can result in the derivative being\\n            // slightly (on the order of a few wei) greater than 1. In this case,\\n            // we return 0 since we should proceed with Newton's method.\\n            return (0, true);\\n        }\\n\\n        // NOTE: Round down to round the final result down.\\n        //\\n        // derivative = derivative * (1 - (zeta / z))\\n        if (_params.originalShareAdjustment >= 0) {\\n            rhs = uint256(_params.originalShareAdjustment).divUp(\\n                _params.originalShareReserves\\n            );\\n            if (rhs > ONE) {\\n                // NOTE: Return a failure flag if the calculation would\\n                // underflow.\\n                return (0, false);\\n            }\\n            unchecked {\\n                rhs = ONE - rhs;\\n            }\\n            derivative = derivative.mulDown(rhs);\\n        } else {\\n            derivative = derivative.mulDown(\\n                ONE +\\n                    uint256(-_params.originalShareAdjustment).divDown(\\n                        _params.originalShareReserves\\n                    )\\n            );\\n        }\\n\\n        return (derivative, true);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/SafeCast.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { IHyperdrive } from \\\"../interfaces/IHyperdrive.sol\\\";\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Inspired by OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCast {\\n    /// @notice This function safely casts a uint256 to a uint112.\\n    /// @param x The uint256 to cast to uint112.\\n    /// @return y The uint112 casted from x.\\n    function toUint112(uint256 x) internal pure returns (uint112 y) {\\n        if (x > type(uint112).max) {\\n            revert IHyperdrive.UnsafeCastToUint112();\\n        }\\n        y = uint112(x);\\n    }\\n\\n    /// @notice This function safely casts a uint256 to a uint128.\\n    /// @param x The uint256 to cast to uint128.\\n    /// @return y The uint128 casted from x.\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        if (x > type(uint128).max) {\\n            revert IHyperdrive.UnsafeCastToUint128();\\n        }\\n        y = uint128(x);\\n    }\\n\\n    /// @notice This function safely casts an uint256 to an int128.\\n    /// @param x The uint256 to cast to int128.\\n    /// @return y The int128 casted from x.\\n    function toInt128(uint256 x) internal pure returns (int128 y) {\\n        if (x > uint128(type(int128).max)) {\\n            revert IHyperdrive.UnsafeCastToInt128();\\n        }\\n        y = int128(int256(x));\\n    }\\n\\n    /// @notice This function safely casts an int256 to an int128.\\n    /// @param x The int256 to cast to int128.\\n    /// @return y The int128 casted from x.\\n    function toInt128(int256 x) internal pure returns (int128 y) {\\n        if (x < type(int128).min || x > type(int128).max) {\\n            revert IHyperdrive.UnsafeCastToInt128();\\n        }\\n        y = int128(x);\\n    }\\n\\n    /// @notice This function safely casts an uint256 to an int256.\\n    /// @param x The uint256 to cast to int256.\\n    /// @return y The int256 casted from x.\\n    function toInt256(uint256 x) internal pure returns (int256 y) {\\n        if (x > uint256(type(int256).max)) {\\n            revert IHyperdrive.UnsafeCastToInt256();\\n        }\\n        y = int256(x);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/YieldSpaceMath.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.20;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\nimport { FixedPointMath, ONE } from \\\"./FixedPointMath.sol\\\";\\nimport { HyperdriveMath } from \\\"./HyperdriveMath.sol\\\";\\n\\n/// @author DELV\\n/// @title YieldSpaceMath\\n/// @notice Math for the YieldSpace pricing model.\\n/// @custom:disclaimer The language used in this code is for coding convenience\\n///                    only, and is not intended to, and does not, have any\\n///                    particular legal or regulatory significance.\\n///\\n/// @dev It is advised for developers to attain the pre-requisite knowledge\\n///      of how this implementation works on the mathematical level. This\\n///      excerpt attempts to document this pre-requisite knowledge explaining\\n///      the underpinning mathematical concepts in an understandable manner and\\n///      relating it directly to the code implementation.\\n///      This implementation is based on a paper called \\\"YieldSpace with Yield\\n///      Bearing Vaults\\\" or more casually \\\"Modified YieldSpace\\\". It can be\\n///      found at the following link.\\n///\\n///      https://hackmd.io/lRZ4mgdrRgOpxZQXqKYlFw?view\\n///\\n///      That paper builds on the original YieldSpace paper, \\\"YieldSpace:\\n///      An Automated Liquidity Provider for Fixed Yield Tokens\\\". It can be\\n///      found at the following link:\\n///\\n///      https://yieldprotocol.com/YieldSpace.pdf\\nlibrary YieldSpaceMath {\\n    using FixedPointMath for uint256;\\n\\n    /// @dev Calculates the amount of bonds a user will receive from the pool by\\n    ///      providing a specified amount of shares. We underestimate the amount\\n    ///      of bonds out.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param dz The amount of shares paid to the pool.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return result The amount of bonds the trader receives.\\n    function calculateBondsOutGivenSharesInDown(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 dz,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256 result) {\\n        bool success;\\n        (result, success) = calculateBondsOutGivenSharesInDownSafe(\\n            ze,\\n            y,\\n            dz,\\n            t,\\n            c,\\n            mu\\n        );\\n        if (!success) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of bonds a user will receive from the pool by\\n    ///      providing a specified amount of shares. This function returns a\\n    ///      success flag instead of reverting. We underestimate the amount\\n    ///      of bonds out.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param dz The amount of shares paid to the pool.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The amount of bonds the trader receives.\\n    /// @return A flag indicating if the calculation succeeded.\\n    function calculateBondsOutGivenSharesInDownSafe(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 dz,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256, bool) {\\n        // NOTE: We round k up to make the rhs of the equation larger.\\n        //\\n        // k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n        uint256 k = kUp(ze, y, t, c, mu);\\n\\n        // NOTE: We round ze down to make the rhs of the equation larger.\\n        //\\n        //  (\u00b5 * (ze + dz))^(1 - t)\\n        ze = mu.mulDown(ze + dz).pow(t);\\n        //  (c / \u00b5) * (\u00b5 * (ze + dz))^(1 - t)\\n        ze = c.mulDivDown(ze, mu);\\n\\n        // If k < ze, we return a failure flag since the calculation would have\\n        // underflowed.\\n        if (k < ze) {\\n            return (0, false);\\n        }\\n\\n        // NOTE: We round _y up to make the rhs of the equation larger.\\n        //\\n        // (k - (c / \u00b5) * (\u00b5 * (ze + dz))^(1 - t))^(1 / (1 - t))\\n        uint256 _y;\\n        unchecked {\\n            _y = k - ze;\\n        }\\n        if (_y >= ONE) {\\n            // Rounding up the exponent results in a larger result.\\n            _y = _y.pow(ONE.divUp(t));\\n        } else {\\n            // Rounding down the exponent results in a larger result.\\n            _y = _y.pow(ONE.divDown(t));\\n        }\\n\\n        // If y < _y, we return a failure flag since the calculation would have\\n        // underflowed.\\n        if (y < _y) {\\n            return (0, false);\\n        }\\n\\n        // \u0394y = y - (k - (c / \u00b5) * (\u00b5 * (ze + dz))^(1 - t))^(1 / (1 - t))\\n        unchecked {\\n            return (y - _y, true);\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of shares a user must provide the pool to\\n    ///      receive a specified amount of bonds. We overestimate the amount of\\n    ///      shares in.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param dy The amount of bonds paid to the trader.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return result The amount of shares the trader pays.\\n    function calculateSharesInGivenBondsOutUp(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 dy,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256 result) {\\n        bool success;\\n        (result, success) = calculateSharesInGivenBondsOutUpSafe(\\n            ze,\\n            y,\\n            dy,\\n            t,\\n            c,\\n            mu\\n        );\\n        if (!success) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of shares a user must provide the pool to\\n    ///      receive a specified amount of bonds. This function returns a\\n    ///      success flag instead of reverting. We overestimate the amount of\\n    ///      shares in.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param dy The amount of bonds paid to the trader.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The amount of shares the trader pays.\\n    /// @return A flag indicating if the calculation succeeded.\\n    function calculateSharesInGivenBondsOutUpSafe(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 dy,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256, bool) {\\n        // NOTE: We round k up to make the lhs of the equation larger.\\n        //\\n        // k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n        uint256 k = kUp(ze, y, t, c, mu);\\n\\n        // If y < dy, we return a failure flag since the calculation would have\\n        // underflowed.\\n        if (y < dy) {\\n            return (0, false);\\n        }\\n\\n        // (y - dy)^(1 - t)\\n        unchecked {\\n            y -= dy;\\n        }\\n        y = y.pow(t);\\n\\n        // If k < y, we return a failure flag since the calculation would have\\n        // underflowed.\\n        if (k < y) {\\n            return (0, false);\\n        }\\n\\n        // NOTE: We round _z up to make the lhs of the equation larger.\\n        //\\n        // ((k - (y - dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t))\\n        uint256 _z;\\n        unchecked {\\n            _z = k - y;\\n        }\\n        _z = _z.mulDivUp(mu, c);\\n        if (_z >= ONE) {\\n            // Rounding up the exponent results in a larger result.\\n            _z = _z.pow(ONE.divUp(t));\\n        } else {\\n            // Rounding down the exponent results in a larger result.\\n            _z = _z.pow(ONE.divDown(t));\\n        }\\n        // ((k - (y - dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t))) / \u00b5\\n        _z = _z.divUp(mu);\\n\\n        // If _z < ze, we return a failure flag since the calculation would have\\n        // underflowed.\\n        if (_z < ze) {\\n            return (0, false);\\n        }\\n\\n        // \u0394z = (((k - (y - dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t))) / \u00b5 - ze\\n        unchecked {\\n            return (_z - ze, true);\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of shares a user must provide the pool to\\n    ///      receive a specified amount of bonds. We underestimate the amount of\\n    ///      shares in.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param dy The amount of bonds paid to the trader.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The amount of shares the user pays.\\n    function calculateSharesInGivenBondsOutDown(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 dy,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256) {\\n        // NOTE: We round k down to make the lhs of the equation smaller.\\n        //\\n        // k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n        uint256 k = kDown(ze, y, t, c, mu);\\n\\n        // If y < dy, we have no choice but to revert.\\n        if (y < dy) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // (y - dy)^(1 - t)\\n        unchecked {\\n            y -= dy;\\n        }\\n        y = y.pow(t);\\n\\n        // If k < y, we have no choice but to revert.\\n        if (k < y) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // NOTE: We round _z down to make the lhs of the equation smaller.\\n        //\\n        // _z = ((k - (y - dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t))\\n        uint256 _z;\\n        unchecked {\\n            _z = k - y;\\n        }\\n        _z = _z.mulDivDown(mu, c);\\n        if (_z >= ONE) {\\n            // Rounding down the exponent results in a smaller result.\\n            _z = _z.pow(ONE.divDown(t));\\n        } else {\\n            // Rounding up the exponent results in a smaller result.\\n            _z = _z.pow(ONE.divUp(t));\\n        }\\n        // ((k - (y - dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t))) / \u00b5\\n        _z = _z.divDown(mu);\\n\\n        // If _z < ze, we have no choice but to revert.\\n        if (_z < ze) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n\\n        // \u0394z = (((k - (y - dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t))) / \u00b5 - ze\\n        unchecked {\\n            return _z - ze;\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of shares a user will receive from the pool\\n    ///      by providing a specified amount of bonds. This function reverts if\\n    ///      an integer overflow or underflow occurs. We underestimate the\\n    ///      amount of shares out.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param dy The amount of bonds paid to the pool.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return result The amount of shares the user receives.\\n    function calculateSharesOutGivenBondsInDown(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 dy,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256 result) {\\n        bool success;\\n        (result, success) = calculateSharesOutGivenBondsInDownSafe(\\n            ze,\\n            y,\\n            dy,\\n            t,\\n            c,\\n            mu\\n        );\\n        if (!success) {\\n            Errors.throwInsufficientLiquidityError();\\n        }\\n    }\\n\\n    /// @dev Calculates the amount of shares a user will receive from the pool\\n    ///      by providing a specified amount of bonds. This function returns a\\n    ///      success flag instead of reverting. We underestimate the amount of\\n    ///      shares out.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param dy The amount of bonds paid to the pool.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The amount of shares the user receives\\n    /// @return A flag indicating if the calculation succeeded.\\n    function calculateSharesOutGivenBondsInDownSafe(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 dy,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256, bool) {\\n        // NOTE: We round k up to make the rhs of the equation larger.\\n        //\\n        // k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n        uint256 k = kUp(ze, y, t, c, mu);\\n\\n        // (y + dy)^(1 - t)\\n        y = (y + dy).pow(t);\\n\\n        // If k is less than y, we return with a failure flag.\\n        if (k < y) {\\n            return (0, false);\\n        }\\n\\n        // NOTE: We round _z up to make the rhs of the equation larger.\\n        //\\n        // ((k - (y + dy)^(1 - t)) / (c / \u00b5))^(1 / (1 - t)))\\n        uint256 _z;\\n        unchecked {\\n            _z = k - y;\\n        }\\n        _z = _z.mulDivUp(mu, c);\\n        if (_z >= ONE) {\\n            // Rounding the exponent up results in a larger outcome.\\n            _z = _z.pow(ONE.divUp(t));\\n        } else {\\n            // Rounding the exponent down results in a larger outcome.\\n            _z = _z.pow(ONE.divDown(t));\\n        }\\n        // ((k - (y + dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t))) / \u00b5\\n        _z = _z.divUp(mu);\\n\\n        // If ze is less than _z, we return a failure flag since the calculation\\n        // underflowed.\\n        if (ze < _z) {\\n            return (0, false);\\n        }\\n\\n        // \u0394z = ze - ((k - (y + dy)^(1 - t) ) / (c / \u00b5))^(1 / (1 - t)) / \u00b5\\n        unchecked {\\n            return (ze - _z, true);\\n        }\\n    }\\n\\n    /// @dev Calculates the share payment required to purchase the maximum\\n    ///      amount of bonds from the pool. This function returns a success flag\\n    ///      instead of reverting. We round so that the max buy amount is\\n    ///      underestimated.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The share payment to purchase the maximum amount of bonds.\\n    /// @return A flag indicating if the calculation succeeded.\\n    function calculateMaxBuySharesInSafe(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256, bool) {\\n        // We solve for the maximum buy using the constraint that the pool's\\n        // spot price can never exceed 1. We do this by noting that a spot price\\n        // of 1, ((mu * ze') / y') ** tau = 1, implies that mu * ze' = y'. This\\n        // simplifies YieldSpace to:\\n        //\\n        // k = ((c / mu) + 1) * (mu * ze') ** (1 - tau),\\n        //\\n        // This gives us the maximum effective share reserves of:\\n        //\\n        // ze' = (1 / mu) * (k / ((c / mu) + 1)) ** (1 / (1 - tau)).\\n        uint256 k = kDown(ze, y, t, c, mu);\\n        uint256 optimalZe = k.divDown(c.divUp(mu) + ONE);\\n        if (optimalZe >= ONE) {\\n            // Rounding the exponent down results in a smaller outcome.\\n            optimalZe = optimalZe.pow(ONE.divDown(t));\\n        } else {\\n            // Rounding the exponent up results in a smaller outcome.\\n            optimalZe = optimalZe.pow(ONE.divUp(t));\\n        }\\n        optimalZe = optimalZe.divDown(mu);\\n\\n        // The optimal trade size is given by dz = ze' - ze. If the calculation\\n        // underflows, we return a failure flag.\\n        if (optimalZe < ze) {\\n            return (0, false);\\n        }\\n        unchecked {\\n            return (optimalZe - ze, true);\\n        }\\n    }\\n\\n    /// @dev Calculates the maximum amount of bonds that can be purchased with\\n    ///      the specified reserves. This function returns a success flag\\n    ///      instead of reverting. We round so that the max buy amount is\\n    ///      underestimated.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The maximum amount of bonds that can be purchased.\\n    /// @return A flag indicating if the calculation succeeded.\\n    function calculateMaxBuyBondsOutSafe(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256, bool) {\\n        // We can use the same derivation as in `calculateMaxBuySharesIn` to\\n        // calculate the minimum bond reserves as:\\n        //\\n        // y' = (k / ((c / mu) + 1)) ** (1 / (1 - tau)).\\n        uint256 k = kUp(ze, y, t, c, mu);\\n        uint256 optimalY = k.divUp(c.divDown(mu) + ONE);\\n        if (optimalY >= ONE) {\\n            // Rounding the exponent up results in a larger outcome.\\n            optimalY = optimalY.pow(ONE.divUp(t));\\n        } else {\\n            // Rounding the exponent down results in a larger outcome.\\n            optimalY = optimalY.pow(ONE.divDown(t));\\n        }\\n\\n        // The optimal trade size is given by dy = y - y'. If the calculation\\n        // underflows, we return a failure flag.\\n        if (y < optimalY) {\\n            return (0, false);\\n        }\\n        unchecked {\\n            return (y - optimalY, true);\\n        }\\n    }\\n\\n    /// @dev Calculates the maximum amount of bonds that can be sold with the\\n    ///      specified reserves. We round so that the max sell amount is\\n    ///      underestimated.\\n    /// @param z The share reserves.\\n    /// @param zeta The share adjustment.\\n    /// @param y The bond reserves.\\n    /// @param zMin The minimum share reserves.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The maximum amount of bonds that can be sold.\\n    /// @return A flag indicating whether or not the calculation was successful.\\n    function calculateMaxSellBondsInSafe(\\n        uint256 z,\\n        int256 zeta,\\n        uint256 y,\\n        uint256 zMin,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256, bool) {\\n        // If the share adjustment is negative, the minimum share reserves is\\n        // given by `zMin - zeta`, which ensures that the share reserves never\\n        // fall below the minimum share reserves. Otherwise, the minimum share\\n        // reserves is just zMin.\\n        if (zeta < 0) {\\n            zMin = zMin + uint256(-zeta);\\n        }\\n\\n        // We solve for the maximum bond amount using the constraint that the\\n        // pool's share reserves can never fall below the minimum share reserves\\n        // `zMin`. Substituting `ze = zMin` simplifies YieldSpace to:\\n        //\\n        // k = (c / mu) * (mu * zMin) ** (1 - tau) + y' ** (1 - tau)\\n        //\\n        // This gives us the maximum bonds that can be sold to the pool as:\\n        //\\n        // y' = (k - (c / mu) * (mu * zMin) ** (1 - tau)) ** (1 / (1 - tau)).\\n        (uint256 ze, bool success) = HyperdriveMath\\n            .calculateEffectiveShareReservesSafe(z, zeta);\\n\\n        if (!success) {\\n            return (0, false);\\n        }\\n        uint256 k = kDown(ze, y, t, c, mu);\\n        uint256 rhs = c.mulDivUp(mu.mulUp(zMin).pow(t), mu);\\n        if (k < rhs) {\\n            return (0, false);\\n        }\\n        uint256 optimalY;\\n        unchecked {\\n            optimalY = k - rhs;\\n        }\\n        if (optimalY >= ONE) {\\n            // Rounding the exponent down results in a smaller outcome.\\n            optimalY = optimalY.pow(ONE.divDown(t));\\n        } else {\\n            // Rounding the exponent up results in a smaller outcome.\\n            optimalY = optimalY.pow(ONE.divUp(t));\\n        }\\n\\n        // The optimal trade size is given by dy = y' - y. If this subtraction\\n        // will underflow, we return a failure flag.\\n        if (optimalY < y) {\\n            return (0, false);\\n        }\\n        unchecked {\\n            return (optimalY - y, true);\\n        }\\n    }\\n\\n    /// @dev Calculates the YieldSpace invariant k. This invariant is given by:\\n    ///\\n    ///      k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n    ///\\n    ///      This variant of the calculation overestimates the result.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The YieldSpace invariant, k.\\n    function kUp(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256) {\\n        // NOTE: Rounding up to overestimate the result.\\n        //\\n        /// k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n        return c.mulDivUp(mu.mulUp(ze).pow(t), mu) + y.pow(t);\\n    }\\n\\n    /// @dev Calculates the YieldSpace invariant k. This invariant is given by:\\n    ///\\n    ///      k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n    ///\\n    ///      This variant of the calculation underestimates the result.\\n    /// @param ze The effective share reserves.\\n    /// @param y The bond reserves.\\n    /// @param t The time elapsed since the term's start.\\n    /// @param c The vault share price.\\n    /// @param mu The initial vault share price.\\n    /// @return The modified YieldSpace Constant.\\n    function kDown(\\n        uint256 ze,\\n        uint256 y,\\n        uint256 t,\\n        uint256 c,\\n        uint256 mu\\n    ) internal pure returns (uint256) {\\n        // NOTE: Rounding down to underestimate the result.\\n        //\\n        /// k = (c / \u00b5) * (\u00b5 * ze)^(1 - t) + y^(1 - t)\\n        return c.mulDivDown(mu.mulDown(ze).pow(t), mu) + y.pow(t);\\n    }\\n}\\n\"\r\n    },\r\n    \"nomad/ExcessivelySafeCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n        0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _value The value in wei to send to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint256 _value,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                _value, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n        internal\\n        pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"openzeppelin/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"openzeppelin/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": false,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"vaultSharesToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkerFactory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"linkerCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"initialVaultSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumShareReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitBreakerDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpointDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStretch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sweepCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"checkpointRewarder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"curve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceZombie\",\"type\":\"uint256\"}],\"internalType\":\"struct IHyperdrive.Fees\",\"name\":\"fees\",\"type\":\"tuple\"}],\"internalType\":\"struct IHyperdrive.PoolConfig\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_target0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target4\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedSuccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCheckpointRewarder\",\"type\":\"address\"}],\"name\":\"CheckpointRewarderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"CloseLong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"CloseShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"}],\"name\":\"CollectGovernanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"checkpointTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkpointVaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturedShorts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturedLongs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSharePrice\",\"type\":\"uint256\"}],\"name\":\"CreateCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OpenLong\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseProceeds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OpenShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalShareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"RedeemWithdrawalShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalShareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSweepCollector\",\"type\":\"address\"}],\"name\":\"SweepCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"closeLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"closeShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"collectGovernanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"openLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"openShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"redeemWithdrawalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"asBase\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IHyperdrive.Options\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setApprovalBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setCheckpointRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setSweepCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferFromBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RETHHyperdrive", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "10000000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000320000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000ae78736cd615f374d3085123a210448e74fc639300000000000000000000000008b40647714ac1e5742633fc2d83c20d61a199d24d63914b6a33d8813a5654ae2dc977f37e398817df2519d374573ab851f9cb380000000000000000000000000000000000000000000000000f6bfba2034bd1ad00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000007c5850872380000000000000000000000000000000000000000000000000000000000000eff100000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000379c9693adeb17000000000000000000000000f95b98256edb861be389b9807f6656e8be2dc488000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000e35fa931a0000000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000463ba5f41413b5f318fbf6256c8aa78e5d3824550000000000000000000000001dcacd117101161d4beb63f61443fa03059ae9dc000000000000000000000000b83c81797c7036479fe1bebafeff1a7490126af000000000000000000000000093ed390c959b561e98a2343a74bccd7a77ae5dc800000000000000000000000000a3093d7f16c8cd58bb0bdc9f998b8389182b4f0000000000000000000000000000000000000000000000000000000000000022456c656d656e7444414f203138322044617920724554482048797065726472697665000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x00a3093d7f16c8cd58bb0bdc9f998b8389182b4f", "SwarmSource": ""}