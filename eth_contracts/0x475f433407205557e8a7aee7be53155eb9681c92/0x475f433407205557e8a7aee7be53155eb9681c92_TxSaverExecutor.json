{"SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.24;\n\n\n\n\n\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n    address internal constant PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D;\n}\n\n\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance < amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance < value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    /// @dev Deprecated method, selfdestruct will soon just send eth\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\n\n\n\ncontract DFSRegistry is AdminAuth {\n    error EntryAlreadyExistsError(bytes4);\n    error EntryNonExistentError(bytes4);\n    error EntryNotInChangeError(bytes4);\n    error ChangeNotReadyError(uint256,uint256);\n    error EmptyPrevAddrError(bytes4);\n    error AlreadyInContractChangeError(bytes4);\n    error AlreadyInWaitPeriodChangeError(bytes4);\n\n    event AddNewContract(address,bytes4,address,uint256);\n    event RevertToPreviousAddress(address,bytes4,address,address);\n    event StartContractChange(address,bytes4,address,address);\n    event ApproveContractChange(address,bytes4,address,address);\n    event CancelContractChange(address,bytes4,address,address);\n    event StartWaitPeriodChange(address,bytes4,uint256);\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes4 => Entry) public entries;\n    mapping(bytes4 => address) public previousAddresses;\n\n    mapping(bytes4 => address) public pendingAddresses;\n    mapping(bytes4 => uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registered address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes4 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registered\n    /// @param _id Id of contract\n    function isRegistered(bytes4 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes4 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        if (entries[_id].exists){\n            revert EntryAlreadyExistsError(_id);\n        }\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\n    }\n\n    /// @notice Reverts to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\n        if (!(entries[_id].exists)){\n            revert EntryNonExistentError(_id);\n        }\n        if (previousAddresses[_id] == address(0)){\n            revert EmptyPrevAddrError(_id);\n        }\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inWaitPeriodChange){\n            revert AlreadyInWaitPeriodChangeError(_id);\n        }\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inContractChange){\n            revert AlreadyInContractChangeError(_id);\n        }\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetCoreAddresses {\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant MODULE_AUTH_ADDR = 0x7407974DDBF539e552F1d051e44573090912CC3D;\n    address internal constant DEFISAVER_LOGGER = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\n\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\n    address internal constant BUNDLE_STORAGE_ADDR = 0x223c6aDE533851Df03219f6E3D8B763Bd47f84cf;\n    address internal constant STRATEGY_STORAGE_ADDR = 0xF52551F95ec4A2B4299DcC42fbbc576718Dbf933;\n\n    address internal constant RECIPE_EXECUTOR_ADDR = 0x5029336642814bC51a42bA80BF83a6322110035D;\n    address internal constant BYTES_TRANSIENT_STORAGE = 0xB3FE6f712c8B8c64CD2780ce714A36e7640DDf0f;\n}\n\n\n\n\n\n\n\ncontract CoreHelper is MainnetCoreAddresses {\n}\n\n\n\n\n\n\n\ncontract BotAuthForTxSaver is AdminAuth {\n    mapping(address => bool) public approvedCallers;\n\n    /// @notice Checks if the caller is approved\n    /// @param _caller Address of the caller\n    function isApproved(address _caller) public view returns (bool) {\n        return approvedCallers[_caller];\n    }\n\n    /// @notice Adds a new bot address which will be able to call TxSaverExecutor\n    /// @param _caller Bot address\n    function addCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = true;\n    }\n\n    /// @notice Removes a bot address so it can't call TxSaverExecutor\n    /// @param _caller Bot address\n    function removeCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = false;\n    }\n}\n\n\n\n\n\n\n\ninterface ITxSaverBytesTransientStorage {\n    function getFeeType() external view returns (uint256);\n    function getBytesTransiently() external view returns (bytes memory result);\n}\n\n\n\n\n\n\n\n\n\ncontract TxSaverBytesTransientStorage is ITxSaverBytesTransientStorage {\n    \n    uint256 constant POSITION_FEE_FLAG = 1;\n    uint256 constant EOA_OR_WALLET_FEE_FLAG = 2;\n\n    function setBytesTransiently(bytes memory _data, bool _takeFeeFromPosition) internal {\n        uint256 dataLength = _data.length;\n\n        // ensure data follows abi specification, so length will be multiple of 32 when using abi.encode    \n        require(dataLength >= 32 && dataLength % 32 == 0);\n\n        // write flag to first slot to indicate if fee is taken from position or EOA/wallet\n        uint256 flag = _takeFeeFromPosition ? POSITION_FEE_FLAG : EOA_OR_WALLET_FEE_FLAG;\n        assembly {\n            tstore(0, flag)\n        }\n\n        // write length of _data to second slot\n        assembly {\n            tstore(1, dataLength)\n        }\n\n        // calculate how many slots at full size are we going to use\n        uint256 chunks = dataLength / 32;\n        uint256 i = 1;\n        // write _data split into bytes32 from slot 2 to slot 2+chunks\n        for (i; i <= chunks; ++i) {\n            uint256 slot = i + 1;\n            bytes32 chunk;\n            assembly {\n                chunk := mload(add(_data, mul(0x20, i))) // chunks are bytes32: _data[0:32] -> _data[32:64] -> etc\n                tstore(slot, chunk)\n            }\n        }\n    }\n\n    function getFeeType() public view returns (uint256) {\n        uint256 feeType;\n        assembly{\n            feeType := tload(0)\n        }\n        return feeType;\n    }\n\n    function getBytesTransiently() public view returns (bytes memory result){\n        uint256 dataLength;\n        // fetch data length from second slot\n        assembly{\n            dataLength := tload(1)\n        }\n        // find out how many full size chunks there are\n        uint256 chunks = dataLength / 32;\n        uint256 i = 1;\n        // concat each full size chunk to the result\n        for (i; i <= chunks; ++i) {\n            bytes32 chunk;\n            uint256 slot = i + 1;\n            assembly {\n                chunk := tload(slot)\n            }\n            result = bytes.concat(result, chunk);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\ncontract StrategyModel {\n        \n    /// @dev Group of strategies bundled together so user can sub to multiple strategies at once\n    /// @param creator Address of the user who created the bundle\n    /// @param strategyIds Array of strategy ids stored in StrategyStorage\n    struct StrategyBundle {\n        address creator;\n        uint64[] strategyIds;\n    }\n\n    /// @dev Template/Class which defines a Strategy\n    /// @param name Name of the strategy useful for logging what strategy is executing\n    /// @param creator Address of the user which created the strategy\n    /// @param triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    /// @param continuous If the action is repeated (continuos) or one time\n    struct Strategy {\n        string name;\n        address creator;\n        bytes4[] triggerIds;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n        bool continuous;\n    }\n\n    /// @dev List of actions grouped as a recipe\n    /// @param name Name of the recipe useful for logging what recipe is executing\n    /// @param callData Array of calldata inputs to each action\n    /// @param subData Used only as part of strategy, subData injected from StrategySub.subData\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    struct Recipe {\n        string name;\n        bytes[] callData;\n        bytes32[] subData;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n    }\n\n    /// @dev Actual data of the sub we store on-chain\n    /// @dev In order to save on gas we store a keccak256(StrategySub) and verify later on\n    /// @param walletAddr Address of the users smart wallet/proxy\n    /// @param isEnabled Toggle if the subscription is active\n    /// @param strategySubHash Hash of the StrategySub data the user inputted\n    struct StoredSubData {\n        bytes20 walletAddr; // address but put in bytes20 for gas savings\n        bool isEnabled;\n        bytes32 strategySubHash;\n    }\n\n    /// @dev Instance of a strategy, user supplied data\n    /// @param strategyOrBundleId Id of the strategy or bundle, depending on the isBundle bool\n    /// @param isBundle If true the id points to bundle, if false points directly to strategyId\n    /// @param triggerData User supplied data needed for checking trigger conditions\n    /// @param subData User supplied data used in recipe\n    struct StrategySub {\n        uint64 strategyOrBundleId;\n        bool isBundle;\n        bytes[] triggerData;\n        bytes32[] subData;\n    }\n\n    /// @dev Data needed when signing relay transaction\n    /// @param maxTxCostInFeeToken Max tx cost user is willing to pay in fee token\n    /// @param feeToken Address of the token user is willing to pay fee in\n    /// @param tokenPriceInEth Price of the token in ETH\n    /// @param deadline Deadline for the relay transaction to be executed\n    /// @param shouldTakeFeeFromPosition Flag to indicate if fee should be taken from position, otherwise from EOA/wallet\n    struct TxSaverSignedData {\n        uint256 maxTxCostInFeeToken;\n        address feeToken;\n        uint256 tokenPriceInEth;\n        uint256 deadline;\n        bool shouldTakeFeeFromPosition;\n    }\n}\n\n\n\n\n\n\ncontract DFSExchangeData {\n\n    struct OffchainData {\n        address wrapper; // dfs wrapper address for the aggregator (must be in WrapperExchangeRegistry)\n        address exchangeAddr; // exchange address we are calling to execute the order (must be in ExchangeAggregatorRegistry)\n        address allowanceTarget; // exchange aggregator contract we give allowance to\n        uint256 price; // expected price that the aggregator sent us\n        uint256 protocolFee; // deprecated (used as a separate fee amount for 0x v1)\n        bytes callData; // 0ff-chain calldata the aggregator gives to perform the swap\n    }\n\n    struct ExchangeData {\n        address srcAddr; // source token address (which we're selling)\n        address destAddr; // destination token address (which we're buying)\n        uint256 srcAmount; // amount of source token in token decimals\n        uint256 destAmount; // amount of bought token in token decimals\n        uint256 minPrice; // minPrice we are expecting (checked in DFSExchangeCore)\n        uint256 dfsFeeDivider; // service fee divider\n        address user; // currently deprecated (used to check custom fees for the user)\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n\n    struct InjectedExchangeData {\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n}\n\n\n\n\n\n\n\ninterface ISafe {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Operation operation\n    ) external returns (bool success);\n\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) external view;\n\n    function checkNSignatures(\n        address executor,\n        bytes32 dataHash,\n        bytes memory /* data */,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) external view;\n\n    function approveHash(bytes32 hashToApprove) external;\n\n    function domainSeparator() external view returns (bytes32);\n\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes32);\n\n    function nonce() external view returns (uint256);\n\n    function setFallbackHandler(address handler) external;\n\n    function getOwners() external view returns (address[] memory);\n\n    function isOwner(address owner) external view returns (bool);\n\n    function getThreshold() external view returns (uint256);\n\n    function enableModule(address module) external;\n\n    function isModuleEnabled(address module) external view returns (bool);\n\n    function disableModule(address prevModule, address module) external;\n\n    function getModulesPaginated(\n        address start,\n        uint256 pageSize\n    ) external view returns (address[] memory array, address next);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TxSaverExecutor is \n    StrategyModel,\n    AdminAuth,\n    CoreHelper,\n    TxSaverBytesTransientStorage\n{\n    bytes4 public constant BOT_AUTH_ID_FOR_TX_SAVER = bytes4(keccak256(\"BotAuthForTxSaver\"));\n    bytes4 public constant RECIPE_EXECUTOR_ID = bytes4(keccak256(\"RecipeExecutor\"));\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    /// Caller must be authorized bot\n    error BotNotApproved(address bot);\n    /// Revert if execution fails when using safe wallet\n    error SafeExecutionError();\n    /// Revert if signature is expired\n    error TxSaverSignatureExpired(uint256 deadline, uint256 currentTimestamp);\n\n    /// @notice Data needed to execute a Safe transaction\n    /// @param safe Address of the Safe wallet\n    /// @param refundReceiver Injected address to track safe points\n    /// @param data Data payload of Safe transaction\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n    struct SafeTxParams {\n        address safe;\n        address refundReceiver;\n        bytes data;\n        bytes signatures;\n    }\n\n    /// @notice Execute a TxSaver transaction signed by user\n    /// @notice When taking fee from position, gas fee is taken inside sell action.\n    /// @notice Right now, we only support fee taking from position if recipe has sell action\n    ///\n    /// @notice when fee is taken from EOA/wallet:\n    /// @notice If wallet is 1/1, gas fee is taken from eoa\n    /// @notice If wallet is n/m, gas fee is taken from wallet itself\n    ///\n    /// @param _params SafeTxParams data needed to execute safe tx\n    /// @param _estimatedGas Estimated gas usage for the transaction\n    /// @param _l1GasCostInEth Additional gas cost added for Optimism based L2s\n    /// @param _injectedExchangeData Exchange data injected by backend\n    function executeTx(\n        SafeTxParams calldata _params,\n        uint256 _estimatedGas,\n        uint256 _l1GasCostInEth,\n        DFSExchangeData.InjectedExchangeData calldata _injectedExchangeData\n    ) external {\n        // only authorized bot can call this function\n        if (!BotAuthForTxSaver(registry.getAddr(BOT_AUTH_ID_FOR_TX_SAVER)).isApproved(msg.sender)) {\n            revert BotNotApproved(msg.sender);\n        }\n\n        (, TxSaverSignedData memory txSaverData) = parseTxSaverSignedData(_params.data);\n\n        // check if signature is expired\n        if (txSaverData.deadline > 0 && block.timestamp > txSaverData.deadline) {\n            revert TxSaverSignatureExpired(txSaverData.deadline, block.timestamp);\n        }\n\n        if (txSaverData.shouldTakeFeeFromPosition) {\n            setBytesTransiently(\n                abi.encode(_estimatedGas, _l1GasCostInEth, txSaverData, _injectedExchangeData),\n                txSaverData.shouldTakeFeeFromPosition\n            );\n        } else {\n            setBytesTransiently(\n                abi.encode(_estimatedGas, _l1GasCostInEth, _injectedExchangeData),\n                txSaverData.shouldTakeFeeFromPosition\n            );\n        }\n\n        _executeSafeTx(_params);\n    }\n\n    function _executeSafeTx(SafeTxParams memory _params) internal {\n        bool success = ISafe(_params.safe).execTransaction(\n            0x2Ee96Cf53AE5FBd5309284704F978d0cA66cB963,\n            0, // value\n            _params.data,\n            ISafe.Operation.DelegateCall,\n            0, // safeTxGas,\n            0, // baseGas\n            0, // gasPrice\n            address(0), // gasToken\n            payable(_params.refundReceiver),\n            _params.signatures \n        );\n        if (!success) {\n            revert SafeExecutionError();\n        }\n    }\n\n    function parseTxSaverSignedData(bytes calldata _data) \n        public pure returns (Recipe memory recipe, TxSaverSignedData memory txSaverData)\n    {\n        (recipe, txSaverData) = abi.decode(_data[4:], (Recipe, TxSaverSignedData)); \n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"}],\"name\":\"BotNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeExecutionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"TxSaverSignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BOT_AUTH_ID_FOR_TX_SAVER\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECIPE_EXECUTOR_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"internalType\":\"struct TxSaverExecutor.SafeTxParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_estimatedGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l1GasCostInEth\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.InjectedExchangeData\",\"name\":\"_injectedExchangeData\",\"type\":\"tuple\"}],\"name\":\"executeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytesTransiently\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"parseTxSaverSignedData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"callData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"actionIds\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint8[][]\",\"name\":\"paramMapping\",\"type\":\"uint8[][]\"}],\"internalType\":\"struct StrategyModel.Recipe\",\"name\":\"recipe\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTxCostInFeeToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldTakeFeeFromPosition\",\"type\":\"bool\"}],\"internalType\":\"struct StrategyModel.TxSaverSignedData\",\"name\":\"txSaverData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TxSaverExecutor", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "cancun", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}