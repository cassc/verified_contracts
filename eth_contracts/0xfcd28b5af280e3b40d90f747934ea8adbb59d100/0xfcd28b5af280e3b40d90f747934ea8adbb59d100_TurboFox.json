{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\n// Interface for the ERC-20 standard for tokens.\r\ninterface IERC20 {\r\n    // Returns the total token supply.\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // Returns the account balance of another account with address `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Transfers `amount` tokens to address `recipient`, and MUST fire the Transfer event.\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    // Returns the amount which `spender` is still allowed to withdraw from `owner`.\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    // Allows `spender` to withdraw from your account multiple times, up to the `amount` value.\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    // Transfers `amount` tokens from `sender` to `recipient` given the from account has enough balance.\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    // Event emitted when tokens are transferred, including zero value transfers.\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // Event emitted when the allowance of a `spender` for an `owner` is set by a call to `approve`.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Contract to define ownership and allow transfer of ownership.\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    // Event for ownership transfers.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    // Returns the address of the current owner.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Modifier to restrict access to owner-only functions.\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Transfers ownership of the contract to a new address.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    // Allows the current owner to relinquish control of the contract.\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n// Main token contract implementing the ERC-20 interface and additional functionalities.\r\ncontract TurboFox is IERC20, Ownable {\r\n    string public constant name = \"Turbo Fox\";\r\n    string public constant symbol = \"TFOX\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 private totalSupply_ = 2e9 * 10**uint256(decimals); // Initial supply of 2 billion tokens, with decimal support.\r\n\r\n    uint256 public taxRate = 5; // Tax rate is 5% for transactions.\r\n    uint256 public maxTransactionAmount = totalSupply_ / 100; // Max transaction amount set to 1% of total supply.\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n    mapping(address => bool) private taxExempt;\r\n\r\n    constructor() {\r\n        balances[_msgSender()] = totalSupply_;\r\n        emit Transfer(address(0), _msgSender(), totalSupply_);\r\n        taxExempt[_msgSender()] = true; // Exempt the owner from tax by default.\r\n    }\r\n\r\n    // Returns the total token supply.\r\n    function totalSupply() public view override returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    // Returns the balance of a token owner.\r\n    function balanceOf(address tokenOwner) public view override returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // Transfer tokens to another address, applying tax if applicable and checking for owner exemption.\r\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n        if (_msgSender() == owner() || taxExempt[_msgSender()]) {\r\n            balances[_msgSender()] -= numTokens;\r\n            balances[receiver] += numTokens;\r\n            emit Transfer(_msgSender(), receiver, numTokens);\r\n            return true;\r\n        }\r\n\r\n        require(numTokens <= balances[_msgSender()], \"Insufficient balance\");\r\n        require(numTokens <= maxTransactionAmount, \"Exceeds max transaction amount\");\r\n\r\n        uint256 tax = (numTokens * taxRate) / 100;\r\n        uint256 tokensToTransfer = numTokens - tax;\r\n\r\n        balances[_msgSender()] -= numTokens;\r\n        balances[receiver] += tokensToTransfer;\r\n        if (tax > 0) {\r\n            balances[owner()] += tax;\r\n            emit Transfer(_msgSender(), owner(), tax);\r\n        }\r\n\r\n        emit Transfer(_msgSender(), receiver, tokensToTransfer);\r\n        return true;\r\n    }\r\n\r\n    // Approve another address to spend tokens on your behalf.\r\n    function approve(address spender, uint256 numTokens) public override returns (bool) {\r\n        allowed[_msgSender()][spender] = numTokens;\r\n        emit Approval(_msgSender(), spender, numTokens);\r\n        return true;\r\n    }\r\n\r\n    // Check the amount of tokens that an owner allowed a spender.\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    // Transfer tokens from one address to another, applying tax if applicable and checking for owner exemption.\r\n    function transferFrom(address sender, address recipient, uint256 numTokens) public override returns (bool) {\r\n        if (sender == owner() || taxExempt[sender]) {\r\n            balances[sender] -= numTokens;\r\n            balances[recipient] += numTokens;\r\n            allowed[sender][_msgSender()] -= numTokens;\r\n            emit Transfer(sender, recipient, numTokens);\r\n            return true;\r\n        }\r\n\r\n        require(numTokens <= balances[sender], \"Insufficient balance\");\r\n        require(numTokens <= allowed[sender][_msgSender()], \"Insufficient allowance\");\r\n        require(numTokens <= maxTransactionAmount, \"Exceeds max transaction amount\");\r\n\r\n        uint256 tax = (numTokens * taxRate) / 100;\r\n        uint256 tokensToTransfer = numTokens - tax;\r\n\r\n        balances[sender] -= numTokens;\r\n        allowed[sender][_msgSender()] -= numTokens;\r\n        balances[recipient] += tokensToTransfer;\r\n        if (tax > 0) {\r\n            balances[owner()] += tax;\r\n            emit Transfer(sender, owner(), tax);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tokensToTransfer);\r\n        return true;\r\n    }\r\n\r\n    // Adjust the tax rate for transactions.\r\n    function adjustTaxRate(uint256 newRate) public onlyOwner {\r\n        taxRate = newRate;\r\n    }\r\n\r\n    // Adjust the maximum transaction amount.\r\n    function adjustMaxTransactionAmount(uint256 newMax) public onlyOwner {\r\n        maxTransactionAmount = newMax;\r\n    }\r\n\r\n    // Exempt or include an address in the taxation logic.\r\n    function exemptAddressFromTax(address account, bool isExempt) public onlyOwner {\r\n        taxExempt[account] = isExempt;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"adjustMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"adjustTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"exemptAddressFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TurboFox", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b9cf9b96bb7d8560d3ee8bcca22b6a4d2180af5414020d81b08261922178861"}