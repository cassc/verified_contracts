{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface AutomationCompatibleInterface {\r\n\r\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\r\n\r\n  function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n\r\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\r\n  enum RaffleState {\r\n    OPEN,\r\n    CALCULATING\r\n  }\r\n\r\n  VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\r\n  uint64 private immutable i_subscriptionId;\r\n  bytes32 private immutable i_gasLane;\r\n  uint32 private immutable i_callbackGasLimit;\r\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\r\n  uint32 private constant NUM_WORDS = 1;\r\n\r\n  uint256 private immutable i_interval;\r\n  uint256 private immutable i_entranceFee;\r\n  uint256 private s_lastTimeStamp;\r\n  address private s_recentWinner;\r\n  address payable[] private s_players;\r\n  RaffleState private s_raffleState;\r\n\r\n  event RequestedRaffleWinner(uint256 indexed requestId);\r\n  event RaffleEnter(address indexed player);\r\n  event WinnerPicked(address indexed player);\r\n\r\n  constructor(\r\n    address vrfCoordinatorV2,\r\n    uint64 subscriptionId,\r\n    bytes32 gasLane, // keyHash\r\n    uint256 interval,\r\n    uint256 entranceFee,\r\n    uint32 callbackGasLimit\r\n  ) VRFConsumerBaseV2(vrfCoordinatorV2) {\r\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n    i_gasLane = gasLane;\r\n    i_interval = interval;\r\n    i_subscriptionId = subscriptionId;\r\n    i_entranceFee = entranceFee;\r\n    s_raffleState = RaffleState.OPEN;\r\n    s_lastTimeStamp = block.timestamp;\r\n    i_callbackGasLimit = callbackGasLimit;\r\n  }\r\n\r\n  function enterRaffle() public payable {\r\n    require(msg.value >= i_entranceFee, \"Not enough value sent\");\r\n    require(s_raffleState == RaffleState.OPEN, \"Raffle is not open\");\r\n    s_players.push(payable(msg.sender));\r\n    emit RaffleEnter(msg.sender);\r\n  }\r\n\r\n  function checkUpkeep(\r\n    bytes memory /* checkData */\r\n  )\r\n    public\r\n    view\r\n    override\r\n    returns (bool upkeepNeeded, bytes memory /* performData */)\r\n  {\r\n    bool isOpen = RaffleState.OPEN == s_raffleState;\r\n    bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\r\n    bool hasPlayers = s_players.length > 0;\r\n    bool hasBalance = address(this).balance > 0;\r\n    upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\r\n    return (upkeepNeeded, \"0x0\"); \r\n  }\r\n\r\n  function performUpkeep(bytes calldata /* performData */) external override {\r\n    (bool upkeepNeeded, ) = checkUpkeep(\"\");\r\n    require(upkeepNeeded, \"Upkeep not needed\");\r\n    s_raffleState = RaffleState.CALCULATING;\r\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\r\n      i_gasLane,\r\n      i_subscriptionId,\r\n      REQUEST_CONFIRMATIONS,\r\n      i_callbackGasLimit,\r\n      NUM_WORDS\r\n    );\r\n    emit RequestedRaffleWinner(requestId);\r\n  }\r\n\r\n  function fulfillRandomWords(\r\n    uint256 /* requestId */,\r\n    uint256[] memory randomWords\r\n  ) internal override {\r\n    uint256 indexOfWinner = randomWords[0] % s_players.length;\r\n    address payable recentWinner = s_players[indexOfWinner];\r\n    s_recentWinner = recentWinner;\r\n    s_players = new address payable[](0);\r\n    s_raffleState = RaffleState.OPEN;\r\n    s_lastTimeStamp = block.timestamp;\r\n    (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\r\n    require(success, \"Transfer failed\");\r\n    emit WinnerPicked(recentWinner);\r\n  }\r\n\r\n  function getRaffleState() public view returns (RaffleState) {\r\n    return s_raffleState;\r\n  }\r\n\r\n  function getNumWords() public pure returns (uint256) {\r\n    return NUM_WORDS;\r\n  }\r\n\r\n  function getRequestConfirmations() public pure returns (uint256) {\r\n    return REQUEST_CONFIRMATIONS;\r\n  }\r\n\r\n  function getRecentWinner() public view returns (address) {\r\n    return s_recentWinner;\r\n  }\r\n\r\n  function getPlayer(uint256 index) public view returns (address) {\r\n    return s_players[index];\r\n  }\r\n\r\n  function getLastTimeStamp() public view returns (uint256) {\r\n    return s_lastTimeStamp;\r\n  }\r\n\r\n  function getInterval() public view returns (uint256) {\r\n    return i_interval;\r\n  }\r\n\r\n  function getEntranceFee() public view returns (uint256) {\r\n    return i_entranceFee;\r\n  }\r\n\r\n  function getNumberOfPlayers() public view returns (uint256) {\r\n    return s_players.length;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Raffle", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e6990900000000000000000000000000000000000000000000000000000000000002faff8dedfbfa60af186cf3c830acbc32c05aae823045ae5ea7da1e45fbfaba4f92000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000002625a0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b8f092fe16beb0d4152e7abf1625aee2696234de16943dc31cceaeaaccde4e31"}