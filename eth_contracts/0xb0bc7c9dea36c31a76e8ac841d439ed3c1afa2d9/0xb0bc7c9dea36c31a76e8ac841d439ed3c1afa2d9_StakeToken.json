{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract StakeToken {\r\n    address public owner;\r\n    uint256 public totalStaked;\r\n    uint256 public totalRewardsDistributed;\r\n\r\n    IERC20 public rewardToken; // Declare the BEP-20 token contract\r\n\r\n    struct Staker {\r\n        uint256 amount;\r\n        uint256 startTimestamp;\r\n        uint256 duration; \r\n        uint256 claimedRewards;\r\n    }\r\n\r\n    mapping(address => Staker) public stakers;\r\n    address[] public allStakers;\r\n\r\n    // APY percentages that can be adjusted by the owner\r\n    uint256 public apy3Minutes;\r\n    uint256 public apy5Minutes;\r\n    uint256 public apy10Minutes;\r\n    uint256 public penaltyPercentage = 30; // Penalty percentage for early unstaking\r\n\r\n    uint256 public rewardDistributionInterval = 10 minutes;\r\n    uint256 public lastRewardDistributionTimestamp;\r\n\r\n    constructor(address _rewardTokenAddress) {\r\n        owner = msg.sender;\r\n        rewardToken = IERC20(_rewardTokenAddress); // Initialize the reward token contract\r\n\r\n        // Default APY percentages (adjustable by owner)\r\n        apy3Minutes = 100;\r\n        apy5Minutes = 30;\r\n        apy10Minutes = 60;\r\n\r\n        // Initialize the last reward distribution timestamp to the contract deployment time\r\n        lastRewardDistributionTimestamp = block.timestamp;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setAPY(uint256 _apy3Minutes, uint256 _apy5Minutes, uint256 _apy10Minutes) external onlyOwner {\r\n        apy3Minutes = _apy3Minutes;\r\n        apy5Minutes = _apy5Minutes;\r\n        apy10Minutes = _apy10Minutes;\r\n    }\r\n\r\n    function stake(uint256 minutesDuration, uint256 amount) external {\r\n        require(\r\n            minutesDuration == 3 || minutesDuration == 5 || minutesDuration == 10,\r\n            \"Invalid staking duration. Use 3, 5, or 10 minutes.\"\r\n        );\r\n        require(amount > 0, \"Amount to stake must be greater than 0\");\r\n        require(stakers[msg.sender].amount == 0, \"You already have an active stake\");\r\n\r\n        uint256 apy;\r\n\r\n        if (minutesDuration == 3) {\r\n            apy = apy3Minutes;\r\n        } else if (minutesDuration == 5) {\r\n            apy = apy5Minutes;\r\n        } else if (minutesDuration == 10) {\r\n            apy = apy10Minutes;\r\n        }\r\n\r\n        Staker storage newStaker = stakers[msg.sender];\r\n        newStaker.amount = amount;\r\n        newStaker.startTimestamp = block.timestamp;\r\n        newStaker.duration = minutesDuration;\r\n\r\n        allStakers.push(msg.sender);\r\n\r\n        // Transfer BEP-20 tokens from the sender to the contract\r\n        require(rewardToken.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\r\n\r\n        totalStaked += amount;\r\n    }\r\n\r\n    function unstake() external {\r\n        Staker storage staker = stakers[msg.sender];\r\n        require(staker.amount > 0, \"You do not have an active stake\");\r\n\r\n        if (block.timestamp < staker.startTimestamp + staker.duration * 1 minutes) {\r\n            // Calculate and apply the penalty for early unstaking\r\n            uint256 penaltyAmount = (staker.amount * penaltyPercentage) / 100;\r\n            uint256 remainingAmount = staker.amount - penaltyAmount;\r\n\r\n            // Transfer the remaining amount (after penalty) to the user\r\n            require(rewardToken.transfer(msg.sender, remainingAmount), \"Token transfer failed\");\r\n        } else {\r\n            // No penalty if the staking period has ended\r\n            require(rewardToken.transfer(msg.sender, staker.amount), \"Token transfer failed\");\r\n        }\r\n\r\n        totalStaked -= staker.amount;\r\n        delete stakers[msg.sender];\r\n\r\n        // Remove the staker from the allStakers array\r\n        for (uint256 i = 0; i < allStakers.length; i++) {\r\n            if (allStakers[i] == msg.sender) {\r\n                allStakers[i] = allStakers[allStakers.length - 1];\r\n                allStakers.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimReward() external {\r\n        Staker storage staker = stakers[msg.sender];\r\n        require(staker.amount > 0, \"You do not have an active stake\");\r\n\r\n        uint256 apy;\r\n\r\n        if (staker.duration == 3) {\r\n            apy = apy3Minutes;\r\n        } else if (staker.duration == 5) {\r\n            apy = apy5Minutes;\r\n        } else if (staker.duration == 10) {\r\n            apy = apy10Minutes;\r\n        }\r\n\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        require(currentTime >= staker.startTimestamp, \"Staking period has not started yet\");\r\n        require(currentTime > staker.startTimestamp + staker.claimedRewards, \"You have already claimed your rewards for this period\");\r\n\r\n        uint256 timeSinceLastClaim = currentTime - (staker.startTimestamp + staker.claimedRewards);\r\n        uint256 rewards = (staker.amount * apy * timeSinceLastClaim) / (365 days * 100);\r\n\r\n        staker.claimedRewards += timeSinceLastClaim;\r\n\r\n        // Transfer rewards in the form of BEP-20 tokens\r\n        require(rewardToken.transfer(msg.sender, rewards), \"Token transfer failed\");\r\n    }\r\n\r\n    function approveRewardToken(uint256 amount) external {\r\n        require(amount > 0, \"Approval amount must be greater than 0\");\r\n        require(rewardToken.approve(address(this), amount), \"Approval failed\");\r\n    }\r\n\r\n    function distributeRewards() external onlyOwner {\r\n        require(block.timestamp >= lastRewardDistributionTimestamp + rewardDistributionInterval, \"Distribution interval not reached yet\");\r\n\r\n        // Iterate through the allStakers array and calculate rewards for each staker\r\n        for (uint256 i = 0; i < allStakers.length; i++) {\r\n            address stakerAddress = allStakers[i];\r\n            Staker storage staker = stakers[stakerAddress];\r\n            if (staker.amount > 0) {\r\n                uint256 rewards = calculateRewards(staker);\r\n                require(rewardToken.transfer(stakerAddress, rewards), \"Reward distribution failed\");\r\n            }\r\n        }\r\n\r\n        // Update the last reward distribution timestamp\r\n        lastRewardDistributionTimestamp = block.timestamp;\r\n    }\r\n\r\n    function calculateRewards(Staker storage staker) internal view returns (uint256) {\r\n        uint256 apy;\r\n\r\n        if (staker.duration == 3) {\r\n            apy = apy3Minutes;\r\n        } else if (staker.duration == 5) {\r\n            apy = apy5Minutes;\r\n        } else if (staker.duration == 10) {\r\n            apy = apy10Minutes;\r\n        }\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 timeSinceLastClaim = currentTime - (staker.startTimestamp + staker.claimedRewards);\r\n        uint256 rewards = (staker.amount * apy * timeSinceLastClaim) / (365 days * 100);\r\n\r\n        return rewards;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy10Minutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy3Minutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy5Minutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardDistributionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy3Minutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy5Minutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy10Minutes\",\"type\":\"uint256\"}],\"name\":\"setAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minutesDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakeToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000736b677db7b536a3ba363cd5e501552082f2f9ca", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f74d4443fd458842d1bc95abe7581897eb405d3703ce1943bbd186dde5c9f3b9"}