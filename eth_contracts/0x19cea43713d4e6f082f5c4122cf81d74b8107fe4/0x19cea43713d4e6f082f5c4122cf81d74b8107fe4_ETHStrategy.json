{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/subStrategies/ETHStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\nimport \\\"./interfaces/IAavePool.sol\\\";\\nimport \\\"./interfaces/IAave.sol\\\";\\nimport \\\"./interfaces/IETHLeverage.sol\\\";\\nimport \\\"./interfaces/IFlashloanReceiver.sol\\\";\\nimport \\\"./interfaces/IExchange.sol\\\";\\nimport \\\"../interfaces/ISubStrategy.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\ncontract ETHStrategy is Ownable,ReentrancyGuard, ISubStrategy, IETHLeverage {\\n\\n    using SafeERC20 for IERC20;\\n    // Sub Strategy name\\n    string public constant poolName = \\\"ETHStrategy V0.9\\\";\\n\\n    mapping(address=>bool) operator;\\n\\n    // Controller address\\n    address public controller;\\n\\n    // Vault address\\n    address public vault;\\n\\n    // Constant magnifier\\n    uint256 public constant magnifier = 10000;\\n\\n    // Exchange Address\\n    address public exchange;\\n\\n    // Flashloan receiver\\n    address public receiver;\\n\\n    // Fee collector\\n    address public feePool;\\n\\n    // user input asset\\n    IERC20 public baseAsset;\\n\\n    // deposit asset into aave pool\\n    IERC20 public depositAsset;\\n\\n    // aave pool token\\n    IERC20 public aDepositAsset;\\n\\n    // aave address\\n    address public IaavePool;\\n\\n    uint256 public feeRate = 1000;\\n\\n    // Max Deposit\\n    uint256 public override maxDeposit;\\n\\n    // Last Earn Total\\n    uint256 internal lastTotal;\\n    bool internal harvested = false;\\n\\n    // Max Loan Ratio\\n    uint256 public mlr;\\n\\n    enum SrategyState {\\n        Normal,\\n        Deposit,\\n        Withdraw,\\n        RaiseMLR,\\n        ReduceMLR\\n    }\\n\\n    event SetController(address controller);\\n\\n    event SetVault(address vault);\\n\\n    event SetExchange(address exchange);\\n\\n    event SetFeePool(address feePool);\\n\\n    event SetMaxDeposit(uint256 maxDeposit);\\n\\n    event SetFlashloanReceiver(address receiver);\\n\\n    event SetMLR(uint256 oldMlr, uint256 newMlr);\\n\\n    event SetFeeRate(uint256 oldRate, uint256 newRate);\\n\\n    event SetOperator(address operator, bool istrue);\\n\\n    event LTVUpdate(\\n        uint256 oldDebt,\\n        uint256 oldCollateral,\\n        uint256 newDebt,\\n        uint256 newCollateral\\n    );\\n\\n    constructor(\\n        IERC20 _baseAsset,\\n        IERC20 _depositAsset,\\n        IERC20 _aDepositAsset,\\n        uint256 _mlr,\\n        address _IaavePool,\\n        address _vault,\\n        address _feePool,\\n        uint8 _emode\\n    ) {\\n        mlr = _mlr;\\n        baseAsset = _baseAsset;\\n        depositAsset = _depositAsset;\\n        aDepositAsset = _aDepositAsset;\\n        IaavePool = _IaavePool;\\n\\n        vault = _vault;\\n        feePool = _feePool;\\n\\n\\n        // Set Max Deposit as max uin256\\n        maxDeposit = type(uint256).max;\\n        address aave = IAavePool(_IaavePool).aave();\\n        baseAsset.safeApprove(aave, type(uint256).max);\\n        depositAsset.safeApprove(_IaavePool, type(uint256).max);\\n        if(_emode != 0){\\n            IAave(aave).setUserEMode(_emode);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n        Only controller can call\\n     */\\n    modifier onlyController() {\\n        require(controller == _msgSender(), \\\"NOT_CONTROLLER\\\");\\n        _;\\n    }\\n    modifier onlyOperator() {\\n        require(operator[_msgSender()] == true, \\\"NOT_OPERATOR\\\");\\n        _;\\n    }\\n    /**\\n        Only Flashloan receiver can call\\n     */\\n    modifier onlyReceiver() {\\n        require(receiver == _msgSender(), \\\"NOT_FLASHLOAN_RECEIVER\\\");\\n        _;\\n    }\\n    modifier collectFee(){\\n        (,uint256 mintAmount) = _calculateFee();\\n        harvested = true;\\n        if(mintAmount>0){\\n            IVault(vault).mint(mintAmount, feePool);\\n        }\\n        _;\\n        harvested = false;\\n        lastTotal = _realTotalAssets();\\n    }\\n    //////////////////////////////////////////\\n    //           Flash loan Fallback        //\\n    //////////////////////////////////////////\\n\\n    /**\\n        External Function for Callback when to flash loan\\n     */\\n    function loanFallback(\\n        uint256 loanAmt,\\n        uint256 feeAmt,\\n        bytes calldata userData\\n    ) external override onlyReceiver {\\n        (SrategyState curState,uint256 userValue) = abi.decode(userData,(SrategyState,uint256));\\n        require(curState != SrategyState.Normal, \\\"NORMAL_STATE_CANT_CALL_THIS\\\");\\n        address aave = IAavePool(IaavePool).aave();\\n        if (curState == SrategyState.Deposit) {\\n            // Swap baseAsset to depositAsset\\n            uint256 depoistAmt = IExchange(exchange).swap(address(baseAsset),address(depositAsset),userValue+loanAmt,0);\\n    \\n            IAavePool(IaavePool).deposit(address(depositAsset), depoistAmt);\\n            if (IAavePool(IaavePool).getCollateral(address(this)) == 0) {\\n                IAave(aave).setUserUseReserveAsCollateral(address(depositAsset), true);\\n            }\\n            // Repay flash loan\\n            uint256 repay = loanAmt + feeAmt;\\n            IAave(aave).borrow(address(baseAsset), repay, 2, 0, address(this));\\n        } else if (curState == SrategyState.Withdraw) {\\n            uint256 withdrawAmount = (loanAmt *\\n                aDepositAsset.balanceOf(address(this))) / IAavePool(IaavePool).getDebt(address(this));\\n\\n            // Repay WETH to aave\\n            IAave(aave).repay(address(baseAsset), loanAmt, 2, address(this));\\n            IAave(aave).withdraw(address(depositAsset), withdrawAmount, address(this));\\n\\n            // Swap depositAsset to baseAsset\\n            IExchange(exchange).swap(address(depositAsset),address(baseAsset),withdrawAmount,0);\\n        }else if (curState == SrategyState.RaiseMLR) {\\n            // Transfer baseAsset to Exchange\\n            uint256 slippage = userValue;\\n            uint256 minOut = IAavePool(IaavePool).convertAmount(address(baseAsset), address(depositAsset),loanAmt*(magnifier-slippage)/magnifier);\\n            // Swap baseAsset to depositAsset\\n            IExchange(exchange).swap(address(baseAsset),address(depositAsset),loanAmt,minOut);\\n    \\n            // Deposit depositAsset to AAVE\\n            uint256 depoistBalance = depositAsset.balanceOf(address(this));\\n\\n            IAavePool(IaavePool).deposit(address(depositAsset), depoistBalance);\\n            if (IAavePool(IaavePool).getCollateral(address(this)) == 0) {\\n                IAave(aave).setUserUseReserveAsCollateral(address(depositAsset), true);\\n            }\\n            // Repay flash loan\\n            uint256 repay = loanAmt + feeAmt;\\n            IAave(aave).borrow(address(baseAsset), repay, 2, 0, address(this));\\n        } else if (curState == SrategyState.ReduceMLR) {\\n            uint256 slippage = userValue;\\n            uint256 repayflash = loanAmt + feeAmt;\\n            uint256 maxInput = IAavePool(IaavePool).convertAmount(address(baseAsset), address(depositAsset),repayflash*magnifier/(magnifier-slippage));\\n            IAave(aave).repay(address(baseAsset), loanAmt, 2, address(this));\\n            uint256 withdrawAmount =IExchange(exchange).getCurveInputValue(address(depositAsset),address(baseAsset),repayflash,maxInput);\\n            IAave(aave).withdraw(address(depositAsset), withdrawAmount, address(this));\\n            uint256 minOut = IAavePool(IaavePool).convertAmount(address(depositAsset), address(baseAsset),withdrawAmount*(magnifier-slippage)/magnifier);\\n            IExchange(exchange).swap(address(depositAsset),address(baseAsset),withdrawAmount,minOut);            // Repay Weth to receiver\\n            uint256 balance = baseAsset.balanceOf(address(this)) - loanAmt - feeAmt;\\n            uint256 debt = IAavePool(IaavePool).getDebt(address(this));\\n            if(balance>debt){\\n                balance = debt;\\n            }\\n            if(balance>0){\\n                IAave(aave).repay(address(baseAsset), balance, 2, address(this));\\n            }\\n        } else {\\n            revert(\\\"NOT_A_SS_STATE\\\");\\n        }\\n    }\\n\\n    //////////////////////////////////////////\\n    //          VIEW FUNCTIONS              //\\n    //////////////////////////////////////////\\n\\n    /**\\n        External view function of total USDC deposited in Covex Booster\\n     */\\n    function totalAssets() external view override returns (uint256) {\\n        return _totalAssets();\\n    }\\n\\n    /**\\n        Internal view function of total USDC deposited\\n    */\\n    function _totalAssets() internal view returns (uint256) {\\n        if (!harvested){\\n            (uint256 fee,) = _calculateFee();\\n            return _realTotalAssets() - fee;\\n        }else{\\n            return _realTotalAssets();\\n        }\\n    }\\n    function _realTotalAssets()internal view returns (uint256) {\\n        (uint256 st,uint256 e) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        return st-e;\\n    }\\n    /**\\n        Deposit function of USDC\\n     */\\n    function deposit(\\n        uint256 _amount\\n    ) external override onlyController collectFee returns (uint256) {\\n        uint256 deposited = _deposit(_amount);\\n        return deposited;\\n    }\\n\\n    /**\\n        Deposit internal function\\n     */\\n    function _deposit(uint256 _amount) internal returns (uint256) {\\n        // Get Prev Deposit Amt\\n        uint256 prevAmt = _totalAssets();\\n\\n        // Check Max Deposit\\n        require(prevAmt + _amount <= maxDeposit, \\\"EXCEED_MAX_DEPOSIT\\\");\\n\\n        // Calculate Flashloan Fee - in terms of 1e4\\n        uint256 fee = IFlashloanReceiver(receiver).getFee();\\n        uint256 feeParam = fee + magnifier;\\n        uint256 loanAmt = (_amount * mlr) / (feeParam - mlr);\\n        // uint256 feeAmt = (loanAmt * fee) / magnifier;\\n\\n        // Execute flash loan\\n        IFlashloanReceiver(receiver).flashLoan(address(baseAsset), loanAmt,abi.encode(SrategyState.Deposit,_amount));\\n\\n        // Get new total assets amount\\n        uint256 newAmt = _totalAssets();\\n\\n        // Deposited amt\\n        uint256 deposited = newAmt - prevAmt;\\n        return deposited;\\n    }\\n\\n    /**\\n        Withdraw function of USDC\\n     */\\n    function withdraw(\\n        uint256 _amount\\n    ) external override onlyController collectFee returns (uint256) {\\n\\n        // Get Prev Deposit Amt\\n        uint256 prevAmt = _totalAssets();\\n        require(_amount <= prevAmt, \\\"INSUFFICIENT_ASSET\\\");\\n\\n        uint256 debt = IAavePool(IaavePool).getDebt(address(this));\\n\\n        if(debt>0){\\n            uint256 preBalance = baseAsset.balanceOf(address(this));\\n            uint256 loanAmt = (debt * _amount) / prevAmt;\\n            IFlashloanReceiver(receiver).flashLoan(address(baseAsset), loanAmt,abi.encode(SrategyState.Withdraw,uint256(0)));\\n\\n            uint256 toSend = baseAsset.balanceOf(address(this))-preBalance;\\n            return toSend;\\n        }else{\\n            address aave = IAavePool(IaavePool).aave();\\n            uint256 withdrawAmount = (_amount * aDepositAsset.balanceOf(address(this))) / prevAmt;\\n            //debt = 0\\n            IAave(aave).withdraw(address(depositAsset), withdrawAmount, address(this));\\n            // Swap depositAsset to baseAsset\\n            return IExchange(exchange).swap(address(depositAsset),address(baseAsset),withdrawAmount,0);\\n        }\\n\\n    }\\n\\n    /**\\n        Harvest reward token from convex booster\\n     */\\n    function harvest() external onlyOperator collectFee {\\n    }\\n    function _calculateFee()internal view returns (uint256,uint256) {\\n        uint256 currentAssets = _realTotalAssets();\\n        if(lastTotal>=currentAssets){\\n            return (0,0);\\n        }else{\\n            uint256 totalEF = IERC20(vault).totalSupply();\\n            if (totalEF == 0){\\n                return (0,0);\\n            }\\n            //uint256 feePoolBal = IERC20(vault).balanceOf(feePool);\\n            \\n            uint256 stFee = (currentAssets-lastTotal) *feeRate /magnifier;\\n            //stFee = stFee - ((stFee * feePoolBal) / (totalEF));\\n            uint256 mintAmt = (stFee * totalEF) / (currentAssets - stFee);\\n            if (mintAmt == 0){\\n                return (0,0);\\n            }\\n            return (stFee,mintAmt);\\n        }\\n    }\\n\\n\\n    function changeMLR(uint256 _mlr,uint256 swapSlippage) internal {\\n        if (_mlr > mlr){\\n            raiseMLR(_mlr, swapSlippage);\\n        }else if(_mlr < mlr){\\n            reduceMLR(_mlr, swapSlippage);\\n        }\\n\\n    }\\n    function raiseMLR(uint256 _mlr,uint256 swapSlippage)internal{\\n        //flashloan = (mlr*a-b)/(1-mlr*s)\\n        (uint256 coll,uint256 debt) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        uint256 debtNew = _mlr*coll;\\n        debt = debt*magnifier;\\n        if (debtNew>debt){\\n            uint256 amount =(debtNew-debt)*magnifier/(magnifier*magnifier-_mlr*(magnifier-swapSlippage));\\n            IFlashloanReceiver(receiver).flashLoan(address(baseAsset), amount,abi.encode(SrategyState.RaiseMLR,swapSlippage));\\n        }\\n        (uint256 coll1,uint256 debt1) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        emit LTVUpdate(debt/magnifier, coll, debt1, coll1);\\n    }\\n    function reduceMLR(uint256 _mlr,uint256 swapSlippage)internal{\\n        //flashloan = (b-mlr*a)/(s-mlr)\\n        (uint256 coll,uint256 debt) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        uint256 debtNew = _mlr*coll;\\n        debt = debt*magnifier;\\n        if (debtNew<debt){\\n            uint256 amount =(debt-debtNew)/(magnifier-swapSlippage-_mlr);\\n            IFlashloanReceiver(receiver).flashLoan(address(baseAsset), amount,abi.encode(SrategyState.ReduceMLR,swapSlippage));\\n        }\\n        (uint256 coll1,uint256 debt1) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        emit LTVUpdate(debt/magnifier, coll, debt1, coll1);\\n    }\\n    /**\\n        Raise LTV\\n     */\\n     /*\\n    function raiseLTV(uint256 lt,uint256 swapSlippage) external onlyOwner {\\n        //flashloan = mlr/(1-mlr)*collateral-1/(1-mlr)*debt\\n        (uint256 st,uint256 e) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n\\n        require(e * magnifier < st * mlr, \\\"NO_NEED_TO_RAISE\\\");\\n\\n        address aave = IAavePool(IaavePool).aave();\\n        uint256 x = (st * mlr - (e * magnifier)) / (magnifier - mlr);\\n        uint256 y = (st * lt) / magnifier - e - 1;\\n\\n        if (x > y) {\\n            x = y;\\n        }\\n\\n        IAave(aave).borrow(address(baseAsset), x, 2, 0, address(this));\\n        uint256 baseAmt = baseAsset.balanceOf(address(this));\\n\\n        // Transfer base asset to Exchange\\n        baseAsset.safeTransfer(exchange, baseAmt);\\n        // Swap baseAsset to depositAsset\\n        uint256 minOut = IAavePool(IaavePool).convertAmount(address(baseAsset), address(depositAsset),baseAmt*(magnifier-swapSlippage)/magnifier);\\n        IExchange(exchange).swap(address(baseAsset),address(depositAsset),baseAmt,minOut);\\n\\n        // Deposit STETH to AAVE\\n        uint256 depositAmt = depositAsset.balanceOf(address(this));\\n\\n        IAavePool(IaavePool).deposit(address(depositAsset), depositAmt);\\n        (uint256 st1,uint256 e1) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n        emit LTVUpdate(e, st, e1, st1);\\n    }\\n*/\\n    /**\\n        Reduce LTV\\n     */\\n     /*\\n    function reduceLTV(uint256 swapSlippage) external onlyOwner {\\n        (uint256 st,uint256 e) = IAavePool(IaavePool).getCollateralAndDebt(address(this));\\n\\n        require(e * magnifier > st * mlr, \\\"NO_NEED_TO_REDUCE\\\");\\n\\n        address aave = IAavePool(IaavePool).aave();\\n\\n        uint256 x = (e * magnifier - st * mlr) / (magnifier - mlr);\\n\\n        uint256 loanAmt = (x * e) / st;\\n\\n        IFlashloanReceiver(receiver).flashLoan(address(baseAsset), loanAmt,abi.encode(SrategyState.Withdraw,uint256(0)));\\n\\n\\n        uint256 baseBal = baseAsset.balanceOf(address(this));\\n        // Approve WETH to AAVE\\n        // Repay WETH to aave\\n        IAave(aave).repay(address(baseAsset), baseBal, 2, address(this));\\n    }\\n\\n*/\\n\\n    /**\\n        Check withdrawable status of required amount\\n     */\\n    function withdrawable(\\n        uint256 _amount\\n    ) external view override returns (uint256) {\\n        // Get Current Deposit Amt\\n        uint256 total = _totalAssets();\\n\\n        // If requested amt is bigger than total asset, return false\\n        if (_amount > total) return total;\\n        // Todo Have to check withdrawable amount\\n        else return _amount;\\n    }\\n\\n\\n    //////////////////////////////////////////////////\\n    //               SET CONFIGURATION              //\\n    //////////////////////////////////////////////////\\n\\n    /**\\n        Set Controller\\n     */\\n    function setController(address _controller) external onlyOwner {\\n        require(controller == address(0), \\\"CONTROLLER_ALREADY\\\");\\n        require(_controller != address(0), \\\"INVALID_ADDRESS\\\");\\n        controller = _controller;\\n        baseAsset.safeApprove(_controller,type(uint256).max);\\n        emit SetController(controller);\\n    }\\n    /**\\n        Set Operator\\n     */\\n    function setOperator(address _Operator, bool _isTrue) external onlyOwner {\\n        require(_Operator != address(0), \\\"INVALID_ADDRESS\\\");\\n        operator[_Operator]=_isTrue;\\n        emit SetOperator(_Operator, _isTrue);\\n    }\\n    /**\\n        Set Vault\\n     */\\n    function setVault(address _vault) external onlyOwner {\\n        require(_vault != address(0), \\\"INVALID_ADDRESS\\\");\\n        vault = _vault;\\n\\n        emit SetVault(vault);\\n    }\\n\\n    /**\\n        Set Fee Pool\\n     */\\n    function setFeePool(address _feePool) external onlyOwner {\\n        require(_feePool != address(0), \\\"INVALID_ADDRESS\\\");\\n        feePool = _feePool;\\n\\n        emit SetFeePool(feePool);\\n    }\\n\\n    /**\\n        Set Max Deposit\\n     */\\n    function setMaxDeposit(uint256 _maxDeposit) external onlyOwner {\\n        require(_maxDeposit > 0, \\\"INVALID_MAX_DEPOSIT\\\");\\n        maxDeposit = _maxDeposit;\\n\\n        emit SetMaxDeposit(maxDeposit);\\n    }\\n\\n    /**\\n        Set Flashloan Receiver\\n     */\\n    function setFlashLoanReceiver(address _receiver) external onlyOwner {\\n        require(_receiver != address(0), \\\"INVALID_RECEIVER_ADDRESS\\\");\\n        if (receiver != address(0)){\\n            baseAsset.safeApprove(receiver,0);\\n        }\\n        receiver = _receiver;\\n        baseAsset.safeApprove(_receiver,type(uint256).max);\\n        emit SetFlashloanReceiver(receiver);\\n    }\\n\\n    /**\\n        Set Exchange\\n     */\\n    function setExchange(address _exchange) external onlyOwner {\\n        require(_exchange != address(0), \\\"INVALID_ADDRESS\\\");\\n        if (exchange != address(0)){\\n            baseAsset.safeApprove(exchange,0);\\n            depositAsset.safeApprove(exchange,0);\\n        }\\n        exchange = _exchange;\\n        baseAsset.safeApprove(_exchange,type(uint256).max);\\n        depositAsset.safeApprove(_exchange,type(uint256).max);\\n        emit SetExchange(exchange);\\n    }\\n\\n    /**\\n        Set Fee Rate\\n     */\\n    function setFeeRate(uint256 _rate) external collectFee onlyOwner {\\n        require(_rate > 0, \\\"INVALID_RATE\\\");\\n\\n        uint256 oldRate = feeRate;\\n        feeRate = _rate;\\n\\n        emit SetFeeRate(oldRate, feeRate);\\n    }\\n\\n    /**\\n        Set MLR\\n     */\\n    function setMLR(uint256 _mlr,uint256 swapSlippage) external nonReentrant onlyOperator {\\n        require(_mlr > 0 && _mlr < magnifier, \\\"INVALID_RATE\\\");\\n        changeMLR(_mlr,swapSlippage);\\n        uint256 oldMlr = mlr;\\n        mlr = _mlr;\\n\\n        emit SetMLR(oldMlr, _mlr);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IFlashloanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFlashloanReceiver {\\n    function getFee() external view returns (uint256 fee);\\n\\n    function flashLoan(address token, uint256 amount,bytes calldata userData) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExchange {\\n    function swap(address tokenIn,address tokenOut,uint256 amount,uint256 minAmount) external returns (uint256);\\n    function getCurveInputValue(address tokenIn,address tokenOut,uint256 outAmount,uint256 maxInput)external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IETHLeverage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IETHLeverage {\\n    function loanFallback(uint256 loanAmt, uint256 feeAmt,bytes calldata userData) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IAavePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\ninterface IAavePool {\\r\\n    function deposit(address asset,uint256 amount)external;\\r\\n    function aave() external view returns (address);\\r\\n    function convertAmount(address _tokenIn,address _tokenOut,uint256 _amount) external view returns (uint256);\\r\\n    function getCollateral(address _user) external view returns (uint256);\\r\\n    function getDebt(address _user) external view returns (uint256);\\r\\n    function getCollateralAndDebt(address _user)external view returns (uint256 _collateral, uint256 _debt);\\r\\n    function getCollateralMaxWithdraw(address _user) external view returns (uint256);\\r\\n\\r\\n    function getCollateralTo(address _user,address _token) external view returns (uint256);\\r\\n    function getDebtTo(address _user,address _token) external view returns (uint256);\\r\\n    function getCollateralAndDebtTo(address _user,address _token)external view returns (uint256 _collateral, uint256 _debt);\\r\\n    function getCollateralMaxWithdrawTo(address _user,address _token) external view returns (uint256);\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/subStrategies/interfaces/IAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAave {\\n    function setUserEMode(uint8 categoryId) external;\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    function getUserAccountData(address)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function setUserUseReserveAsCollateral(address _reserse, bool _useAsCollateral) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function deposit(uint256 amount,uint256 minShares,address receiver) external returns (uint256 shares);\\n    function withdraw(uint256 assets,uint256 minWithdraw,address receiver)external returns (uint256 shares);\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n    function mint(uint256 amount, address account) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ISubStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISubStrategy {\\n    function totalAssets() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount) external returns (uint256);\\n\\n    function maxDeposit() external view returns (uint256);\\n\\n    function withdrawable(uint256 _amount) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_aDepositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mlr\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_IaavePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_emode\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateral\",\"type\":\"uint256\"}],\"name\":\"LTVUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"SetExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feePool\",\"type\":\"address\"}],\"name\":\"SetFeePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"SetFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SetFlashloanReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMlr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMlr\",\"type\":\"uint256\"}],\"name\":\"SetMLR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"}],\"name\":\"SetMaxDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"istrue\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"SetVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IaavePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aDepositAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"loanFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magnifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mlr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"}],\"name\":\"setFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setFlashLoanReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mlr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippage\",\"type\":\"uint256\"}],\"name\":\"setMLR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"setMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTrue\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHStrategy", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca000000000000000000000000012b54025c112aa61face2cdb7118740875a566e900000000000000000000000000000000000000000000000000000000000022b8000000000000000000000000feb3731a0595fcca35641c84aa36125f0f73824b000000000000000000000000446187eceb4f6019994afbf7b4ccba75138e4340000000000000000000000000e796805043a44ad2cbb2645ddb3a241e27117f5d0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}