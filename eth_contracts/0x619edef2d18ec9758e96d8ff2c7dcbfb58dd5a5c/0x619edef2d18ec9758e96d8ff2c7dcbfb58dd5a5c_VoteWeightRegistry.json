{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/VoteWeightRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.20;\\n\\ncontract VoteWeightRegistry {\\n\\nstruct Vote {\\n    // User address\\n    address user;\\n\\n    // Gauge address\\n    address[] gauges;\\n\\n    // Weight to allocate - 0 to 100\\n    uint256[] weights;\\n\\n    bool killed;\\n}\\n\\n    mapping(string => mapping(uint256 => Vote)) public votes;\\n\\n    // Index start to one\\n    mapping(string => uint256) public space_votes_index;\\n    mapping(address => mapping(string => uint256)) public user_vote_index;\\n    \\n    function set(string calldata space, address[] calldata _gauges, uint256[] calldata _weights) external {\\n        uint256 weightLength = _weights.length;\\n\\n        require(_gauges.length == weightLength, \\\"!Length\\\");\\n\\n        uint256 sum = 0;\\n        uint256 i = 0;\\n        \\n        for(;i<weightLength;) {\\n            sum += _weights[i];\\n            \\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        require(sum == 10000, \\\"Wrong weight\\\");\\n\\n        uint256 userVoteIndex = user_vote_index[msg.sender][space];\\n        if(userVoteIndex == 0) {\\n            // New vote\\n            uint256 currentIndex = space_votes_index[space];\\n            userVoteIndex = currentIndex + 1;\\n\\n            space_votes_index[space] = userVoteIndex;\\n            user_vote_index[msg.sender][space] = userVoteIndex;\\n        }\\n\\n        votes[space][userVoteIndex] = Vote({\\n            user: msg.sender,\\n            gauges: _gauges,\\n            weights: _weights,\\n            killed: false\\n        });\\n    }\\n\\n    function remove(string calldata space) public {\\n        uint256 index = user_vote_index[msg.sender][space];\\n        require(index > 0, \\\"No vote\\\");\\n        \\n\\n        votes[space][index].killed = true;\\n    }\\n\\n    function removeAll(string[] calldata spaces) public {\\n        for(uint256 i = 0; i < spaces.length; ++i) {\\n            remove(spaces[i]);\\n        }\\n    }\\n\\n\\n    function get(address user, string calldata space) external view returns(Vote memory) {\\n        uint256 index = user_vote_index[user][space];\\n        return votes[space][index];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"space\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"killed\",\"type\":\"bool\"}],\"internalType\":\"struct VoteWeightRegistry.Vote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"space\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"spaces\",\"type\":\"string[]\"}],\"name\":\"removeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"space\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"space_votes_index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"user_vote_index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"killed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VoteWeightRegistry", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}