{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"GenesisStaking.sol\": {\r\n      \"content\": \"// Website: https://genesisdao.io/\\r\\n// X: https://x.com/0xGenesisDAO\\r\\n// Discord: https://discord.gg/genesisdao\\r\\n\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n//                                         &                                       \\r\\n//                           (&&&&&&&&&&&&&&&&&&&&&&&&&&&*                         \\r\\n//                      &&&&&&&&&&&&&&&&&&&&&@,,@@@@&&&&&&&&&&&                    \\r\\n//                  &&&&&&&&&&&&&&&&&&&&&,,,,,,,,,*@@@&&&&&&&&&&&&&                \\r\\n//               &&&&&&&&&&&&&&&&&&&&,,,,,,,,,,,@@@@@@@&&&&&&&&&&&&&&&             \\r\\n//            &&&&&&&&&&&&&&&&&@,,,,,,,,,,,@@@@@@@@@@&&&&&&&&&&&&&&&&&&&&          \\r\\n//          &&&&&&&&&&&&&&@,,,,,,,,,,,*@@@@@@@@@@&&&&&&&&&@,,,,,#@@@@&&&&&&        \\r\\n//        &&&&&&&&&&&&#,,,,,,,,,,,@@@@@@@@@@@&&&&&&&&&*,,,,,,,,,,,,@@@@&&&&&&      \\r\\n//       &&&&&&&&&@..,,.,,,,,@@@@@@@@@@&&&&&&&&&&@,,,,,,,,,,,,,,,,,@@@@&&&&&&&     \\r\\n//     #&&&&&&&&&&@..,,,,,%@@@@@@@@&&&&&&&&&@,,,,,,,,,,,,@@,,,,,,,,@@@@&&&&&&&&    \\r\\n//    &&&&&&&&&&&&@..,,,,,&@@@@&&&&&&&&&..,,,,,,,,,,@@@@@@@@,,,,,,,@@@@&&&&&&&&&&  \\r\\n//   &&&&&&&&&&&&&@..,,,,,&@@@@&&&&&&&&@..,,,,,@@@@@@@@@@@@@,,,,,,,@@@@&&&&&&&&&&* \\r\\n//   &&&&&&&&&&&&&@..,,,,,&@@@@&&&&&&&&@@@@@@@@@@@@@@&&&&&&@,,,,,,,@@@@&&&&&&&&&&& \\r\\n//  &&&&&&&&&&&&&&@..,,,,@@@@@@&&&&&&&&&&&&@@@@@@&&&&&&&&&&@@,,,,,,@@@@&&&&&&&&&&&&\\r\\n//  &&&&&&&&&&&&&&@@@@@@@@//*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@&&&&&&&&&&&&\\r\\n//  &&&&&&&&&&&&&&&@@@/**,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*@@@@@@@@@&&&&&&&&&&&&&\\r\\n// &&&&&&&&&&&&&&&@.....,.,,@@@@@@@@@@@@@@@@@@@@@@@@@@&&%@@@@@@/*,,@@@@&&&&&&&&&&&&\\r\\n//  &&&&&&&&&&&&&&@....,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/**,,,,@@@@&&&&&&&&&&&&\\r\\n//  &&&&&&&&&&&&&&@....,,,,@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&@,,,,,,,@@@@&&&&&&&&&&&&\\r\\n//  &&&&&&&&&&&&&&@....,,,,@@@@&&&&&&&&&@,,,,,@@@@&&&&&&&&&@,,,,,,,@@@@&&&&&&&&&&&&\\r\\n//   &&&&&&&&&&&&&@....,,,,@@@@&&&&&,,,,,,,,,,,,@@@@&&&&&&&@,,,,,,,@@@@&&&&&&&&&&& \\r\\n//   &&&&&&&&&&&&&@....,,,,@@@@,,,,,,,,,,,,,,@@@@@@@&&&&&&&@,,,,,,,@@@@&&&&&&&&&&* \\r\\n//    &&&&&&&&&&&&@....,,,,,,,,,,,,,,,,,@@@@@@@@@@@&&&&&&&&,,,,,,,,@@@@&&&&&&&&&&  \\r\\n//     /&&&&&&&&&&@....,,,,,,,,,,,@@@@@@@@@@@@&&&&&&&&@,,,,,,,,,,,,@@@@&&&&&&&&    \\r\\n//       &&&&&&&&&@@....,,,,,@@@@@@@@@@@@&&&&&&&&&,,,,,,,,,,,,,@@@@@@@@&&&&&&&     \\r\\n//        &&&&&&&&&@@@@@@@@@@@@@@@@&&&&&&&&&&@,,,,,,,,,,,,@@@@@@@@@@@&&&&&&&&      \\r\\n//          &&&&&&&&&&@@@@@@@@&&&&&&&&&&@,,,,,,,,,,,,@@@@@@@@@@@&&&&&&&&&&&        \\r\\n//            &&&&&&&&&&&&&&&&&&&&&&..,,,,,,,,,,(@@@@@@@@@@&&&&&&&&&&&&&&          \\r\\n//               &&&&&&&&&&&&&&&&&@...,,,,,,@@@@@@@@@@&&&&&&&&&&&&&&&&             \\r\\n//                  &&&&&&&&&&&&&&@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&&                \\r\\n//                      &&&&&&&&&&&&@@@@@@@@@&&&&&&&&&&&&&&&&&&                    \\r\\n//                           *&&&&&&&&&&&&&&&&&&&&&&&&&&& \\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20MintableBurnable is IERC20 {\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\\r\\ncontract GenesisAutoCompoundStaking is IERC20, Ownable {\\r\\n    uint256 private constant MAX_UINT256 = type(uint256).max;\\r\\n    uint256 private constant SCALE = 1e18;\\r\\n    uint256 private constant ONE_YEAR = 365 days;\\r\\n\\r\\n    uint256 private constant MAX_STAKE_TAX = 500; // 5%\\r\\n    uint256 private constant MAX_UNSTAKE_TAX = 1500; // 15%\\r\\n    uint256 private constant PERCENTAGE_BASE = 10000; // 100%\\r\\n\\r\\n    string public name = \\\"Genesis Staking\\\";\\r\\n    string public symbol = \\\"sGEN\\\";\\r\\n    uint8 public decimals = 18;\\r\\n\\r\\n    address public baseToken;\\r\\n    address public liquidityPool;\\r\\n    address public treasury;\\r\\n\\r\\n    uint256 public fixedAPR = 50 ether;\\r\\n    uint256 public dynamicAPRMinCap = 30 ether;\\r\\n    uint256 public dynamicAPRMaxCap = 70 ether;\\r\\n    uint256 public dynamicAPRConstant = 1 ether;\\r\\n    uint256 public rebaseInterval = 8 hours;\\r\\n    uint256 public stakeTax = 500;\\r\\n    uint256 public unstakeTax = 500;\\r\\n\\r\\n    uint256 public stakeStartTime;\\r\\n    uint256 public lastRebaseTime;\\r\\n\\r\\n    uint256 public totalGons;\\r\\n    uint256 public totalSupplyTokens;\\r\\n    uint256 public gonsPerFragment = 1e9;\\r\\n\\r\\n    uint256 public initialMaxSupply;\\r\\n    uint256 public maxSupply;\\r\\n    uint256 public maxGons;\\r\\n\\r\\n    uint256 public warmupPeriod;\\r\\n\\r\\n    mapping(address => uint256) private _gonBalances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => uint256) public stakeTimes;\\r\\n\\r\\n    event Mint(address indexed wallet, uint256 amount, uint256 gonsAdded, uint256 gonsPerFragment, uint256 newTotalSupply);\\r\\n    event Burn(address indexed wallet, uint256 amount, uint256 gonsRemoved, uint256 gonsPerFragment, uint256 newTotalSupply);\\r\\n    event Stake(address indexed user, uint256 amount, uint256 taxAmount, uint256 mintedTokens);\\r\\n    event Unstake(address indexed user, uint256 amount, uint256 taxAmount, uint256 returnedTokens);\\r\\n    event Rebase(\\r\\n        uint256 fixedAPR, \\r\\n        uint256 dynamicAPR, \\r\\n        uint256 rebaseAPR, \\r\\n        uint256 lastRebaseTime, \\r\\n        uint256 rebaseCount, \\r\\n        uint256 maxSupply, \\r\\n        uint256 supplyDelta,\\r\\n        uint256 gonsPerFragment,\\r\\n        uint256 currentSupply\\r\\n    );\\r\\n\\r\\n    event BaseTokenSet(address indexed baseToken);\\r\\n    event LiquidityPoolSet(address indexed liquidityPool);\\r\\n    event APRParamsSet(uint256 fixedAPR, uint256 dynamicAPRMinCap, uint256 dynamicAPRMaxCap, uint256 dynamicAPRConstant);\\r\\n    event RebaseIntervalSet(uint256 rebaseInterval);\\r\\n    event StakeTaxSet(uint256 stakeTax);\\r\\n    event UnstakeTaxSet(uint256 unstakeTax);\\r\\n    event StakeStartTimeSet(uint256 stakeStartTime);\\r\\n    event TreasurySet(address indexed treasury);\\r\\n\\r\\n    constructor(\\r\\n        address _baseToken, \\r\\n        address _liquidityPool, \\r\\n        address _treasury,\\r\\n        uint256 _stakeStartTime\\r\\n    ) Ownable(msg.sender) {\\r\\n        baseToken = _baseToken;\\r\\n        liquidityPool = _liquidityPool;\\r\\n        treasury = _treasury;\\r\\n        stakeStartTime = _stakeStartTime;\\r\\n\\r\\n        maxSupply = IERC20MintableBurnable(baseToken).totalSupply() + 1 ether;\\r\\n        initialMaxSupply = maxSupply;\\r\\n        maxGons = MAX_UINT256 - (MAX_UINT256 % maxSupply);\\r\\n        gonsPerFragment = maxGons / maxSupply;\\r\\n        _mint(address(this), 1 ether);\\r\\n\\r\\n        warmupPeriod = 60;\\r\\n\\r\\n        emit BaseTokenSet(_baseToken);\\r\\n        emit LiquidityPoolSet(_liquidityPool);\\r\\n        emit TreasurySet(_treasury);\\r\\n        emit StakeStartTimeSet(_stakeStartTime);\\r\\n    }\\r\\n\\r\\n    function setBaseToken(address _baseToken) external onlyOwner {\\r\\n        baseToken = _baseToken;\\r\\n        emit BaseTokenSet(_baseToken);\\r\\n    }\\r\\n\\r\\n    function setLiquidityPool(address _liquidityPool) external onlyOwner {\\r\\n        liquidityPool = _liquidityPool;\\r\\n        emit LiquidityPoolSet(_liquidityPool);\\r\\n    }\\r\\n\\r\\n    function setAprParameters(\\r\\n        uint256 _fixedAPR,\\r\\n        uint256 _dynamicAPRMinCap,\\r\\n        uint256 _dynamicAPRMaxCap,\\r\\n        uint256 _dynamicAPRConstant\\r\\n    ) external onlyOwner {\\r\\n        require(_dynamicAPRMinCap <= _dynamicAPRMaxCap, \\\"Min cap higher than max cap\\\");\\r\\n        fixedAPR = _fixedAPR;\\r\\n        dynamicAPRMinCap = _dynamicAPRMinCap;\\r\\n        dynamicAPRMaxCap = _dynamicAPRMaxCap;\\r\\n        dynamicAPRConstant = _dynamicAPRConstant;\\r\\n\\r\\n        emit APRParamsSet(_fixedAPR, _dynamicAPRMinCap, _dynamicAPRMaxCap, _dynamicAPRConstant);\\r\\n    }\\r\\n\\r\\n    function setRebaseInterval(uint256 _rebaseInterval) external onlyOwner {\\r\\n        rebaseInterval = _rebaseInterval;\\r\\n        emit RebaseIntervalSet(_rebaseInterval);\\r\\n    }\\r\\n\\r\\n    function setStakeTax(uint256 _stakeTax) external onlyOwner {\\r\\n        require(_stakeTax <= MAX_STAKE_TAX, \\\"Stake tax too high\\\");\\r\\n        stakeTax = _stakeTax;\\r\\n        emit StakeTaxSet(_stakeTax);\\r\\n    }\\r\\n\\r\\n    function setUnstakeTax(uint256 _unstakeTax) external onlyOwner {\\r\\n        require(_unstakeTax <= MAX_UNSTAKE_TAX, \\\"Unstake tax too high\\\");\\r\\n        unstakeTax = _unstakeTax;\\r\\n        emit UnstakeTaxSet(_unstakeTax);\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _treasury) external onlyOwner {\\r\\n        treasury = _treasury;\\r\\n        emit TreasurySet(_treasury);\\r\\n    }\\r\\n\\r\\n    function setStakeStartTime(uint256 _stakeStartTime) external onlyOwner {\\r\\n        require(block.timestamp < stakeStartTime, \\\"Staking already started\\\");\\r\\n        stakeStartTime = _stakeStartTime;\\r\\n        emit StakeStartTimeSet(_stakeStartTime);\\r\\n    }\\r\\n\\r\\n    function setWarmupPeriod(uint256 _warmupPeriod) external onlyOwner {\\r\\n        require(_warmupPeriod > 0, \\\"Warmup period too low\\\");\\r\\n        require(_warmupPeriod <= 1 days, \\\"Warmup period too high\\\");\\r\\n        warmupPeriod = _warmupPeriod;\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        uint256 gonsToAdd = amount * gonsPerFragment;\\r\\n        totalGons += gonsToAdd;\\r\\n        totalSupplyTokens += amount;\\r\\n        _gonBalances[account] += gonsToAdd;\\r\\n\\r\\n        emit Mint(account, amount, gonsToAdd, gonsPerFragment, totalSupplyTokens);\\r\\n\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        uint256 gonsToRemove = amount * gonsPerFragment;\\r\\n        totalGons -= gonsToRemove;\\r\\n        totalSupplyTokens -= amount;\\r\\n        _gonBalances[account] -= gonsToRemove;\\r\\n\\r\\n        emit Burn(account, amount, gonsToRemove, gonsPerFragment, totalSupplyTokens);\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function rebase() public {\\r\\n        if (block.timestamp < stakeStartTime) return;\\r\\n\\r\\n        uint256 timeToUse = lastRebaseTime > 0 ? lastRebaseTime : stakeStartTime;\\r\\n        uint256 rebaseCount = (block.timestamp - timeToUse) / rebaseInterval;\\r\\n        if (rebaseCount == 0) return;\\r\\n\\r\\n        uint256 fixedApr = getFixedAPR();\\r\\n        uint256 dynamicApr = getDynamicAPR();\\r\\n        uint256 finalApr = fixedApr + dynamicApr;\\r\\n\\r\\n        uint256 intervalsPerYear = ONE_YEAR / rebaseInterval;\\r\\n        uint256 intervalAPR = finalApr / intervalsPerYear;\\r\\n        uint256 supplyDelta = (maxSupply * intervalAPR) / SCALE / 100;\\r\\n\\r\\n        if (supplyDelta == 0) {\\r\\n            lastRebaseTime = timeToUse + rebaseInterval * rebaseCount;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (supplyDelta > maxSupply) {\\r\\n            supplyDelta = maxSupply;\\r\\n        }\\r\\n\\r\\n        maxSupply += supplyDelta;\\r\\n        gonsPerFragment = maxGons / maxSupply;\\r\\n\\r\\n        totalSupplyTokens = totalGons / gonsPerFragment; \\r\\n        lastRebaseTime = timeToUse + rebaseInterval * rebaseCount;\\r\\n\\r\\n        emit Rebase(\\r\\n            fixedApr, \\r\\n            dynamicApr, \\r\\n            intervalAPR, \\r\\n            timeToUse, \\r\\n            rebaseCount, \\r\\n            maxSupply,\\r\\n            supplyDelta,\\r\\n            gonsPerFragment,\\r\\n            totalSupplyTokens \\r\\n        );\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount) external {\\r\\n        rebase();\\r\\n\\r\\n        require(IERC20(baseToken).transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\r\\n\\r\\n        uint256 taxAmount = (amount * stakeTax) / PERCENTAGE_BASE;\\r\\n        uint256 netAmount = amount - taxAmount;\\r\\n\\r\\n        IERC20MintableBurnable(baseToken).burn(netAmount);\\r\\n        if (taxAmount > 0) {\\r\\n            IERC20(baseToken).transfer(treasury, taxAmount);\\r\\n        }\\r\\n\\r\\n        _mint(msg.sender, netAmount);\\r\\n\\r\\n        if (warmupPeriod > 0) {\\r\\n            stakeTimes[msg.sender] = block.timestamp;\\r\\n        }\\r\\n        \\r\\n        emit Stake(msg.sender, amount, taxAmount, netAmount);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 amount) external {\\r\\n        require(block.timestamp - stakeTimes[msg.sender] >= warmupPeriod, \\\"Warmup period not over\\\");\\r\\n\\r\\n        rebase();\\r\\n\\r\\n        uint256 gonsToRemove = amount * gonsPerFragment;\\r\\n        require(_gonBalances[msg.sender] >= gonsToRemove, \\\"Insufficient balance\\\");\\r\\n\\r\\n        _burn(msg.sender, amount);\\r\\n        IERC20MintableBurnable(baseToken).mint(address(this), amount);\\r\\n\\r\\n        uint256 taxAmount = (amount * unstakeTax) / PERCENTAGE_BASE;\\r\\n        uint256 netAmount = amount - taxAmount;\\r\\n\\r\\n        IERC20(baseToken).transfer(msg.sender, netAmount);\\r\\n        if (taxAmount > 0) {\\r\\n            IERC20(baseToken).transfer(treasury, taxAmount);\\r\\n        }\\r\\n\\r\\n        emit Unstake(msg.sender, amount, taxAmount, netAmount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(_gonBalances[sender] >= amount * gonsPerFragment, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        require(sender == address(0) || recipient != address(this), \\\"ERC20: transfer to staking contract\\\");\\r\\n\\r\\n        rebase();\\r\\n\\r\\n        uint256 taxAmount = ((stakeTax + unstakeTax) * amount) / PERCENTAGE_BASE;\\r\\n        uint256 netAmount = amount - taxAmount;\\r\\n\\r\\n        uint256 gonsToTransfer = netAmount * gonsPerFragment;\\r\\n        uint256 gonsTaxAmount = taxAmount * gonsPerFragment;\\r\\n\\r\\n        _gonBalances[sender] -= (gonsToTransfer + gonsTaxAmount);\\r\\n        _gonBalances[recipient] += gonsToTransfer;\\r\\n        if (gonsTaxAmount > 0) {\\r\\n            _gonBalances[treasury] += gonsTaxAmount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, netAmount);\\r\\n    }\\r\\n\\r\\n    function getFixedAPR() public view returns (uint256) {\\r\\n        return fixedAPR;\\r\\n    }\\r\\n\\r\\n    function getDynamicAPR() public view returns (uint256) {\\r\\n        uint256 totalStaked = totalSupplyTokens;\\r\\n        uint256 lpBalance = IERC20(baseToken).balanceOf(liquidityPool);\\r\\n\\r\\n        if (lpBalance <= 0) {\\r\\n            revert(\\\"LP balance zero\\\");\\r\\n        }\\r\\n        if (dynamicAPRConstant <= 0) {\\r\\n            revert(\\\"Dynamic APR constant zero\\\");\\r\\n        }\\r\\n\\r\\n        uint256 ratio = (totalStaked * SCALE) / lpBalance;\\r\\n\\r\\n        if (ratio > 10 * SCALE) {\\r\\n            ratio = 10 * SCALE;\\r\\n        }\\r\\n\\r\\n        uint256 scaledRatio = (ratio * dynamicAPRConstant) / SCALE;\\r\\n        uint256 logInput = SCALE + scaledRatio;\\r\\n\\r\\n        uint256 logValue = log10(logInput);\\r\\n\\r\\n        uint256 apyValue = dynamicAPRMaxCap -\\r\\n            ((dynamicAPRMaxCap - dynamicAPRMinCap) * logValue) /\\r\\n            log10(dynamicAPRConstant * 10);\\r\\n\\r\\n        if (apyValue < dynamicAPRMinCap) {\\r\\n            apyValue = dynamicAPRMinCap;\\r\\n        }\\r\\n\\r\\n        return apyValue;\\r\\n    }\\r\\n\\r\\n    function getFinalAPR() public view returns (uint256) {\\r\\n        return getFixedAPR() + getDynamicAPR();\\r\\n    }\\r\\n\\r\\n    function log10(uint256 x) internal view returns (uint256) {\\r\\n        if (x <= 0) {\\r\\n            revert(\\\"Log zero\\\");\\r\\n        }\\r\\n        uint256 result = 0;\\r\\n        while (x >= 10 * SCALE) {\\r\\n            x /= 10;\\r\\n            result += SCALE;\\r\\n        }\\r\\n        for (uint8 i = 0; i < 18; ++i) {\\r\\n            x = (x * x) / SCALE;\\r\\n            if (x >= 10 * SCALE) {\\r\\n                x /= 10;\\r\\n                result += SCALE / (2 ** (i + 1));\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _gonBalances[account] / gonsPerFragment;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return totalSupplyTokens;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function timeTillNextRebase() public view returns (uint256) {\\r\\n        if (block.timestamp < stakeStartTime) {\\r\\n            return stakeStartTime - block.timestamp;\\r\\n        }\\r\\n        return rebaseInterval - ((block.timestamp - stakeStartTime) % rebaseInterval);\\r\\n    }\\r\\n\\r\\n    function totalTokensAtNextRebase() public view returns (uint256) {\\r\\n        uint256 fixedApr = getFixedAPR();\\r\\n        uint256 dynamicApr = getDynamicAPR();\\r\\n        uint256 finalApr = fixedApr + dynamicApr;\\r\\n\\r\\n        uint256 intervalsPerYear = ONE_YEAR / rebaseInterval;\\r\\n        uint256 intervalAPR = finalApr / intervalsPerYear;\\r\\n        uint256 supplyDelta = (totalSupplyTokens * intervalAPR) / SCALE / 100;\\r\\n\\r\\n        return supplyDelta;\\r\\n    }\\r\\n\\r\\n    function tokensForAddressAtNextRebase(address account) public view returns (uint256) {\\r\\n        uint256 supplyDelta = totalTokensAtNextRebase();\\r\\n        uint256 userBalance = balanceOf(account);\\r\\n        uint256 userShare = (userBalance * SCALE) / totalSupplyTokens;\\r\\n\\r\\n        return (supplyDelta * userShare) / SCALE / 100;\\r\\n    }\\r\\n\\r\\n    function tokensDeductedForUnstaking(uint256 amount) public view returns (uint256) {\\r\\n        uint256 taxAmount = (amount * unstakeTax) / PERCENTAGE_BASE;\\r\\n        return taxAmount;\\r\\n    }\\r\\n\\r\\n    function tokensDeductedForStaking(uint256 amount) public view returns (uint256) {\\r\\n        uint256 taxAmount = (amount * stakeTax) / PERCENTAGE_BASE;\\r\\n        return taxAmount;\\r\\n    }\\r\\n\\r\\n    function index() public view returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function totalTokensRewarded() public view returns (uint256) {\\r\\n        return maxSupply - initialMaxSupply;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(address token, address to, uint256 amount) external onlyOwner {\\r\\n        require(token != address(this), \\\"Cannot withdraw staking token\\\");\\r\\n        IERC20(token).transfer(to, amount);\\r\\n    }\\r\\n    \\r\\n    function emergencyEthWithdraw(address to, uint256 amount) external onlyOwner {\\r\\n        payable(to).transfer(amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedAPR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicAPRMinCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicAPRMaxCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicAPRConstant\",\"type\":\"uint256\"}],\"name\":\"APRParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"BaseTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gonsRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gonsPerFragment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gonsAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gonsPerFragment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedAPR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicAPR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebaseAPR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRebaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebaseCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gonsPerFragment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebaseInterval\",\"type\":\"uint256\"}],\"name\":\"RebaseIntervalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeStartTime\",\"type\":\"uint256\"}],\"name\":\"StakeStartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeTax\",\"type\":\"uint256\"}],\"name\":\"StakeTaxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedTokens\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTax\",\"type\":\"uint256\"}],\"name\":\"UnstakeTaxSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicAPRConstant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicAPRMaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicAPRMinCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEthWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynamicAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFixedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fixedAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dynamicAPRMinCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dynamicAPRMaxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dynamicAPRConstant\",\"type\":\"uint256\"}],\"name\":\"setAprParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"setBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseInterval\",\"type\":\"uint256\"}],\"name\":\"setRebaseInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeStartTime\",\"type\":\"uint256\"}],\"name\":\"setStakeStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeTax\",\"type\":\"uint256\"}],\"name\":\"setStakeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeTax\",\"type\":\"uint256\"}],\"name\":\"setUnstakeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_warmupPeriod\",\"type\":\"uint256\"}],\"name\":\"setWarmupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeTillNextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensDeductedForStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensDeductedForUnstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensForAddressAtNextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensAtNextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GenesisAutoCompoundStaking", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000099999999999997fceb5549c58ab66df52385ca4d000000000000000000000000a93e7cd5dd6d228e67cbfdcb5523d4346c312b8700000000000000000000000031b6a4dca90fabf29879143ca5bb2c10e8a11e4c00000000000000000000000000000000000000000000000000000000667f3260", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}