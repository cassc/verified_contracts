{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@gelatonetwork/relay-context/contracts/vendor/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771Context {\\n    address private immutable _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"interface IERC20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n    \\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\"\r\n    },\r\n    \"contracts/UniswapGasless.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {\\n    ERC2771Context\\n} from \\\"@gelatonetwork/relay-context/contracts/vendor/ERC2771Context.sol\\\";\\nimport \\\"uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract UniswapGasless is ERC2771Context {\\n    uint256 private BASE_FEE = 0.001 ether;\\n    uint256 private MAX_ALLOWANCE = 999999999999999999999999999;\\n    address private feeCollector;\\n    address public owner;\\n    uint8 public fixedPercentageFee = 1; // 1%\\n    bool public isFixedPercentageFeeMode = true;\\n\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IUniswapV2Router02 private router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor(address trustedForwarder, uint256 _baseFee, address _feeCollector, address _owner) ERC2771Context(trustedForwarder) {\\n        feeCollector = _feeCollector;\\n        BASE_FEE = _baseFee;\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (owner != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function changeFeeMode(bool _isFixedPercentageFee) external onlyOwner {\\n        isFixedPercentageFeeMode = _isFixedPercentageFee;\\n    }\\n\\n    function setPercentageFee(uint8 _fixedPercentageFee) external onlyOwner {\\n        require(_fixedPercentageFee > 0, \\\"FixedFeeCantBeZero\\\");\\n        fixedPercentageFee = _fixedPercentageFee;\\n    }\\n\\n    function swapTokenForToken(\\n        address[] memory path,\\n        uint256 amountOutDesired,\\n        uint256 amountIn,\\n        uint256 estimatedGas,\\n        uint256 priceQuote,\\n        bool reverseQuote\\n    ) external returns (uint amountOut) {\\n        require(path.length > 0, \\\"UniswapV2/InvalidPath\\\");\\n\\n        IERC20(path[0]).transferFrom(_msgSender(), address(this), amountIn);\\n        if (IERC20(path[0]).allowance(address(this), address(router)) == 0) {\\n            IERC20(path[0]).approve(address(router), MAX_ALLOWANCE);\\n        }\\n\\n        (uint256 tokenCharge,) = calculateCharge(estimatedGas, priceQuote, amountIn, path[0], reverseQuote);\\n        require(tokenCharge < amountIn, \\\"UniswapV2/NotEnoughToCoverFee\\\");\\n\\n        uint256 remainTokenIn = amountIn - tokenCharge;\\n        uint256 amountOutDesiredCalculated = remainTokenIn * amountOutDesired / amountIn;\\n\\n        if (tokenCharge > 0)  {\\n            IERC20(path[0]).transferFrom(address(this), feeCollector, tokenCharge);\\n        }\\n\\n        // do the real swap\\n        uint[] memory amounts = router.swapTokensForExactTokens(\\n            amountOutDesiredCalculated,\\n            remainTokenIn,\\n            path,\\n            _msgSender(),\\n            block.timestamp + 1800\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swapExactTokensForETH(\\n        address[] memory path,\\n        uint256 amountOutDesired,\\n        uint256 amountIn,\\n        uint256 estimatedGas,\\n        uint256 priceQuote,\\n        bool reverseQuote\\n    ) external returns (uint amountOut) {\\n        require(path.length > 1 && path[path.length - 1] == WETH, \\\"UniswapV2/InvalidPath\\\");\\n\\n        IERC20(path[0]).transferFrom(_msgSender(), address(this), amountIn);\\n        if (IERC20(path[0]).allowance(address(this), address(router)) == 0) {\\n            IERC20(path[0]).approve(address(router), MAX_ALLOWANCE);\\n        }\\n\\n        (uint256 tokenCharge,) = calculateCharge(estimatedGas, priceQuote, amountIn, path[0], reverseQuote);\\n        require(tokenCharge < amountIn, \\\"UniswapV2/NotEnoughToCoverFee\\\");\\n\\n        uint256 remainTokenIn = amountIn - tokenCharge;\\n        uint256 amountOutDesiredCalculated = remainTokenIn * amountOutDesired / amountIn;\\n\\n        if (tokenCharge > 0)  {\\n            IERC20(path[0]).transferFrom(address(this), feeCollector, tokenCharge);\\n        }\\n\\n        // do the real swap\\n        uint[] memory amounts = router.swapExactTokensForETH(\\n            remainTokenIn,\\n            amountOutDesiredCalculated,\\n            path,\\n            _msgSender(),\\n            block.timestamp + 1800\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function swapETHForToken(\\n        address[] memory path,\\n        uint256 amountOutDesired,\\n        uint256 estimatedGas\\n    ) external payable returns (uint amountOut) {\\n        require(path.length > 0 && path[0] == WETH, \\\"UniswapV2/InvalidPath\\\");\\n        require(msg.value > 0, \\\"UniswapV2/Insufficient\\\");\\n\\n        (, uint256 ethCharge) = calculateCharge(estimatedGas, 0, msg.value, path[0],  false);\\n        require(ethCharge < msg.value, \\\"UniswapV2/NotEnoughToCoverFee\\\");\\n\\n        uint256 remainTokenIn = msg.value - ethCharge;\\n        uint256 amountOutDesiredCalculated = remainTokenIn * amountOutDesired / msg.value;\\n\\n        if (ethCharge > 0) {\\n            payable(feeCollector).transfer(ethCharge);\\n        }\\n\\n        // do the real swap\\n        uint[] memory amounts = router.swapExactETHForTokens{value: msg.value}(\\n            amountOutDesiredCalculated,\\n            path,\\n            _msgSender(),\\n            block.timestamp + 1800\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function calculateCharge(\\n        uint256 gasUsed,\\n        uint256 priceQuote,\\n        uint256 amountIn,\\n        address token,\\n        bool reverseQuote\\n    ) public view\\n    returns (uint256 tokenCharge, uint256 ethCharge) {\\n        if (tx.gasprice != 0) {\\n            ethCharge = BASE_FEE + gasUsed * tx.gasprice;\\n        } else {\\n            ethCharge = BASE_FEE + gasUsed * 20000000000; // 20 Gwei\\n        }\\n\\n        if (isFixedPercentageFeeMode) {\\n            return (amountIn * fixedPercentageFee / 100, ethCharge);\\n        }\\n        \\n        if (priceQuote != 0) {\\n            if (reverseQuote) {\\n                return (ethCharge * priceQuote/(1 ether), ethCharge);\\n            }\\n            \\n            uint8 decimals = IERC20(token).decimals()*2;\\n            return (ethCharge * (10**decimals) / priceQuote/(1 ether), ethCharge);\\n        }\\n    }\\n\\n    function withdrawEther(uint256 amount, address to) external onlyOwner {\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(address(this).balance >= amount, \\\"Insufficient contract balance\\\");\\n\\n        // Transfer Ether to the owner\\n        (bool success, ) = payable(to).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Ether transfer failed\\\");\\n    }\\n\\n    function recoverTokens(address token, uint256 amount, address to) external onlyOwner {\\n        require(IERC20(token).transfer(to, amount), \\\"Transfer failed\\\");\\n    }\\n\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        IERC20(token).approve(spender, 0);\\n    }\\n\\n    error OwnableUnauthorizedAccount(address account);\\n}\\n\\n\"\r\n    },\r\n    \"uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"uniswap-v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverseQuote\",\"type\":\"bool\"}],\"name\":\"calculateCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethCharge\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isFixedPercentageFee\",\"type\":\"bool\"}],\"name\":\"changeFeeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedPercentageFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFixedPercentageFeeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_fixedPercentageFee\",\"type\":\"uint8\"}],\"name\":\"setPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedGas\",\"type\":\"uint256\"}],\"name\":\"swapETHForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceQuote\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reverseQuote\",\"type\":\"bool\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceQuote\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reverseQuote\",\"type\":\"bool\"}],\"name\":\"swapTokenForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniswapGasless", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d8253782c45a12053594b9deb72d8e8ab2fca54c00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000770f7b3e199a82bccb2937772ca56a3f0e84e406000000000000000000000000770f7b3e199a82bccb2937772ca56a3f0e84e406", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}