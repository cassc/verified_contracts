{"SourceCode": "//Diamonds are renowned for their unparalleled hardness and exceptional clarity, making them more precise than emeralds in both gemological and industrial contexts\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ncontract sEReC20721_diamond_test {\r\n\r\n    string internal _name = \"Uniswap Diamonds\";\r\n    string internal _symbol = \"DIAMOND\";\r\n    uint internal _totalSupply = 7777 * 10**6;\r\n    uint internal _decimals = 6;\r\n    uint one = 10**6; uint cent = 10**4;\r\n    uint public id;\r\n    uint excess;\r\n    address public dev;\r\n    address[3] public pairs;\r\n    uint minted;\r\n\r\n    bool fromPair; bool toPair;\r\n    bool wholeInitFrom; bool wholeInitTo;\r\n    bool wholePostFrom; bool wholePostTo;\r\n\r\n    mapping(address => uint) internal _balanceOf;\r\n    mapping(address => mapping(address => uint)) internal _allowance;\r\n    mapping(uint256 tokenId => address) public ownerOf;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    mapping(address => uint16[]) public ownedNFTs;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event ERC20Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed amount, uint256 id);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    modifier onlyDev() {require(msg.sender == dev, \"Not the developer\");_;}\r\n\r\n    constructor() {_balanceOf[msg.sender] = _totalSupply; dev = msg.sender;}\r\n\r\n    function name() public view virtual returns (string memory) { return _name; }\r\n    function symbol() public view virtual returns (string memory) { return _symbol; }\r\n    function decimals() public view virtual returns (uint) { return _decimals; }\r\n    function totalSupply() public view virtual returns (uint) { return _totalSupply; }\r\n    function balanceOf(address account) public view virtual returns (uint) { return _balanceOf[account]; }\r\n    function allowance(address owner, address spender) public view virtual returns (uint) { return _allowance[owner][spender]; }\r\n    function setPairs(address pair1, address pair2, address pair3) public onlyDev {pairs[0] = pair1;pairs[1] = pair2;pairs[2] = pair3;}\r\n    // Removed setBaseURI function since base URI is not used\r\n    function measure() public view returns (uint) {return ownedNFTs[msg.sender].length;}\r\n    function approve(address spender, uint amount) public virtual returns (bool) {\r\n        if (amount > 10**6) {\r\n            _allowance[msg.sender][spender] = amount;\r\n            setApprovalForAll(spender, true);\r\n            emit Approval(msg.sender, spender, amount, 0);\r\n        }\r\n        else {\r\n            address owner = ownerOf[amount];\r\n            if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) revert(\"sEReC20721: You are not approved\");\r\n            _tokenApprovals[amount] = spender;\r\n            emit Approval(owner, spender, one, uint16(amount));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer20(address from, address to, uint amount) internal virtual {\r\n        \r\n        excess = amount % cent; amount -= excess;\r\n        fromPair = from == pairs[0] || from == pairs[1] || from == pairs[2];\r\n        toPair = to == pairs[0] || to == pairs[1] || to == pairs[2];\r\n        wholeInitFrom = _balanceOf[from] % one == 0; wholeInitTo = _balanceOf[to] % one == 0;\r\n        wholePostFrom = (_balanceOf[from] - amount) % one == 0; wholePostTo = (_balanceOf[to] + amount) % one == 0;\r\n\r\n        require(_balanceOf[from] >= amount, \"sEReC20721: transfer amount exceeds balance\");\r\n\r\n        if ((toPair && wholeInitFrom && !wholePostFrom) ||\r\n            (fromPair && !wholeInitTo && wholePostTo) ||\r\n            (fromPair && !wholeInitTo && (_balanceOf[to] % one) + amount % one >= one) ||\r\n            (toPair && !wholeInitFrom && (_balanceOf[from] % one) < amount % one)){\r\n                uint16 tokenId = ownedNFTs[from][0]; require(from == ownerOf[tokenId],\"NFT not found\");\r\n                delete _tokenApprovals[tokenId]; ownerOf[tokenId] = to;\r\n                ownedNFTs[from][0] = ownedNFTs[from][ownedNFTs[from].length - 1];\r\n                ownedNFTs[from].pop(); ownedNFTs[to].push(tokenId);\r\n                emit Transfer(from, to, tokenId);\r\n        }\r\n\r\n        else if ((wholeInitFrom != wholePostFrom) ||\r\n                (((_balanceOf[to] % one) + amount % one >= one))) {\r\n                require(toPair || fromPair, \"sEReC20721: break/make tokens with nonpair address\");\r\n        \r\n        }\r\n\r\n        uint amountInTokens = amount / one;\r\n        if (fromPair && ownedNFTs[from].length < amountInTokens) {\r\n            for (uint i = 0; i < amountInTokens; i++) {\r\n                minted++;\r\n                ownerOf[minted] = to;\r\n                ownedNFTs[to].push(uint16(minted));\r\n                emit Transfer(address(0), to, minted);\r\n            }\r\n        } \r\n\r\n        else {\r\n            for (uint i = 0; i < amountInTokens && ownedNFTs[from].length > 0; i++) {\r\n                uint16 tokenId = ownedNFTs[from][0];\r\n                _transfer721(from, to, tokenId); emit Transfer(from, to, tokenId);\r\n                ownedNFTs[from][0] = ownedNFTs[from][ownedNFTs[from].length - 1];\r\n                ownedNFTs[from].pop();\r\n                ownedNFTs[to].push(tokenId);\r\n            }\r\n        }\r\n\r\n        _balanceOf[from] -= amount; _balanceOf[to] += amount;\r\n        emit ERC20Transfer(from, to, amount);\r\n    }\r\n\r\n    function _transfer721(address from, address to, uint tokenId) internal virtual {\r\n        fromPair = from == pairs[0] || from == pairs[1] || from == pairs[2];\r\n        require(from == ownerOf[tokenId],\"sEReC20721: Incorrect owner\");\r\n        require(\r\n            msg.sender == from || msg.sender == getApproved(tokenId) ||isApprovedForAll(from, msg.sender) || fromPair,\r\n            \"sEReC20721: You don't have the right\"\r\n            );\r\n        delete _tokenApprovals[tokenId];\r\n        ownerOf[tokenId] = to;\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function transfer(address to, uint amount) public virtual returns (bool) {\r\n        if (amount >= cent){_transfer20(msg.sender, to, amount);}\r\n        else {_transfer721(msg.sender, to, amount);_balanceOf[msg.sender]-= one; _balanceOf[to]+= one;}\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint amount) public virtual returns (bool) {\r\n        if (amount >= cent) {_spendAllowance(from, msg.sender, amount); _transfer20(from, to, amount);}\r\n        else {_transfer721(from, to, amount);_balanceOf[from]-= one; _balanceOf[to]+= one;}\r\n        return true;\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint16 tokenId) public virtual returns (bool) {\r\n        _transfer721(from, to, tokenId); _balanceOf[from]-= one; _balanceOf[to]+= one;\r\n        return true;\r\n    }\r\n\r\n\r\n    function _spendAllowance(address owner, address spender, uint amount) internal virtual {\r\n        require(_allowance[owner][spender] >= amount, \"sEReC20721: insufficient allowance\");\r\n        _allowance[owner][spender] -= amount;\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\r\n        if (ownerOf[tokenId] == address(0)) revert();\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    \r\n   \r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {return \"0\";} uint256 temp = value; uint256 digits;\r\n        while (temp != 0) {digits++; temp /= 10;} bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {digits -= 1; buffer[digits] = bytes1(uint8(value % 10) + 48); value /= 10;}\r\n        return string(buffer);\r\n    }\r\n\r\n    function withdraw() external onlyDev {\r\n        payable(dev).transfer(address(this).balance);\r\n        uint256 tokenAmount = _balanceOf[address(this)];\r\n        if (tokenAmount > 0) {_transfer20(address(this), dev, tokenAmount);}\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"measure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedNFTs\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair3\",\"type\":\"address\"}],\"name\":\"setPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "sEReC20721_diamond_test", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c75da79804e70dbb8ebcca304e18aefecd5f451986fd6b21e510595c4641c17"}