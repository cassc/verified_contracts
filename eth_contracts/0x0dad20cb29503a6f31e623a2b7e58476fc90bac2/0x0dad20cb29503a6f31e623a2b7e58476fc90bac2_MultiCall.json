{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/dev-contracts/MultiCall.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\n\\r\\n\\r\\n\\r\\nimport '../interfaces/IZkLink.sol';\\r\\n\\r\\ncontract MultiCall {\\r\\n    struct WithdrawToL1Info {\\r\\n        address owner;\\r\\n        address token;\\r\\n        uint128 amount;\\r\\n        uint16 fastWithdrawFeeRate;\\r\\n        uint32 accountIdOfNonce;\\r\\n        uint8 subAccountIdOfNonce;\\r\\n        uint32 nonce;\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct WithdrawPendingBalanceInfo {\\r\\n        address payable owner;\\r\\n        uint16 tokenId;\\r\\n        uint128 amount;\\r\\n    }\\r\\n\\r\\n    struct Result {\\r\\n        bool success;\\r\\n        bytes returnData;\\r\\n    }\\r\\n\\r\\n    event Call(address target, bytes _calldata, bool success, bytes result);\\r\\n\\r\\n    function multiStaticCall(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata calls\\r\\n    ) external view returns (uint256 blockNumber, Result[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new Result[](calls.length);\\r\\n        for (uint i = 0; i < targets.length; i++) {\\r\\n            (bool success, bytes memory ret) = targets[i].staticcall(calls[i]);\\r\\n            returnData[i] = Result(success, ret);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function strictMulticall(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata calls\\r\\n    ) external {\\r\\n        require(targets.length == calls.length, 'targets.length != calls.length');\\r\\n\\r\\n        for (uint i = 0; i < targets.length; i++) {\\r\\n            (bool success, bytes memory data) = targets[i].call(calls[i]);\\r\\n            require(success, string(data));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function multicall(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata calls\\r\\n    ) external {\\r\\n        require(targets.length == calls.length, 'targets.length != calls.length');\\r\\n\\r\\n        for (uint i = 0; i < targets.length; i++) {\\r\\n            (bool success, bytes memory data) = targets[i].call(calls[i]);\\r\\n            emit Call(targets[i], calls[i], success, data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchWithdrawToL1(\\r\\n        IZkLink zkLinkInstance,\\r\\n        WithdrawToL1Info[] calldata _withdrawDatas\\r\\n    ) external payable {\\r\\n        for (uint i; i < _withdrawDatas.length; i++) {\\r\\n            WithdrawToL1Info memory withdrawInfo = _withdrawDatas[i];\\r\\n            zkLinkInstance.withdrawToL1{value: withdrawInfo.value}(\\r\\n                withdrawInfo.owner,\\r\\n                withdrawInfo.token,\\r\\n                withdrawInfo.amount,\\r\\n                withdrawInfo.fastWithdrawFeeRate,\\r\\n                withdrawInfo.accountIdOfNonce,\\r\\n                withdrawInfo.subAccountIdOfNonce,\\r\\n                withdrawInfo.nonce\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchWithdrawPendingBalance(\\r\\n        IZkLink zkLinkInstance,\\r\\n        WithdrawPendingBalanceInfo[] calldata _withdrawDatas\\r\\n    ) external {\\r\\n        for (uint i; i < _withdrawDatas.length; i++) {\\r\\n            WithdrawPendingBalanceInfo memory withdrawInfo = _withdrawDatas[i];\\r\\n            zkLinkInstance.withdrawPendingBalance(\\r\\n                withdrawInfo.owner,\\r\\n                withdrawInfo.tokenId,\\r\\n                withdrawInfo.amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/interfaces/IZkLink.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ZkLink interface contract\\n/// @author zk.link\\ninterface IZkLink {\\n    /// @notice Return the network governor\\n    function networkGovernor() external view returns (address);\\n\\n    /// @notice Deposit ETH to Layer 2 - transfer ether from user into contract, validate it, register deposit\\n    function depositETH(bytes32 _zkLinkAddress, uint8 _subAccountId) external payable;\\n\\n    /// @notice Deposit ERC20 token to Layer 2 - transfer ERC20 tokens from user into contract, validate it, register deposit\\n    function depositERC20(IERC20 _token, uint104 _amount, bytes32 _zkLinkAddress, uint8 _subAccountId, bool _mapping) external;\\n\\n    /// @notice Receive block sync hash from slaver chain\\n    function receiveSyncHash(uint8 chainId, bytes32 syncHash) external;\\n\\n    /// @notice Receive block confirmation from master chain\\n    function receiveBlockConfirmation(uint32 blockNumber) external;\\n\\n    /// @notice Withdraw token to L1 for user by gateway\\n    /// @param owner User receive token on L1\\n    /// @param token Token address\\n    /// @param amount The amount(recovered decimals) of withdraw operation\\n    /// @param fastWithdrawFeeRate Fast withdraw fee rate taken by acceptor\\n    /// @param accountIdOfNonce Account that supply nonce, may be different from accountId\\n    /// @param subAccountIdOfNonce SubAccount that supply nonce\\n    /// @param nonce SubAccount nonce, used to produce unique accept info\\n    function withdrawToL1(address owner, address token, uint128 amount, uint16 fastWithdrawFeeRate, uint32 accountIdOfNonce, uint8 subAccountIdOfNonce, uint32 nonce) external payable;\\n\\n    /// @notice  Withdraws tokens from zkLink contract to the owner\\n    /// @param _owner Address of the tokens owner\\n    /// @param _tokenId Token id\\n    /// @param _amount Amount to withdraw to request.\\n    /// @dev NOTE: We will call ERC20.transfer(.., _amount), but if according to internal logic of ERC20 token zkLink contract\\n    /// balance will be decreased by value more then _amount we will try to subtract this value from user pending balance\\n    function withdrawPendingBalance(address payable _owner, uint16 _tokenId, uint128 _amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"Call\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IZkLink\",\"name\":\"zkLinkInstance\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"internalType\":\"struct MultiCall.WithdrawPendingBalanceInfo[]\",\"name\":\"_withdrawDatas\",\"type\":\"tuple[]\"}],\"name\":\"batchWithdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IZkLink\",\"name\":\"zkLinkInstance\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"fastWithdrawFeeRate\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"accountIdOfNonce\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"subAccountIdOfNonce\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiCall.WithdrawToL1Info[]\",\"name\":\"_withdrawDatas\",\"type\":\"tuple[]\"}],\"name\":\"batchWithdrawToL1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"}],\"name\":\"multiStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"}],\"name\":\"strictMulticall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiCall", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}