{"SourceCode": "pragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ncontract STAKE {\r\n    //constant\r\n    uint256 public constant percentDivider = 100_000;\r\n    //variables\r\n    uint256 public minStake = 10_000_000;\r\n    uint256 public totalStaked;\r\n    uint256 public currentStaked;\r\n    uint256 public totalRewardClaimed;\r\n    uint256 public totalNftStaked;\r\n    uint256 public currentNftStaked;\r\n    uint256 public totalNftRewardClaimed;\r\n    uint256 public TimeStep = 1 seconds;\r\n    uint256 public unstakePeriod = 30 days;\r\n    uint256 tax = 10_000;\r\n    uint256 public maxNFT = 5;\r\n\r\n    //address\r\n    address payable public Admin;\r\n    address payable public RewardAddress;\r\n\r\n    // structures\r\n    struct Stake {\r\n        address token;\r\n        address rewardtoken;\r\n        uint256 profit;\r\n        uint256 StakePeriod;\r\n        bool isnft;\r\n    }\r\n    struct Staker {\r\n        uint256 Amount;\r\n        uint256[] ids;\r\n        uint256 Claimed;\r\n        uint256 Claimable;\r\n        uint256 MaxClaimable;\r\n        uint256 TokenPerTimeStep;\r\n        uint256 LastClaimTime;\r\n        uint256 UnStakeTime;\r\n        uint256 WithDrawTime;\r\n        uint256 StakeTime;\r\n    }\r\n    struct userdata {\r\n        uint256 totalStaked;\r\n        uint256 totalUnStaked;\r\n        uint256 totalClaimed;\r\n    }\r\n    struct Stakedata {\r\n        Stake[] stakeplan;\r\n        uint256 Nonce;\r\n        mapping(uint256 => mapping(address => userdata)) user_overall_data;\r\n        mapping(uint256 => mapping(address => Staker)) Plan;\r\n    }\r\n\r\n    Stakedata public stakedata;\r\n    mapping(address => bool) public blacklisted;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == Admin, \"Stake: Not an Admin\");\r\n        _;\r\n    }\r\n    modifier validDepositId(uint256 _depositId) {\r\n        require(\r\n            _depositId >= 0 && _depositId < stakedata.Nonce,\r\n            \"Invalid depositId\"\r\n        );\r\n        _;\r\n    }\r\n    modifier validUser(address _user) {\r\n        require(!blacklisted[_user], \"User is blacklisted\");\r\n        _;\r\n    }\r\n\r\n    constructor(address nft, address erc20) {\r\n        Admin = payable(msg.sender);\r\n        RewardAddress = payable(msg.sender);\r\n\r\n        stakedata.stakeplan.push(\r\n            Stake(nft, erc20, 0, 365 days, true)\r\n        );\r\n        stakedata.Nonce++;\r\n        stakedata.stakeplan.push(\r\n            Stake(erc20, erc20, 5_000, 365 days, false)\r\n        );\r\n        stakedata.Nonce++;\r\n    }\r\n\r\n    // to buy  token during Stake time => for web3 use\r\n    function deposit(\r\n        uint256 _depositId,\r\n        uint256 _amount,\r\n        uint256[] calldata ids\r\n    ) public validDepositId(_depositId) validUser(msg.sender) {\r\n        if (stakedata.stakeplan[_depositId].isnft) {\r\n            require(_amount == 0, \"amount should be zero for NFT\");\r\n            require(ids.length <= maxNFT, \"Max NFT limit reached\");\r\n            for (uint256 i = 0; i < ids.length; i++) {\r\n                IERC721(stakedata.stakeplan[_depositId].token).transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    ids[i]\r\n                );\r\n                stakedata.Plan[_depositId][msg.sender].ids.push(ids[i]);\r\n            }\r\n            stakedata.Plan[_depositId][msg.sender].Claimable = calcRewards(\r\n                msg.sender,\r\n                _depositId\r\n            );\r\n            stakedata.Plan[_depositId][msg.sender].Amount =\r\n                stakedata.Plan[_depositId][msg.sender].Amount +\r\n                (_amount);\r\n\r\n            stakedata.Plan[_depositId][msg.sender].MaxClaimable =\r\n                (\r\n                    (stakedata.Plan[_depositId][msg.sender].ids.length *\r\n                        (stakedata.stakeplan[_depositId].profit))\r\n                ) +\r\n                stakedata.Plan[_depositId][msg.sender].Claimable;\r\n\r\n            stakedata.Plan[_depositId][msg.sender].TokenPerTimeStep = (\r\n                CalculatePerTimeStep(\r\n                    stakedata.Plan[_depositId][msg.sender].MaxClaimable -\r\n                        stakedata.Plan[_depositId][msg.sender].Claimable,\r\n                    stakedata.stakeplan[_depositId].StakePeriod\r\n                )\r\n            );\r\n        } else {\r\n            require(ids.length == 0, \"ids should be empty for ERC20\");\r\n            require(_amount >= minStake, \"Deposit more than 10_000\");\r\n            IERC20(stakedata.stakeplan[_depositId].token).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            );\r\n            stakedata.Plan[_depositId][msg.sender].Claimable = calcRewards(\r\n                msg.sender,\r\n                _depositId\r\n            );\r\n            stakedata.Plan[_depositId][msg.sender].Amount =\r\n                stakedata.Plan[_depositId][msg.sender].Amount +\r\n                (_amount);\r\n\r\n            stakedata.Plan[_depositId][msg.sender].MaxClaimable =\r\n                ((stakedata.Plan[_depositId][msg.sender].Amount *\r\n                    (stakedata.stakeplan[_depositId].profit)) /\r\n                    (percentDivider)) +\r\n                stakedata.Plan[_depositId][msg.sender].Claimable;\r\n\r\n            stakedata.Plan[_depositId][msg.sender].TokenPerTimeStep = (\r\n                CalculatePerTimeStep(\r\n                    stakedata.Plan[_depositId][msg.sender].MaxClaimable -\r\n                        stakedata.Plan[_depositId][msg.sender].Claimable,\r\n                    stakedata.stakeplan[_depositId].StakePeriod\r\n                )\r\n            );\r\n        }\r\n        totalStaked = totalStaked + (_amount);\r\n        currentStaked = currentStaked + (_amount);\r\n        totalNftStaked = totalNftStaked + ids.length;\r\n        currentNftStaked = currentNftStaked + ids.length;\r\n        stakedata.user_overall_data[_depositId][msg.sender].totalStaked =\r\n            stakedata.user_overall_data[_depositId][msg.sender].totalStaked +\r\n            _amount;\r\n        stakedata.user_overall_data[_depositId][msg.sender].totalStaked =\r\n            stakedata.user_overall_data[_depositId][msg.sender].totalStaked +\r\n            ids.length;\r\n\r\n        stakedata.Plan[_depositId][msg.sender].LastClaimTime = block.timestamp;\r\n\r\n        stakedata.Plan[_depositId][msg.sender].StakeTime = block.timestamp;\r\n        stakedata.Plan[_depositId][msg.sender].WithDrawTime =\r\n            block.timestamp +\r\n            (stakedata.stakeplan[_depositId].StakePeriod);\r\n        stakedata.Plan[_depositId][msg.sender].UnStakeTime =\r\n            block.timestamp +\r\n            unstakePeriod;\r\n        stakedata.Plan[_depositId][msg.sender].Claimed = 0;\r\n    }\r\n\r\n    function reinvest(uint256 _depositId)\r\n        public\r\n        validDepositId(_depositId)\r\n        validUser(msg.sender)\r\n    {\r\n        require(\r\n            !stakedata.stakeplan[_depositId].isnft,\r\n            \"reinvest is not allowed for NFT\"\r\n        );\r\n        totalStaked = totalStaked + (calcRewards(msg.sender, _depositId));\r\n        currentStaked = currentStaked + (calcRewards(msg.sender, _depositId));\r\n        stakedata.user_overall_data[_depositId][msg.sender].totalStaked =\r\n            stakedata.user_overall_data[_depositId][msg.sender].totalStaked +\r\n            (calcRewards(msg.sender, _depositId));\r\n        require(\r\n            stakedata.Plan[_depositId][msg.sender].Amount > 0,\r\n            \"not staked\"\r\n        );\r\n\r\n        stakedata.Plan[_depositId][msg.sender].Amount =\r\n            stakedata.Plan[_depositId][msg.sender].Amount +\r\n            (calcRewards(msg.sender, _depositId));\r\n        IERC20(stakedata.stakeplan[_depositId].token).transferFrom(\r\n            RewardAddress,\r\n            address(this),\r\n            calcRewards(msg.sender, _depositId)\r\n        );\r\n        stakedata.Plan[_depositId][msg.sender].TokenPerTimeStep = (\r\n            CalculatePerTimeStep(\r\n                ((stakedata.Plan[_depositId][msg.sender].Amount *\r\n                    (stakedata.stakeplan[_depositId].profit)) /\r\n                    (percentDivider)),\r\n                stakedata.stakeplan[_depositId].StakePeriod\r\n            )\r\n        );\r\n        stakedata.Plan[_depositId][msg.sender].MaxClaimable = ((stakedata\r\n        .Plan[_depositId][msg.sender].Amount *\r\n            (stakedata.stakeplan[_depositId].profit)) / (percentDivider));\r\n\r\n        stakedata.Plan[_depositId][msg.sender].LastClaimTime = block.timestamp;\r\n\r\n        stakedata.Plan[_depositId][msg.sender].StakeTime = block.timestamp;\r\n        stakedata.Plan[_depositId][msg.sender].WithDrawTime =\r\n            block.timestamp +\r\n            (stakedata.stakeplan[_depositId].StakePeriod);\r\n        stakedata.Plan[_depositId][msg.sender].UnStakeTime =\r\n            block.timestamp +\r\n            unstakePeriod;\r\n        stakedata.Plan[_depositId][msg.sender].Claimable = 0;\r\n        stakedata.Plan[_depositId][msg.sender].Claimed = 0;\r\n    }\r\n\r\n    function withdrawAll(uint256 _depositId, address reward)\r\n        external\r\n        validDepositId(_depositId)\r\n        validUser(msg.sender)\r\n    {\r\n        require(\r\n            calcRewards(msg.sender, _depositId) > 0,\r\n            \"no claimable amount available yet\"\r\n        );\r\n        _withdraw(msg.sender, _depositId, reward);\r\n    }\r\n\r\n    function _withdraw(\r\n        address _user,\r\n        uint256 _depositId,\r\n        address reward\r\n    ) internal validDepositId(_depositId) {\r\n        require(\r\n            stakedata.Plan[_depositId][_user].Claimed <=\r\n                stakedata.Plan[_depositId][_user].MaxClaimable,\r\n            \"no claimable amount available\"\r\n        );\r\n        require(\r\n            block.timestamp > stakedata.Plan[_depositId][_user].LastClaimTime,\r\n            \"time not reached\"\r\n        );\r\n\r\n        stakedata.user_overall_data[_depositId][_user].totalClaimed =\r\n            stakedata.user_overall_data[_depositId][_user].totalClaimed +\r\n            (calcRewards(_user, _depositId));\r\n        totalRewardClaimed += stakedata.stakeplan[_depositId].isnft\r\n            ? 0\r\n            : calcRewards(_user, _depositId);\r\n        totalNftRewardClaimed += stakedata.stakeplan[_depositId].isnft\r\n            ? calcRewards(_user, _depositId)\r\n            : 0;\r\n        if (calcRewards(_user, _depositId) > 0) {\r\n            IERC20(stakedata.stakeplan[_depositId].rewardtoken).transferFrom(\r\n                RewardAddress,\r\n                reward,\r\n                calcRewards(_user, _depositId)\r\n            );\r\n        }\r\n        stakedata.Plan[_depositId][_user].Claimed =\r\n            stakedata.Plan[_depositId][_user].Claimed +\r\n            (calcRewards(_user, _depositId));\r\n\r\n        stakedata.Plan[_depositId][_user].LastClaimTime = block.timestamp;\r\n        stakedata.Plan[_depositId][_user].Claimable = 0;\r\n    }\r\n\r\n    function CompleteWithDraw(uint256 _depositId, address reward)\r\n        external\r\n        validDepositId(_depositId)\r\n        validUser(msg.sender)\r\n    {\r\n        require(\r\n            stakedata.Plan[_depositId][msg.sender].WithDrawTime <\r\n                block.timestamp,\r\n            \"Time not reached\"\r\n        );\r\n        if (stakedata.stakeplan[_depositId].isnft) {\r\n            for (\r\n                uint256 i = 0;\r\n                i < stakedata.Plan[_depositId][msg.sender].ids.length;\r\n                i++\r\n            ) {\r\n                IERC721(stakedata.stakeplan[_depositId].token).transferFrom(\r\n                    address(this),\r\n                    msg.sender,\r\n                    stakedata.Plan[_depositId][msg.sender].ids[i]\r\n                );\r\n            }\r\n        } else {\r\n            IERC20(stakedata.stakeplan[_depositId].token).transfer(\r\n                msg.sender,\r\n                stakedata.Plan[_depositId][msg.sender].Amount\r\n            );\r\n        }\r\n        _withdraw(msg.sender, _depositId, reward);\r\n        delete stakedata.Plan[_depositId][msg.sender];\r\n    }\r\n\r\n    function Unfreez(uint256 _depositId)\r\n        external\r\n        validDepositId(_depositId)\r\n        validUser(msg.sender)\r\n    {\r\n        require(\r\n            stakedata.stakeplan[_depositId].isnft,\r\n            \"This Unfreez is allowed for NFT only\"\r\n        );\r\n        require(\r\n            block.timestamp >\r\n                stakedata.Plan[_depositId][msg.sender].UnStakeTime &&\r\n                block.timestamp <\r\n                stakedata.Plan[_depositId][msg.sender].WithDrawTime,\r\n            \"Time Not right\"\r\n        );\r\n        for (\r\n            uint256 i = 0;\r\n            i < stakedata.Plan[_depositId][msg.sender].ids.length;\r\n            i++\r\n        ) {\r\n            IERC721(stakedata.stakeplan[_depositId].token).transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                stakedata.Plan[_depositId][msg.sender].ids[i]\r\n            );\r\n        }\r\n        currentNftStaked =\r\n            currentNftStaked -\r\n            stakedata.Plan[_depositId][msg.sender].ids.length;\r\n        stakedata.user_overall_data[_depositId][msg.sender].totalUnStaked =\r\n            stakedata.user_overall_data[_depositId][msg.sender].totalUnStaked +\r\n            stakedata.Plan[_depositId][msg.sender].ids.length;\r\n        _withdraw(msg.sender, _depositId, msg.sender);\r\n        delete stakedata.Plan[_depositId][msg.sender];\r\n    }\r\n\r\n    function UnfreezDEEZ(uint256 _depositId)\r\n        external\r\n        validDepositId(_depositId)\r\n        validUser(msg.sender)\r\n    {\r\n        require(\r\n            !stakedata.stakeplan[_depositId].isnft,\r\n            \"This Unfreez is not allowed for NFT\"\r\n        );\r\n        require(\r\n            block.timestamp >\r\n                stakedata.Plan[_depositId][msg.sender].UnStakeTime &&\r\n                block.timestamp <\r\n                stakedata.Plan[_depositId][msg.sender].WithDrawTime,\r\n            \"Time Not right\"\r\n        );\r\n        IERC20(stakedata.stakeplan[_depositId].token).transfer(\r\n            msg.sender,\r\n            stakedata.Plan[_depositId][msg.sender].Amount\r\n        );\r\n\r\n        currentStaked =\r\n            currentStaked -\r\n            stakedata.Plan[_depositId][msg.sender].Amount;\r\n        stakedata.user_overall_data[_depositId][msg.sender].totalUnStaked =\r\n            stakedata.user_overall_data[_depositId][msg.sender].totalUnStaked +\r\n            stakedata.Plan[_depositId][msg.sender].Amount;\r\n        _withdraw(msg.sender, _depositId, msg.sender);\r\n        delete stakedata.Plan[_depositId][msg.sender];\r\n    }\r\n\r\n    function calcRewards(address _sender, uint256 _depositId)\r\n        public\r\n        view\r\n        validDepositId(_depositId)\r\n        returns (uint256 amount)\r\n    {\r\n        uint256 claimable = stakedata\r\n        .Plan[_depositId][_sender].TokenPerTimeStep *\r\n            ((block.timestamp -\r\n                (stakedata.Plan[_depositId][_sender].LastClaimTime)) /\r\n                (TimeStep));\r\n        claimable = claimable + stakedata.Plan[_depositId][_sender].Claimable;\r\n        if (\r\n            claimable >\r\n            stakedata.Plan[_depositId][_sender].MaxClaimable -\r\n                (stakedata.Plan[_depositId][_sender].Claimed)\r\n        ) {\r\n            claimable =\r\n                stakedata.Plan[_depositId][_sender].MaxClaimable -\r\n                (stakedata.Plan[_depositId][_sender].Claimed);\r\n        }\r\n        return (claimable);\r\n    }\r\n\r\n    function getCurrentBalance(uint256 _depositId, address _sender)\r\n        public\r\n        view\r\n        returns (uint256 addressBalance)\r\n    {\r\n        return (stakedata.Plan[_depositId][_sender].Amount);\r\n    }\r\n\r\n    function getuseroveralldata(uint256 _depositId, address _sender)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _totalClaimed,\r\n            uint256 _totalStaked,\r\n            uint256 _totalUnStaked\r\n        )\r\n    {\r\n        return (\r\n            stakedata.user_overall_data[_depositId][_sender].totalClaimed,\r\n            stakedata.user_overall_data[_depositId][_sender].totalStaked,\r\n            stakedata.user_overall_data[_depositId][_sender].totalUnStaked\r\n        );\r\n    }\r\n\r\n    function depositDates(address _sender, uint256 _depositId)\r\n        public\r\n        view\r\n        validDepositId(_depositId)\r\n        returns (uint256 date)\r\n    {\r\n        return (stakedata.Plan[_depositId][_sender].StakeTime);\r\n    }\r\n\r\n    function isLockupPeriodExpired(address _user, uint256 _depositId)\r\n        public\r\n        view\r\n        validDepositId(_depositId)\r\n        returns (bool val)\r\n    {\r\n        if (block.timestamp > stakedata.Plan[_depositId][_user].WithDrawTime) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // transfer Adminship\r\n    function transferOwnership(address payable _newAdmin) external onlyAdmin {\r\n        Admin = _newAdmin;\r\n    }\r\n\r\n    function ChangeTax(uint256 _tax) external onlyAdmin {\r\n        require(_tax < percentDivider / 4, \"Tax must be less than 25%\");\r\n        tax = _tax;\r\n    }\r\n\r\n    function blacklist(address _address, bool choice) external onlyAdmin {\r\n        blacklisted[_address] = choice;\r\n    }\r\n\r\n    function withdrawStuckToken(address _token, uint256 _amount)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        IERC20(_token).transfer(msg.sender, _amount);\r\n    }\r\n    function withdrawStuckNFT(address _token, uint256 [] memory id)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        for(uint256 i; i < id.length ; i++){\r\n            IERC721(_token).transferFrom(address(this),msg.sender, id[i]);\r\n        }\r\n    }\r\n\r\n    function changeUnstakeperiod(uint256 val) public onlyAdmin{\r\n        unstakePeriod = val;\r\n    }\r\n\r\n    function ChangeRewardAddress(address payable _newAddress)\r\n        external\r\n        onlyAdmin\r\n    {\r\n        RewardAddress = _newAddress;\r\n    }\r\n\r\n    function ChangePlan(\r\n        uint256 _depositId,\r\n        uint256 profit,\r\n        uint256 StakePeriod\r\n    ) external onlyAdmin validDepositId(_depositId) {\r\n        stakedata.stakeplan[_depositId].profit = profit;\r\n        stakedata.stakeplan[_depositId].StakePeriod = StakePeriod;\r\n    }\r\n\r\n    function Addplan(\r\n        address token,\r\n        address rewardtoken,\r\n        uint256 profit,\r\n        uint256 StakePeriod,\r\n        bool isnft\r\n    ) external onlyAdmin {\r\n        stakedata.stakeplan.push(\r\n            Stake(token, rewardtoken, profit, StakePeriod, isnft)\r\n        );\r\n        stakedata.Nonce++;\r\n    }\r\n\r\n    function removePlan(uint256 _depositId)\r\n        external\r\n        onlyAdmin\r\n        validDepositId(_depositId)\r\n    {\r\n        delete stakedata.stakeplan[_depositId];\r\n        stakedata.Nonce--;\r\n    }\r\n\r\n    function viewPlan(uint256 _depositId)\r\n        external\r\n        view\r\n        validDepositId(_depositId)\r\n        returns (\r\n            address token,\r\n            address rewardtoken,\r\n            uint256 profit,\r\n            uint256 StakePeriod,\r\n            bool isnft\r\n        )\r\n    {\r\n        return (\r\n            stakedata.stakeplan[_depositId].token,\r\n            stakedata.stakeplan[_depositId].rewardtoken,\r\n            stakedata.stakeplan[_depositId].profit,\r\n            stakedata.stakeplan[_depositId].StakePeriod,\r\n            stakedata.stakeplan[_depositId].isnft\r\n        );\r\n    }\r\n\r\n    function ChangeMinStake(uint256 val) external onlyAdmin {\r\n        \r\n        minStake = val;\r\n    }\r\n\r\n    function CalculatePerTimeStep(uint256 amount, uint256 _VestingPeriod)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (amount * (TimeStep)) / (_VestingPeriod);\r\n    }\r\n\r\n    function planCount() external view returns (uint256) {\r\n        return stakedata.Nonce;\r\n    }\r\n\r\n    function getuserdata(uint256 _depositId, address _user)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 Amount,\r\n            uint256[] memory ids,\r\n            uint256 Claimed,\r\n            uint256 Claimable,\r\n            uint256 LastClaimTime,\r\n            uint256 UnStakeTime\r\n        )\r\n    {\r\n        return (\r\n            stakedata.Plan[_depositId][_user].Amount,\r\n            stakedata.Plan[_depositId][_user].ids,\r\n            stakedata.Plan[_depositId][_user].Claimed,\r\n            stakedata.Plan[_depositId][_user].Claimable,\r\n            stakedata.Plan[_depositId][_user].WithDrawTime,\r\n            stakedata.Plan[_depositId][_user].UnStakeTime\r\n        );\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 retue);\r\n\r\n    event Approret(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 retue\r\n    );\r\n}\r\n\r\ninterface IERC721 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event Approret(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event ApproretForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApproretForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isnft\",\"type\":\"bool\"}],\"name\":\"Addplan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ChangeMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePeriod\",\"type\":\"uint256\"}],\"name\":\"ChangePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ChangeRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"ChangeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"CompleteWithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TimeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"Unfreez\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"UnfreezDEEZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calcRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"changeUnstakeperiod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNftStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"depositDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCurrentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"addressBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getuserdata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"Claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UnStakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getuseroveralldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUnStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"isLockupPeriodExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"removePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNftRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNftStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"viewPlan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isnft\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"}],\"name\":\"withdrawStuckNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "STAKE", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000f2492a6e2fead91fc62fbd91864f0b9faf376a20000000000000000000000000f2492a6e2fead91fc62fbd91864f0b9faf376a2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://892ecd44dcbff28e3a8f59318b8a7a52bfd8d04d14cab21df25a150991b1ad7f"}