{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity =0.8.12;\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Minimal interface for a `Registry`-type contract.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice Functions related to the registration process itself have been intentionally excluded\r\n * because their function signatures may vary significantly.\r\n */\r\ninterface IRegistry {\r\n    function registryCoordinator() external view returns (address);\r\n}\r\n\r\n// several functions are taken or adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol (MIT license):\r\n// Copyright 2017 Christian Reitwiessner\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to\r\n// deal in the Software without restriction, including without limitation the\r\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n// sell copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n// IN THE SOFTWARE.\r\n\r\n// The remainder of the code in this library is written by LayrLabs Inc. and is also under an MIT license\r\n\r\n/**\r\n * @title Library for operations on the BN254 elliptic curve.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice Contains BN254 parameters, common operations (addition, scalar mul, pairing), and BLS signature functionality.\r\n */\r\nlibrary BN254 {\r\n    // modulus for the underlying field F_p of the elliptic curve\r\n    uint256 internal constant FP_MODULUS =\r\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\r\n    // modulus for the underlying field F_r of the elliptic curve\r\n    uint256 internal constant FR_MODULUS =\r\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\r\n\r\n    struct G1Point {\r\n        uint256 X;\r\n        uint256 Y;\r\n    }\r\n\r\n    // Encoding of field elements is: X[1] * i + X[0]\r\n    struct G2Point {\r\n        uint256[2] X;\r\n        uint256[2] Y;\r\n    }\r\n\r\n    function generatorG1() internal pure returns (G1Point memory) {\r\n        return G1Point(1, 2);\r\n    }\r\n\r\n    // generator of group G2\r\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\r\n    uint256 internal constant G2x1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\r\n    uint256 internal constant G2x0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\r\n    uint256 internal constant G2y1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\r\n    uint256 internal constant G2y0 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\r\n\r\n    /// @notice returns the G2 generator\r\n    /// @dev mind the ordering of the 1s and 0s!\r\n    ///      this is because of the (unknown to us) convention used in the bn254 pairing precompile contract\r\n    ///      \"Elements a * i + b of F_p^2 are encoded as two elements of F_p, (a, b).\"\r\n    ///      https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197.md#encoding\r\n    function generatorG2() internal pure returns (G2Point memory) {\r\n        return G2Point([G2x1, G2x0], [G2y1, G2y0]);\r\n    }\r\n\r\n    // negation of the generator of group G2\r\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\r\n    uint256 internal constant nG2x1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\r\n    uint256 internal constant nG2x0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\r\n    uint256 internal constant nG2y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\r\n    uint256 internal constant nG2y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\r\n\r\n    function negGeneratorG2() internal pure returns (G2Point memory) {\r\n        return G2Point([nG2x1, nG2x0], [nG2y1, nG2y0]);\r\n    }\r\n\r\n    bytes32 internal constant powersOfTauMerkleRoot =\r\n        0x22c998e49752bbb1918ba87d6d59dd0e83620a311ba91dd4b2cc84990b31b56f;\r\n\r\n    /**\r\n     * @param p Some point in G1.\r\n     * @return The negation of `p`, i.e. p.plus(p.negate()) should be zero.\r\n     */\r\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\r\n        // The prime q in the base field F_q for G1\r\n        if (p.X == 0 && p.Y == 0) {\r\n            return G1Point(0, 0);\r\n        } else {\r\n            return G1Point(p.X, FP_MODULUS - (p.Y % FP_MODULUS));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return r the sum of two points of G1\r\n     */\r\n    function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\r\n        uint256[4] memory input;\r\n        input[0] = p1.X;\r\n        input[1] = p1.Y;\r\n        input[2] = p2.X;\r\n        input[3] = p2.Y;\r\n        bool success;\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 6, input, 0x80, r, 0x40)\r\n            // Use \"invalid\" to make gas estimation work\r\n            switch success\r\n            case 0 {\r\n                invalid()\r\n            }\r\n        }\r\n\r\n        require(success, \"ec-add-failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice an optimized ecMul implementation that takes O(log_2(s)) ecAdds\r\n     * @param p the point to multiply\r\n     * @param s the scalar to multiply by\r\n     * @dev this function is only safe to use if the scalar is 9 bits or less\r\n     */ \r\n    function scalar_mul_tiny(BN254.G1Point memory p, uint16 s) internal view returns (BN254.G1Point memory) {\r\n        require(s < 2**9, \"scalar-too-large\");\r\n\r\n        // if s is 1 return p\r\n        if(s == 1) {\r\n            return p;\r\n        }\r\n\r\n        // the accumulated product to return\r\n        BN254.G1Point memory acc = BN254.G1Point(0, 0);\r\n        // the 2^n*p to add to the accumulated product in each iteration\r\n        BN254.G1Point memory p2n = p;\r\n        // value of most significant bit\r\n        uint16 m = 1;\r\n        // index of most significant bit\r\n        uint8 i = 0;\r\n\r\n        //loop until we reach the most significant bit\r\n        while(s >= m){\r\n            unchecked {\r\n                // if the  current bit is 1, add the 2^n*p to the accumulated product\r\n                if ((s >> i) & 1 == 1) {\r\n                    acc = plus(acc, p2n);\r\n                }\r\n                // double the 2^n*p for the next iteration\r\n                p2n = plus(p2n, p2n);\r\n\r\n                // increment the index and double the value of the most significant bit\r\n                m <<= 1;\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        // return the accumulated product\r\n        return acc;\r\n    }\r\n\r\n    /**\r\n     * @return r the product of a point on G1 and a scalar, i.e.\r\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\r\n     *         points p.\r\n     */\r\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\r\n        uint256[3] memory input;\r\n        input[0] = p.X;\r\n        input[1] = p.Y;\r\n        input[2] = s;\r\n        bool success;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 7, input, 0x60, r, 0x40)\r\n            // Use \"invalid\" to make gas estimation work\r\n            switch success\r\n            case 0 {\r\n                invalid()\r\n            }\r\n        }\r\n        require(success, \"ec-mul-failed\");\r\n    }\r\n\r\n    /**\r\n     *  @return The result of computing the pairing check\r\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\r\n     *         For example,\r\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\r\n     */\r\n    function pairing(\r\n        G1Point memory a1,\r\n        G2Point memory a2,\r\n        G1Point memory b1,\r\n        G2Point memory b2\r\n    ) internal view returns (bool) {\r\n        G1Point[2] memory p1 = [a1, b1];\r\n        G2Point[2] memory p2 = [a2, b2];\r\n\r\n        uint256[12] memory input;\r\n\r\n        for (uint256 i = 0; i < 2; i++) {\r\n            uint256 j = i * 6;\r\n            input[j + 0] = p1[i].X;\r\n            input[j + 1] = p1[i].Y;\r\n            input[j + 2] = p2[i].X[0];\r\n            input[j + 3] = p2[i].X[1];\r\n            input[j + 4] = p2[i].Y[0];\r\n            input[j + 5] = p2[i].Y[1];\r\n        }\r\n\r\n        uint256[1] memory out;\r\n        bool success;\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 8, input, mul(12, 0x20), out, 0x20)\r\n            // Use \"invalid\" to make gas estimation work\r\n            switch success\r\n            case 0 {\r\n                invalid()\r\n            }\r\n        }\r\n\r\n        require(success, \"pairing-opcode-failed\");\r\n\r\n        return out[0] != 0;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is functionally the same as pairing(), however it specifies a gas limit\r\n     *         the user can set, as a precompile may use the entire gas budget if it reverts.\r\n     */\r\n    function safePairing(\r\n        G1Point memory a1,\r\n        G2Point memory a2,\r\n        G1Point memory b1,\r\n        G2Point memory b2,\r\n        uint256 pairingGas\r\n    ) internal view returns (bool, bool) {\r\n        G1Point[2] memory p1 = [a1, b1];\r\n        G2Point[2] memory p2 = [a2, b2];\r\n\r\n        uint256[12] memory input;\r\n\r\n        for (uint256 i = 0; i < 2; i++) {\r\n            uint256 j = i * 6;\r\n            input[j + 0] = p1[i].X;\r\n            input[j + 1] = p1[i].Y;\r\n            input[j + 2] = p2[i].X[0];\r\n            input[j + 3] = p2[i].X[1];\r\n            input[j + 4] = p2[i].Y[0];\r\n            input[j + 5] = p2[i].Y[1];\r\n        }\r\n\r\n        uint256[1] memory out;\r\n        bool success;\r\n\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            success := staticcall(pairingGas, 8, input, mul(12, 0x20), out, 0x20)\r\n        }\r\n\r\n        //Out is the output of the pairing precompile, either 0 or 1 based on whether the two pairings are equal.\r\n        //Success is true if the precompile actually goes through (aka all inputs are valid)\r\n\r\n        return (success, out[0] != 0);\r\n    }\r\n\r\n    /// @return hashedG1 the keccak256 hash of the G1 Point\r\n    /// @dev used for BLS signatures\r\n    function hashG1Point(BN254.G1Point memory pk) internal pure returns (bytes32 hashedG1) {\r\n        assembly {\r\n            mstore(0, mload(pk))\r\n            mstore(0x20, mload(add(0x20, pk)))\r\n            hashedG1 := keccak256(0, 0x40)\r\n        }\r\n    }\r\n\r\n    /// @return the keccak256 hash of the G2 Point\r\n    /// @dev used for BLS signatures\r\n    function hashG2Point(\r\n        BN254.G2Point memory pk\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(pk.X[0], pk.X[1], pk.Y[0], pk.Y[1]));\r\n    }\r\n\r\n    /**\r\n     * @notice adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol\r\n     */\r\n    function hashToG1(bytes32 _x) internal view returns (G1Point memory) {\r\n        uint256 beta = 0;\r\n        uint256 y = 0;\r\n\r\n        uint256 x = uint256(_x) % FP_MODULUS;\r\n\r\n        while (true) {\r\n            (beta, y) = findYFromX(x);\r\n\r\n            // y^2 == beta\r\n            if( beta == mulmod(y, y, FP_MODULUS) ) {\r\n                return G1Point(x, y);\r\n            }\r\n\r\n            x = addmod(x, 1, FP_MODULUS);\r\n        }\r\n        return G1Point(0, 0);\r\n    }\r\n\r\n    /**\r\n     * Given X, find Y\r\n     *\r\n     *   where y = sqrt(x^3 + b)\r\n     *\r\n     * Returns: (x^3 + b), y\r\n     */\r\n    function findYFromX(uint256 x) internal view returns (uint256, uint256) {\r\n        // beta = (x^3 + b) % p\r\n        uint256 beta = addmod(mulmod(mulmod(x, x, FP_MODULUS), x, FP_MODULUS), 3, FP_MODULUS);\r\n\r\n        // y^2 = x^3 + b\r\n        // this acts like: y = sqrt(beta) = beta^((p+1) / 4)\r\n        uint256 y = expMod(beta, 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52, FP_MODULUS);\r\n\r\n        return (beta, y);\r\n    }\r\n\r\n    function expMod(uint256 _base, uint256 _exponent, uint256 _modulus) internal view returns (uint256 retval) {\r\n        bool success;\r\n        uint256[1] memory output;\r\n        uint[6] memory input;\r\n        input[0] = 0x20; // baseLen = new(big.Int).SetBytes(getData(input, 0, 32))\r\n        input[1] = 0x20; // expLen  = new(big.Int).SetBytes(getData(input, 32, 32))\r\n        input[2] = 0x20; // modLen  = new(big.Int).SetBytes(getData(input, 64, 32))\r\n        input[3] = _base;\r\n        input[4] = _exponent;\r\n        input[5] = _modulus;\r\n        assembly {\r\n            success := staticcall(sub(gas(), 2000), 5, input, 0xc0, output, 0x20)\r\n            // Use \"invalid\" to make gas estimation work\r\n            switch success\r\n            case 0 {\r\n                invalid()\r\n            }\r\n        }\r\n        require(success, \"BN254.expMod: call failure\");\r\n        return output[0];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Minimal interface for a registry that keeps track of aggregate operator public keys across many quorums.\r\n * @author Layr Labs, Inc.\r\n */\r\ninterface IBLSApkRegistry is IRegistry {\r\n    // STRUCTS\r\n    /// @notice Data structure used to track the history of the Aggregate Public Key of all operators\r\n    struct ApkUpdate {\r\n        // first 24 bytes of keccak256(apk_x0, apk_x1, apk_y0, apk_y1)\r\n        bytes24 apkHash;\r\n        // block number at which the update occurred\r\n        uint32 updateBlockNumber;\r\n        // block number at which the next update occurred\r\n        uint32 nextUpdateBlockNumber;\r\n    }\r\n\r\n    /**\r\n     * @notice Struct used when registering a new public key\r\n     * @param pubkeyRegistrationSignature is the registration message signed by the private key of the operator\r\n     * @param pubkeyG1 is the corresponding G1 public key of the operator \r\n     * @param pubkeyG2 is the corresponding G2 public key of the operator\r\n     */     \r\n    struct PubkeyRegistrationParams {\r\n        BN254.G1Point pubkeyRegistrationSignature;\r\n        BN254.G1Point pubkeyG1;\r\n        BN254.G2Point pubkeyG2;\r\n    }\r\n\r\n    // EVENTS\r\n    /// @notice Emitted when `operator` registers with the public keys `pubkeyG1` and `pubkeyG2`.\r\n    event NewPubkeyRegistration(address indexed operator, BN254.G1Point pubkeyG1, BN254.G2Point pubkeyG2);\r\n\r\n    // @notice Emitted when a new operator pubkey is registered for a set of quorums\r\n    event OperatorAddedToQuorums(\r\n        address operator,\r\n        bytes32 operatorId,\r\n        bytes quorumNumbers\r\n    );\r\n\r\n    // @notice Emitted when an operator pubkey is removed from a set of quorums\r\n    event OperatorRemovedFromQuorums(\r\n        address operator, \r\n        bytes32 operatorId,\r\n        bytes quorumNumbers\r\n    );\r\n\r\n    /**\r\n     * @notice Registers the `operator`'s pubkey for the specified `quorumNumbers`.\r\n     * @param operator The address of the operator to register.\r\n     * @param quorumNumbers The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already registered\r\n     */\r\n    function registerOperator(address operator, bytes calldata quorumNumbers) external;\r\n\r\n    /**\r\n     * @notice Deregisters the `operator`'s pubkey for the specified `quorumNumbers`.\r\n     * @param operator The address of the operator to deregister.\r\n     * @param quorumNumbers The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already deregistered\r\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\r\n     */ \r\n    function deregisterOperator(address operator, bytes calldata quorumNumbers) external;\r\n    \r\n    /**\r\n     * @notice Initializes a new quorum by pushing its first apk update\r\n     * @param quorumNumber The number of the new quorum\r\n     */\r\n    function initializeQuorum(uint8 quorumNumber) external;\r\n\r\n    /**\r\n     * @notice mapping from operator address to pubkey hash.\r\n     * Returns *zero* if the `operator` has never registered, and otherwise returns the hash of the public key of the operator.\r\n     */\r\n    function operatorToPubkeyHash(address operator) external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice mapping from pubkey hash to operator address.\r\n     * Returns *zero* if no operator has ever registered the public key corresponding to `pubkeyHash`,\r\n     * and otherwise returns the (unique) registered operator who owns the BLS public key that is the preimage of `pubkeyHash`.\r\n     */\r\n    function pubkeyHashToOperator(bytes32 pubkeyHash) external view returns (address);\r\n\r\n    /**\r\n     * @notice Called by the RegistryCoordinator register an operator as the owner of a BLS public key.\r\n     * @param operator is the operator for whom the key is being registered\r\n     * @param params contains the G1 & G2 public keys of the operator, and a signature proving their ownership\r\n     * @param pubkeyRegistrationMessageHash is a hash that the operator must sign to prove key ownership\r\n     */\r\n    function registerBLSPublicKey(\r\n        address operator,\r\n        PubkeyRegistrationParams calldata params,\r\n        BN254.G1Point calldata pubkeyRegistrationMessageHash\r\n    ) external returns (bytes32 operatorId);\r\n\r\n    /**\r\n     * @notice Returns the pubkey and pubkey hash of an operator\r\n     * @dev Reverts if the operator has not registered a valid pubkey\r\n     */\r\n    function getRegisteredPubkey(address operator) external view returns (BN254.G1Point memory, bytes32);\r\n\r\n    /// @notice Returns the current APK for the provided `quorumNumber `\r\n    function getApk(uint8 quorumNumber) external view returns (BN254.G1Point memory);\r\n\r\n    /// @notice Returns the index of the quorumApk index at `blockNumber` for the provided `quorumNumber`\r\n    function getApkIndicesAtBlockNumber(bytes calldata quorumNumbers, uint256 blockNumber) external view returns(uint32[] memory);\r\n\r\n    /// @notice Returns the `ApkUpdate` struct at `index` in the list of APK updates for the `quorumNumber`\r\n    function getApkUpdateAtIndex(uint8 quorumNumber, uint256 index) external view returns (ApkUpdate memory);\r\n\r\n    /// @notice Returns the operator address for the given `pubkeyHash`\r\n    function getOperatorFromPubkeyHash(bytes32 pubkeyHash) external view returns (address);\r\n\r\n    /**\r\n     * @notice get 24 byte hash of the apk of `quorumNumber` at `blockNumber` using the provided `index`;\r\n     * called by checkSignatures in BLSSignatureChecker.sol.\r\n     * @param quorumNumber is the quorum whose ApkHash is being retrieved\r\n     * @param blockNumber is the number of the block for which the latest ApkHash will be retrieved\r\n     * @param index is the index of the apkUpdate being retrieved from the list of quorum apkUpdates in storage\r\n     */\r\n    function getApkHashAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) external view returns (bytes24);\r\n\r\n    /// @notice returns the ID used to identify the `operator` within this AVS.\r\n    /// @dev Returns zero in the event that the `operator` has never registered for the AVS\r\n    function getOperatorId(address operator) external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title Minimal interface for an `Strategy` contract.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\r\n */\r\ninterface IStrategy {\r\n    /**\r\n     * @notice Used to deposit tokens into this Strategy\r\n     * @param token is the ERC20 token being deposited\r\n     * @param amount is the amount of token being deposited\r\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\r\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\r\n     * @return newShares is the number of new shares issued at the current exchange ratio.\r\n     */\r\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\r\n     * @param recipient is the address to receive the withdrawn funds\r\n     * @param token is the ERC20 token being transferred out\r\n     * @param amountShares is the amount of shares being withdrawn\r\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\r\n     * other functions, and individual share balances are recorded in the strategyManager as well.\r\n     */\r\n    function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\r\n\r\n    /**\r\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\r\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\r\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\r\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\r\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\r\n     */\r\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\r\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\r\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\r\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\r\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\r\n     */\r\n    function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\r\n\r\n    /**\r\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\r\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\r\n     */\r\n    function userUnderlying(address user) external returns (uint256);\r\n\r\n    /**\r\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\r\n     * querying the `strategyManager` contract\r\n     */\r\n    function shares(address user) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\r\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\r\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\r\n     * @return The amount of shares corresponding to the input `amountUnderlying`\r\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\r\n     */\r\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\r\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\r\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\r\n     * @return The amount of shares corresponding to the input `amountUnderlying`\r\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\r\n     */\r\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\r\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\r\n     */\r\n    function userUnderlyingView(address user) external view returns (uint256);\r\n\r\n    /// @notice The underlying token for shares in this Strategy\r\n    function underlyingToken() external view returns (IERC20);\r\n\r\n    /// @notice The total number of extant shares in this Strategy\r\n    function totalShares() external view returns (uint256);\r\n\r\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\r\n    function explanation() external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title The interface for common signature utilities.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n */\r\ninterface ISignatureUtils {\r\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\r\n    struct SignatureWithExpiry {\r\n        // the signature itself, formatted as a single bytes object\r\n        bytes signature;\r\n        // the expiration timestamp (UTC) of the signature\r\n        uint256 expiry;\r\n    }\r\n\r\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\r\n    struct SignatureWithSaltAndExpiry {\r\n        // the signature itself, formatted as a single bytes object\r\n        bytes signature;\r\n        // the salt used to generate the signature\r\n        bytes32 salt;\r\n        // the expiration timestamp (UTC) of the signature\r\n        uint256 expiry;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface for the primary 'slashing' contract for EigenLayer.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice See the `Slasher` contract itself for implementation details.\r\n */\r\ninterface ISlasher {\r\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\r\n    struct MiddlewareTimes {\r\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\r\n        uint32 stalestUpdateBlock;\r\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\r\n        uint32 latestServeUntilBlock;\r\n    }\r\n\r\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\r\n    struct MiddlewareDetails {\r\n        // the block at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\r\n        uint32 registrationMayBeginAtBlock;\r\n        // the block before which the contract is allowed to slash the user\r\n        uint32 contractCanSlashOperatorUntilBlock;\r\n        // the block at which the middleware's view of the operator's stake was most recently updated\r\n        uint32 latestUpdateBlock;\r\n    }\r\n\r\n    /// @notice Emitted when a middleware times is added to `operator`'s array.\r\n    event MiddlewareTimesAdded(\r\n        address operator,\r\n        uint256 index,\r\n        uint32 stalestUpdateBlock,\r\n        uint32 latestServeUntilBlock\r\n    );\r\n\r\n    /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\r\n    event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\r\n\r\n    /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilBlock`.\r\n    event SlashingAbilityRevoked(\r\n        address indexed operator,\r\n        address indexed contractAddress,\r\n        uint32 contractCanSlashOperatorUntilBlock\r\n    );\r\n\r\n    /**\r\n     * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\r\n     * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\r\n     */\r\n    event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\r\n\r\n    /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within EigenLayer.\r\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\r\n\r\n    /**\r\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\r\n     * @dev Typically, this function must be called prior to registering for a middleware.\r\n     */\r\n    function optIntoSlashing(address contractAddress) external;\r\n\r\n    /**\r\n     * @notice Used for 'slashing' a certain operator.\r\n     * @param toBeFrozen The operator to be frozen.\r\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\r\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\r\n     */\r\n    function freezeOperator(address toBeFrozen) external;\r\n\r\n    /**\r\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\r\n     * @dev Callable only by the contract owner (i.e. governance).\r\n     */\r\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\r\n\r\n    /**\r\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\r\n     *         is slashable until serveUntil\r\n     * @param operator the operator whose stake update is being recorded\r\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\r\n     * @dev adds the middleware's slashing contract to the operator's linked list\r\n     */\r\n    function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) external;\r\n\r\n    /**\r\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\r\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\r\n     * @param operator the operator whose stake update is being recorded\r\n     * @param updateBlock the block for which the stake update is being recorded\r\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\r\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\r\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\r\n     *      but it is anticipated to be rare and not detrimental.\r\n     */\r\n    function recordStakeUpdate(\r\n        address operator,\r\n        uint32 updateBlock,\r\n        uint32 serveUntilBlock,\r\n        uint256 insertAfter\r\n    ) external;\r\n\r\n    /**\r\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\r\n     *         is slashable until serveUntil\r\n     * @param operator the operator whose stake update is being recorded\r\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\r\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\r\n     * slash `operator` once `serveUntil` is reached\r\n     */\r\n    function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) external;\r\n\r\n    /// @notice The StrategyManager contract of EigenLayer\r\n    function strategyManager() external view returns (IStrategyManager);\r\n\r\n    /// @notice The DelegationManager contract of EigenLayer\r\n    function delegation() external view returns (IDelegationManager);\r\n\r\n    /**\r\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\r\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\r\n     * and the staker's status is reset (to 'unfrozen').\r\n     * @param staker The staker of interest.\r\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\r\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\r\n     */\r\n    function isFrozen(address staker) external view returns (bool);\r\n\r\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\r\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\r\n\r\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\r\n    function contractCanSlashOperatorUntilBlock(\r\n        address operator,\r\n        address serviceContract\r\n    ) external view returns (uint32);\r\n\r\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\r\n    function latestUpdateBlock(address operator, address serviceContract) external view returns (uint32);\r\n\r\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\r\n    function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\r\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\r\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\r\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\r\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\r\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\r\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\r\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\r\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\r\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\r\n     */\r\n    function canWithdraw(\r\n        address operator,\r\n        uint32 withdrawalStartBlock,\r\n        uint256 middlewareTimesIndex\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * operator =>\r\n     *  [\r\n     *      (\r\n     *          the least recent update block of all of the middlewares it's serving/served,\r\n     *          latest time that the stake bonded at that update needed to serve until\r\n     *      )\r\n     *  ]\r\n     */\r\n    function operatorToMiddlewareTimes(\r\n        address operator,\r\n        uint256 arrayIndex\r\n    ) external view returns (MiddlewareTimes memory);\r\n\r\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\r\n    function middlewareTimesLength(address operator) external view returns (uint256);\r\n\r\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\r\n    function getMiddlewareTimesIndexStalestUpdateBlock(address operator, uint32 index) external view returns (uint32);\r\n\r\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\r\n    function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) external view returns (uint32);\r\n\r\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\r\n    function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\r\n\r\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\r\n    function operatorWhitelistedContractsLinkedListEntry(\r\n        address operator,\r\n        address node\r\n    ) external view returns (bool, uint256, uint256);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n// \u250f\u2501\u2501\u2501\u2513\u2501\u250f\u2513\u2501\u250f\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\r\n// \u2503\u250f\u2501\u2501\u251b\u250f\u251b\u2517\u2513\u2503\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2517\u2513\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\r\n// \u2503\u2517\u2501\u2501\u2513\u2517\u2513\u250f\u251b\u2503\u2517\u2501\u2513\u2517\u251b\u250f\u251b\u2503\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2513\u2517\u2513\u250f\u251b\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2517\u251b\u250f\u2501\u2501\u2513\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2513\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2517\u2513\u250f\u251b\r\n// \u2503\u250f\u2501\u2501\u251b\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u250f\u2501\u251b\u250f\u251b\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u2501\u2501\u252b\u2523\u252b\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u250f\u2513\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u251b\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2501\u251b\u2501\u2503\u2503\u2501\r\n// \u2503\u2517\u2501\u2501\u2513\u2501\u2503\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u250f\u2513\u2503\u2517\u2501\u251b\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u251b\u2503\u2503\u2503\u2501\u252b\u2503\u2517\u251b\u2503\u2503\u2517\u251b\u2503\u2523\u2501\u2501\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u251b\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u2503\u2517\u251b\u2517\u2513\u2503\u2517\u2501\u2513\u2501\u2503\u2517\u2513\r\n// \u2517\u2501\u2501\u2501\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2503\u250f\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u2501\u251b\r\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2517\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\r\n\r\n// This interface is designed to be compatible with the Vyper version.\r\n/// @notice This is the Ethereum 2.0 deposit contract interface.\r\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\r\ninterface IETHPOSDeposit {\r\n    /// @notice A processed deposit event.\r\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\r\n\r\n    /// @notice Submit a Phase 0 DepositData object.\r\n    /// @param pubkey A BLS12-381 public key.\r\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\r\n    /// @param signature A BLS12-381 signature.\r\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\r\n    /// Used as a protection against malformed input.\r\n    function deposit(\r\n        bytes calldata pubkey,\r\n        bytes calldata withdrawal_credentials,\r\n        bytes calldata signature,\r\n        bytes32 deposit_data_root\r\n    ) external payable;\r\n\r\n    /// @notice Query the current deposit root hash.\r\n    /// @return The deposit root hash.\r\n    function get_deposit_root() external view returns (bytes32);\r\n\r\n    /// @notice Query the current deposit count.\r\n    /// @return The deposit count encoded as a little endian 64-bit number.\r\n    function get_deposit_count() external view returns (bytes memory);\r\n}\r\n\r\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The tree and the proofs can be generated using our\r\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n * You will find a quickstart guide in the readme.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\r\n * against this attack out of the box.\r\n */\r\nlibrary Merkle {\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\r\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\r\n     *\r\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\r\n     */\r\n    function verifyInclusionKeccak(\r\n        bytes memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf,\r\n        uint256 index\r\n    ) internal pure returns (bool) {\r\n        return processInclusionProofKeccak(proof, leaf, index) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\r\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\r\n     *\r\n     * _Available since v4.4._\r\n     *\r\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\r\n     */\r\n    function processInclusionProofKeccak(\r\n        bytes memory proof,\r\n        bytes32 leaf,\r\n        uint256 index\r\n    ) internal pure returns (bytes32) {\r\n        require(\r\n            proof.length != 0 && proof.length % 32 == 0,\r\n            \"Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32\"\r\n        );\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 32; i <= proof.length; i += 32) {\r\n            if (index % 2 == 0) {\r\n                // if ith bit of index is 0, then computedHash is a left sibling\r\n                assembly {\r\n                    mstore(0x00, computedHash)\r\n                    mstore(0x20, mload(add(proof, i)))\r\n                    computedHash := keccak256(0x00, 0x40)\r\n                    index := div(index, 2)\r\n                }\r\n            } else {\r\n                // if ith bit of index is 1, then computedHash is a right sibling\r\n                assembly {\r\n                    mstore(0x00, mload(add(proof, i)))\r\n                    mstore(0x20, computedHash)\r\n                    computedHash := keccak256(0x00, 0x40)\r\n                    index := div(index, 2)\r\n                }\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\r\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\r\n     *\r\n     * Note this is for a Merkle tree using the sha256 hash function\r\n     */\r\n    function verifyInclusionSha256(\r\n        bytes memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf,\r\n        uint256 index\r\n    ) internal view returns (bool) {\r\n        return processInclusionProofSha256(proof, leaf, index) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\r\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\r\n     *\r\n     * _Available since v4.4._\r\n     *\r\n     * Note this is for a Merkle tree using the sha256 hash function\r\n     */\r\n    function processInclusionProofSha256(\r\n        bytes memory proof,\r\n        bytes32 leaf,\r\n        uint256 index\r\n    ) internal view returns (bytes32) {\r\n        require(\r\n            proof.length != 0 && proof.length % 32 == 0,\r\n            \"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\"\r\n        );\r\n        bytes32[1] memory computedHash = [leaf];\r\n        for (uint256 i = 32; i <= proof.length; i += 32) {\r\n            if (index % 2 == 0) {\r\n                // if ith bit of index is 0, then computedHash is a left sibling\r\n                assembly {\r\n                    mstore(0x00, mload(computedHash))\r\n                    mstore(0x20, mload(add(proof, i)))\r\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\r\n                        revert(0, 0)\r\n                    }\r\n                    index := div(index, 2)\r\n                }\r\n            } else {\r\n                // if ith bit of index is 1, then computedHash is a right sibling\r\n                assembly {\r\n                    mstore(0x00, mload(add(proof, i)))\r\n                    mstore(0x20, mload(computedHash))\r\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\r\n                        revert(0, 0)\r\n                    }\r\n                    index := div(index, 2)\r\n                }\r\n            }\r\n        }\r\n        return computedHash[0];\r\n    }\r\n\r\n    /**\r\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\r\n     @param leaves the leaves of the merkle tree\r\n     @return The computed Merkle root of the tree.\r\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\r\n     */\r\n    function merkleizeSha256(bytes32[] memory leaves) internal pure returns (bytes32) {\r\n        //there are half as many nodes in the layer above the leaves\r\n        uint256 numNodesInLayer = leaves.length / 2;\r\n        //create a layer to store the internal nodes\r\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\r\n        //fill the layer with the pairwise hashes of the leaves\r\n        for (uint256 i = 0; i < numNodesInLayer; i++) {\r\n            layer[i] = sha256(abi.encodePacked(leaves[2 * i], leaves[2 * i + 1]));\r\n        }\r\n        //the next layer above has half as many nodes\r\n        numNodesInLayer /= 2;\r\n        //while we haven't computed the root\r\n        while (numNodesInLayer != 0) {\r\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\r\n            for (uint256 i = 0; i < numNodesInLayer; i++) {\r\n                layer[i] = sha256(abi.encodePacked(layer[2 * i], layer[2 * i + 1]));\r\n            }\r\n            //the next layer above has half as many nodes\r\n            numNodesInLayer /= 2;\r\n        }\r\n        //the first node in the layer is the root\r\n        return layer[0];\r\n    }\r\n}\r\n\r\nlibrary Endian {\r\n    /**\r\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\r\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\r\n     * @return n The big endian-formatted uint64\r\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\r\n     * through a right-shift/shr operation.\r\n     */\r\n    function fromLittleEndianUint64(bytes32 lenum) internal pure returns (uint64 n) {\r\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\r\n        n = uint64(uint256(lenum >> 192));\r\n        return\r\n            (n >> 56) |\r\n            ((0x00FF000000000000 & n) >> 40) |\r\n            ((0x0000FF0000000000 & n) >> 24) |\r\n            ((0x000000FF00000000 & n) >> 8) |\r\n            ((0x00000000FF000000 & n) << 8) |\r\n            ((0x0000000000FF0000 & n) << 24) |\r\n            ((0x000000000000FF00 & n) << 40) |\r\n            ((0x00000000000000FF & n) << 56);\r\n    }\r\n}\r\n\r\n//Utility library for parsing and PHASE0 beacon chain block headers\r\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\r\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\r\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\r\nlibrary BeaconChainProofs {\r\n    // constants are the number of fields and the heights of the different merkle trees used in merkleizing beacon chain containers\r\n    uint256 internal constant BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT = 3;\r\n\r\n    uint256 internal constant BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT = 4;\r\n\r\n    uint256 internal constant BEACON_STATE_FIELD_TREE_HEIGHT = 5;\r\n\r\n    uint256 internal constant VALIDATOR_FIELD_TREE_HEIGHT = 3;\r\n\r\n    //Note: changed in the deneb hard fork from 4->5\r\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_DENEB = 5;\r\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_CAPELLA = 4;\r\n\r\n    // SLOTS_PER_HISTORICAL_ROOT = 2**13, so tree height is 13\r\n    uint256 internal constant BLOCK_ROOTS_TREE_HEIGHT = 13;\r\n\r\n    //HISTORICAL_ROOTS_LIMIT = 2**24, so tree height is 24\r\n    uint256 internal constant HISTORICAL_SUMMARIES_TREE_HEIGHT = 24;\r\n\r\n    //Index of block_summary_root in historical_summary container\r\n    uint256 internal constant BLOCK_SUMMARY_ROOT_INDEX = 0;\r\n\r\n    // tree height for hash tree of an individual withdrawal container\r\n    uint256 internal constant WITHDRAWAL_FIELD_TREE_HEIGHT = 2;\r\n\r\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\r\n\r\n    // MAX_WITHDRAWALS_PER_PAYLOAD = 2**4, making tree height = 4\r\n    uint256 internal constant WITHDRAWALS_TREE_HEIGHT = 4;\r\n\r\n    //in beacon block body https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconblockbody\r\n    uint256 internal constant EXECUTION_PAYLOAD_INDEX = 9;\r\n\r\n    // in beacon block header https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\r\n    uint256 internal constant SLOT_INDEX = 0;\r\n    uint256 internal constant STATE_ROOT_INDEX = 3;\r\n    uint256 internal constant BODY_ROOT_INDEX = 4;\r\n    // in beacon state https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconstate\r\n    uint256 internal constant VALIDATOR_TREE_ROOT_INDEX = 11;\r\n    uint256 internal constant HISTORICAL_SUMMARIES_INDEX = 27;\r\n\r\n    // in validator https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\r\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\r\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\r\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\r\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\r\n\r\n    // in execution payload header\r\n    uint256 internal constant TIMESTAMP_INDEX = 9;\r\n\r\n    //in execution payload\r\n    uint256 internal constant WITHDRAWALS_INDEX = 14;\r\n\r\n    // in withdrawal\r\n    uint256 internal constant WITHDRAWAL_VALIDATOR_INDEX_INDEX = 1;\r\n    uint256 internal constant WITHDRAWAL_VALIDATOR_AMOUNT_INDEX = 3;\r\n\r\n    //Misc Constants\r\n\r\n    /// @notice The number of slots each epoch in the beacon chain\r\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\r\n\r\n    /// @notice The number of seconds in a slot in the beacon chain\r\n    uint64 internal constant SECONDS_PER_SLOT = 12;\r\n\r\n    /// @notice Number of seconds per epoch: 384 == 32 slots/epoch * 12 seconds/slot \r\n    uint64 internal constant SECONDS_PER_EPOCH = SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\r\n\r\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\r\n\r\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a partial/full withdrawal\r\n    struct WithdrawalProof {\r\n        bytes withdrawalProof;\r\n        bytes slotProof;\r\n        bytes executionPayloadProof;\r\n        bytes timestampProof;\r\n        bytes historicalSummaryBlockRootProof;\r\n        uint64 blockRootIndex;\r\n        uint64 historicalSummaryIndex;\r\n        uint64 withdrawalIndex;\r\n        bytes32 blockRoot;\r\n        bytes32 slotRoot;\r\n        bytes32 timestampRoot;\r\n        bytes32 executionPayloadRoot;\r\n    }\r\n\r\n    /// @notice This struct contains the root and proof for verifying the state root against the oracle block root\r\n    struct StateRootProof {\r\n        bytes32 beaconStateRoot;\r\n        bytes proof;\r\n    }\r\n\r\n    /**\r\n     * @notice This function verifies merkle proofs of the fields of a certain validator against a beacon chain state root\r\n     * @param validatorIndex the index of the proven validator\r\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\r\n     * @param validatorFieldsProof is the data used in proving the validator's fields\r\n     * @param validatorFields the claimed fields of the validator\r\n     */\r\n    function verifyValidatorFields(\r\n        bytes32 beaconStateRoot,\r\n        bytes32[] calldata validatorFields,\r\n        bytes calldata validatorFieldsProof,\r\n        uint40 validatorIndex\r\n    ) internal view {\r\n        require(\r\n            validatorFields.length == 2 ** VALIDATOR_FIELD_TREE_HEIGHT,\r\n            \"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\"\r\n        );\r\n\r\n        /**\r\n         * Note: the length of the validator merkle proof is BeaconChainProofs.VALIDATOR_TREE_HEIGHT + 1.\r\n         * There is an additional layer added by hashing the root with the length of the validator list\r\n         */\r\n        require(\r\n            validatorFieldsProof.length == 32 * ((VALIDATOR_TREE_HEIGHT + 1) + BEACON_STATE_FIELD_TREE_HEIGHT),\r\n            \"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\"\r\n        );\r\n        uint256 index = (VALIDATOR_TREE_ROOT_INDEX << (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\r\n        // merkleize the validatorFields to get the leaf to prove\r\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\r\n\r\n        // verify the proof of the validatorRoot against the beaconStateRoot\r\n        require(\r\n            Merkle.verifyInclusionSha256({\r\n                proof: validatorFieldsProof,\r\n                root: beaconStateRoot,\r\n                leaf: validatorRoot,\r\n                index: index\r\n            }),\r\n            \"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice This function verifies the latestBlockHeader against the state root. the latestBlockHeader is\r\n     * a tracked in the beacon state.\r\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\r\n     * @param stateRootProof is the provided merkle proof\r\n     * @param latestBlockRoot is hashtree root of the latest block header in the beacon state\r\n     */\r\n    function verifyStateRootAgainstLatestBlockRoot(\r\n        bytes32 latestBlockRoot,\r\n        bytes32 beaconStateRoot,\r\n        bytes calldata stateRootProof\r\n    ) internal view {\r\n        require(\r\n            stateRootProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\r\n            \"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length\"\r\n        );\r\n        //Next we verify the slot against the blockRoot\r\n        require(\r\n            Merkle.verifyInclusionSha256({\r\n                proof: stateRootProof,\r\n                root: latestBlockRoot,\r\n                leaf: beaconStateRoot,\r\n                index: STATE_ROOT_INDEX\r\n            }),\r\n            \"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice This function verifies the slot and the withdrawal fields for a given withdrawal\r\n     * @param withdrawalProof is the provided set of merkle proofs\r\n     * @param withdrawalFields is the serialized withdrawal container to be proven\r\n     */\r\n    function verifyWithdrawal(\r\n        bytes32 beaconStateRoot,\r\n        bytes32[] calldata withdrawalFields,\r\n        WithdrawalProof calldata withdrawalProof,\r\n        uint64 denebForkTimestamp\r\n    ) internal view {\r\n        require(\r\n            withdrawalFields.length == 2 ** WITHDRAWAL_FIELD_TREE_HEIGHT,\r\n            \"BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length\"\r\n        );\r\n\r\n        require(\r\n            withdrawalProof.blockRootIndex < 2 ** BLOCK_ROOTS_TREE_HEIGHT,\r\n            \"BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large\"\r\n        );\r\n        require(\r\n            withdrawalProof.withdrawalIndex < 2 ** WITHDRAWALS_TREE_HEIGHT,\r\n            \"BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large\"\r\n        );\r\n\r\n        require(\r\n            withdrawalProof.historicalSummaryIndex < 2 ** HISTORICAL_SUMMARIES_TREE_HEIGHT,\r\n            \"BeaconChainProofs.verifyWithdrawal: historicalSummaryIndex is too large\"\r\n        );\r\n\r\n        //Note: post deneb hard fork, the number of exection payload header fields increased from 15->17, adding an extra level to the tree height\r\n        uint256 executionPayloadHeaderFieldTreeHeight = (getWithdrawalTimestamp(withdrawalProof) < denebForkTimestamp) ? EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_CAPELLA : EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_DENEB;\r\n        require(\r\n            withdrawalProof.withdrawalProof.length ==\r\n                32 * (executionPayloadHeaderFieldTreeHeight + WITHDRAWALS_TREE_HEIGHT + 1),\r\n            \"BeaconChainProofs.verifyWithdrawal: withdrawalProof has incorrect length\"\r\n        );\r\n        require(\r\n            withdrawalProof.executionPayloadProof.length ==\r\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT + BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT),\r\n            \"BeaconChainProofs.verifyWithdrawal: executionPayloadProof has incorrect length\"\r\n        );\r\n        require(\r\n            withdrawalProof.slotProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\r\n            \"BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length\"\r\n        );\r\n        require(\r\n            withdrawalProof.timestampProof.length == 32 * (executionPayloadHeaderFieldTreeHeight),\r\n            \"BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length\"\r\n        );\r\n\r\n        require(\r\n            withdrawalProof.historicalSummaryBlockRootProof.length ==\r\n                32 *\r\n                    (BEACON_STATE_FIELD_TREE_HEIGHT +\r\n                        (HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\r\n                        1 +\r\n                        (BLOCK_ROOTS_TREE_HEIGHT)),\r\n            \"BeaconChainProofs.verifyWithdrawal: historicalSummaryBlockRootProof has incorrect length\"\r\n        );\r\n        /**\r\n         * Note: Here, the \"1\" in \"1 + (BLOCK_ROOTS_TREE_HEIGHT)\" signifies that extra step of choosing the \"block_root_summary\" within the individual\r\n         * \"historical_summary\". Everywhere else it signifies merkelize_with_mixin, where the length of an array is hashed with the root of the array,\r\n         * but not here.\r\n         */\r\n        uint256 historicalBlockHeaderIndex = (HISTORICAL_SUMMARIES_INDEX <<\r\n            ((HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) + 1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\r\n            (uint256(withdrawalProof.historicalSummaryIndex) << (1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\r\n            (BLOCK_SUMMARY_ROOT_INDEX << (BLOCK_ROOTS_TREE_HEIGHT)) |\r\n            uint256(withdrawalProof.blockRootIndex);\r\n\r\n        require(\r\n            Merkle.verifyInclusionSha256({\r\n                proof: withdrawalProof.historicalSummaryBlockRootProof,\r\n                root: beaconStateRoot,\r\n                leaf: withdrawalProof.blockRoot,\r\n                index: historicalBlockHeaderIndex\r\n            }),\r\n            \"BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof\"\r\n        );\r\n\r\n        //Next we verify the slot against the blockRoot\r\n        require(\r\n            Merkle.verifyInclusionSha256({\r\n                proof: withdrawalProof.slotProof,\r\n                root: withdrawalProof.blockRoot,\r\n                leaf: withdrawalProof.slotRoot,\r\n                index: SLOT_INDEX\r\n            }),\r\n            \"BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof\"\r\n        );\r\n\r\n        {\r\n            // Next we verify the executionPayloadRoot against the blockRoot\r\n            uint256 executionPayloadIndex = (BODY_ROOT_INDEX << (BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT)) |\r\n                EXECUTION_PAYLOAD_INDEX;\r\n            require(\r\n                Merkle.verifyInclusionSha256({\r\n                    proof: withdrawalProof.executionPayloadProof,\r\n                    root: withdrawalProof.blockRoot,\r\n                    leaf: withdrawalProof.executionPayloadRoot,\r\n                    index: executionPayloadIndex\r\n                }),\r\n                \"BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof\"\r\n            );\r\n        }\r\n\r\n        // Next we verify the timestampRoot against the executionPayload root\r\n        require(\r\n            Merkle.verifyInclusionSha256({\r\n                proof: withdrawalProof.timestampProof,\r\n                root: withdrawalProof.executionPayloadRoot,\r\n                leaf: withdrawalProof.timestampRoot,\r\n                index: TIMESTAMP_INDEX\r\n            }),\r\n            \"BeaconChainProofs.verifyWithdrawal: Invalid timestamp merkle proof\"\r\n        );\r\n\r\n        {\r\n            /**\r\n             * Next we verify the withdrawal fields against the executionPayloadRoot:\r\n             * First we compute the withdrawal_index, then we merkleize the \r\n             * withdrawalFields container to calculate the withdrawalRoot.\r\n             *\r\n             * Note: Merkleization of the withdrawals root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\r\n             * the array.  Thus we shift the WITHDRAWALS_INDEX over by WITHDRAWALS_TREE_HEIGHT + 1 and not just WITHDRAWALS_TREE_HEIGHT.\r\n             */\r\n            uint256 withdrawalIndex = (WITHDRAWALS_INDEX << (WITHDRAWALS_TREE_HEIGHT + 1)) |\r\n                uint256(withdrawalProof.withdrawalIndex);\r\n            bytes32 withdrawalRoot = Merkle.merkleizeSha256(withdrawalFields);\r\n            require(\r\n                Merkle.verifyInclusionSha256({\r\n                    proof: withdrawalProof.withdrawalProof,\r\n                    root: withdrawalProof.executionPayloadRoot,\r\n                    leaf: withdrawalRoot,\r\n                    index: withdrawalIndex\r\n                }),\r\n                \"BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice This function replicates the ssz hashing of a validator's pubkey, outlined below:\r\n     *  hh := ssz.NewHasher()\r\n     *  hh.PutBytes(validatorPubkey[:])\r\n     *  validatorPubkeyHash := hh.Hash()\r\n     *  hh.Reset()\r\n     */\r\n    function hashValidatorBLSPubkey(bytes memory validatorPubkey) internal pure returns (bytes32 pubkeyHash) {\r\n        require(validatorPubkey.length == 48, \"Input should be 48 bytes in length\");\r\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve the withdrawal timestamp\r\n     */\r\n    function getWithdrawalTimestamp(WithdrawalProof memory withdrawalProof) internal pure returns (uint64) {\r\n        return\r\n            Endian.fromLittleEndianUint64(withdrawalProof.timestampRoot);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts the withdrawal's slot to an epoch\r\n     */\r\n    function getWithdrawalEpoch(WithdrawalProof memory withdrawalProof) internal pure returns (uint64) {\r\n        return\r\n            Endian.fromLittleEndianUint64(withdrawalProof.slotRoot) / SLOTS_PER_EPOCH;\r\n    }\r\n\r\n    /**\r\n     * Indices for validator fields (refer to consensus specs):\r\n     * 0: pubkey\r\n     * 1: withdrawal credentials\r\n     * 2: effective balance\r\n     * 3: slashed?\r\n     * 4: activation elligibility epoch\r\n     * 5: activation epoch\r\n     * 6: exit epoch\r\n     * 7: withdrawable epoch\r\n     */\r\n\r\n    /**\r\n     * @dev Retrieves a validator's pubkey hash\r\n     */\r\n    function getPubkeyHash(bytes32[] memory validatorFields) internal pure returns (bytes32) {\r\n        return \r\n            validatorFields[VALIDATOR_PUBKEY_INDEX];\r\n    }\r\n\r\n    function getWithdrawalCredentials(bytes32[] memory validatorFields) internal pure returns (bytes32) {\r\n        return\r\n            validatorFields[VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX];\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves a validator's effective balance (in gwei)\r\n     */\r\n    function getEffectiveBalanceGwei(bytes32[] memory validatorFields) internal pure returns (uint64) {\r\n        return \r\n            Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_BALANCE_INDEX]);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves a validator's withdrawable epoch\r\n     */\r\n    function getWithdrawableEpoch(bytes32[] memory validatorFields) internal pure returns (uint64) {\r\n        return \r\n            Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_WITHDRAWABLE_EPOCH_INDEX]);\r\n    }\r\n\r\n    /**\r\n     * Indices for withdrawal fields (refer to consensus specs):\r\n     * 0: withdrawal index\r\n     * 1: validator index\r\n     * 2: execution address\r\n     * 3: withdrawal amount\r\n     */\r\n\r\n    /**\r\n     * @dev Retrieves a withdrawal's validator index\r\n     */\r\n    function getValidatorIndex(bytes32[] memory withdrawalFields) internal pure returns (uint40) {\r\n        return \r\n            uint40(Endian.fromLittleEndianUint64(withdrawalFields[WITHDRAWAL_VALIDATOR_INDEX_INDEX]));\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves a withdrawal's withdrawal amount (in gwei)\r\n     */\r\n    function getWithdrawalAmountGwei(bytes32[] memory withdrawalFields) internal pure returns (uint64) {\r\n        return\r\n            Endian.fromLittleEndianUint64(withdrawalFields[WITHDRAWAL_VALIDATOR_AMOUNT_INDEX]);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Interface for the BeaconStateOracle contract.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n */\r\ninterface IBeaconChainOracle {\r\n    /// @notice The block number to state root mapping.\r\n    function timestampToBlockRoot(uint256 timestamp) external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice The main functionalities are:\r\n * - creating new ETH validators with their withdrawal credentials pointed to this contract\r\n * - proving from beacon chain state roots that withdrawal credentials are pointed to this contract\r\n * - proving from beacon chain state roots the balances of ETH validators with their withdrawal credentials\r\n *   pointed to this contract\r\n * - updating aggregate balances in the EigenPodManager\r\n * - withdrawing eth when withdrawals are initiated\r\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\r\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\r\n */\r\ninterface IEigenPod {\r\n    enum VALIDATOR_STATUS {\r\n        INACTIVE, // doesnt exist\r\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\r\n        WITHDRAWN // withdrawn from the Beacon Chain\r\n    }\r\n\r\n    struct ValidatorInfo {\r\n        // index of the validator in the beacon chain\r\n        uint64 validatorIndex;\r\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\r\n        uint64 restakedBalanceGwei;\r\n        //timestamp of the validator's most recent balance update\r\n        uint64 mostRecentBalanceUpdateTimestamp;\r\n        // status of the validator\r\n        VALIDATOR_STATUS status;\r\n    }\r\n\r\n    /**\r\n     * @notice struct used to store amounts related to proven withdrawals in memory. Used to help\r\n     * manage stack depth and optimize the number of external calls, when batching withdrawal operations.\r\n     */\r\n    struct VerifiedWithdrawal {\r\n        // amount to send to a podOwner from a proven withdrawal\r\n        uint256 amountToSendGwei;\r\n        // difference in shares to be recorded in the eigenPodManager, as a result of the withdrawal\r\n        int256 sharesDeltaGwei;\r\n    }\r\n\r\n    enum PARTIAL_WITHDRAWAL_CLAIM_STATUS {\r\n        REDEEMED,\r\n        PENDING,\r\n        FAILED\r\n    }\r\n\r\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\r\n    event EigenPodStaked(bytes pubkey);\r\n\r\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\r\n    event ValidatorRestaked(uint40 validatorIndex);\r\n\r\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\r\n    //  is the validator's balance that is credited on EigenLayer.\r\n    event ValidatorBalanceUpdated(uint40 validatorIndex, uint64 balanceTimestamp, uint64 newValidatorBalanceGwei);\r\n\r\n    /// @notice Emitted when an ETH validator is prove to have withdrawn from the beacon chain\r\n    event FullWithdrawalRedeemed(\r\n        uint40 validatorIndex,\r\n        uint64 withdrawalTimestamp,\r\n        address indexed recipient,\r\n        uint64 withdrawalAmountGwei\r\n    );\r\n\r\n    /// @notice Emitted when a partial withdrawal claim is successfully redeemed\r\n    event PartialWithdrawalRedeemed(\r\n        uint40 validatorIndex,\r\n        uint64 withdrawalTimestamp,\r\n        address indexed recipient,\r\n        uint64 partialWithdrawalAmountGwei\r\n    );\r\n\r\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\r\n    event RestakedBeaconChainETHWithdrawn(address indexed recipient, uint256 amount);\r\n\r\n    /// @notice Emitted when podOwner enables restaking\r\n    event RestakingActivated(address indexed podOwner);\r\n\r\n    /// @notice Emitted when ETH is received via the `receive` fallback\r\n    event NonBeaconChainETHReceived(uint256 amountReceived);\r\n\r\n    /// @notice Emitted when ETH that was previously received via the `receive` fallback is withdrawn\r\n    event NonBeaconChainETHWithdrawn(address indexed recipient, uint256 amountWithdrawn);\r\n\r\n    /// @notice The max amount of eth, in gwei, that can be restaked per validator\r\n    function MAX_RESTAKED_BALANCE_GWEI_PER_VALIDATOR() external view returns (uint64);\r\n\r\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\r\n    function withdrawableRestakedExecutionLayerGwei() external view returns (uint64);\r\n\r\n    /// @notice any ETH deposited into the EigenPod contract via the `receive` fallback function\r\n    function nonBeaconChainETHBalanceWei() external view returns (uint256);\r\n\r\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\r\n    function initialize(address owner) external;\r\n\r\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\r\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\r\n\r\n    /**\r\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\r\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\r\n     * @dev The podOwner must have already proved sufficient withdrawals, so that this pod's `withdrawableRestakedExecutionLayerGwei` exceeds the\r\n     * `amountWei` input (when converted to GWEI).\r\n     * @dev Reverts if `amountWei` is not a whole Gwei amount\r\n     */\r\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amount) external;\r\n\r\n    /// @notice The single EigenPodManager for EigenLayer\r\n    function eigenPodManager() external view returns (IEigenPodManager);\r\n\r\n    /// @notice The owner of this EigenPod\r\n    function podOwner() external view returns (address);\r\n\r\n    /// @notice an indicator of whether or not the podOwner has ever \"fully restaked\" by successfully calling `verifyCorrectWithdrawalCredentials`.\r\n    function hasRestaked() external view returns (bool);\r\n\r\n    /**\r\n     * @notice The latest timestamp at which the pod owner withdrew the balance of the pod, via calling `withdrawBeforeRestaking`.\r\n     * @dev This variable is only updated when the `withdrawBeforeRestaking` function is called, which can only occur before `hasRestaked` is set to true for this pod.\r\n     * Proofs for this pod are only valid against Beacon Chain state roots corresponding to timestamps after the stored `mostRecentWithdrawalTimestamp`.\r\n     */\r\n    function mostRecentWithdrawalTimestamp() external view returns (uint64);\r\n\r\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\r\n    function validatorPubkeyHashToInfo(bytes32 validatorPubkeyHash) external view returns (ValidatorInfo memory);\r\n\r\n    /// @notice Returns the validatorInfo struct for the provided pubkey\r\n    function validatorPubkeyToInfo(bytes calldata validatorPubkey) external view returns (ValidatorInfo memory);\r\n\r\n    ///@notice mapping that tracks proven withdrawals\r\n    function provenWithdrawal(bytes32 validatorPubkeyHash, uint64 slot) external view returns (bool);\r\n\r\n    /// @notice This returns the status of a given validator\r\n    function validatorStatus(bytes32 pubkeyHash) external view returns (VALIDATOR_STATUS);\r\n\r\n    /// @notice This returns the status of a given validator pubkey\r\n    function validatorStatus(bytes calldata validatorPubkey) external view returns (VALIDATOR_STATUS);\r\n\r\n    /**\r\n     * @notice This function verifies that the withdrawal credentials of validator(s) owned by the podOwner are pointed to\r\n     * this contract. It also verifies the effective balance  of the validator.  It verifies the provided proof of the ETH validator against the beacon chain state\r\n     * root, marks the validator as 'active' in EigenLayer, and credits the restaked ETH in Eigenlayer.\r\n     * @param oracleTimestamp is the Beacon Chain timestamp whose state root the `proof` will be proven against.\r\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs\r\n     * @param withdrawalCredentialProofs is an array of proofs, where each proof proves each ETH validator's balance and withdrawal credentials\r\n     * against a beacon chain state root\r\n     * @param validatorFields are the fields of the \"Validator Container\", refer to consensus specs\r\n     * for details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\r\n     */\r\n    function verifyWithdrawalCredentials(\r\n        uint64 oracleTimestamp,\r\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\r\n        uint40[] calldata validatorIndices,\r\n        bytes[] calldata withdrawalCredentialProofs,\r\n        bytes32[][] calldata validatorFields\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice This function records an update (either increase or decrease) in the pod's balance in the StrategyManager.  \r\n               It also verifies a merkle proof of the validator's current beacon chain balance.  \r\n     * @param oracleTimestamp The oracleTimestamp whose state root the `proof` will be proven against.\r\n     *        Must be within `VERIFY_BALANCE_UPDATE_WINDOW_SECONDS` of the current block.\r\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs \r\n     * @param validatorFieldsProofs proofs against the `beaconStateRoot` for each validator in `validatorFields`\r\n     * @param validatorFields are the fields of the \"Validator Container\", refer to consensus specs\r\n     * @dev For more details on the Beacon Chain spec, see: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\r\n     */\r\n    function verifyBalanceUpdates(\r\n        uint64 oracleTimestamp,\r\n        uint40[] calldata validatorIndices,\r\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\r\n        bytes[] calldata validatorFieldsProofs,\r\n        bytes32[][] calldata validatorFields\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function records full and partial withdrawals on behalf of one of the Ethereum validators for this EigenPod\r\n     * @param oracleTimestamp is the timestamp of the oracle slot that the withdrawal is being proven against\r\n     * @param withdrawalProofs is the information needed to check the veracity of the block numbers and withdrawals being proven\r\n     * @param validatorFieldsProofs is the proof of the validator's fields' in the validator tree\r\n     * @param withdrawalFields are the fields of the withdrawals being proven\r\n     * @param validatorFields are the fields of the validators being proven\r\n     */\r\n    function verifyAndProcessWithdrawals(\r\n        uint64 oracleTimestamp,\r\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\r\n        BeaconChainProofs.WithdrawalProof[] calldata withdrawalProofs,\r\n        bytes[] calldata validatorFieldsProofs,\r\n        bytes32[][] calldata validatorFields,\r\n        bytes32[][] calldata withdrawalFields\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Called by the pod owner to activate restaking by withdrawing\r\n     * all existing ETH from the pod and preventing further withdrawals via\r\n     * \"withdrawBeforeRestaking()\"\r\n     */\r\n    function activateRestaking() external;\r\n\r\n    /// @notice Called by the pod owner to withdraw the balance of the pod when `hasRestaked` is set to false\r\n    function withdrawBeforeRestaking() external;\r\n\r\n    /// @notice Called by the pod owner to withdraw the nonBeaconChainETHBalanceWei\r\n    function withdrawNonBeaconChainETHBalanceWei(address recipient, uint256 amountToWithdraw) external;\r\n\r\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\r\n    function recoverTokens(IERC20[] memory tokenList, uint256[] memory amountsToWithdraw, address recipient) external;\r\n}\r\n\r\n/**\r\n * @title Interface for the `PauserRegistry` contract.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n */\r\ninterface IPauserRegistry {\r\n    event PauserStatusChanged(address pauser, bool canPause);\r\n\r\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\r\n    \r\n    /// @notice Mapping of addresses to whether they hold the pauser role.\r\n    function isPauser(address pauser) external view returns (bool);\r\n\r\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\r\n    function unpauser() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\r\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\r\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\r\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\r\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\r\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\r\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\r\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\r\n * 2) update the paused state to this new value\r\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\r\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\r\n */\r\n\r\ninterface IPausable {\r\n    /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\r\n    event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\r\n\r\n    /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\r\n    event Paused(address indexed account, uint256 newPausedStatus);\r\n\r\n    /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\r\n    event Unpaused(address indexed account, uint256 newPausedStatus);\r\n    \r\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\r\n    function pauserRegistry() external view returns (IPauserRegistry);\r\n\r\n    /**\r\n     * @notice This function is used to pause an EigenLayer contract's functionality.\r\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\r\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\r\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\r\n     */\r\n    function pause(uint256 newPausedStatus) external;\r\n\r\n    /**\r\n     * @notice Alias for `pause(type(uint256).max)`.\r\n     */\r\n    function pauseAll() external;\r\n\r\n    /**\r\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\r\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\r\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\r\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\r\n     */\r\n    function unpause(uint256 newPausedStatus) external;\r\n\r\n    /// @notice Returns the current paused status as a uint256.\r\n    function paused() external view returns (uint256);\r\n\r\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\r\n    function paused(uint8 index) external view returns (bool);\r\n\r\n    /// @notice Allows the unpauser to set a new pauser registry\r\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\r\n}\r\n\r\n/**\r\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n */\r\n\r\ninterface IEigenPodManager is IPausable {\r\n    /// @notice Emitted to notify the update of the beaconChainOracle address\r\n    event BeaconOracleUpdated(address indexed newOracleAddress);\r\n\r\n    /// @notice Emitted to notify the deployment of an EigenPod\r\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\r\n\r\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\r\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\r\n\r\n    /// @notice Emitted when the balance of an EigenPod is updated\r\n    event PodSharesUpdated(address indexed podOwner, int256 sharesDelta);\r\n\r\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\r\n    event BeaconChainETHWithdrawalCompleted(\r\n        address indexed podOwner,\r\n        uint256 shares,\r\n        uint96 nonce,\r\n        address delegatedAddress,\r\n        address withdrawer,\r\n        bytes32 withdrawalRoot\r\n    );\r\n\r\n    event DenebForkTimestampUpdated(uint64 newValue);\r\n\r\n    /**\r\n     * @notice Creates an EigenPod for the sender.\r\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\r\n     * @dev Returns EigenPod address \r\n     */\r\n    function createPod() external returns (address);\r\n\r\n    /**\r\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\r\n     * Also creates an EigenPod for the sender if they don't have one already.\r\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\r\n     * @param signature The validator's signature of the deposit data.\r\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\r\n     */\r\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\r\n\r\n    /**\r\n     * @notice Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager\r\n     * to ensure that delegated shares are also tracked correctly\r\n     * @param podOwner is the pod owner whose balance is being updated.\r\n     * @param sharesDelta is the change in podOwner's beaconChainETHStrategy shares\r\n     * @dev Callable only by the podOwner's EigenPod contract.\r\n     * @dev Reverts if `sharesDelta` is not a whole Gwei amount\r\n     */\r\n    function recordBeaconChainETHBalanceUpdate(address podOwner, int256 sharesDelta) external;\r\n\r\n    /**\r\n     * @notice Updates the oracle contract that provides the beacon chain state root\r\n     * @param newBeaconChainOracle is the new oracle contract being pointed to\r\n     * @dev Callable only by the owner of this contract (i.e. governance)\r\n     */\r\n    function updateBeaconChainOracle(IBeaconChainOracle newBeaconChainOracle) external;\r\n\r\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\r\n    function ownerToPod(address podOwner) external view returns (IEigenPod);\r\n\r\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\r\n    function getPod(address podOwner) external view returns (IEigenPod);\r\n\r\n    /// @notice The ETH2 Deposit Contract\r\n    function ethPOS() external view returns (IETHPOSDeposit);\r\n\r\n    /// @notice Beacon proxy to which the EigenPods point\r\n    function eigenPodBeacon() external view returns (IBeacon);\r\n\r\n    /// @notice Oracle contract that provides updates to the beacon chain's state\r\n    function beaconChainOracle() external view returns (IBeaconChainOracle);\r\n\r\n    /// @notice Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized.\r\n    function getBlockRootAtTimestamp(uint64 timestamp) external view returns (bytes32);\r\n\r\n    /// @notice EigenLayer's StrategyManager contract\r\n    function strategyManager() external view returns (IStrategyManager);\r\n\r\n    /// @notice EigenLayer's Slasher contract\r\n    function slasher() external view returns (ISlasher);\r\n\r\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\r\n    function hasPod(address podOwner) external view returns (bool);\r\n\r\n    /// @notice Returns the number of EigenPods that have been created\r\n    function numPods() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\r\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\r\n     * decrease between the pod owner queuing and completing a withdrawal.\r\n     * When the pod owner's shares would otherwise increase, this \"deficit\" is decreased first _instead_.\r\n     * Likewise, when a withdrawal is completed, this \"deficit\" is decreased and the withdrawal amount is decreased; We can think of this\r\n     * as the withdrawal \"paying off the deficit\".\r\n     */\r\n    function podOwnerShares(address podOwner) external view returns (int256);\r\n\r\n    /// @notice returns canonical, virtual beaconChainETH strategy\r\n    function beaconChainETHStrategy() external view returns (IStrategy);\r\n\r\n    /**\r\n     * @notice Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue.\r\n     * Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero.\r\n     * @dev This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to\r\n     * result in the `podOwner` incurring a \"share deficit\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive\r\n     * shares from the operator to whom the staker is delegated.\r\n     * @dev Reverts if `shares` is not a whole Gwei amount\r\n     */\r\n    function removeShares(address podOwner, uint256 shares) external;\r\n\r\n    /**\r\n     * @notice Increases the `podOwner`'s shares by `shares`, paying off deficit if possible.\r\n     * Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue\r\n     * @dev Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input\r\n     * in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)\r\n     * @dev Reverts if `shares` is not a whole Gwei amount\r\n     */\r\n    function addShares(address podOwner, uint256 shares) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address\r\n     * @dev Prioritizes decreasing the podOwner's share deficit, if they have one\r\n     * @dev Reverts if `shares` is not a whole Gwei amount\r\n     */\r\n    function withdrawSharesAsTokens(address podOwner, address destination, uint256 shares) external;\r\n\r\n    /**\r\n     * @notice the deneb hard fork timestamp used to determine which proof path to use for proving a withdrawal\r\n     */\r\n    function denebForkTimestamp() external view returns (uint64);\r\n\r\n     /**\r\n     * setting the deneb hard fork timestamp by the eigenPodManager owner\r\n     * @dev this function is designed to be called twice.  Once, it is set to type(uint64).max \r\n     * prior to the actual deneb fork timestamp being set, and then the second time it is set \r\n     * to the actual deneb fork timestamp.\r\n     */\r\n    function setDenebForkTimestamp(uint64 newDenebForkTimestamp) external;\r\n\r\n}\r\n\r\n/**\r\n * @title Interface for the primary entrypoint for funds into EigenLayer.\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice See the `StrategyManager` contract itself for implementation details.\r\n */\r\ninterface IStrategyManager {\r\n    /**\r\n     * @notice Emitted when a new deposit occurs on behalf of `staker`.\r\n     * @param staker Is the staker who is depositing funds into EigenLayer.\r\n     * @param strategy Is the strategy that `staker` has deposited into.\r\n     * @param token Is the token that `staker` deposited.\r\n     * @param shares Is the number of new shares `staker` has been granted in `strategy`.\r\n     */\r\n    event Deposit(address staker, IERC20 token, IStrategy strategy, uint256 shares);\r\n\r\n    /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\r\n    event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\r\n\r\n    /// @notice Emitted when the `strategyWhitelister` is changed\r\n    event StrategyWhitelisterChanged(address previousAddress, address newAddress);\r\n\r\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\r\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\r\n\r\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\r\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\r\n\r\n    /**\r\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\r\n     * @param strategy is the specified strategy where deposit is to be made,\r\n     * @param token is the denomination in which the deposit is to be made,\r\n     * @param amount is the amount of token to be deposited in the strategy by the staker\r\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\r\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\r\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\r\n     *\r\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\r\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\r\n     */\r\n    function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\r\n     * who must sign off on the action.\r\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\r\n     * purely to help one address deposit 'for' another.\r\n     * @param strategy is the specified strategy where deposit is to be made,\r\n     * @param token is the denomination in which the deposit is to be made,\r\n     * @param amount is the amount of token to be deposited in the strategy by the staker\r\n     * @param staker the staker that the deposited assets will be credited to\r\n     * @param expiry the timestamp at which the signature expires\r\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\r\n     * following EIP-1271 if the `staker` is a contract\r\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\r\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\r\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\r\n     * targeting stakers who may be attempting to undelegate.\r\n     * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\r\n     *\r\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\r\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\r\n     */\r\n    function depositIntoStrategyWithSignature(\r\n        IStrategy strategy,\r\n        IERC20 token,\r\n        uint256 amount,\r\n        address staker,\r\n        uint256 expiry,\r\n        bytes memory signature\r\n    ) external returns (uint256 shares);\r\n\r\n    /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\r\n    function removeShares(address staker, IStrategy strategy, uint256 shares) external;\r\n\r\n    /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\r\n    function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external;\r\n    \r\n    /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\r\n    function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external;\r\n\r\n    /// @notice Returns the current shares of `user` in `strategy`\r\n    function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @notice Get all details on the staker's deposits and corresponding shares\r\n     * @return (staker's strategies, shares in these strategies)\r\n     */\r\n    function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory);\r\n\r\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\r\n    function stakerStrategyListLength(address staker) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\r\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\r\n     * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\r\n     */\r\n    function addStrategiesToDepositWhitelist(\r\n        IStrategy[] calldata strategiesToWhitelist,\r\n        bool[] calldata thirdPartyTransfersForbiddenValues\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\r\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\r\n     */\r\n    function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\r\n\r\n    /// @notice Returns the single, central Delegation contract of EigenLayer\r\n    function delegation() external view returns (IDelegationManager);\r\n\r\n    /// @notice Returns the single, central Slasher contract of EigenLayer\r\n    function slasher() external view returns (ISlasher);\r\n\r\n    /// @notice Returns the EigenPodManager contract of EigenLayer\r\n    function eigenPodManager() external view returns (IEigenPodManager);\r\n\r\n    /// @notice Returns the address of the `strategyWhitelister`\r\n    function strategyWhitelister() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\r\n     * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\r\n     */\r\n    function thirdPartyTransfersForbidden(IStrategy strategy) external view returns (bool);\r\n\r\n// LIMITED BACKWARDS-COMPATIBILITY FOR DEPRECATED FUNCTIONALITY\r\n    // packed struct for queued withdrawals; helps deal with stack-too-deep errors\r\n    struct DeprecatedStruct_WithdrawerAndNonce {\r\n        address withdrawer;\r\n        uint96 nonce;\r\n    }\r\n\r\n    /**\r\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\r\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\r\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\r\n     * stored hash in order to confirm the integrity of the submitted data.\r\n     */\r\n    struct DeprecatedStruct_QueuedWithdrawal {\r\n        IStrategy[] strategies;\r\n        uint256[] shares;\r\n        address staker;\r\n        DeprecatedStruct_WithdrawerAndNonce withdrawerAndNonce;\r\n        uint32 withdrawalStartBlock;\r\n        address delegatedAddress;\r\n    }\r\n\r\n    function migrateQueuedWithdrawal(DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal) external returns (bool, bytes32);\r\n\r\n    function calculateWithdrawalRoot(DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal) external pure returns (bytes32);\r\n}\r\n\r\n/**\r\n * @title DelegationManager\r\n * @author Layr Labs, Inc.\r\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\r\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\r\n * - enabling anyone to register as an operator in EigenLayer\r\n * - allowing operators to specify parameters related to stakers who delegate to them\r\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\r\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\r\n */\r\ninterface IDelegationManager is ISignatureUtils {\r\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\r\n    struct OperatorDetails {\r\n        // @notice address to receive the rewards that the operator earns via serving applications built on EigenLayer.\r\n        address earningsReceiver;\r\n        /**\r\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \"forced undelegations\".\r\n         * @dev Signature verification follows these rules:\r\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\r\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\r\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \"magic value\".\r\n         */\r\n        address delegationApprover;\r\n        /**\r\n         * @notice A minimum delay -- measured in blocks -- enforced between:\r\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\r\n         * and\r\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\r\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\r\n         * then they are only allowed to either increase this value or keep it the same.\r\n         */\r\n        uint32 stakerOptOutWindowBlocks;\r\n    }\r\n\r\n    /**\r\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\r\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\r\n     */\r\n    struct StakerDelegation {\r\n        // the staker who is delegating\r\n        address staker;\r\n        // the operator being delegated to\r\n        address operator;\r\n        // the staker's nonce\r\n        uint256 nonce;\r\n        // the expiration timestamp (UTC) of the signature\r\n        uint256 expiry;\r\n    }\r\n\r\n    /**\r\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\r\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\r\n     */\r\n    struct DelegationApproval {\r\n        // the staker who is delegating\r\n        address staker;\r\n        // the operator being delegated to\r\n        address operator;\r\n        // the operator's provided salt\r\n        bytes32 salt;\r\n        // the expiration timestamp (UTC) of the signature\r\n        uint256 expiry;\r\n    }\r\n\r\n    /**\r\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\r\n     * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\r\n     * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\r\n     */\r\n    struct Withdrawal {\r\n        // The address that originated the Withdrawal\r\n        address staker;\r\n        // The address that the staker was delegated to at the time that the Withdrawal was created\r\n        address delegatedTo;\r\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\r\n        address withdrawer;\r\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\r\n        uint256 nonce;\r\n        // Block number when the Withdrawal was created\r\n        uint32 startBlock;\r\n        // Array of strategies that the Withdrawal contains\r\n        IStrategy[] strategies;\r\n        // Array containing the amount of shares in each Strategy in the `strategies` array\r\n        uint256[] shares;\r\n    }\r\n\r\n    struct QueuedWithdrawalParams {\r\n        // Array of strategies that the QueuedWithdrawal contains\r\n        IStrategy[] strategies;\r\n        // Array containing the amount of shares in each Strategy in the `strategies` array\r\n        uint256[] shares;\r\n        // The address of the withdrawer\r\n        address withdrawer;\r\n    }\r\n\r\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\r\n    event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\r\n\r\n    /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\r\n    event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\r\n\r\n    /**\r\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\r\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\r\n     */\r\n    event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\r\n\r\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\r\n    event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\r\n\r\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\r\n    event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\r\n\r\n    /// @notice Emitted when @param staker delegates to @param operator.\r\n    event StakerDelegated(address indexed staker, address indexed operator);\r\n\r\n    /// @notice Emitted when @param staker undelegates from @param operator.\r\n    event StakerUndelegated(address indexed staker, address indexed operator);\r\n\r\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\r\n    event StakerForceUndelegated(address indexed staker, address indexed operator);\r\n\r\n    /**\r\n     * @notice Emitted when a new withdrawal is queued.\r\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\r\n     * @param withdrawal Is the withdrawal itself.\r\n     */\r\n    event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\r\n\r\n    /// @notice Emitted when a queued withdrawal is completed\r\n    event WithdrawalCompleted(bytes32 withdrawalRoot);\r\n\r\n    /// @notice Emitted when a queued withdrawal is *migrated* from the StrategyManager to the DelegationManager\r\n    event WithdrawalMigrated(bytes32 oldWithdrawalRoot, bytes32 newWithdrawalRoot);\r\n    \r\n    /// @notice Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\r\n    event MinWithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\r\n\r\n    /// @notice Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\r\n    event StrategyWithdrawalDelayBlocksSet(IStrategy strategy, uint256 previousValue, uint256 newValue);\r\n\r\n    /**\r\n     * @notice Registers the caller as an operator in EigenLayer.\r\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\r\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\r\n     *\r\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\r\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\r\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\r\n     */\r\n    function registerAsOperator(\r\n        OperatorDetails calldata registeringOperatorDetails,\r\n        string calldata metadataURI\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Updates an operator's stored `OperatorDetails`.\r\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\r\n     *\r\n     * @dev The caller must have previously registered as an operator in EigenLayer.\r\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\r\n     */\r\n    function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\r\n\r\n    /**\r\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\r\n     * @param metadataURI The URI for metadata associated with an operator\r\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\r\n     */\r\n    function updateOperatorMetadataURI(string calldata metadataURI) external;\r\n\r\n    /**\r\n     * @notice Caller delegates their stake to an operator.\r\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\r\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\r\n     * @param approverSalt A unique single use value tied to an individual signature.\r\n     * @dev The approverSignatureAndExpiry is used in the event that:\r\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\r\n     *                  AND\r\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\r\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\r\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\r\n     * in this case to save on complexity + gas costs\r\n     */\r\n    function delegateTo(\r\n        address operator,\r\n        SignatureWithExpiry memory approverSignatureAndExpiry,\r\n        bytes32 approverSalt\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\r\n     * @param staker The account delegating stake to an `operator` account\r\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\r\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\r\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\r\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\r\n     *\r\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\r\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\r\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\r\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\r\n     * is the `msg.sender`, then approval is assumed.\r\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\r\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\r\n     * in this case to save on complexity + gas costs\r\n     */\r\n    function delegateToBySignature(\r\n        address staker,\r\n        address operator,\r\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\r\n        SignatureWithExpiry memory approverSignatureAndExpiry,\r\n        bytes32 approverSalt\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \"undelegation limbo\" mode of the EigenPodManager\r\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\r\n     * @param staker The account to be undelegated.\r\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\r\n     *\r\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\r\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\r\n     * @dev Reverts if the `staker` is already undelegated.\r\n     */\r\n    function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\r\n\r\n    /**\r\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\r\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\r\n     * their operator.\r\n     *\r\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\r\n     */\r\n    function queueWithdrawals(\r\n        QueuedWithdrawalParams[] calldata queuedWithdrawalParams\r\n    ) external returns (bytes32[] memory);\r\n\r\n    /**\r\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\r\n     * @param withdrawal The Withdrawal to complete.\r\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\r\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\r\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\r\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\r\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\r\n     * will simply be transferred to the caller directly.\r\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\r\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\r\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\r\n     * any other strategies, which will be transferred to the withdrawer.\r\n     */\r\n    function completeQueuedWithdrawal(\r\n        Withdrawal calldata withdrawal,\r\n        IERC20[] calldata tokens,\r\n        uint256 middlewareTimesIndex,\r\n        bool receiveAsTokens\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\r\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\r\n     * @param withdrawals The Withdrawals to complete.\r\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\r\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\r\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\r\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\r\n     */\r\n    function completeQueuedWithdrawals(\r\n        Withdrawal[] calldata withdrawals,\r\n        IERC20[][] calldata tokens,\r\n        uint256[] calldata middlewareTimesIndexes,\r\n        bool[] calldata receiveAsTokens\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Increases a staker's delegated share balance in a strategy.\r\n     * @param staker The address to increase the delegated shares for their operator.\r\n     * @param strategy The strategy in which to increase the delegated shares.\r\n     * @param shares The number of shares to increase.\r\n     *\r\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\r\n     * @dev Callable only by the StrategyManager or EigenPodManager.\r\n     */\r\n    function increaseDelegatedShares(\r\n        address staker,\r\n        IStrategy strategy,\r\n        uint256 shares\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Decreases a staker's delegated share balance in a strategy.\r\n     * @param staker The address to increase the delegated shares for their operator.\r\n     * @param strategy The strategy in which to decrease the delegated shares.\r\n     * @param shares The number of shares to decrease.\r\n     *\r\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\r\n     * @dev Callable only by the StrategyManager or EigenPodManager.\r\n     */\r\n    function decreaseDelegatedShares(\r\n        address staker,\r\n        IStrategy strategy,\r\n        uint256 shares\r\n    ) external;\r\n\r\n    /**\r\n     * @notice returns the address of the operator that `staker` is delegated to.\r\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\r\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\r\n     */\r\n    function delegatedTo(address staker) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\r\n     */\r\n    function operatorDetails(address operator) external view returns (OperatorDetails memory);\r\n\r\n    /*\r\n     * @notice Returns the earnings receiver address for an operator\r\n     */\r\n    function earningsReceiver(address operator) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the delegationApprover account for an operator\r\n     */\r\n    function delegationApprover(address operator) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\r\n     */\r\n    function stakerOptOutWindowBlocks(address operator) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Given array of strategies, returns array of shares for the operator\r\n     */\r\n    function getOperatorShares(\r\n        address operator,\r\n        IStrategy[] memory strategies\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\r\n     * from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\r\n     * @param strategies The strategies to check withdrawal delays for\r\n     */\r\n    function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\r\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\r\n     * @dev By design, the following invariant should hold for each Strategy:\r\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\r\n     * = sum (delegateable shares of all stakers delegated to the operator)\r\n     */\r\n    function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\r\n     */\r\n    function isDelegated(address staker) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns true is an operator has previously registered for delegation.\r\n     */\r\n    function isOperator(address operator) external view returns (bool);\r\n\r\n    /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\r\n    function stakerNonce(address staker) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\r\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\r\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\r\n     */\r\n    function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\r\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\r\n     * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass\r\n     * to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\r\n     */\r\n    function minWithdrawalDelayBlocks() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\r\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\r\n     */\r\n    function strategyWithdrawalDelayBlocks(IStrategy strategy) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\r\n     * @param staker The signing staker\r\n     * @param operator The operator who is being delegated to\r\n     * @param expiry The desired expiry time of the staker's signature\r\n     */\r\n    function calculateCurrentStakerDelegationDigestHash(\r\n        address staker,\r\n        address operator,\r\n        uint256 expiry\r\n    ) external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\r\n     * @param staker The signing staker\r\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\r\n     * @param operator The operator who is being delegated to\r\n     * @param expiry The desired expiry time of the staker's signature\r\n     */\r\n    function calculateStakerDelegationDigestHash(\r\n        address staker,\r\n        uint256 _stakerNonce,\r\n        address operator,\r\n        uint256 expiry\r\n    ) external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\r\n     * @param staker The account delegating their stake\r\n     * @param operator The account receiving delegated stake\r\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\r\n     * @param approverSalt A unique and single use value associated with the approver signature.\r\n     * @param expiry Time after which the approver's signature becomes invalid\r\n     */\r\n    function calculateDelegationApprovalDigestHash(\r\n        address staker,\r\n        address operator,\r\n        address _delegationApprover,\r\n        bytes32 approverSalt,\r\n        uint256 expiry\r\n    ) external view returns (bytes32);\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\r\n\r\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\r\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\r\n\r\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\r\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\r\n     *\r\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\r\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\r\n     * for more detailed information please read EIP-712.\r\n     */\r\n    function domainSeparator() external view returns (bytes32);\r\n    \r\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\r\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\r\n    function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\r\n\r\n    /// @notice Returns the keccak256 hash of `withdrawal`.\r\n    function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\r\n\r\n    function migrateQueuedWithdrawals(IStrategyManager.DeprecatedStruct_QueuedWithdrawal[] memory withdrawalsToQueue) external;\r\n}\r\n\r\n/**\r\n * @title Interface for a `Registry` that keeps track of stakes of operators for up to 256 quorums.\r\n * @author Layr Labs, Inc.\r\n */\r\ninterface IStakeRegistry is IRegistry {\r\n    \r\n    // DATA STRUCTURES\r\n\r\n    /// @notice struct used to store the stakes of an individual operator or the sum of all operators' stakes, for storage\r\n    struct StakeUpdate {\r\n        // the block number at which the stake amounts were updated and stored\r\n        uint32 updateBlockNumber;\r\n        // the block number at which the *next update* occurred.\r\n        /// @notice This entry has the value **0** until another update takes place.\r\n        uint32 nextUpdateBlockNumber;\r\n        // stake weight for the quorum\r\n        uint96 stake;\r\n    }\r\n\r\n    /**\r\n     * @notice In weighing a particular strategy, the amount of underlying asset for that strategy is\r\n     * multiplied by its multiplier, then divided by WEIGHTING_DIVISOR\r\n     */\r\n    struct StrategyParams {\r\n        IStrategy strategy;\r\n        uint96 multiplier;\r\n    }\r\n\r\n    // EVENTS\r\n\r\n    /// @notice emitted whenever the stake of `operator` is updated\r\n    event OperatorStakeUpdate(\r\n        bytes32 indexed operatorId,\r\n        uint8 quorumNumber,\r\n        uint96 stake\r\n    );\r\n    /// @notice emitted when the minimum stake for a quorum is updated\r\n    event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake);\r\n    /// @notice emitted when a new quorum is created\r\n    event QuorumCreated(uint8 indexed quorumNumber);\r\n    /// @notice emitted when `strategy` has been added to the array at `strategyParams[quorumNumber]`\r\n    event StrategyAddedToQuorum(uint8 indexed quorumNumber, IStrategy strategy);\r\n    /// @notice emitted when `strategy` has removed from the array at `strategyParams[quorumNumber]`\r\n    event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, IStrategy strategy);\r\n    /// @notice emitted when `strategy` has its `multiplier` updated in the array at `strategyParams[quorumNumber]`\r\n    event StrategyMultiplierUpdated(uint8 indexed quorumNumber, IStrategy strategy, uint256 multiplier);\r\n\r\n    /**\r\n     * @notice Registers the `operator` with `operatorId` for the specified `quorumNumbers`.\r\n     * @param operator The address of the operator to register.\r\n     * @param operatorId The id of the operator to register.\r\n     * @param quorumNumbers The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\r\n     * @return The operator's current stake for each quorum, and the total stake for each quorum\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already registered\r\n     */\r\n    function registerOperator(\r\n        address operator, \r\n        bytes32 operatorId, \r\n        bytes memory quorumNumbers\r\n    ) external returns (uint96[] memory, uint96[] memory);\r\n\r\n    /**\r\n     * @notice Deregisters the operator with `operatorId` for the specified `quorumNumbers`.\r\n     * @param operatorId The id of the operator to deregister.\r\n     * @param quorumNumbers The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already deregistered\r\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\r\n     */\r\n    function deregisterOperator(bytes32 operatorId, bytes memory quorumNumbers) external;\r\n\r\n    /**\r\n     * @notice Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake\r\n     */\r\n    function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, StrategyParams[] memory strategyParams) external;\r\n\r\n    /// @notice Adds new strategies and the associated multipliers to the @param quorumNumber.\r\n    function addStrategies(\r\n        uint8 quorumNumber,\r\n        StrategyParams[] memory strategyParams\r\n    ) external;\r\n\r\n    /**\r\n     * @notice This function is used for removing strategies and their associated weights from the\r\n     * mapping strategyParams for a specific @param quorumNumber.\r\n     * @dev higher indices should be *first* in the list of @param indicesToRemove, since otherwise\r\n     * the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove\r\n     */\r\n    function removeStrategies(uint8 quorumNumber, uint256[] calldata indicesToRemove) external;\r\n\r\n    /**\r\n     * @notice This function is used for modifying the weights of strategies that are already in the\r\n     * mapping strategyParams for a specific\r\n     * @param quorumNumber is the quorum number to change the strategy for\r\n     * @param strategyIndices are the indices of the strategies to change\r\n     * @param newMultipliers are the new multipliers for the strategies\r\n     */\r\n    function modifyStrategyParams(\r\n        uint8 quorumNumber,\r\n        uint256[] calldata strategyIndices,\r\n        uint96[] calldata newMultipliers\r\n    ) external;\r\n\r\n    /// @notice Constant used as a divisor in calculating weights.\r\n    function WEIGHTING_DIVISOR() external pure returns (uint256);\r\n\r\n    /// @notice Returns the EigenLayer delegation manager contract.\r\n    function delegation() external view returns (IDelegationManager);\r\n\r\n    /// @notice In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`\r\n    function minimumStakeForQuorum(uint8 quorumNumber) external view returns (uint96);\r\n\r\n    /// @notice Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`.\r\n    function strategyParamsLength(uint8 quorumNumber) external view returns (uint256);\r\n\r\n    /// @notice Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`\r\n    function strategyParamsByIndex(\r\n        uint8 quorumNumber,\r\n        uint256 index\r\n    ) external view returns (StrategyParams memory);\r\n\r\n    /**\r\n     * @notice This function computes the total weight of the @param operator in the quorum @param quorumNumber.\r\n     * @dev reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`\r\n     */\r\n    function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) external view returns (uint96);\r\n\r\n    /**\r\n     * @notice Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\r\n     * @param operatorId The id of the operator of interest.\r\n     * @param quorumNumber The quorum number to get the stake for.\r\n     */\r\n    function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) external view returns (StakeUpdate[] memory);\r\n\r\n    function getTotalStakeHistoryLength(uint8 quorumNumber) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`.\r\n     * @param quorumNumber The quorum number to get the stake for.\r\n     * @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\r\n     */\r\n    function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) external view returns (StakeUpdate memory);\r\n\r\n    /// @notice Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`\r\n    function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber)\r\n        external\r\n        view\r\n        returns (uint32);\r\n\r\n    /// @notice Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`\r\n    function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes calldata quorumNumbers) external view returns(uint32[] memory) ;\r\n\r\n    /**\r\n     * @notice Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\r\n     * @param quorumNumber The quorum number to get the stake for.\r\n     * @param operatorId The id of the operator of interest.\r\n     * @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\r\n     * @dev Function will revert if `index` is out-of-bounds.\r\n     */\r\n    function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index)\r\n        external\r\n        view\r\n        returns (StakeUpdate memory);\r\n\r\n    /**\r\n     * @notice Returns the most recent stake weight for the `operatorId` for a certain quorum\r\n     * @dev Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history\r\n     */\r\n    function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) external view returns (StakeUpdate memory);\r\n\r\n    /**\r\n     * @notice Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the\r\n     * `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry \r\n     * corresponds to the operator's stake at `blockNumber`. Reverts otherwise.\r\n     * @param quorumNumber The quorum number to get the stake for.\r\n     * @param operatorId The id of the operator of interest.\r\n     * @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\r\n     * @param blockNumber Block number to make sure the stake is from.\r\n     * @dev Function will revert if `index` is out-of-bounds.\r\n     * @dev used the BLSSignatureChecker to get past stakes of signing operators\r\n     */\r\n    function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index)\r\n        external\r\n        view\r\n        returns (uint96);\r\n\r\n    /**\r\n     * @notice Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the \r\n     * `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`. \r\n     * Reverts otherwise.\r\n     * @param quorumNumber The quorum number to get the stake for.\r\n     * @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\r\n     * @param blockNumber Block number to make sure the stake is from.\r\n     * @dev Function will revert if `index` is out-of-bounds.\r\n     * @dev used the BLSSignatureChecker to get past stakes of signing operators\r\n     */\r\n    function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) external view returns (uint96);\r\n\r\n    /**\r\n     * @notice Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`\r\n     * @dev Function returns weight of **0** in the event that the operator has no stake history\r\n     */\r\n    function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) external view returns (uint96);\r\n\r\n    /// @notice Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`\r\n    function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber)\r\n        external\r\n        view\r\n        returns (uint96);\r\n\r\n    /**\r\n     * @notice Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`.\r\n     * @dev Will revert if `_totalStakeHistory[quorumNumber]` is empty.\r\n     */\r\n    function getCurrentTotalStake(uint8 quorumNumber) external view returns (uint96);\r\n\r\n    /**\r\n     * @notice Called by the registry coordinator to update an operator's stake for one\r\n     * or more quorums.\r\n     *\r\n     * If the operator no longer has the minimum stake required for a quorum, they are\r\n     * added to the\r\n     * @return A bitmap of quorums where the operator no longer meets the minimum stake\r\n     * and should be deregistered.\r\n     */\r\n    function updateOperatorStake(\r\n        address operator, \r\n        bytes32 operatorId, \r\n        bytes calldata quorumNumbers\r\n    ) external returns (uint192);\r\n}\r\n\r\n/**\r\n * @title Interface for a `Registry`-type contract that keeps track of an ordered list of operators for up to 256 quorums.\r\n * @author Layr Labs, Inc.\r\n */\r\ninterface IIndexRegistry is IRegistry {\r\n    // EVENTS\r\n    \r\n    // emitted when an operator's index in the ordered operator list for the quorum with number `quorumNumber` is updated\r\n    event QuorumIndexUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint32 newOperatorIndex);\r\n\r\n    // DATA STRUCTURES\r\n\r\n    // struct used to give definitive ordering to operators at each blockNumber. \r\n    struct OperatorUpdate {\r\n        // blockNumber number from which `operatorIndex` was the operators index\r\n        // the operator's index is the first entry such that `blockNumber >= entry.fromBlockNumber`\r\n        uint32 fromBlockNumber;\r\n        // the operator at this index\r\n        bytes32 operatorId;\r\n    }\r\n\r\n    // struct used to denote the number of operators in a quorum at a given blockNumber\r\n    struct QuorumUpdate {\r\n        // The total number of operators at a `blockNumber` is the first entry such that `blockNumber >= entry.fromBlockNumber`\r\n        uint32 fromBlockNumber;\r\n        // The number of operators at `fromBlockNumber`\r\n        uint32 numOperators;\r\n    }\r\n\r\n    /**\r\n     * @notice Registers the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\r\n     * @param operatorId is the id of the operator that is being registered\r\n     * @param quorumNumbers is the quorum numbers the operator is registered for\r\n     * @return numOperatorsPerQuorum is a list of the number of operators (including the registering operator) in each of the quorums the operator is registered for\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already registered\r\n     */\r\n    function registerOperator(bytes32 operatorId, bytes calldata quorumNumbers) external returns(uint32[] memory);\r\n\r\n    /**\r\n     * @notice Deregisters the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\r\n     * @param operatorId is the id of the operator that is being deregistered\r\n     * @param quorumNumbers is the quorum numbers the operator is deregistered for\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already deregistered\r\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\r\n     */\r\n    function deregisterOperator(bytes32 operatorId, bytes calldata quorumNumbers) external;\r\n\r\n    /**\r\n     * @notice Initialize a quorum by pushing its first quorum update\r\n     * @param quorumNumber The number of the new quorum\r\n     */\r\n    function initializeQuorum(uint8 quorumNumber) external;\r\n\r\n    /// @notice Returns the OperatorUpdate entry for the specified `operatorIndex` and `quorumNumber` at the specified `arrayIndex`\r\n    function getOperatorUpdateAtIndex(\r\n        uint8 quorumNumber,\r\n        uint32 operatorIndex,\r\n        uint32 arrayIndex\r\n    ) external view returns (OperatorUpdate memory);\r\n\r\n    /// @notice Returns the QuorumUpdate entry for the specified `quorumNumber` at the specified `quorumIndex`\r\n    function getQuorumUpdateAtIndex(uint8 quorumNumber, uint32 quorumIndex) external view returns (QuorumUpdate memory);\r\n\r\n    /// @notice Returns the most recent OperatorUpdate entry for the specified quorumNumber and operatorIndex\r\n    function getLatestOperatorUpdate(uint8 quorumNumber, uint32 operatorIndex) external view returns (OperatorUpdate memory);\r\n\r\n    /// @notice Returns the most recent QuorumUpdate entry for the specified quorumNumber\r\n    function getLatestQuorumUpdate(uint8 quorumNumber) external view returns (QuorumUpdate memory);\r\n\r\n    /// @notice Returns the current number of operators of this service for `quorumNumber`.\r\n    function totalOperatorsForQuorum(uint8 quorumNumber) external view returns (uint32);\r\n\r\n    /// @notice Returns an ordered list of operators of the services for the given `quorumNumber` at the given `blockNumber`\r\n    function getOperatorListAtBlockNumber(uint8 quorumNumber, uint32 blockNumber) external view returns (bytes32[] memory);\r\n}\r\n\r\n/**\r\n * @title Interface for a contract that coordinates between various registries for an AVS.\r\n * @author Layr Labs, Inc.\r\n */\r\ninterface IRegistryCoordinator {\r\n    // EVENTS\r\n\r\n    /// Emits when an operator is registered\r\n    event OperatorRegistered(address indexed operator, bytes32 indexed operatorId);\r\n\r\n    /// Emits when an operator is deregistered\r\n    event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId);\r\n\r\n    event OperatorSetParamsUpdated(uint8 indexed quorumNumber, OperatorSetParam operatorSetParams);\r\n\r\n    event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover);\r\n\r\n    event EjectorUpdated(address prevEjector, address newEjector);\r\n\r\n    /// @notice emitted when all the operators for a quorum are updated at once\r\n    event QuorumBlockNumberUpdated(uint8 indexed quorumNumber, uint256 blocknumber);\r\n\r\n    // DATA STRUCTURES\r\n    enum OperatorStatus\r\n    {\r\n        // default is NEVER_REGISTERED\r\n        NEVER_REGISTERED,\r\n        REGISTERED,\r\n        DEREGISTERED\r\n    }\r\n\r\n    // STRUCTS\r\n\r\n    /**\r\n     * @notice Data structure for storing info on operators\r\n     */\r\n    struct OperatorInfo {\r\n        // the id of the operator, which is likely the keccak256 hash of the operator's public key if using BLSRegistry\r\n        bytes32 operatorId;\r\n        // indicates whether the operator is actively registered for serving the middleware or not\r\n        OperatorStatus status;\r\n    }\r\n\r\n    /**\r\n     * @notice Data structure for storing info on quorum bitmap updates where the `quorumBitmap` is the bitmap of the \r\n     * quorums the operator is registered for starting at (inclusive)`updateBlockNumber` and ending at (exclusive) `nextUpdateBlockNumber`\r\n     * @dev nextUpdateBlockNumber is initialized to 0 for the latest update\r\n     */\r\n    struct QuorumBitmapUpdate {\r\n        uint32 updateBlockNumber;\r\n        uint32 nextUpdateBlockNumber;\r\n        uint192 quorumBitmap;\r\n    }\r\n\r\n    /**\r\n     * @notice Data structure for storing operator set params for a given quorum. Specifically the \r\n     * `maxOperatorCount` is the maximum number of operators that can be registered for the quorum,\r\n     * `kickBIPsOfOperatorStake` is the basis points of a new operator needs to have of an operator they are trying to kick from the quorum,\r\n     * and `kickBIPsOfTotalStake` is the basis points of the total stake of the quorum that an operator needs to be below to be kicked.\r\n     */ \r\n     struct OperatorSetParam {\r\n        uint32 maxOperatorCount;\r\n        uint16 kickBIPsOfOperatorStake;\r\n        uint16 kickBIPsOfTotalStake;\r\n    }\r\n\r\n    /**\r\n     * @notice Data structure for the parameters needed to kick an operator from a quorum with number `quorumNumber`, used during registration churn.\r\n     * `operator` is the address of the operator to kick\r\n     */\r\n    struct OperatorKickParam {\r\n        uint8 quorumNumber;\r\n        address operator;\r\n    }\r\n\r\n    /// @notice Returns the operator set params for the given `quorumNumber`\r\n    function getOperatorSetParams(uint8 quorumNumber) external view returns (OperatorSetParam memory);\r\n    /// @notice the Stake registry contract that will keep track of operators' stakes\r\n    function stakeRegistry() external view returns (IStakeRegistry);\r\n    /// @notice the BLS Aggregate Pubkey Registry contract that will keep track of operators' BLS aggregate pubkeys per quorum\r\n    function blsApkRegistry() external view returns (IBLSApkRegistry);\r\n    /// @notice the index Registry contract that will keep track of operators' indexes\r\n    function indexRegistry() external view returns (IIndexRegistry);\r\n\r\n    /**\r\n     * @notice Ejects the provided operator from the provided quorums from the AVS\r\n     * @param operator is the operator to eject\r\n     * @param quorumNumbers are the quorum numbers to eject the operator from\r\n     */\r\n    function ejectOperator(\r\n        address operator, \r\n        bytes calldata quorumNumbers\r\n    ) external;\r\n\r\n    /// @notice Returns the number of quorums the registry coordinator has created\r\n    function quorumCount() external view returns (uint8);\r\n\r\n    /// @notice Returns the operator struct for the given `operator`\r\n    function getOperator(address operator) external view returns (OperatorInfo memory);\r\n\r\n    /// @notice Returns the operatorId for the given `operator`\r\n    function getOperatorId(address operator) external view returns (bytes32);\r\n\r\n    /// @notice Returns the operator address for the given `operatorId`\r\n    function getOperatorFromId(bytes32 operatorId) external view returns (address operator);\r\n\r\n    /// @notice Returns the status for the given `operator`\r\n    function getOperatorStatus(address operator) external view returns (IRegistryCoordinator.OperatorStatus);\r\n\r\n    /// @notice Returns the indices of the quorumBitmaps for the provided `operatorIds` at the given `blockNumber`\r\n    function getQuorumBitmapIndicesAtBlockNumber(uint32 blockNumber, bytes32[] memory operatorIds) external view returns (uint32[] memory);\r\n\r\n    /**\r\n     * @notice Returns the quorum bitmap for the given `operatorId` at the given `blockNumber` via the `index`\r\n     * @dev reverts if `index` is incorrect \r\n     */ \r\n    function getQuorumBitmapAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) external view returns (uint192);\r\n\r\n    /// @notice Returns the `index`th entry in the operator with `operatorId`'s bitmap history\r\n    function getQuorumBitmapUpdateByIndex(bytes32 operatorId, uint256 index) external view returns (QuorumBitmapUpdate memory);\r\n\r\n    /// @notice Returns the current quorum bitmap for the given `operatorId`\r\n    function getCurrentQuorumBitmap(bytes32 operatorId) external view returns (uint192);\r\n\r\n    /// @notice Returns the length of the quorum bitmap history for the given `operatorId`\r\n    function getQuorumBitmapHistoryLength(bytes32 operatorId) external view returns (uint256);\r\n\r\n    /// @notice Returns the registry at the desired index\r\n    function registries(uint256) external view returns (address);\r\n\r\n    /// @notice Returns the number of registries\r\n    function numRegistries() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the message hash that an operator must sign to register their BLS public key.\r\n     * @param operator is the address of the operator registering their BLS public key\r\n     */\r\n    function pubkeyRegistrationMessageHash(address operator) external view returns (BN254.G1Point memory);\r\n\r\n    /// @notice returns the blocknumber the quorum was last updated all at once for all operators\r\n    function quorumUpdateBlockNumber(uint8 quorumNumber) external view returns (uint256);\r\n\r\n    /// @notice The owner of the registry coordinator\r\n    function owner() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title Storage variables for the `IndexRegistry` contract.\r\n * @author Layr Labs, Inc.\r\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\r\n */\r\nabstract contract IndexRegistryStorage is Initializable, IIndexRegistry {\r\n\r\n    /// @notice The value that is returned when an operator does not exist at an index at a certain block\r\n    bytes32 public constant OPERATOR_DOES_NOT_EXIST_ID = bytes32(0);\r\n\r\n    /// @notice The RegistryCoordinator contract for this middleware\r\n    address public immutable registryCoordinator;\r\n\r\n    /// @notice maps quorumNumber => operator id => current operatorIndex\r\n    /// NOTE: This mapping is NOT updated when an operator is deregistered,\r\n    /// so it's possible that an index retrieved from this mapping is inaccurate.\r\n    /// If you're querying for an operator that might be deregistered, ALWAYS \r\n    /// check this index against the latest `_operatorIndexHistory` entry\r\n    mapping(uint8 => mapping(bytes32 => uint32)) public currentOperatorIndex;\r\n    /// @notice maps quorumNumber => operatorIndex => historical operator ids at that index\r\n    mapping(uint8 => mapping(uint32 => OperatorUpdate[])) internal _operatorIndexHistory;\r\n    /// @notice maps quorumNumber => historical number of unique registered operators\r\n    mapping(uint8 => QuorumUpdate[]) internal _operatorCountHistory;\r\n\r\n    constructor(\r\n        IRegistryCoordinator _registryCoordinator\r\n    ){\r\n        registryCoordinator = address(_registryCoordinator);\r\n        // disable initializers so that the implementation contract cannot be initialized\r\n        _disableInitializers();\r\n    }\r\n\r\n    // storage gap for upgradeability\r\n    uint256[47] private __GAP;\r\n}\r\n\r\n/**\r\n * @title A `Registry` that keeps track of an ordered list of operators for each quorum\r\n * @author Layr Labs, Inc.\r\n */\r\ncontract IndexRegistry is IndexRegistryStorage {\r\n\r\n    /// @notice when applied to a function, only allows the RegistryCoordinator to call it\r\n    modifier onlyRegistryCoordinator() {\r\n        require(msg.sender == address(registryCoordinator), \"IndexRegistry.onlyRegistryCoordinator: caller is not the registry coordinator\");\r\n        _;\r\n    }\r\n\r\n    /// @notice sets the (immutable) `registryCoordinator` address\r\n    constructor(\r\n        IRegistryCoordinator _registryCoordinator\r\n    ) IndexRegistryStorage(_registryCoordinator) {}\r\n\r\n    /*******************************************************************************\r\n                      EXTERNAL FUNCTIONS - REGISTRY COORDINATOR\r\n    *******************************************************************************/\r\n\r\n    /**\r\n     * @notice Registers the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\r\n     * @param operatorId is the id of the operator that is being registered\r\n     * @param quorumNumbers is the quorum numbers the operator is registered for\r\n     * @return numOperatorsPerQuorum is a list of the number of operators (including the registering operator) in each of the quorums the operator is registered for\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already registered\r\n     */\r\n    function registerOperator(\r\n        bytes32 operatorId, \r\n        bytes calldata quorumNumbers\r\n    ) public virtual onlyRegistryCoordinator returns(uint32[] memory) {\r\n        uint32[] memory numOperatorsPerQuorum = new uint32[](quorumNumbers.length);\r\n\r\n        for (uint256 i = 0; i < quorumNumbers.length; i++) {\r\n            // Validate quorum exists and get current operator count\r\n            uint8 quorumNumber = uint8(quorumNumbers[i]);\r\n            uint256 historyLength = _operatorCountHistory[quorumNumber].length;\r\n            require(historyLength != 0, \"IndexRegistry.registerOperator: quorum does not exist\");\r\n\r\n            /**\r\n             * Increase the number of operators currently active for this quorum,\r\n             * and assign the operator to the last operatorIndex available\r\n             */\r\n            uint32 newOperatorCount = _increaseOperatorCount(quorumNumber);\r\n            _assignOperatorToIndex({\r\n                operatorId: operatorId,\r\n                quorumNumber: quorumNumber,\r\n                operatorIndex: newOperatorCount - 1\r\n            });\r\n\r\n            // Record the current operator count for each quorum\r\n            numOperatorsPerQuorum[i] = newOperatorCount;\r\n        }\r\n\r\n        return numOperatorsPerQuorum;\r\n    }\r\n\r\n    /**\r\n     * @notice Deregisters the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\r\n     * @param operatorId is the id of the operator that is being deregistered\r\n     * @param quorumNumbers is the quorum numbers the operator is deregistered for\r\n     * @dev access restricted to the RegistryCoordinator\r\n     * @dev Preconditions (these are assumed, not validated in this contract):\r\n     *         1) `quorumNumbers` has no duplicates\r\n     *         2) `quorumNumbers.length` != 0\r\n     *         3) `quorumNumbers` is ordered in ascending order\r\n     *         4) the operator is not already deregistered\r\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\r\n     */\r\n    function deregisterOperator(\r\n        bytes32 operatorId, \r\n        bytes calldata quorumNumbers\r\n    ) public virtual onlyRegistryCoordinator {\r\n        for (uint256 i = 0; i < quorumNumbers.length; i++) {\r\n            // Validate quorum exists and get the operatorIndex of the operator being deregistered\r\n            uint8 quorumNumber = uint8(quorumNumbers[i]);\r\n            uint256 historyLength = _operatorCountHistory[quorumNumber].length;\r\n            require(historyLength != 0, \"IndexRegistry.registerOperator: quorum does not exist\");\r\n            uint32 operatorIndexToRemove = currentOperatorIndex[quorumNumber][operatorId];\r\n\r\n            /**\r\n             * \"Pop\" the operator from the registry:\r\n             * 1. Decrease the operator count for the quorum\r\n             * 2. Remove the last operator associated with the count\r\n             * 3. Place the last operator in the deregistered operator's old position\r\n             */\r\n            uint32 newOperatorCount = _decreaseOperatorCount(quorumNumber);\r\n            bytes32 lastOperatorId = _popLastOperator(quorumNumber, newOperatorCount);\r\n            if (operatorId != lastOperatorId) {\r\n                _assignOperatorToIndex({\r\n                    operatorId: lastOperatorId,\r\n                    quorumNumber: quorumNumber,\r\n                    operatorIndex: operatorIndexToRemove\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Initialize a quorum by pushing its first quorum update\r\n     * @param quorumNumber The number of the new quorum\r\n     */\r\n    function initializeQuorum(uint8 quorumNumber) public virtual onlyRegistryCoordinator {\r\n        require(_operatorCountHistory[quorumNumber].length == 0, \"IndexRegistry.createQuorum: quorum already exists\");\r\n\r\n        _operatorCountHistory[quorumNumber].push(QuorumUpdate({\r\n            numOperators: 0,\r\n            fromBlockNumber: uint32(block.number)\r\n        }));\r\n    }\r\n\r\n    /*******************************************************************************\r\n                                INTERNAL FUNCTIONS\r\n    *******************************************************************************/\r\n\r\n    /**\r\n     * @notice Increases the historical operator count by 1 and returns the new count\r\n     */\r\n    function _increaseOperatorCount(uint8 quorumNumber) internal returns (uint32) {\r\n        QuorumUpdate storage lastUpdate = _latestQuorumUpdate(quorumNumber);\r\n        uint32 newOperatorCount = lastUpdate.numOperators + 1;\r\n        \r\n        _updateOperatorCountHistory(quorumNumber, lastUpdate, newOperatorCount);\r\n\r\n        // If this is the first time we're using this operatorIndex, push its first update\r\n        // This maintains an invariant: existing indices have nonzero history\r\n        if (_operatorIndexHistory[quorumNumber][newOperatorCount - 1].length == 0) {\r\n            _operatorIndexHistory[quorumNumber][newOperatorCount - 1].push(OperatorUpdate({\r\n                operatorId: OPERATOR_DOES_NOT_EXIST_ID,\r\n                fromBlockNumber: uint32(block.number)\r\n            }));\r\n        }\r\n\r\n        return newOperatorCount;\r\n    }\r\n\r\n    /**\r\n     * @notice Decreases the historical operator count by 1 and returns the new count\r\n     */\r\n    function _decreaseOperatorCount(uint8 quorumNumber) internal returns (uint32) {\r\n        QuorumUpdate storage lastUpdate = _latestQuorumUpdate(quorumNumber);\r\n        uint32 newOperatorCount = lastUpdate.numOperators - 1;\r\n        \r\n        _updateOperatorCountHistory(quorumNumber, lastUpdate, newOperatorCount);\r\n        \r\n        return newOperatorCount;\r\n    }\r\n\r\n    /**\r\n     * @notice Update `_operatorCountHistory` with a new operator count\r\n     * @dev If the lastUpdate was made in the this block, update the entry.\r\n     * Otherwise, push a new historical entry.\r\n     */\r\n    function _updateOperatorCountHistory(\r\n        uint8 quorumNumber,\r\n        QuorumUpdate storage lastUpdate,\r\n        uint32 newOperatorCount\r\n    ) internal {\r\n        if (lastUpdate.fromBlockNumber == uint32(block.number)) {\r\n            lastUpdate.numOperators = newOperatorCount;\r\n        } else {\r\n            _operatorCountHistory[quorumNumber].push(QuorumUpdate({\r\n                numOperators: newOperatorCount,\r\n                fromBlockNumber: uint32(block.number)\r\n            }));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice For a given quorum and operatorIndex, pop and return the last operatorId in the history\r\n     * @dev The last entry's operatorId is updated to OPERATOR_DOES_NOT_EXIST_ID\r\n     * @return The removed operatorId\r\n     */\r\n    function _popLastOperator(uint8 quorumNumber, uint32 operatorIndex) internal returns (bytes32) {\r\n        OperatorUpdate storage lastUpdate = _latestOperatorIndexUpdate(quorumNumber, operatorIndex);\r\n        bytes32 removedOperatorId = lastUpdate.operatorId;\r\n\r\n        // Set the current operator id for this operatorIndex to 0\r\n        _updateOperatorIndexHistory(quorumNumber, operatorIndex, lastUpdate, OPERATOR_DOES_NOT_EXIST_ID);\r\n\r\n        return removedOperatorId;\r\n    }\r\n\r\n    /**\r\n     * @notice Assign an operator to an index and update the index history\r\n     * @param operatorId operatorId of the operator to update\r\n     * @param quorumNumber quorumNumber of the operator to update\r\n     * @param operatorIndex the latest index of that operator in the list of operators registered for this quorum\r\n     */ \r\n    function _assignOperatorToIndex(bytes32 operatorId, uint8 quorumNumber, uint32 operatorIndex) internal {\r\n        OperatorUpdate storage lastUpdate = _latestOperatorIndexUpdate(quorumNumber, operatorIndex);\r\n\r\n        _updateOperatorIndexHistory(quorumNumber, operatorIndex, lastUpdate, operatorId);\r\n\r\n        // Assign the operator to their new current operatorIndex\r\n        currentOperatorIndex[quorumNumber][operatorId] = operatorIndex;\r\n        emit QuorumIndexUpdate(operatorId, quorumNumber, operatorIndex);\r\n    }\r\n\r\n    /**\r\n     * @notice Update `_operatorIndexHistory` with a new operator id for the current block\r\n     * @dev If the lastUpdate was made in the this block, update the entry.\r\n     * Otherwise, push a new historical entry.\r\n     */\r\n    function _updateOperatorIndexHistory(\r\n        uint8 quorumNumber,\r\n        uint32 operatorIndex,\r\n        OperatorUpdate storage lastUpdate,\r\n        bytes32 newOperatorId\r\n    ) internal {\r\n        if (lastUpdate.fromBlockNumber == uint32(block.number)) {\r\n            lastUpdate.operatorId = newOperatorId;\r\n        } else {\r\n            _operatorIndexHistory[quorumNumber][operatorIndex].push(OperatorUpdate({\r\n                operatorId: newOperatorId,\r\n                fromBlockNumber: uint32(block.number)\r\n            }));\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the most recent operator count update for a quorum\r\n    /// @dev Reverts if the quorum does not exist (history length == 0)\r\n    function _latestQuorumUpdate(uint8 quorumNumber) internal view returns (QuorumUpdate storage) {\r\n        uint256 historyLength = _operatorCountHistory[quorumNumber].length;\r\n        return _operatorCountHistory[quorumNumber][historyLength - 1];\r\n    }\r\n\r\n    /// @notice Returns the most recent operator id update for an index\r\n    /// @dev Reverts if the index has never been used (history length == 0)\r\n    function _latestOperatorIndexUpdate(uint8 quorumNumber, uint32 operatorIndex) internal view returns (OperatorUpdate storage) {\r\n        uint256 historyLength = _operatorIndexHistory[quorumNumber][operatorIndex].length;\r\n        return _operatorIndexHistory[quorumNumber][operatorIndex][historyLength - 1];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total number of operators of the service for the given `quorumNumber` at the given `blockNumber`\r\n     * @dev Reverts if the quorum does not exist, or if the blockNumber is from before the quorum existed\r\n     */\r\n    function _operatorCountAtBlockNumber(\r\n        uint8 quorumNumber, \r\n        uint32 blockNumber\r\n    ) internal view returns (uint32){\r\n        uint256 historyLength = _operatorCountHistory[quorumNumber].length;\r\n\r\n        // Loop backwards through _operatorCountHistory until we find an entry that preceeds `blockNumber`\r\n        for (uint256 i = historyLength; i > 0; i--) {\r\n            QuorumUpdate memory quorumUpdate = _operatorCountHistory[quorumNumber][i - 1];\r\n\r\n            if (quorumUpdate.fromBlockNumber <= blockNumber) {\r\n                return quorumUpdate.numOperators;\r\n            }\r\n        }\r\n        \r\n        revert(\"IndexRegistry._operatorCountAtBlockNumber: quorum did not exist at given block number\");\r\n    }\r\n    \r\n    /**\r\n     * @return operatorId at the given `operatorIndex` at the given `blockNumber` for the given `quorumNumber`\r\n     * Precondition: requires that the operatorIndex was used active at the given block number for quorum\r\n     */\r\n    function _operatorIdForIndexAtBlockNumber(\r\n        uint8 quorumNumber, \r\n        uint32 operatorIndex, \r\n        uint32 blockNumber\r\n    ) internal view returns(bytes32) {\r\n        uint256 historyLength = _operatorIndexHistory[quorumNumber][operatorIndex].length;\r\n\r\n        // Loop backward through _operatorIndexHistory until we find an entry that preceeds `blockNumber`\r\n        for (uint256 i = historyLength; i > 0; i--) {\r\n            OperatorUpdate memory operatorIndexUpdate = _operatorIndexHistory[quorumNumber][operatorIndex][i - 1];\r\n\r\n            if (operatorIndexUpdate.fromBlockNumber <= blockNumber) {\r\n                // Special case: this will be OPERATOR_DOES_NOT_EXIST_ID if this operatorIndex was not used at the block number\r\n                return operatorIndexUpdate.operatorId;\r\n            }\r\n        }\r\n\r\n        // we should only hit this if the operatorIndex was never used before blockNumber\r\n        return OPERATOR_DOES_NOT_EXIST_ID;\r\n    }\r\n\r\n    /*******************************************************************************\r\n                                 VIEW FUNCTIONS\r\n    *******************************************************************************/\r\n\r\n    /// @notice Returns the _operatorIndexHistory entry for the specified `operatorIndex` and `quorumNumber`\r\n    /// at the specified `arrayIndex`\r\n    function getOperatorUpdateAtIndex(uint8 quorumNumber, uint32 operatorIndex, uint32 arrayIndex) external view returns (OperatorUpdate memory) {\r\n        return _operatorIndexHistory[quorumNumber][operatorIndex][arrayIndex];\r\n    }\r\n\r\n    /// @notice Returns the _operatorCountHistory entry for the specified `quorumNumber` at the specified `quorumIndex`\r\n    function getQuorumUpdateAtIndex(uint8 quorumNumber, uint32 quorumIndex) external view returns (QuorumUpdate memory) {\r\n        return _operatorCountHistory[quorumNumber][quorumIndex];\r\n    }\r\n\r\n    /// @notice Returns the most recent QuorumUpdate entry for the specified quorumNumber\r\n    /// @dev Reverts if the quorum does not exist\r\n    function getLatestQuorumUpdate(uint8 quorumNumber) external view returns (QuorumUpdate memory) {\r\n        return _latestQuorumUpdate(quorumNumber);\r\n    }\r\n\r\n    /// @notice Returns the most recent OperatorUpdate entry for the specified quorumNumber and operatorIndex\r\n    /// @dev Reverts if there is no update for the given operatorIndex\r\n    function getLatestOperatorUpdate(uint8 quorumNumber, uint32 operatorIndex) external view returns (OperatorUpdate memory) {\r\n        return _latestOperatorIndexUpdate(quorumNumber, operatorIndex);\r\n    }\r\n\r\n    /// @notice Returns an ordered list of operators of the services for the given `quorumNumber` at the given `blockNumber`\r\n    function getOperatorListAtBlockNumber(\r\n        uint8 quorumNumber, \r\n        uint32 blockNumber\r\n    ) external view returns (bytes32[] memory){\r\n        uint32 operatorCount = _operatorCountAtBlockNumber(quorumNumber, blockNumber);\r\n        bytes32[] memory operatorList = new bytes32[](operatorCount);\r\n        for (uint256 i = 0; i < operatorCount; i++) {\r\n            operatorList[i] = _operatorIdForIndexAtBlockNumber(quorumNumber, uint32(i), blockNumber);\r\n            require(\r\n                operatorList[i] != OPERATOR_DOES_NOT_EXIST_ID, \r\n                \"IndexRegistry.getOperatorListAtBlockNumber: operator does not exist at the given block number\"\r\n            );\r\n        }\r\n        return operatorList;\r\n    }\r\n\r\n    /// @notice Returns the total number of operators for a given `quorumNumber`\r\n    /// @dev This will revert if the quorum does not exist\r\n    function totalOperatorsForQuorum(uint8 quorumNumber) external view returns (uint32){\r\n        return _latestQuorumUpdate(quorumNumber).numOperators;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IRegistryCoordinator\",\"name\":\"_registryCoordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOperatorIndex\",\"type\":\"uint32\"}],\"name\":\"QuorumIndexUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_DOES_NOT_EXIST_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentOperatorIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"operatorIndex\",\"type\":\"uint32\"}],\"name\":\"getLatestOperatorUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IIndexRegistry.OperatorUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getLatestQuorumUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numOperators\",\"type\":\"uint32\"}],\"internalType\":\"struct IIndexRegistry.QuorumUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getOperatorListAtBlockNumber\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"operatorIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"arrayIndex\",\"type\":\"uint32\"}],\"name\":\"getOperatorUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IIndexRegistry.OperatorUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"quorumIndex\",\"type\":\"uint32\"}],\"name\":\"getQuorumUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numOperators\",\"type\":\"uint32\"}],\"internalType\":\"struct IIndexRegistry.QuorumUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"initializeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"totalOperatorsForQuorum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IndexRegistry", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "000000000000000000000000414696e4f7f06273973e89bfd3499e8666d63bd4", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bf1be339d9d816ef1ff8f9e2e4edc168ccfcc263b0c973c30cb83b37d5b0f96b"}