{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/staking/KerosineDenominator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Parameters} from \\\"../params/Parameters.sol\\\";\\nimport {Kerosine} from \\\"../staking/Kerosine.sol\\\";\\n\\ncontract KerosineDenominator is Parameters {\\n\\n  Kerosine public kerosine;\\n\\n  constructor(\\n    Kerosine _kerosine\\n  ) {\\n    kerosine = _kerosine;\\n  }\\n\\n  function denominator() external view returns (uint) {\\n    // @dev: We subtract all the Kerosene in the multi-sig.\\n    //       We are aware that this is not a great solution. That is\\n    //       why we can switch out Denominator contracts.\\n    return kerosine.totalSupply() - kerosine.balanceOf(MAINNET_OWNER);\\n  } \\n}\\n\"\r\n    },\r\n    \"src/params/Parameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract Parameters {\\n\\n  // ---------------- Goerli ----------------\\n  address GOERLI_OWNER           = 0xEd6715D2172BFd50C2DBF608615c2AB497904803;\\n  address GOERLI_DNFT            = 0x952E31dFeEB29F5398a36602E0E276F2b09B6651;\\n  address GOERLI_WETH            = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;\\n  address GOERLI_WETH_ORACLE     = 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e;\\n  uint    GOERLI_FEE             = 0.001e18; // 0.1%\\n  address GOERLI_FEE_RECIPIENT   = 0xDeD796De6a14E255487191963dEe436c45995813;\\n  address GOERLI_VAULT_MANAGER   = 0xf3128Ac07005a5591dF997A8fBd6a75993827144;\\n\\n  // NOTE: There is no stETH on Goerli, so we use the WETH oracle instead.\\n  address GOERLI_CHAINLINK_STETH = 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e;\\n  address GOERLI_WSTETH          = 0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f;\\n  address GOERLI_DYAD            = 0xCf0c2d6aeD80aFD8cB299e7E7F3f311F81C3a766;\\n  address GOERLI_WETH_DYAD_UNI   = 0x1F79BeD01b0fF658dbb47b4005F1B571Ef06D0FD;\\n\\n  // ---------------- Mainnet ----------------\\n  address MAINNET_OWNER           = 0xDeD796De6a14E255487191963dEe436c45995813; \\n  address MAINNET_DNFT            = 0xDc400bBe0B8B79C07A962EA99a642F5819e3b712;\\n  address MAINNET_WETH            = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n  address MAINNET_WETH_ORACLE     = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\n  uint    MAINNET_FEE             = 0.0015e18; // 0.15%\\n  address MAINNET_FEE_RECIPIENT   = 0xDeD796De6a14E255487191963dEe436c45995813;\\n  address MAINNET_VAULT_MANAGER   = 0xfaa785c041181a54c700fD993CDdC61dbBfb420f;\\n  address MAINNET_CHAINLINK_STETH = 0xCfE54B5cD566aB89272946F602D76Ea879CAb4a8;\\n  address MAINNET_WSTETH          = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n  address MAINNET_DYAD            = 0x305B58c5F6B5b6606fb13edD11FbDD5e532d5A26;\\n  address MAINNET_WETH_DYAD_UNI   = 0x1F79BeD01b0fF658dbb47b4005F1B571Ef06D0FD;\\n  address MAINNET_KEROSENE        = 0xf3768D6e78E65FC64b8F12ffc824452130BD5394;\\n  address MAINNET_STAKING         = 0x8e0e695fEC31d5502C2f3E860Fe560Ea80b03E1D;\\n  address MAINNET_WETH_VAULT      = 0xcF97cEc1907CcF9d4A0DC4F492A3448eFc744F6c;\\n  address MAINNET_WSTETH_VAULT    = 0x7aE80418051b2897729Cbdf388b07C5158C557A1;\\n  address MAINNET_VAULT_MANAGER_LICENSER = 0xd8bA5e720Ddc7ccD24528b9BA3784708528d0B85;\\n\\n  // ---------------- Sepolia ----------------\\n  address SEPOLIA_OWNER           = 0xEd6715D2172BFd50C2DBF608615c2AB497904803;\\n  address SEPOLIA_DNFT            = address(0);\\n  address SEPOLIA_WETH            = 0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9;\\n  address SEPOLIA_WETH_ORACLE     = 0x694AA1769357215DE4FAC081bf1f309aDC325306;\\n  uint    SEPOLIA_FEE             = 0.001e18; // 0.1%\\n  address SEPOLIA_FEE_RECIPIENT   = 0xDeD796De6a14E255487191963dEe436c45995813;\\n  address SEPOLIA_VAULT_MANAGER   = address(0);\\n\\n  // NOTE: There is no stETH on Sepolia, so we use the WETH oracle instead.\\n  address SEPOLIA_CHAINLINK_STETH = 0x694AA1769357215DE4FAC081bf1f309aDC325306;\\n  address SEPOLIA_WSTETH          = 0xB82381A3fBD3FaFA77B3a7bE693342618240067b;\\n  address SEPOLIA_DYAD            = address(0);\\n  address SEPOLIA_WETH_DYAD_UNI   = 0x1F79BeD01b0fF658dbb47b4005F1B571Ef06D0FD;\\n}\\n\"\r\n    },\r\n    \"src/staking/Kerosine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"@solmate/src/tokens/ERC20.sol\\\";\\n\\ncontract Kerosine is ERC20(\\\"Kerosene\\\", \\\"KEROSENE\\\", 18) {\\n\\n  constructor() {\\n      _mint(msg.sender, 1_000_000_000 * 10**18); // 1 billion\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@solmate/=lib/solmate/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\r\n      \"solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract Kerosine\",\"name\":\"_kerosine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kerosine\",\"outputs\":[{\"internalType\":\"contract Kerosine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KerosineDenominator", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f3768d6e78e65fc64b8f12ffc824452130bd5394", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}