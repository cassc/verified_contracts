{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/furnace.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n/**\\n\\nWelcome to the First Deflationary ERC-404 \\nTest your metal, thest your claim, test your fate against the flame.\\n\\nhttps://t.me/thefurnaceerc404\\nhttps://twitter.com/furnace404\\n\\n*/\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC404.sol\\\";\\nimport \\\"./Base64.sol\\\";\\n\\ncontract Furnace is ERC404 {\\n    string[8] private baseColors =\\n        [\\\"#AE8B61\\\", \\\"#DBB181\\\", \\\"#E8AA96\\\", \\\"#FFC2C2\\\", \\\"#EECFA0\\\", \\\"#C9CDAF\\\", \\\"#D5C6E1\\\", \\\"#EAD9D9\\\"];\\n    string[7] private thirdNames = [\\\"Calcite\\\", \\\"Amethyst\\\", \\\"Bloodstone\\\", \\\"Magnesite\\\", \\\"Pearl\\\", \\\"Siderite\\\", \\\"Quartzite\\\"];\\n    string[7] private thirdLayers = [\\n        '<path fill=\\\"#000\\\" d=\\\"M16 17h1v1h-1z\\\"/>',\\n        '<path fill=\\\"#000\\\" d=\\\"M16 19h1v1h-1z\\\"/>',\\n        '<path stroke=\\\"#A66E2C\\\" d=\\\"M16.5 20v-2m3.5-.5h-3m3.5.5v2\\\"/><path stroke=\\\"#C28946\\\" d=\\\"M16 17.5h1m3 0h1\\\"/>',\\n        '<path fill=\\\"#7DA269\\\" d=\\\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\\\"/><path fill=\\\"#000\\\" fill-opacity=\\\".4\\\" d=\\\"M17 12h-2v1h2v-1zM20 12v1h2v-1h-2zM22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1zM16 14h-1v1h1v-1zM21 14h-1v1h1v-1zM18 19h-1v1h1v-1z\\\"/><path fill=\\\"red\\\" d=\\\"M15 13h1v1h-1v-1zM20 13h1v1h-1v-1z\\\"/><path fill=\\\"#000\\\" d=\\\"M17 13h-1v1h1v-1zM22 13h-1v1h1v-1zM20 16v-1h-2v1h2zM17 18v1h3v-1h-3z\\\"/>',\\n        '<path fill=\\\"#C8FBFB\\\" d=\\\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\\\"/><path stroke=\\\"#75BDBD\\\" d=\\\"M15.5 12v1m5-1v1\\\"/><path fill=\\\"#000\\\" d=\\\"M21 19v-1h-5v1h5zM15 13h1v-1h1v1h-1v1h-1v-1zM21 12h1v1h-1v1h-1v-1h1v-1z\\\"/><path fill=\\\"#9BE0E0\\\" d=\\\"M22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1zM17 13h-1v1h1v-1zM22 13h-1v1h1v-1zM19 14h-1v3h1v-3z\\\"/>',\\n        '<path fill=\\\"#61503D\\\" d=\\\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\\\"/><path fill=\\\"#958A7D\\\" stroke=\\\"#958A7D\\\" d=\\\"M16.5 19.5v-1h-1v-1h1v-2h-1v-1h-1v-3h2v-1h3v1h2v4h-1v2h1v1h-1v1h-4z\\\"/><path fill=\\\"#000\\\" fill-opacity=\\\".4\\\" d=\\\"M17 12h-2v1h2v-1zM20 12v1h2v-1h-2zM22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1z\\\"/><path fill=\\\"#000\\\" d=\\\"M16 13h-1v1h1v-1zM21 13h-1v1h1v-1zM18 16v-1h-1v1h1zM17 18v1h3v-1h-3zM19.724 16v-1h-1v1h1z\\\"/><path fill=\\\"#AAA197\\\" d=\\\"M17 14h-1v-1h1v1zM22 14h-1v-1h1v1z\\\"/>',\\n        \\\"\\\"\\n    ];\\n    string[8] private fourthNames = [\\n        \\\"Air\\\",\\n        \\\"Ether\\\",\\n        \\\"Fire\\\",\\n        \\\"Water\\\",\\n        \\\"Earth\\\",\\n        \\\"Ice\\\",\\n        \\\"Stone\\\",\\n        \\\"None\\\"\\n    ];\\n    string[8] private fourthLayers = [\\n        '<path fill=\\\"#F0F0F0\\\" d=\\\"M12 11h11v4h-9v-3h-2v-1z\\\"/><path fill=\\\"#FD3232\\\" d=\\\"M19 12h3v2h-3z\\\"/><path fill=\\\"#328DFD\\\" d=\\\"M15 12h3v2h-3z\\\"/>',\\n        '<path fill=\\\"#B4B4B4\\\" d=\\\"M14 11h9v4h-9z\\\"/><path stroke=\\\"#000\\\" d=\\\"M14 15.5h8m-8-5h8M13.5 14v1m10-4v4m-10-4v1m2 .5v1h6v-1h-6z\\\"/><path stroke=\\\"#8D8D8D\\\" d=\\\"M13.5 12v2m1 0v1m0-4v1m8-1v1m0 2v1\\\"/>',\\n        '<path fill=\\\"#000\\\" d=\\\"M13 13v-1h9v3h-2v-2h-3v2h-2v-2h-2z\\\"/>',\\n        '<path fill=\\\"#000\\\" d=\\\"M13 11h9v1h-4v2h-1v1h-2v-1h-1v-2h-1v-1z\\\"/>',\\n        '<path stroke=\\\"#000\\\" d=\\\"M13 11.5h9m-7 3h2m.5-.5v-2m2 0v2m.5.5h2m-7.5-.5v-2\\\"/><path stroke=\\\"#5C390F\\\" d=\\\"M15 12.5h2m3 0h2\\\"/><path stroke=\\\"#C77514\\\" d=\\\"M15 13.5h2m3 0h2\\\"/>',\\n        '<path fill=\\\"#000\\\" d=\\\"M13 12h11v2h-1v1h-2v-1h-1v-1h-2v1h-1v1h-2v-1h-1v-1h-1v-1z\\\"/>',\\n        '<path fill=\\\"#fff\\\" fill-opacity=\\\".5\\\" d=\\\"M14 12h3v3h-3zM19 12h3v3h-3z\\\"/><path fill=\\\"#000\\\" d=\\\"M13 11h11v2h-1v-1h-4v1h-2v-1h-3v1h-1v-2z\\\"/>',\\n        \\\"\\\"\\n    ];\\n    string[14] private fifthNames = [\\n        \\\"Cobalt\\\",\\n        \\\"Europium\\\",\\n        \\\"Copper\\\",\\n        \\\"Gold\\\",\\n        \\\"Lead\\\",\\n        \\\"Mercury\\\",\\n        \\\"Nitrogen\\\",\\n        \\\"Polonium\\\",\\n        \\\"Europium\\\",\\n        \\\"Carbon\\\",\\n        \\\"Aluminum\\\",\\n        \\\"Radium\\\",\\n        \\\"Silver\\\",\\n        \\\"Titanium\\\"\\n    ];\\n    string[14] private fifthLayers = [\\n        '<path fill=\\\"#3CC300\\\" d=\\\"M14 10h7v1h-7z\\\"/><path fill=\\\"#0060C3\\\" d=\\\"M16 6v4h-4V8h1V7h1V6h2z\\\"/><path fill=\\\"#D60404\\\" d=\\\"M19 6v4h4V8h-1V7h-1V6h-2z\\\"/><path fill=\\\"#E4EB17\\\" d=\\\"M14 9h1V8h1V6h3v2h1v1h1v1h-7V9z\\\"/><path fill=\\\"#000\\\" d=\\\"M17 5h1v1h-1z\\\"/><path fill=\\\"#0060C3\\\" d=\\\"M15 4h5v1h-5z\\\"/>',\\n        '<path fill=\\\"#794B11\\\" d=\\\"M8 7h1v1h4V4h1V3h2v1h3V3h2v1h1v4h4V7h1v2h-1v1H9V9H8V7z\\\"/><path fill=\\\"#502F05\\\" d=\\\"M12 7h11v1H12z\\\"/>',\\n        '<path fill=\\\"#3D2F1E\\\" d=\\\"M9 9h1V8h3V6h1V4h1V3h5v1h1v2h1v2h3v1h1v1H9V9z\\\"/><path fill=\\\"#000\\\" d=\\\"M12 7h11v1H12z\\\"/>',\\n        '<path fill=\\\"#26314A\\\" d=\\\"M12 5h11v5H12z\\\"/><path stroke=\\\"#fff\\\" d=\\\"M13 8.5h1m1 0h1m1 0h1m1 0h1m1 0h1\\\"/><path stroke=\\\"#FFD800\\\" d=\\\"M17 6.5h1\\\"/><path fill=\\\"#000\\\" fill-rule=\\\"evenodd\\\" d=\\\"M23 6V5h-4V4h-3v1h-4v1h-1v2h1v2h3v1h9V9h-1V8h1V6h-1zm0 0h-4V5h-3v1h-4v2h1v1h1V8h1v2h8V9h-1V8h1V6zm-7 3h1V8h-1v1zm2 0h1V8h-1v1zm2 0h1V8h-1v1z\\\" clip-rule=\\\"evenodd\\\"/>',\\n        '<path fill=\\\"#4C4C4C\\\" d=\\\"M13 7h9v4h-9z\\\"/><path fill=\\\"#000\\\" d=\\\"M13 10h-1V8h1V7h1V6h7v1h2v2h-1V8h-1V7h-7v1h-1v2z\\\"/><path stroke=\\\"#636363\\\" d=\\\"M14 9.5h1m0-1h1\\\"/>',\\n        '<path fill=\\\"#CA4E11\\\" d=\\\"M14 7h-1v3h9V7h-1V6h-7v1z\\\"/><path fill=\\\"#933709\\\" d=\\\"M12 8h11v2h-1V9h-1v1h-1V9h-1v1h-1V9h-1v1h-1V9h-1v1h-1V9h-1v1h-1V8z\\\"/><path stroke=\\\"#000\\\" d=\\\"M11.5 10V8m1 0V7m1 0V6m.5-.5h7m.5.5v1m1 0v1m1 0v2\\\"/>',\\n        '<path fill=\\\"#1A43C8\\\" d=\\\"M13 7h9v3H10v3H9v-3H8V9h5V7z\\\"/><path stroke=\\\"#1637A4\\\" d=\\\"M22 9.5h-1m0 1h-3m0-1h-4m8.5-.5V7m-.5-.5h-8m0 1h-1m0 1h-1m0 1h-1m0 1h-1m0-1H9\\\"/><path stroke=\\\"#142C7C\\\" d=\\\"M11 11.5h-1m2-1h-1m2-1h-1\\\"/>',\\n        '<path fill=\\\"#000\\\" d=\\\"M14 7V5h1V4h1v1h1V4h1v1h1V4h1v1h1v2h1v2h-3v1h-1v1h-1v-1h-1V9h-3V7h1zM12 9v1h1V9h-1z\\\"/>',\\n        '<path stroke=\\\"#000\\\" d=\\\"M12 4.5h2m4 0h5m-14 1h1m2 0h10m2 0h2m-17 1h16m-16 1h17m-16 1h15m-16 1h9m2 0h5m-17 1h7m2 0h2m2 0h3m-14 1h4m9 0h2m-16 1h5m9 0h2m-16 1h1m1 0h3m9.5-.5v2M10 14.5h4m-4 1h2\\\"/>',\\n        '<path fill=\\\"#000\\\" d=\\\"M14 11h1v1h-1zM15 10h1v1h-1zM18 9h1v3h-1zM12 9h6v1h-6zM13 10h1v1h-1zM11 10h1v1h-1zM11 8h3v1h-3zM12 7h2v1h-2zM13 6h2v1h-2zM14 5h6v1h-6zM21 5h1v2h-1zM21 7h3v1h-3zM21 10h3v1h-3zM20 8h3v2h-3zM15 7h4v2h-4z\\\"/><path fill=\\\"#000\\\" d=\\\"M17 6h4v2h-4z\\\"/><path fill=\\\"#000\\\" d=\\\"M14 6h4v3h-4z\\\"/><path stroke=\\\"#000\\\" d=\\\"M14 5.5h6m1 0h1m-9 1h9m-10 1h12m-13 1h8m1 0h3m-11 1h7m1 0h3m-12 1h1m1 0h1m1 0h1m-2 1h1m3.5-1.5v2m2.5-1.5h3\\\"/>',\\n        '<path fill=\\\"#515151\\\" d=\\\"M13 6h9v4h-9V6z\\\"/><path stroke=\\\"#000\\\" d=\\\"M12 10.5h12.5V9m-.5-.5h-8m0 1h-1m8-2h-1m0-1h-1m0-1h-7m0 1h-1m-.5.5v3\\\"/><path stroke=\\\"#353535\\\" d=\\\"M24 9.5h-8m-1-3h-1m0 1h-1\\\"/>',\\n        '<path fill=\\\"#8119B7\\\" d=\\\"M12 7h1V6h1V5h7v1h1v2h3v1h1v1H12V7z\\\"/><path stroke=\\\"#B261DC\\\" d=\\\"M21 7.5h-1m0-1h-1\\\"/>',\\n        '<path fill=\\\"#000\\\" d=\\\"M13 2h9v1h1v5h1v1h1v1H10V9h1V8h1V3h1V2z\\\"/><path fill=\\\"#DC1D1D\\\" d=\\\"M12 7h11v1H12z\\\"/>',\\n        \\\"\\\"\\n    ];\\n    string[5] private sixthNames = [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\"];\\n    string[5] private sixthLayers = [\\n        '<path fill=\\\"#FFD926\\\" d=\\\"M12 14h1v1h-1z\\\"/>',\\n        '<path stroke=\\\"#000\\\" d=\\\"M20 17.5h7m1 1h-1m0 1h-7\\\"/><path stroke=\\\"#595959\\\" d=\\\"M20 18.5h6\\\"/><path stroke=\\\"#0040FF\\\" d=\\\"M26 18.5h1\\\"/>',\\n        '<path stroke=\\\"#000\\\" d=\\\"M20 17.5h7m1 1h-1m0 1h-7\\\"/><path stroke=\\\"#D7D1D1\\\" d=\\\"M20 18.5h6\\\"/><path stroke=\\\"#E7A600\\\" d=\\\"M26 18.5h1\\\"/><path fill=\\\"#fff\\\" fill-opacity=\\\".4\\\" d=\\\"M26 11h1v5h-1z\\\"/>',\\n        '<path stroke=\\\"#000\\\" d=\\\"M20 18.5h1m0 1h1m0 1h1m0 1h1.5v-2h4V22m-1 0v1m-.5.5h-4m0-1h-1m0-1h-1m0-1h-1m0-1h-1\\\"/><path stroke=\\\"#855114\\\" d=\\\"M20 19.5h1m0 1h1m0 1h1m0 1h3m-1-2h3m-2 1h1\\\"/><path stroke=\\\"#683C08\\\" d=\\\"M25 21.5h1m0 1h1m0-1h1\\\"/><path stroke=\\\"#fff\\\" stroke-opacity=\\\".4\\\" d=\\\"M26.5 12v1.5m0 0H25m1.5 0H28M26.5 15v1m0 1v1\\\"/>',\\n        \\\"\\\"\\n    ];\\n\\n    struct WormzObject {\\n        uint256 baseColor;\\n        uint256 layerThree;\\n        uint256 layerFour;\\n        uint256 layerFive;\\n        uint256 layerSix;\\n    }\\n\\n    function randomWormz(uint256 tokenId) internal pure returns (WormzObject memory) {\\n        WormzObject memory wormz;\\n\\n        wormz.baseColor = getBaseColor(tokenId);\\n        wormz.layerThree = getLayerThree(tokenId);\\n        wormz.layerFour = getLayerFour(tokenId);\\n        wormz.layerFive = getLayerFive(tokenId);\\n        wormz.layerSix = getLayerSix(tokenId);\\n\\n        return wormz;\\n    }\\n\\n    function getTraits(WormzObject memory wormz) internal view returns (string memory) {\\n        string[20] memory parts;\\n\\n        parts[0] = ', \\\"attributes\\\": [{\\\"trait_type\\\": \\\"Type\\\",\\\"value\\\": \\\"';\\n        if (wormz.layerThree == 3) {\\n            parts[1] = 'Fire\\\"}, {\\\"trait_type\\\": \\\"Element\\\",\\\"value\\\": \\\"Fire\\\"},';\\n        }\\n        if (wormz.layerThree == 4) {\\n            parts[2] = 'Calcite\\\"}, {\\\"trait_type\\\": \\\"Element\\\",\\\"value\\\": \\\"Calcite\\\"},';\\n        }\\n        if (wormz.layerThree == 5) {\\n            parts[3] = 'Pearl\\\"}, {\\\"trait_type\\\": \\\"Element\\\",\\\"value\\\": \\\"Pearl\\\"},';\\n        }\\n        if (wormz.layerThree < 3 || wormz.layerThree > 5) {\\n            parts[4] = 'Bloodstone\\\"}, {\\\"trait_type\\\": \\\"Element\\\",\\\"value\\\": \\\"';\\n            parts[5] = thirdNames[wormz.layerThree];\\n            parts[6] = '\\\"},';\\n        }\\n        parts[7] = ' {\\\"trait_type\\\": \\\"Eyewear\\\",\\\"value\\\": \\\"';\\n        parts[8] = fourthNames[wormz.layerFour];\\n        parts[9] = '\\\"}, {\\\"trait_type\\\": \\\"Metal\\\",\\\"value\\\": \\\"';\\n        parts[10] = fifthNames[wormz.layerFive];\\n        parts[11] = '\\\"}, {\\\"trait_type\\\": \\\"Weight\\\",\\\"value\\\": \\\"';\\n        parts[12] = sixthNames[wormz.layerSix];\\n        parts[13] = '\\\"}], ';\\n\\n        string memory output =\\n            string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7]));\\n        output = string(abi.encodePacked(output, parts[8], parts[9], parts[10], parts[11], parts[12], parts[13]));\\n        return output;\\n    }\\n\\n    function random(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n\\n    function getBaseColor(uint256 tokenId) internal pure returns (uint256) {\\n        uint256 rand = random(string(abi.encodePacked(\\\"BASE COLOR\\\", toString(tokenId))));\\n\\n        uint256 rn1 = rand % 79;\\n        uint256 bc = 0;\\n\\n        if (rn1 >= 10 && rn1 < 20) bc = 1;\\n        if (rn1 >= 20 && rn1 < 30) bc = 2;\\n        if (rn1 >= 30 && rn1 < 40) bc = 3;\\n        if (rn1 >= 40 && rn1 < 50) bc = 4;\\n        if (rn1 >= 50 && rn1 < 60) bc = 5;\\n        if (rn1 >= 60 && rn1 < 70) bc = 6;\\n        if (rn1 >= 70) bc = 7;\\n\\n        return bc;\\n    }\\n\\n    function getLayerThree(uint256 tokenId) internal pure returns (uint256) {\\n        uint256 rand = random(string(abi.encodePacked(\\\"LAYER THREE\\\", toString(tokenId))));\\n\\n        uint256 rn3 = rand % 170;\\n        uint256 l3 = 0;\\n\\n        if (rn3 >= 46 && rn3 < 64) l3 = 1;\\n        if (rn3 >= 64 && rn3 < 81) l3 = 2;\\n        if (rn3 >= 81 && rn3 < 85) l3 = 3;\\n        if (rn3 == 85) l3 = 4;\\n        if (rn3 >= 86 && rn3 < 88) l3 = 5;\\n        if (rn3 >= 88) l3 = 6;\\n\\n        return l3;\\n    }\\n\\n    function getLayerFour(uint256 tokenId) internal pure returns (uint256) {\\n        uint256 rand = random(string(abi.encodePacked(\\\"LAYER FOUR\\\", toString(tokenId))));\\n\\n        uint256 rn4 = rand % 500;\\n        uint256 l4 = 0;\\n\\n        if (rn4 >= 41 && rn4 < 81) l4 = 1;\\n        if (rn4 >= 81 && rn4 < 121) l4 = 2;\\n        if (rn4 >= 121 && rn4 < 161) l4 = 3;\\n        if (rn4 >= 161 && rn4 < 201) l4 = 4;\\n        if (rn4 >= 201 && rn4 < 261) l4 = 5;\\n        if (rn4 >= 261 && rn4 < 281) l4 = 6;\\n        if (rn4 >= 281) l4 = 7;\\n\\n        return l4;\\n    }\\n\\n    function getLayerFive(uint256 tokenId) internal pure returns (uint256) {\\n        uint256 rand = random(string(abi.encodePacked(\\\"LAYER FIVE\\\", toString(tokenId))));\\n\\n        uint256 rn5 = rand % 240;\\n        uint256 l5 = 0;\\n\\n        if (rn5 >= 10 && rn5 < 20) l5 = 1;\\n        if (rn5 >= 20 && rn5 < 30) l5 = 2;\\n        if (rn5 >= 30 && rn5 < 40) l5 = 3;\\n        if (rn5 >= 40 && rn5 < 50) l5 = 4;\\n        if (rn5 >= 50 && rn5 < 60) l5 = 5;\\n        if (rn5 >= 60 && rn5 < 70) l5 = 6;\\n        if (rn5 >= 70 && rn5 < 80) l5 = 7;\\n        if (rn5 >= 80 && rn5 < 90) l5 = 8;\\n        if (rn5 >= 90 && rn5 < 100) l5 = 9;\\n        if (rn5 >= 100 && rn5 < 110) l5 = 10;\\n        if (rn5 >= 110 && rn5 < 120) l5 = 11;\\n        if (rn5 >= 120 && rn5 < 130) l5 = 12;\\n        if (rn5 >= 130) l5 = 13;\\n\\n        return l5;\\n    }\\n\\n    function getLayerSix(uint256 tokenId) internal pure returns (uint256) {\\n        uint256 rand = random(string(abi.encodePacked(\\\"LAYER SIX\\\", toString(tokenId))));\\n\\n        uint256 rn6 = rand % 120;\\n        uint256 l6 = 0;\\n\\n        if (rn6 >= 10 && rn6 < 20) l6 = 1;\\n        if (rn6 >= 20 && rn6 < 30) l6 = 2;\\n        if (rn6 >= 30 && rn6 < 40) l6 = 3;\\n        if (rn6 >= 40) l6 = 4;\\n\\n        return l6;\\n    }\\n\\n    function getSVG(WormzObject memory wormz) internal view returns (string memory) {\\n        string[9] memory parts;\\n\\n        parts[0] =\\n            '<svg id=\\\"x\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 30 30\\\"><path fill=\\\"#638596\\\" d=\\\"M0 0h30v30H0z\\\"/>';\\n        parts[1] = '<path fill=\\\"';\\n        parts[2] = baseColors[wormz.baseColor];\\n        parts[3] =\\n            '\\\" d=\\\"M22 10v12h-2v2h-1v1H5v-1h1v-1h1v-1h1v-1h1v-1h2v-1h2v-9h1V9h2V8h-1V7h3v1h1v1h2v1h1z\\\"/><path fill=\\\"#000\\\" d=\\\"M4 24v2h16v-2h-1v1H5v-1H4zM6 23H5v1h1v-1zM7 22H6v1h1v-1zM8 21H7v1h1v-1zM9 20H8v1h1v-1zM11 19H9v1h2v-1zM12 10v8h-1v1h2v-9h-1zM14 10V9h-1v1h1zM15 8V7h-1v2h2V8h-1zM18 6h-3v1h3V6zM19 7h-1v1h1V7zM21 8h-2v1h2V8zM23 22V9h-2v1h1v12h1zM21 24v-1h1v-1h-2v2h1zM15 13h1v1h-1v-1zM20 13h1v1h-1v-1zM18 15h2v1h-2v-1zM17 18h3v1h-3v-1z\\\"/><path fill=\\\"#000\\\" fill-opacity=\\\".2\\\" d=\\\"M17 13h-1v1h1v-1zM22 13h-1v1h1v-1z\\\"/><path fill=\\\"#000\\\" fill-opacity=\\\".4\\\" d=\\\"M17 12h-2v1h2v-1zM20 12v1h2v-1h-2zM22 21h-9v1h1v1h6v-1h2v-1zM12 19h-1v6h2v-1h-1v-5zM10 25v-5H9v5h1zM8 25v-3H7v3h1zM6 24H5v1h1v-1z\\\"/>';\\n        parts[4] = thirdLayers[wormz.layerThree];\\n        parts[5] = fourthLayers[wormz.layerFour];\\n        parts[6] = fifthLayers[wormz.layerFive];\\n        parts[7] = sixthLayers[wormz.layerSix];\\n        parts[8] = \\\"<style>#x{shape-rendering: crispedges;}</style></svg>\\\";\\n\\n        string memory output = string(\\n            abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8])\\n        );\\n\\n        return output;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        WormzObject memory wormz = randomWormz(tokenId);\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Furnace #',\\n                        toString(tokenId),\\n                        '\\\", \\\"description\\\": \\\"A fully on-chain game utilising the experiemental token standard, ERC-404 which enables persistent liquidity and semi-fungibility.\\\"',\\n                        getTraits(wormz),\\n                        '\\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(getSVG(wormz))),\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n        json = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n        return json;\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    uint256 INIT_SUPPLY = 10_000 * 10 ** 18;\\n    uint256 public GARDEN_SUPPLY = 10_000 * 10 ** 18;\\n    bool public gardenLocked;\\n    address public garden;\\n\\n    function setGarden(address _garden) external onlyOwner returns (address) {\\n        require(!gardenLocked, \\\"garden locked!\\\");\\n        if (garden != address(0)) {\\n            balanceOf[garden] = 0;\\n            whitelist[garden] = false;\\n        }\\n        garden = _garden;\\n        whitelist[_garden] = true;\\n        balanceOf[_garden] = GARDEN_SUPPLY;\\n        return garden;\\n    }\\n\\n    function lockGarden() external onlyOwner {\\n        gardenLocked = true;\\n    }\\n\\n    constructor(address _owner) ERC404(\\\"The Furnace\\\", \\\"FURNACE\\\", 18, 1_000, _owner) {\\n        balanceOf[_owner] = INIT_SUPPLY;\\n        whitelist[_owner] = true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for { let i := 0 } lt(i, len) { } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n// import { console2 } from \\\"../lib/forge-std/src/console2.sol\\\";\\n\\nabstract contract ERC721Receiver {\\n    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\\n        return ERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\\n/// @notice ERC404\\n///         A gas-efficient, mixed ERC20 / ERC721 implementation\\n///         with native liquidity and fractionalization.\\n///\\n///         This is an experimental standard designed to integrate\\n///         with pre-existing ERC20 / ERC721 support as smoothly as\\n///         possible.\\n///\\n/// @dev    In order to support full functionality of ERC20 and ERC721\\n///         supply assumptions are made that slightly constraint usage.\\n///         Ensure decimals are sufficiently large (standard 18 recommended)\\n///         as ids are effectively encoded in the lowest range of amounts.\\n///\\n///         NFTs are spent on ERC20 functions in a FILO queue, this is by\\n///         design.\\n///\\nabstract contract ERC404 is Ownable {\\n    // Events\\n    event ERC20Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n    event ERC721Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    // Errors\\n    error NotFound();\\n    error AlreadyExists();\\n    error InvalidRecipient();\\n    error InvalidSender();\\n    error UnsafeRecipient();\\n\\n    // Metadata\\n    /// @dev Token name\\n    string public name;\\n\\n    /// @dev Token symbol\\n    string public symbol;\\n\\n    /// @dev Decimals for fractional representation\\n    uint8 public immutable decimals;\\n\\n    /// @dev Total supply in fractionalized representation\\n    uint256 public immutable totalSupply;\\n\\n    /// @dev Current mint counter, monotonically increasing to ensure accurate ownership\\n    uint256 public minted;\\n\\n    // Mappings\\n    /// @dev Balance of user in fractional representation\\n    mapping(address => uint256) public balanceOf;\\n\\n    /// @dev Allowance of user in fractional representation\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @dev Approval in native representaion\\n    mapping(uint256 => address) public getApproved;\\n\\n    /// @dev Approval for all in native representation\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /// @dev Owner of id in native representation\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    /// @dev Array of owned ids in native representation\\n    mapping(address => uint256[]) internal _owned;\\n\\n    /// @dev Tracks indices for the _owned mapping\\n    mapping(uint256 => uint256) internal _ownedIndex;\\n\\n    /// @dev Addresses whitelisted from minting / burning for gas savings (pairs, routers, etc)\\n    mapping(address => bool) public whitelist;\\n    mapping(address => bool) greylist;\\n    uint256 greylistTimestamp;\\n    bool greylistEnabled;\\n\\n    // Constructor\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        uint256 _totalNativeSupply,\\n        address _owner\\n    )\\n        Ownable(_owner)\\n    {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        totalSupply = _totalNativeSupply * (10 ** decimals);\\n        greylistTimestamp = block.timestamp + 120 minutes;\\n    }\\n\\n    /// @notice Initialization function to set pairs / etc\\n    ///         saving gas by avoiding mint / burn on unnecessary targets\\n    function setWhitelist(address target, bool state) public onlyOwner {\\n        whitelist[target] = state;\\n    }\\n\\n    function setGreylist(address[] calldata target, bool state) public onlyOwner {\\n        require(greylistTimestamp > block.timestamp, \\\"greylist over\\\");\\n        greylistEnabled = true;\\n        for (uint256 i = 0; i < target.length; i++) {\\n            greylist[target[i]] = state;\\n        }\\n    }\\n\\n    function closeGreylist() public onlyOwner {\\n        greylistEnabled = false;\\n    }\\n\\n    /// @notice Function to find owner of a given native token\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        owner = _ownerOf[id];\\n\\n        if (owner == address(0)) {\\n            revert NotFound();\\n        }\\n    }\\n\\n    /// @notice tokenURI must be implemented by child contract\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /// @notice Function for token approvals\\n    /// @dev This function assumes id / native if amount less than or equal to current max id\\n    function approve(address spender, uint256 amountOrId) public virtual returns (bool) {\\n        if (amountOrId <= minted && amountOrId > 0) {\\n            address owner = _ownerOf[amountOrId];\\n\\n            if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\\n                revert Unauthorized();\\n            }\\n\\n            getApproved[amountOrId] = spender;\\n\\n            emit Approval(owner, spender, amountOrId);\\n        } else {\\n            allowance[msg.sender][spender] = amountOrId;\\n\\n            emit Approval(msg.sender, spender, amountOrId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Function native approvals\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Function for mixed transfers\\n    /// @dev This function assumes id / native if amount less than or equal to current max id\\n    function transferFrom(address from, address to, uint256 amountOrId) public virtual {\\n        if (amountOrId <= minted) {\\n            if (from != _ownerOf[amountOrId]) {\\n                revert InvalidSender();\\n            }\\n\\n            if (to == address(0)) {\\n                revert InvalidRecipient();\\n            }\\n\\n            if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[amountOrId]) {\\n                revert Unauthorized();\\n            }\\n\\n            balanceOf[from] -= _getUnit();\\n\\n            unchecked {\\n                balanceOf[to] += _getUnit();\\n            }\\n\\n            _ownerOf[amountOrId] = to;\\n            delete getApproved[amountOrId];\\n\\n            // update _owned for sender\\n            uint256 updatedId = _owned[from][_owned[from].length - 1];\\n            _owned[from][_ownedIndex[amountOrId]] = updatedId;\\n            // pop\\n            _owned[from].pop();\\n            // update index for the moved id\\n            _ownedIndex[updatedId] = _ownedIndex[amountOrId];\\n            // push token to to owned\\n            _owned[to].push(amountOrId);\\n            // update index for to owned\\n            _ownedIndex[amountOrId] = _owned[to].length - 1;\\n\\n            emit Transfer(from, to, amountOrId);\\n            emit ERC20Transfer(from, to, _getUnit());\\n        } else {\\n            uint256 allowed = allowance[from][msg.sender];\\n\\n            if (allowed != type(uint256).max) {\\n                allowance[from][msg.sender] = allowed - amountOrId;\\n            }\\n\\n            _transfer(from, to, amountOrId);\\n        }\\n    }\\n\\n    /// @notice Function for fractional transfers\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        return _transfer(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Function for native transfers with contract support\\n    function safeTransferFrom(address from, address to, uint256 id) public virtual {\\n        transferFrom(from, to, id);\\n\\n        if (\\n            to.code.length != 0\\n                && ERC721Receiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") != ERC721Receiver.onERC721Received.selector\\n        ) {\\n            revert UnsafeRecipient();\\n        }\\n    }\\n\\n    /// @notice Function for native transfers with contract support and callback data\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data) public virtual {\\n        transferFrom(from, to, id);\\n\\n        if (\\n            to.code.length != 0\\n                && ERC721Receiver(to).onERC721Received(msg.sender, from, id, data)\\n                    != ERC721Receiver.onERC721Received.selector\\n        ) {\\n            revert UnsafeRecipient();\\n        }\\n    }\\n\\n    /// @notice Internal function for fractional transfers\\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\\n        uint256 unit = _getUnit();\\n        uint256 balanceBeforeSender = balanceOf[from];\\n        uint256 balanceBeforeReceiver = balanceOf[to];\\n\\n        balanceOf[from] -= amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        if (greylistEnabled && (!greylist[from] || !greylist[to])) {\\n            revert Unauthorized();\\n        }\\n\\n        // Skip burn for certain addresses to save gas\\n        if (!whitelist[from]) {\\n            uint256 tokens_to_burn = (balanceBeforeSender / unit) - (balanceOf[from] / unit);\\n            for (uint256 i = 0; i < tokens_to_burn; i++) {\\n                _burn(from);\\n            }\\n        }\\n\\n        // Skip minting for certain addresses to save gas\\n        if (!whitelist[to]) {\\n            uint256 tokens_to_mint = (balanceOf[to] / unit) - (balanceBeforeReceiver / unit);\\n            for (uint256 i = 0; i < tokens_to_mint; i++) {\\n                _mint(to);\\n            }\\n        }\\n\\n        emit ERC20Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    // Internal utility logic\\n    function _getUnit() internal view returns (uint256) {\\n        return 10 ** decimals;\\n    }\\n\\n    function _mint(address to) internal virtual {\\n        if (to == address(0)) {\\n            revert InvalidRecipient();\\n        }\\n\\n        unchecked {\\n            minted++;\\n        }\\n\\n        uint256 id = minted;\\n\\n        if (_ownerOf[id] != address(0)) {\\n            revert AlreadyExists();\\n        }\\n\\n        _ownerOf[id] = to;\\n        _owned[to].push(id);\\n        _ownedIndex[id] = _owned[to].length - 1;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(address from) internal virtual {\\n        if (from == address(0)) {\\n            revert InvalidSender();\\n        }\\n\\n        uint256 id = _owned[from][_owned[from].length - 1];\\n        _owned[from].pop();\\n        delete _ownedIndex[id];\\n        delete _ownerOf[id];\\n        delete getApproved[id];\\n\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    function _setNameSymbol(string memory _name, string memory _symbol) internal {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract Ownable {\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    error Unauthorized();\\n    error InvalidOwner();\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) revert Unauthorized();\\n\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        if (_owner == address(0)) revert InvalidOwner();\\n\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function transferOwnership(address _owner) public virtual onlyOwner {\\n        if (_owner == address(0)) revert InvalidOwner();\\n\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(msg.sender, _owner);\\n    }\\n\\n    function revokeOwnership() public virtual onlyOwner {\\n        owner = address(0);\\n\\n        emit OwnershipTransferred(msg.sender, address(0));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GARDEN_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeGreylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"garden\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gardenLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockGarden\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"}],\"name\":\"setGarden\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setGreylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Furnace", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000346314563058edcb3193c08fe791843c2b4dee04", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}