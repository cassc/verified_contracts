{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n// #################################### \\\\\r\n// ##                            ~   ## \\\\\r\n// ##   ~          _~_     ~         ## \\\\\r\n// ##           __(__(__             ## \\\\\r\n// ##          (_((_((_(      ~      ## \\\\\r\n// ##       \\=-:--:--:--.            ## \\\\\r\n// ##~~~~~~~~\\_o__o__o_/~~~~~~~~~~~~~## \\\\\r\n// ## ~   ~    ~      ~~       ~     ## \\\\\r\n// #################################### \\\\\r\n// ####   NO UNAUTHORIZED ACCESS   #### \\\\\r\n// #################################### \\\\\r\n// ####       Deadmanriffs         #### \\\\\r\n// #################################### \\\\\r\n// ####     Pirate Ghost Key       #### \\\\\r\n// #################################### \\\\\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->->->\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->->->\r\ninterface ISushiSwapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->->->\r\ninterface IPool {\r\n    function flashLoan(\r\n        address receiverAddress,\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata interestRateModes,\r\n        address onBehalfOf,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n}\r\n// <-/-/-/-/-/->->->->->->->->->->\r\ninterface IPoolAddressesProvider {\r\n    function getPool() external view returns (address);\r\n}\r\n// <-/-/-/-/-/->->->->->->->->->->\r\nabstract contract FlashLoanReceiverBase {\r\n    IPoolAddressesProvider public addressesProvider;\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    constructor(address _addressesProvider) {\r\n        addressesProvider = IPoolAddressesProvider(_addressesProvider);\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function transferFundsBackToPoolInternal(address asset, uint256 amount) internal {\r\n        IERC20(asset).transfer(address(addressesProvider.getPool()), amount);\r\n    }\r\n}\r\n// <-/-/-/-/-/->->->->->->->->->->\r\ncontract FlashLoanArbitrage is FlashLoanReceiverBase {\r\n    address public owner;\r\n    IUniswapV2Router02 public uniswap;\r\n    ISushiSwapRouter public sushiSwap;\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    event ArbitrageExecuted(address indexed tokenIn, address indexed tokenOut, uint amountIn, uint profit);\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    constructor(address _addressesProvider, address _uniswapRouter, address _sushiSwapRouter) \r\n        FlashLoanReceiverBase(_addressesProvider) \r\n    {\r\n        uniswap = IUniswapV2Router02(_uniswapRouter);\r\n        sushiSwap = ISushiSwapRouter(_sushiSwapRouter);\r\n        owner = msg.sender;\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function findArbitrageOpportunity(address tokenIn, address tokenOut, uint amount) external view returns (bool, uint) {\r\n        uint[] memory amountsOutUniswap = uniswap.getAmountsOut(amount, getPathForUniswap(tokenIn, tokenOut));\r\n        uint amountOutMinUniswap = amountsOutUniswap[amountsOutUniswap.length - 1];\r\n        uint profitUniswap = amountOutMinUniswap - amount;\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        uint[] memory amountsOutSushi = sushiSwap.getAmountsOut(amount, getPathForSushiSwap(tokenIn, tokenOut));\r\n        uint amountOutMinSushi = amountsOutSushi[amountsOutSushi.length - 1];\r\n        uint profitSushi = amountOutMinSushi - amount;\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        if (profitUniswap > 0.05 ether || profitSushi > 0.05 ether) {\r\n            uint totalProfit = profitUniswap + profitSushi;\r\n            return (true, totalProfit);\r\n        } else {\r\n            return (false, 0);\r\n        }\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function executeArbitrage(address tokenIn, address tokenOut, uint amount) external onlyOwner {\r\n        address[] memory assets = new address[](1);\r\n        assets[0] = tokenIn;\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        uint256[] memory amountsToLoan = new uint256[](1);\r\n        amountsToLoan[0] = amount;\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        bytes memory params = abi.encode(tokenIn, tokenOut, amount);\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        IPool(address(addressesProvider.getPool())).flashLoan(\r\n            address(this),\r\n            assets,\r\n            amountsToLoan,\r\n            new uint256[](assets.length),\r\n            address(this),\r\n            params,\r\n            0\r\n        );\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function executeOperation(\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata premiums,\r\n        address initiator,\r\n        bytes calldata params\r\n    ) external returns (bool) {\r\n        require(initiator == address(this), \"Invalid initiator\");\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        // Decode parameters\r\n        (address tokenIn, address tokenOut, uint256 decodedAmount) = abi.decode(params, (address, address, uint256));\r\n        uint256 totalDebt = amounts[0] + premiums[0];\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        // Swap tokens on Uniswap\r\n        {\r\n            uint256 amountOutMinUniswap = uniswap.getAmountsOut(decodedAmount, getPathForUniswap(tokenIn, tokenOut))[1];\r\n            IERC20(tokenIn).approve(address(uniswap), decodedAmount);\r\n            uniswap.swapExactTokensForTokens(decodedAmount, amountOutMinUniswap, getPathForUniswap(tokenIn, tokenOut), address(this), block.timestamp + 120);\r\n        }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        // Swap tokens on SushiSwap\r\n        {\r\n            uint256 tokenOutBalance = IERC20(tokenOut).balanceOf(address(this));\r\n            uint256 amountOutMinSushi = sushiSwap.getAmountsOut(tokenOutBalance, getPathForSushiSwap(tokenOut, tokenIn))[1];\r\n            IERC20(tokenOut).approve(address(sushiSwap), tokenOutBalance);\r\n            sushiSwap.swapExactTokensForTokens(tokenOutBalance, amountOutMinSushi, getPathForSushiSwap(tokenOut, tokenIn), address(this), block.timestamp + 120);\r\n        }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        // Calculate profit and ensure profit is positive\r\n        uint256 profit = IERC20(tokenIn).balanceOf(address(this)) - totalDebt;\r\n        require(profit > 0, \"No profit\");\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        // Transfer profit to owner\r\n        IERC20(tokenIn).transfer(owner, profit);\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        // Repay the flash loan\r\n        IERC20(tokenIn).approve(address(addressesProvider.getPool()), totalDebt);\r\n        transferFundsBackToPoolInternal(assets[0], totalDebt);\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        emit ArbitrageExecuted(tokenIn, tokenOut, decodedAmount, profit);\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n        return true;\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function swapSushiToUni(address tokenIn, address tokenOut, uint amountIn, uint amountOutMin, address to, uint deadline) external returns (uint[] memory amounts) {\r\n        address[] memory path = getPathForSushiSwap(tokenIn, tokenOut);\r\n        return sushiSwap.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function swapUniToSushi(address tokenIn, address tokenOut, uint amountIn, uint amountOutMin, address to, uint deadline) external returns (uint[] memory amounts) {\r\n        address[] memory path = getPathForUniswap(tokenIn, tokenOut);\r\n        return uniswap.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function getPathForUniswap(address tokenIn, address tokenOut) private pure returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n        return path;\r\n    }\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n    function getPathForSushiSwap(address tokenIn, address tokenOut) private pure returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenIn;\r\n        path[1] = tokenOut;\r\n        return path;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n// <-/-/-/-/-/->->->->->->->->->->\r\n// 888888888888888888888888888888888888888888888888888888888888\r\n// 888888888888888888888888888888888888888888888888888888888888\r\n// 8888888888888888888888888P\"\"  \"\"9888888888888888888888888888\r\n// 8888888888888888P\"88888P          988888\"9888888888888888888\r\n// 8888888888888888  \"9888            888P\"  888888888888888888\r\n// 888888888888888888bo \"9  d8o  o8b  P\" od88888888888888888888\r\n// 888888888888888888888bob 98\"  \"8P dod88888888888888888888888\r\n// 888888888888888888888888    db    88888888888888888888888888\r\n// 88888888888888888888888888      8888888888888888888888888888\r\n// 88888888888888888888888P\"9bo  odP\"98888888888888888888888888\r\n// 88888888888888888888P\" od88888888bo \"98888888888888888888888\r\n// 888888888888888888   d88888888888888b   88888888888888888888\r\n// 8888888888888888888oo8888888888888888oo888888888888888888888\r\n// 888888888888888888888888888888888888888888888888888888888888\r\n// <-/-/-/-/-/->->->->->->->->->->", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiSwapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"ArbitrageExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"findArbitrageOpportunity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiSwap\",\"outputs\":[{\"internalType\":\"contract ISushiSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapSushiToUni\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapUniToSushi\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlashLoanArbitrage", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000057835ad21a177dbdd3090bb1cae03eacf78fc6d0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7a974a6ffa2c4075868fda1109b193234fd057b4c7ed11bf9337e96b3f28fb72"}