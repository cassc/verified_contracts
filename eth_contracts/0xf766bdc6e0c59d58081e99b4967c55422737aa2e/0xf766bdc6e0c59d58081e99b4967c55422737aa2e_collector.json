{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/collector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n// these contracts will be deployed on ethereum and binance smart chain to collect fees and the process will happen on polygon network\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Collector\\r\\n * @dev A contract that allows users to buy tokens by sending ether. The rate is set in dollars and fetched using Chainlink's data feed.\\r\\n */\\r\\ncontract collector is Ownable {\\r\\n    uint private _rateInDollars = 2 * 1e8; // 2 Dollars\\r\\n    AggregatorV3Interface internal dataFeed;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when tokens are bought.\\r\\n     * @param buyer The address of the buyer.\\r\\n     * @param ethValue The amount of ether sent.\\r\\n     * @param amount The amount of tokens bought.\\r\\n     */\\r\\n    event TokensBought(address buyer, uint ethValue, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the token rate is changed.\\r\\n     * @param owner The address of the owner.\\r\\n     * @param rate The new rate in dollars.\\r\\n     */\\r\\n    event RateChanged(address owner, uint rate);\\r\\n\\r\\n    /**\\r\\n     * @dev Initialise the Chainlink Data Feed Address.\\r\\n     * @param owner The address of the contract owner.\\r\\n     */\\r\\n    constructor(address owner) Ownable(owner) {\\r\\n        dataFeed = AggregatorV3Interface(\\r\\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\r\\n        );\\r\\n\\r\\n        // 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE bnb 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419 eth\\r\\n        // 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526 bnb testnet 0x694AA1769357215DE4FAC081bf1f309aDC325306 sepolia\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        // collect fees\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buy tokens by sending ether.\\r\\n     * @dev Do not use this function directly to send ether as it will lock the sent ether. Please use our platform to buy tokens.\\r\\n     * @param _amount The amount of tokens to buy.\\r\\n     */\\r\\n    function buyTokens(uint256 _amount) external payable {\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"Collector: amount of tokens must be greater than 0\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            msg.value > 0,\\r\\n            \\\"Collector: amount of ether sent must be greater than 0\\\"\\r\\n        );\\r\\n\\r\\n        uint256 dollarsValue = _amount * getRate();\\r\\n        uint ethValue = (dollarsValue /\\r\\n            uint(getChainlinkDataFeedLatestAnswer()));\\r\\n\\r\\n        require(\\r\\n            msg.value >= ethValue,\\r\\n            \\\"Collector: amount of ether sent must be equal to the amount of ether required\\\"\\r\\n        );\\r\\n\\r\\n        // collect fees\\r\\n        emit TokensBought(msg.sender, msg.value, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw all collected ether to the owner's address.\\r\\n     */\\r\\n    function withdrawFunds() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set a new Chainlink data feed address.\\r\\n     * @param _dataFeed The address of the new data feed.\\r\\n     */\\r\\n    function setDataFeed(address _dataFeed) external onlyOwner {\\r\\n        dataFeed = AggregatorV3Interface(_dataFeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the rate in dollars. Rate should be in 1e8 for ex. 2 dollars is (2 * 1e8)\\r\\n     * @param _rate The new rate in dollars.\\r\\n     */\\r\\n    function changeRate(uint _rate) external onlyOwner {\\r\\n        _rateInDollars = _rate;\\r\\n        emit RateChanged(owner(), _rate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current Chainlink data feed address.\\r\\n     * @return _dataFeed address of the data feed.\\r\\n     */\\r\\n    function getDataFeedAddress() external view returns (address _dataFeed) {\\r\\n        _dataFeed = address(dataFeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current rate in dollars.\\r\\n     * @return _rate current rate in dollars.\\r\\n     */\\r\\n    function getRate() public view returns (uint256 _rate) {\\r\\n        _rate = _rateInDollars;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the latest answer from the Chainlink data feed.\\r\\n     * @return answer latest answer from the data feed.\\r\\n     */\\r\\n    function getChainlinkDataFeedLatestAnswer()\\r\\n        public\\r\\n        view\\r\\n        returns (int answer)\\r\\n    {\\r\\n        // prettier-ignore\\r\\n        (\\r\\n            /* uint80 roundID */,\\r\\n            answer,\\r\\n            /*uint startedAt*/,\\r\\n            /*uint timeStamp*/,\\r\\n            /*uint80 answeredInRound*/\\r\\n        ) = dataFeed.latestRoundData();\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkDataFeedLatestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_dataFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataFeed\",\"type\":\"address\"}],\"name\":\"setDataFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "collector", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "0000000000000000000000002fc296a8374848aa00e8e666e6f5615ae2ac3ca7", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}