{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/_common/libraries/CalculateAmountIn256Lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../interfaces/ICurvePoolLike256.sol\\\";\\n\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary CalculateAmountIn256Lib {\\n    struct InputWithNormalization {\\n        uint256 amountRequired;\\n        uint256 one;\\n        address pool;\\n        uint256 i;\\n        uint256 j;\\n        uint256 iDecimals;\\n        uint256 jDecimals;\\n    }\\n\\n    error FailedNormalization();\\n\\n    function amountIn256(\\n        uint256 _amountRequired,\\n        uint256 _one, // One coin based on the coin decimals\\n        address _pool,\\n        uint256 _i,\\n        uint256 _j\\n    )\\n        internal\\n        view\\n        returns (uint256 amountIn, uint256 amountOut)\\n    {\\n        ICurvePoolLike256 curvePool = ICurvePoolLike256(_pool);\\n        uint256 rate = curvePool.get_dy(_i, _j, _one);\\n\\n        uint256 multiplied = _one * _amountRequired;\\n        // We have safe math while doing `one * _amountRequired`. Division should be fine.\\n        unchecked { amountIn = multiplied / rate; }\\n\\n        // `get_dy` is an increasing function.\\n        // It should take ~ 1 - 6 iterations to `amountOut >= _amountRequired`.\\n        while (true) {\\n            amountOut = curvePool.get_dy(_i, _j, amountIn);\\n\\n            if (amountOut >= _amountRequired) {\\n                return (amountIn, amountOut);\\n            }\\n\\n            amountIn = _calcAmountIn(\\n                amountIn,\\n                _one,\\n                rate,\\n                _amountRequired,\\n                amountOut\\n            );\\n        }\\n    }\\n\\n    function amountIn256WithNormalization(InputWithNormalization memory _input)\\n        internal\\n        view\\n        returns (uint256 amountIn, uint256 amountOut)\\n    {\\n        ICurvePoolLike256 curvePool = ICurvePoolLike256(_input.pool);\\n        uint256 dy = curvePool.get_dy(_input.i, _input.j, _input.one);\\n        // We do normalization of the rate as we will recive from the `get_dy` a value with `_jDecimals`\\n        uint256 rate = normalizeWithDecimals(dy, _input.iDecimals, _input.jDecimals);\\n        // Normalize `_input.amountRequired` to `_iDecimals` as we will use it\\n        // for calculation of the `amountIn` value of the `_tokenIn`\\n        uint256 amountRequired = normalizeWithDecimals(_input.amountRequired, _input.iDecimals, _input.jDecimals);\\n        uint256 multiplied = _input.one * amountRequired;\\n        // Zero value for amountIn is unacceptable.\\n        assert(multiplied >= rate); // Otherwise, we may get zero.\\n        // We have safe math while doing `one * amountRequired`. Division should be fine.\\n        unchecked { amountIn = multiplied / rate; }\\n\\n        // `get_dy` is an increasing function.\\n        // It should take ~ 1 - 6 iterations to `amountOut >= amountRequired`.\\n        while (true) {\\n            amountOut = curvePool.get_dy(_input.i, _input.j, amountIn);\\n            uint256 amountOutNormalized = normalizeWithDecimals(amountOut, _input.iDecimals, _input.jDecimals);\\n\\n            if (amountOutNormalized >= amountRequired) {\\n                return (amountIn, amountOut);\\n            }\\n\\n            amountIn = _calcAmountIn(\\n                amountIn,\\n                _input.one,\\n                rate,\\n                amountRequired,\\n                amountOutNormalized\\n            );\\n        }\\n    }\\n\\n    /// @dev Adjusts the given value to have different decimals\\n    function normalizeWithDecimals(\\n        uint256 _value,\\n        uint256 _toDecimals,\\n        uint256 _fromDecimals\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_toDecimals == _fromDecimals) {\\n            return _value;\\n        } else if (_toDecimals < _fromDecimals) {\\n            uint256 devideOn;\\n            // It can be unchecked because of the condition `_toDecimals < _fromDecimals`.\\n            // We trust to `_fromDecimals` and `_toDecimals` they should not have large numbers.\\n            unchecked { devideOn = 10 ** (_fromDecimals - _toDecimals); }\\n            // Zero value after normalization is unacceptable.\\n            if (_value < devideOn) revert FailedNormalization();\\n            // Condition above make it safe\\n            unchecked { return _value / devideOn; }\\n        } else {\\n            uint256 decimalsDiff;\\n            // Because of the condition `_toDecimals < _fromDecimals` above,\\n            // we are safe as it guarantees that `_toDecimals` is > `_fromDecimals`\\n            unchecked { decimalsDiff = 10 ** (_toDecimals - _fromDecimals); }\\n\\n            return _value * decimalsDiff;\\n        }\\n    }\\n\\n    function _calcAmountIn(\\n        uint256 _amountIn,\\n        uint256 _one,\\n        uint256 _rate,\\n        uint256 _requiredAmountOut,\\n        uint256 _amountOutNormalized\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 diff;\\n        // Because of the condition `amountOutNormalized >= _requiredAmountOut` in a calling function,\\n        // safe math is not required here.\\n        unchecked { diff = _requiredAmountOut - _amountOutNormalized; }\\n        // We may be stuck in a situation where a difference between\\n        // a `_requiredAmountOut` and `amountOutNormalized`\\n        // will be small and we will need to perform more steps.\\n        // This expression helps to escape the almost infinite loop.\\n        if (diff < 1e3) {\\n            // If the `amountIn` value is high the `get_dy` function will revert first\\n            unchecked { _amountIn += 1e3; }\\n        } else {\\n            // `one * diff` is safe as `diff` will be lower then the `_requiredAmountOut`\\n            // for which we have safe math while doing `ONE_... * _requiredAmountOut` in a calling function.\\n            unchecked { _amountIn += (_one * diff) / _rate; }\\n        }\\n\\n        return _amountIn;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/_common/libraries/UsdtCrvUsdPoolLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../interfaces/ICurvePoolLike128WithReturn.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary UsdtCrvUsdPoolLib {\\n    using SafeERC20 for IERC20;\\n\\n    int128 constant public USDT_INDEX = 0;\\n    int128 constant public CRV_USD_INDEX = 1;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function crvUsdToUsdt(uint256 _amount, address _pool, IERC20 _crvUSD) internal returns (uint256 receivedUsdt) {\\n        _crvUSD.approve(_pool, _amount);\\n\\n        receivedUsdt = ICurvePoolLike128WithReturn(_pool).exchange(\\n            CRV_USD_INDEX,\\n            USDT_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n\\n    function usdtToCrvUsd(uint256 _amount, address _pool, IERC20 _usdt) internal returns (uint256 receivedCrvUSD) {\\n        _usdt.safeApprove(_pool, _amount);\\n\\n        receivedCrvUSD = ICurvePoolLike128WithReturn(_pool).exchange(\\n            USDT_INDEX,\\n            CRV_USD_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/_common/libraries/UsdtWethTricrypto2Lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../interfaces/ICurvePoolLike256.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Curve pool exchange\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nlibrary UsdtWethTricrypto2Lib {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public USDT_INDEX = 0;\\n    uint256 constant public WETH_INDEX = 2;\\n\\n    uint256 constant public USDT_DECIMALS = 6;\\n    uint256 constant public WETH_DECIMALS = 18;\\n\\n    uint256 constant public UNKNOWN_AMOUNT = 1;\\n\\n    function usdtToWethTricrypto2(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _usdt,\\n        IERC20 _weth\\n    )\\n        internal\\n        returns (uint256 _received)\\n    {\\n        _usdt.safeApprove(_pool, _amount);\\n\\n        uint256 balanceBefore = _weth.balanceOf(address(this));\\n\\n        ICurvePoolLike256(_pool).exchange(\\n            USDT_INDEX,\\n            WETH_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n\\n        uint256 balanceAfter = _weth.balanceOf(address(this));\\n\\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\\n        unchecked { _received = balanceAfter - balanceBefore; }\\n    }\\n\\n    function wethToUsdtTricrypto2(\\n        uint256 _amount,\\n        address _pool,\\n        IERC20 _usdt,\\n        IERC20 _weth\\n    )\\n        internal\\n        returns (uint256 _received)\\n    {\\n        _weth.approve(_pool, _amount);\\n\\n        uint256 balanceBefore = _usdt.balanceOf(address(this));\\n\\n        ICurvePoolLike256(_pool).exchange(\\n            WETH_INDEX,\\n            USDT_INDEX,\\n            _amount,\\n            UNKNOWN_AMOUNT\\n        );\\n\\n        uint256 balanceAfter = _usdt.balanceOf(address(this));\\n\\n        // The `balanceAfter` can't be less than the `balanceBefore` after the exchange\\n        unchecked { _received = balanceAfter - balanceBefore; }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/CrvUSDMagician.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IMagician.sol\\\";\\nimport \\\"./_common/libraries/UsdtCrvUsdPoolLib.sol\\\";\\nimport \\\"./_common/libraries/UsdtWethTricrypto2Lib.sol\\\";\\nimport \\\"./_common/libraries/CalculateAmountIn256Lib.sol\\\";\\n\\ninterface ICrvUSDPoolLike {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(int128 i, int128 j, uint256 dy) external view returns (uint256);\\n}\\n\\n/// @dev crvUSD Magician\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\nabstract contract CrvUSDMagician is IMagician {\\n    using UsdtCrvUsdPoolLib for uint256;\\n    using UsdtWethTricrypto2Lib for uint256;\\n    using CalculateAmountIn256Lib for uint256;\\n\\n    error InvalidAsset();\\n    error InvalidCalculationResult();\\n\\n    // solhint-disable var-name-mixedcase\\n    address immutable public TRICRYPTO_2_POOL;\\n    address immutable public CRV_USD_USDT_POOL;\\n\\n    IERC20 immutable public WETH;\\n    IERC20 immutable public USDT;\\n    IERC20 immutable public CRV_USD;\\n    // solhint-enable var-name-mixedcase\\n\\n    constructor(\\n        address _tricrypto2Pool,\\n        address _crvUsdPool,\\n        address _weth,\\n        address _usdt,\\n        address _crvUsd\\n    ) {\\n        TRICRYPTO_2_POOL = _tricrypto2Pool;\\n        CRV_USD_USDT_POOL = _crvUsdPool;\\n        WETH = IERC20(_weth);\\n        USDT = IERC20(_usdt);\\n        CRV_USD = IERC20(_crvUsd);\\n    }\\n\\n    /// @inheritdoc IMagician\\n    function towardsNative(address _asset, uint256 _crvUsdToSell)\\n        external\\n        virtual\\n        returns (address tokenOut, uint256 amountOut)\\n    {\\n        // crvUSD -> WETH\\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\\n\\n        amountOut = _crvUsdToSell.crvUsdToUsdt(CRV_USD_USDT_POOL, CRV_USD)\\n            .usdtToWethTricrypto2(TRICRYPTO_2_POOL, USDT, WETH);\\n\\n        tokenOut = address(WETH);\\n    }\\n\\n    /// @inheritdoc IMagician\\n    function towardsAsset(address _asset, uint256 _crvUsdToBuy)\\n        external\\n        virtual\\n        returns (address tokenOut, uint256 wehtIn)\\n    {\\n        // WETH -> crvUSD\\n        if (_asset != address(CRV_USD)) revert InvalidAsset();\\n\\n        uint256 usdtIn = ICrvUSDPoolLike(CRV_USD_USDT_POOL).get_dx(\\n            UsdtCrvUsdPoolLib.USDT_INDEX,\\n            UsdtCrvUsdPoolLib.CRV_USD_INDEX,\\n            _crvUsdToBuy\\n        );\\n\\n        uint256 usdtOut;\\n        (wehtIn, usdtOut) = _calcRequiredWETH(usdtIn);\\n\\n        if (usdtOut < usdtIn) revert InvalidCalculationResult();\\n\\n        wehtIn.wethToUsdtTricrypto2(TRICRYPTO_2_POOL, USDT, WETH)\\n            .usdtToCrvUsd(CRV_USD_USDT_POOL, USDT);\\n\\n        tokenOut = address(CRV_USD);\\n    }\\n\\n    function _calcRequiredWETH(uint256 usdtIn) internal virtual view returns (uint256 wehtIn, uint256 usdtOut) {\\n        uint256 oneWETH = 1e18;\\n\\n        CalculateAmountIn256Lib.InputWithNormalization memory input =\\n            CalculateAmountIn256Lib.InputWithNormalization({\\n                amountRequired: usdtIn,\\n                one: oneWETH,\\n                pool: TRICRYPTO_2_POOL,\\n                i: UsdtWethTricrypto2Lib.WETH_INDEX,\\n                j: UsdtWethTricrypto2Lib.USDT_INDEX,\\n                iDecimals: UsdtWethTricrypto2Lib.WETH_DECIMALS,\\n                jDecimals: UsdtWethTricrypto2Lib.USDT_DECIMALS\\n            });\\n\\n        return CalculateAmountIn256Lib.amountIn256WithNormalization(input);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/CrvUSDMagicianETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./CrvUSDMagician.sol\\\";\\n\\n/// @dev crvUSD Magician\\n/// IT IS NOT PART OF THE PROTOCOL. SILO CREATED THIS TOOL, MOSTLY AS AN EXAMPLE.\\ncontract CrvUSDMagicianETH is CrvUSDMagician {\\n    constructor() CrvUSDMagician(\\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46, // TRICRYPTO_2_POOL\\n        0x390f3595bCa2Df7d23783dFd126427CCeb997BF4, // CRV_USD_USDT_POOL\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, // WETH\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7, // USDT\\n        0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E  // CRV_USD\\n    ) {}\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/interfaces/ICurvePoolLike128WithReturn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike128WithReturn {\\n    // solhint-disable func-name-mixedcase\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 minDy) external returns (uint256);\\n    function remove_liquidity_one_coin(uint256 amount, int128 i, uint256 minDy) external returns (uint256);\\n    function exchange_underlying(int128 _i, int128 _j, uint256 _dx, uint256 _minDy) external returns (uint256);\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n    // solhint-enable func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/interfaces/ICurvePoolLike256.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurvePoolLike256 {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 minDy) external;\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/liquidation/magicians/interfaces/IMagician.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\n/// @notice Extension for the Liquidation helper to support such operations as unwrapping\\ninterface IMagician {\\n    /// @notice Operates to unwrap an `_asset`\\n    /// @param _asset Asset to be unwrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the `tokenOut` that we received\\n    function towardsNative(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n\\n    /// @notice Performs operation opposit to `towardsNative`\\n    /// @param _asset Asset to be wrapped\\n    /// @param _amount Amount of the `_asset`\\n    /// @return tokenOut A token that the `_asset` has been converted to\\n    /// @return amountOut Amount of the quote token that we spent to get `_amoun` of the `_asset`\\n    function towardsAsset(address _asset, uint256 _amount) external returns (address tokenOut, uint256 amountOut);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedNormalization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalculationResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CRV_USD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_USD_USDT_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRICRYPTO_2_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crvUsdToBuy\",\"type\":\"uint256\"}],\"name\":\"towardsAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wehtIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crvUsdToSell\",\"type\":\"uint256\"}],\"name\":\"towardsNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrvUSDMagicianETH", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}