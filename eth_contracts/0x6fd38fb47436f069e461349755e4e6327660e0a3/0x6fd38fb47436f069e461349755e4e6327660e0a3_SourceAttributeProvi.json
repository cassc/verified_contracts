{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CRAMETAATTRSV1/SourceAttributeProviderV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n// Local References\\nimport './SourceAttributeProviderV1Base.sol';\\n\\n/**\\n * @title SourceAttributeProviderV1\\n *\\n *  \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591 \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\\n * \u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\\n * \u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591\\n *  \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\\n *        \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591\\n *        \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\\n * \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591 \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591 \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\\n *\\n * @dev Thanks to Patrick Gillespie (@patorjk) for Text to ASCII Art Generator (TAAG).\\n */\\ncontract SourceAttributeProviderV1 is SourceAttributeProviderV1Base {\\n    constructor() {\\n        // Implementation version: v1.0.0\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CRAMETAATTRSV1/SourceAttributeProviderV1Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n// Local References\\nimport '../IAttributeProvider.sol';\\nimport './ToDynamic.sol';\\n\\nerror TraitNotRecognized(uint256);\\n\\n/**\\n * @title SourceAttributeProviderV1Base\\n * @author @NiftyMike | @NFTCulture\\n * @dev This class encodes all of the metadata value names and can return them to a metadata renderer\\n * via the IAttributeProvider interface.\\n */\\nabstract contract SourceAttributeProviderV1Base is IAttributeProvider {\\n    uint256 private constant TRAIT_INDEX_TEXTURE = 0;\\n    uint256 private constant TRAIT_INDEX_UNDERTEXTURE = 1;\\n    uint256 private constant TRAIT_INDEX_ONDNA = 2;\\n    uint256 private constant TRAIT_INDEX_ONGHOSTS = 3;\\n    uint256 private constant TRAIT_INDEX_ONMASKS = 4;\\n    uint256 private constant TRAIT_INDEX_ONPLAINTEXT = 5;\\n    uint256 private constant TRAIT_INDEX_ONWEBS = 6;\\n    uint256 private constant TRAIT_INDEX_COLOR = 7;\\n    uint256 private constant TRAIT_INDEX_COLORFIELDS = 8;\\n    uint256 private constant TRAIT_INDEX_LIBRARY = 9;\\n    uint256 private constant TRAIT_INDEX_COUNTERLIBRARY = 10;\\n    uint256 private constant TRAIT_INDEX_SOURCE = 11;\\n    uint256 private constant TRAIT_INDEX_COUNTERSOURCE = 12;\\n    uint256 private constant TRAIT_INDEX_DATE = 13;\\n    uint256 private constant TRAIT_INDEX_COUNTERDATE = 14;\\n\\n    function getAttributeValueFor(\\n        uint256 traitIndex,\\n        uint8 attributeIndex\\n    ) external pure override returns (string memory) {\\n        return _getAttributeValueFor(traitIndex, attributeIndex);\\n    }\\n\\n    function _getAttributeValueFor(uint256 traitIndex, uint8 attributeIndex) internal pure returns (string memory) {\\n        string[] memory attributeArray = _getAttributeArray(traitIndex);\\n        return attributeArray[attributeIndex];\\n    }\\n\\n    function _getAttributeArray(uint256 traitIndex) internal pure returns (string[] memory) {\\n        if (traitIndex == TRAIT_INDEX_TEXTURE) {\\n            return ToDynamic.string_6(_getTextureArray());\\n        } else if (traitIndex == TRAIT_INDEX_UNDERTEXTURE) {\\n            return ToDynamic.string_3(_getUnderTextureArray());\\n        } else if (traitIndex == TRAIT_INDEX_ONDNA) {\\n            return ToDynamic.string_2(_getOnDNAArray());\\n        } else if (traitIndex == TRAIT_INDEX_ONGHOSTS) {\\n            return ToDynamic.string_2(_getOnGhostsArray());\\n        } else if (traitIndex == TRAIT_INDEX_ONMASKS) {\\n            return ToDynamic.string_2(_getOnMasksArray());\\n        } else if (traitIndex == TRAIT_INDEX_ONPLAINTEXT) {\\n            return ToDynamic.string_2(_getOnPlaintextArray());\\n        } else if (traitIndex == TRAIT_INDEX_ONWEBS) {\\n            return ToDynamic.string_2(_getOnWebsArray());\\n        } else if (traitIndex == TRAIT_INDEX_COLOR) {\\n            return ToDynamic.string_14(_getColorArray());\\n        } else if (traitIndex == TRAIT_INDEX_COLORFIELDS) {\\n            return ToDynamic.string_6(_getPaletteArray());\\n        } else if (traitIndex == TRAIT_INDEX_LIBRARY) {\\n            return ToDynamic.string_5(_getLibraryArray());\\n        } else if (traitIndex == TRAIT_INDEX_COUNTERLIBRARY) {\\n            return ToDynamic.string_5(_getCounterLibraryArray());\\n        } else if (traitIndex == TRAIT_INDEX_SOURCE) {\\n            return ToDynamic.string_30(_getSourceArray());\\n        } else if (traitIndex == TRAIT_INDEX_COUNTERSOURCE) {\\n            return ToDynamic.string_30(_getCounterSourceArray());\\n        } else if (traitIndex == TRAIT_INDEX_DATE) {\\n            return ToDynamic.string_30(_getDateArray());\\n        } else if (traitIndex == TRAIT_INDEX_COUNTERDATE) {\\n            return ToDynamic.string_30(_getCounterDateArray());\\n        } else {\\n            revert TraitNotRecognized(traitIndex);\\n        }\\n    }\\n\\n    function _getTextureArray() internal pure returns (string[6] memory) {\\n        return ['On Gaze', 'On Walls', 'On Script', 'On Wire', 'On Line', 'On Data'];\\n    }\\n\\n    function _getUnderTextureArray() internal pure returns (string[3] memory) {\\n        return ['On Gaze', 'On Walls', 'On Script'];\\n    }\\n\\n    function _getBooleanArray() internal pure returns (string[2] memory) {\\n        return ['Yes', 'No'];\\n    }\\n\\n    function _getOnDNAArray() internal pure returns (string[2] memory) {\\n        return _getBooleanArray();\\n    }\\n\\n    function _getOnGhostsArray() internal pure returns (string[2] memory) {\\n        return _getBooleanArray();\\n    }\\n\\n    function _getOnMasksArray() internal pure returns (string[2] memory) {\\n        return _getBooleanArray();\\n    }\\n\\n    function _getOnPlaintextArray() internal pure returns (string[2] memory) {\\n        return _getBooleanArray();\\n    }\\n\\n    function _getOnWebsArray() internal pure returns (string[2] memory) {\\n        return _getBooleanArray();\\n    }\\n\\n    function _getColorArray() internal pure returns (string[14] memory) {\\n        return [\\n            'Yellow',\\n            'Pink',\\n            'Red',\\n            'Blue',\\n            'Red Yellow',\\n            'Red Pink',\\n            'Red Black White',\\n            'Yellow Pink',\\n            'Pink Red',\\n            'Pink Yellow',\\n            'Black White',\\n            'Blue Black White',\\n            'Pink Black White',\\n            'Yellow Black White'\\n        ];\\n    }\\n\\n    function _getPaletteArray() internal pure returns (string[6] memory) {\\n        return ['On Acid', 'On Mono', 'On Light', 'On Flat', 'On Twins', 'On Pierce'];\\n    }\\n\\n    function _getLibraryArray() internal pure returns (string[5] memory) {\\n        return ['Art', 'Blockchain', 'Fiction', 'Culture', 'Politics'];\\n    }\\n\\n    function _getCounterLibraryArray() internal pure returns (string[5] memory) {\\n        return _getLibraryArray();\\n    }\\n\\n    function _getSourceArray() internal pure returns (string[30] memory) {\\n        return [\\n            'Hart',\\n            'Catlow et al',\\n            'Buterin',\\n            'Finney',\\n            'Menkman',\\n            'Nakamoto',\\n            'Reas, Fry',\\n            'Wajcaman',\\n            'Szabo',\\n            'Himanen',\\n            'Stephenson',\\n            'Hughes',\\n            'May',\\n            'Haraway',\\n            'Gibson',\\n            'Baudrillard',\\n            'Lippard',\\n            'Nake',\\n            'Siegelaub',\\n            'Debord',\\n            'McLuhan',\\n            'E.A.T.',\\n            'Orwell',\\n            'Borges',\\n            'Benjamin',\\n            'Mill',\\n            'Rousseau',\\n            'Milton',\\n            'Llull',\\n            'Laozi'\\n        ];\\n    }\\n\\n    function _getCounterSourceArray() internal pure returns (string[30] memory) {\\n        return _getSourceArray();\\n    }\\n\\n    function _getDateArray() internal pure returns (string[30] memory) {\\n        return [\\n            '2021',\\n            '2017',\\n            '2014',\\n            '2013',\\n            '2011',\\n            '2008',\\n            '2007',\\n            '2004',\\n            '2002',\\n            '2001',\\n            '1999',\\n            '1993',\\n            '1988',\\n            '1985',\\n            '1984',\\n            '1981',\\n            '1973',\\n            '1971',\\n            '1971',\\n            '1967',\\n            '1967',\\n            '1966',\\n            '1949',\\n            '1941',\\n            '1935',\\n            '1859',\\n            '1762',\\n            '1644',\\n            '1283',\\n            '400 BC'\\n        ];\\n    }\\n\\n    function _getCounterDateArray() internal pure returns (string[30] memory) {\\n        return _getDateArray();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CRAMETAATTRSV1/ToDynamic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/**\\r\\n * @title ToDynamic\\r\\n * @author An unnamed faceless developer's older brother.\\r\\n * @dev Hardcoded array converters. These allow conversion of static sized arrays to dynamic, which allows\\r\\n * cheaper fixed-size memory variables to be used but still interface with functions that require dynamically\\r\\n * allocated input params.\\r\\n */\\r\\nlibrary ToDynamic {\\r\\n    function string_2(string[2] memory fixedArray) internal pure returns (string[] memory dynamicArray) {\\r\\n        dynamicArray = new string[](2);\\r\\n        dynamicArray[0] = fixedArray[0];\\r\\n        dynamicArray[1] = fixedArray[1];\\r\\n    }\\r\\n\\r\\n    function string_3(string[3] memory fixedArray) internal pure returns (string[] memory dynamicArray) {\\r\\n        dynamicArray = new string[](3);\\r\\n        uint256 i;\\r\\n        for (; i < 3; ) {\\r\\n            dynamicArray[i] = fixedArray[i];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function string_5(string[5] memory fixedArray) internal pure returns (string[] memory dynamicArray) {\\r\\n        dynamicArray = new string[](5);\\r\\n        uint256 i;\\r\\n        for (; i < 5; ) {\\r\\n            dynamicArray[i] = fixedArray[i];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function string_6(string[6] memory fixedArray) internal pure returns (string[] memory dynamicArray) {\\r\\n        dynamicArray = new string[](6);\\r\\n        uint256 i;\\r\\n        for (; i < 6; ) {\\r\\n            dynamicArray[i] = fixedArray[i];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function string_14(string[14] memory fixedArray) internal pure returns (string[] memory dynamicArray) {\\r\\n        dynamicArray = new string[](14);\\r\\n        uint256 i;\\r\\n        for (; i < 14; ) {\\r\\n            dynamicArray[i] = fixedArray[i];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function string_30(string[30] memory fixedArray) internal pure returns (string[] memory dynamicArray) {\\r\\n        dynamicArray = new string[](30);\\r\\n        uint256 i;\\r\\n        for (; i < 30; ) {\\r\\n            dynamicArray[i] = fixedArray[i];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IAttributeProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/**\\r\\n * @title IAttributeProvider\\r\\n * @author @NiftyMike | @NFTCulture\\r\\n * @dev Super thin interface that describes a function that provides attribute information.\\r\\n */\\r\\ninterface IAttributeProvider {\\r\\n    /**\\r\\n     * Lookup an attribute value given the trait and the index of the attribute.\\r\\n     *\\r\\n     * @param traitIndex - the index of the trait\\r\\n     * @param attributeIndex - the index of the selected attribute.\\r\\n     */\\r\\n    function getAttributeValueFor(uint256 traitIndex, uint8 attributeIndex) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TraitNotRecognized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"traitIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attributeIndex\",\"type\":\"uint8\"}],\"name\":\"getAttributeValueFor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SourceAttributeProviderV1", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}