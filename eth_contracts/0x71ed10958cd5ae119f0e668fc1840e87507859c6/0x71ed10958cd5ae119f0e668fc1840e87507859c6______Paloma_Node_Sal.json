{"SourceCode": "#pragma version 0.4.0\r\n#pragma optimize gas\r\n#pragma evm-version cancun\r\n\"\"\"\r\n@title      Paloma Node Sale Contract\r\n@license    Apache 2.0\r\n@author     Volume.finance\r\n\"\"\"\r\n\r\ninterface COMPASS:\r\n    def emit_nodesale_event(_buyer: address, _paloma: bytes32, _node_count: uint256, _grain_amount: uint256): nonpayable\r\n\r\ninterface WrappedEth:\r\n    def deposit(): payable\r\n    def withdraw(amount: uint256): nonpayable\r\n    \r\ninterface ERC20:\r\n    def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n    def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\r\n    def balanceOf(_owner: address) -> uint256: view\r\n\r\ninterface ISwapRouter02:\r\n    def exactOutput(params: ExactOutputParams) -> uint256: payable\r\n    def WETH9() -> address: view\r\n\r\nstruct ExactOutputParams:\r\n    path: Bytes[204]\r\n    recipient: address\r\n    amountOut: uint256\r\n    amountInMaximum: uint256\r\n\r\nstruct PromoCode:\r\n    recipient: address\r\n    active: bool\r\n\r\nevent Activated:\r\n    sender: indexed(address)\r\n    paloma: bytes32\r\n\r\nevent Claimed:\r\n    recipient: indexed(address)\r\n    amount: uint256\r\n\r\nevent FeeReceiverChanged:\r\n    admin: indexed(address)\r\n    new_fee_receiver: address\r\n\r\nevent FundsReceiverChanged:\r\n    admin: indexed(address)\r\n    new_funds_receiver: address\r\n\r\nevent NodeSold:\r\n    buyer: indexed(address)\r\n    paloma: bytes32\r\n    node_count: uint256\r\n    grain_amount: uint256\r\n    nonce: uint256\r\n\r\nevent FeeChanged:\r\n    admin: indexed(address)\r\n    new_processing_fee: uint256\r\n    new_subscription_fee: uint256\r\n\r\nevent PromoCodeCreated:\r\n    promo_code: bytes32\r\n    recipient: address\r\n\r\nevent PromoCodeRemoved:\r\n    promo_code: bytes32\r\n\r\nevent Purchased:\r\n    buyer: indexed(address)\r\n    token_in: address\r\n    fund_usd_amount: uint256\r\n    fee_usd_amount: uint256\r\n    subscription_usd_amount: uint256\r\n    slippage_fee_amount: uint256\r\n    node_count: uint256\r\n    promo_code: bytes32\r\n\r\nevent ReferralRewardPercentagesChanged:\r\n    referral_discount_percentage: uint256\r\n    referral_reward_percentage: uint256\r\n    slippage_fee_percentage: uint256\r\n\r\nevent SetPaloma:\r\n    paloma: bytes32\r\n\r\nevent StartEndTimestampChanged:\r\n    new_start_timestamp: uint256\r\n    new_end_timestamp: uint256\r\n\r\nevent UpdateAdmin:\r\n    old_admin: address\r\n    new_admin: address\r\n\r\nevent UpdateCompass:\r\n    old_compass: address\r\n    new_compass: address\r\n\r\nevent WhitelistAmountUpdated:\r\n    redeemer: indexed(address)\r\n    new_amount: uint256\r\n\r\nREWARD_TOKEN: public(immutable(address))\r\nSWAP_ROUTER_02: public(immutable(address))\r\nWETH9: public(immutable(address))\r\n\r\nGRAINS_PER_NODE: constant(uint256) = 50000\r\n\r\npaloma: public(bytes32)\r\nadmin: public(address)\r\ncompass: public(address)\r\nfee_receiver: public(address)\r\nfunds_receiver: public(address)\r\nstart_timestamp: public(uint256)\r\nend_timestamp: public(uint256)\r\nprocessing_fee: public(uint256)\r\nsubscription_fee: public(uint256)\r\nslippage_fee_percentage: public(uint256)\r\nreferral_discount_percentage: public(uint256)\r\nreferral_reward_percentage: public(uint256)\r\n\r\nnonces: public(HashMap[uint256, uint256])\r\nsubscription: public(HashMap[address, uint256])\r\nactivates: public(HashMap[address, bytes32])\r\npromo_codes: public(HashMap[bytes32, PromoCode])\r\nwhitelist_amounts: public(HashMap[address, uint256])\r\nclaimable: public(HashMap[address, uint256])\r\n\r\n@deploy\r\ndef __init__(_compass: address, _swap_router: address, _reward_token: address, _admin: address, _fund_receiver: address, _fee_receiver: address, _start_timestamp: uint256, _end_timestamp: uint256, _processing_fee: uint256, _subscription_fee: uint256, _referral_discount_percentage: uint256, _referral_reward_percentage: uint256, _slippage_fee_percentage: uint256):\r\n    self.compass = _compass\r\n    self.admin = _admin\r\n    self.funds_receiver = _fund_receiver\r\n    self.fee_receiver = _fee_receiver\r\n    self.start_timestamp = _start_timestamp\r\n    self.end_timestamp = _end_timestamp\r\n    self.processing_fee = _processing_fee\r\n    self.subscription_fee = _subscription_fee\r\n    self.referral_discount_percentage = _referral_discount_percentage\r\n    self.referral_reward_percentage = _referral_reward_percentage\r\n    self.slippage_fee_percentage = _slippage_fee_percentage\r\n    REWARD_TOKEN = _reward_token\r\n    SWAP_ROUTER_02 = _swap_router\r\n    WETH9 = staticcall ISwapRouter02(_swap_router).WETH9()\r\n    log UpdateCompass(empty(address), _compass)\r\n    log UpdateAdmin(empty(address), _admin)\r\n    log FundsReceiverChanged(empty(address), _fund_receiver)\r\n    log FeeReceiverChanged(empty(address), _fee_receiver)\r\n    log FeeChanged(_admin, _processing_fee, _subscription_fee)\r\n    log StartEndTimestampChanged(_start_timestamp, _end_timestamp)\r\n    log ReferralRewardPercentagesChanged(_referral_discount_percentage, _referral_reward_percentage, _slippage_fee_percentage)\r\n\r\n@external\r\ndef activate_wallet(_paloma: bytes32):\r\n    self.activates[msg.sender] = _paloma\r\n    log Activated(msg.sender, _paloma)\r\n\r\n@external\r\ndef create_promo_code(_promo_code: bytes32, _recipient: address):\r\n    self._admin_check()\r\n\r\n    assert _recipient != empty(address), \"Recipient cannot be zero\"\r\n    self.promo_codes[_promo_code] = PromoCode(recipient=_recipient, active=True)\r\n    log PromoCodeCreated(_promo_code, _recipient)\r\n    \r\n@external\r\ndef remove_promo_code(_promo_code: bytes32):\r\n    self._admin_check()\r\n\r\n    assert self.promo_codes[_promo_code].recipient != empty(address), \"Promo code does not exist\"\r\n    self.promo_codes[_promo_code].active = False  # 'active' is set to False\r\n    log PromoCodeRemoved(_promo_code)\r\n\r\n@external\r\ndef update_whitelist_amounts(_to_whitelist: address, _amount: uint256):\r\n    self._admin_check()\r\n\r\n    self.whitelist_amounts[_to_whitelist] = _amount\r\n    log WhitelistAmountUpdated(_to_whitelist, _amount)\r\n\r\n@external\r\ndef node_sale(_to: address, _count: uint256, _nonce: uint256):\r\n    self._paloma_check()\r\n\r\n    assert self.nonces[_nonce] == 0, \"Already emited\"\r\n    _paloma: bytes32 = self.activates[_to]\r\n    assert _paloma != empty(bytes32), \"Not activated\"\r\n    _grain_amount: uint256 = unsafe_mul(_count, GRAINS_PER_NODE)\r\n    log NodeSold(_to, _paloma, _count, _grain_amount, _nonce)\r\n    self.nonces[_nonce] = block.timestamp\r\n    extcall COMPASS(self.compass).emit_nodesale_event(_to, _paloma, _count, _grain_amount)\r\n\r\n@external\r\ndef redeem_from_whitelist(_to: address, _count: uint256, _nonce: uint256):\r\n    self._paloma_check()\r\n\r\n    assert self.nonces[_nonce] == 0, \"Already emited\"\r\n    _paloma: bytes32 = self.activates[_to]\r\n    assert _paloma != empty(bytes32), \"Not activated\"\r\n    _whitelist_amounts: uint256 = self.whitelist_amounts[_to]\r\n    assert _whitelist_amounts >= _count, \"Invalid whitelist amount\"\r\n\r\n    self.whitelist_amounts[_to] = unsafe_sub(_whitelist_amounts, _count)\r\n    _grain_amount: uint256 = unsafe_mul(_count, GRAINS_PER_NODE)\r\n    log NodeSold(_to, _paloma, _count, _grain_amount, _nonce)\r\n    self.nonces[_nonce] = block.timestamp\r\n    extcall COMPASS(self.compass).emit_nodesale_event(_to, _paloma, _count, _grain_amount)\r\n\r\n@payable\r\n@external\r\n@nonreentrant\r\ndef pay_for_eth(_estimated_node_count: uint256, _total_cost: uint256, _promo_code: bytes32, _path: Bytes[204], _enhanced: bool, _subscription_month: uint256):\r\n    assert block.timestamp >= self.start_timestamp, \"!start\"\r\n    assert block.timestamp < self.end_timestamp, \"!end\"\r\n    assert _estimated_node_count > 0, \"Invalid node count\"\r\n    assert _total_cost > 0, \"Invalid total cost\"\r\n    _processing_fee: uint256 = self.processing_fee\r\n    _slippage_fee_percent: uint256 = self.slippage_fee_percentage\r\n    _amount_out: uint256 = _total_cost + _processing_fee\r\n    _slippage_fee: uint256 = 0\r\n    if _slippage_fee_percent > 0:\r\n        _slippage_fee = unsafe_div(unsafe_mul(_total_cost, _slippage_fee_percent), 10000)\r\n        _amount_out = _amount_out + _slippage_fee\r\n\r\n    _enhanced_fee: uint256 = 0\r\n    if _enhanced:\r\n        assert _subscription_month > 0, \"Invalid fee months\"\r\n        _enhanced_fee = self.subscription_fee * _subscription_month\r\n        _amount_out = _amount_out + _enhanced_fee\r\n        self.subscription[msg.sender] = unsafe_add(block.timestamp, unsafe_mul(2628000, _subscription_month)) # 2628000 = 1 month\r\n\r\n    _params: ExactOutputParams = ExactOutputParams(\r\n        path=_path,\r\n        recipient=self,\r\n        amountOut=_amount_out,\r\n        amountInMaximum=msg.value\r\n    )\r\n\r\n    # Execute the swap\r\n    extcall WrappedEth(WETH9).deposit(value=msg.value)\r\n    assert extcall ERC20(WETH9).approve(SWAP_ROUTER_02, msg.value, default_return_value=True), \"Approve failed\"\r\n    _amount_in: uint256 = extcall ISwapRouter02(SWAP_ROUTER_02).exactOutput(_params)\r\n    _referral_reward: uint256 = 0\r\n    _promo_code_info: PromoCode = self.promo_codes[_promo_code]\r\n    if _promo_code_info.active:\r\n        _referral_reward = unsafe_div(unsafe_mul(_total_cost, self.referral_reward_percentage), 10000)\r\n        if _referral_reward > 0:\r\n            self.claimable[_promo_code_info.recipient] = self.claimable[_promo_code_info.recipient] + _referral_reward\r\n    _fund_amount: uint256 = _total_cost - _referral_reward\r\n    assert extcall ERC20(REWARD_TOKEN).transfer(self.funds_receiver, _fund_amount, default_return_value=True), \"Processing Fund Failed\"\r\n    assert extcall ERC20(REWARD_TOKEN).transfer(self.fee_receiver, _processing_fee + _enhanced_fee + _slippage_fee, default_return_value=True), \"Processing Fee Failed\"\r\n\r\n    log Purchased(msg.sender, empty(address), _total_cost, _processing_fee, _enhanced_fee, _slippage_fee, _estimated_node_count, _promo_code)\r\n\r\n    _dust: uint256 = unsafe_sub(msg.value, _amount_in)\r\n    if _dust > 0:\r\n        extcall WrappedEth(WETH9).withdraw(_dust)\r\n        send(msg.sender, _dust)\r\n\r\n@external\r\n@nonreentrant\r\ndef pay_for_token(_token_in: address, _estimated_amount_in: uint256, _estimated_node_count: uint256, _total_cost: uint256, _promo_code: bytes32, _path: Bytes[204], _enhanced: bool, _subscription_month: uint256):\r\n    assert block.timestamp >= self.start_timestamp, \"!start\"\r\n    assert block.timestamp < self.end_timestamp, \"!end\"\r\n    assert extcall ERC20(_token_in).approve(SWAP_ROUTER_02, _estimated_amount_in, default_return_value=True), \"Approve failed\"\r\n    assert _estimated_node_count > 0, \"Invalid node count\"\r\n    assert _total_cost > 0, \"Invalid total cost\"\r\n    assert extcall ERC20(_token_in).transferFrom(msg.sender, self, _estimated_amount_in, default_return_value=True), \"Send Reward Failed\"\r\n\r\n    _processing_fee: uint256 = self.processing_fee\r\n    _slippage_fee_percent: uint256 = self.slippage_fee_percentage\r\n    _amount_out: uint256 = _total_cost + _processing_fee\r\n    _slippage_fee: uint256 = 0\r\n    if _slippage_fee_percent > 0:\r\n        _slippage_fee = unsafe_div(unsafe_mul(_total_cost, _slippage_fee_percent), 10000)\r\n        _amount_out = _amount_out + _slippage_fee\r\n\r\n    _enhanced_fee: uint256 = 0\r\n    if _enhanced:\r\n        assert _subscription_month > 0, \"Invalid fee months\"\r\n        _enhanced_fee = self.subscription_fee * _subscription_month\r\n        _amount_out = _amount_out + _enhanced_fee\r\n        self.subscription[msg.sender] = unsafe_add(block.timestamp, unsafe_mul(2628000, _subscription_month)) # 2628000 = 1 month\r\n\r\n    _params: ExactOutputParams = ExactOutputParams(\r\n        path=_path,\r\n        recipient=self,\r\n        amountOut=_amount_out,\r\n        amountInMaximum=_estimated_amount_in\r\n    )\r\n\r\n    # Execute the swap\r\n    _amount_in: uint256 = extcall ISwapRouter02(SWAP_ROUTER_02).exactOutput(_params)\r\n    _referral_reward: uint256 = 0\r\n    _promo_code_info: PromoCode = self.promo_codes[_promo_code]\r\n    if _promo_code_info.active:\r\n         _referral_reward = unsafe_div(unsafe_mul(_total_cost, self.referral_reward_percentage), 10000)\r\n         if _referral_reward > 0:\r\n            self.claimable[_promo_code_info.recipient] = self.claimable[_promo_code_info.recipient] + _referral_reward\r\n    _fund_amount: uint256 = _total_cost - _referral_reward\r\n    assert extcall ERC20(REWARD_TOKEN).transfer(self.funds_receiver, _fund_amount, default_return_value=True), \"Processing Fund Failed\"\r\n    assert extcall ERC20(REWARD_TOKEN).transfer(self.fee_receiver, _processing_fee + _enhanced_fee + _slippage_fee, default_return_value=True), \"Processing Fee Failed\"\r\n\r\n    log Purchased(msg.sender, _token_in, _total_cost, _processing_fee, _enhanced_fee, _slippage_fee, _estimated_node_count, _promo_code)\r\n\r\n    _dust: uint256 = unsafe_sub(_estimated_amount_in, _amount_in)\r\n    if _dust > 0:\r\n        assert extcall ERC20(_token_in).transfer(msg.sender, _dust, default_return_value=True), \"Processing Dust Failed\"\r\n\r\n@external\r\n@nonreentrant\r\ndef claim():\r\n    _claimable: uint256 = self.claimable[msg.sender]\r\n    assert _claimable > 0, \"No claimable\"\r\n    self.claimable[msg.sender] = 0\r\n    assert extcall ERC20(REWARD_TOKEN).transfer(msg.sender, _claimable, default_return_value=True), \"Claim Failed\"\r\n    log Claimed(msg.sender, _claimable)\r\n\r\n@external\r\ndef set_fee_receiver(_new_fee_receiver: address):\r\n    self._admin_check()\r\n\r\n    assert _new_fee_receiver != empty(address), \"FeeReceiver cannot be zero\"\r\n    self.fee_receiver = _new_fee_receiver\r\n    log FeeReceiverChanged(msg.sender, _new_fee_receiver)\r\n\r\n@external\r\ndef set_funds_receiver(_new_funds_receiver: address):\r\n    self._admin_check()\r\n\r\n    assert _new_funds_receiver != empty(address), \"FundsReceiver cannot be zero\"\r\n    self.funds_receiver = _new_funds_receiver\r\n    log FundsReceiverChanged(msg.sender, _new_funds_receiver)\r\n\r\n@external\r\ndef set_paloma():\r\n    assert msg.sender == self.compass and self.paloma == empty(bytes32) and len(msg.data) == 36, \"Invalid\"\r\n    _paloma: bytes32 = convert(slice(msg.data, 4, 32), bytes32)\r\n    self.paloma = _paloma\r\n    log SetPaloma(_paloma)\r\n\r\n@external\r\ndef set_processing_fee(_new_processing_fee: uint256, _new_subscription_fee: uint256):\r\n    self._admin_check()\r\n\r\n    self.processing_fee = _new_processing_fee\r\n    self.subscription_fee = _new_subscription_fee\r\n    log FeeChanged(msg.sender, _new_processing_fee, _new_subscription_fee)\r\n\r\n@external\r\ndef set_referral_percentages(\r\n    _new_referral_discount_percentage: uint256,\r\n    _new_referral_reward_percentage: uint256,\r\n    _new_slippage_fee_percentage: uint256,\r\n):\r\n    self._admin_check()\r\n\r\n    assert _new_referral_discount_percentage <= 9900, \"Discount p exceed\"\r\n    assert _new_referral_reward_percentage <= 9900, \"Reward p exceed\"\r\n    assert _new_slippage_fee_percentage <= 9900, \"Slippage p exceed\"\r\n    self.referral_discount_percentage = _new_referral_discount_percentage\r\n    self.referral_reward_percentage = _new_referral_reward_percentage\r\n    self.slippage_fee_percentage = _new_slippage_fee_percentage\r\n    log ReferralRewardPercentagesChanged(\r\n        _new_referral_discount_percentage,\r\n        _new_referral_reward_percentage,\r\n        _new_slippage_fee_percentage,\r\n    )\r\n\r\n@external\r\ndef set_start_end_timestamp(\r\n    _new_start_timestamp: uint256,\r\n    _new_end_timestamp: uint256,\r\n):\r\n    self._admin_check()\r\n\r\n    assert _new_start_timestamp > 0, \"Invalid start date\"\r\n    assert _new_end_timestamp > 0, \"Invalid end date\"\r\n    self.start_timestamp = _new_start_timestamp\r\n    self.end_timestamp = _new_end_timestamp\r\n    log StartEndTimestampChanged(_new_start_timestamp, _new_end_timestamp)\r\n\r\n@external\r\ndef update_admin(_new_admin: address):\r\n    self._admin_check()\r\n\r\n    self.admin = _new_admin\r\n    log UpdateAdmin(msg.sender, _new_admin)\r\n\r\n@external\r\ndef update_compass(_new_compass: address):\r\n    self._paloma_check()\r\n    \r\n    self.compass = _new_compass\r\n    log UpdateCompass(msg.sender, _new_compass)\r\n\r\n@internal\r\ndef _admin_check():\r\n    assert msg.sender == self.admin, \"Not admin\"\r\n\r\n@internal\r\ndef _paloma_check():\r\n    assert msg.sender == self.compass, \"Not compass\"\r\n    assert self.paloma == convert(slice(msg.data, unsafe_sub(len(msg.data), 32), 32), bytes32), \"Invalid paloma\"\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass", "ABI": "[{\"name\":\"Activated\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"paloma\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Claimed\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FeeReceiverChanged\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true},{\"name\":\"new_fee_receiver\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FundsReceiverChanged\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true},{\"name\":\"new_funds_receiver\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NodeSold\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"paloma\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"node_count\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"grain_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"nonce\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FeeChanged\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":true},{\"name\":\"new_processing_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_subscription_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PromoCodeCreated\",\"inputs\":[{\"name\":\"promo_code\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PromoCodeRemoved\",\"inputs\":[{\"name\":\"promo_code\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Purchased\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_in\",\"type\":\"address\",\"indexed\":false},{\"name\":\"fund_usd_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"fee_usd_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"subscription_usd_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"slippage_fee_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"node_count\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"promo_code\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ReferralRewardPercentagesChanged\",\"inputs\":[{\"name\":\"referral_discount_percentage\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"referral_reward_percentage\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"slippage_fee_percentage\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetPaloma\",\"inputs\":[{\"name\":\"paloma\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StartEndTimestampChanged\",\"inputs\":[{\"name\":\"new_start_timestamp\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_end_timestamp\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateAdmin\",\"inputs\":[{\"name\":\"old_admin\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateCompass\",\"inputs\":[{\"name\":\"old_compass\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_compass\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"WhitelistAmountUpdated\",\"inputs\":[{\"name\":\"redeemer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"new_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"activate_wallet\",\"inputs\":[{\"name\":\"_paloma\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create_promo_code\",\"inputs\":[{\"name\":\"_promo_code\",\"type\":\"bytes32\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_promo_code\",\"inputs\":[{\"name\":\"_promo_code\",\"type\":\"bytes32\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_whitelist_amounts\",\"inputs\":[{\"name\":\"_to_whitelist\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"node_sale\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"redeem_from_whitelist\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"pay_for_eth\",\"inputs\":[{\"name\":\"_estimated_node_count\",\"type\":\"uint256\"},{\"name\":\"_total_cost\",\"type\":\"uint256\"},{\"name\":\"_promo_code\",\"type\":\"bytes32\"},{\"name\":\"_path\",\"type\":\"bytes\"},{\"name\":\"_enhanced\",\"type\":\"bool\"},{\"name\":\"_subscription_month\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pay_for_token\",\"inputs\":[{\"name\":\"_token_in\",\"type\":\"address\"},{\"name\":\"_estimated_amount_in\",\"type\":\"uint256\"},{\"name\":\"_estimated_node_count\",\"type\":\"uint256\"},{\"name\":\"_total_cost\",\"type\":\"uint256\"},{\"name\":\"_promo_code\",\"type\":\"bytes32\"},{\"name\":\"_path\",\"type\":\"bytes\"},{\"name\":\"_enhanced\",\"type\":\"bool\"},{\"name\":\"_subscription_month\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_fee_receiver\",\"inputs\":[{\"name\":\"_new_fee_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_funds_receiver\",\"inputs\":[{\"name\":\"_new_funds_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_paloma\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_processing_fee\",\"inputs\":[{\"name\":\"_new_processing_fee\",\"type\":\"uint256\"},{\"name\":\"_new_subscription_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_referral_percentages\",\"inputs\":[{\"name\":\"_new_referral_discount_percentage\",\"type\":\"uint256\"},{\"name\":\"_new_referral_reward_percentage\",\"type\":\"uint256\"},{\"name\":\"_new_slippage_fee_percentage\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_start_end_timestamp\",\"inputs\":[{\"name\":\"_new_start_timestamp\",\"type\":\"uint256\"},{\"name\":\"_new_end_timestamp\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_admin\",\"inputs\":[{\"name\":\"_new_admin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_compass\",\"inputs\":[{\"name\":\"_new_compass\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"REWARD_TOKEN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"SWAP_ROUTER_02\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETH9\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paloma\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"compass\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee_receiver\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"funds_receiver\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"start_timestamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"end_timestamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"processing_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"subscription_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"slippage_fee_percentage\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"referral_discount_percentage\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"referral_reward_percentage\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"subscription\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"activates\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"promo_codes\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelist_amounts\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_compass\",\"type\":\"address\"},{\"name\":\"_swap_router\",\"type\":\"address\"},{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_fund_receiver\",\"type\":\"address\"},{\"name\":\"_fee_receiver\",\"type\":\"address\"},{\"name\":\"_start_timestamp\",\"type\":\"uint256\"},{\"name\":\"_end_timestamp\",\"type\":\"uint256\"},{\"name\":\"_processing_fee\",\"type\":\"uint256\"},{\"name\":\"_subscription_fee\",\"type\":\"uint256\"},{\"name\":\"_referral_discount_percentage\",\"type\":\"uint256\"},{\"name\":\"_referral_reward_percentage\",\"type\":\"uint256\"},{\"name\":\"_slippage_fee_percentage\",\"type\":\"uint256\"}],\"outputs\":[]}]", "ContractName": "     Paloma Node Sale Contract", "CompilerVersion": "vyper:0.4.0", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000004e74982adb77496308f9c16e45966264d1a4e59600000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000002175e091176f43ed55313e4bc31fe4e94051a6fe0000000000000000000000003e1912cb4a2ff0af856b17dcaea94976297b69a5000000000000000000000000adc5ee42cbf40cd4ae29bda773f468a659983b740000000000000000000000000000000000000000000000000000000066b2b9000000000000000000000000000000000000000000000000000000000066ff300000000000000000000000000000000000000000000000000000000000004c4b400000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000005dc0000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}