{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/VoteEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/// Utils /////\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IVoteEscrow.sol\\\";\\nimport \\\"./libraries/VoteEscrowLib.sol\\\";\\nimport \\\"./libraries/WeekMath.sol\\\";\\nimport \\\"./libraries/CheckpointsLib.sol\\\";\\n\\n///@title VoteEscrow Contract\\n///@notice This is a modified version of the Pendle VotingEscrowPendleMainchain contract\\n///        as well as VotingEscrowTokenBase\\n///        https://github.com/pendle-finance/pendle-core-v2-public/\\ncontract VoteEscrow is IVoteEscrow {\\n  using SafeERC20 for IERC20;\\n  using VoteEscrowLib for VeBalance;\\n  using VoteEscrowLib for LockedPosition;\\n  using Checkpoints for Checkpoints.History;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             STORAGE\\n  //////////////////////////////////////////////////////////////*/\\n\\n  IERC20 public immutable FYDE;\\n\\n  uint128 public constant WEEK = 1 weeks;\\n  uint128 public constant MAX_LOCK_TIME = 104 weeks;\\n  uint128 public constant MIN_LOCK_TIME = 1 weeks;\\n\\n  VeBalance internal _totalSupply;\\n\\n  mapping(address => LockedPosition) public positionData;\\n\\n  uint128 public lastSlopeChangeAppliedAt;\\n\\n  // [wTime] => slopeChanges\\n  mapping(uint128 => uint128) public slopeChanges;\\n\\n  // Saving totalSupply checkpoint for each week, later can be used for reward accounting\\n  // [wTime] => totalSupply\\n  mapping(uint128 => uint128) public totalSupplyAt;\\n\\n  // Saving VeBalance checkpoint for users of each week, can later use binary search\\n  // to ask for their vePendle balance at any wTime\\n  mapping(address => Checkpoints.History) internal userHistory;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           CONSTRUCTOR\\n  //////////////////////////////////////////////////////////////*/\\n\\n  constructor(IERC20 _FYDE) {\\n    FYDE = _FYDE;\\n    lastSlopeChangeAppliedAt = WeekMath.getCurrentWeekStart();\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             ERRORS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  error WeekMathInvalidTime(uint256 wTime);\\n\\n  error UpdateExpiryMustBeCurrent();\\n  error UpdateExpiryMustIncrease();\\n  error UpdateExpiryTooLong();\\n  error UpdateExpiryTooShort();\\n\\n  error VoteEscrowZeroAmount();\\n  error VoteEscrowNotExpired();\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             EXTERNAL\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice increases the lock position of a user (amount and/or expiry). Applicable even when\\n   * user has no position or the current position has expired.\\n   * @param additionalAmountToLock pendle amount to be pulled in from user to lock.\\n   * @param newExpiry new lock expiry. Must be a valid week beginning, and resulting lock\\n   * duration (since `block.timestamp`) must be within the allowed range.\\n   * @dev Will revert if resulting position has zero lock amount.\\n   * @dev See `_increasePosition()` for details on inner workings.\\n   * @dev Sidechain broadcasting is not bundled since it can be done anytime after.\\n   */\\n  function updateLock(uint128 additionalAmountToLock, uint128 newExpiry)\\n    public\\n    returns (uint128 newVeBalance)\\n  {\\n    address user = msg.sender;\\n\\n    if (!WeekMath.isValidWTime(newExpiry)) revert WeekMathInvalidTime(newExpiry);\\n    if (WeekMath.isCurrentlyExpired(newExpiry)) revert UpdateExpiryMustBeCurrent();\\n\\n    if (newExpiry < positionData[user].expiry) revert UpdateExpiryMustIncrease();\\n\\n    if (newExpiry > block.timestamp + MAX_LOCK_TIME) revert UpdateExpiryTooLong();\\n    if (newExpiry < block.timestamp + MIN_LOCK_TIME) revert UpdateExpiryTooShort();\\n\\n    uint128 newTotalAmountLocked = additionalAmountToLock + positionData[user].amount;\\n    if (newTotalAmountLocked == 0) revert VoteEscrowZeroAmount();\\n\\n    uint128 additionalDurationToLock = newExpiry - positionData[user].expiry;\\n\\n    if (additionalAmountToLock > 0) {\\n      FYDE.safeTransferFrom(user, address(this), additionalAmountToLock);\\n    }\\n\\n    newVeBalance = _increasePosition(user, additionalAmountToLock, additionalDurationToLock);\\n\\n    emit UpdateLock(user, newTotalAmountLocked, newExpiry);\\n  }\\n\\n  /**\\n   * @notice Withdraws an expired lock position, returns locked PENDLE back to user\\n   * @dev reverts if position is not expired, or if no locked PENDLE to withdraw\\n   * @dev broadcast is not bundled since it can be done anytime after\\n   */\\n  function withdraw() external returns (uint128 amount) {\\n    address user = msg.sender;\\n\\n    if (!_isPositionExpired(user)) revert VoteEscrowNotExpired();\\n    amount = positionData[user].amount;\\n\\n    if (amount == 0) revert VoteEscrowZeroAmount();\\n\\n    delete positionData[user];\\n\\n    FYDE.safeTransfer(user, amount);\\n\\n    emit Withdraw(user, amount);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             GETTERS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function balanceOf(address user) public view returns (uint128) {\\n    return positionData[user].convertToVeBalance().getCurrentValue();\\n  }\\n\\n  function totalSupplyStored() external view returns (uint128) {\\n    return _totalSupply.getCurrentValue();\\n  }\\n\\n  function totalSupplyCurrent() public returns (uint128) {\\n    (VeBalance memory supply,) = _applySlopeChange();\\n    return supply.getCurrentValue();\\n  }\\n\\n  function totalSupplyAndBalanceCurrent(address user) external returns (uint128, uint128) {\\n    return (totalSupplyCurrent(), balanceOf(user));\\n  }\\n\\n  function getUserHistoryLength(address user) external view returns (uint256) {\\n    return userHistory[user].length();\\n  }\\n\\n  function getUserHistoryAt(address user, uint256 index) external view returns (Checkpoint memory) {\\n    return userHistory[user].get(index);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             INTERNAL\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice increase the locking position of the user\\n   * @dev works by simply removing the old position from all relevant data (as if the user has\\n   * never locked) and then add in the new position\\n   */\\n  function _increasePosition(address user, uint128 amountToIncrease, uint128 durationToIncrease)\\n    internal\\n    returns (uint128)\\n  {\\n    LockedPosition memory oldPosition = positionData[user];\\n\\n    (VeBalance memory newSupply,) = _applySlopeChange();\\n\\n    if (!WeekMath.isCurrentlyExpired(oldPosition.expiry)) {\\n      // remove old position not yet expired\\n      VeBalance memory oldBalance = oldPosition.convertToVeBalance();\\n      newSupply = newSupply.sub(oldBalance);\\n      slopeChanges[oldPosition.expiry] -= oldBalance.slope;\\n    }\\n\\n    LockedPosition memory newPosition =\\n      LockedPosition(oldPosition.amount + amountToIncrease, oldPosition.expiry + durationToIncrease);\\n\\n    VeBalance memory newBalance = newPosition.convertToVeBalance();\\n    // add new position\\n    newSupply = newSupply.add(newBalance);\\n    slopeChanges[newPosition.expiry] += newBalance.slope;\\n\\n    _totalSupply = newSupply;\\n    positionData[user] = newPosition;\\n    userHistory[user].push(newBalance);\\n    return newBalance.getCurrentValue();\\n  }\\n\\n  /**\\n   * @notice updates the totalSupply, processing all slope changes of past weeks. At the same time,\\n   * set the finalized totalSupplyAt\\n   */\\n  function _applySlopeChange() internal returns (VeBalance memory, uint128) {\\n    VeBalance memory supply = _totalSupply;\\n    uint128 wTime = lastSlopeChangeAppliedAt;\\n    uint128 currentWeekStart = WeekMath.getCurrentWeekStart();\\n\\n    if (wTime >= currentWeekStart) return (supply, wTime);\\n\\n    while (wTime < currentWeekStart) {\\n      wTime += WEEK;\\n      supply = supply.sub(slopeChanges[wTime], wTime);\\n      totalSupplyAt[wTime] = supply.getValueAt(wTime);\\n    }\\n\\n    _totalSupply = supply;\\n    lastSlopeChangeAppliedAt = wTime;\\n\\n    return (supply, wTime);\\n  }\\n\\n  function _isPositionExpired(address user) internal view returns (bool) {\\n    return WeekMath.isCurrentlyExpired(positionData[user].expiry);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVoteEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/// Utils /////\\nimport \\\"../libraries/VoteEscrowLib.sol\\\";\\nimport \\\"../libraries/CheckpointsLib.sol\\\";\\n\\n///@title VoteEscrow Contract Interface\\n///@notice This contract is a modified version of the Pendle IPVotingEscrowMainchain interface\\n///        https://github.com/pendle-finance/pendle-core-v2-public/\\ninterface IVoteEscrow {\\n  /*//////////////////////////////////////////////////////////////\\n                             EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  event UpdateLock(address indexed user, uint128 amount, uint128 expiry);\\n  event Withdraw(address indexed user, uint128 amount);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             EXTERNAL\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function updateLock(uint128 additionalAmountToLock, uint128 expiry) external returns (uint128);\\n\\n  function withdraw() external returns (uint128);\\n\\n  function totalSupplyAt(uint128 timestamp) external view returns (uint128);\\n\\n  function balanceOf(address user) external view returns (uint128);\\n\\n  function positionData(address user) external view returns (uint128 amount, uint128 expiry);\\n\\n  function totalSupplyStored() external view returns (uint128);\\n\\n  function totalSupplyCurrent() external returns (uint128);\\n\\n  function totalSupplyAndBalanceCurrent(address user) external returns (uint128, uint128);\\n\\n  function getUserHistoryLength(address user) external view returns (uint256);\\n\\n  function getUserHistoryAt(address user, uint256 index) external view returns (Checkpoint memory);\\n}\\n\"\r\n    },\r\n    \"src/libraries/VoteEscrowLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unkown\\n// This contract is a modified version of the Pendle VeBalanceLib Library\\n// https://github.com/pendle-finance/pendle-core-v2-public/\\n\\npragma solidity ^0.8.19;\\n\\nstruct VeBalance {\\n  uint128 bias;\\n  uint128 slope;\\n}\\n\\nstruct LockedPosition {\\n  uint128 amount;\\n  uint128 expiry;\\n}\\n\\nerror ZeroSlope(uint128 bias, uint128 slope);\\n\\nlibrary VoteEscrowLib {\\n  uint128 internal constant MAX_LOCK_TIME = 104 weeks;\\n\\n  function add(VeBalance memory a, VeBalance memory b) internal pure returns (VeBalance memory res) {\\n    res.bias = a.bias + b.bias;\\n    res.slope = a.slope + b.slope;\\n  }\\n\\n  function sub(VeBalance memory a, VeBalance memory b) internal pure returns (VeBalance memory res) {\\n    res.bias = a.bias - b.bias;\\n    res.slope = a.slope - b.slope;\\n  }\\n\\n  function sub(VeBalance memory a, uint128 slope, uint128 expiry) internal pure returns (VeBalance memory res) {\\n    res.slope = a.slope - slope;\\n    res.bias = a.bias - slope * expiry;\\n  }\\n  \\n  function isExpired(VeBalance memory a) internal view returns (bool) {\\n    return a.slope * uint128(block.timestamp) >= a.bias;\\n  }\\n\\n  function getCurrentValue(VeBalance memory a) internal view returns (uint128) {\\n    if (isExpired(a)) return 0;\\n    return getValueAt(a, uint128(block.timestamp));\\n  }\\n\\n  function getValueAt(VeBalance memory a, uint128 t) internal pure returns (uint128) {\\n    if (a.slope * t > a.bias) return 0;\\n    return a.bias - a.slope * t;\\n  }\\n\\n  function getExpiry(VeBalance memory a) internal pure returns (uint128) {\\n    if (a.slope == 0) revert ZeroSlope(a.bias, a.slope);\\n    return a.bias / a.slope;\\n  }\\n\\n  function convertToVeBalance(LockedPosition memory position)\\n    internal\\n    pure\\n    returns (VeBalance memory res)\\n  {\\n    res.slope = position.amount / MAX_LOCK_TIME;\\n    res.bias = res.slope * position.expiry;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/libraries/WeekMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This contract is a modified version of the Pendle WeekMath Library\\n// https://github.com/pendle-finance/pendle-core-v2-public/\\n\\npragma solidity ^0.8.20;\\n\\nlibrary WeekMath {\\n  uint128 internal constant WEEK = 7 days;\\n\\n  function getWeekStartTimestamp(uint128 timestamp) internal pure returns (uint128) {\\n    return (timestamp / WEEK) * WEEK;\\n  }\\n\\n  function getCurrentWeekStart() internal view returns (uint128) {\\n    return getWeekStartTimestamp(uint128(block.timestamp));\\n  }\\n\\n  function isValidWTime(uint256 time) internal pure returns (bool) {\\n    return time % WEEK == 0;\\n  }\\n\\n  function isCurrentlyExpired(uint256 expiry) internal view returns (bool) {\\n    return (expiry <= block.timestamp);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/libraries/CheckpointsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This contract is a modified version of the Pendle VeHistoryLib Library\\n// https://github.com/pendle-finance/pendle-core-v2-public/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VoteEscrowLib.sol\\\";\\nimport \\\"./WeekMath.sol\\\";\\n\\nstruct Checkpoint {\\n  uint128 timestamp;\\n  VeBalance value;\\n}\\n\\nlibrary Checkpoints {\\n  struct History {\\n    Checkpoint[] _checkpoints;\\n  }\\n\\n  function length(History storage self) internal view returns (uint256) {\\n    return self._checkpoints.length;\\n  }\\n\\n  function get(History storage self, uint256 index) internal view returns (Checkpoint memory) {\\n    return self._checkpoints[index];\\n  }\\n\\n  function push(History storage self, VeBalance memory value) internal {\\n    uint256 pos = self._checkpoints.length;\\n    if (pos > 0 && self._checkpoints[pos - 1].timestamp == WeekMath.getCurrentWeekStart()) {\\n      self._checkpoints[pos - 1].value = value;\\n    } else {\\n      self._checkpoints.push(Checkpoint({timestamp: WeekMath.getCurrentWeekStart(), value: value}));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\r\n      \"murky/=lib/murky/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"surl/=lib/surl/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_FYDE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateExpiryMustBeCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateExpiryMustIncrease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateExpiryTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateExpiryTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoteEscrowNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoteEscrowZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wTime\",\"type\":\"uint256\"}],\"name\":\"WeekMathInvalidTime\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"expiry\",\"type\":\"uint128\"}],\"name\":\"UpdateLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FYDE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserHistoryAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"bias\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"slope\",\"type\":\"uint128\"}],\"internalType\":\"struct VeBalance\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSlopeChangeAppliedAt\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"expiry\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalSupplyAndBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCurrent\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyStored\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"additionalAmountToLock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"newExpiry\",\"type\":\"uint128\"}],\"name\":\"updateLock\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"newVeBalance\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VoteEscrow", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dde736837c7c275a952a52ee11face88adde6711", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}