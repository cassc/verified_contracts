{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\ncontract HiMarket is Ownable {\r\n    address public protocolFeeDestination = 0xd45DCFa9b6136C24c80578B50Ff793E374F3F427;\r\n    address public protocolFeeDestination2 = 0x8a8Cf648e6A7325AaE25bEfD04FF2a2cb29B0A16;\r\n    uint256 public protocolFeePercentBuy = 50000000000000000;\r\n    uint256 public protocolFeePercentSell = 50000000000000000;\r\n    mapping(address => uint256) public subjectFeePercent;\r\n    mapping(address => uint256) public holderFeePercent;\r\n    uint256 public subjectFeeMax = 100000000000000000;\r\n    mapping(address => mapping(address => uint256)) public sharesBalance;\r\n    mapping(address => uint256) public sharesSupply;\r\n\r\n    event Transfer(address trader,address subject, address from, uint256 isBuy, uint256 shareAmount, uint256 ethAmount, uint256 subjectEthAmount, uint256 supply , uint256 holderFee);\r\n\r\n    //SET\r\n    function setFeeDestination(address _feeDestination, address _feeDestination2) public onlyOwner {\r\n        protocolFeeDestination = _feeDestination;\r\n        protocolFeeDestination2 = _feeDestination2;\r\n    }\r\n\r\n    function setProtocolFeePercent(uint256 _feePercentBuy,uint256 _feePercentSell) public onlyOwner {\r\n        protocolFeePercentBuy = _feePercentBuy;\r\n        protocolFeePercentSell = _feePercentSell;\r\n    }\r\n\r\n    function setSubjectFeePercentMax(uint256 _feePercent) public onlyOwner {\r\n        subjectFeeMax = _feePercent;\r\n\r\n    }\r\n\r\n    function setSubjectFeePercent(uint256 _feePercent, uint256 _feeHolderPercent) public {\r\n        require(sharesSupply[msg.sender] > 0,\"No own\");\r\n        require(_feePercent + _feeHolderPercent<=subjectFeeMax, \"Max Fee Error\");\r\n        subjectFeePercent[msg.sender]=_feePercent;\r\n        holderFeePercent[msg.sender]=_feeHolderPercent;\r\n    }\r\n\r\n    \r\n    function firstShare(uint256 subjectFee_, uint256 holderFee_) public payable {\r\n    require(subjectFee_+holderFee_<=subjectFeeMax, \"Max Fee Error\");\r\n    require(sharesSupply[msg.sender]==0,\"You already have an account subject\");\r\n    sharesBalance[msg.sender][msg.sender] = 1;\r\n    sharesSupply[msg.sender]=1;\r\n    subjectFeePercent[msg.sender]=subjectFee_;\r\n    holderFeePercent[msg.sender]=holderFee_;\r\n    emit Transfer(msg.sender, msg.sender, 0x0000000000000000000000000000000000000000, 1, 1, 0, 0, 1, 0);\r\n    }\r\n\r\n    function transferShare(address shareAddress, uint256 amount, address to) public {\r\n        require(sharesBalance[shareAddress][msg.sender]>=amount);\r\n        if (to==0x0000000000000000000000000000000000000000) {\r\n            (bool success, ) = protocolFeeDestination.call{value: getPrice(sharesBalance[shareAddress][0x0000000000000000000000000000000000000000],amount)}(\"\");\r\n            require(success, \"Unable to send funds\"); \r\n        }\r\n        sharesBalance[shareAddress][msg.sender] = sharesBalance[shareAddress][msg.sender] - amount;\r\n        sharesBalance[shareAddress][to] = sharesBalance[shareAddress][to] + amount;\r\n        emit Transfer(msg.sender, shareAddress, to, 3, amount, 0, 0, sharesSupply[shareAddress], 0);\r\n    }\r\n     \r\n\r\n    //GET\r\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\r\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1 )* (supply) * (2 * (supply - 1) + 1) / 6;\r\n        uint256 sum2 = supply == 0 && amount == 1 ? 0 : (supply - 1 + amount) * (supply + amount) * (2 * (supply - 1 + amount) + 1) / 6;\r\n        uint256 summation = sum2 - sum1;\r\n        return summation * 1 ether / 16000;\r\n    }\r\n\r\n    function getBuyPrice(address shareAddress, uint256 amount) public view returns (uint256) {\r\n        return getPrice(sharesSupply[shareAddress], amount);\r\n    }\r\n\r\n    function getSellPrice(address shareAddress, uint256 amount) public view returns (uint256) {\r\n        return getPrice(sharesSupply[shareAddress] - amount, amount);\r\n    }\r\n\r\n    function getBuyPriceAfterFee(address shareAddress, uint256 amount) public view returns (uint256) {\r\n        uint256 price = getBuyPrice(shareAddress, amount);\r\n        uint256 protocolFee = price * protocolFeePercentBuy / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent[shareAddress] / 1 ether;\r\n        uint256 holderFee = price * holderFeePercent[shareAddress] / 1 ether;\r\n        return price + protocolFee + subjectFee + holderFee;\r\n    }\r\n\r\n    function getSellPriceAfterFee(address shareAddress, uint256 amount) public view returns (uint256) {\r\n        uint256 price = getSellPrice(shareAddress, amount);\r\n        uint256 protocolFee = price * protocolFeePercentSell / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent[shareAddress] / 1 ether;\r\n        uint256 holderFee = price * holderFeePercent[shareAddress] / 1 ether;\r\n        return price - protocolFee - subjectFee - holderFee;\r\n    }\r\n\r\n    //TRADE\r\n    function buyShares(address shareAddress, uint256 amount) public payable {\r\n        uint256 supply = sharesSupply[shareAddress];\r\n        require(supply > 0, \"Supply > 0\");\r\n        uint256 price = getPrice(supply, amount);\r\n        uint256 protocolFee = price * protocolFeePercentBuy / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent[shareAddress] / 1 ether;\r\n        uint256 holderFee = price * holderFeePercent[shareAddress] / 1 ether;\r\n        require(msg.value >= price + protocolFee + subjectFee + holderFee, \"Insufficient payment\");\r\n        sharesBalance[shareAddress][msg.sender] = sharesBalance[shareAddress][msg.sender] + amount;\r\n        sharesSupply[shareAddress] = supply + amount;\r\n        emit Transfer(msg.sender, shareAddress, 0x0000000000000000000000000000000000000000 , 1, amount, price, subjectFee, supply + amount, holderFee);\r\n        (bool success, ) = shareAddress.call{value: subjectFee}(\"\");\r\n        (bool success2, ) = protocolFeeDestination.call{value: holderFee+protocolFee}(\"\");\r\n        require(success && success2, \"Unable to send funds\"); \r\n    }\r\n\r\n    function sellShares(address shareAddress, uint256 amount) public payable {\r\n        uint256 supply = sharesSupply[shareAddress];\r\n        require(supply > amount, \"Cannot sell the last share\");\r\n        uint256 price = getPrice(supply - amount, amount);\r\n        uint256 protocolFee = price * protocolFeePercentSell / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent[shareAddress] / 1 ether;\r\n        uint256 holderFee = price * holderFeePercent[shareAddress] / 1 ether;\r\n        require(sharesBalance[shareAddress][msg.sender] >= amount, \"Insufficient shares\");\r\n        sharesBalance[shareAddress][msg.sender] = sharesBalance[shareAddress][msg.sender] - amount;\r\n        sharesSupply[shareAddress] = supply - amount;\r\n        emit Transfer(msg.sender, shareAddress, 0x0000000000000000000000000000000000000000, 2, amount, price, subjectFee, supply - amount, holderFee);\r\n        (bool success1, ) = msg.sender.call{value: price - protocolFee - subjectFee - holderFee}(\"\"); \r\n        (bool success2, ) = shareAddress.call{value: subjectFee}(\"\");\r\n        (bool success3, ) = protocolFeeDestination2.call{value: holderFee+protocolFee}(\"\");\r\n        require(success1 && success2 && success3, \"Unable to send funds\"); \r\n\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"isBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holderFee\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyShares\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subjectFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holderFee_\",\"type\":\"uint256\"}],\"name\":\"firstShare\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercentBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercentSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellShares\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDestination2\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentSell\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeHolderPercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercentMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HiMarket", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://66a2c1057c4b5c33b61252101719f12f958d18ee883fd9ea7c1c25c55bd25eae"}