{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.10;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title IPoolAddressesProvider\r\n * @notice Defines the basic interface for a Pool Addresses Provider.\r\n */\r\ninterface IPoolAddressesProvider {\r\n    function getPool() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title FlashLoanSimpleReceiverBase\r\n * @notice Base contract to develop a flashloan-receiver contract.\r\n */\r\nabstract contract FlashLoanSimpleReceiverBase {\r\n    IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\r\n    IPool public immutable POOL;\r\n\r\n    constructor(IPoolAddressesProvider provider) {\r\n        ADDRESSES_PROVIDER = provider;\r\n        POOL = IPool(provider.getPool());\r\n    }\r\n\r\n    function executeOperation(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 premium,\r\n        address initiator,\r\n        bytes calldata params\r\n    ) external virtual returns (bool);\r\n}\r\n\r\n/**\r\n * @title IPool\r\n * @notice Basic interface for Aave pool interactions.\r\n */\r\ninterface IPool {\r\n    function flashLoanSimple(\r\n        address receiverAddress,\r\n        address asset,\r\n        uint256 amount,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n}\r\n\r\n\r\ninterface ICurvePool {\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n}\r\n\r\ninterface IMetaStreet {\r\n    function redeem(uint128 tick, uint256 shares) external returns (uint128);\r\n    function withdraw(uint128 tick, uint128 redemptionId) external returns (uint256, uint256);\r\n}\r\n\r\ncontract FlashLoan is FlashLoanSimpleReceiverBase {\r\n    address payable owner;\r\n\r\n    address public TOKEN_MWSTKETH_ADDRESS_40 = 0xC272B96bCcdaf1BF98F2197D355066Da3C15982a;\r\n    address public TOKEN_MWSTKETH_ADDRESS_20 = 0xC975342A95cCb75378ddc646B8620fa3Cd5bc051;\r\n\r\n    address public CONTRACT_CURVE_POOL_40_ADDRESS = 0x2A7f617AF3009578021473a88A7c5a2aF5aACd79;\r\n    address public CONTRACT_CURVE_POOL_20_ADDRESS = 0xFE3C78D947b329160496E192b4Cf417bB86272Ed;\r\n\r\n    address public CONTRACT_METASTREET_ADDRESS = 0xC0874B4B9a1BaE857B054936167F8Ef79257A757;\r\n\r\n    bool private forToken40;\r\n\r\n    constructor(address _addressProvider)\r\n        FlashLoanSimpleReceiverBase(IPoolAddressesProvider(_addressProvider))\r\n    {\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    function executeOperation(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 premium,\r\n        address initiator,\r\n        bytes calldata params\r\n    ) external override returns (bool) {\r\n\r\n        initiateCurveSwap(1,0, amount, asset);\r\n\r\n        uint128 tick = 10240000000000000000032;\r\n        uint256 mwstkEthBalance = 0;\r\n\r\n        if (forToken40) {\r\n            mwstkEthBalance = IERC20(TOKEN_MWSTKETH_ADDRESS_40).balanceOf(address(this));\r\n            IERC20(TOKEN_MWSTKETH_ADDRESS_40).approve(CONTRACT_METASTREET_ADDRESS, mwstkEthBalance);\r\n        } else {\r\n            mwstkEthBalance = IERC20(TOKEN_MWSTKETH_ADDRESS_20).balanceOf(address(this));\r\n            tick = 5120000000000000000032;\r\n            IERC20(TOKEN_MWSTKETH_ADDRESS_20).approve(CONTRACT_METASTREET_ADDRESS, mwstkEthBalance);\r\n        }\r\n\r\n        if (mwstkEthBalance > 0) {\r\n            uint128 redemptionId = redeemMwstkEtkTokensOnMetaStreetContract(tick, mwstkEthBalance);\r\n            withdrawFromMetaStreet(tick, redemptionId);\r\n        }\r\n\r\n        uint256 amountOwed = amount + premium;\r\n        IERC20(asset).approve(address(POOL), amountOwed);\r\n\r\n        return true;\r\n    }\r\n\r\n    function requestFlashLoan(address _token, uint256 _amount, bool _forToken40) public {\r\n        forToken40 = _forToken40;\r\n\r\n        address receiverAddress = address(this);\r\n        address asset = _token;\r\n        uint256 amount = _amount;\r\n        bytes memory params = \"\";\r\n        uint16 referralCode = 0;\r\n\r\n        POOL.flashLoanSimple(\r\n            receiverAddress,\r\n            asset,\r\n            amount,\r\n            params,\r\n            referralCode\r\n        );\r\n    }\r\n\r\n    function getBalance(address _tokenAddress) external view returns (uint256) {\r\n        return IERC20(_tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function withdraw(address _tokenAddress) external onlyOwner {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function initiateCurveSwap(int128 i, int128 j, uint256 amount, address asset) internal {\r\n        uint min_dy = amount;\r\n\r\n        if (forToken40) {\r\n            IERC20(asset).approve(CONTRACT_CURVE_POOL_40_ADDRESS, amount);\r\n            ICurvePool(CONTRACT_CURVE_POOL_40_ADDRESS).exchange(i, j, amount, min_dy);\r\n        } else {\r\n            IERC20(asset).approve(CONTRACT_CURVE_POOL_20_ADDRESS, amount);\r\n            ICurvePool(CONTRACT_CURVE_POOL_20_ADDRESS).exchange(i, j, amount, min_dy);\r\n        }\r\n    }\r\n\r\n    function redeemMwstkEtkTokensOnMetaStreetContract(uint128 tick, uint256 shares) internal returns (uint128) {\r\n        return IMetaStreet(CONTRACT_METASTREET_ADDRESS).redeem(tick, shares);\r\n    }\r\n\r\n    function withdrawFromMetaStreet(uint128 tick, uint128 redemptionId) internal {\r\n        (uint256 amountBurned, uint256 amountWithdrawn) = IMetaStreet(CONTRACT_METASTREET_ADDRESS).withdraw(tick, redemptionId);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_CURVE_POOL_20_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_CURVE_POOL_40_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_METASTREET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MWSTKETH_ADDRESS_20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MWSTKETH_ADDRESS_40\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_forToken40\",\"type\":\"bool\"}],\"name\":\"requestFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlashLoan", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002f39d218133afab8f2b819b1066c7e434ad94e9e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a91446b15275fd42956416bc8a61885c21ab97dbc423428549d88c12aedcdd3e"}