{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nstruct DepositInfo {\r\n    uint256 amount;\r\n    uint256 lockupPeriod;\r\n    uint256 interestRate;\r\n    uint256 depositTime;\r\n    uint256 lastClaimTime;\r\n}\r\n\r\ncontract wfilEthStake {\r\n    address payable private _owner;\r\n\r\n    uint256 public uniqueUsers;\r\n    mapping(address => bool) public isExists;\r\n    mapping(address => bool) public isWhitelist;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => uint256) public _lastClaimTime;\r\n    mapping(address => uint256) public _lockupPeriod;\r\n    mapping(address => uint256) public _interestRate;\r\n    mapping(address => bool) public _blacklisted;\r\n    mapping(address => address) public _referrals;\r\n    mapping(address => uint256) public _initialDeposits;\r\n    mapping(address => uint256) public _depositTime;\r\n    mapping(address => DepositInfo[]) public _deposits;\r\n    mapping(address => uint256) public _totalWithdrawnAmounts;\r\n\r\n    bool public referralSwitch = true;\r\n    uint256 public planOneRoi = 300; //0.3\r\n    uint256 public planSecondRoi = 2200; //2.2\r\n    uint256 public planThirdRoi = 13000; //13\r\n    uint256 public percentagedivider = 1e5;\r\n\r\n    event Deposit(address indexed user, uint256 amount, uint256 lockupPeriod);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event InterestClaimed(address indexed user, uint256 amount);\r\n    event Blacklisted(address indexed user);\r\n    event Unblacklisted(address indexed user);\r\n\r\n    constructor() {\r\n        _owner = payable(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not the contract owner.\");\r\n        _;\r\n    }\r\n\r\n    function deposit(uint256 lockupPeriod, address referral) external payable {\r\n        require(\r\n            lockupPeriod == 7 || lockupPeriod == 30 || lockupPeriod == 90,\r\n            \"Invalid plan\"\r\n        );\r\n\r\n        uint256 currentLockupPeriod = lockupPeriod * 1 days;\r\n        uint256 currentInterestRate;\r\n\r\n        if (lockupPeriod == 7) {\r\n            require(\r\n                msg.value >= 5**17 && msg.value <= 2 * 10**18,\r\n                \"Invalid deposit amount for 7-day lockup.\"\r\n            );\r\n            currentInterestRate = planOneRoi;\r\n        } else if (lockupPeriod == 30) {\r\n            require(\r\n                msg.value >= 4 * 10**18 && msg.value <= 7 * 10**18,\r\n                \"Invalid deposit amount for 30-day lockup.\"\r\n            );\r\n            currentInterestRate = planSecondRoi; //\r\n        } else if (lockupPeriod == 90) {\r\n            require(\r\n                msg.value >= 5 * 10**18 && msg.value <= 15 * 10**18,\r\n                \"Invalid deposit amount for 90-day lockup.\"\r\n            );\r\n            currentInterestRate = planThirdRoi;\r\n        }\r\n        if (!isExists[msg.sender]) {\r\n            if (!isWhitelist[msg.sender]) {\r\n                if (referralSwitch) {\r\n                    require(\r\n                        _referrals[msg.sender] == address(0) &&\r\n                            referral != msg.sender &&\r\n                            referral != address(0) &&\r\n                            isExists[referral]\r\n                    );\r\n                    _referrals[msg.sender] = referral;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isExists[msg.sender]) {\r\n            isExists[msg.sender] = true;\r\n        }\r\n\r\n        DepositInfo memory newDeposit = DepositInfo({\r\n            amount: msg.value,\r\n            lockupPeriod: currentLockupPeriod,\r\n            interestRate: currentInterestRate,\r\n            depositTime: block.timestamp,\r\n            lastClaimTime: block.timestamp\r\n        });\r\n\r\n        _balances[msg.sender] += msg.value;\r\n        _lockupPeriod[msg.sender] = currentLockupPeriod;\r\n        _interestRate[msg.sender] = currentInterestRate;\r\n        _depositTime[msg.sender] = block.timestamp;\r\n        _lastClaimTime[msg.sender] = block.timestamp;\r\n        _initialDeposits[msg.sender] = msg.value;\r\n        _deposits[msg.sender].push(newDeposit);\r\n\r\n        emit Deposit(msg.sender, msg.value, lockupPeriod);\r\n    }\r\n\r\n    function blacklist(address user) external onlyOwner {\r\n        require(!_blacklisted[user], \"User is already blacklisted.\");\r\n        _blacklisted[user] = true;\r\n\r\n        emit Blacklisted(user);\r\n    }\r\n\r\n    function getTotalWithdrawnAmount(address user, uint256 lockupPeriod)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalWithdrawn = 0;\r\n        for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n            if (_deposits[user][i].lockupPeriod == lockupPeriod * 1 days) {\r\n                totalWithdrawn += _totalWithdrawnAmounts[user];\r\n            }\r\n        }\r\n        return totalWithdrawn;\r\n    }\r\n\r\n    function getRemainingAmount(address user) external view returns (uint256) {\r\n        uint256 totalDeposits = 0;\r\n        uint256 totalRemaining = 0;\r\n\r\n        for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n            totalDeposits += _deposits[user][i].amount;\r\n            if (_deposits[user][i].amount > 0) {\r\n                totalRemaining += _deposits[user][i].amount;\r\n            }\r\n        }\r\n\r\n        return totalDeposits - totalRemaining;\r\n    }\r\n\r\n    function unblacklist(address user) external onlyOwner {\r\n        require(_blacklisted[user], \"User is not blacklisted.\");\r\n        _blacklisted[user] = false;\r\n\r\n        emit Unblacklisted(user);\r\n    }\r\n\r\n    function withdraw(uint256 depositIndex) external {\r\n        require(!_blacklisted[msg.sender], \"You are not allowed to withdraw.\");\r\n        require(\r\n            depositIndex < _deposits[msg.sender].length,\r\n            \"Invalid deposit index.\"\r\n        );\r\n        require(\r\n            block.timestamp >=\r\n                _deposits[msg.sender][depositIndex].depositTime +\r\n                    _deposits[msg.sender][depositIndex].lockupPeriod,\r\n            \"Lockup period not over.\"\r\n        );\r\n\r\n        uint256 amountToWithdraw = _deposits[msg.sender][depositIndex].amount;\r\n        require(amountToWithdraw > 0, \"No funds to withdraw.\");\r\n\r\n        _deposits[msg.sender][depositIndex].amount = 0;\r\n        _totalWithdrawnAmounts[msg.sender] += amountToWithdraw; // Store the withdrawn amount\r\n        payable(msg.sender).transfer(amountToWithdraw);\r\n\r\n        emit Withdraw(msg.sender, amountToWithdraw);\r\n    }\r\n\r\n    function transferFunds(uint256 amount) external onlyOwner {\r\n        _owner.transfer(amount);\r\n    }\r\n\r\n    function calculateInterest(address user, uint256 depositIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        DepositInfo storage _deposit = _deposits[user][depositIndex];\r\n        uint256 timeElapsed = block.timestamp - _deposit.lastClaimTime;\r\n        uint256 interest = (_deposit.amount *\r\n            _deposit.interestRate *\r\n            timeElapsed) / (percentagedivider * _deposit.lockupPeriod); // 86400 seconds in a day\r\n        return interest;\r\n    }\r\n\r\n    function claimInterestForDeposit(uint256 lockupPeriod) external {\r\n        require(\r\n            !_blacklisted[msg.sender],\r\n            \"You are not allowed to claim interest.\"\r\n        );\r\n\r\n        uint256 totalInterestToClaim = 0;\r\n\r\n        for (uint256 i = 0; i < _deposits[msg.sender].length; i++) {\r\n            if (\r\n                _deposits[msg.sender][i].lockupPeriod == lockupPeriod * 1 days\r\n            ) {\r\n                uint256 interestToClaim = calculateInterest(msg.sender, i);\r\n                require(interestToClaim > 0, \"No interest to claim.\");\r\n\r\n                _deposits[msg.sender][i].lastClaimTime = block.timestamp;\r\n                totalInterestToClaim += interestToClaim;\r\n            }\r\n        }\r\n        payable(msg.sender).transfer(totalInterestToClaim);\r\n\r\n        emit InterestClaimed(msg.sender, totalInterestToClaim);\r\n    }\r\n\r\n    function claimAbleRewardForLocks(uint256 lockupPeriod)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalInterestToClaim = 0;\r\n\r\n        for (uint256 i = 0; i < _deposits[msg.sender].length; i++) {\r\n            if (\r\n                _deposits[msg.sender][i].lockupPeriod == lockupPeriod * 1 days\r\n            ) {\r\n                uint256 interestToClaim = calculateInterest(msg.sender, i);\r\n                require(interestToClaim > 0, \"No interest to claim.\");\r\n                totalInterestToClaim += interestToClaim;\r\n            }\r\n        }\r\n        return totalInterestToClaim;\r\n    }\r\n\r\n    function getDepositInfo(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory depositIndices,\r\n            uint256[] memory unlockTimes,\r\n            uint256[] memory stakedAmounts,\r\n            uint256[] memory lockupPeriods\r\n        )\r\n    {\r\n        uint256 depositCount = _deposits[user].length;\r\n\r\n        depositIndices = new uint256[](depositCount);\r\n        unlockTimes = new uint256[](depositCount);\r\n        stakedAmounts = new uint256[](depositCount);\r\n        lockupPeriods = new uint256[](depositCount);\r\n\r\n        for (uint256 i = 0; i < depositCount; i++) {\r\n            depositIndices[i] = i;\r\n            unlockTimes[i] =\r\n                _deposits[user][i].depositTime +\r\n                _deposits[user][i].lockupPeriod;\r\n            stakedAmounts[i] = _deposits[user][i].amount;\r\n            lockupPeriods[i] = _deposits[user][i].lockupPeriod;\r\n        }\r\n    }\r\n\r\n    function getDepositStatus(address user, uint256 lockupPeriod)\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory depositIndices,\r\n            uint256[] memory remainingTimes,\r\n            uint256[] memory interestsCollected,\r\n            uint256[] memory interestsNotCollected,\r\n            uint256[] memory nextInterestClaims\r\n        )\r\n    {\r\n        uint256 depositCount = 0;\r\n\r\n        for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n            if (_deposits[user][i].lockupPeriod == lockupPeriod * 1 days) {\r\n                depositCount++;\r\n            }\r\n        }\r\n\r\n        depositIndices = new uint256[](depositCount);\r\n        remainingTimes = new uint256[](depositCount);\r\n        interestsCollected = new uint256[](depositCount);\r\n        interestsNotCollected = new uint256[](depositCount);\r\n        nextInterestClaims = new uint256[](depositCount);\r\n\r\n        uint256 depositIndex = 0;\r\n        for (uint256 i = 0; i < _deposits[user].length; i++) {\r\n            if (_deposits[user][i].lockupPeriod == lockupPeriod * 1 days) {\r\n                depositIndices[depositIndex] = i;\r\n                if (\r\n                    block.timestamp <\r\n                    _deposits[user][i].depositTime +\r\n                        _deposits[user][i].lockupPeriod\r\n                ) {\r\n                    remainingTimes[depositIndex] =\r\n                        _deposits[user][i].depositTime +\r\n                        _deposits[user][i].lockupPeriod -\r\n                        block.timestamp;\r\n                } else {\r\n                    remainingTimes[depositIndex] = 0;\r\n                }\r\n\r\n                interestsCollected[depositIndex] =\r\n                    _deposits[user][i].lastClaimTime -\r\n                    (_deposits[user][i].depositTime *\r\n                        _deposits[user][i].amount *\r\n                        _deposits[user][i].interestRate) /\r\n                    100;\r\n                interestsNotCollected[depositIndex] = calculateInterest(\r\n                    user,\r\n                    i\r\n                );\r\n                int256 nextClaim = int256(\r\n                    _deposits[user][i].lastClaimTime + 30 * 1 minutes\r\n                ) - int256(block.timestamp);\r\n                nextInterestClaims[depositIndex] = uint256(max(nextClaim, 0));\r\n                depositIndex++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeROi(\r\n        uint256 _planOneRoi,\r\n        uint256 _planSecondRoi,\r\n        uint256 _planThirdRoi\r\n    ) public onlyOwner {\r\n        planOneRoi = _planOneRoi;\r\n        planSecondRoi = _planSecondRoi;\r\n        planThirdRoi = _planThirdRoi;\r\n    }\r\n\r\n    function setpercentdivider(uint256 _percentdivider) public onlyOwner {\r\n        percentagedivider = _percentdivider;\r\n    }\r\n\r\n    function setReferralSwitch(bool _value) public onlyOwner {\r\n        referralSwitch = _value;\r\n    }\r\n\r\n    function setAddressWhitelist(address _acc) public onlyOwner {\r\n        isWhitelist[_acc] = true;\r\n    }\r\n\r\n    function max(int256 a, int256 b) private pure returns (int256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function getNumberOfDeposits(address user) external view returns (uint256) {\r\n        return _deposits[user].length;\r\n    }\r\n\r\n    function getReferral(address user) external view returns (address) {\r\n        return _referrals[user];\r\n    }\r\n\r\n    function getLockupPeriod(address user) external view returns (uint256) {\r\n        return _lockupPeriod[user];\r\n    }\r\n\r\n    function getInterestRate(address user) external view returns (uint256) {\r\n        return _interestRate[user];\r\n    }\r\n\r\n    function getBalance(address user) external view returns (uint256) {\r\n        return _balances[user];\r\n    }\r\n\r\n    function isBlacklisted(address user) external view returns (bool) {\r\n        return _blacklisted[user];\r\n    }\r\n\r\n    function getLastClaimTime(address user) external view returns (uint256) {\r\n        return _lastClaimTime[user];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InterestClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_depositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_initialDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalWithdrawnAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planOneRoi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planSecondRoi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planThirdRoi\",\"type\":\"uint256\"}],\"name\":\"changeROi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"claimAbleRewardForLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"claimInterestForDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockupPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"getDepositStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"remainingTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"interestsCollected\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"interestsNotCollected\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextInterestClaims\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumberOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"getTotalWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentagedivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planOneRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planSecondRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planThirdRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acc\",\"type\":\"address\"}],\"name\":\"setAddressWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setReferralSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentdivider\",\"type\":\"uint256\"}],\"name\":\"setpercentdivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "wfilEthStake", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://37a5a78dbe3c80a23665fd1680a7ce3340a85fdee55b7b6a8ed67308ce1901b3"}