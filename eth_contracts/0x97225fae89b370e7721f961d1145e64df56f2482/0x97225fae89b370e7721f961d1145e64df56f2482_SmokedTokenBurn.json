{"SourceCode": "/**\r\n        Smoked Token Burn - $BURN\r\n        Telegram: https://t.me/SmokedTokenBurn\r\n        Twitter: https://twitter.com/SmokedTokenBurn\r\n        Website: https://SmokedTokenBurn.com\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n \r\n    function feeTo() external view returns (address);\r\n \r\n    function feeToSetter() external view returns (address);\r\n \r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n \r\n    function allPairs(uint256) external view returns (address pair);\r\n \r\n    function allPairsLength() external view returns (uint256);\r\n \r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n \r\n    function setFeeTo(address) external;\r\n \r\n    function setFeeToSetter(address) external;\r\n}\r\n \r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n \r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract SmokedTokenBurn is Context, IERC20, IERC20Metadata, Ownable {\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _rTotalSupply; // total supply in r-space\r\n    uint256 private immutable _tTotalSupply; // total supply in t-space\r\n    string private _name;\r\n    string private _symbol;\r\n    address[] private _excludedFromReward;\r\n    address public marketingWallet;\r\n    address public communityWallet;\r\n\r\n    uint256 private _reduceBuyTaxAt = 25;\r\n    uint256 private _reduceSellTaxAt = 50;\r\n    uint256 private _whaleThreshold = 9000000 * 10 ** decimals();\r\n\r\n    uint256 private _marketingBuyTax = 150;\r\n    uint256 private _initialMarketingBuyTax = 1350;\r\n    uint256 private _antiWhaleBuyTax = 1450;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint256 private _marketingSellTax = 150;\r\n    uint256 private _initialMarketingSellTax = 1350;\r\n    uint256 private _antiWhaleSellTax = 1450;\r\n    uint256 private _sellCount = 0;\r\n    uint256 public taxFee = 150; // 200 => 2%\r\n    uint256 public totalFees;\r\n    uint256 public marketingBalance = 0;\r\n    uint256 public swapTokensAtAmount = 500000 * 10 ** decimals();\r\n\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n    bool private swapping;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n\r\n    mapping(address => uint256) private _rBalances; // balances in r-space\r\n    mapping(address => uint256) private _tBalances; // balances in t-space\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public isExcludedFromReward;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n\r\n    event SetFee(uint256 value);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    constructor() {\r\n        _name = 'Smoked Token Burn';\r\n        _symbol = 'BURN';\r\n        _tTotalSupply = 1000000000 * 10 ** decimals();\r\n        marketingWallet = address(0x5BC05951cF89B8E95FBC5CB0Fb54c2B5B5eA3bc5);\r\n        communityWallet = address(0xaFD308eeb212140C87d43151546b83Db72872fFE);\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotalSupply);\r\n\r\n        excludeFromFee(owner());\r\n        excludeFromFee(address(this));\r\n        excludeFromFee(marketingWallet);\r\n        excludeFromFee(communityWallet);\r\n        _mint(owner(), _tTotalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _tTotalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        uint256 rate = _getRate();\r\n        return _rBalances[account] / rate;\r\n    }\r\n\r\n    function rBalance(address spender) external view returns (uint256) {\r\n      require(_rBalances[spender] > 0, \"Address does not have any rbalance.\");\r\n\r\n      return _rBalances[spender];\r\n    }\r\n\r\n    function tBalance(address spender) external view returns (uint256) {\r\n      require(_tBalances[spender] > 0, \"Address does not have any tbalance.\");\r\n\r\n      return _tBalances[spender];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address account,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[account][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowance(msg.sender, spender) + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = allowance(msg.sender, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setFee(uint256 newTxFee) public onlyOwner {\r\n        taxFee = newTxFee;\r\n        emit SetFee(taxFee);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!isExcludedFromReward[account], \"Address already excluded\");\r\n        require(_excludedFromReward.length < 100, \"Excluded list is too long\");\r\n\r\n        if (_rBalances[account] > 0) {\r\n            uint256 rate = _getRate();\r\n            _tBalances[account] = _rBalances[account] / rate;\r\n        }\r\n        isExcludedFromReward[account] = true;\r\n        _excludedFromReward.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) public onlyOwner {\r\n        require(isExcludedFromReward[account], \"Account is already included\");\r\n        uint256 nExcluded = _excludedFromReward.length;\r\n        for (uint256 i = 0; i < nExcluded; i++) {\r\n            if (_excludedFromReward[i] == account) {\r\n                _excludedFromReward[i] = _excludedFromReward[\r\n                    _excludedFromReward.length - 1\r\n                ];\r\n                _tBalances[account] = 0;\r\n                isExcludedFromReward[account] = false;\r\n                _excludedFromReward.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address tokenAddress,\r\n        address receiverAddress\r\n    ) external onlyOwner returns (bool success) {\r\n        IERC20 tokenContract = IERC20(tokenAddress);\r\n        uint256 amount = tokenContract.balanceOf(address(this));\r\n        return tokenContract.transfer(receiverAddress, amount);\r\n    }\r\n    \r\n    function withdrawStuckETH() public onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n \r\n    function withdrawStuckTokens(address tkn) public onlyOwner {\r\n        require(IERC20(tkn).balanceOf(address(this)) > 0, \"No tokens\");\r\n        uint256 amount = IERC20(tkn).balanceOf(address(this));\r\n        IERC20(tkn).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner() {\r\n        require(!tradingActive, \"Trading already active.\");\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n\r\n        _approve(address(this), address(uniswapV2Pair), _tTotalSupply);\r\n\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 tokensInWallet = balanceOf(address(this));\r\n        uint256 tokensToAdd = tokensInWallet * 100 / 100; // 69% of tokens in contract go to LP\r\n \r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            tokensToAdd, \r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n \r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        uint256 rSupply = _rTotalSupply;\r\n        uint256 tSupply = _tTotalSupply;\r\n\r\n        uint256 nExcluded = _excludedFromReward.length;\r\n        for (uint256 i = 0; i < nExcluded; i++) {\r\n            rSupply = rSupply - _rBalances[_excludedFromReward[i]];\r\n            tSupply = tSupply - _tBalances[_excludedFromReward[i]];\r\n        }\r\n        if (rSupply < _rTotalSupply / _tTotalSupply) {\r\n            rSupply = _rTotalSupply;\r\n            tSupply = _tTotalSupply;\r\n        }\r\n        // rSupply always > tSupply (no precision loss)\r\n        uint256 rate = rSupply / tSupply;\r\n        return rate;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            emit Transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (!tradingActive) {\r\n            require(\r\n                isExcludedFromFee[from] || isExcludedFromFee[to],\r\n                \"ERC20: Trading is not active.\"\r\n            );\r\n        }\r\n\r\n        if (\r\n            marketingBalance > swapTokensAtAmount &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !isExcludedFromFee[from] &&\r\n            !isExcludedFromFee[to] &&\r\n            !swapping\r\n        ) {\r\n            swapping = true;\r\n\r\n            _swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        uint256 _taxFee = 0;\r\n        uint256 _marketingTaxFee = 0;\r\n\r\n        // on buy\r\n        if (automatedMarketMakerPairs[from] && !isExcludedFromFee[to]) {\r\n\r\n            _taxFee = taxFee;\r\n            _marketingTaxFee = _marketingBuyTax;\r\n\r\n            if (_buyCount <= _reduceBuyTaxAt) {\r\n                _marketingTaxFee = _initialMarketingBuyTax;\r\n            }\r\n\r\n            if (amount >= _whaleThreshold) {\r\n                _marketingTaxFee = _antiWhaleBuyTax;\r\n            }\r\n\r\n            _buyCount++;\r\n\r\n        // on sell\r\n        } else if (automatedMarketMakerPairs[to] && !isExcludedFromFee[from]) {\r\n\r\n            _taxFee = taxFee;\r\n            _marketingTaxFee = _marketingSellTax;\r\n\r\n            if (_sellCount <= _reduceSellTaxAt) {\r\n                _marketingTaxFee = _initialMarketingSellTax;\r\n            }\r\n\r\n            if (amount >= _whaleThreshold) {\r\n                _marketingTaxFee = _antiWhaleSellTax;\r\n            }\r\n\r\n            _sellCount++;\r\n        }\r\n\r\n        if (isExcludedFromFee[from] || isExcludedFromFee[to]) {\r\n            _taxFee = 0;\r\n            _marketingTaxFee = 0;\r\n        }\r\n\r\n        // calc t-values\r\n        uint256 tTxFee = (amount * _taxFee) / 10000;\r\n        uint256 tMarketingFee = (amount * _marketingTaxFee) / 10000;\r\n        uint256 tTransferAmount = amount - tTxFee - tMarketingFee;\r\n\r\n        // calc r-values\r\n        uint256 rTxFee = (tTxFee + tMarketingFee) * _getRate();\r\n        uint256 rAmount = amount * _getRate();\r\n        uint256 rTransferAmount = rAmount - rTxFee;\r\n\r\n        if (tMarketingFee > 0) {\r\n\r\n            marketingBalance = marketingBalance + tMarketingFee;\r\n\r\n            _liquify(tMarketingFee);\r\n\r\n            emit Transfer(from, address(this), tMarketingFee);\r\n        }\r\n\r\n        if (isExcludedFromReward[from]) {\r\n            require(\r\n                _tBalances[from] >= amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n        } else {\r\n            require(\r\n                _rBalances[from] >= rAmount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n        }\r\n\r\n        // Overflow not possible: the sum of all balances is capped by\r\n        // rTotalSupply and tTotalSupply, and the sum is preserved by\r\n        // decrementing then incrementing.\r\n        unchecked {\r\n            // udpate balances in r-space\r\n            _rBalances[from] -= rAmount;\r\n            _rBalances[to] += rTransferAmount;\r\n\r\n            // update balances in t-space\r\n            if (isExcludedFromReward[from] && isExcludedFromReward[to]) {\r\n                _tBalances[from] -= amount;\r\n                _tBalances[to] += tTransferAmount;\r\n            } else if (\r\n                isExcludedFromReward[from] && !isExcludedFromReward[to]\r\n            ) {\r\n                // could technically underflow but because tAmount is a\r\n                // function of rAmount and _rTotalSupply == _tTotalSupply\r\n                // it won't\r\n                _tBalances[from] -= amount;\r\n            } else if (\r\n                !isExcludedFromReward[from] && isExcludedFromReward[to]\r\n            ) {\r\n                // could technically overflow but because tAmount is a\r\n                // function of rAmount and _rTotalSupply == _tTotalSupply\r\n                // it won't\r\n                _tBalances[to] += tTransferAmount;\r\n            }\r\n\r\n            // reflect fee\r\n            // can never go below zero because rTxFee percentage of\r\n            // current _rTotalSupply\r\n            _rTotalSupply = _rTotalSupply - rTxFee;\r\n            totalFees += tTxFee;\r\n        }\r\n\r\n        emit Transfer(from, to, tTransferAmount);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n \r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _rTotalSupply += (MAX - (MAX % amount));\r\n        unchecked {\r\n            _rBalances[account] += _rTotalSupply;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address account,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[account][spender] = amount;\r\n        emit Approval(account, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address account,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(account, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(account, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _liquify(uint256 tLiquidity) internal {\r\n        uint256 rLiquidity = tLiquidity * _getRate();\r\n        _rBalances[address(this)] += rLiquidity;\r\n        if (isExcludedFromReward[address(this)]) {\r\n            _tBalances[address(this)] += tLiquidity;\r\n        }\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        bool success;\r\n\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        _swapTokensForEth(contractBalance);\r\n \r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"rBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"tBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SmokedTokenBurn", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aca38be8e24c65007137290417ff12483bc7177139342189f96473757a5d7435"}