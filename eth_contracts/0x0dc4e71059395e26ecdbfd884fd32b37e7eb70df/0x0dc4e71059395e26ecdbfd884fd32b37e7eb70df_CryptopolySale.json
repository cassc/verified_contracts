{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20USDT {\r\n\r\n\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n        /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract CryptopolySale is Ownable {\r\n    constructor(IERC20USDT _USDT, IERC20 _BUSD, IERC20 _USDC, IERC20 _CRP) {\r\n        USDT = _USDT;\r\n        BUSD = _BUSD;\r\n        USDC = _USDC;\r\n        CRP = _CRP;\r\n    }\r\n\r\n    IERC20 public CRP;\r\n    IERC20USDT public USDT;\r\n    IERC20 public BUSD;\r\n    IERC20 public USDC;\r\n\r\n    uint public price;\r\n    uint public currentStage;\r\n    uint public sold;\r\n    uint public min = 1000000000000000000;\r\n\r\n    mapping(address => uint) public soldAddress;\r\n\r\n    struct Stage {\r\n        uint sold;\r\n        uint price;\r\n        uint priceSixDec;\r\n        uint endTime;\r\n    }\r\n    mapping (uint => Stage) public stages;\r\n\r\n    // Currency 1 - USDT\r\n    // Currency 2 - BUSD\r\n    // Currency 3 - USDC\r\n    function buy(uint _amount, uint _currency) public {\r\n        require(_amount >= min && currentStage != 0);\r\n        require(_currency == 1 || _currency == 2 || _currency == 3);\r\n\r\n        uint _amountStable;\r\n\r\n        if (_currency == 1) {\r\n            IERC20USDT _stable = USDT;\r\n            _amountStable = _amount / (1 * 10 ** CRP.decimals()) * stages[currentStage].priceSixDec;\r\n            require(sold + _amountStable <= stages[5].sold); \r\n            sold += _amountStable;\r\n            _stable.transferFrom(msg.sender, owner(), _amountStable); \r\n        } else if(_currency == 2) {\r\n            IERC20 _stable = BUSD;\r\n            _amountStable = _amount / (1 * 10 ** CRP.decimals()) * stages[currentStage].price;\r\n            require(sold + _amountStable/1000000000000 <= stages[5].sold); \r\n            sold += _amountStable/1000000000000;\r\n            _stable.transferFrom(msg.sender, owner(), _amountStable); \r\n        } else if(_currency == 3) {\r\n            IERC20 _stable = USDC;\r\n            _amountStable = _amount / (1 * 10 ** CRP.decimals()) * stages[currentStage].priceSixDec;\r\n            require(sold + _amountStable <= stages[5].sold); \r\n            sold += _amountStable;\r\n            _stable.transferFrom(msg.sender, owner(), _amountStable); \r\n        }\r\n        \r\n        CRP.mint(msg.sender, _amount); \r\n        soldAddress[msg.sender] += _amount;\r\n        checkStage();\r\n    }\r\n\r\n    function checkStage() private {\r\n        if(block.timestamp > stages[currentStage].endTime ) {\r\n            currentStage++;\r\n        } else if (sold > stages[currentStage].sold) {\r\n            currentStage++;\r\n        }\r\n    }\r\n\r\n    //Admin Functions\r\n    function setMinOrder(uint _min) public onlyOwner {\r\n        min = _min;\r\n    }\r\n\r\n    function startSale() public onlyOwner {\r\n        //Stage #1\r\n        stages[1].sold = 200000000000;\r\n        stages[1].price = 600000000000000;\r\n        stages[1].priceSixDec = 600;\r\n        stages[1].endTime = block.timestamp + 1814400;\r\n\r\n        //Stage #2\r\n        stages[2].sold = 300000000000;\r\n        stages[2].price = 700000000000000;\r\n        stages[2].priceSixDec = 700;\r\n        stages[2].endTime = block.timestamp + 3628800;\r\n\r\n        //Stage #3\r\n        stages[3].sold = 400000000000;\r\n        stages[3].price = 800000000000000;\r\n        stages[3].priceSixDec = 800;\r\n        stages[3].endTime = block.timestamp + 5443200;\r\n\r\n        //Stage #4\r\n        stages[4].sold = 500000000000;\r\n        stages[4].price = 900000000000000;\r\n        stages[4].priceSixDec = 900;\r\n        stages[4].endTime = block.timestamp + 7257600;\r\n\r\n        //Stage #5\r\n        stages[5].sold = 600000000000;\r\n        stages[5].price = 1000000000000000;\r\n        stages[5].priceSixDec = 1000;\r\n        stages[5].endTime = block.timestamp + 9072000;\r\n\r\n        currentStage = 1;\r\n        sold = 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20USDT\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_BUSD\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_CRP\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20USDT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMinOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"soldAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSixDec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptopolySale", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c53000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000001569f97a2127048ada85db3509e445f2e3743ffc", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://efa1328098de1a5c0a0386dff155b3abaacfdb29d865d6c52089e0d37166da9e"}