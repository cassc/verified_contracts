{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RenderHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./SvgHelper.sol\\\";\\n\\nlibrary RenderHelper {\\n    function getJson(\\n        uint256 tokenId,\\n        uint8[7] memory tetra,\\n        string[] memory colorNames,\\n        string[] memory colorHexCodes\\n    ) public pure returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            _prop(\\\"description\\\", \\\"TetraSpektra\\\"),\\n            _prop(\\\"name\\\", string.concat(\\\"Tetra #\\\", Strings.toString(tokenId))),\\n            '\\\"attributes\\\": [',\\n            string(_getAttributes(tetra, colorNames)),\\n            \\\"],\\\",\\n            _prop(\\n                \\\"image\\\",\\n                _getBase64Image(_render(tetra, colorHexCodes)),\\n                false\\n            ),\\n            \\\"}\\\"\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    function _getTrait(\\n        string memory traitType,\\n        string memory traitValue\\n    ) private pure returns (string memory) {\\n        return _getTrait(traitType, traitValue, true);\\n    }\\n\\n    function _getTrait(\\n        string memory traitType,\\n        string memory traitValue,\\n        bool addComma\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"{\\\",\\n                _prop(\\\"trait_type\\\", traitType),\\n                _prop(\\\"value\\\", traitValue, false),\\n                \\\"}\\\",\\n                addComma ? \\\",\\\" : \\\"\\\"\\n            );\\n    }\\n\\n    function _prop(\\n        string memory name,\\n        string memory value\\n    ) private pure returns (string memory) {\\n        return _prop(name, value, false, true);\\n    }\\n\\n    function _prop(\\n        string memory name,\\n        string memory value,\\n        bool addComma\\n    ) private pure returns (string memory) {\\n        return _prop(name, value, false, addComma);\\n    }\\n\\n    function _prop(\\n        string memory name,\\n        string memory value,\\n        bool isNumber,\\n        bool addComma\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                ' \\\"',\\n                name,\\n                '\\\": ',\\n                isNumber ? \\\"\\\" : '\\\"',\\n                value,\\n                isNumber ? \\\"\\\" : '\\\"',\\n                addComma ? \\\", \\\" : \\\" \\\"\\n            );\\n    }\\n\\n    function _getBase64Image(\\n        bytes memory data\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(data)\\n                )\\n            );\\n    }\\n\\n    function _getAttributes(\\n        uint8[7] memory tetra,\\n        string[] memory colorNames\\n    ) private pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _getTrait(\\\"Inner Kore #1\\\", colorNames[tetra[0]]),\\n                _getTrait(\\\"Inner Kore #2\\\", colorNames[tetra[1]]),\\n                _getTrait(\\\"Inner Kore #3\\\", colorNames[tetra[2]]),\\n                _getTrait(\\\"Inner Kore #4\\\", colorNames[tetra[3]]),\\n                _getTrait(\\\"Outer Kore\\\", colorNames[tetra[4]]),\\n                _getTrait(\\\"Mantle\\\", colorNames[tetra[5]]),\\n                _getTrait(\\\"Krust\\\", colorNames[tetra[6]], false)\\n            );\\n    }\\n\\n    function _renderUnexcavated() private pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 15 15' width='100%' height='auto' shape-rendering='crispEdges' >\\\",\\n                \\\"<style type='text/css'> @media screen and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {.static { background: repeating-radial-gradient(#000 0 0.0001%,#fff 0 0.0002%) 50% 0/2500px 2500px,repeating-conic-gradient(#000 0 0.0001%,#fff 0 0.0002%) 60% 60%/2500px 2500px; background-blend-mode: difference; animation: st .2s infinite alternate; mix-blend-mode: multiply;} @keyframes st{ 100% {background-position: 20% 0, 20% 50%} } @media screen and (-webkit-min-device-pixel-ratio: 0) { _::-webkit-full-page-media, .static { background:none; }}</style>\\\",\\n                \\\"<filter id='g'><feGaussianBlur stdDeviation='.14' result='cb' /><feMerge><feMergeNode in='cb' /><feMergeNode in='SourceGraphic' /></feMerge></filter><rect x='0' y='0' height='100%' width='100%' fill='black' /><g transform='translate(.5 .5)'><rect x='6.125' y='6.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='4s' repeatCount='indefinite' /></rect><rect x='7.125' y='6.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='2s' repeatCount='indefinite' /></rect><rect x='6.125' y='7.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='3s' repeatCount='indefinite' /></rect><rect x='7.125' y='7.125' height='.75' width='.75' stroke='#FFFFFF' stroke-width='.01'><animate attributeName='opacity' values='1;0;1' dur='1s' repeatCount='indefinite' /></rect></g><g transform='translate(.5 .5)'><g><circle cx='7' cy='7' r='2' fill='none' opacity='1' stroke='#FFFFFF' stroke-width='0.1' filter='' ><animate attributeName='r' values='2.5;6.9;' dur='6s' repeatCount='indefinite' /><animate attributeName='stroke-width' values='0;.1;' dur='6s' repeatCount='indefinite' /><animate attributeName='opacity' values='0;1;0;' dur='6s' repeatCount='indefinite' /></circle></g></g>\\\",\\n                \\\"<foreignObject class='static' x='0' y='0' width='100' height='100'><div class='logoGradient' xmlns='http://www.w3.org/1999/xhtml'></div></foreignObject></svg>\\\"\\n            );\\n    }\\n\\n    function _renderKrust(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"0\\\",\\n                    \\\"6\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"0\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"7\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"0\\\",\\n                    \\\"13.9\\\",\\n                    \\\".1\\\",\\n                    \\\"6\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"7\\\",\\n                    \\\"13.9\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"13.9\\\",\\n                    \\\"8\\\",\\n                    \\\"6\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"13.9\\\",\\n                    \\\"0\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[6]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"8\\\",\\n                    \\\"0\\\",\\n                    \\\".1\\\",\\n                    \\\"6\\\",\\n                    colorHexCodes[tetra[6]]\\n                )\\n            );\\n    }\\n\\n    function _renderMantle(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"2\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"2\\\",\\n                    \\\"1\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                //\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"5\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"2\\\",\\n                    \\\"11.9\\\",\\n                    \\\".1\\\",\\n                    \\\"1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                //\\n                SvgHelper.rectangle(\\n                    \\\"5\\\",\\n                    \\\"11.9\\\",\\n                    \\\".1\\\",\\n                    \\\"7\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"11.9\\\",\\n                    \\\"10.9\\\",\\n                    \\\"1\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                //\\n                SvgHelper.rectangle(\\n                    \\\"11.9\\\",\\n                    \\\"2\\\",\\n                    \\\"7\\\",\\n                    \\\".1\\\",\\n                    colorHexCodes[tetra[5]]\\n                ),\\n                SvgHelper.rectangle(\\n                    \\\"10.9\\\",\\n                    \\\"2\\\",\\n                    \\\".1\\\",\\n                    \\\"1\\\",\\n                    colorHexCodes[tetra[5]]\\n                )\\n            );\\n    }\\n\\n    function _renderNucleus(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (string memory) {\\n        return\\n            string.concat(\\n                SvgHelper.square(\\n                    \\\"6.125\\\",\\n                    \\\"6.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[0]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"3s\\\")\\n                ),\\n                SvgHelper.square(\\n                    \\\"7.125\\\",\\n                    \\\"6.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[1]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"2s\\\")\\n                ),\\n                SvgHelper.square(\\n                    \\\"6.125\\\",\\n                    \\\"7.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[2]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"4s\\\")\\n                ),\\n                SvgHelper.square(\\n                    \\\"7.125\\\",\\n                    \\\"7.125\\\",\\n                    \\\".75\\\",\\n                    colorHexCodes[tetra[3]],\\n                    SvgHelper.animate(\\\"opacity\\\", \\\"1;0.2;1;\\\", \\\"5s\\\")\\n                )\\n            );\\n    }\\n\\n    function _render(\\n        uint8[7] memory tetra,\\n        string[] memory colorHexCodes\\n    ) private pure returns (bytes memory) {\\n        if (tetra[0] == 0) return _renderUnexcavated();\\n        string memory str = string.concat(\\n            \\\"<g filter='url(#g)'>\\\",\\n            _renderKrust(tetra, colorHexCodes),\\n            _renderMantle(tetra, colorHexCodes),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2.5\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[4]],\\n                \\\"0.1\\\"\\n            ),\\n            \\\"</g>\\\",\\n            \\\"<g>\\\",\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[4]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"8s\\\")\\n            ),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[6]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"6s\\\")\\n            ),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[5]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"4s\\\")\\n            ),\\n            SvgHelper.circle(\\n                \\\"7\\\",\\n                \\\"7\\\",\\n                \\\"2\\\",\\n                \\\"1\\\",\\n                \\\"none\\\",\\n                colorHexCodes[tetra[4]],\\n                \\\"0.1\\\",\\n                SvgHelper.getStandardAnimationGroup(\\\"2s\\\")\\n            ),\\n            \\\"</g>\\\",\\n            _renderNucleus(tetra, colorHexCodes)\\n        );\\n\\n        return\\n            abi.encodePacked(\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 15 15' width='100%' height='auto' shape-rendering='crispEdges'><filter id='g'><feGaussianBlur stdDeviation='.14' result='cb' /><feMerge><feMergeNode in='cb'/><feMergeNode in='SourceGraphic' /></feMerge></filter>\\\",\\n                \\\"<style type='text/css'> @media screen and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: 0.001dpcm) {.static { background: repeating-radial-gradient(#000 0 0.0001%,#fff 0 0.0002%) 50% 0/2500px 2500px,repeating-conic-gradient(#000 0 0.0001%,#fff 0 0.0002%) 60% 60%/2500px 2500px; background-blend-mode: difference; animation: st .2s infinite alternate; mix-blend-mode: multiply;} @keyframes st{ 100% {background-position: 20% 0, 20% 50%} } @media screen and (-webkit-min-device-pixel-ratio: 0) { _::-webkit-full-page-media, .static { background:none; }}</style>\\\",\\n                SvgHelper.rectangle(\\\"0\\\", \\\"0\\\", \\\"100%\\\", \\\"100%\\\", colorHexCodes[0]),\\n                \\\"<g transform='translate(.5 .5)'>\\\",\\n                str,\\n                \\\"</g><foreignObject class='static' x='0' y='0' width='100' height='100'><div class='logoGradient' xmlns='http://www.w3.org/1999/xhtml'></div></foreignObject></svg>\\\"\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SvgHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary SvgHelper {\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return circle(x, y, r, \\\"1\\\", color, \\\"\\\", \\\"0\\\");\\n    }\\n\\n    function circle(\\n        uint256 x,\\n        uint256 y,\\n        uint256 r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth\\n    ) public pure returns (string memory) {\\n        return\\n            circle(\\n                Strings.toString(x),\\n                Strings.toString(y),\\n                Strings.toString(r),\\n                opacity,\\n                color,\\n                strokeColor,\\n                strokeWidth,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth\\n    ) public pure returns (string memory) {\\n        return circle(x, y, r, opacity, color, strokeColor, strokeWidth, \\\"\\\");\\n    }\\n\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth,\\n        string memory animation\\n    ) public pure returns (string memory) {\\n        return\\n            circle(\\n                x,\\n                y,\\n                r,\\n                opacity,\\n                color,\\n                strokeColor,\\n                strokeWidth,\\n                animation,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function circle(\\n        string memory x,\\n        string memory y,\\n        string memory r,\\n        string memory opacity,\\n        string memory color,\\n        string memory strokeColor,\\n        string memory strokeWidth,\\n        string memory animation,\\n        string memory filter\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<circle cx='\\\",\\n                x,\\n                \\\"' cy='\\\",\\n                y,\\n                \\\"' r='\\\",\\n                r,\\n                \\\"' fill='\\\",\\n                color,\\n                \\\"' opacity='\\\",\\n                opacity,\\n                \\\"' stroke='\\\",\\n                keccak256(abi.encodePacked(strokeColor)) != \\\"\\\"\\n                    ? strokeColor\\n                    : \\\"\\\",\\n                \\\"' stroke-width='\\\",\\n                keccak256(abi.encodePacked(strokeColor)) != \\\"\\\"\\n                    ? strokeWidth\\n                    : \\\"\\\",\\n                \\\"'\\\",\\n                keccak256(abi.encodePacked(filter)) == \\\"\\\"\\n                    ? \\\"\\\"\\n                    : string.concat(\\\" filter='\\\", filter, \\\"'\\\"),\\n                keccak256(abi.encodePacked((animation))) == \\\"\\\"\\n                    ? \\\"/>\\\"\\n                    : string.concat(\\\" >\\\", animation, \\\"</circle>\\\")\\n            );\\n    }\\n\\n    function triangle(\\n        string memory x0,\\n        string memory y0,\\n        string memory x1,\\n        string memory y1,\\n        string memory x2,\\n        string memory y2,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<polygon points='\\\",\\n                x0,\\n                \\\" \\\",\\n                y0,\\n                \\\", \\\",\\n                x1,\\n                \\\" \\\",\\n                y1,\\n                \\\", \\\",\\n                x2,\\n                \\\" \\\",\\n                y2,\\n                \\\"'  fill='\\\",\\n                color,\\n                \\\"'/>\\\"\\n            );\\n    }\\n\\n    function square(\\n        string memory x,\\n        string memory y,\\n        string memory size,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return square(x, y, size, color, \\\"\\\");\\n    }\\n\\n    function square(\\n        string memory x,\\n        string memory y,\\n        string memory size,\\n        string memory color,\\n        string memory animation\\n    ) public pure returns (string memory) {\\n        return rectangle(x, y, size, size, color, \\\"\\\", \\\"\\\", animation);\\n    }\\n\\n    function animate(\\n        string memory attributeName,\\n        string memory values,\\n        string memory duration\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<animate attributeName='\\\",\\n                attributeName,\\n                \\\"' values='\\\",\\n                values,\\n                \\\"' dur='\\\",\\n                duration,\\n                \\\"' repeatCount='\\\",\\n                \\\"indefinite\\\",\\n                \\\"' />\\\"\\n            );\\n    }\\n\\n    function rectangle(\\n        string memory x,\\n        string memory y,\\n        string memory h,\\n        string memory w,\\n        string memory color\\n    ) public pure returns (string memory) {\\n        return rectangle(x, y, h, w, color, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function rectangle(\\n        string memory x,\\n        string memory y,\\n        string memory h,\\n        string memory w,\\n        string memory color,\\n        string memory stroke,\\n        string memory strokeWidth,\\n        string memory animation\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<rect x='\\\",\\n                x,\\n                \\\"' y='\\\",\\n                y,\\n                \\\"' height='\\\",\\n                h,\\n                \\\"' width='\\\",\\n                w,\\n                \\\"' fill='\\\",\\n                color,\\n                \\\"' stroke='\\\",\\n                stroke,\\n                \\\"' stroke-width='\\\",\\n                strokeWidth,\\n                \\\"'\\\",\\n                keccak256(abi.encodePacked((animation))) == \\\"\\\"\\n                    ? \\\"/>\\\"\\n                    : string.concat(\\\" >\\\", animation, \\\"</rect>\\\")\\n            );\\n    }\\n\\n    function getStandardAnimationGroup(\\n        string memory s\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                animate(\\\"r\\\", \\\"2.5;6.9;\\\", s),\\n                animate(\\\"stroke-width\\\", \\\"0;.1;\\\", s),\\n                animate(\\\"opacity\\\", \\\"1;0;\\\", s)\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/utils/SvgHelper.sol\": {\r\n        \"SvgHelper\": \"0x1d8ea6b2f3981f292c81ad1d2a7970802596d9d7\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[7]\",\"name\":\"tetra\",\"type\":\"uint8[7]\"},{\"internalType\":\"string[]\",\"name\":\"colorNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"colorHexCodes\",\"type\":\"string[]\"}],\"name\":\"getJson\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "RenderHelper", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}