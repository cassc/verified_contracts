{"SourceCode": "/*\r\n\r\nYou cook, Butler serves: Create, launch & manage your own token just by using Telegram: t.me/devbutler_bot\r\nBut here's the catch: You cannot join DevButler - until you get invited.\r\n\r\nWeb: devbutler.org\r\nWhitepaper: devbutler.org/pdf/devbutler.pdf\r\nTwitter: x.com/thedevbutler\r\nTelegram: t.me/devbutler\r\nGitBook: devbutler.gitbook.io/devbutler\r\nMedium: medium.com/@devbutler\r\n\r\nSecurity Mechanisms:\r\n- Liquidity is locked, RemoveLiquidity() via Uniswap is disabled\r\n- Owner can only get back his initial liquidity by calling fairExit(), the price will remain stable due to burning tokens\r\n- After fairExit() is called, ownership will be renounced and the token will be community-driven\r\n- MaxWallet & MaxTx is limited to minimum 1%\r\n- Fees are immutable\r\n\r\nSincerly yours,\r\n The Butler\r\n\r\n*/\r\n\r\npragma solidity >= 0.8.21;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidityETH(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountToken, uint amountETH);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Caller must be owner\");\r\n        _;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract DevButler is Ownable, IERC20 {\r\n\r\n    IUniswapV2Router02 public constant UNISWAP_ROUTER = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public UNISWAP_PAIR;\r\n\r\n    address private constant DEVBUTLER_FEE_RECIPIENT = 0xa55dc4860EE12BAA7dDe8043708B582a4eeBe617;\r\n    address private constant DEVBUTLER_AIRDROP = 0x77e51f06239cecea9A3F61770EF0Cc5a26424d43;\r\n\r\n    uint8 private constant DEVBUTLER_FEE = 50; // = 5 %\r\n    uint8 private constant FAIR_EXIT_OWNER_REFUND_PERCENTAGE = 100; // = 100 %\r\n    uint16 private constant HOLDER_SHARE_THRESHOLD = 10000;\r\n    uint8 private constant FEE_TRANSFER_INTERVAL = 5;\r\n    string constant private NAME = \"DevButler\";\r\n    string constant private SYMBOL = \"BUTLER\";\r\n    uint8 constant private DECIMALS = 18;\r\n    uint256 constant private TOTAL_SUPPLY = 1000000 * (10 ** DECIMALS); // 1 Million $BUTLER in total\r\n    uint256 constant private AIRDROP_SUPPLY = 50000 * (10 ** DECIMALS); // 5 % of Supply for Airdrops\r\n\r\n    uint256 private MAX_TRANSACTION = 20000 * (10 ** DECIMALS);\r\n    uint256 private MAX_WALLET = 20000 * (10 ** DECIMALS);\r\n\r\n    bool private ownerLeft = false;\r\n    bool private fairExiting = false;\r\n    bool private feesPaying = false;\r\n\r\n    uint256 private sellCount;\r\n    uint256 private initialLiquidityInETH;\r\n    uint256 private initialMintedLiquidityPoolTokens;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private excludedFromFees;\r\n    mapping(address => bool) private excludedFromMaxTransaction;\r\n\r\n    event DevButlerDeploy(address deployer);\r\n\r\n    constructor() payable {\r\n        _balances[address(this)] = TOTAL_SUPPLY - AIRDROP_SUPPLY;\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        _balances[DEVBUTLER_AIRDROP] = AIRDROP_SUPPLY;\r\n        emit Transfer(address(0), DEVBUTLER_AIRDROP, _balances[DEVBUTLER_AIRDROP]);\r\n\r\n        UNISWAP_PAIR = IUniswapV2Factory(UNISWAP_ROUTER.factory()).createPair(address(this), UNISWAP_ROUTER.WETH());\r\n        _approve(address(this), address(UNISWAP_ROUTER), type(uint256).max);\r\n\r\n        excludedFromFees[DEVBUTLER_FEE_RECIPIENT] = true;\r\n        excludedFromFees[getOwner()] = true;\r\n        excludedFromFees[address(0)] = true;\r\n        excludedFromFees[address(this)] = true;\r\n\r\n        excludedFromMaxTransaction[DEVBUTLER_FEE_RECIPIENT] = true;\r\n        excludedFromMaxTransaction[getOwner()] = true;\r\n        excludedFromMaxTransaction[address(this)] = true;\r\n        excludedFromMaxTransaction[address(UNISWAP_ROUTER)] = true;\r\n        excludedFromMaxTransaction[UNISWAP_PAIR] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        require(msg.sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        doTransfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n\t\taddress spender = msg.sender;\r\n\t\tuint256 currentAllowance = allowance(from, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= value, \"ERC20: Insufficient allowance\");\r\n            _approve(from, spender, currentAllowance - value);\r\n        }\r\n        doTransfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function doTransfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        uint256 totalFees = 0;\r\n        bool takeFees = !fairExiting && !feesPaying && !excludedFromFees[sender] && !excludedFromFees[recipient];\r\n        if (UNISWAP_PAIR == sender) {\r\n            if (!excludedFromMaxTransaction[recipient]) {\r\n                require(amount <= MAX_TRANSACTION, \"Buy transfer amount exceeds MAX TX\");\r\n                require(amount + _balances[recipient] <= MAX_WALLET, \"Buy transfer amount exceeds MAX WALLET\");\r\n            }\r\n        } else if (UNISWAP_PAIR == recipient) {\r\n            if (!excludedFromMaxTransaction[sender]) {\r\n                require(amount <= MAX_TRANSACTION, \"Sell transfer amount exceeds MAX TX\");\r\n                sellCount = sellCount + 1;\r\n                if (sellCount % FEE_TRANSFER_INTERVAL == 0) {\r\n                    transferFees();\r\n                }\r\n            }\r\n        }\r\n        if (takeFees) {\r\n            totalFees = totalFees + ((DEVBUTLER_FEE * amount) / 1000);\r\n        }        \r\n\r\n        require(_balances[sender] >= amount, \"Integer Underflow Protection\");\r\n\r\n        if (totalFees != 0) {\r\n            amount = amount - totalFees;\r\n            _balances[sender] = _balances[sender] - totalFees;\r\n            _balances[address(this)] = _balances[address(this)] + totalFees;\r\n            emit Transfer(sender, address(this), totalFees);\r\n        }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        if (!fairExiting && !ownerLeft && IERC20(UNISWAP_PAIR).balanceOf(address(this)) < initialMintedLiquidityPoolTokens) {\r\n            revert(\"You cannot decrease liquidity. Call fairExit() to get funds back\");\r\n        }\r\n    }\r\n\r\n    function manualTransferFees() external onlyOwner {\r\n        transferFees();\r\n    }\r\n\r\n    function transferFees() internal {\r\n        if (!feesPaying) {\r\n            feesPaying = true;\r\n            if (_balances[address(this)] != 0) {\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(this);\r\n                path[1] = UNISWAP_ROUTER.WETH();\r\n                try UNISWAP_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    _balances[address(this)],\r\n                    0,\r\n                    path,\r\n                    DEVBUTLER_FEE_RECIPIENT,\r\n                    block.timestamp) {} catch {}\r\n            }\r\n            feesPaying = false;\r\n        }\r\n    }\r\n\r\n    function setMaxTransaction(uint256 val) external onlyOwner {\r\n        require(val >= (TOTAL_SUPPLY / 100), \"Max Tx cannot be less than 1% of total supply\");\r\n        MAX_TRANSACTION = val;\r\n    }\r\n\r\n    function setMaxWallet(uint256 val) external onlyOwner {\r\n        require(val >= (TOTAL_SUPPLY / 100), \"Max Wallet cannot be less than 1% of total supply\");\r\n        MAX_WALLET = val;\r\n    }\r\n\r\n    function calculateETHShare(uint256 holderBalance, uint256 totalBalance, uint256 remainingETH) internal pure returns (uint256) {\r\n        return ((remainingETH * holderBalance * HOLDER_SHARE_THRESHOLD) / totalBalance) / HOLDER_SHARE_THRESHOLD;\r\n    }\r\n\r\n    function addLiquidity() internal onlyOwner {\r\n        (, uint256 amountETH, uint256 liquidity) = UNISWAP_ROUTER.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            _balances[address(this)],\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        initialLiquidityInETH = initialLiquidityInETH + amountETH;\r\n        initialMintedLiquidityPoolTokens = initialMintedLiquidityPoolTokens + liquidity;\r\n    }\r\n\r\n    function openTrading() external onlyOwner payable {\r\n        addLiquidity();\r\n    }\r\n\r\n    function fairExit() external onlyOwner {\r\n        require(!fairExiting, \"Already exiting\");\r\n        fairExiting = true;\r\n        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(UNISWAP_PAIR).getReserves();\r\n        uint256 lpTokensToRemove = calculateETHShare((FAIR_EXIT_OWNER_REFUND_PERCENTAGE * initialLiquidityInETH / 100), \r\n            (IUniswapV2Pair(UNISWAP_PAIR).token0() == address(this) ? reserve1 : reserve0), initialMintedLiquidityPoolTokens);\r\n        IERC20(UNISWAP_PAIR).approve(address(UNISWAP_ROUTER), type(uint256).max);\r\n        UNISWAP_ROUTER.removeLiquidityETH(\r\n            address(this),\r\n            lpTokensToRemove > initialMintedLiquidityPoolTokens ? initialMintedLiquidityPoolTokens : lpTokensToRemove,\r\n            0,\r\n            0,\r\n            getOwner(),\r\n            block.timestamp\r\n        );\r\n        transferOwnership(address(0));\r\n        fairExiting = false;\r\n        ownerLeft = true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"DevButlerDeploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fairExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DevButler", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6735056b1237ad9063421e405ad910b7b85e0bc76d2e4acddf9b3e765e621b6c"}