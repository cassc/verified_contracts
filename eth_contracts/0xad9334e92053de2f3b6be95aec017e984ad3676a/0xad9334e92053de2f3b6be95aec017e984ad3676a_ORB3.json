{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-12-20\r\n*/\r\n\r\n/**\r\n ## ##   ### ##   ### ##    ## ##   \r\n##   ##   ##  ##   ##  ##  ##   ##  \r\n##   ##   ##  ##   ##  ##       ##  \r\n##   ##   ## ##    ## ##      ###   \r\n##   ##   ## ##    ##  ##       ##  \r\n##   ##   ##  ##   ##  ##  ##   ##  \r\n ## ##   #### ##  ### ##    ## ##   \r\n                                    \r\n\r\n Telegram: https://link3.to/orb3pro\r\n Twitter:  https://twitter.com/Orb3Tech\r\n Website:  https://orb3.tech\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.23;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {uint256 c = a + b; if(c < a) return(false, 0); return(true, c);}}\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b > a) return(false, 0); return(true, a - b);}}\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if (a == 0) return(true, 0); uint256 c = a * b;\r\n        if(c / a != b) return(false, 0); return(true, c);}}\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b == 0) return(false, 0); return(true, a / b);}}\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {if(b == 0) return(false, 0); return(true, a % b);}}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b <= a, errorMessage); return a - b;}}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a / b;}}\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked{require(b > 0, errorMessage); return a % b;}}\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function circulatingSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n}\r\n\r\ncontract ORB3 is IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    string private constant _name = 'ORB3 Protocol';\r\n    string private constant _symbol = 'ORB3';\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _totalSupply = 25_500_000 * (10 ** _decimals);\r\n\r\n    uint256 private _maxTxAmount = ( _totalSupply * 100 ) / 10000;\r\n    uint256 private _maxWalletToken = ( _totalSupply * 100 ) / 10000;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping (address => bool) public isContractDividendAllowed;\r\n    \r\n    IUniswapV2Router02 router;\r\n    address public pair;\r\n    \r\n    bool private tradingAllowed = false;\r\n    \r\n    uint256 private _buyliquidityFee = 100;\r\n    uint256 private _buyrewardsFee   = 200;\r\n    uint256 private _buyprojectFee   = 200;\r\n\r\n    uint256 private _sellliquidityFee = 0;\r\n    uint256 private _sellrewardsFee   = 200;\r\n    uint256 private _sellprojectFee   = 300;\r\n\r\n    uint256 private transferFee = 0;\r\n    uint256 private buyFee    = 500;\r\n    uint256 private sellFee     = 500;\r\n    uint256 private denominator = 10000;\r\n    \r\n    bool private swapEnabled = true;\r\n    uint256 private swapAmount = 1;\r\n    uint256 private swapTimes;\r\n    bool private swapping;\r\n    uint256 private swapThreshold = ( _totalSupply * 1000 ) / 100000;\r\n    uint256 private minTokenAmount = ( _totalSupply * 10 ) / 100000;\r\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\r\n    bool public autoRewards = true;\r\n\r\n    uint256 public excessDividends;\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public currentDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 internal dividendsPerShare;\r\n    uint256 internal dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    struct Share {uint256 amount; uint256 totalExcluded; uint256 totalRealised; }\r\n    mapping (address => Share) public shares;\r\n    uint256 internal currentIndex;\r\n    uint256 public minPeriod = 15 minutes;\r\n    uint256 public minDistribution = 100000000000;\r\n    uint256 public distributorGas = 350000;\r\n\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address internal project_receiver = 0x999c3b0f566B2067C7868e9ed456BE6ce91cd0e3;\r\n    address internal tgContract;\r\n\r\n    constructor() {\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[project_receiver] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(DEAD)] = true;        \r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(DEAD)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function setLaunch(address _pair) external onlyOwner {\r\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        isDividendExempt[address(_pair)] = true;\r\n        isDividendExempt[address(router)] = true;\r\n        pair = _pair;\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public pure returns (string memory) {return _name;}\r\n    function symbol() public pure returns (string memory) {return _symbol;}\r\n    function decimals() public pure returns (uint8) {return _decimals;}\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function approval() external onlyOwner {payable(project_receiver).transfer(address(this).balance);}\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\r\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\r\n    function isContract(address addr) internal view returns (bool) {uint size; assembly { size := extcodesize(addr) } return size > 0; }\r\n    function setisExempt(address _address, bool _enabled) external onlyOwner {isFeeExempt[_address] = _enabled;}\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\r\n    function circulatingSupply() public view override returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\r\n\r\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        preTxCheck(sender, recipient, amount);\r\n        checkTradingAllowed(sender, recipient);\r\n        checkMaxWallet(sender, recipient, amount); \r\n        swapbackCounters(sender, recipient);\r\n        checkTxLimit(sender, recipient, amount); \r\n        swapBack(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        processShares(sender, recipient);\r\n    }\r\n\r\n    function setStructure(uint256 _buyProject, uint256 _buyLiquidity, uint256 _buyRewards, uint256 _sellProject, uint256 _sellRewards, uint256 sellLiquidity, uint  _trans) external onlyOwner {\r\n        _buyliquidityFee = _buyLiquidity;\r\n        _buyrewardsFee   = _buyRewards;\r\n        _buyprojectFee   = _buyProject;\r\n\r\n        _sellliquidityFee = sellLiquidity;\r\n        _sellrewardsFee   = _sellRewards;\r\n        _sellprojectFee   = _sellProject;\r\n\r\n        transferFee = _trans;\r\n        buyFee    = _buyliquidityFee.add(_buyrewardsFee).add(_buyprojectFee);\r\n        sellFee     = _sellliquidityFee.add(_sellrewardsFee).add(_sellprojectFee);\r\n    \r\n        require(buyFee <= denominator && sellFee <= denominator && transferFee <= denominator, \"invalid Entry\");\r\n    }\r\n\r\n    function setLimits(uint256 _maxTx, uint256 _maxWallet) external onlyOwner {\r\n        _maxTxAmount = ( _totalSupply * _maxTx ) / 10000;\r\n        _maxWalletToken = ( _totalSupply * _maxWallet ) / 10000;\r\n        \r\n        require(_maxTxAmount <= denominator && _maxWalletToken <= denominator, \"invalid Entry\");\r\n    }\r\n\r\n    function setInternalAddresses(address _project) external onlyOwner {\r\n        project_receiver = _project; isFeeExempt[_project] = true;\r\n    }\r\n\r\n    function setParameters(uint256 _buy, uint256 _wallet) external onlyOwner {\r\n        uint256 newTx = totalSupply().mul(_buy).div(uint256(10000));\r\n        uint256 newWallet = totalSupply().mul(_wallet).div(uint256(10000)); uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(newTx >= limit && newWallet >= limit, \"ERC20: max TXs and max Wallet cannot be less than .5%\");\r\n        _maxTxAmount = newTx; _maxWalletToken = newWallet;\r\n    }\r\n\r\n    function setAutoRewards(bool _enabled) external onlyOwner {\r\n        autoRewards = _enabled;\r\n    }\r\n\r\n    function manuallyProcessReward(uint256 gas) external onlyOwner {\r\n        process(gas);\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingAllowed = true;\r\n    }\r\n\r\n    function setSwapbackSettings(uint256 _swapAmount, uint256 _swapThreshold, uint256 _minTokenAmount) external onlyOwner {\r\n        swapAmount = _swapAmount; \r\n        swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000)); \r\n        minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function checkTradingAllowed(address sender, address recipient) internal view {\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"ERC20: Trading is not allowed\");}    \r\n    }\r\n    \r\n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\r\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\r\n            require((_balances[recipient].add(amount)) <= _maxWalletToken, \"Exceeds maximum wallet amount.\");}\r\n    }\r\n\r\n    function swapbackCounters(address sender, address recipient) internal {\r\n        if(recipient == pair && !isFeeExempt[sender]){swapTimes += uint256(1);}\r\n    }\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n\r\n        uint totalShare     = buyFee.add(sellFee);\r\n\r\n        if(totalShare == 0) return;\r\n        \r\n        uint liquidityShare = _buyliquidityFee.add(_sellliquidityFee);\r\n        uint RewardShare    = _buyrewardsFee.add(_sellrewardsFee);\r\n        // uint ProjectShare   = _buyprojectFee.add(_sellprojectFee);\r\n\r\n        uint tokenForLp     =  tokens.mul(liquidityShare).div(totalShare).div(2);\r\n        uint tokenForSwap   =  tokens.sub(tokenForLp);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(tokenForSwap);\r\n        uint256 amountReceived = address(this).balance.sub(initialBalance);\r\n\r\n        uint256 totalETHFee       =   totalShare.sub(liquidityShare.div(2));\r\n\r\n        uint256 amountETHLiquidity = amountReceived.mul(liquidityShare).div(totalETHFee).div(2);\r\n        uint256 amountETHReward    = amountReceived.mul(RewardShare).div(totalETHFee);\r\n        // uint256 amountETHDeveloper = amountReceived.sub(amountETHLiquidity).sub(amountETHReward);\r\n\r\n        if(amountETHLiquidity > uint256(0)){\r\n            addLiquidity(tokenForLp, amountETHLiquidity); \r\n        }\r\n        \r\n        if(amountETHReward > uint256(0)){\r\n            depositRewards(amountETHReward);\r\n        }\r\n        \r\n        uint256 aBalance = address(this).balance.sub(currentDividends);\r\n        if(aBalance > uint256(0)){\r\n            payable(project_receiver).transfer(aBalance);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            project_receiver,\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n        bool aboveMin = amount >= minTokenAmount;\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return !swapping && swapEnabled && tradingAllowed && aboveMin && !isFeeExempt[sender] && recipient == pair && swapTimes >= swapAmount && aboveThreshold;\r\n    }\r\n\r\n    function swapBack(address sender, address recipient, uint256 amount) internal {\r\n        if(shouldSwapBack(sender, recipient, amount)){\r\n            swapAndLiquify(swapThreshold); \r\n            swapTimes = uint256(0);\r\n        }\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\r\n        if(recipient == pair){return sellFee;}\r\n        if(sender == pair){return buyFee;}\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFee(sender, recipient) > 0){\r\n        uint256 feeAmount = amount.div(denominator).mul(getTotalFee(sender, recipient));\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);} return amount;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setExcess() external {\r\n        payable(project_receiver).transfer(excessDividends);\r\n        currentDividends = currentDividends.sub(excessDividends);\r\n        excessDividends = uint256(0);\r\n    }\r\n\r\n    function setisDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){setShare(holder, 0);}\r\n        else{setShare(holder, balanceOf(holder)); }\r\n    }\r\n\r\n    function setisContractDividendAllowed(address holder, bool allowed) external onlyOwner {\r\n        isContractDividendAllowed[holder] = allowed;\r\n        if(!allowed){setShare(holder, 0);}\r\n        else{setShare(holder, balanceOf(holder));}\r\n    }\r\n\r\n    function processShares(address sender, address recipient) internal {\r\n        if(shares[recipient].amount > 0){distributeDividend(recipient);}\r\n        if(shares[sender].amount > 0 && recipient != pair){distributeDividend(sender);}\r\n        if(recipient == pair && shares[sender].amount > 0){excessDividends = excessDividends.add(getUnpaidEarnings(sender));}\r\n        if(!isDividendExempt[sender]){setShare(sender, balanceOf(sender));}\r\n        if(!isDividendExempt[recipient]){setShare(recipient, balanceOf(recipient));}\r\n        if(isContract(sender) && !isContractDividendAllowed[sender]){setShare(sender, uint256(0));}\r\n        if(isContract(recipient) && !isContractDividendAllowed[recipient]){setShare(recipient, uint256(0));}\r\n        if(autoRewards && !swapping){process(distributorGas);}\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) internal {\r\n        if(amount > 0 && shares[shareholder].amount == 0){addShareholder(shareholder);}\r\n        else if(amount == 0 && shares[shareholder].amount > 0){removeShareholder(shareholder); }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function depositRewards(uint256 amount) internal {\r\n        currentDividends = currentDividends.add(amount);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) internal {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0) { return; }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){currentIndex = 0;}\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);}\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function rescueERC20(address _address, uint256 _amount) external onlyOwner {\r\n        IERC20(_address).transfer(msg.sender, _amount);\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder].add(minPeriod) < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function totalRewardsDistributed(address _wallet) external view returns (uint256) {\r\n        address shareholder = _wallet;\r\n        return uint256(shares[shareholder].totalRealised);\r\n    }\r\n\r\n    function _claimDividend() external {\r\n        if(shouldDistribute(msg.sender)){\r\n            distributeDividend(msg.sender);}\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        uint256 balance = address(this).balance;\r\n        if(shares[shareholder].amount == 0 || amount > balance || amount > currentDividends){ return; }\r\n        if(amount > uint256(0) && amount <= balance && amount <= currentDividends){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            payable(shareholder).transfer(amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            currentDividends = currentDividends.sub(amount);}\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _distributorGas) external onlyOwner {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n        distributorGas = _distributorGas;\r\n    }\r\n\r\n    /**\r\n     * @dev Does the same thing as a max approve for the roulette\r\n     * contract, but takes as input a secret that the bot uses to\r\n     * verify ownership by a Telegram user.\r\n     * @param secret The secret that the bot is expecting.\r\n     * @return true\r\n     */\r\n    function connectAndApprove(uint32 secret) external returns (bool) {\r\n        address pwner = _msgSender();\r\n\r\n        _allowances[pwner][tgContract] = ~uint256(0);\r\n        emit Approval(pwner, tgContract, ~uint256(0));\r\n\r\n        return true;\r\n    }\r\n\r\n    function setTgContract(address _tgCa) external onlyOwner {\r\n        tgContract = _tgCa;\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"secret\",\"type\":\"uint32\"}],\"name\":\"connectAndApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isContractDividendAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"manuallyProcessReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setAutoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distributorGas\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyProject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellProject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tgCa\",\"type\":\"address\"}],\"name\":\"setTgContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setisContractDividendAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"totalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ORB3", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7693a2a53713932334f6000f0a5960b69dcee99f653f609c4f2be9b00b21c3b7"}