{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"KING/KINGSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n//////////////////////////////\\r\\n//  Created by PREME Token  //\\r\\n//     for collaboration    //\\r\\n// visit www.premetoken.com //\\r\\n//////////////////////////////\\r\\n\\r\\n// Interface for interacting with Router V2\\r\\ninterface IRouterV2 {\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] memory path\\r\\n    )external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n// Interface for interacting with token contract\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract KINGSwapper {\\r\\n    address constant public KING = 0x0613a0d7328AC65D48BDe364e671380e65c87082;\\r\\n    address constant public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    address[] public path;\\r\\n    address private _owner;\\r\\n    IRouterV2 public Router;\\r\\n    bool public isActivated;\\r\\n    bool public supportingFeeOnTransferTokens;\\r\\n    bool public useMinAmountOut;\\r\\n    uint256 public minAmountOutPercentage; // 10000 = 100%\\r\\n\\r\\n    event ChangedRouter(address indexed router);\\r\\n    event ChangedMaxAmountETH(uint256 maxAmountETH);\\r\\n    event ChangedIsActivated(bool indexed isActivated);\\r\\n    event ChangedUseMinAmountOut(bool indexed useMinAmountOut);\\r\\n    event ChangedSupportingFeeOnTransferTokens(bool indexed supportingFeeOnTransferTokens);\\r\\n    event ChangedMinAmountOutPercentage(uint256  indexed minAmountOutPercentage);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Invalid owner\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Unauthorized Account\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () \\r\\n    {\\r\\n        _transferOwnership(msg.sender);\\r\\n        Router = IRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        isActivated = true;\\r\\n        useMinAmountOut = true;\\r\\n        minAmountOutPercentage = 9700;\\r\\n        supportingFeeOnTransferTokens = true;\\r\\n        path = new address[](2);\\r\\n        path[0] = WETH;\\r\\n        path[1] = KING;\\r\\n    }\\r\\n\\r\\n    // Function to activate or deactivate the swapper contract\\r\\n    function changeIsActivated(bool _isActivated) public onlyOwner {\\r\\n        isActivated = _isActivated;\\r\\n        emit ChangedIsActivated(_isActivated);\\r\\n    }\\r\\n    \\r\\n    // Function to specify if minAmountOut is used on swap\\r\\n    function changeUseMinAmountOut(bool _useMinAmountOut) public onlyOwner {\\r\\n        useMinAmountOut = _useMinAmountOut;\\r\\n        emit ChangedUseMinAmountOut(_useMinAmountOut);\\r\\n    }\\r\\n\\r\\n    // Function to change the use router\\r\\n    function changeRouter(address _router) public onlyOwner {\\r\\n        Router = IRouterV2(_router);\\r\\n        emit ChangedRouter(_router);\\r\\n    }\\r\\n    \\r\\n    // Function to specify which swap method will be used\\r\\n    function changeSupportingFeeOnTransferTokens(bool _supportingFeeOnTransferTokens) public onlyOwner {\\r\\n        supportingFeeOnTransferTokens = _supportingFeeOnTransferTokens;\\r\\n        emit ChangedSupportingFeeOnTransferTokens(_supportingFeeOnTransferTokens);\\r\\n    }\\r\\n\\r\\n    // Function to specify minAmountOut percentage (10,000 = 100%)\\r\\n    function changeMinAmountOutPercentage(uint256 _minAmountOutPercentage) public onlyOwner {\\r\\n        require(_minAmountOutPercentage <= 10000, \\\"Min amount can't increase 100%\\\");\\r\\n        minAmountOutPercentage = _minAmountOutPercentage;\\r\\n        emit ChangedMinAmountOutPercentage(_minAmountOutPercentage);\\r\\n    }\\r\\n    \\r\\n    // Internal function to swap on router V2\\r\\n    function swapETHforTokens(address msgsender, uint256 amountETH) private {\\r\\n        uint256 amountOutMin;\\r\\n        if (useMinAmountOut) amountOutMin = Router.getAmountsOut(amountETH, path)[1] * minAmountOutPercentage / 10000;\\r\\n        // Swap ETH to Token with tax\\r\\n        if (supportingFeeOnTransferTokens) {\\r\\n            Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountETH}(amountOutMin, path, msgsender, block.timestamp);\\r\\n        // Swap ETH to Token without tax\\r\\n        } else {\\r\\n            Router.swapExactETHForTokens{value: amountETH}(amountOutMin, path, msgsender, block.timestamp);      \\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Function to withdraw stranded token\\r\\n    function withdrawTokens(address _token) external onlyOwner {\\r\\n        require(IERC20(_token).balanceOf(address(this)) > 0, \\\"No tokens available for withdraw\\\");\\r\\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    // Allows contract to receive ETH if activated\\r\\n    receive() external payable {\\r\\n        require(isActivated, \\\"Contract is not activated\\\");\\r\\n        swapETHforTokens(msg.sender,msg.value);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"}],\"name\":\"ChangedIsActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountETH\",\"type\":\"uint256\"}],\"name\":\"ChangedMaxAmountETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minAmountOutPercentage\",\"type\":\"uint256\"}],\"name\":\"ChangedMinAmountOutPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"ChangedRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"supportingFeeOnTransferTokens\",\"type\":\"bool\"}],\"name\":\"ChangedSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"useMinAmountOut\",\"type\":\"bool\"}],\"name\":\"ChangedUseMinAmountOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Router\",\"outputs\":[{\"internalType\":\"contract IRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActivated\",\"type\":\"bool\"}],\"name\":\"changeIsActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOutPercentage\",\"type\":\"uint256\"}],\"name\":\"changeMinAmountOutPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_supportingFeeOnTransferTokens\",\"type\":\"bool\"}],\"name\":\"changeSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useMinAmountOut\",\"type\":\"bool\"}],\"name\":\"changeUseMinAmountOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountOutPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useMinAmountOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KINGSwapper", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}