{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\n   * @param user The address of the user whose asset balance has changed\\n   * @param totalSupply The total supply of the asset prior to user balance change\\n   * @param userBalance The previous user balance prior to balance change\\n   */\\n  function handleAction(address user, uint256 totalSupply, uint256 userBalance) external;\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after the burn action\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n   * @param from The address from which the tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   */\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   */\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   */\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   */\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   */\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   */\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   */\\n  function setLiquidationThreshold(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 threshold\\n  ) internal pure {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   */\\n  function getLiquidationThreshold(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   */\\n  function setLiquidationBonus(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 bonus\\n  ) internal pure {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   */\\n  function getLiquidationBonus(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   */\\n  function setDecimals(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 decimals\\n  ) internal pure {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   */\\n  function getDecimals(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   */\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   */\\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   */\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   */\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @param paused The paused state\\n   */\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\\n    self.data =\\n      (self.data & PAUSED_MASK) |\\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @return The paused state\\n   */\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~PAUSED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @param borrowable True if the asset is borrowable\\n   */\\n  function setBorrowableInIsolation(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool borrowable\\n  ) internal pure {\\n    self.data =\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @return The borrowable in isolation flag\\n   */\\n  function getBorrowableInIsolation(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool) {\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @param siloed True if the asset is siloed\\n   */\\n  function setSiloedBorrowing(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool siloed\\n  ) internal pure {\\n    self.data =\\n      (self.data & SILOED_BORROWING_MASK) |\\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @return The siloed borrowing flag\\n   */\\n  function getSiloedBorrowing(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool) {\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   */\\n  function setBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   */\\n  function getBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool) {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   */\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   */\\n  function getStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool) {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   */\\n  function setReserveFactor(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 reserveFactor\\n  ) internal pure {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   */\\n  function getReserveFactor(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   */\\n  function setBorrowCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 borrowCap\\n  ) internal pure {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   */\\n  function getBorrowCap(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   */\\n  function setSupplyCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 supplyCap\\n  ) internal pure {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   */\\n  function getSupplyCap(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\n   * @param self The reserve configuration\\n   * @param ceiling The maximum debt ceiling for the asset\\n   */\\n  function setDebtCeiling(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 ceiling\\n  ) internal pure {\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n   * @param self The reserve configuration\\n   * @return The debt ceiling (0 = isolation mode disabled)\\n   */\\n  function getDebtCeiling(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation protocol fee of the reserve\\n   * @param self The reserve configuration\\n   * @param liquidationProtocolFee The liquidation protocol fee\\n   */\\n  function setLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 liquidationProtocolFee\\n  ) internal pure {\\n    require(\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation protocol fee\\n   * @param self The reserve configuration\\n   * @return The liquidation protocol fee\\n   */\\n  function getLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @param unbackedMintCap The unbacked mint cap\\n   */\\n  function setUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 unbackedMintCap\\n  ) internal pure {\\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\\n\\n    self.data =\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The unbacked mint cap\\n   */\\n  function getUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the eMode asset category\\n   * @param self The reserve configuration\\n   * @param category The asset category when the user selects the eMode\\n   */\\n  function setEModeCategory(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 category\\n  ) internal pure {\\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\\n\\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the eMode asset category\\n   * @param self The reserve configuration\\n   * @return The eMode category for the asset\\n   */\\n  function getEModeCategory(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256) {\\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the flashloanable flag for the reserve\\n   * @param self The reserve configuration\\n   * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\n   */\\n  function setFlashLoanEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool flashLoanEnabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & FLASHLOAN_ENABLED_MASK) |\\n      (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the flashloanable flag for the reserve\\n   * @param self The reserve configuration\\n   * @return The flashloanable flag\\n   */\\n  function getFlashLoanEnabled(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool) {\\n    return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing active\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   * @return The state flag representing stableRateBorrowing enabled\\n   * @return The state flag representing paused\\n   */\\n  function getFlags(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool, bool, bool, bool, bool) {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n      (dataLocal & ~PAUSED_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   * @return The state param representing eMode category\\n   */\\n  function getParams(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the caps parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing borrow cap\\n   * @return The state param representing supply cap.\\n   */\\n  function getCaps(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62'; // 'User is in isolation mode or ltv is zero'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\n/**\\n * @title MathUtils library\\n * @author Aave\\n * @notice Provides functions to perform linear and compounded interest calculations\\n */\\nlibrary MathUtils {\\n  using WadRayMath for uint256;\\n\\n  /// @dev Ignoring leap years\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n  /**\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\n   */\\n  function calculateLinearInterest(\\n    uint256 rate,\\n    uint40 lastUpdateTimestamp\\n  ) internal view returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));\\n    unchecked {\\n      result = result / SECONDS_PER_YEAR;\\n    }\\n\\n    return WadRayMath.RAY + result;\\n  }\\n\\n  /**\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\\n   * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\\n   * error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   */\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint40 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    if (exp == 0) {\\n      return WadRayMath.RAY;\\n    }\\n\\n    uint256 expMinusOne;\\n    uint256 expMinusTwo;\\n    uint256 basePowerTwo;\\n    uint256 basePowerThree;\\n    unchecked {\\n      expMinusOne = exp - 1;\\n\\n      expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n      basePowerTwo = rate.rayMul(rate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n      basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\n    }\\n\\n    uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n    unchecked {\\n      secondTerm /= 2;\\n    }\\n    uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n    unchecked {\\n      thirdTerm /= 6;\\n    }\\n\\n    return WadRayMath.RAY + (rate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n  }\\n\\n  /**\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n   * @param rate The interest rate (in ray)\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n   * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\\n   */\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint40 lastUpdateTimestamp\\n  ) internal view returns (uint256) {\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   */\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   */\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   */\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   */\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   */\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n        b := add(b, 1)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   */\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n        revert(0, 0)\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/periphery-v3/contracts/misc/interfaces/IEACAggregatorProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface IEACAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\"\r\n    },\r\n    \"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n  /**\\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Emitted when rewards are claimed\\n   * @param user The address of the user rewards has been claimed on behalf of\\n   * @param reward The address of the token reward is claimed\\n   * @param to The address of the receiver of the rewards\\n   * @param claimer The address of the claimer\\n   * @param amount The amount of rewards claimed\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed reward,\\n    address indexed to,\\n    address claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\\n   * @param reward The address of the token reward\\n   * @param transferStrategy The address of TransferStrategy contract\\n   */\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\n\\n  /**\\n   * @dev Emitted when the reward oracle is updated\\n   * @param reward The address of the token reward\\n   * @param rewardOracle The address of oracle\\n   */\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current Aave UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Get the price aggregator oracle address\\n   * @param reward The address of the reward\\n   * @return The price oracle of the reward\\n   */\\n  function getRewardOracle(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n   * @param reward The address of the reward\\n   * @return The address of the TransferStrategy contract\\n   */\\n  function getTransferStrategy(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\n   * @param user The address of the user whose asset balance has changed\\n   * @param totalSupply The total supply of the asset prior to user balance change\\n   * @param userBalance The previous user balance prior to balance change\\n   **/\\n  function handleAction(address user, uint256 totalSupply, uint256 userBalance) external;\\n\\n  /**\\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n   * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   **/\\n  function claimAllRewards(\\n    address[] calldata assets,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsToSelf(\\n    address[] calldata assets\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\"\r\n    },\r\n    \"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n  /**\\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param oldEmission The old emissions per second value of the reward distribution\\n   * @param newEmission The new emissions per second value of the reward distribution\\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\\n   * @param newDistributionEnd The new end timestamp of the reward distribution\\n   * @param assetIndex The index of the asset distribution\\n   */\\n  event AssetConfigUpdated(\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 oldEmission,\\n    uint256 newEmission,\\n    uint256 oldDistributionEnd,\\n    uint256 newDistributionEnd,\\n    uint256 assetIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param user The address of the user that rewards are accrued on behalf of\\n   * @param assetIndex The index of the asset distribution\\n   * @param userIndex The index of the asset distribution on behalf of the user\\n   * @param rewardsAccrued The amount of rewards accrued\\n   */\\n  event Accrued(\\n    address indexed asset,\\n    address indexed reward,\\n    address indexed user,\\n    uint256 assetIndex,\\n    uint256 userIndex,\\n    uint256 rewardsAccrued\\n  );\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(address asset, address reward, uint32 newDistributionEnd) external;\\n\\n  /**\\n   * @dev Sets the emission per second of a set of reward distributions\\n   * @param asset The asset is being incentivized\\n   * @param rewards List of reward addresses are being distributed\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\n   */\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The timestamp with the end of the distribution, in unix time format\\n   **/\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the index of a user on a reward distribution\\n   * @param user Address of the user\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The current user asset index, not including new distributions\\n   **/\\n  function getUserAssetIndex(\\n    address user,\\n    address asset,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution reward for a certain asset\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The index of the asset distribution\\n   * @return The emission per second of the reward distribution\\n   * @return The timestamp of the last update of the index\\n   * @return The timestamp of the distribution end\\n   **/\\n  function getRewardsData(\\n    address asset,\\n    address reward\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations.\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The old index of the asset distribution\\n   * @return The new index of the asset distribution\\n   **/\\n  function getAssetIndex(address asset, address reward) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\n   * @param asset The incentivized asset\\n   * @return List of rewards addresses of the input asset\\n   **/\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the list of available reward addresses\\n   * @return List of rewards supported in this contract\\n   **/\\n  function getRewardsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return Unclaimed rewards, not including new distributions\\n   **/\\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return The rewards amount\\n   **/\\n  function getUserRewards(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @return The list of reward addresses\\n   * @return The list of unclaimed amount of rewards\\n   **/\\n  function getAllUserRewards(\\n    address[] calldata assets,\\n    address user\\n  ) external view returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\n   * @param asset The address to retrieve decimals\\n   * @return The decimals of an underlying asset\\n   */\\n  function getAssetDecimals(address asset) external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the address of the emission manager\\n   * @return The address of the EmissionManager\\n   */\\n  function EMISSION_MANAGER() external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the emission manager.\\n   * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\\n   * @return The address of the EmissionManager\\n   */\\n  function getEmissionManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aave/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(address to, address reward, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(address token, address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@aave/periphery-v3/contracts/rewards/libraries/RewardsDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\nlibrary RewardsDataTypes {\\n  struct RewardsConfigInput {\\n    uint88 emissionPerSecond;\\n    uint256 totalSupply;\\n    uint32 distributionEnd;\\n    address asset;\\n    address reward;\\n    ITransferStrategyBase transferStrategy;\\n    IEACAggregatorProxy rewardOracle;\\n  }\\n\\n  struct UserAssetBalance {\\n    address asset;\\n    uint256 userBalance;\\n    uint256 totalSupply;\\n  }\\n\\n  struct UserData {\\n    // Liquidity index of the reward distribution for the user\\n    uint104 index;\\n    // Amount of accrued rewards for the user since last user index update\\n    uint128 accrued;\\n  }\\n\\n  struct RewardData {\\n    // Liquidity index of the reward distribution\\n    uint104 index;\\n    // Amount of reward tokens distributed per second\\n    uint88 emissionPerSecond;\\n    // Timestamp of the last reward index update\\n    uint32 lastUpdateTimestamp;\\n    // The end of the distribution of rewards (in seconds)\\n    uint32 distributionEnd;\\n    // Map of user addresses and their rewards data (userAddress => userData)\\n    mapping(address => UserData) usersData;\\n  }\\n\\n  struct AssetData {\\n    // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\\n    mapping(address => RewardData) rewards;\\n    // List of reward token addresses for the asset\\n    mapping(uint128 => address) availableRewards;\\n    // Count of reward tokens for the asset\\n    uint128 availableRewardsCount;\\n    // Number of decimals of the asset\\n    uint8 decimals;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IMain.sol\\\";\\nimport \\\"./IRewardable.sol\\\";\\n\\n// Not used directly in the IAsset interface, but used by many consumers to save stack space\\nstruct Price {\\n    uint192 low; // {UoA/tok}\\n    uint192 high; // {UoA/tok}\\n}\\n\\n/**\\n * @title IAsset\\n * @notice Supertype. Any token that interacts with our system must be wrapped in an asset,\\n * whether it is used as RToken backing or not. Any token that can report a price in the UoA\\n * is eligible to be an asset.\\n */\\ninterface IAsset is IRewardable {\\n    /// Refresh saved price\\n    /// The Reserve protocol calls this at least once per transaction, before relying on\\n    /// the Asset's other functions.\\n    /// @dev Called immediately after deployment, before use\\n    function refresh() external;\\n\\n    /// Should not revert\\n    /// @return low {UoA/tok} The lower end of the price estimate\\n    /// @return high {UoA/tok} The upper end of the price estimate\\n    function price() external view returns (uint192 low, uint192 high);\\n\\n    /// Should not revert\\n    /// lotLow should be nonzero when the asset might be worth selling\\n    /// @return lotLow {UoA/tok} The lower end of the lot price estimate\\n    /// @return lotHigh {UoA/tok} The upper end of the lot price estimate\\n    function lotPrice() external view returns (uint192 lotLow, uint192 lotHigh);\\n\\n    /// @return {tok} The balance of the ERC20 in whole tokens\\n    function bal(address account) external view returns (uint192);\\n\\n    /// @return The ERC20 contract of the token with decimals() available\\n    function erc20() external view returns (IERC20Metadata);\\n\\n    /// @return The number of decimals in the ERC20; just for gas optimization\\n    function erc20Decimals() external view returns (uint8);\\n\\n    /// @return If the asset is an instance of ICollateral or not\\n    function isCollateral() external view returns (bool);\\n\\n    /// @return {UoA} The max trade volume, in UoA\\n    function maxTradeVolume() external view returns (uint192);\\n\\n    /// @return {s} The timestamp of the last refresh() that saved prices\\n    function lastSave() external view returns (uint48);\\n}\\n\\n// Used only in Testing. Strictly speaking an Asset does not need to adhere to this interface\\ninterface TestIAsset is IAsset {\\n    /// @return The address of the chainlink feed\\n    function chainlinkFeed() external view returns (AggregatorV3Interface);\\n\\n    /// {1} The max % deviation allowed by the oracle\\n    function oracleError() external view returns (uint192);\\n\\n    /// @return {s} Seconds that an oracle value is considered valid\\n    function oracleTimeout() external view returns (uint48);\\n\\n    /// @return {s} Seconds that the lotPrice should decay over, after stale price\\n    function priceTimeout() external view returns (uint48);\\n}\\n\\n/// CollateralStatus must obey a linear ordering. That is:\\n/// - being DISABLED is worse than being IFFY, or SOUND\\n/// - being IFFY is worse than being SOUND.\\nenum CollateralStatus {\\n    SOUND,\\n    IFFY, // When a peg is not holding or a chainlink feed is stale\\n    DISABLED // When the collateral has completely defaulted\\n}\\n\\n/// Upgrade-safe maximum operator for CollateralStatus\\nlibrary CollateralStatusComparator {\\n    /// @return Whether a is worse than b\\n    function worseThan(CollateralStatus a, CollateralStatus b) internal pure returns (bool) {\\n        return uint256(a) > uint256(b);\\n    }\\n}\\n\\n/**\\n * @title ICollateral\\n * @notice A subtype of Asset that consists of the tokens eligible to back the RToken.\\n */\\ninterface ICollateral is IAsset {\\n    /// Emitted whenever the collateral status is changed\\n    /// @param newStatus The old CollateralStatus\\n    /// @param newStatus The updated CollateralStatus\\n    event CollateralStatusChanged(\\n        CollateralStatus indexed oldStatus,\\n        CollateralStatus indexed newStatus\\n    );\\n\\n    /// @dev refresh()\\n    /// Refresh exchange rates and update default status.\\n    /// VERY IMPORTANT: In any valid implemntation, status() MUST become DISABLED in refresh() if\\n    /// refPerTok() has ever decreased since last call.\\n\\n    /// @return The canonical name of this collateral's target unit.\\n    function targetName() external view returns (bytes32);\\n\\n    /// @return The status of this collateral asset. (Is it defaulting? Might it soon?)\\n    function status() external view returns (CollateralStatus);\\n\\n    // ==== Exchange Rates ====\\n\\n    /// @return {ref/tok} Quantity of whole reference units per whole collateral tokens\\n    function refPerTok() external view returns (uint192);\\n\\n    /// @return {target/ref} Quantity of whole target units per whole reference unit in the peg\\n    function targetPerRef() external view returns (uint192);\\n}\\n\\n// Used only in Testing. Strictly speaking a Collateral does not need to adhere to this interface\\ninterface TestICollateral is TestIAsset, ICollateral {\\n    /// @return The epoch timestamp when the collateral will default from IFFY to DISABLED\\n    function whenDefault() external view returns (uint256);\\n\\n    /// @return The amount of time a collateral must be in IFFY status until being DISABLED\\n    function delayUntilDefault() external view returns (uint48);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\n/// A serialization of the AssetRegistry to be passed around in the P1 impl for gas optimization\\nstruct Registry {\\n    IERC20[] erc20s;\\n    IAsset[] assets;\\n}\\n\\n/**\\n * @title IAssetRegistry\\n * @notice The AssetRegistry is in charge of maintaining the ERC20 tokens eligible\\n *   to be handled by the rest of the system. If an asset is in the registry, this means:\\n *      1. Its ERC20 contract has been vetted\\n *      2. The asset is the only asset for that ERC20\\n *      3. The asset can be priced in the UoA, usually via an oracle\\n */\\ninterface IAssetRegistry is IComponent {\\n    /// Emitted when an asset is added to the registry\\n    /// @param erc20 The ERC20 contract for the asset\\n    /// @param asset The asset contract added to the registry\\n    event AssetRegistered(IERC20 indexed erc20, IAsset indexed asset);\\n\\n    /// Emitted when an asset is removed from the registry\\n    /// @param erc20 The ERC20 contract for the asset\\n    /// @param asset The asset contract removed from the registry\\n    event AssetUnregistered(IERC20 indexed erc20, IAsset indexed asset);\\n\\n    // Initialization\\n    function init(IMain main_, IAsset[] memory assets_) external;\\n\\n    /// Fully refresh all asset state\\n    /// @custom:interaction\\n    function refresh() external;\\n\\n    /// Register `asset`\\n    /// If either the erc20 address or the asset was already registered, fail\\n    /// @return true if the erc20 address was not already registered.\\n    /// @custom:governance\\n    function register(IAsset asset) external returns (bool);\\n\\n    /// Register `asset` if and only if its erc20 address is already registered.\\n    /// If the erc20 address was not registered, revert.\\n    /// @return swapped If the asset was swapped for a previously-registered asset\\n    /// @custom:governance\\n    function swapRegistered(IAsset asset) external returns (bool swapped);\\n\\n    /// Unregister an asset, requiring that it is already registered\\n    /// @custom:governance\\n    function unregister(IAsset asset) external;\\n\\n    /// @return {s} The timestamp of the last refresh\\n    function lastRefresh() external view returns (uint48);\\n\\n    /// @return The corresponding asset for ERC20, or reverts if not registered\\n    function toAsset(IERC20 erc20) external view returns (IAsset);\\n\\n    /// @return The corresponding collateral, or reverts if unregistered or not collateral\\n    function toColl(IERC20 erc20) external view returns (ICollateral);\\n\\n    /// @return If the ERC20 is registered\\n    function isRegistered(IERC20 erc20) external view returns (bool);\\n\\n    /// @return A list of all registered ERC20s\\n    function erc20s() external view returns (IERC20[] memory);\\n\\n    /// @return reg The list of registered ERC20s and Assets, in the same order\\n    function getRegistry() external view returns (Registry memory reg);\\n\\n    /// @return The number of registered ERC20s\\n    function size() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBackingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IBroker.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\n\\n/**\\n * @title IBackingManager\\n * @notice The BackingManager handles changes in the ERC20 balances that back an RToken.\\n *   - It computes which trades to perform, if any, and initiates these trades with the Broker.\\n *     - rebalance()\\n *   - If already collateralized, excess assets are transferred to RevenueTraders.\\n *     - forwardRevenue(IERC20[] calldata erc20s)\\n */\\ninterface IBackingManager is IComponent, ITrading {\\n    /// Emitted when the trading delay is changed\\n    /// @param oldVal The old trading delay\\n    /// @param newVal The new trading delay\\n    event TradingDelaySet(uint48 oldVal, uint48 newVal);\\n\\n    /// Emitted when the backing buffer is changed\\n    /// @param oldVal The old backing buffer\\n    /// @param newVal The new backing buffer\\n    event BackingBufferSet(uint192 oldVal, uint192 newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        uint48 tradingDelay_,\\n        uint192 backingBuffer_,\\n        uint192 maxTradeSlippage_,\\n        uint192 minTradeVolume_\\n    ) external;\\n\\n    // Give RToken max allowance over a registered token\\n    /// @custom:refresher\\n    /// @custom:interaction\\n    function grantRTokenAllowance(IERC20) external;\\n\\n    /// Apply the overall backing policy using the specified TradeKind, taking a haircut if unable\\n    /// @param kind TradeKind.DUTCH_AUCTION or TradeKind.BATCH_AUCTION\\n    /// @custom:interaction RCEI\\n    function rebalance(TradeKind kind) external;\\n\\n    /// Forward revenue to RevenueTraders; reverts if not fully collateralized\\n    /// @param erc20s The tokens to forward\\n    /// @custom:interaction RCEI\\n    function forwardRevenue(IERC20[] calldata erc20s) external;\\n}\\n\\ninterface TestIBackingManager is IBackingManager, TestITrading {\\n    function tradingDelay() external view returns (uint48);\\n\\n    function backingBuffer() external view returns (uint192);\\n\\n    function setTradingDelay(uint48 val) external;\\n\\n    function setBackingBuffer(uint192 val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasketHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\nstruct BasketRange {\\n    uint192 bottom; // {BU}\\n    uint192 top; // {BU}\\n}\\n\\n/**\\n * @title IBasketHandler\\n * @notice The BasketHandler aims to maintain a reference basket of constant target unit amounts.\\n * When a collateral token defaults, a new reference basket of equal target units is set.\\n * When _all_ collateral tokens default for a target unit, only then is the basket allowed to fall\\n *   in terms of target unit amounts. The basket is considered defaulted in this case.\\n */\\ninterface IBasketHandler is IComponent {\\n    /// Emitted when the prime basket is set\\n    /// @param erc20s The collateral tokens for the prime basket\\n    /// @param targetAmts {target/BU} A list of quantities of target unit per basket unit\\n    /// @param targetNames Each collateral token's targetName\\n    event PrimeBasketSet(IERC20[] erc20s, uint192[] targetAmts, bytes32[] targetNames);\\n\\n    /// Emitted when the reference basket is set\\n    /// @param nonce {basketNonce} The basket nonce\\n    /// @param erc20s The list of collateral tokens in the reference basket\\n    /// @param refAmts {ref/BU} The reference amounts of the basket collateral tokens\\n    /// @param disabled True when the list of erc20s + refAmts may not be correct\\n    event BasketSet(uint256 indexed nonce, IERC20[] erc20s, uint192[] refAmts, bool disabled);\\n\\n    /// Emitted when a backup config is set for a target unit\\n    /// @param targetName The name of the target unit as a bytes32\\n    /// @param max The max number to use from `erc20s`\\n    /// @param erc20s The set of backup collateral tokens\\n    event BackupConfigSet(bytes32 indexed targetName, uint256 max, IERC20[] erc20s);\\n\\n    /// Emitted when the warmup period is changed\\n    /// @param oldVal The old warmup period\\n    /// @param newVal The new warmup period\\n    event WarmupPeriodSet(uint48 oldVal, uint48 newVal);\\n\\n    /// Emitted when the status of a basket has changed\\n    /// @param oldStatus The previous basket status\\n    /// @param newStatus The new basket status\\n    event BasketStatusChanged(CollateralStatus oldStatus, CollateralStatus newStatus);\\n\\n    // Initialization\\n    function init(IMain main_, uint48 warmupPeriod_) external;\\n\\n    /// Set the prime basket\\n    /// @param erc20s The collateral tokens for the new prime basket\\n    /// @param targetAmts The target amounts (in) {target/BU} for the new prime basket\\n    ///                   required range: 1e9 values; absolute range irrelevant.\\n    /// @custom:governance\\n    function setPrimeBasket(IERC20[] memory erc20s, uint192[] memory targetAmts) external;\\n\\n    /// Set the backup configuration for a given target\\n    /// @param targetName The name of the target as a bytes32\\n    /// @param max The maximum number of collateral tokens to use from this target\\n    ///            Required range: 1-255\\n    /// @param erc20s A list of ordered backup collateral tokens\\n    /// @custom:governance\\n    function setBackupConfig(\\n        bytes32 targetName,\\n        uint256 max,\\n        IERC20[] calldata erc20s\\n    ) external;\\n\\n    /// Default the basket in order to schedule a basket refresh\\n    /// @custom:protected\\n    function disableBasket() external;\\n\\n    /// Governance-controlled setter to cause a basket switch explicitly\\n    /// @custom:governance\\n    /// @custom:interaction\\n    function refreshBasket() external;\\n\\n    /// Track the basket status changes\\n    /// @custom:refresher\\n    function trackStatus() external;\\n\\n    /// @return If the BackingManager has sufficient collateral to redeem the entire RToken supply\\n    function fullyCollateralized() external view returns (bool);\\n\\n    /// @return status The worst CollateralStatus of all collateral in the basket\\n    function status() external view returns (CollateralStatus status);\\n\\n    /// @return If the basket is ready to issue and trade\\n    function isReady() external view returns (bool);\\n\\n    /// @param erc20 The ERC20 token contract for the asset\\n    /// @return {tok/BU} The whole token quantity of token in the reference basket\\n    /// Returns 0 if erc20 is not registered or not in the basket\\n    /// Returns FIX_MAX (in lieu of +infinity) if Collateral.refPerTok() is 0.\\n    /// Otherwise, returns (token's basket.refAmts / token's Collateral.refPerTok())\\n    function quantity(IERC20 erc20) external view returns (uint192);\\n\\n    /// Like quantity(), but unsafe because it DOES NOT CONFIRM THAT THE ASSET IS CORRECT\\n    /// @param erc20 The ERC20 token contract for the asset\\n    /// @param asset The registered asset plugin contract for the erc20\\n    /// @return {tok/BU} The whole token quantity of token in the reference basket\\n    /// Returns 0 if erc20 is not registered or not in the basket\\n    /// Returns FIX_MAX (in lieu of +infinity) if Collateral.refPerTok() is 0.\\n    /// Otherwise, returns (token's basket.refAmts / token's Collateral.refPerTok())\\n    function quantityUnsafe(IERC20 erc20, IAsset asset) external view returns (uint192);\\n\\n    /// @param amount {BU}\\n    /// @return erc20s The addresses of the ERC20 tokens in the reference basket\\n    /// @return quantities {qTok} The quantity of each ERC20 token to issue `amount` baskets\\n    function quote(uint192 amount, RoundingMode rounding)\\n        external\\n        view\\n        returns (address[] memory erc20s, uint256[] memory quantities);\\n\\n    /// Return the redemption value of `amount` BUs for a linear combination of historical baskets\\n    /// @param basketNonces An array of basket nonces to do redemption from\\n    /// @param portions {1} An array of Fix quantities that must add up to FIX_ONE\\n    /// @param amount {BU}\\n    /// @return erc20s The backing collateral erc20s\\n    /// @return quantities {qTok} ERC20 token quantities equal to `amount` BUs\\n    function quoteCustomRedemption(\\n        uint48[] memory basketNonces,\\n        uint192[] memory portions,\\n        uint192 amount\\n    ) external view returns (address[] memory erc20s, uint256[] memory quantities);\\n\\n    /// @return top {BU} The number of partial basket units: e.g max(coll.map((c) => c.balAsBUs())\\n    ///         bottom {BU} The number of whole basket units held by the account\\n    function basketsHeldBy(address account) external view returns (BasketRange memory);\\n\\n    /// Should not revert\\n    /// @return low {UoA/BU} The lower end of the price estimate\\n    /// @return high {UoA/BU} The upper end of the price estimate\\n    function price() external view returns (uint192 low, uint192 high);\\n\\n    /// Should not revert\\n    /// lotLow should be nonzero if a BU could be worth selling\\n    /// @return lotLow {UoA/tok} The lower end of the lot price estimate\\n    /// @return lotHigh {UoA/tok} The upper end of the lot price estimate\\n    function lotPrice() external view returns (uint192 lotLow, uint192 lotHigh);\\n\\n    /// @return timestamp The timestamp at which the basket was last set\\n    function timestamp() external view returns (uint48);\\n\\n    /// @return The current basket nonce, regardless of status\\n    function nonce() external view returns (uint48);\\n}\\n\\ninterface TestIBasketHandler is IBasketHandler {\\n    function warmupPeriod() external view returns (uint48);\\n\\n    function setWarmupPeriod(uint48 val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBroker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IGnosis.sol\\\";\\nimport \\\"./ITrade.sol\\\";\\n\\nenum TradeKind {\\n    DUTCH_AUCTION,\\n    BATCH_AUCTION\\n}\\n\\n/// Cache of all (lot) prices for a pair to prevent re-lookup\\nstruct TradePrices {\\n    uint192 sellLow; // {UoA/sellTok} can be 0\\n    uint192 sellHigh; // {UoA/sellTok} should not be 0\\n    uint192 buyLow; // {UoA/buyTok} should not be 0\\n    uint192 buyHigh; // {UoA/buyTok} should not be 0 or FIX_MAX\\n}\\n\\n/// The data format that describes a request for trade with the Broker\\nstruct TradeRequest {\\n    IAsset sell;\\n    IAsset buy;\\n    uint256 sellAmount; // {qSellTok}\\n    uint256 minBuyAmount; // {qBuyTok}\\n}\\n\\n/**\\n * @title IBroker\\n * @notice The Broker deploys oneshot Trade contracts for Traders and monitors\\n *   the continued proper functioning of trading platforms.\\n */\\ninterface IBroker is IComponent {\\n    event GnosisSet(IGnosis oldVal, IGnosis newVal);\\n    event BatchTradeImplementationSet(ITrade oldVal, ITrade newVal);\\n    event DutchTradeImplementationSet(ITrade oldVal, ITrade newVal);\\n    event BatchAuctionLengthSet(uint48 oldVal, uint48 newVal);\\n    event DutchAuctionLengthSet(uint48 oldVal, uint48 newVal);\\n    event BatchTradeDisabledSet(bool prevVal, bool newVal);\\n    event DutchTradeDisabledSet(IERC20Metadata indexed erc20, bool prevVal, bool newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        IGnosis gnosis_,\\n        ITrade batchTradeImplemention_,\\n        uint48 batchAuctionLength_,\\n        ITrade dutchTradeImplemention_,\\n        uint48 dutchAuctionLength_\\n    ) external;\\n\\n    /// Request a trade from the broker\\n    /// @dev Requires setting an allowance in advance\\n    /// @custom:interaction\\n    function openTrade(\\n        TradeKind kind,\\n        TradeRequest memory req,\\n        TradePrices memory prices\\n    ) external returns (ITrade);\\n\\n    /// Only callable by one of the trading contracts the broker deploys\\n    function reportViolation() external;\\n\\n    function batchTradeDisabled() external view returns (bool);\\n\\n    function dutchTradeDisabled(IERC20Metadata erc20) external view returns (bool);\\n}\\n\\ninterface TestIBroker is IBroker {\\n    function gnosis() external view returns (IGnosis);\\n\\n    function batchTradeImplementation() external view returns (ITrade);\\n\\n    function dutchTradeImplementation() external view returns (ITrade);\\n\\n    function batchAuctionLength() external view returns (uint48);\\n\\n    function dutchAuctionLength() external view returns (uint48);\\n\\n    function setGnosis(IGnosis newGnosis) external;\\n\\n    function setBatchTradeImplementation(ITrade newTradeImplementation) external;\\n\\n    function setBatchAuctionLength(uint48 newAuctionLength) external;\\n\\n    function setDutchTradeImplementation(ITrade newTradeImplementation) external;\\n\\n    function setDutchAuctionLength(uint48 newAuctionLength) external;\\n\\n    function enableBatchTrade() external;\\n\\n    function enableDutchTrade(IERC20Metadata erc20) external;\\n\\n    // only present on pre-3.0.0 Brokers; used by EasyAuction regression test\\n    function disabled() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IMain.sol\\\";\\nimport \\\"./IVersioned.sol\\\";\\n\\n/**\\n * @title IComponent\\n * @notice A Component is the central building block of all our system contracts. Components\\n *   contain important state that must be migrated during upgrades, and they delegate\\n *   their ownership to Main's owner.\\n */\\ninterface IComponent is IVersioned {\\n    function main() external view returns (IMain);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\nuint256 constant MAX_DISTRIBUTION = 1e4; // 10,000\\nuint8 constant MAX_DESTINATIONS = 100; // maximum number of RevenueShare destinations\\n\\nstruct RevenueShare {\\n    uint16 rTokenDist; // {revShare} A value between [0, 10,000]\\n    uint16 rsrDist; // {revShare} A value between [0, 10,000]\\n}\\n\\n/// Assumes no more than 100 independent distributions.\\nstruct RevenueTotals {\\n    uint24 rTokenTotal; // {revShare}\\n    uint24 rsrTotal; // {revShare}\\n}\\n\\n/**\\n * @title IDistributor\\n * @notice The Distributor Component maintains a revenue distribution table that dictates\\n *   how to divide revenue across the Furnace, StRSR, and any other destinations.\\n */\\ninterface IDistributor is IComponent {\\n    /// Emitted when a distribution is set\\n    /// @param dest The address set to receive the distribution\\n    /// @param rTokenDist The distribution of RToken that should go to `dest`\\n    /// @param rsrDist The distribution of RSR that should go to `dest`\\n    event DistributionSet(address indexed dest, uint16 rTokenDist, uint16 rsrDist);\\n\\n    /// Emitted when revenue is distributed\\n    /// @param erc20 The token being distributed, either RSR or the RToken itself\\n    /// @param source The address providing the revenue\\n    /// @param amount The amount of the revenue\\n    event RevenueDistributed(IERC20 indexed erc20, address indexed source, uint256 amount);\\n\\n    // Initialization\\n    function init(IMain main_, RevenueShare memory dist) external;\\n\\n    /// @custom:governance\\n    function setDistribution(address dest, RevenueShare memory share) external;\\n\\n    /// Distribute the `erc20` token across all revenue destinations\\n    /// Only callable by RevenueTraders\\n    /// @custom:protected\\n    function distribute(IERC20 erc20, uint256 amount) external;\\n\\n    /// @return revTotals The total of all  destinations\\n    function totals() external view returns (RevenueTotals memory revTotals);\\n}\\n\\ninterface TestIDistributor is IDistributor {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function FURNACE() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ST_RSR() external view returns (address);\\n\\n    /// @return rTokenDist The RToken distribution for the address\\n    /// @return rsrDist The RSR distribution for the address\\n    function distribution(address) external view returns (uint16 rTokenDist, uint16 rsrDist);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFurnace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\n/**\\n * @title IFurnace\\n * @notice A helper contract to burn RTokens slowly and permisionlessly.\\n */\\ninterface IFurnace is IComponent {\\n    // Initialization\\n    function init(IMain main_, uint192 ratio_) external;\\n\\n    /// Emitted when the melting ratio is changed\\n    /// @param oldRatio The old ratio\\n    /// @param newRatio The new ratio\\n    event RatioSet(uint192 oldRatio, uint192 newRatio);\\n\\n    function ratio() external view returns (uint192);\\n\\n    ///    Needed value range: [0, 1], granularity 1e-9\\n    /// @custom:governance\\n    function setRatio(uint192) external;\\n\\n    /// Performs any RToken melting that has vested since the last payout.\\n    /// @custom:refresher\\n    function melt() external;\\n}\\n\\ninterface TestIFurnace is IFurnace {\\n    function lastPayout() external view returns (uint256);\\n\\n    function lastPayoutBal() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGnosis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct GnosisAuctionData {\\n    IERC20 auctioningToken;\\n    IERC20 biddingToken;\\n    uint256 orderCancellationEndDate;\\n    uint256 auctionEndDate;\\n    bytes32 initialAuctionOrder;\\n    uint256 minimumBiddingAmountPerOrder;\\n    uint256 interimSumBidAmount;\\n    bytes32 interimOrder;\\n    bytes32 clearingPriceOrder;\\n    uint96 volumeClearingPriceOrder;\\n    bool minFundingThresholdNotReached;\\n    bool isAtomicClosureAllowed;\\n    uint256 feeNumerator;\\n    uint256 minFundingThreshold;\\n}\\n\\n/// The relevant portion of the interface of the live Gnosis EasyAuction contract\\n/// https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\ninterface IGnosis {\\n    function initiateAuction(\\n        IERC20 auctioningToken,\\n        IERC20 biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 auctionedSellAmount,\\n        uint96 minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256 auctionId);\\n\\n    function auctionData(uint256 auctionId) external view returns (GnosisAuctionData memory);\\n\\n    /// @param auctionId The external auction id\\n    /// @dev See here for decoding: https://git.io/JMang\\n    /// @return encodedOrder The order, encoded in a bytes 32\\n    function settleAuction(uint256 auctionId) external returns (bytes32 encodedOrder);\\n\\n    /// @return The numerator over a 1000-valued denominator\\n    function feeNumerator() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAssetRegistry.sol\\\";\\nimport \\\"./IBasketHandler.sol\\\";\\nimport \\\"./IBackingManager.sol\\\";\\nimport \\\"./IBroker.sol\\\";\\nimport \\\"./IGnosis.sol\\\";\\nimport \\\"./IFurnace.sol\\\";\\nimport \\\"./IDistributor.sol\\\";\\nimport \\\"./IRToken.sol\\\";\\nimport \\\"./IRevenueTrader.sol\\\";\\nimport \\\"./IStRSR.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\nimport \\\"./IVersioned.sol\\\";\\n\\n// === Auth roles ===\\n\\nbytes32 constant OWNER = bytes32(bytes(\\\"OWNER\\\"));\\nbytes32 constant SHORT_FREEZER = bytes32(bytes(\\\"SHORT_FREEZER\\\"));\\nbytes32 constant LONG_FREEZER = bytes32(bytes(\\\"LONG_FREEZER\\\"));\\nbytes32 constant PAUSER = bytes32(bytes(\\\"PAUSER\\\"));\\n\\n/**\\n * Main is a central hub that maintains a list of Component contracts.\\n *\\n * Components:\\n *   - perform a specific function\\n *   - defer auth to Main\\n *   - usually (but not always) contain sizeable state that require a proxy\\n */\\nstruct Components {\\n    // Definitely need proxy\\n    IRToken rToken;\\n    IStRSR stRSR;\\n    IAssetRegistry assetRegistry;\\n    IBasketHandler basketHandler;\\n    IBackingManager backingManager;\\n    IDistributor distributor;\\n    IFurnace furnace;\\n    IBroker broker;\\n    IRevenueTrader rsrTrader;\\n    IRevenueTrader rTokenTrader;\\n}\\n\\ninterface IAuth is IAccessControlUpgradeable {\\n    /// Emitted when `unfreezeAt` is changed\\n    /// @param oldVal The old value of `unfreezeAt`\\n    /// @param newVal The new value of `unfreezeAt`\\n    event UnfreezeAtSet(uint48 oldVal, uint48 newVal);\\n\\n    /// Emitted when the short freeze duration governance param is changed\\n    /// @param oldDuration The old short freeze duration\\n    /// @param newDuration The new short freeze duration\\n    event ShortFreezeDurationSet(uint48 oldDuration, uint48 newDuration);\\n\\n    /// Emitted when the long freeze duration governance param is changed\\n    /// @param oldDuration The old long freeze duration\\n    /// @param newDuration The new long freeze duration\\n    event LongFreezeDurationSet(uint48 oldDuration, uint48 newDuration);\\n\\n    /// Emitted when the system is paused or unpaused for trading\\n    /// @param oldVal The old value of `tradingPaused`\\n    /// @param newVal The new value of `tradingPaused`\\n    event TradingPausedSet(bool oldVal, bool newVal);\\n\\n    /// Emitted when the system is paused or unpaused for issuance\\n    /// @param oldVal The old value of `issuancePaused`\\n    /// @param newVal The new value of `issuancePaused`\\n    event IssuancePausedSet(bool oldVal, bool newVal);\\n\\n    /**\\n     * Trading Paused: Disable everything except for OWNER actions, RToken.issue, RToken.redeem,\\n     * StRSR.stake, and StRSR.payoutRewards\\n     * Issuance Paused: Disable RToken.issue\\n     * Frozen: Disable everything except for OWNER actions + StRSR.stake (for governance)\\n     */\\n\\n    function tradingPausedOrFrozen() external view returns (bool);\\n\\n    function issuancePausedOrFrozen() external view returns (bool);\\n\\n    function frozen() external view returns (bool);\\n\\n    function shortFreeze() external view returns (uint48);\\n\\n    function longFreeze() external view returns (uint48);\\n\\n    // ====\\n\\n    // onlyRole(OWNER)\\n    function freezeForever() external;\\n\\n    // onlyRole(SHORT_FREEZER)\\n    function freezeShort() external;\\n\\n    // onlyRole(LONG_FREEZER)\\n    function freezeLong() external;\\n\\n    // onlyRole(OWNER)\\n    function unfreeze() external;\\n\\n    function pauseTrading() external;\\n\\n    function unpauseTrading() external;\\n\\n    function pauseIssuance() external;\\n\\n    function unpauseIssuance() external;\\n}\\n\\ninterface IComponentRegistry {\\n    // === Component setters/getters ===\\n\\n    event RTokenSet(IRToken indexed oldVal, IRToken indexed newVal);\\n\\n    function rToken() external view returns (IRToken);\\n\\n    event StRSRSet(IStRSR oldVal, IStRSR newVal);\\n\\n    function stRSR() external view returns (IStRSR);\\n\\n    event AssetRegistrySet(IAssetRegistry oldVal, IAssetRegistry newVal);\\n\\n    function assetRegistry() external view returns (IAssetRegistry);\\n\\n    event BasketHandlerSet(IBasketHandler oldVal, IBasketHandler newVal);\\n\\n    function basketHandler() external view returns (IBasketHandler);\\n\\n    event BackingManagerSet(IBackingManager oldVal, IBackingManager newVal);\\n\\n    function backingManager() external view returns (IBackingManager);\\n\\n    event DistributorSet(IDistributor oldVal, IDistributor newVal);\\n\\n    function distributor() external view returns (IDistributor);\\n\\n    event RSRTraderSet(IRevenueTrader oldVal, IRevenueTrader newVal);\\n\\n    function rsrTrader() external view returns (IRevenueTrader);\\n\\n    event RTokenTraderSet(IRevenueTrader oldVal, IRevenueTrader newVal);\\n\\n    function rTokenTrader() external view returns (IRevenueTrader);\\n\\n    event FurnaceSet(IFurnace oldVal, IFurnace newVal);\\n\\n    function furnace() external view returns (IFurnace);\\n\\n    event BrokerSet(IBroker oldVal, IBroker newVal);\\n\\n    function broker() external view returns (IBroker);\\n}\\n\\n/**\\n * @title IMain\\n * @notice The central hub for the entire system. Maintains components and an owner singleton role\\n */\\ninterface IMain is IVersioned, IAuth, IComponentRegistry {\\n    function poke() external; // not used in p1\\n\\n    // === Initialization ===\\n\\n    event MainInitialized();\\n\\n    function init(\\n        Components memory components,\\n        IERC20 rsr_,\\n        uint48 shortFreeze_,\\n        uint48 longFreeze_\\n    ) external;\\n\\n    function rsr() external view returns (IERC20);\\n}\\n\\ninterface TestIMain is IMain {\\n    /// @custom:governance\\n    function setShortFreeze(uint48) external;\\n\\n    /// @custom:governance\\n    function setLongFreeze(uint48) external;\\n\\n    function shortFreeze() external view returns (uint48);\\n\\n    function longFreeze() external view returns (uint48);\\n\\n    function longFreezes(address account) external view returns (uint256);\\n\\n    function tradingPaused() external view returns (bool);\\n\\n    function issuancePaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevenueTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBroker.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\n\\n/**\\n * @title IRevenueTrader\\n * @notice The RevenueTrader is an extension of the trading mixin that trades all\\n *   assets at its address for a single target asset. There are two runtime instances\\n *   of the RevenueTrader, 1 for RToken and 1 for RSR.\\n */\\ninterface IRevenueTrader is IComponent, ITrading {\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        IERC20 tokenToBuy_,\\n        uint192 maxTradeSlippage_,\\n        uint192 minTradeVolume_\\n    ) external;\\n\\n    /// Distribute tokenToBuy to its destinations\\n    /// @dev Special-case of manageTokens()\\n    /// @custom:interaction\\n    function distributeTokenToBuy() external;\\n\\n    /// Return registered ERC20s to the BackingManager if distribution for tokenToBuy is 0\\n    /// @custom:interaction\\n    function returnTokens(IERC20[] memory erc20s) external;\\n\\n    /// Process some number of tokens\\n    /// If the tokenToBuy is included in erc20s, RevenueTrader will distribute it at end of the tx\\n    /// @param erc20s The ERC20s to manage; can be tokenToBuy or anything registered\\n    /// @param kinds The kinds of auctions to launch: DUTCH_AUCTION | BATCH_AUCTION\\n    /// @custom:interaction\\n    function manageTokens(IERC20[] memory erc20s, TradeKind[] memory kinds) external;\\n\\n    function tokenToBuy() external view returns (IERC20);\\n}\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface TestIRevenueTrader is IRevenueTrader, TestITrading {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IMain.sol\\\";\\n\\n/**\\n * @title IRewardable\\n * @notice A simple interface mixin to support claiming of rewards.\\n */\\ninterface IRewardable {\\n    /// Emitted whenever a reward token balance is claimed\\n    event RewardsClaimed(IERC20 indexed erc20, uint256 amount);\\n\\n    /// Claim rewards earned by holding a balance of the ERC20 token\\n    /// Must emit `RewardsClaimed` for each token rewards are claimed for\\n    /// @custom:interaction\\n    function claimRewards() external;\\n}\\n\\n/**\\n * @title IRewardableComponent\\n * @notice A simple interface mixin to support claiming of rewards.\\n */\\ninterface IRewardableComponent is IRewardable {\\n    /// Claim rewards for a single ERC20\\n    /// Must emit `RewardsClaimed` for each token rewards are claimed for\\n    /// @custom:interaction\\n    function claimRewardsSingle(IERC20 erc20) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"../libraries/Throttle.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IMain.sol\\\";\\nimport \\\"./IRewardable.sol\\\";\\n\\n/**\\n * @title IRToken\\n * @notice An RToken is an ERC20 that is permissionlessly issuable/redeemable and tracks an\\n *   exchange rate against a single unit: baskets, or {BU} in our type notation.\\n */\\ninterface IRToken is IComponent, IERC20MetadataUpgradeable, IERC20PermitUpgradeable {\\n    /// Emitted when an issuance of RToken occurs, whether it occurs via slow minting or not\\n    /// @param issuer The address holding collateral tokens\\n    /// @param recipient The address of the recipient of the RTokens\\n    /// @param amount The quantity of RToken being issued\\n    /// @param baskets The corresponding number of baskets\\n    event Issuance(\\n        address indexed issuer,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint192 baskets\\n    );\\n\\n    /// Emitted when a redemption of RToken occurs\\n    /// @param redeemer The address holding RToken\\n    /// @param recipient The address of the account receiving the backing collateral tokens\\n    /// @param amount The quantity of RToken being redeemed\\n    /// @param baskets The corresponding number of baskets\\n    /// @param amount {qRTok} The amount of RTokens canceled\\n    event Redemption(\\n        address indexed redeemer,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint192 baskets\\n    );\\n\\n    /// Emitted when the number of baskets needed changes\\n    /// @param oldBasketsNeeded Previous number of baskets units needed\\n    /// @param newBasketsNeeded New number of basket units needed\\n    event BasketsNeededChanged(uint192 oldBasketsNeeded, uint192 newBasketsNeeded);\\n\\n    /// Emitted when RToken is melted, i.e the RToken supply is decreased but basketsNeeded is not\\n    /// @param amount {qRTok}\\n    event Melted(uint256 amount);\\n\\n    /// Emitted when issuance SupplyThrottle params are set\\n    event IssuanceThrottleSet(ThrottleLib.Params oldVal, ThrottleLib.Params newVal);\\n\\n    /// Emitted when redemption SupplyThrottle params are set\\n    event RedemptionThrottleSet(ThrottleLib.Params oldVal, ThrottleLib.Params newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        string memory name_,\\n        string memory symbol_,\\n        string memory mandate_,\\n        ThrottleLib.Params calldata issuanceThrottleParams,\\n        ThrottleLib.Params calldata redemptionThrottleParams\\n    ) external;\\n\\n    /// Issue an RToken with basket collateral\\n    /// @param amount {qRTok} The quantity of RToken to issue\\n    /// @custom:interaction\\n    function issue(uint256 amount) external;\\n\\n    /// Issue an RToken with basket collateral, to a particular recipient\\n    /// @param recipient The address to receive the issued RTokens\\n    /// @param amount {qRTok} The quantity of RToken to issue\\n    /// @custom:interaction\\n    function issueTo(address recipient, uint256 amount) external;\\n\\n    /// Redeem RToken for basket collateral\\n    /// @dev Use redeemCustom for non-current baskets\\n    /// @param amount {qRTok} The quantity {qRToken} of RToken to redeem\\n    /// @custom:interaction\\n    function redeem(uint256 amount) external;\\n\\n    /// Redeem RToken for basket collateral to a particular recipient\\n    /// @dev Use redeemCustom for non-current baskets\\n    /// @param recipient The address to receive the backing collateral tokens\\n    /// @param amount {qRTok} The quantity {qRToken} of RToken to redeem\\n    /// @custom:interaction\\n    function redeemTo(address recipient, uint256 amount) external;\\n\\n    /// Redeem RToken for a linear combination of historical baskets, to a particular recipient\\n    /// @dev Allows partial redemptions up to the minAmounts\\n    /// @param recipient The address to receive the backing collateral tokens\\n    /// @param amount {qRTok} The quantity {qRToken} of RToken to redeem\\n    /// @param basketNonces An array of basket nonces to do redemption from\\n    /// @param portions {1} An array of Fix quantities that must add up to FIX_ONE\\n    /// @param expectedERC20sOut An array of ERC20s expected out\\n    /// @param minAmounts {qTok} The minimum ERC20 quantities the caller should receive\\n    /// @custom:interaction\\n    function redeemCustom(\\n        address recipient,\\n        uint256 amount,\\n        uint48[] memory basketNonces,\\n        uint192[] memory portions,\\n        address[] memory expectedERC20sOut,\\n        uint256[] memory minAmounts\\n    ) external;\\n\\n    /// Mint an amount of RToken equivalent to baskets BUs, scaling basketsNeeded up\\n    /// Callable only by BackingManager\\n    /// @param baskets {BU} The number of baskets to mint RToken for\\n    /// @custom:protected\\n    function mint(uint192 baskets) external;\\n\\n    /// Melt a quantity of RToken from the caller's account\\n    /// @param amount {qRTok} The amount to be melted\\n    /// @custom:protected\\n    function melt(uint256 amount) external;\\n\\n    /// Burn an amount of RToken from caller's account and scale basketsNeeded down\\n    /// Callable only by BackingManager\\n    /// @custom:protected\\n    function dissolve(uint256 amount) external;\\n\\n    /// Set the number of baskets needed directly, callable only by the BackingManager\\n    /// @param basketsNeeded {BU} The number of baskets to target\\n    ///                      needed range: pretty interesting\\n    /// @custom:protected\\n    function setBasketsNeeded(uint192 basketsNeeded) external;\\n\\n    /// @return {BU} How many baskets are being targeted\\n    function basketsNeeded() external view returns (uint192);\\n\\n    /// @return {qRTok} The maximum issuance that can be performed in the current block\\n    function issuanceAvailable() external view returns (uint256);\\n\\n    /// @return {qRTok} The maximum redemption that can be performed in the current block\\n    function redemptionAvailable() external view returns (uint256);\\n}\\n\\ninterface TestIRToken is IRToken {\\n    function setIssuanceThrottleParams(ThrottleLib.Params calldata) external;\\n\\n    function setRedemptionThrottleParams(ThrottleLib.Params calldata) external;\\n\\n    function issuanceThrottleParams() external view returns (ThrottleLib.Params memory);\\n\\n    function redemptionThrottleParams() external view returns (ThrottleLib.Params memory);\\n\\n    function increaseAllowance(address, uint256) external returns (bool);\\n\\n    function decreaseAllowance(address, uint256) external returns (bool);\\n\\n    function monetizeDonations(IERC20) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStRSR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IMain.sol\\\";\\n\\n/**\\n * @title IStRSR\\n * @notice An ERC20 token representing shares of the RSR over-collateralization pool.\\n *\\n * StRSR permits the BackingManager to take RSR in times of need. In return, the BackingManager\\n * benefits the StRSR pool with RSR rewards purchased with a portion of its revenue.\\n *\\n * In the absence of collateral default or losses due to slippage, StRSR should have a\\n * monotonically increasing exchange rate with respect to RSR, meaning that over time\\n * StRSR is redeemable for more RSR. It is non-rebasing.\\n */\\ninterface IStRSR is IERC20MetadataUpgradeable, IERC20PermitUpgradeable, IComponent {\\n    /// Emitted when RSR is staked\\n    /// @param era The era at time of staking\\n    /// @param staker The address of the staker\\n    /// @param rsrAmount {qRSR} How much RSR was staked\\n    /// @param stRSRAmount {qStRSR} How much stRSR was minted by this staking\\n    event Staked(\\n        uint256 indexed era,\\n        address indexed staker,\\n        uint256 rsrAmount,\\n        uint256 stRSRAmount\\n    );\\n\\n    /// Emitted when an unstaking is started\\n    /// @param draftId The id of the draft.\\n    /// @param draftEra The era of the draft.\\n    /// @param staker The address of the unstaker\\n    ///   The triple (staker, draftEra, draftId) is a unique ID\\n    /// @param rsrAmount {qRSR} How much RSR this unstaking will be worth, absent seizures\\n    /// @param stRSRAmount {qStRSR} How much stRSR was burned by this unstaking\\n    event UnstakingStarted(\\n        uint256 indexed draftId,\\n        uint256 indexed draftEra,\\n        address indexed staker,\\n        uint256 rsrAmount,\\n        uint256 stRSRAmount,\\n        uint256 availableAt\\n    );\\n\\n    /// Emitted when RSR is unstaked\\n    /// @param firstId The beginning of the range of draft IDs withdrawn in this transaction\\n    /// @param endId The end of range of draft IDs withdrawn in this transaction\\n    ///   (ID i was withdrawn if firstId <= i < endId)\\n    /// @param draftEra The era of the draft.\\n    ///   The triple (staker, draftEra, id) is a unique ID among drafts\\n    /// @param staker The address of the unstaker\\n\\n    /// @param rsrAmount {qRSR} How much RSR this unstaking was worth\\n    event UnstakingCompleted(\\n        uint256 indexed firstId,\\n        uint256 indexed endId,\\n        uint256 draftEra,\\n        address indexed staker,\\n        uint256 rsrAmount\\n    );\\n\\n    /// Emitted when RSR unstaking is cancelled\\n    /// @param firstId The beginning of the range of draft IDs withdrawn in this transaction\\n    /// @param endId The end of range of draft IDs withdrawn in this transaction\\n    ///   (ID i was withdrawn if firstId <= i < endId)\\n    /// @param draftEra The era of the draft.\\n    ///   The triple (staker, draftEra, id) is a unique ID among drafts\\n    /// @param staker The address of the unstaker\\n\\n    /// @param rsrAmount {qRSR} How much RSR this unstaking was worth\\n    event UnstakingCancelled(\\n        uint256 indexed firstId,\\n        uint256 indexed endId,\\n        uint256 draftEra,\\n        address indexed staker,\\n        uint256 rsrAmount\\n    );\\n\\n    /// Emitted whenever the exchange rate changes\\n    event ExchangeRateSet(uint192 oldVal, uint192 newVal);\\n\\n    /// Emitted whenever RSR are paids out\\n    event RewardsPaid(uint256 rsrAmt);\\n\\n    /// Emitted if all the RSR in the staking pool is seized and all balances are reset to zero.\\n    event AllBalancesReset(uint256 indexed newEra);\\n    /// Emitted if all the RSR in the unstakin pool is seized, and all ongoing unstaking is voided.\\n    event AllUnstakingReset(uint256 indexed newEra);\\n\\n    event UnstakingDelaySet(uint48 oldVal, uint48 newVal);\\n    event RewardRatioSet(uint192 oldVal, uint192 newVal);\\n    event WithdrawalLeakSet(uint192 oldVal, uint192 newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint48 unstakingDelay_,\\n        uint192 rewardRatio_,\\n        uint192 withdrawalLeak_\\n    ) external;\\n\\n    /// Gather and payout rewards from rsrTrader\\n    /// @custom:interaction\\n    function payoutRewards() external;\\n\\n    /// Stakes an RSR `amount` on the corresponding RToken to earn yield and over-collateralized\\n    /// the system\\n    /// @param amount {qRSR}\\n    /// @custom:interaction\\n    function stake(uint256 amount) external;\\n\\n    /// Begins a delayed unstaking for `amount` stRSR\\n    /// @param amount {qStRSR}\\n    /// @custom:interaction\\n    function unstake(uint256 amount) external;\\n\\n    /// Complete delayed unstaking for the account, up to (but not including!) `endId`\\n    /// @custom:interaction\\n    function withdraw(address account, uint256 endId) external;\\n\\n    /// Cancel unstaking for the account, up to (but not including!) `endId`\\n    /// @custom:interaction\\n    function cancelUnstake(uint256 endId) external;\\n\\n    /// Seize RSR, only callable by main.backingManager()\\n    /// @custom:protected\\n    function seizeRSR(uint256 amount) external;\\n\\n    /// Reset all stakes and advance era\\n    /// @custom:governance\\n    function resetStakes() external;\\n\\n    /// Return the maximum valid value of endId such that withdraw(endId) should immediately work\\n    function endIdForWithdraw(address account) external view returns (uint256 endId);\\n\\n    /// @return {qRSR/qStRSR} The exchange rate between RSR and StRSR\\n    function exchangeRate() external view returns (uint192);\\n}\\n\\ninterface TestIStRSR is IStRSR {\\n    function rewardRatio() external view returns (uint192);\\n\\n    function setRewardRatio(uint192) external;\\n\\n    function unstakingDelay() external view returns (uint48);\\n\\n    function setUnstakingDelay(uint48) external;\\n\\n    function withdrawalLeak() external view returns (uint192);\\n\\n    function setWithdrawalLeak(uint192) external;\\n\\n    function increaseAllowance(address, uint256) external returns (bool);\\n\\n    function decreaseAllowance(address, uint256) external returns (bool);\\n\\n    /// @return {qStRSR/qRSR} The exchange rate between StRSR and RSR\\n    function exchangeRate() external view returns (uint192);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IBroker.sol\\\";\\n\\nenum TradeStatus {\\n    NOT_STARTED, // before init()\\n    OPEN, // after init() and before settle()\\n    CLOSED, // after settle()\\n    // === Intermediate-tx state ===\\n    PENDING // during init() or settle() (reentrancy protection)\\n}\\n\\n/**\\n * Simple generalized trading interface for all Trade contracts to obey\\n *\\n * Usage: if (canSettle()) settle()\\n */\\ninterface ITrade {\\n    /// Complete the trade and transfer tokens back to the origin trader\\n    /// @return soldAmt {qSellTok} The quantity of tokens sold\\n    /// @return boughtAmt {qBuyTok} The quantity of tokens bought\\n    function settle() external returns (uint256 soldAmt, uint256 boughtAmt);\\n\\n    function sell() external view returns (IERC20Metadata);\\n\\n    function buy() external view returns (IERC20Metadata);\\n\\n    /// @return The timestamp at which the trade is projected to become settle-able\\n    function endTime() external view returns (uint48);\\n\\n    /// @return True if the trade can be settled\\n    /// @dev Should be guaranteed to be true eventually as an invariant\\n    function canSettle() external view returns (bool);\\n\\n    /// @return TradeKind.DUTCH_AUCTION or TradeKind.BATCH_AUCTION\\n    // solhint-disable-next-line func-name-mixedcase\\n    function KIND() external view returns (TradeKind);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrading.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./ITrade.sol\\\";\\nimport \\\"./IRewardable.sol\\\";\\n\\n/**\\n * @title ITrading\\n * @notice Common events and refresher function for all Trading contracts\\n */\\ninterface ITrading is IComponent, IRewardableComponent {\\n    event MaxTradeSlippageSet(uint192 oldVal, uint192 newVal);\\n    event MinTradeVolumeSet(uint192 oldVal, uint192 newVal);\\n\\n    /// Emitted when a trade is started\\n    /// @param trade The one-time-use trade contract that was just deployed\\n    /// @param sell The token to sell\\n    /// @param buy The token to buy\\n    /// @param sellAmount {qSellTok} The quantity of the selling token\\n    /// @param minBuyAmount {qBuyTok} The minimum quantity of the buying token to accept\\n    event TradeStarted(\\n        ITrade indexed trade,\\n        IERC20 indexed sell,\\n        IERC20 indexed buy,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount\\n    );\\n\\n    /// Emitted after a trade ends\\n    /// @param trade The one-time-use trade contract\\n    /// @param sell The token to sell\\n    /// @param buy The token to buy\\n    /// @param sellAmount {qSellTok} The quantity of the token sold\\n    /// @param buyAmount {qBuyTok} The quantity of the token bought\\n    event TradeSettled(\\n        ITrade indexed trade,\\n        IERC20 indexed sell,\\n        IERC20 indexed buy,\\n        uint256 sellAmount,\\n        uint256 buyAmount\\n    );\\n\\n    /// Settle a single trade, expected to be used with multicall for efficient mass settlement\\n    /// @param sell The sell token in the trade\\n    /// @return The trade settled\\n    /// @custom:refresher\\n    function settleTrade(IERC20 sell) external returns (ITrade);\\n\\n    /// @return {%} The maximum trade slippage acceptable\\n    function maxTradeSlippage() external view returns (uint192);\\n\\n    /// @return {UoA} The minimum trade volume in UoA, applies to all assets\\n    function minTradeVolume() external view returns (uint192);\\n\\n    /// @return The ongoing trade for a sell token, or the zero address\\n    function trades(IERC20 sell) external view returns (ITrade);\\n\\n    /// @return The number of ongoing trades open\\n    function tradesOpen() external view returns (uint48);\\n\\n    /// @return The number of total trades ever opened\\n    function tradesNonce() external view returns (uint256);\\n}\\n\\ninterface TestITrading is ITrading {\\n    /// @custom:governance\\n    function setMaxTradeSlippage(uint192 val) external;\\n\\n    /// @custom:governance\\n    function setMinTradeVolume(uint192 val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVersioned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\ninterface IVersioned {\\n    function version() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Fixed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\n// solhint-disable func-name-mixedcase func-visibility\\npragma solidity ^0.8.19;\\n\\n/// @title FixedPoint, a fixed-point arithmetic library defining the custom type uint192\\n/// @author Matt Elder <matt.elder@reserve.org> and the Reserve Team <https://reserve.org>\\n\\n/** The logical type `uint192 ` is a 192 bit value, representing an 18-decimal Fixed-point\\n    fractional value.  This is what's described in the Solidity documentation as\\n    \\\"fixed192x18\\\" -- a value represented by 192 bits, that makes 18 digits available to\\n    the right of the decimal point.\\n\\n    The range of values that uint192 can represent is about [-1.7e20, 1.7e20].\\n    Unless a function explicitly says otherwise, it will fail on overflow.\\n    To be clear, the following should hold:\\n    toFix(0) == 0\\n    toFix(1) == 1e18\\n*/\\n\\n// Analysis notes:\\n//   Every function should revert iff its result is out of bounds.\\n//   Unless otherwise noted, when a rounding mode is given, that mode is applied to\\n//     a single division that may happen as the last step in the computation.\\n//   Unless otherwise noted, when a rounding mode is *not* given but is needed, it's FLOOR.\\n//   For each, we comment:\\n//   - @return is the value expressed  in \\\"value space\\\", where uint192(1e18) \\\"is\\\" 1.0\\n//   - as-ints: is the value expressed in \\\"implementation space\\\", where uint192(1e18) \\\"is\\\" 1e18\\n//   The \\\"@return\\\" expression is suitable for actually using the library\\n//   The \\\"as-ints\\\" expression is suitable for testing\\n\\n// A uint value passed to this library was out of bounds for uint192 operations\\nerror UIntOutOfBounds();\\nbytes32 constant UIntOutofBoundsHash = keccak256(abi.encodeWithSignature(\\\"UIntOutOfBounds()\\\"));\\n\\n// Used by P1 implementation for easier casting\\nuint256 constant FIX_ONE_256 = 1e18;\\nuint8 constant FIX_DECIMALS = 18;\\n\\n// If a particular uint192 is represented by the uint192 n, then the uint192 represents the\\n// value n/FIX_SCALE.\\nuint64 constant FIX_SCALE = 1e18;\\n\\n// FIX_SCALE Squared:\\nuint128 constant FIX_SCALE_SQ = 1e36;\\n\\n// The largest integer that can be converted to uint192 .\\n// This is a bit bigger than 3.1e39\\nuint192 constant FIX_MAX_INT = type(uint192).max / FIX_SCALE;\\n\\nuint192 constant FIX_ZERO = 0; // The uint192 representation of zero.\\nuint192 constant FIX_ONE = FIX_SCALE; // The uint192 representation of one.\\nuint192 constant FIX_MAX = type(uint192).max; // The largest uint192. (Not an integer!)\\nuint192 constant FIX_MIN = 0; // The smallest uint192.\\n\\n/// An enum that describes a rounding approach for converting to ints\\nenum RoundingMode {\\n    FLOOR, // Round towards zero\\n    ROUND, // Round to the nearest int\\n    CEIL // Round away from zero\\n}\\n\\nRoundingMode constant FLOOR = RoundingMode.FLOOR;\\nRoundingMode constant ROUND = RoundingMode.ROUND;\\nRoundingMode constant CEIL = RoundingMode.CEIL;\\n\\n/* @dev Solidity 0.8.x only allows you to change one of type or size per type conversion.\\n   Thus, all the tedious-looking double conversions like uint256(uint256 (foo))\\n   See: https://docs.soliditylang.org/en/v0.8.17/080-breaking-changes.html#new-restrictions\\n */\\n\\n/// Explicitly convert a uint256 to a uint192. Revert if the input is out of bounds.\\nfunction _safeWrap(uint256 x) pure returns (uint192) {\\n    if (FIX_MAX < x) revert UIntOutOfBounds();\\n    return uint192(x);\\n}\\n\\n/// Convert a uint to its Fix representation.\\n/// @return x\\n// as-ints: x * 1e18\\nfunction toFix(uint256 x) pure returns (uint192) {\\n    return _safeWrap(x * FIX_SCALE);\\n}\\n\\n/// Convert a uint to its fixed-point representation, and left-shift its value `shiftLeft`\\n/// decimal digits.\\n/// @return x * 10**shiftLeft\\n// as-ints: x * 10**(shiftLeft + 18)\\nfunction shiftl_toFix(uint256 x, int8 shiftLeft) pure returns (uint192) {\\n    return shiftl_toFix(x, shiftLeft, FLOOR);\\n}\\n\\n/// @return x * 10**shiftLeft\\n// as-ints: x * 10**(shiftLeft + 18)\\nfunction shiftl_toFix(\\n    uint256 x,\\n    int8 shiftLeft,\\n    RoundingMode rounding\\n) pure returns (uint192) {\\n    // conditions for avoiding overflow\\n    if (x == 0) return 0;\\n    if (shiftLeft <= -96) return (rounding == CEIL ? 1 : 0); // 0 < uint.max / 10**77 < 0.5\\n    if (40 <= shiftLeft) revert UIntOutOfBounds(); // 10**56 < FIX_MAX < 10**57\\n\\n    shiftLeft += 18;\\n\\n    uint256 coeff = 10**abs(shiftLeft);\\n    uint256 shifted = (shiftLeft >= 0) ? x * coeff : _divrnd(x, coeff, rounding);\\n\\n    return _safeWrap(shifted);\\n}\\n\\n/// Divide a uint by a uint192, yielding a uint192\\n/// This may also fail if the result is MIN_uint192! not fixing this for optimization's sake.\\n/// @return x / y\\n// as-ints: x * 1e36 / y\\nfunction divFix(uint256 x, uint192 y) pure returns (uint192) {\\n    // If we didn't have to worry about overflow, we'd just do `return x * 1e36 / _y`\\n    // If it's safe to do this operation the easy way, do it:\\n    if (x < uint256(type(uint256).max / FIX_SCALE_SQ)) {\\n        return _safeWrap(uint256(x * FIX_SCALE_SQ) / y);\\n    } else {\\n        return _safeWrap(mulDiv256(x, FIX_SCALE_SQ, y));\\n    }\\n}\\n\\n/// Divide a uint by a uint, yielding a  uint192\\n/// @return x / y\\n// as-ints: x * 1e18 / y\\nfunction divuu(uint256 x, uint256 y) pure returns (uint192) {\\n    return _safeWrap(mulDiv256(FIX_SCALE, x, y));\\n}\\n\\n/// @return min(x,y)\\n// as-ints: min(x,y)\\nfunction fixMin(uint192 x, uint192 y) pure returns (uint192) {\\n    return x < y ? x : y;\\n}\\n\\n/// @return max(x,y)\\n// as-ints: max(x,y)\\nfunction fixMax(uint192 x, uint192 y) pure returns (uint192) {\\n    return x > y ? x : y;\\n}\\n\\n/// @return absoluteValue(x,y)\\n// as-ints: absoluteValue(x,y)\\nfunction abs(int256 x) pure returns (uint256) {\\n    return x < 0 ? uint256(-x) : uint256(x);\\n}\\n\\n/// Divide two uints, returning a uint, using rounding mode `rounding`.\\n/// @return numerator / divisor\\n// as-ints: numerator / divisor\\nfunction _divrnd(\\n    uint256 numerator,\\n    uint256 divisor,\\n    RoundingMode rounding\\n) pure returns (uint256) {\\n    uint256 result = numerator / divisor;\\n\\n    if (rounding == FLOOR) return result;\\n\\n    if (rounding == ROUND) {\\n        if (numerator % divisor > (divisor - 1) / 2) {\\n            result++;\\n        }\\n    } else {\\n        if (numerator % divisor > 0) {\\n            result++;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nlibrary FixLib {\\n    /// Again, all arithmetic functions fail if and only if the result is out of bounds.\\n\\n    /// Convert this fixed-point value to a uint. Round towards zero if needed.\\n    /// @return x\\n    // as-ints: x / 1e18\\n    function toUint(uint192 x) internal pure returns (uint136) {\\n        return toUint(x, FLOOR);\\n    }\\n\\n    /// Convert this uint192 to a uint\\n    /// @return x\\n    // as-ints: x / 1e18 with rounding\\n    function toUint(uint192 x, RoundingMode rounding) internal pure returns (uint136) {\\n        return uint136(_divrnd(uint256(x), FIX_SCALE, rounding));\\n    }\\n\\n    /// Return the uint192 shifted to the left by `decimal` digits\\n    /// (Similar to a bitshift but in base 10)\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**decimals\\n    function shiftl(uint192 x, int8 decimals) internal pure returns (uint192) {\\n        return shiftl(x, decimals, FLOOR);\\n    }\\n\\n    /// Return the uint192 shifted to the left by `decimal` digits\\n    /// (Similar to a bitshift but in base 10)\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**decimals\\n    function shiftl(\\n        uint192 x,\\n        int8 decimals,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        // Handle overflow cases\\n        if (x == 0) return 0;\\n        if (decimals <= -59) return (rounding == CEIL ? 1 : 0); // 59, because 1e58 > 2**192\\n        if (58 <= decimals) revert UIntOutOfBounds(); // 58, because x * 1e58 > 2 ** 192 if x != 0\\n\\n        uint256 coeff = uint256(10**abs(decimals));\\n        return _safeWrap(decimals >= 0 ? x * coeff : _divrnd(x, coeff, rounding));\\n    }\\n\\n    /// Add a uint192 to this uint192\\n    /// @return x + y\\n    // as-ints: x + y\\n    function plus(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return x + y;\\n    }\\n\\n    /// Add a uint to this uint192\\n    /// @return x + y\\n    // as-ints: x + y*1e18\\n    function plusu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return _safeWrap(x + y * FIX_SCALE);\\n    }\\n\\n    /// Subtract a uint192 from this uint192\\n    /// @return x - y\\n    // as-ints: x - y\\n    function minus(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return x - y;\\n    }\\n\\n    /// Subtract a uint from this uint192\\n    /// @return x - y\\n    // as-ints: x - y*1e18\\n    function minusu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return _safeWrap(uint256(x) - uint256(y * FIX_SCALE));\\n    }\\n\\n    /// Multiply this uint192 by a uint192\\n    /// Round truncated values to the nearest available value. 5e-19 rounds away from zero.\\n    /// @return x * y\\n    // as-ints: x * y/1e18  [division using ROUND, not FLOOR]\\n    function mul(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return mul(x, y, ROUND);\\n    }\\n\\n    /// Multiply this uint192 by a uint192\\n    /// @return x * y\\n    // as-ints: x * y/1e18\\n    function mul(\\n        uint192 x,\\n        uint192 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(_divrnd(uint256(x) * uint256(y), FIX_SCALE, rounding));\\n    }\\n\\n    /// Multiply this uint192 by a uint\\n    /// @return x * y\\n    // as-ints: x * y\\n    function mulu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return _safeWrap(x * y);\\n    }\\n\\n    /// Divide this uint192 by a uint192\\n    /// @return x / y\\n    // as-ints: x * 1e18 / y\\n    function div(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return div(x, y, FLOOR);\\n    }\\n\\n    /// Divide this uint192 by a uint192\\n    /// @return x / y\\n    // as-ints: x * 1e18 / y\\n    function div(\\n        uint192 x,\\n        uint192 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        // Multiply-in FIX_SCALE before dividing by y to preserve precision.\\n        return _safeWrap(_divrnd(uint256(x) * FIX_SCALE, y, rounding));\\n    }\\n\\n    /// Divide this uint192 by a uint\\n    /// @return x / y\\n    // as-ints: x / y\\n    function divu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return divu(x, y, FLOOR);\\n    }\\n\\n    /// Divide this uint192 by a uint\\n    /// @return x / y\\n    // as-ints: x / y\\n    function divu(\\n        uint192 x,\\n        uint256 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(_divrnd(x, y, rounding));\\n    }\\n\\n    uint64 constant FIX_HALF = uint64(FIX_SCALE) / 2;\\n\\n    /// Raise this uint192 to a nonnegative integer power. Requires that x_ <= FIX_ONE\\n    /// Gas cost is O(lg(y)), precision is +- 1e-18.\\n    /// @return x_ ** y\\n    // as-ints: x_ ** y / 1e18**(y-1)    <- technically correct for y = 0. :D\\n    function powu(uint192 x_, uint48 y) internal pure returns (uint192) {\\n        require(x_ <= FIX_ONE);\\n        if (y == 1) return x_;\\n        if (x_ == FIX_ONE || y == 0) return FIX_ONE;\\n        uint256 x = uint256(x_) * FIX_SCALE; // x is D36\\n        uint256 result = FIX_SCALE_SQ; // result is D36\\n        while (true) {\\n            if (y & 1 == 1) result = (result * x + FIX_SCALE_SQ / 2) / FIX_SCALE_SQ;\\n            if (y <= 1) break;\\n            y = (y >> 1);\\n            x = (x * x + FIX_SCALE_SQ / 2) / FIX_SCALE_SQ;\\n        }\\n        return _safeWrap(result / FIX_SCALE);\\n    }\\n\\n    /// Comparison operators...\\n    function lt(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x < y;\\n    }\\n\\n    function lte(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x <= y;\\n    }\\n\\n    function gt(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x > y;\\n    }\\n\\n    function gte(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x >= y;\\n    }\\n\\n    function eq(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x == y;\\n    }\\n\\n    function neq(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x != y;\\n    }\\n\\n    /// Return whether or not this uint192 is less than epsilon away from y.\\n    /// @return |x - y| < epsilon\\n    // as-ints: |x - y| < epsilon\\n    function near(\\n        uint192 x,\\n        uint192 y,\\n        uint192 epsilon\\n    ) internal pure returns (bool) {\\n        uint192 diff = x <= y ? y - x : x - y;\\n        return diff < epsilon;\\n    }\\n\\n    // ================ Chained Operations ================\\n    // The operation foo_bar() always means:\\n    //   Do foo() followed by bar(), and overflow only if the _end_ result doesn't fit in an uint192\\n\\n    /// Shift this uint192 left by `decimals` digits, and convert to a uint\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**(decimals - 18)\\n    function shiftl_toUint(uint192 x, int8 decimals) internal pure returns (uint256) {\\n        return shiftl_toUint(x, decimals, FLOOR);\\n    }\\n\\n    /// Shift this uint192 left by `decimals` digits, and convert to a uint.\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**(decimals - 18)\\n    function shiftl_toUint(\\n        uint192 x,\\n        int8 decimals,\\n        RoundingMode rounding\\n    ) internal pure returns (uint256) {\\n        // Handle overflow cases\\n        if (x == 0) return 0; // always computable, no matter what decimals is\\n        if (decimals <= -42) return (rounding == CEIL ? 1 : 0);\\n        if (96 <= decimals) revert UIntOutOfBounds();\\n\\n        decimals -= 18; // shift so that toUint happens at the same time.\\n\\n        uint256 coeff = uint256(10**abs(decimals));\\n        return decimals >= 0 ? uint256(x * coeff) : uint256(_divrnd(x, coeff, rounding));\\n    }\\n\\n    /// Multiply this uint192 by a uint, and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e18\\n    function mulu_toUint(uint192 x, uint256 y) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), y, FIX_SCALE);\\n    }\\n\\n    /// Multiply this uint192 by a uint, and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e18\\n    function mulu_toUint(\\n        uint192 x,\\n        uint256 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), y, FIX_SCALE, rounding);\\n    }\\n\\n    /// Multiply this uint192 by a uint192 and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e36\\n    function mul_toUint(uint192 x, uint192 y) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), uint256(y), FIX_SCALE_SQ);\\n    }\\n\\n    /// Multiply this uint192 by a uint192 and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e36\\n    function mul_toUint(\\n        uint192 x,\\n        uint192 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), uint256(y), FIX_SCALE_SQ, rounding);\\n    }\\n\\n    /// Compute x * y / z avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function muluDivu(\\n        uint192 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint192) {\\n        return muluDivu(x, y, z, FLOOR);\\n    }\\n\\n    /// Compute x * y / z, avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function muluDivu(\\n        uint192 x,\\n        uint256 y,\\n        uint256 z,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(mulDiv256(x, y, z, rounding));\\n    }\\n\\n    /// Compute x * y / z on Fixes, avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function mulDiv(\\n        uint192 x,\\n        uint192 y,\\n        uint192 z\\n    ) internal pure returns (uint192) {\\n        return mulDiv(x, y, z, FLOOR);\\n    }\\n\\n    /// Compute x * y / z on Fixes, avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function mulDiv(\\n        uint192 x,\\n        uint192 y,\\n        uint192 z,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(mulDiv256(x, y, z, rounding));\\n    }\\n\\n    // === safe*() ===\\n\\n    /// Multiply two fixes, rounding up to FIX_MAX and down to 0\\n    /// @param a First param to multiply\\n    /// @param b Second param to multiply\\n    function safeMul(\\n        uint192 a,\\n        uint192 b,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        // untestable:\\n        //      a will never = 0 here because of the check in _price()\\n        if (a == 0 || b == 0) return 0;\\n        // untestable:\\n        //      a = FIX_MAX iff b = 0\\n        if (a == FIX_MAX || b == FIX_MAX) return FIX_MAX;\\n\\n        // return FIX_MAX instead of throwing overflow errors.\\n        unchecked {\\n            // p and mul *are* Fix values, so have 18 decimals (D18)\\n            uint256 rawDelta = uint256(b) * a; // {D36} = {D18} * {D18}\\n            // if we overflowed, then return FIX_MAX\\n            if (rawDelta / b != a) return FIX_MAX;\\n            uint256 shiftDelta = rawDelta;\\n\\n            // add in rounding\\n            if (rounding == RoundingMode.ROUND) shiftDelta += (FIX_ONE / 2);\\n            else if (rounding == RoundingMode.CEIL) shiftDelta += FIX_ONE - 1;\\n\\n            // untestable (here there be dragons):\\n            // (below explanation is for the ROUND case, but it extends to the FLOOR/CEIL too)\\n            //          A)  shiftDelta = rawDelta + (FIX_ONE / 2)\\n            //      shiftDelta overflows if:\\n            //          B)  shiftDelta = MAX_UINT256 - FIX_ONE/2 + 1\\n            //              rawDelta + (FIX_ONE/2) = MAX_UINT256 - FIX_ONE/2 + 1\\n            //              b * a = MAX_UINT256 - FIX_ONE + 1\\n            //      therefore shiftDelta overflows if:\\n            //          C)  b = (MAX_UINT256 - FIX_ONE + 1) / a\\n            //      MAX_UINT256 ~= 1e77 , FIX_MAX ~= 6e57 (6e20 difference in magnitude)\\n            //      a <= 1e21 (MAX_TARGET_AMT)\\n            //      a must be between 1e19 & 1e20 in order for b in (C) to be uint192,\\n            //      but a would have to be < 1e18 in order for (A) to overflow\\n            if (shiftDelta < rawDelta) return FIX_MAX;\\n\\n            // return FIX_MAX if return result would truncate\\n            if (shiftDelta / FIX_ONE > FIX_MAX) return FIX_MAX;\\n\\n            // return _div(rawDelta, FIX_ONE, rounding)\\n            return uint192(shiftDelta / FIX_ONE); // {D18} = {D36} / {D18}\\n        }\\n    }\\n\\n    /// Divide two fixes, rounding up to FIX_MAX and down to 0\\n    /// @param a Numerator\\n    /// @param b Denominator\\n    function safeDiv(\\n        uint192 a,\\n        uint192 b,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        if (a == 0) return 0;\\n        if (b == 0) return FIX_MAX;\\n\\n        uint256 raw = _divrnd(FIX_ONE_256 * a, uint256(b), rounding);\\n        if (raw >= FIX_MAX) return FIX_MAX;\\n        return uint192(raw); // don't need _safeWrap\\n    }\\n\\n    /// Multiplies two fixes and divide by a third\\n    /// @param a First to multiply\\n    /// @param b Second to multiply\\n    /// @param c Denominator\\n    function safeMulDiv(\\n        uint192 a,\\n        uint192 b,\\n        uint192 c,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192 result) {\\n        if (a == 0 || b == 0) return 0;\\n        if (a == FIX_MAX || b == FIX_MAX || c == 0) return FIX_MAX;\\n\\n        uint256 result_256;\\n        unchecked {\\n            (uint256 hi, uint256 lo) = fullMul(a, b);\\n            if (hi >= c) return FIX_MAX;\\n            uint256 mm = mulmod(a, b, c);\\n            if (mm > lo) hi -= 1;\\n            lo -= mm;\\n            uint256 pow2 = c & (0 - c);\\n\\n            uint256 c_256 = uint256(c);\\n            // Warning: Should not access c below this line\\n\\n            c_256 /= pow2;\\n            lo /= pow2;\\n            lo += hi * ((0 - pow2) / pow2 + 1);\\n            uint256 r = 1;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            result_256 = lo * r;\\n\\n            // Apply rounding\\n            if (rounding == CEIL) {\\n                if (mm > 0) result_256 += 1;\\n            } else if (rounding == ROUND) {\\n                if (mm > ((c_256 - 1) / 2)) result_256 += 1;\\n            }\\n        }\\n\\n        if (result_256 >= FIX_MAX) return FIX_MAX;\\n        return uint192(result_256);\\n    }\\n}\\n\\n// ================ a couple pure-uint helpers================\\n// as-ints comments are omitted here, because they're the same as @return statements, because\\n// these are all pure uint functions\\n\\n/// Return (x*y/z), avoiding intermediate overflow.\\n//  Adapted from sources:\\n//    https://medium.com/coinmonks/4db014e080b1, https://medium.com/wicketh/afa55870a65\\n//    and quite a few of the other excellent \\\"Mathemagic\\\" posts from https://medium.com/wicketh\\n/// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n/// @return result x * y / z\\nfunction mulDiv256(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256 result) {\\n    unchecked {\\n        (uint256 hi, uint256 lo) = fullMul(x, y);\\n        if (hi >= z) revert UIntOutOfBounds();\\n        uint256 mm = mulmod(x, y, z);\\n        if (mm > lo) hi -= 1;\\n        lo -= mm;\\n        uint256 pow2 = z & (0 - z);\\n        z /= pow2;\\n        lo /= pow2;\\n        lo += hi * ((0 - pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        result = lo * r;\\n    }\\n}\\n\\n/// Return (x*y/z), avoiding intermediate overflow.\\n/// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n/// @return x * y / z\\nfunction mulDiv256(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z,\\n    RoundingMode rounding\\n) pure returns (uint256) {\\n    uint256 result = mulDiv256(x, y, z);\\n    if (rounding == FLOOR) return result;\\n\\n    uint256 mm = mulmod(x, y, z);\\n    if (rounding == CEIL) {\\n        if (mm > 0) result += 1;\\n    } else {\\n        if (mm > ((z - 1) / 2)) result += 1; // z should be z-1\\n    }\\n    return result;\\n}\\n\\n/// Return (x*y) as a \\\"virtual uint512\\\" (lo, hi), representing (hi*2**256 + lo)\\n///   Adapted from sources:\\n///   https://medium.com/wicketh/27650fec525d, https://medium.com/coinmonks/4db014e080b1\\n/// @dev Intended to be internal to this library\\n/// @return hi (hi, lo) satisfies  hi*(2**256) + lo == x * y\\n/// @return lo (paired with `hi`)\\nfunction fullMul(uint256 x, uint256 y) pure returns (uint256 hi, uint256 lo) {\\n    unchecked {\\n        uint256 mm = mulmod(x, y, uint256(0) - uint256(1));\\n        lo = x * y;\\n        hi = mm - lo;\\n        if (mm < lo) hi -= 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Throttle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./Fixed.sol\\\";\\n\\nuint48 constant ONE_HOUR = 3600; // {seconds/hour}\\n\\n/**\\n * @title ThrottleLib\\n * A library that implements a usage throttle that can be used to ensure net issuance\\n * or net redemption for an RToken never exceeds some bounds per unit time (hour).\\n *\\n * It is expected for the RToken to use this library with two instances, one for issuance\\n * and one for redemption. Issuance causes the available redemption amount to increase, and\\n * visa versa.\\n */\\nlibrary ThrottleLib {\\n    using FixLib for uint192;\\n\\n    struct Params {\\n        uint256 amtRate; // {qRTok/hour} a quantity of RToken hourly; cannot be 0\\n        uint192 pctRate; // {1/hour} a fraction of RToken hourly; can be 0\\n    }\\n\\n    struct Throttle {\\n        // === Gov params ===\\n        Params params;\\n        // === Cache ===\\n        uint48 lastTimestamp; // {seconds}\\n        uint256 lastAvailable; // {qRTok}\\n    }\\n\\n    /// Reverts if usage amount exceeds available amount\\n    /// @param supply {qRTok} Total RToken supply beforehand\\n    /// @param amount {qRTok} Amount of RToken to use. Should be negative for the issuance\\n    ///   throttle during redemption and for the redemption throttle during issuance.\\n    function useAvailable(\\n        Throttle storage throttle,\\n        uint256 supply,\\n        int256 amount\\n    ) internal {\\n        // untestable: amtRate will always be greater > 0 due to previous validations\\n        if (throttle.params.amtRate == 0 && throttle.params.pctRate == 0) return;\\n\\n        // Calculate hourly limit\\n        uint256 limit = hourlyLimit(throttle, supply); // {qRTok}\\n\\n        // Calculate available amount before supply change\\n        uint256 available = currentlyAvailable(throttle, limit);\\n\\n        // Update throttle.timestamp if available amount changed or at limit\\n        if (available != throttle.lastAvailable || available == limit) {\\n            throttle.lastTimestamp = uint48(block.timestamp);\\n        }\\n\\n        // Update throttle.lastAvailable\\n        if (amount > 0) {\\n            require(uint256(amount) <= available, \\\"supply change throttled\\\");\\n            available -= uint256(amount);\\n            // untestable: the final else statement, amount will never be 0\\n        } else if (amount < 0) {\\n            available += uint256(-amount);\\n        }\\n        throttle.lastAvailable = available;\\n    }\\n\\n    /// @param limit {qRTok/hour} The hourly limit\\n    /// @return available {qRTok} Amount currently available for consumption\\n    function currentlyAvailable(Throttle storage throttle, uint256 limit)\\n        internal\\n        view\\n        returns (uint256 available)\\n    {\\n        uint48 delta = uint48(block.timestamp) - throttle.lastTimestamp; // {seconds}\\n        available = throttle.lastAvailable + (limit * delta) / ONE_HOUR;\\n        if (available > limit) available = limit;\\n    }\\n\\n    /// @return limit {qRTok} The hourly limit\\n    function hourlyLimit(Throttle storage throttle, uint256 supply)\\n        internal\\n        view\\n        returns (uint256 limit)\\n    {\\n        Params storage params = throttle.params;\\n\\n        // Calculate hourly limit as: max(params.amtRate, supply.mul(params.pctRate))\\n        limit = (supply * params.pctRate) / FIX_ONE_256; // {qRTok}\\n        if (params.amtRate > limit) limit = params.amtRate;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/AaveV3FiatCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"../../../libraries/Fixed.sol\\\";\\nimport \\\"../AppreciatingFiatCollateral.sol\\\";\\n\\nimport { StaticATokenV3LM } from \\\"./vendor/StaticATokenV3LM.sol\\\";\\n\\n/**\\n * @title AaveV3FiatCollateral\\n * @notice Collateral plugin for an aToken for a UoA-pegged asset, like aUSDC or a aUSDP on Aave V3\\n * Expected: {tok} != {ref}, {ref} is pegged to {target} unless defaulting, {target} == {UoA}\\n */\\ncontract AaveV3FiatCollateral is AppreciatingFiatCollateral {\\n    using OracleLib for AggregatorV3Interface;\\n    using FixLib for uint192;\\n\\n    // solhint-disable no-empty-blocks\\n    /// @param config.chainlinkFeed Feed units: {UoA/ref}\\n    /// @param revenueHiding {1} A value like 1e-6 that represents the maximum refPerTok to hide\\n    constructor(CollateralConfig memory config, uint192 revenueHiding)\\n        AppreciatingFiatCollateral(config, revenueHiding)\\n    {}\\n\\n    // solhint-enable no-empty-blocks\\n\\n    /// @return {ref/tok} Actual quantity of whole reference units per whole collateral tokens\\n    function _underlyingRefPerTok() internal view override returns (uint192) {\\n        uint256 rate = StaticATokenV3LM(address(erc20)).rate(); // {ray ref/tok}\\n\\n        return shiftl_toFix(rate, -27); // {ray -> wad}\\n    }\\n\\n    /// Claim rewards earned by holding a balance of the ERC20 token\\n    /// delegatecall\\n    /// DEPRECATED: claimRewards() will be removed from all assets and collateral plugins\\n    function claimRewards() external virtual override(Asset, IRewardable) {\\n        StaticATokenV3LM(address(erc20)).claimRewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/* solhint-disable */\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /* //////////////////////////////////////////////////////////////\\n                        EVENTS\\n  ////////////////////////////////////////////////////////////// */\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        METADATA STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public decimals;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        ERC20 STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        EIP-2612 STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        CONSTRUCTOR\\n  ////////////////////////////////////////////////////////////// */\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        ERC20 LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        _beforeTokenTransfer(msg.sender, to, amount);\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _beforeTokenTransfer(from, to, amount);\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                          EIP-2612 LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return\\n            block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                            INTERNAL MINT/BURN LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), to, amount);\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(from, address(0), amount);\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n/* solhint-enable */\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/interfaces/IAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.10;\\n\\n/* solhint-disable */\\n\\nimport { IAaveIncentivesController } from \\\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken {\\n    function POOL() external view returns (address);\\n\\n    function getIncentivesController() external view returns (address);\\n\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     * While deposit of aToken is not affected by aave pool configrations, deposit of the aTokenUnderlying will need to deposit to aave\\n     * so it is affected by current aave pool configuration.\\n     * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L57\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call to the aToken underlying.\\n     * While redeem of aToken is not affected by aave pool configrations, redeeming of the aTokenUnderlying will need to redeem from aave\\n     * so it is affected by current aave pool configuration.\\n     * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L87\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\\n/* solhint-enable max-line-length */\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/interfaces/IInitializableStaticATokenLM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.10;\\n\\n/* solhint-disable max-line-length */\\n\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { IAaveIncentivesController } from \\\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableStaticATokenLM\\n * @notice Interface for the initialize function on StaticATokenLM\\n * @author Aave\\n **/\\ninterface IInitializableStaticATokenLM {\\n    /**\\n     * @dev Emitted when a StaticATokenLM is initialized\\n     * @param aToken The address of the underlying aToken (aWETH)\\n     * @param staticATokenName The name of the Static aToken\\n     * @param staticATokenSymbol The symbol of the Static aToken\\n     * @dev Used to be `Initialized` but changed to avoid duplicate events\\n     **/\\n    event InitializedStaticATokenLM(\\n        address indexed aToken,\\n        string staticATokenName,\\n        string staticATokenSymbol\\n    );\\n\\n    /**\\n     * @dev Initializes the StaticATokenLM\\n     * @param aToken The address of the underlying aToken (aWETH)\\n     * @param staticATokenName The name of the Static aToken\\n     * @param staticATokenSymbol The symbol of the Static aToken\\n     */\\n    function initialize(\\n        address aToken,\\n        string calldata staticATokenName,\\n        string calldata staticATokenSymbol\\n    ) external;\\n}\\n\\n/* solhint-enable max-line-length */\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/interfaces/IStaticATokenV3LM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.10;\\n\\n/* solhint-disable max-line-length */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { IAaveIncentivesController } from \\\"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol\\\";\\nimport { IInitializableStaticATokenLM } from \\\"./IInitializableStaticATokenLM.sol\\\";\\n\\ninterface IStaticATokenV3LM is IInitializableStaticATokenLM {\\n    struct SignatureParams {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct PermitParams {\\n        address owner;\\n        address spender;\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct UserRewardsData {\\n        uint128 rewardsIndexOnLastInteraction; // (in RAYs)\\n        uint128 unclaimedRewards; // (in RAYs)\\n    }\\n\\n    struct RewardIndexCache {\\n        bool isRegistered;\\n        uint248 lastUpdatedIndex;\\n    }\\n\\n    event RewardTokenRegistered(address indexed reward, uint256 startIndex);\\n\\n    /**\\n     * @notice Burns `amount` of static aToken, with receiver receiving the corresponding amount of `ASSET`\\n     * @param shares The amount to withdraw, in static balance of StaticAToken\\n     * @param receiver The address that will receive the amount of `ASSET` withdrawn from the Aave protocol\\n     * @param withdrawFromAave bool\\n     * - `true` for the receiver to get underlying tokens (e.g. USDC)\\n     * - `false` for the receiver to get aTokens (e.g. aUSDC)\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `receiver`, dynamic balance\\n     **/\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner,\\n        bool withdrawFromAave\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Deposits `ASSET` in the Aave protocol and mints static aTokens to msg.sender\\n     * @param assets The amount of underlying `ASSET` to deposit (e.g. deposit of 100 USDC)\\n     * @param receiver The address that will receive the static aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param depositToAave bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     **/\\n    function deposit(\\n        uint256 assets,\\n        address receiver,\\n        uint16 referralCode,\\n        bool depositToAave\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows to deposit on Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param depositor Address from which the funds to deposit are going to be pulled\\n     * @param receiver Address that will receive the staticATokens, in the average case, same as the `depositor`\\n     * @param assets The amount to deposit\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param depositToAave bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     */\\n    function metaDeposit(\\n        address depositor,\\n        address receiver,\\n        uint256 assets,\\n        uint16 referralCode,\\n        bool depositToAave,\\n        uint256 deadline,\\n        PermitParams calldata permit,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows to withdraw from Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner Address owning the staticATokens\\n     * @param receiver Address that will receive the underlying withdrawn from Aave\\n     * @param shares The amount of staticAToken to withdraw. If > 0, `assets` needs to be 0\\n     * @param assets The amount of underlying/aToken to withdraw. If > 0, `shares` needs to be 0\\n     * @param withdrawFromAave bool\\n     * - `true` for the receiver to get underlying tokens (e.g. USDC)\\n     * - `false` for the receiver to get aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `receiver`, dynamic balance\\n     */\\n    function metaWithdraw(\\n        address owner,\\n        address receiver,\\n        uint256 shares,\\n        uint256 assets,\\n        bool withdrawFromAave,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here\\n     * as it can be considered as an ever-increasing exchange rate\\n     * @return The liquidity index\\n     **/\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.\\n     * @param reward The reward to claim\\n     * @return uint256 Amount collected\\n     */\\n    function collectAndUpdateRewards(address reward) external returns (uint256);\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @dev Only callable by if sender is onBehalfOf or sender is approved claimer\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param receiver The address to receive the rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) external;\\n\\n    /**\\n     * @notice Claim rewards and send them to a receiver\\n     * @param receiver The address to receive the rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewards(address receiver, address[] memory rewards) external;\\n\\n    /**\\n     * @notice Claim rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewardsToSelf(address[] memory rewards) external;\\n\\n    /**\\n     * @notice Get the total claimable rewards of the contract.\\n     * @param reward The reward to claim\\n     * @return uint256 The current balance + pending rewards from the `_incentivesController`\\n     */\\n    function getTotalClaimableRewards(address reward) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total claimable rewards for a user in WAD\\n     * @param user The address of the user\\n     * @param reward The reward to claim\\n     * @return uint256 The claimable amount of rewards in WAD\\n     */\\n    function getClaimableRewards(address user, address reward) external view returns (uint256);\\n\\n    /**\\n     * @notice The unclaimed rewards for a user in WAD\\n     * @param user The address of the user\\n     * @param reward The reward to claim\\n     * @return uint256 The unclaimed amount of rewards in WAD\\n     */\\n    function getUnclaimedRewards(address user, address reward) external view returns (uint256);\\n\\n    /**\\n     * @notice The underlying asset reward index in RAY\\n     * @param reward The reward to claim\\n     * @return uint256 The underlying asset reward index in RAY\\n     */\\n    function getCurrentRewardsIndex(address reward) external view returns (uint256);\\n\\n    /**\\n     * @notice The aToken used inside the 4626 vault.\\n     * @return IERC20 The aToken IERC20.\\n     */\\n    function aToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice The IERC20s that are currently rewarded to addresses of the vault via LM on incentivescontroller.\\n     * @return IERC20 The IERC20s of the rewards.\\n     */\\n    function rewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Fetches all rewardTokens from the incentivecontroller and registers the missing ones.\\n     */\\n    function refreshRewardTokens() external;\\n\\n    /**\\n     * @notice Checks if the passed token is a registered reward.\\n     * @return bool signaling if token is a registered reward.\\n     */\\n    function isRegisteredRewardToken(address reward) external view returns (bool);\\n}\\n\\n/* solhint-enable max-line-length */\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/RayMathExplicitRounding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.10;\\n\\n/* solhint-disable max-line-length */\\n\\nenum Rounding {\\n    UP,\\n    DOWN\\n}\\n\\n/**\\n * Simplified version of RayMath that instead of half-up rounding does explicit rounding in a specified direction.\\n * This is needed to have a 4626 complient implementation, that always predictable rounds in favor of the vault / static a token.\\n */\\nlibrary RayMathExplicitRounding {\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function rayMulRoundDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return (a * b) / RAY;\\n    }\\n\\n    function rayMulRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return ((a * b) + RAY - 1) / RAY;\\n    }\\n\\n    function rayDivRoundDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * RAY) / b;\\n    }\\n\\n    function rayDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ((a * RAY) + b - 1) / b;\\n    }\\n\\n    function rayToWadRoundDown(uint256 a) internal pure returns (uint256) {\\n        return a / WAD_RAY_RATIO;\\n    }\\n}\\n\\n/* solhint-enable max-line-length */\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/StaticATokenErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.10;\\n\\nlibrary StaticATokenErrors {\\n    string public constant INVALID_OWNER = \\\"1\\\";\\n    string public constant INVALID_EXPIRATION = \\\"2\\\";\\n    string public constant INVALID_SIGNATURE = \\\"3\\\";\\n    string public constant INVALID_DEPOSITOR = \\\"4\\\";\\n    string public constant INVALID_RECIPIENT = \\\"5\\\";\\n    string public constant INVALID_CLAIMER = \\\"6\\\";\\n    string public constant ONLY_ONE_AMOUNT_FORMAT_ALLOWED = \\\"7\\\";\\n    string public constant INVALID_ZERO_AMOUNT = \\\"8\\\";\\n    string public constant REWARD_NOT_INITIALIZED = \\\"9\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/aave-v3/vendor/StaticATokenV3LM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/* solhint-disable */\\n\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { DataTypes, ReserveConfiguration } from \\\"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\\\";\\nimport { IScaledBalanceToken } from \\\"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol\\\";\\nimport { IRewardsController } from \\\"@aave/periphery-v3/contracts/rewards/interfaces/IRewardsController.sol\\\";\\nimport { WadRayMath } from \\\"@aave/core-v3/contracts/protocol/libraries/math/WadRayMath.sol\\\";\\nimport { MathUtils } from \\\"@aave/core-v3/contracts/protocol/libraries/math/MathUtils.sol\\\";\\n\\nimport { IStaticATokenV3LM } from \\\"./interfaces/IStaticATokenV3LM.sol\\\";\\nimport { IAToken } from \\\"./interfaces/IAToken.sol\\\";\\nimport { IInitializableStaticATokenLM } from \\\"./interfaces/IInitializableStaticATokenLM.sol\\\";\\nimport { StaticATokenErrors } from \\\"./StaticATokenErrors.sol\\\";\\nimport { RayMathExplicitRounding, Rounding } from \\\"./RayMathExplicitRounding.sol\\\";\\n\\nimport { IERC4626 } from \\\"./interfaces/IERC4626.sol\\\";\\nimport { ERC20 } from \\\"./ERC20.sol\\\";\\n\\nimport { IERC20Metadata, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IRewardable } from \\\"../../../../interfaces/IRewardable.sol\\\";\\n\\n/**\\n * @title StaticATokenLM\\n * @notice Wrapper smart contract that allows to deposit tokens on the Aave protocol and receive\\n * a token which balance doesn't increase automatically, but uses an ever-increasing exchange rate.\\n * It supports claiming liquidity mining rewards from the Aave system.\\n * @author BGD Labs\\n * From https://github.com/bgd-labs/static-a-token-v3/blob/b9f6f86b6d89c7407eeb0013af248d3c5f4d09c8/src/StaticATokenLM.sol\\n * Original source was formally verified\\n * https://github.com/bgd-labs/static-a-token-v3/blob/b9f6f86b6d89c7407eeb0013af248d3c5f4d09c8/audits/Formal_Verification_Report_staticAToken.pdf\\n * @dev This contract has been further modified by Reserve to include the claimRewards() function. This is the only change.\\n */\\ncontract StaticATokenV3LM is\\n    Initializable,\\n    ERC20(\\\"STATIC__aToken_IMPL\\\", \\\"STATIC__aToken_IMPL\\\", 18),\\n    IStaticATokenV3LM,\\n    IERC4626,\\n    IRewardable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using WadRayMath for uint256;\\n    using RayMathExplicitRounding for uint256;\\n\\n    bytes32 public constant METADEPOSIT_TYPEHASH =\\n        keccak256(\\n            \\\"Deposit(address depositor,address receiver,uint256 assets,uint16 referralCode,bool depositToAave,uint256 nonce,uint256 deadline,PermitParams permit)\\\"\\n        );\\n    bytes32 public constant METAWITHDRAWAL_TYPEHASH =\\n        keccak256(\\n            \\\"Withdraw(address owner,address receiver,uint256 shares,uint256 assets,bool withdrawFromAave,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    uint256 public constant STATIC__ATOKEN_LM_REVISION = 2;\\n\\n    IPool public immutable POOL;\\n    IRewardsController public immutable INCENTIVES_CONTROLLER;\\n\\n    IERC20 internal _aToken;\\n    address internal _aTokenUnderlying;\\n    address[] internal _rewardTokens;\\n    mapping(address => RewardIndexCache) internal _startIndex;\\n    mapping(address => mapping(address => UserRewardsData)) internal _userRewardsData;\\n\\n    constructor(IPool pool, IRewardsController rewardsController) {\\n        POOL = pool;\\n        INCENTIVES_CONTROLLER = rewardsController;\\n    }\\n\\n    ///@inheritdoc IInitializableStaticATokenLM\\n    function initialize(\\n        address newAToken,\\n        string calldata staticATokenName,\\n        string calldata staticATokenSymbol\\n    ) external initializer {\\n        require(IAToken(newAToken).POOL() == address(POOL));\\n        _aToken = IERC20(newAToken);\\n\\n        name = staticATokenName;\\n        symbol = staticATokenSymbol;\\n        decimals = IERC20Metadata(newAToken).decimals();\\n\\n        _aTokenUnderlying = IAToken(newAToken).UNDERLYING_ASSET_ADDRESS();\\n        IERC20(_aTokenUnderlying).safeApprove(address(POOL), type(uint256).max);\\n\\n        if (INCENTIVES_CONTROLLER != IRewardsController(address(0))) {\\n            refreshRewardTokens();\\n        }\\n\\n        emit InitializedStaticATokenLM(newAToken, staticATokenName, staticATokenSymbol);\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function refreshRewardTokens() public override {\\n        address[] memory rewards = INCENTIVES_CONTROLLER.getRewardsByAsset(address(_aToken));\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            _registerRewardToken(rewards[i]);\\n        }\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function isRegisteredRewardToken(address reward) public view override returns (bool) {\\n        return _startIndex[reward].isRegistered;\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function deposit(\\n        uint256 assets,\\n        address receiver,\\n        uint16 referralCode,\\n        bool depositToAave\\n    ) external returns (uint256) {\\n        (uint256 shares, ) = _deposit(msg.sender, receiver, 0, assets, referralCode, depositToAave);\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function metaDeposit(\\n        address depositor,\\n        address receiver,\\n        uint256 assets,\\n        uint16 referralCode,\\n        bool depositToAave,\\n        uint256 deadline,\\n        PermitParams calldata permit,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256) {\\n        require(depositor != address(0), StaticATokenErrors.INVALID_DEPOSITOR);\\n        //solium-disable-next-line\\n        require(deadline >= block.timestamp, StaticATokenErrors.INVALID_EXPIRATION);\\n        uint256 nonce = nonces[depositor];\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            METADEPOSIT_TYPEHASH,\\n                            depositor,\\n                            receiver,\\n                            assets,\\n                            referralCode,\\n                            depositToAave,\\n                            nonce,\\n                            deadline,\\n                            permit\\n                        )\\n                    )\\n                )\\n            );\\n            nonces[depositor] = nonce + 1;\\n            require(\\n                depositor == ecrecover(digest, sigParams.v, sigParams.r, sigParams.s),\\n                StaticATokenErrors.INVALID_SIGNATURE\\n            );\\n        }\\n        // assume if deadline 0 no permit was supplied\\n        if (permit.deadline != 0) {\\n            IERC20Permit(depositToAave ? address(_aTokenUnderlying) : address(_aToken)).permit(\\n                depositor,\\n                address(this),\\n                permit.value,\\n                permit.deadline,\\n                permit.v,\\n                permit.r,\\n                permit.s\\n            );\\n        }\\n        (uint256 shares, ) = _deposit(depositor, receiver, 0, assets, referralCode, depositToAave);\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function metaWithdraw(\\n        address owner,\\n        address receiver,\\n        uint256 shares,\\n        uint256 assets,\\n        bool withdrawFromAave,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256) {\\n        require(owner != address(0), StaticATokenErrors.INVALID_OWNER);\\n        //solium-disable-next-line\\n        require(deadline >= block.timestamp, StaticATokenErrors.INVALID_EXPIRATION);\\n        uint256 nonce = nonces[owner];\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            METAWITHDRAWAL_TYPEHASH,\\n                            owner,\\n                            receiver,\\n                            shares,\\n                            assets,\\n                            withdrawFromAave,\\n                            nonce,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n            nonces[owner] = nonce + 1;\\n            require(\\n                owner == ecrecover(digest, sigParams.v, sigParams.r, sigParams.s),\\n                StaticATokenErrors.INVALID_SIGNATURE\\n            );\\n        }\\n        return _withdraw(owner, receiver, shares, assets, withdrawFromAave);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Rounding.UP);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Rounding.UP);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function rate() public view virtual returns (uint256) {\\n        return POOL.getReserveNormalizedIncome(_aTokenUnderlying);\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function collectAndUpdateRewards(address reward) public returns (uint256) {\\n        if (reward == address(0)) {\\n            return 0;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(_aToken);\\n\\n        return INCENTIVES_CONTROLLER.claimRewards(assets, type(uint256).max, address(this), reward);\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) external {\\n        require(\\n            msg.sender == onBehalfOf || msg.sender == INCENTIVES_CONTROLLER.getClaimer(onBehalfOf),\\n            StaticATokenErrors.INVALID_CLAIMER\\n        );\\n        _claimRewardsOnBehalf(onBehalfOf, receiver, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function claimRewards(address receiver, address[] memory rewards) external {\\n        _claimRewardsOnBehalf(msg.sender, receiver, rewards);\\n    }\\n\\n    /// @dev Added by Reserve\\n    function claimRewards() external {\\n        address[] memory rewardsList = INCENTIVES_CONTROLLER.getRewardsList();\\n\\n        for (uint256 i = 0; i < rewardsList.length; i++) {\\n            address currentReward = rewardsList[i];\\n\\n            uint256 prevBalance = IERC20(currentReward).balanceOf(msg.sender);\\n\\n            address[] memory rewardsToCollect = new address[](1);\\n            rewardsToCollect[0] = currentReward;\\n            _claimRewardsOnBehalf(msg.sender, msg.sender, rewardsToCollect);\\n\\n            emit RewardsClaimed(\\n                IERC20(currentReward),\\n                IERC20(currentReward).balanceOf(msg.sender) - prevBalance\\n            );\\n        }\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function claimRewardsToSelf(address[] memory rewards) external {\\n        _claimRewardsOnBehalf(msg.sender, msg.sender, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function getCurrentRewardsIndex(address reward) public view returns (uint256) {\\n        if (address(reward) == address(0)) {\\n            return 0;\\n        }\\n        (, uint256 nextIndex) = INCENTIVES_CONTROLLER.getAssetIndex(address(_aToken), reward);\\n        return nextIndex;\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function getTotalClaimableRewards(address reward) external view returns (uint256) {\\n        if (reward == address(0)) {\\n            return 0;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(_aToken);\\n        uint256 freshRewards = INCENTIVES_CONTROLLER.getUserRewards(assets, address(this), reward);\\n        return IERC20(reward).balanceOf(address(this)) + freshRewards;\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function getClaimableRewards(address user, address reward) external view returns (uint256) {\\n        return _getClaimableRewards(user, reward, balanceOf[user], getCurrentRewardsIndex(reward));\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function getUnclaimedRewards(address user, address reward) external view returns (uint256) {\\n        return _userRewardsData[user][reward].unclaimedRewards;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function asset() external view returns (address) {\\n        return address(_aTokenUnderlying);\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function aToken() external view returns (IERC20) {\\n        return _aToken;\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function rewardTokens() external view returns (address[] memory) {\\n        return _rewardTokens;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function totalAssets() external view returns (uint256) {\\n        return _aToken.balanceOf(address(this));\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function convertToShares(uint256 assets) external view returns (uint256) {\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function convertToAssets(uint256 shares) external view returns (uint256) {\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxMint(address) public view virtual returns (uint256) {\\n        uint256 assets = maxDeposit(address(0));\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        uint256 shares = maxRedeem(owner);\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        address cachedATokenUnderlying = _aTokenUnderlying;\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(cachedATokenUnderlying);\\n\\n        // if paused or inactive users cannot withdraw underlying\\n        if (\\n            !ReserveConfiguration.getActive(reserveData.configuration) ||\\n            ReserveConfiguration.getPaused(reserveData.configuration)\\n        ) {\\n            return 0;\\n        }\\n\\n        // otherwise users can withdraw up to the available amount\\n        uint256 underlyingTokenBalanceInShares = _convertToShares(\\n            IERC20(cachedATokenUnderlying).balanceOf(reserveData.aTokenAddress),\\n            Rounding.DOWN\\n        );\\n        uint256 cachedUserBalance = balanceOf[owner];\\n        return\\n            underlyingTokenBalanceInShares >= cachedUserBalance\\n                ? cachedUserBalance\\n                : underlyingTokenBalanceInShares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(_aTokenUnderlying);\\n\\n        // if inactive, paused or frozen users cannot deposit underlying\\n        if (\\n            !ReserveConfiguration.getActive(reserveData.configuration) ||\\n            ReserveConfiguration.getPaused(reserveData.configuration) ||\\n            ReserveConfiguration.getFrozen(reserveData.configuration)\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 supplyCap = ReserveConfiguration.getSupplyCap(reserveData.configuration) *\\n            (10**ReserveConfiguration.getDecimals(reserveData.configuration));\\n        // if no supply cap deposit is unlimited\\n        if (supplyCap == 0) return type(uint256).max;\\n        // return remaining supply cap margin\\n        uint256 currentSupply = (IAToken(reserveData.aTokenAddress).scaledTotalSupply() +\\n            reserveData.accruedToTreasury)\\n        .rayMulRoundUp(_getNormalizedIncome(reserveData));\\n        return currentSupply > supplyCap ? 0 : supplyCap - currentSupply;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function deposit(uint256 assets, address receiver) external virtual returns (uint256) {\\n        (uint256 shares, ) = _deposit(msg.sender, receiver, 0, assets, 0, true);\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function mint(uint256 shares, address receiver) external virtual returns (uint256) {\\n        (, uint256 assets) = _deposit(msg.sender, receiver, shares, 0, 0, true);\\n\\n        return assets;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256) {\\n        (uint256 shares, ) = _withdraw(owner, receiver, 0, assets, true);\\n\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256) {\\n        (, uint256 assets) = _withdraw(owner, receiver, shares, 0, true);\\n\\n        return assets;\\n    }\\n\\n    ///@inheritdoc IStaticATokenV3LM\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner,\\n        bool withdrawFromAave\\n    ) external virtual returns (uint256, uint256) {\\n        return _withdraw(owner, receiver, shares, 0, withdrawFromAave);\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        address receiver,\\n        uint256 _shares,\\n        uint256 _assets,\\n        uint16 referralCode,\\n        bool depositToAave\\n    ) internal returns (uint256, uint256) {\\n        require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\\n        require(_shares == 0 || _assets == 0, StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED);\\n\\n        uint256 assets = _assets;\\n        uint256 shares = _shares;\\n        if (shares > 0) {\\n            if (depositToAave) {\\n                require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n            }\\n            assets = previewMint(shares);\\n        } else {\\n            if (depositToAave) {\\n                require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n            }\\n            shares = previewDeposit(assets);\\n        }\\n        require(shares != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n\\n        if (depositToAave) {\\n            address cachedATokenUnderlying = _aTokenUnderlying;\\n            IERC20(cachedATokenUnderlying).safeTransferFrom(depositor, address(this), assets);\\n            POOL.deposit(cachedATokenUnderlying, assets, address(this), referralCode);\\n        } else {\\n            _aToken.safeTransferFrom(depositor, address(this), assets);\\n        }\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(depositor, receiver, assets, shares);\\n\\n        return (shares, assets);\\n    }\\n\\n    function _withdraw(\\n        address owner,\\n        address receiver,\\n        uint256 _shares,\\n        uint256 _assets,\\n        bool withdrawFromAave\\n    ) internal returns (uint256, uint256) {\\n        require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\\n        require(_shares == 0 || _assets == 0, StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED);\\n        require(_shares != _assets, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n\\n        uint256 assets = _assets;\\n        uint256 shares = _shares;\\n\\n        if (shares > 0) {\\n            if (withdrawFromAave) {\\n                require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n            }\\n            assets = previewRedeem(shares);\\n        } else {\\n            if (withdrawFromAave) {\\n                require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n            }\\n            shares = previewWithdraw(assets);\\n        }\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        if (withdrawFromAave) {\\n            POOL.withdraw(_aTokenUnderlying, assets, receiver);\\n        } else {\\n            _aToken.safeTransfer(receiver, assets);\\n        }\\n\\n        return (shares, assets);\\n    }\\n\\n    /**\\n     * @notice Updates rewards for senders and receiver in a transfer (not updating rewards for address(0))\\n     * @param from The address of the sender of tokens\\n     * @param to The address of the receiver of tokens\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal override {\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            address rewardToken = address(_rewardTokens[i]);\\n            uint256 rewardsIndex = getCurrentRewardsIndex(rewardToken);\\n            if (from != address(0)) {\\n                _updateUser(from, rewardsIndex, rewardToken);\\n            }\\n            if (to != address(0) && from != to) {\\n                _updateUser(to, rewardsIndex, rewardToken);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adding the pending rewards to the unclaimed for specific user and updating user index\\n     * @param user The address of the user to update\\n     * @param currentRewardsIndex The current rewardIndex\\n     * @param rewardToken The address of the reward token\\n     */\\n    function _updateUser(\\n        address user,\\n        uint256 currentRewardsIndex,\\n        address rewardToken\\n    ) internal {\\n        uint256 balance = balanceOf[user];\\n        if (balance > 0) {\\n            _userRewardsData[user][rewardToken].unclaimedRewards = _getClaimableRewards(\\n                user,\\n                rewardToken,\\n                balance,\\n                currentRewardsIndex\\n            ).toUint128();\\n        }\\n        _userRewardsData[user][rewardToken].rewardsIndexOnLastInteraction = currentRewardsIndex\\n        .toUint128();\\n    }\\n\\n    /**\\n     * @notice Compute the pending in WAD. Pending is the amount to add (not yet unclaimed) rewards in WAD.\\n     * @param balance The balance of the user\\n     * @param rewardsIndexOnLastInteraction The index which was on the last interaction of the user\\n     * @param currentRewardsIndex The current rewards index in the system\\n     * @param assetUnit One unit of asset (10**decimals)\\n     * @return The amount of pending rewards in WAD\\n     */\\n    function _getPendingRewards(\\n        uint256 balance,\\n        uint256 rewardsIndexOnLastInteraction,\\n        uint256 currentRewardsIndex,\\n        uint256 assetUnit\\n    ) internal pure returns (uint256) {\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        return (balance * (currentRewardsIndex - rewardsIndexOnLastInteraction)) / assetUnit;\\n    }\\n\\n    /**\\n     * @notice Compute the claimable rewards for a user\\n     * @param user The address of the user\\n     * @param reward The address of the reward\\n     * @param balance The balance of the user in WAD\\n     * @param currentRewardsIndex The current rewards index\\n     * @return The total rewards that can be claimed by the user (if `fresh` flag true, after updating rewards)\\n     */\\n    function _getClaimableRewards(\\n        address user,\\n        address reward,\\n        uint256 balance,\\n        uint256 currentRewardsIndex\\n    ) internal view returns (uint256) {\\n        RewardIndexCache memory rewardsIndexCache = _startIndex[reward];\\n        require(rewardsIndexCache.isRegistered == true, StaticATokenErrors.REWARD_NOT_INITIALIZED);\\n        UserRewardsData memory currentUserRewardsData = _userRewardsData[user][reward];\\n        uint256 assetUnit = 10**decimals;\\n        return\\n            currentUserRewardsData.unclaimedRewards +\\n            _getPendingRewards(\\n                balance,\\n                currentUserRewardsData.rewardsIndexOnLastInteraction == 0\\n                    ? rewardsIndexCache.lastUpdatedIndex\\n                    : currentUserRewardsData.rewardsIndexOnLastInteraction,\\n                currentRewardsIndex,\\n                assetUnit\\n            );\\n    }\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param rewards The addresses of the rewards\\n     * @param receiver The address to receive the rewards\\n     */\\n    function _claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) internal {\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            if (address(rewards[i]) == address(0)) {\\n                continue;\\n            }\\n            uint256 currentRewardsIndex = getCurrentRewardsIndex(rewards[i]);\\n            uint256 balance = balanceOf[onBehalfOf];\\n            uint256 userReward = _getClaimableRewards(\\n                onBehalfOf,\\n                rewards[i],\\n                balance,\\n                currentRewardsIndex\\n            );\\n            uint256 totalRewardTokenBalance = IERC20(rewards[i]).balanceOf(address(this));\\n            uint256 unclaimedReward = 0;\\n\\n            if (userReward > totalRewardTokenBalance) {\\n                totalRewardTokenBalance += collectAndUpdateRewards(address(rewards[i]));\\n            }\\n\\n            if (userReward > totalRewardTokenBalance) {\\n                unclaimedReward = userReward - totalRewardTokenBalance;\\n                userReward = totalRewardTokenBalance;\\n            }\\n            if (userReward > 0) {\\n                _userRewardsData[onBehalfOf][rewards[i]].unclaimedRewards = unclaimedReward\\n                .toUint128();\\n                _userRewardsData[onBehalfOf][rewards[i]]\\n                .rewardsIndexOnLastInteraction = currentRewardsIndex.toUint128();\\n                IERC20(rewards[i]).safeTransfer(receiver, userReward);\\n            }\\n        }\\n    }\\n\\n    function _convertToShares(uint256 assets, Rounding rounding) internal view returns (uint256) {\\n        if (rounding == Rounding.UP) return assets.rayDivRoundUp(rate());\\n        return assets.rayDivRoundDown(rate());\\n    }\\n\\n    function _convertToAssets(uint256 shares, Rounding rounding) internal view returns (uint256) {\\n        if (rounding == Rounding.UP) return shares.rayMulRoundUp(rate());\\n        return shares.rayMulRoundDown(rate());\\n    }\\n\\n    /**\\n     * @notice Initializes a new rewardToken\\n     * @param reward The reward token to be registered\\n     */\\n    function _registerRewardToken(address reward) internal {\\n        if (isRegisteredRewardToken(reward)) return;\\n        uint256 startIndex = getCurrentRewardsIndex(reward);\\n\\n        _rewardTokens.push(reward);\\n        _startIndex[reward] = RewardIndexCache(true, startIndex.toUint240());\\n\\n        emit RewardTokenRegistered(reward, startIndex);\\n    }\\n\\n    /**\\n     * @notice Returns the ongoing normalized income for the reserve.\\n     * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\\n     * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n     * @param reserve The reserve object\\n     * @return The normalized income, expressed in ray\\n     */\\n    function _getNormalizedIncome(DataTypes.ReserveData memory reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n        //solium-disable-next-line\\n        if (timestamp == block.timestamp) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return reserve.liquidityIndex;\\n        } else {\\n            return\\n                MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\n                    reserve.liquidityIndex\\n                );\\n        }\\n    }\\n}\\n\\n/* solhint-enable */\\n\"\r\n    },\r\n    \"contracts/plugins/assets/AppreciatingFiatCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/IAsset.sol\\\";\\nimport \\\"../../libraries/Fixed.sol\\\";\\nimport \\\"./FiatCollateral.sol\\\";\\nimport \\\"./Asset.sol\\\";\\nimport \\\"./OracleLib.sol\\\";\\n\\n/**\\n * @title AppreciatingFiatCollateral\\n * Collateral that may need revenue hiding to become truly \\\"up only\\\"\\n *\\n * For: {tok} != {ref}, {ref} != {target}, {target} == {UoA}\\n * Inheritors _must_ implement _underlyingRefPerTok()\\n * Can be easily extended by (optionally) re-implementing:\\n *   - tryPrice()\\n *   - refPerTok()\\n *   - targetPerRef()\\n *   - claimRewards()\\n * Should not have to re-implement any other methods.\\n *\\n * Can intentionally disable default checks by setting config.defaultThreshold to 0\\n * Can intentionally do no revenue hiding by setting revenueHiding to 0\\n */\\nabstract contract AppreciatingFiatCollateral is FiatCollateral {\\n    using FixLib for uint192;\\n    using OracleLib for AggregatorV3Interface;\\n\\n    // revenueShowing = FIX_ONE.minus(revenueHiding)\\n    uint192 public immutable revenueShowing; // {1} The maximum fraction of refPerTok to show\\n\\n    // does not become nonzero until after first refresh()\\n    uint192 public exposedReferencePrice; // {ref/tok} max ref price observed, sub revenue hiding\\n\\n    /// @param config.chainlinkFeed Feed units: {UoA/ref}\\n    /// @param revenueHiding {1} A value like 1e-6 that represents the maximum refPerTok to hide\\n    constructor(CollateralConfig memory config, uint192 revenueHiding) FiatCollateral(config) {\\n        require(revenueHiding < FIX_ONE, \\\"revenueHiding out of range\\\");\\n        revenueShowing = FIX_ONE.minus(revenueHiding);\\n    }\\n\\n    /// Can revert, used by other contract functions in order to catch errors\\n    /// Should not return FIX_MAX for low\\n    /// Should only return FIX_MAX for high if low is 0\\n    /// @dev Override this when pricing is more complicated than just a single oracle\\n    /// @return low {UoA/tok} The low price estimate\\n    /// @return high {UoA/tok} The high price estimate\\n    /// @return pegPrice {target/ref} The actual price observed in the peg\\n    function tryPrice()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint192 low,\\n            uint192 high,\\n            uint192 pegPrice\\n        )\\n    {\\n        // {target/ref} = {UoA/ref} / {UoA/target} (1)\\n        pegPrice = chainlinkFeed.price(oracleTimeout);\\n\\n        // {UoA/tok} = {target/ref} * {ref/tok} * {UoA/target} (1)\\n        uint192 p = pegPrice.mul(_underlyingRefPerTok());\\n        uint192 err = p.mul(oracleError, CEIL);\\n\\n        low = p - err;\\n        high = p + err;\\n        // assert(low <= high); obviously true just by inspection\\n    }\\n\\n    /// Should not revert\\n    /// Refresh exchange rates and update default status.\\n    /// @dev Should not need to override: can handle collateral with variable refPerTok()\\n    function refresh() public virtual override {\\n        CollateralStatus oldStatus = status();\\n\\n        // Check for hard default\\n        // must happen before tryPrice() call since `refPerTok()` returns a stored value\\n\\n        // revenue hiding: do not DISABLE if drawdown is small\\n        uint192 underlyingRefPerTok = _underlyingRefPerTok();\\n\\n        // {ref/tok} = {ref/tok} * {1}\\n        uint192 hiddenReferencePrice = underlyingRefPerTok.mul(revenueShowing);\\n\\n        // uint192(<) is equivalent to Fix.lt\\n        if (underlyingRefPerTok < exposedReferencePrice) {\\n            exposedReferencePrice = hiddenReferencePrice;\\n            markStatus(CollateralStatus.DISABLED);\\n        } else if (hiddenReferencePrice > exposedReferencePrice) {\\n            exposedReferencePrice = hiddenReferencePrice;\\n        }\\n\\n        // Check for soft default + save prices\\n        try this.tryPrice() returns (uint192 low, uint192 high, uint192 pegPrice) {\\n            // {UoA/tok}, {UoA/tok}, {target/ref}\\n            // (0, 0) is a valid price; (0, FIX_MAX) is unpriced\\n\\n            // Save prices if priced\\n            if (high < FIX_MAX) {\\n                savedLowPrice = low;\\n                savedHighPrice = high;\\n                lastSave = uint48(block.timestamp);\\n            } else {\\n                // must be unpriced\\n                assert(low == 0);\\n            }\\n\\n            // If the price is below the default-threshold price, default eventually\\n            // uint192(+/-) is the same as Fix.plus/minus\\n            if (pegPrice < pegBottom || pegPrice > pegTop || low == 0) {\\n                markStatus(CollateralStatus.IFFY);\\n            } else {\\n                markStatus(CollateralStatus.SOUND);\\n            }\\n        } catch (bytes memory errData) {\\n            // see: docs/solidity-style.md#Catching-Empty-Data\\n            if (errData.length == 0) revert(); // solhint-disable-line reason-string\\n            markStatus(CollateralStatus.IFFY);\\n        }\\n\\n        CollateralStatus newStatus = status();\\n        if (oldStatus != newStatus) {\\n            emit CollateralStatusChanged(oldStatus, newStatus);\\n        }\\n    }\\n\\n    /// @return {ref/tok} Exposed quantity of whole reference units per whole collateral tokens\\n    function refPerTok() public view virtual override returns (uint192) {\\n        return exposedReferencePrice;\\n    }\\n\\n    /// Should update in inheritors\\n    /// @return {ref/tok} Actual quantity of whole reference units per whole collateral tokens\\n    function _underlyingRefPerTok() internal view virtual returns (uint192);\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/Asset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/IAsset.sol\\\";\\nimport \\\"./OracleLib.sol\\\";\\nimport \\\"./VersionedAsset.sol\\\";\\n\\ncontract Asset is IAsset, VersionedAsset {\\n    using FixLib for uint192;\\n    using OracleLib for AggregatorV3Interface;\\n\\n    AggregatorV3Interface public immutable chainlinkFeed; // {UoA/tok}\\n\\n    IERC20Metadata public immutable erc20;\\n\\n    uint8 public immutable erc20Decimals;\\n\\n    uint192 public immutable override maxTradeVolume; // {UoA}\\n\\n    uint48 public immutable oracleTimeout; // {s}\\n\\n    uint192 public immutable oracleError; // {1}\\n\\n    // === Lot price ===\\n\\n    uint48 public immutable priceTimeout; // {s} The period over which `savedHighPrice` decays to 0\\n\\n    uint192 public savedLowPrice; // {UoA/tok} The low price of the token during the last update\\n\\n    uint192 public savedHighPrice; // {UoA/tok} The high price of the token during the last update\\n\\n    uint48 public lastSave; // {s} The timestamp when prices were last saved\\n\\n    /// @param priceTimeout_ {s} The number of seconds over which savedHighPrice decays to 0\\n    /// @param chainlinkFeed_ Feed units: {UoA/tok}\\n    /// @param oracleError_ {1} The % the oracle feed can be off by\\n    /// @param maxTradeVolume_ {UoA} The max trade volume, in UoA\\n    /// @param oracleTimeout_ {s} The number of seconds until a oracle value becomes invalid\\n    /// @dev oracleTimeout_ is also used as the timeout value in lotPrice(), should be highest of\\n    ///      all assets' oracleTimeout in a collateral if there are multiple oracles\\n    constructor(\\n        uint48 priceTimeout_,\\n        AggregatorV3Interface chainlinkFeed_,\\n        uint192 oracleError_,\\n        IERC20Metadata erc20_,\\n        uint192 maxTradeVolume_,\\n        uint48 oracleTimeout_\\n    ) {\\n        require(priceTimeout_ > 0, \\\"price timeout zero\\\");\\n        require(address(chainlinkFeed_) != address(0), \\\"missing chainlink feed\\\");\\n        require(oracleError_ > 0 && oracleError_ < FIX_ONE, \\\"oracle error out of range\\\");\\n        require(address(erc20_) != address(0), \\\"missing erc20\\\");\\n        require(maxTradeVolume_ > 0, \\\"invalid max trade volume\\\");\\n        require(oracleTimeout_ > 0, \\\"oracleTimeout zero\\\");\\n        priceTimeout = priceTimeout_;\\n        chainlinkFeed = chainlinkFeed_;\\n        oracleError = oracleError_;\\n        erc20 = erc20_;\\n        erc20Decimals = erc20.decimals();\\n        maxTradeVolume = maxTradeVolume_;\\n        oracleTimeout = oracleTimeout_;\\n    }\\n\\n    /// Can revert, used by other contract functions in order to catch errors\\n    /// Should not return FIX_MAX for low\\n    /// Should only return FIX_MAX for high if low is 0\\n    /// @dev The third (unused) variable is only here for compatibility with Collateral\\n    /// @return low {UoA/tok} The low price estimate\\n    /// @return high {UoA/tok} The high price estimate\\n    function tryPrice()\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint192 low,\\n            uint192 high,\\n            uint192\\n        )\\n    {\\n        uint192 p = chainlinkFeed.price(oracleTimeout); // {UoA/tok}\\n        uint192 err = p.mul(oracleError, CEIL);\\n        // assert(low <= high); obviously true just by inspection\\n        return (p - err, p + err, 0);\\n    }\\n\\n    /// Should not revert\\n    /// Refresh saved prices\\n    function refresh() public virtual override {\\n        try this.tryPrice() returns (uint192 low, uint192 high, uint192) {\\n            // {UoA/tok}, {UoA/tok}\\n            // (0, 0) is a valid price; (0, FIX_MAX) is unpriced\\n\\n            // Save prices if priced\\n            if (high < FIX_MAX) {\\n                savedLowPrice = low;\\n                savedHighPrice = high;\\n                lastSave = uint48(block.timestamp);\\n            } else {\\n                // must be unpriced\\n                assert(low == 0);\\n            }\\n        } catch (bytes memory errData) {\\n            // see: docs/solidity-style.md#Catching-Empty-Data\\n            if (errData.length == 0) revert(); // solhint-disable-line reason-string\\n        }\\n    }\\n\\n    /// Should not revert\\n    /// @dev Should be general enough to not need to be overridden\\n    /// @return {UoA/tok} The lower end of the price estimate\\n    /// @return {UoA/tok} The upper end of the price estimate\\n    function price() public view virtual returns (uint192, uint192) {\\n        try this.tryPrice() returns (uint192 low, uint192 high, uint192) {\\n            assert(low <= high);\\n            return (low, high);\\n        } catch (bytes memory errData) {\\n            // see: docs/solidity-style.md#Catching-Empty-Data\\n            if (errData.length == 0) revert(); // solhint-disable-line reason-string\\n            return (0, FIX_MAX);\\n        }\\n    }\\n\\n    /// Should not revert\\n    /// lotLow should be nonzero when the asset might be worth selling\\n    /// @dev Should be general enough to not need to be overridden\\n    /// @return lotLow {UoA/tok} The lower end of the lot price estimate\\n    /// @return lotHigh {UoA/tok} The upper end of the lot price estimate\\n    function lotPrice() external view virtual returns (uint192 lotLow, uint192 lotHigh) {\\n        try this.tryPrice() returns (uint192 low, uint192 high, uint192) {\\n            // if the price feed is still functioning, use that\\n            lotLow = low;\\n            lotHigh = high;\\n        } catch (bytes memory errData) {\\n            // see: docs/solidity-style.md#Catching-Empty-Data\\n            if (errData.length == 0) revert(); // solhint-disable-line reason-string\\n\\n            // if the price feed is broken, use a decayed historical value\\n\\n            uint48 delta = uint48(block.timestamp) - lastSave; // {s}\\n            if (delta <= oracleTimeout) {\\n                lotLow = savedLowPrice;\\n                lotHigh = savedHighPrice;\\n            } else if (delta >= oracleTimeout + priceTimeout) {\\n                return (0, 0); // no price after full timeout\\n            } else {\\n                // oracleTimeout <= delta <= oracleTimeout + priceTimeout\\n\\n                // {1} = {s} / {s}\\n                uint192 lotMultiplier = divuu(oracleTimeout + priceTimeout - delta, priceTimeout);\\n\\n                // {UoA/tok} = {UoA/tok} * {1}\\n                lotLow = savedLowPrice.mul(lotMultiplier);\\n                lotHigh = savedHighPrice.mul(lotMultiplier);\\n            }\\n        }\\n        assert(lotLow <= lotHigh);\\n    }\\n\\n    /// @return {tok} The balance of the ERC20 in whole tokens\\n    function bal(address account) external view virtual returns (uint192) {\\n        return shiftl_toFix(erc20.balanceOf(account), -int8(erc20Decimals));\\n    }\\n\\n    /// @return If the asset is an instance of ICollateral or not\\n    function isCollateral() external pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    // solhint-disable no-empty-blocks\\n\\n    /// Claim rewards earned by holding a balance of the ERC20 token\\n    /// DEPRECATED: claimRewards() will be removed from all assets and collateral plugins\\n    function claimRewards() external virtual {}\\n\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/FiatCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/IAsset.sol\\\";\\nimport \\\"../../libraries/Fixed.sol\\\";\\nimport \\\"./Asset.sol\\\";\\nimport \\\"./OracleLib.sol\\\";\\n\\nuint48 constant MAX_DELAY_UNTIL_DEFAULT = 1209600; // {s} 2 weeks\\n\\nstruct CollateralConfig {\\n    uint48 priceTimeout; // {s} The number of seconds over which saved prices decay\\n    AggregatorV3Interface chainlinkFeed; // Feed units: {target/ref}\\n    uint192 oracleError; // {1} The % the oracle feed can be off by\\n    IERC20Metadata erc20; // The ERC20 of the collateral token\\n    uint192 maxTradeVolume; // {UoA} The max trade volume, in UoA\\n    uint48 oracleTimeout; // {s} The number of seconds until a oracle value becomes invalid\\n    bytes32 targetName; // The bytes32 representation of the target name\\n    uint192 defaultThreshold; // {1} A value like 0.05 that represents a deviation tolerance\\n    // set defaultThreshold to zero to create SelfReferentialCollateral\\n    uint48 delayUntilDefault; // {s} The number of seconds an oracle can mulfunction\\n}\\n\\n/**\\n * @title FiatCollateral\\n * Parent class for all collateral. Can be extended to support appreciating collateral\\n *\\n * For: {tok} == {ref}, {ref} != {target}, {target} == {UoA}\\n * Can be easily extended by (optionally) re-implementing:\\n *   - tryPrice()\\n *   - refPerTok()\\n *   - targetPerRef()\\n *   - claimRewards()\\n * If you have appreciating collateral, then you should use AppreciatingFiatCollateral or\\n * override refresh() yourself.\\n *\\n * Can intentionally disable default checks by setting config.defaultThreshold to 0\\n */\\ncontract FiatCollateral is ICollateral, Asset {\\n    using FixLib for uint192;\\n    using OracleLib for AggregatorV3Interface;\\n\\n    // Default Status:\\n    // _whenDefault == NEVER: no risk of default (initial value)\\n    // _whenDefault > block.timestamp: delayed default may occur as soon as block.timestamp.\\n    //                In this case, the asset may recover, reachiving _whenDefault == NEVER.\\n    // _whenDefault <= block.timestamp: default has already happened (permanently)\\n    uint48 private constant NEVER = type(uint48).max;\\n    uint48 private _whenDefault = NEVER;\\n\\n    uint48 public immutable delayUntilDefault; // {s} e.g 86400\\n\\n    // targetName: The canonical name of this collateral's target unit.\\n    bytes32 public immutable targetName;\\n\\n    uint192 public immutable pegBottom; // {target/ref} The bottom of the peg\\n\\n    uint192 public immutable pegTop; // {target/ref} The top of the peg\\n\\n    /// @param config.chainlinkFeed Feed units: {UoA/ref}\\n    constructor(CollateralConfig memory config)\\n        Asset(\\n            config.priceTimeout,\\n            config.chainlinkFeed,\\n            config.oracleError,\\n            config.erc20,\\n            config.maxTradeVolume,\\n            config.oracleTimeout\\n        )\\n    {\\n        require(config.targetName != bytes32(0), \\\"targetName missing\\\");\\n        if (config.defaultThreshold > 0) {\\n            require(config.delayUntilDefault > 0, \\\"delayUntilDefault zero\\\");\\n        }\\n        require(config.delayUntilDefault <= 1209600, \\\"delayUntilDefault too long\\\");\\n\\n        targetName = config.targetName;\\n        delayUntilDefault = config.delayUntilDefault;\\n\\n        // Cache constants\\n        uint192 peg = targetPerRef(); // {target/ref}\\n\\n        // {target/ref} = {target/ref} * {1}\\n        uint192 delta = peg.mul(config.defaultThreshold);\\n        pegBottom = peg - delta;\\n        pegTop = peg + delta;\\n    }\\n\\n    /// Can revert, used by other contract functions in order to catch errors\\n    /// Should not return FIX_MAX for low\\n    /// Should only return FIX_MAX for high if low is 0\\n    /// @dev Override this when pricing is more complicated than just a single oracle\\n    /// @return low {UoA/tok} The low price estimate\\n    /// @return high {UoA/tok} The high price estimate\\n    /// @return pegPrice {target/ref} The actual price observed in the peg\\n    function tryPrice()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint192 low,\\n            uint192 high,\\n            uint192 pegPrice\\n        )\\n    {\\n        // {target/ref} = {UoA/ref} / {UoA/target} (1)\\n        pegPrice = chainlinkFeed.price(oracleTimeout);\\n\\n        // {target/ref} = {target/ref} * {1}\\n        uint192 err = pegPrice.mul(oracleError, CEIL);\\n\\n        low = pegPrice - err;\\n        high = pegPrice + err;\\n        // assert(low <= high); obviously true just by inspection\\n    }\\n\\n    /// Should not revert\\n    /// Refresh exchange rates and update default status.\\n    /// @dev May need to override: limited to handling collateral with refPerTok() = 1\\n    function refresh() public virtual override(Asset, IAsset) {\\n        CollateralStatus oldStatus = status();\\n\\n        // Check for soft default + save lotPrice\\n        try this.tryPrice() returns (uint192 low, uint192 high, uint192 pegPrice) {\\n            // {UoA/tok}, {UoA/tok}, {target/ref}\\n            // (0, 0) is a valid price; (0, FIX_MAX) is unpriced\\n\\n            // Save prices if priced\\n            if (high < FIX_MAX) {\\n                savedLowPrice = low;\\n                savedHighPrice = high;\\n                lastSave = uint48(block.timestamp);\\n            } else {\\n                // must be unpriced\\n                assert(low == 0);\\n            }\\n\\n            // If the price is below the default-threshold price, default eventually\\n            // uint192(+/-) is the same as Fix.plus/minus\\n            if (pegPrice < pegBottom || pegPrice > pegTop || low == 0) {\\n                markStatus(CollateralStatus.IFFY);\\n            } else {\\n                markStatus(CollateralStatus.SOUND);\\n            }\\n        } catch (bytes memory errData) {\\n            // see: docs/solidity-style.md#Catching-Empty-Data\\n            if (errData.length == 0) revert(); // solhint-disable-line reason-string\\n            markStatus(CollateralStatus.IFFY);\\n        }\\n\\n        CollateralStatus newStatus = status();\\n        if (oldStatus != newStatus) {\\n            emit CollateralStatusChanged(oldStatus, newStatus);\\n        }\\n    }\\n\\n    /// @return The collateral's status\\n    function status() public view returns (CollateralStatus) {\\n        if (_whenDefault == NEVER) {\\n            return CollateralStatus.SOUND;\\n        } else if (_whenDefault > block.timestamp) {\\n            return CollateralStatus.IFFY;\\n        } else {\\n            return CollateralStatus.DISABLED;\\n        }\\n    }\\n\\n    // === Helpers for child classes ===\\n\\n    function markStatus(CollateralStatus status_) internal {\\n        // untestable:\\n        //      All calls to markStatus happen exclusively if the collateral is not defaulted\\n        if (_whenDefault <= block.timestamp) return; // prevent DISABLED -> SOUND/IFFY\\n\\n        if (status_ == CollateralStatus.SOUND) {\\n            _whenDefault = NEVER;\\n        } else if (status_ == CollateralStatus.IFFY) {\\n            uint256 sum = block.timestamp + uint256(delayUntilDefault);\\n            // untestable:\\n            //      constructor enforces max length on delayUntilDefault\\n            if (sum >= NEVER) _whenDefault = NEVER;\\n            else if (sum < _whenDefault) _whenDefault = uint48(sum);\\n            // else: no change to _whenDefault\\n            // untested:\\n            //      explicit `if` to check DISABLED. else branch will never be hit\\n        } else if (status_ == CollateralStatus.DISABLED) {\\n            _whenDefault = uint48(block.timestamp);\\n        }\\n    }\\n\\n    function whenDefault() external view returns (uint256) {\\n        return _whenDefault;\\n    }\\n\\n    // === End child helpers ===\\n\\n    /// @return {ref/tok} Quantity of whole reference units per whole collateral tokens\\n    function refPerTok() public view virtual returns (uint192) {\\n        return FIX_ONE;\\n    }\\n\\n    /// @return {target/ref} Quantity of whole target units per whole reference unit in the peg\\n    function targetPerRef() public view virtual returns (uint192) {\\n        return FIX_ONE;\\n    }\\n\\n    /// @return If the asset is an instance of ICollateral or not\\n    function isCollateral() external pure virtual override(Asset, IAsset) returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/OracleLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../../libraries/Fixed.sol\\\";\\n\\nerror StalePrice();\\nerror ZeroPrice();\\n\\ninterface EACAggregatorProxy {\\n    function aggregator() external view returns (address);\\n}\\n\\n/// Used by asset plugins to price their collateral\\nlibrary OracleLib {\\n    /// @dev Use for nested calls that should revert when there is a problem\\n    /// @param timeout The number of seconds after which oracle values should be considered stale\\n    /// @return {UoA/tok}\\n    function price(AggregatorV3Interface chainlinkFeed, uint48 timeout)\\n        internal\\n        view\\n        returns (uint192)\\n    {\\n        try chainlinkFeed.latestRoundData() returns (\\n            uint80 roundId,\\n            int256 p,\\n            uint256,\\n            uint256 updateTime,\\n            uint80 answeredInRound\\n        ) {\\n            if (updateTime == 0 || answeredInRound < roundId) {\\n                revert StalePrice();\\n            }\\n\\n            // Downcast is safe: uint256(-) reverts on underflow; block.timestamp assumed < 2^48\\n            uint48 secondsSince = uint48(block.timestamp - updateTime);\\n            if (secondsSince > timeout) revert StalePrice();\\n\\n            if (p == 0) revert ZeroPrice();\\n\\n            // {UoA/tok}\\n            return shiftl_toFix(uint256(p), -int8(chainlinkFeed.decimals()));\\n        } catch (bytes memory errData) {\\n            // Check if the aggregator was not set: if so, the chainlink feed has been deprecated\\n            // and a _specific_ error needs to be raised in order to avoid looking like OOG\\n            if (errData.length == 0) {\\n                if (EACAggregatorProxy(address(chainlinkFeed)).aggregator() == address(0)) {\\n                    revert StalePrice();\\n                }\\n                // solhint-disable-next-line reason-string\\n                revert();\\n            }\\n\\n            // Otherwise, preserve the error bytes\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                revert(add(32, errData), mload(errData))\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/VersionedAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"../../interfaces/IVersioned.sol\\\";\\n\\n// This value should be updated on each release\\nstring constant ASSET_VERSION = \\\"3.0.0\\\";\\n\\n/**\\n * @title VersionedAsset\\n * @notice A mix-in to track semantic versioning uniformly across asset plugin contracts.\\n */\\nabstract contract VersionedAsset is IVersioned {\\n    function version() public pure virtual override returns (string memory) {\\n        return ASSET_VERSION;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"priceTimeout\",\"type\":\"uint48\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"chainlinkFeed\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"oracleError\",\"type\":\"uint192\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"maxTradeVolume\",\"type\":\"uint192\"},{\"internalType\":\"uint48\",\"name\":\"oracleTimeout\",\"type\":\"uint48\"},{\"internalType\":\"bytes32\",\"name\":\"targetName\",\"type\":\"bytes32\"},{\"internalType\":\"uint192\",\"name\":\"defaultThreshold\",\"type\":\"uint192\"},{\"internalType\":\"uint48\",\"name\":\"delayUntilDefault\",\"type\":\"uint48\"}],\"internalType\":\"struct CollateralConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint192\",\"name\":\"revenueHiding\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"StalePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UIntOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CollateralStatus\",\"name\":\"oldStatus\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum CollateralStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"CollateralStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayUntilDefault\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exposedReferencePrice\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSave\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotPrice\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"lotLow\",\"type\":\"uint192\"},{\"internalType\":\"uint192\",\"name\":\"lotHigh\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradeVolume\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleError\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleTimeout\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegBottom\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegTop\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"},{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceTimeout\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPerTok\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueShowing\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savedHighPrice\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savedLowPrice\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum CollateralStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetPerRef\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryPrice\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"low\",\"type\":\"uint192\"},{\"internalType\":\"uint192\",\"name\":\"high\",\"type\":\"uint192\"},{\"internalType\":\"uint192\",\"name\":\"pegPrice\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whenDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AaveV3FiatCollateral", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000093a800000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f60000000000000000000000000000000000000000000000000008e1bc9bf0400000000000000000000000000063e12c3b2dbcaef1835bb99ac1fdb0ebe1be69be00000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000151bc5553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000e8d4a51000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}