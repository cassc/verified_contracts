{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Presale/Presale.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @author Presale Contract for NFTFN tokens not a general purpose contract\\nimport { IERC20Metadata } from\\n  \\\"../../lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from\\n  \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"../../lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { PresaleData } from \\\"./PresaleLib.sol\\\";\\nimport { AggregatorV3Interface } from \\\"../Interfaces/AggregatorV3.sol\\\";\\n\\n/// @notice Simple Presale Contract Implementation\\n/// @author NFTFN (https://github.com/BLIV-CLUB/NFTFN-token/blob/feat/incorporate_changes/src/Presale/Presale.sol)\\n/// @dev Note:\\n/// Presale Invariants:\\n///  - Stages have fixed token allocation and USD Rates\\n///  - Refund Begins if a stage stagnates for 30 days\\n///  - Token Vesting is for 270 days with 10% unlock on the day the presale is concluded.\\ncontract Presale is PresaleData, Ownable {\\n  using SafeERC20 for IERC20Metadata;\\n\\n  //////////////////// ERRORS ///////////////////////////\\n\\n  /// 0x399a417a\\n  error PresaleAlreadyActivated();\\n\\n  error InvalidBalance();\\n\\n  error PresaleNotActive();\\n\\n  error InvalidParams();\\n\\n  error MaxDepositLimitReached();\\n\\n  error PresaleStillActive();\\n\\n  error InsufficientTokenBalance();\\n\\n  error NoTokenToClaim();\\n\\n  error InvalidAccess();\\n\\n  error SoftLimitHit();\\n\\n  error RefundNotActive();\\n\\n  error PresaleSoftLimitNotReached();\\n\\n  error PresaleTimeLimitNotReached();\\n\\n  error InvalidToken();\\n\\n  error PresaleStageNotActive();\\n\\n  error PresaleStageStillActive();\\n\\n  error LowLevelCallFailed();\\n\\n  error InvalidPriceFeedValue();\\n  ////////////////// PUBLIC VARIABLES //////////////////\\n\\n  /// Treasury wallet where funds will be transferred\\n  address payable public treasuryWallet;\\n\\n  /// NFTFN token address\\n  IERC20Metadata public nftfnToken;\\n\\n  /// Aggregator V3 Interface\\n  AggregatorV3Interface public ethDataFeed;\\n\\n  /// Current Stage of the presale\\n  uint256 public currentStage = 1;\\n\\n  /// The timestamp since which vesting is calcualted and started\\n  uint256 public vestingStartTimestamp;\\n\\n  /// The total sum of usd raised in USD\\n  uint256 public totalUsdRaised = 0;\\n\\n  /// Flag indicating whether the sale has finished or not\\n  bool public presaleEnded = false;\\n\\n  /// The total vesting period\\n  uint256 public constant vestingTimePeriod = 270 days; // 9 Months Vesting Period\\n\\n  /// the total tokens allocated for the presale\\n  uint256 public totalTokensAllocated;\\n\\n  /// $1M USDT\\n  uint256 public immutable maxDepositLimit = 1_000_000 * usdtMultiplier;\\n\\n  /// Per Transaction Limits for USDT\\n  uint256 public immutable minTransactionLimit = 50 * usdtMultiplier;\\n  /// $50 USDT\\n\\n  /// The soft limit in usd on the presale\\n  uint256 public immutable usdSoftLimit = 1_000_000 * usdtMultiplier;\\n  /// $ 2M Soft Limit\\n\\n  uint256 public constant stalePriceDelay = 60 * 60; // 3600 seconds \\n\\n  /// A mapping for user and their deposit data\\n  mapping(address => UserData) public userDeposits;\\n\\n  /// Presale Params Data\\n  mapping(uint256 => PresaleParams) public presaleParamsData;\\n\\n  /// Accepted Tokens\\n  mapping(address => bool) public acceptedTokens;\\n\\n  /// @notice Constructor to init the contract.\\n  /// @param _treasuryWallet the wallet where all funds are routed to\\n  /// @param _nftfnToken NFTFN token address\\n  /// @param usdRates USD Rate for the Presale 1 stage\\n  /// @param tokenAllocation 1st Stage Token Allocation\\n  /// @param ethPriceFeed  ETH Price Feed Address\\n  /// @param tokens List of USD Pegged tokens that can be used to buy in tokens\\n  constructor(\\n    address payable _treasuryWallet,\\n    address _nftfnToken,\\n    uint256 usdRates,\\n    uint256 tokenAllocation,\\n    address ethPriceFeed,\\n    address[] memory tokens\\n  ) Ownable(msg.sender) {\\n    treasuryWallet = _treasuryWallet;\\n    nftfnToken = IERC20Metadata(_nftfnToken);\\n    ethDataFeed = AggregatorV3Interface(ethPriceFeed);\\n    presaleParamsData[currentStage] = PresaleParams({\\n      startTime: uint256(0),\\n      endTime: uint256(0),\\n      usdRaised: uint256(0),\\n      tokensAllocated: tokenAllocation,\\n      tokensBought: uint256(0),\\n      usdRate: usdRates,\\n      isActive: false\\n    });\\n    totalTokensAllocated += tokenAllocation;\\n    uint256 i = 0;\\n    for (i; i < tokens.length; ++i) {\\n      acceptedTokens[tokens[i]] = true;\\n    }\\n  }\\n\\n  /// @notice Function to initiate Presale can only be called once only for the first stage\\n  function initPresale() public onlyOwner {\\n    if (presaleParamsData[currentStage].isActive) {\\n      revert PresaleAlreadyActivated();\\n    }\\n\\n    if (nftfnToken.balanceOf(address(this)) != totalTokensAllocated) {\\n      revert InsufficientTokenBalance();\\n    }\\n\\n    presaleParamsData[currentStage].startTime = block.timestamp;\\n    presaleParamsData[currentStage].isActive = true;\\n\\n    emit PresaleActivated(block.timestamp, currentStage);\\n  }\\n\\n  /// @notice Function to Add Params for the Next Token Sale Stage\\n  /// @param tokenAllocation The amount of tokens to be sold in the next stage\\n  /// @param usdRate The usd rate for the tokens being sold in the next stage\\n  function initNextPresaleStage(uint256 tokenAllocation, uint256 usdRate) public onlyOwner {\\n    if (presaleEnded) revert PresaleNotActive();\\n\\n    if (tokenAllocation == uint256(0) || usdRate == uint256(0)) {\\n      revert InvalidParams();\\n    }\\n\\n    if (presaleParamsData[currentStage].isActive) {\\n      revert PresaleStageStillActive();\\n    }\\n\\n    totalTokensAllocated += tokenAllocation;\\n\\n    if ((nftfnToken.balanceOf(address(this)) < totalTokensAllocated)) {\\n      revert InvalidBalance();\\n    }\\n\\n    ++currentStage;\\n    presaleParamsData[currentStage] = PresaleParams({\\n      startTime: block.timestamp,\\n      endTime: uint256(0),\\n      usdRaised: uint256(0),\\n      tokensAllocated: tokenAllocation,\\n      tokensBought: uint256(0),\\n      usdRate: usdRate,\\n      isActive: true\\n    });\\n\\n    emit PresaleStageActivated(currentStage, tokenAllocation, usdRate, block.timestamp);\\n  }\\n\\n  /// @notice Function to Buy tokens using Eth\\n  /// Use msg.value and a chainlink\\n  function buyTokensEth() public payable returns (uint256) {\\n    if (presaleEnded) revert PresaleNotActive();\\n\\n    uint256 ethUsdRate = getLatestPrice();\\n    /// 18 decimals * 18 decimals * 6 decimals / 36 decimals\\n    uint256 usdAmount = (msg.value * ethUsdRate) / 10 ** 30;\\n\\n    if (usdAmount < minTransactionLimit || usdAmount > maxDepositLimit) {\\n      revert InvalidBalance();\\n    }\\n\\n    PresaleParams memory currentSaleParams = presaleParamsData[currentStage];\\n\\n    if (!currentSaleParams.isActive) revert PresaleStageNotActive();\\n\\n    UserData storage userData = userDeposits[msg.sender];\\n\\n    uint256 tokensBought = calculateTokensAllocated(usdAmount);\\n\\n    if (currentSaleParams.tokensBought + tokensBought > currentSaleParams.tokensAllocated) {\\n      currentSaleParams.isActive = false;\\n      currentSaleParams.endTime = block.timestamp;\\n      uint256 usdAmountUsed = 0;\\n      unchecked {\\n        tokensBought = currentSaleParams.tokensAllocated - currentSaleParams.tokensBought;\\n\\n        usdAmountUsed = (currentSaleParams.usdRate * tokensBought) / 1 ether;\\n\\n        totalUsdRaised += usdAmountUsed;\\n        currentSaleParams.tokensBought += tokensBought;\\n        currentSaleParams.usdRaised += usdAmountUsed;\\n        /// Add Tokens Bought to the users data structure\\n        userData.usdInvested += usdAmountUsed;\\n        userData.tokensAllocated += tokensBought;\\n      }\\n\\n      if (userData.usdInvested > maxDepositLimit) {\\n        revert MaxDepositLimitReached();\\n      }\\n\\n      presaleParamsData[currentStage] = currentSaleParams;\\n\\n      (bool isSuccess,) =\\n        payable(msg.sender).call{ value: ((usdAmount - usdAmountUsed) * 10 ** 30) / ethUsdRate }(\\\"\\\");\\n\\n      if (!isSuccess) revert LowLevelCallFailed();\\n\\n      emit TokensBought(msg.sender, usdAmountUsed, currentStage, tokensBought);\\n\\n      emit PresaleStageFinished(currentStage, block.timestamp);\\n      return tokensBought;\\n    }\\n    userData.usdInvested += usdAmount;\\n    if (userData.usdInvested > maxDepositLimit) {\\n      revert MaxDepositLimitReached();\\n    }\\n\\n    totalUsdRaised += usdAmount;\\n    currentSaleParams.tokensBought += tokensBought;\\n    currentSaleParams.usdRaised += usdAmount;\\n    userData.tokensAllocated += tokensBought;\\n\\n    presaleParamsData[currentStage] = currentSaleParams;\\n\\n    emit TokensBought(msg.sender, usdAmount, currentStage, tokensBought);\\n\\n    return tokensBought;\\n  }\\n\\n  /// @notice Function to buy tokens using USDT\\n  /// @param usdtAmount The Amount of usdtTokens used to buy tokens\\n  /// @param token The token to use while buying\\n  /// @return The amount of tokens bought/allocated\\n  function buyTokens(uint256 usdtAmount, address token) external returns (uint256) {\\n    if (presaleEnded) revert PresaleNotActive();\\n\\n    if (usdtAmount < minTransactionLimit || usdtAmount > maxDepositLimit) {\\n      revert InvalidBalance();\\n    }\\n\\n    if (!acceptedTokens[token]) revert InvalidToken();\\n\\n    PresaleParams memory currentSaleParams = presaleParamsData[currentStage];\\n\\n    if (!currentSaleParams.isActive) revert PresaleStageNotActive();\\n\\n    UserData storage userData = userDeposits[msg.sender];\\n\\n    uint256 tokensBought = calculateTokensAllocated(usdtAmount);\\n\\n    /// Calculate total tokens to be allocated and currently Allocated tokens + tokens < totalTokens in this level\\n    /// Sale is exhausted buy the remaining ones at current price and shift to new sale\\n    if (currentSaleParams.tokensBought + tokensBought >= currentSaleParams.tokensAllocated) {\\n      currentSaleParams.isActive = false;\\n      currentSaleParams.endTime = block.timestamp;\\n\\n      unchecked {\\n        tokensBought = currentSaleParams.tokensAllocated - currentSaleParams.tokensBought;\\n\\n        usdtAmount = (currentSaleParams.usdRate * tokensBought) / 1 ether;\\n\\n        totalUsdRaised += usdtAmount;\\n        currentSaleParams.tokensBought += tokensBought;\\n        currentSaleParams.usdRaised += usdtAmount;\\n        /// Add Tokens Bought to the users data structure\\n        userData.usdInvested += usdtAmount;\\n        userData.tokensAllocated += tokensBought;\\n      }\\n\\n      if (userData.usdInvested > maxDepositLimit) {\\n        revert MaxDepositLimitReached();\\n      }\\n      presaleParamsData[currentStage] = currentSaleParams;\\n\\n      IERC20Metadata(token).safeTransferFrom(msg.sender, address(this), usdtAmount);\\n\\n      emit TokensBought(msg.sender, usdtAmount, currentStage, tokensBought);\\n\\n      emit PresaleStageFinished(currentStage, block.timestamp);\\n      return tokensBought;\\n    }\\n\\n    userData.usdInvested += usdtAmount;\\n    if (userData.usdInvested > maxDepositLimit) {\\n      revert MaxDepositLimitReached();\\n    }\\n\\n    totalUsdRaised += usdtAmount;\\n    currentSaleParams.tokensBought += tokensBought;\\n    currentSaleParams.usdRaised += usdtAmount;\\n    userData.tokensAllocated += tokensBought;\\n\\n    presaleParamsData[currentStage] = currentSaleParams;\\n\\n    IERC20Metadata(token).safeTransferFrom(msg.sender, address(this), usdtAmount);\\n\\n    emit TokensBought(msg.sender, usdtAmount, currentStage, tokensBought);\\n\\n    return tokensBought;\\n  }\\n\\n  /// @notice Manual function to call and end the Presale starting the vesting period\\n  function endPreSale() public onlyOwner {\\n    if (!presaleParamsData[currentStage].isActive) {\\n      revert PresaleNotActive();\\n    }\\n\\n    presaleEnded = true;\\n\\n    vestingStartTimestamp = block.timestamp;\\n    emit PresaleFinishied(block.timestamp);\\n  }\\n\\n  //// @notice Claim Tokens according to the vesting timeperiod\\n  //// @param user The user to claim the tokens for\\n  function claimTokens(address user) public {\\n    if (user != msg.sender) revert InvalidAccess();\\n\\n    if (totalUsdRaised < usdSoftLimit) revert PresaleSoftLimitNotReached();\\n\\n    uint256 tokens = getClaimableTokens(user);\\n\\n    if (tokens == 0) revert NoTokenToClaim();\\n\\n    userDeposits[user].tokensClaimed += tokens;\\n\\n    nftfnToken.safeTransfer(user, tokens);\\n\\n    emit TokensClaimed(user, tokens, block.timestamp);\\n  }\\n\\n  /// @notice Get Claimiable Tokens After presale has ended\\n  /// @param user The user to get the claimable tokens for\\n  /// @return tokens The amount of tokens that can be claimed\\n  function getClaimableTokens(address user) public view returns (uint256 tokens) {\\n    if (!presaleEnded || vestingStartTimestamp == uint256(0)) return 0;\\n\\n    UserData memory userData = userDeposits[user];\\n\\n    /// Formulae 10% at TGE then linear unlock over 270 days\\n    uint256 timeSinceUnlock = block.timestamp - vestingStartTimestamp;\\n\\n    tokens = ((userData.tokensAllocated - (userData.tokensAllocated / 10)) * timeSinceUnlock)\\n      / vestingTimePeriod;\\n\\n    tokens += userData.tokensAllocated / 10;\\n    tokens -= userData.tokensClaimed;\\n    return tokens;\\n  }\\n\\n  /// @notice function to RefundTokens Allocation is case a soft limit is failed to be touched\\n  /// @param user The user who is trying to claim his refund\\n  /// @param token The token in which to refund the user\\n  function refundTokenAllocation(address user, address token) public {\\n    /// Check user Refunding Token \\n    if (user != msg.sender) revert InvalidAccess();\\n\\n    /// Check that Soft Limit has not been reached\\n    if (totalUsdRaised >= usdSoftLimit) revert SoftLimitHit();\\n\\n    /// Revert If Token is Invalid\\n    if (!acceptedTokens[token]) revert InvalidToken();\\n\\n\\n    /// Revert if the stage has not been active for 30 days or the stage has no start time i.e. it was never started\\n    if (\\n      presaleParamsData[currentStage].startTime == 0\\n        || presaleParamsData[currentStage].startTime + (30 * 86400) > block.timestamp\\n    ) revert RefundNotActive();\\n\\n    UserData storage userData = userDeposits[user];\\n\\n    \\n\\n    uint256 usdInvested = userData.usdInvested;\\n\\n    /// Check that the user has an allocation that he is asking a refund for\\n    if (usdInvested == uint256(0)) revert InvalidBalance();\\n\\n    /// If the amount need to refund is greated than the amount currently held in the stage\\n\\n    /// Remove his invested and tokens allocated\\n    totalUsdRaised -= usdInvested;\\n    presaleParamsData[currentStage].usdRaised -= usdInvested;\\n    presaleParamsData[currentStage].tokensAllocated += userData.tokensAllocated;\\n    userData.tokensAllocated = 0;\\n    userData.usdInvested = 0;\\n\\n    IERC20Metadata(token).safeTransfer(user, usdInvested);\\n\\n    emit RefundClaimed(user, block.timestamp);\\n  }\\n\\n  /// @notice Function to cash out tokesn to team wallet\\n  /// @param token The token to be forwarded\\n  /// @param value The amount of tokens to be forwarded\\n  function forwardFunds(address token, uint256 value) public onlyOwner {\\n    if(token == address(nftfnToken)) revert InvalidToken();\\n    IERC20Metadata(token).safeTransfer(treasuryWallet, value);\\n    emit FundsTransferred(token, value);\\n  }\\n\\n  /// @notice Function to transfer ETH out of the contract\\n  /// @param amount of ETH to be transferred\\n  function forwardFundsEth(uint256 amount) public onlyOwner {\\n    if (address(this).balance < amount) revert InvalidBalance();\\n    (bool isSuccess,) = treasuryWallet.call{ value: amount }(\\\"\\\");\\n    if (!isSuccess) revert LowLevelCallFailed();\\n\\n    emit FundsTransferredEth(amount);\\n  }\\n\\n  /// @notice Function to refund unallocated NFTFN tokens in case the sale does not hit required\\n  /// bounds\\n  /// @param tokens The amount of tokens to be refunded\\n  function getUnallocatedTokens(uint256 tokens) public onlyOwner {\\n    if (!presaleEnded) revert PresaleStillActive();\\n\\n    nftfnToken.safeTransfer(treasuryWallet, tokens);\\n  }\\n\\n  /// @notice view function to get presale params for a specific stage\\n  /// @param stage The stage for which the params are needed\\n  /// @return PresaleParams Structure with all the data required\\n  function getPresaleParamsData(uint256 stage) public view returns (PresaleParams memory) {\\n    return presaleParamsData[stage];\\n  }\\n\\n  /// @notice View Functio to get current sale Params data\\n  /// @return PresaleParams for the current ongoing stage of the sale\\n  function getCurrentPresaleParamsData() public view returns (PresaleParams memory) {\\n    return presaleParamsData[currentStage];\\n  }\\n\\n  /// @notice view function to calculate token allocation at current stage investing in eth\\n  /// @param ethAmount of ETH deposited\\n  function calculateTokenAllocationEth(uint256 ethAmount) public view returns (uint256) {\\n    uint256 usdAmount = (ethAmount * getLatestPrice()) / 10 ** 30;\\n    return calculateTokensAllocated(usdAmount);\\n  }\\n\\n  /// @notice view function to calculate token allocation at current stage after investing a particular amount of usd\\n  /// @param usdAmount Amount of usd being deposited\\n  /// @return Amount of nftfn tokens that will be allocated\\n  /// @dev Does not take into account whether the number of tokens to be allocated are available in the given stage or not\\n  function calculateTokensAllocated(uint256 usdAmount) public view returns (uint256) {\\n    uint256 usdRate = presaleParamsData[currentStage].usdRate;\\n    unchecked {\\n      return (usdAmount / usdRate) * 1 ether;\\n    }\\n  }\\n\\n  /// @notice Helper function to calculate Tokens allocation at different stages\\n  /// @param usdAmount Amount of usd being Deposited (in 10 ** 6 multiples)\\n  /// @param stage The stage to calculate the values on\\n  /// @return Amount of nftfn tokens that will be allocated on that stage\\n  function calculateTokensAllocated(uint256 usdAmount, uint256 stage) public view returns (uint256) {\\n    uint256 usdRate = presaleParamsData[stage].usdRate;\\n    if (usdRate == 0) return 0;\\n    unchecked {\\n      return (usdAmount / usdRate) * 1 ether;\\n    }\\n  }\\n\\n  /// @notice Chainlink Helper function to get latest price for ETH/USD Pair\\n  /// @return ETH/USD price in 10 ** 18 decimals.\\n  function getLatestPrice() public view returns (uint256) {\\n    /// This gives answer in 8 decimals\\n    ( uint80 roundId, int256 answer,,uint256 updatedAt,uint80 answeredInRound) = ethDataFeed.latestRoundData();\\n    if (answer < 0) revert InvalidPriceFeedValue();\\n    if( answeredInRound > roundId) revert InvalidPriceFeedValue();\\n    if(block.timestamp > updatedAt + stalePriceDelay) revert InvalidPriceFeedValue();\\n    return uint256(answer * (10 ** 10)); // Conversion to 18 decimals\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\r\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\r\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev An operation with an ERC20 token failed.\\r\\n     */\\r\\n    error SafeERC20FailedOperation(address token);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failed `decreaseAllowance` request.\\r\\n     */\\r\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\r\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n        forceApprove(token, spender, oldAllowance + value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\r\\n     * value, non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\r\\n        unchecked {\\r\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\r\\n            if (currentAllowance < requestedDecrease) {\\r\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\r\\n            }\\r\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\r\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\r\\n     */\\r\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\r\\n\\r\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\r\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\r\\n            _callOptionalReturn(token, approvalCall);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data);\\r\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\r\\n            revert SafeERC20FailedOperation(address(token));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     *\\r\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\r\\n     */\\r\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\r\\n        // and not revert is the subcall reverts.\\r\\n\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Presale/PresaleLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract PresaleData {\\n  struct PresaleParams {\\n    uint256 startTime; // Presale Start Time\\n    uint256 endTime; // Presale End Time\\n    /// Total Tokens Allocated for Presale\\n    uint256 tokensAllocated;\\n    /// Total Usd Raised\\n    uint256 usdRaised;\\n    /// Total Tokens Sold in Presale\\n    uint256 tokensBought;\\n    /// Usd rate for the Presale the rate should be in USDT decimals on ETH\\n    uint256 usdRate;\\n    bool isActive;\\n  }\\n  /// Is Presale active\\n\\n  struct UserData {\\n    uint256 usdInvested;\\n    /// Usd Invested by user\\n    uint256 tokensAllocated;\\n    /// Total tokens allocated to user\\n    uint256 tokensClaimed;\\n  }\\n  /// Total tokens Claimed by the user\\n\\n  //// USDT DECIMALS ON ETHEREUM\\n  /// USING ADDRESS 0xdAC17F958D2ee523a2206206994597C13D831ec7\\n  uint256 usdtMultiplier = 10 ** 6;\\n\\n  ////////////////////// EVENTS ///////////////////////////\\n\\n  /// @notice Funds Transferred Event\\n  /// @param token the Token being transferred\\n  /// @param value the Amount of token being transferred\\n  event FundsTransferred(address token, uint256 value);\\n\\n  /// @notice Eth Transferred Event\\n  /// @param value The Amount of Eth transferred\\n  event FundsTransferredEth(uint256 value);\\n\\n  /// @notice Tokens Bought event\\n  /// @param user User Buying the tokens\\n  /// @param usdValue Amount of Usd Used\\n  /// @param stage Current Stage\\n  /// @param tokens Amount of tokens allocated\\n  event TokensBought(address user, uint256 usdValue, uint256 stage, uint256 tokens);\\n\\n  /// @notice Tokens Refunded Event\\n  /// @param user User Buying tokens\\n  /// @param value Amount of tokens bought\\n  event TokensRefunded(address user, uint256 value);\\n\\n  /// @notice Presale Activated Event\\n  /// @param timestamp Timestamp on which Presale was activated\\n  /// @param stage The stage which has been activated\\n  event PresaleActivated(uint256 timestamp, uint256 stage);\\n\\n  /// @notice Presale Finished Event\\n  /// @param timestamp the timestamp at which the presale was ended\\n  event PresaleFinishied(uint256 timestamp);\\n\\n  /// @notice Tokens Claimed Event\\n  //// @param user The user which is claiming the token\\n  //// @param amount The amount of tokens being claimed\\n  //// @param timestamp The timestamp on which the claim was made\\n  event TokensClaimed(address user, uint256 amount, uint256 timestamp);\\n\\n  /// @notice Refund Claimed Event\\n  /// @param user The user claiming the refund\\n  /// @param timestamp The timestamp at which the refund was claimed\\n  event RefundClaimed(address user, uint256 timestamp);\\n\\n  /// @notice Presale Stage Finished Event\\n  /// @param stage The stage which was finished\\n  /// @param timestamp The timestamp on which the stage was finished\\n  event PresaleStageFinished(uint256 stage, uint256 timestamp);\\n\\n  /// @notice New Presale Stage Activated\\n  /// @param stage The stage which has been started\\n  /// @param tokenAllocation Number of tokens allocated in the new stage\\n  /// @param usdRate Usd Rate for the current stage of tokens\\n  /// @param timestamp Timestamp for the activation\\n  event PresaleStageActivated(\\n    uint256 stage, uint256 tokenAllocation, uint256 usdRate, uint256 timestamp\\n  );\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/AggregatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n *\\r\\n * ==== Security Considerations\\r\\n *\\r\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\r\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\r\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\r\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\r\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\r\\n * generally recommended is:\\r\\n *\\r\\n * ```solidity\\r\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\r\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\r\\n *     doThing(..., value);\\r\\n * }\\r\\n *\\r\\n * function doThing(..., uint256 value) public {\\r\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\r\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\r\\n * {SafeERC20-safeTransferFrom}).\\r\\n *\\r\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\r\\n * contracts should have entry points that don't rely on permit.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     *\\r\\n     * CAUTION: See Security Considerations above.\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\r\\n     */\\r\\n    error AddressInsufficientBalance(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev There's no code at `target` (it is not a contract).\\r\\n     */\\r\\n    error AddressEmptyCode(address target);\\r\\n\\r\\n    /**\\r\\n     * @dev A call to an address target failed. The target may have reverted.\\r\\n     */\\r\\n    error FailedInnerCall();\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        if (address(this).balance < amount) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert FailedInnerCall();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\r\\n     * up by this function (like regular Solidity function calls). However, if\\r\\n     * the call reverted with no returned reason, this function reverts with a\\r\\n     * {FailedInnerCall} error.\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        if (address(this).balance < value) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\r\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\r\\n     * unsuccessful call.\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            // only check if target is a contract if the call was successful and the return data is empty\\r\\n            // otherwise we already know that it was a contract\\r\\n            if (returndata.length == 0 && target.code.length == 0) {\\r\\n                revert AddressEmptyCode(target);\\r\\n            }\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\r\\n     * revert reason or with a default {FailedInnerCall} error.\\r\\n     */\\r\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\r\\n     */\\r\\n    function _revert(bytes memory returndata) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert FailedInnerCall();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solady/=lib/solady/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftfnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdRates\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceFeedValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowLevelCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxDepositLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokenToClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleAlreadyActivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleSoftLimitNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleStageNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleStageStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleTimeLimitNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoftLimitHit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferredEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"PresaleActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleFinishied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleStageActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleStageFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensRefunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAllocationEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokensAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"calculateTokensAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDataFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"forwardFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forwardFundsEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPresaleParamsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct PresaleData.PresaleParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"getPresaleParamsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct PresaleData.PresaleParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"getUnallocatedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRate\",\"type\":\"uint256\"}],\"name\":\"initNextPresaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftfnToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presaleParamsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"refundTokenAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePriceDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdSoftLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000feea8f4779767623f3c01c8eb796d1f8af1967b0000000000000000000000009a64977ebf739dff35ed4281a4b5e833bfdb131400000000000000000000000000000000000000000000000000000000000061a8000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}