{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Splitter {\r\n    struct Recipient {\r\n        address payable addr;\r\n        uint share;\r\n    }\r\n\r\n    Recipient[] public recipients;\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function addRecipient(address payable _addr, uint _share) public onlyOwner {\r\n        recipients.push(Recipient({addr: _addr, share: _share}));\r\n    }\r\n\r\n    function removeRecipient(uint index) public onlyOwner {\r\n        require(index < recipients.length, \"Index out of bounds\");\r\n        \r\n        recipients[index] = recipients[recipients.length - 1];\r\n        recipients.pop();\r\n    }\r\n\r\n    function setRecipient(uint index, address payable _addr, uint _share) public onlyOwner {\r\n        require(index < recipients.length, \"Index out of bounds\");\r\n        recipients[index].addr = _addr;\r\n        recipients[index].share = _share;\r\n    }\r\n\r\n    function distribute() internal {\r\n        uint totalReceived = address(this).balance;\r\n        uint totalShares = 0;\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            totalShares += recipients[i].share;\r\n        }\r\n\r\n        require(totalShares == 100, \"Total shares must equal 100\");\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            uint amount = totalReceived * recipients[i].share / totalShares;\r\n            (bool sent, ) = recipients[i].addr.call{value: amount}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n        }\r\n    }\r\n\r\n    function transferAll(address payable _to) public onlyOwner {\r\n        (bool sent, ) = _to.call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    // Automatically distribute received ETH\r\n    receive() external payable {\r\n        distribute();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Splitter", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://28a539259a9134245af2160371447fa5cc50f8f6c000c4becc1b6d79bd6db2dc"}