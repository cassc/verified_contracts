{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/meme/BabyBald.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary SafeMath {\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      uint256 c = a + b;\\n      if (c < a) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b > a) return (false, 0);\\n      return (true, a - b);\\n    }\\n  }\\n\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a / b);\\n    }\\n  }\\n\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a % b);\\n    }\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a + b;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a * b;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a % b;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b <= a, errorMessage);\\n      return a - b;\\n    }\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b > 0, errorMessage);\\n      return a / b;\\n    }\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    unchecked {\\n      require(b > 0, errorMessage);\\n      return a % b;\\n    }\\n  }\\n}\\n\\ninterface IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function name() external view returns (string memory);\\n\\n  function getOwner() external view returns (address);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(\\n    address _owner,\\n    address spender\\n  ) external view returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nabstract contract Ownable {\\n  address internal owner;\\n  // Contract manager has the ability to change some settings regardless of ownership.\\n  address internal manager;\\n\\n  constructor(address _owner) {\\n    owner = _owner;\\n    manager = _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(isOwner(msg.sender), \\\"!OWNER\\\");\\n    _;\\n  }\\n\\n  modifier onlyManager() {\\n    require(isManager(msg.sender), \\\"!MANAGER\\\");\\n    _;\\n  }\\n\\n  function isOwner(address account) public view returns (bool) {\\n    return account == owner;\\n  }\\n\\n  function isManager(address account) public view returns (bool) {\\n    return account == manager;\\n  }\\n\\n  function transferOwnership(address payable adr) external onlyOwner {\\n    owner = adr;\\n    emit OwnershipTransferred(adr);\\n  }\\n\\n  event OwnershipTransferred(address owner);\\n}\\n\\ninterface IFactory {\\n  function createPair(\\n    address tokenA,\\n    address tokenB\\n  ) external returns (address pair);\\n\\n  function getPair(\\n    address tokenA,\\n    address tokenB\\n  ) external view returns (address pair);\\n}\\n\\ninterface IRouter {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\\ncontract BabyBald is IERC20, Ownable {\\n  // **************** Global parameters ****************\\n  using SafeMath for uint256;\\n  string private constant _name = \\\"BabyBald.obamainushibacoin\\\";\\n  string private constant _symbol = \\\"BabyBald.inu\\\";\\n  address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n  uint8 private constant _decimals = 9;\\n  uint256 private _totalSupply = 453000000000 * (10 ** _decimals);\\n  mapping(address => uint256) _balances;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  mapping(address => bool) private isFeeExempt;\\n\\n  IRouter router;\\n  address public pair;\\n  bool private tradingAllowed = false;\\n  bool private swapping;\\n\\n  // **************** Token settings ****************\\n  uint256 public _maxSellAmount = (_totalSupply * 200) / 10000;\\n  uint256 public _maxWalletToken = (_totalSupply * 2000) / 10000;\\n\\n  // **************** Fees ****************\\n\\n  // ---------- Settings ------------------\\n  uint256 private buyFee = 200;\\n  uint256 private sellFee = 200;\\n  uint256 private transferFee = 0;\\n  uint256 private feeDenominator = 10000;\\n\\n  // ---------- Distribution ------------------\\n  uint256 private marketingFee = 500;\\n  uint256 private stakingFee = 500;\\n\\n  // ---------- Recipients ------------------\\n  address internal staking_receiver = DEAD;\\n  address internal marketing_receiver = DEAD;\\n\\n  // **************** Main Logic ****************\\n  constructor() Ownable(msg.sender) {\\n    IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address _pair = IFactory(_router.factory()).createPair(\\n      address(this),\\n      _router.WETH()\\n    );\\n    router = _router;\\n    pair = _pair;\\n    isFeeExempt[address(this)] = true;\\n    isFeeExempt[marketing_receiver] = true;\\n    isFeeExempt[staking_receiver] = true;\\n    isFeeExempt[msg.sender] = true;\\n    _balances[msg.sender] = _totalSupply;\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\n  }\\n\\n  receive() external payable {}\\n\\n  function name() public pure returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public pure returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public pure returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function startTrading() external onlyOwner {\\n    tradingAllowed = true;\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));\\n  }\\n\\n  function getOwner() external view override returns (address) {\\n    return owner;\\n  }\\n\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function _approve(address owner, address spender, uint256 amount) private {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function shouldTakeFee(\\n    address sender,\\n    address recipient\\n  ) internal view returns (bool) {\\n    return !isFeeExempt[sender] && !isFeeExempt[recipient];\\n  }\\n\\n  function getTotalFee(\\n    address sender,\\n    address recipient\\n  ) internal view returns (uint256) {\\n    if (recipient == pair) {\\n      return sellFee;\\n    }\\n    if (sender == pair) {\\n      return buyFee;\\n    }\\n    return transferFee;\\n  }\\n\\n  function takeFee(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal returns (uint256) {\\n    if (getTotalFee(sender, recipient) > 0) {\\n      uint256 feeAmount = amount.div(feeDenominator).mul(\\n        getTotalFee(sender, recipient)\\n      );\\n      uint256 totalFee = marketingFee.add(stakingFee);\\n\\n      if (marketingFee > 0) {\\n        _balances[marketing_receiver] = _balances[marketing_receiver].add(\\n          feeAmount.mul(marketingFee).div(totalFee)\\n        );\\n        emit Transfer(\\n          sender,\\n          marketing_receiver,\\n          feeAmount.mul(marketingFee).div(totalFee)\\n        );\\n      }\\n      if (stakingFee > 0) {\\n        _balances[staking_receiver] = _balances[staking_receiver].add(\\n          feeAmount.mul(stakingFee).div(totalFee)\\n        );\\n        emit Transfer(\\n          sender,\\n          staking_receiver,\\n          feeAmount.mul(stakingFee).div(totalFee)\\n        );\\n      }\\n      return amount.sub(feeAmount);\\n    }\\n    return amount;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) private {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n    require(\\n      amount <= balanceOf(sender),\\n      \\\"You are trying to transfer more than your balance\\\"\\n    );\\n    if (!isFeeExempt[sender] && !isFeeExempt[recipient]) {\\n      require(tradingAllowed, \\\"tradingAllowed\\\");\\n    }\\n    if (\\n      !isFeeExempt[sender] &&\\n      !isFeeExempt[recipient] &&\\n      recipient != address(pair) &&\\n      recipient != address(DEAD)\\n    ) {\\n      require(\\n        (_balances[recipient].add(amount)) <= _maxWalletToken,\\n        \\\"Exceeds maximum wallet amount.\\\"\\n      );\\n    }\\n    if (sender != pair) {\\n      require(\\n        amount <= _maxSellAmount ||\\n          isFeeExempt[sender] ||\\n          isFeeExempt[recipient],\\n        \\\"TX Limit Exceeded\\\"\\n      );\\n    }\\n\\n    _balances[sender] = _balances[sender].sub(amount);\\n    uint256 amountReceived = shouldTakeFee(sender, recipient)\\n      ? takeFee(sender, recipient, amount)\\n      : amount;\\n    _balances[recipient] = _balances[recipient].add(amountReceived);\\n    emit Transfer(sender, recipient, amountReceived);\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    _transfer(msg.sender, recipient, amount);\\n    return true;\\n  }\\n\\n  function setisExempt(address _address, bool _enabled) external onlyOwner {\\n    isFeeExempt[_address] = _enabled;\\n  }\\n\\n  function setTransactionRequirements(\\n    uint256 _marketing,\\n    uint256 _staking,\\n    uint256 _buy,\\n    uint256 _sell,\\n    uint256 _trans\\n  ) external onlyOwner {\\n    marketingFee = _marketing;\\n    stakingFee = _staking;\\n    buyFee = _buy;\\n    sellFee = _sell;\\n    transferFee = _trans;\\n    require(\\n      buyFee <= feeDenominator.div(5) &&\\n        sellFee <= feeDenominator.div(5) &&\\n        transferFee <= feeDenominator.div(5),\\n      \\\"fees cannot be more than 20%\\\"\\n    );\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  ) public view override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    _approve(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function setInternalAddresses(\\n    address _marketing,\\n    address _staking\\n  ) external onlyOwner {\\n    marketing_receiver = _marketing;\\n    staking_receiver = _staking;\\n    isFeeExempt[_marketing] = true;\\n    isFeeExempt[_staking] = true;\\n  }\\n\\n  // Minimum permission to edit staking address fee recipient (used for future-proof staking activities)\\n  function setStakingAddress(address _staking) external onlyManager {\\n    staking_receiver = _staking;\\n    isFeeExempt[_staking] = true;\\n  }\\n\\n  function rescueERC20(address _address, uint256 percent) external onlyManager {\\n    uint256 _amount = IERC20(_address)\\n      .balanceOf(address(this))\\n      .mul(percent)\\n      .div(100);\\n    IERC20(_address).transfer(marketing_receiver, _amount);\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      msg.sender,\\n      _allowances[sender][msg.sender].sub(\\n        amount,\\n        \\\"ERC20: transfer amount exceeds allowance\\\"\\n      )\\n    );\\n    return true;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setInternalAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_staking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setTransactionRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabyBald", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}