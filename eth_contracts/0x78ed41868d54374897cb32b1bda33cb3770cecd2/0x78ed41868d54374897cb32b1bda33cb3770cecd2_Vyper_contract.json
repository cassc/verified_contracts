{"SourceCode": "# @version ^0.3.7\r\n\r\ninterface RplInterface:\r\n  def balanceOf(_who: address) -> uint256: view\r\n  def transfer(_to: address, _wad: uint256) -> bool: nonpayable\r\n\r\ninterface RocketStorageInterface:\r\n  def getAddress(_key: bytes32) -> address: view\r\n  def confirmWithdrawalAddress(_nodeAddress: address): nonpayable\r\n  def setWithdrawalAddress(_nodeAddress: address, _newWithdrawalAddress: address, _confirm: bool): nonpayable\r\n\r\ninterface RocketNodeStakingInterface:\r\n  def getNodeRPLStake(_nodeAddress: address) -> uint256: view\r\n\r\ninterface EnsRevRegInterface:\r\n  def setName(_name: String[64]) -> bytes32: nonpayable\r\n\r\ninterface EnsRegInterface:\r\n  def owner(_node: bytes32) -> address: view\r\n\r\naddrReverseNode: constant(bytes32) = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\r\nensRegAddress: constant(address) = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\r\nrocketNodeStakingKey: constant(bytes32) = keccak256(\"contract.addressrocketNodeStaking\")\r\nrocketTokenRPLKey: constant(bytes32) = keccak256(\"contract.addressrocketTokenRPL\")\r\nrocketStorage: immutable(RocketStorageInterface)\r\nrplToken: immutable(RplInterface)\r\n\r\nownerEth: public(address)\r\nownerRpl: public(address)\r\nnodeAddress: public(address)\r\npendingNodeAddress: public(address)\r\npendingWithdrawalAddress: public(address)\r\n\r\nrplPrincipal: public(uint256)\r\nrplFeeNumerator: public(uint256)\r\nrplFeeDenominator: public(uint256)\r\npendingRplFeeNumerator: public(uint256)\r\npendingRplFeeDenominator: public(uint256)\r\n\r\n@external\r\ndef __init__(_ownerRpl: address, _rocketStorageAddress: address):\r\n  rocketStorage = RocketStorageInterface(_rocketStorageAddress)\r\n  rplToken = RplInterface(rocketStorage.getAddress(rocketTokenRPLKey))\r\n  self.ownerEth = msg.sender\r\n  self.ownerRpl = _ownerRpl\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n  pass\r\n\r\n@external\r\ndef setOwnerEth(_newOwnerEth: address):\r\n  assert msg.sender == self.ownerEth, \"only ownerEth can set ownerEth\"\r\n  self.ownerEth = _newOwnerEth\r\n\r\n@external\r\ndef setOwnerRpl(_newOwnerRpl: address):\r\n  assert msg.sender == self.ownerRpl, \"only ownerRpl can set ownerRpl\"\r\n  self.ownerRpl = _newOwnerRpl\r\n\r\n@internal\r\ndef _getNodeRPLStake() -> uint256:\r\n  rocketNodeStakingAddress: address = rocketStorage.getAddress(rocketNodeStakingKey)\r\n  rocketNodeStaking: RocketNodeStakingInterface = RocketNodeStakingInterface(rocketNodeStakingAddress)\r\n  return rocketNodeStaking.getNodeRPLStake(self.nodeAddress)\r\n\r\n@external\r\ndef setRplFee(_numerator: uint256, _denominator: uint256):\r\n  assert msg.sender == self.ownerEth, \"only ownerEth can initiate fee change\"\r\n  self.pendingRplFeeNumerator = _numerator\r\n  self.pendingRplFeeDenominator = _denominator\r\n\r\n@external\r\ndef confirmRplFee(_numerator: uint256, _denominator: uint256):\r\n  assert msg.sender == self.ownerRpl, \"only ownerRpl can confirm fee change\"\r\n  assert _numerator == self.pendingRplFeeNumerator, \"incorrect numerator\"\r\n  assert _denominator == self.pendingRplFeeDenominator, \"incorrect denominator\"\r\n  self.rplFeeNumerator = _numerator\r\n  self.rplFeeDenominator = _denominator\r\n\r\n@external\r\ndef updateRplPrincipal(_expectedAmount: uint256):\r\n  assert msg.sender == self.ownerRpl, \"only ownerRpl can set principal\"\r\n  assert _expectedAmount == self._getNodeRPLStake(), \"incorrect RPL stake amount\"\r\n  self.rplPrincipal = _expectedAmount\r\n\r\n@external\r\ndef withdrawRplPrincipal(_amount: uint256):\r\n  assert msg.sender == self.ownerRpl, \"only ownerRpl can withdrawRplPrincipal\"\r\n  assert _amount <= self.rplPrincipal, \"amount exceeds principal\"\r\n  assert _amount <= rplToken.balanceOf(self), \"amount exceeds balance\"\r\n  assert rplToken.transfer(self.ownerRpl, _amount), \"rpl principal transfer failed\"\r\n  self.rplPrincipal -= _amount\r\n\r\n@external\r\ndef withdrawRewards(_amount: uint256):\r\n  assert msg.sender == self.ownerRpl, \"only ownerRpl can withdrawRewards\"\r\n  assert _amount <= rplToken.balanceOf(self), \"amount exceeds balance\"\r\n  fee: uint256 = _amount * self.rplFeeNumerator / self.rplFeeDenominator\r\n  assert rplToken.transfer(self.ownerEth, fee), \"fee transfer failed\"\r\n  assert rplToken.transfer(self.ownerRpl, _amount - fee), \"rpl rewards transfer failed\"\r\n  send(self.ownerEth, self.balance)\r\n\r\n@external\r\ndef withdrawEth():\r\n  assert msg.sender == self.ownerEth, \"only ownerEth can withdrawEth\"\r\n  assert self._getNodeRPLStake() == 0, \"unstake RPL before withdrawing ETH\"\r\n  send(self.ownerEth, self.balance)\r\n\r\n@external\r\ndef rpConfirmWithdrawalAddress():\r\n  rocketStorage.confirmWithdrawalAddress(self.nodeAddress)\r\n\r\n@external\r\ndef ensSetName(_name: String[64]):\r\n  EnsRevRegInterface(\r\n    EnsRegInterface(ensRegAddress).owner(addrReverseNode)).setName(_name)\r\n\r\n@external\r\ndef changeNodeAddress(_newNodeAddress: address):\r\n  assert msg.sender == self.ownerEth, \"only ownerEth can changeNodeAddress\"\r\n  self.pendingNodeAddress = _newNodeAddress\r\n\r\n@external\r\ndef confirmChangeNodeAddress(_newNodeAddress: address):\r\n  assert msg.sender == self.ownerRpl, \"only ownerRpl can confirmChangeNodeAddress\"\r\n  assert _newNodeAddress == self.pendingNodeAddress, \"incorrect address\"\r\n  self.nodeAddress = _newNodeAddress\r\n\r\n@external\r\ndef changeWithdrawalAddress(_newWithdrawalAddress: address):\r\n  assert msg.sender == self.ownerEth, \"only ownerEth can changeWithdrawalAddress\"\r\n  self.pendingWithdrawalAddress = _newWithdrawalAddress\r\n\r\n@external\r\ndef confirmChangeWithdrawalAddress(_newWithdrawalAddress: address):\r\n  assert msg.sender == self.ownerRpl, \"only ownerRpl can confirmChangeWithdrawalAddress\"\r\n  assert _newWithdrawalAddress == self.pendingWithdrawalAddress, \"incorrect address\"\r\n  rocketStorage.setWithdrawalAddress(self.nodeAddress, _newWithdrawalAddress, False)", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_ownerRpl\",\"type\":\"address\"},{\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setOwnerEth\",\"inputs\":[{\"name\":\"_newOwnerEth\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setOwnerRpl\",\"inputs\":[{\"name\":\"_newOwnerRpl\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setRplFee\",\"inputs\":[{\"name\":\"_numerator\",\"type\":\"uint256\"},{\"name\":\"_denominator\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"confirmRplFee\",\"inputs\":[{\"name\":\"_numerator\",\"type\":\"uint256\"},{\"name\":\"_denominator\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateRplPrincipal\",\"inputs\":[{\"name\":\"_expectedAmount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawRplPrincipal\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawRewards\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawEth\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rpConfirmWithdrawalAddress\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ensSetName\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeNodeAddress\",\"inputs\":[{\"name\":\"_newNodeAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"confirmChangeNodeAddress\",\"inputs\":[{\"name\":\"_newNodeAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeWithdrawalAddress\",\"inputs\":[{\"name\":\"_newWithdrawalAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"confirmChangeWithdrawalAddress\",\"inputs\":[{\"name\":\"_newWithdrawalAddress\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ownerEth\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ownerRpl\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nodeAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingNodeAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingWithdrawalAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rplPrincipal\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rplFeeNumerator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rplFeeDenominator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingRplFeeNumerator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingRplFeeDenominator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000d01b569900214b3864a588e09a711fbf3c5068070000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa46", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}