{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PoolTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IConvexWrapperV2.sol\\\";\\nimport \\\"./interfaces/IFraxFarmERC20.sol\\\";\\nimport \\\"./interfaces/IRewards.sol\\\";\\nimport \\\"./interfaces/IPoolRegistry.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n\\n/*\\nThis is a simple registry for certain pool types used for UI display\\n*/\\ncontract PoolTypes{\\n    address public constant convexProxy = address(0x59CFCD384746ec3035299D90782Be065e466800B);\\n    address public constant vefxs = address(0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0);\\n    address public constant poolRegistry = address(0x41a5881c17185383e19Df6FA4EC158a6F4851A69);\\n\\n    mapping(uint256 => uint256) poolType; //poolid -> type\\n    mapping(uint256 => string) typeName; //type -> description\\n\\n    address public immutable owner;\\n    mapping(address => bool) public operators;\\n\\n    event OperatorSet(address indexed _op, bool _active);\\n    event SetTypeName(uint256 indexed _type, string _name);\\n    event SetPoolType(uint256 indexed _pool, uint256 _type);\\n\\n    constructor() {\\n        owner = address(0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB);\\n        operators[msg.sender] = true;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"!owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender] || owner == msg.sender, \\\"!operator\\\");\\n        _;\\n    }\\n\\n    function setOperator(address _op, bool _active) external onlyOwner{\\n        operators[_op] = _active;\\n        emit OperatorSet(_op, _active);\\n    }\\n\\n    function setTypeName(uint256 _type, string calldata _name) external onlyOperator{\\n        typeName[_type] = _name;\\n        emit SetTypeName(_type, _name);\\n    }\\n\\n    function setPoolType(uint256 _pool, uint256 _type) external onlyOperator{\\n        poolType[_pool] = _type;\\n        emit SetPoolType(_pool, _type);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IRewards{\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    \\n    function initialize(uint256 _pid, bool _startActive) external;\\n    function addReward(address _rewardsToken, address _distributor) external;\\n    function approveRewardDistributor(\\n        address _rewardsToken,\\n        address _distributor,\\n        bool _approved\\n    ) external;\\n    function deposit(address _owner, uint256 _amount) external;\\n    function withdraw(address _owner, uint256 _amount) external;\\n    function getReward(address _forward) external;\\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards);\\n    function rewardTokens(uint256 _rid) external view returns (address);\\n    function rewardTokenLength() external view returns(uint256);\\n    function poolId() external view returns(uint256);\\n    function active() external view returns(bool);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IPoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IPoolRegistry {\\n    function poolLength() external view returns(uint256);\\n    function poolInfo(uint256 _pid) external view returns(address, address, address, address, uint8);\\n    function vaultMap(uint256 _pid, address _user) external view returns(address vault);\\n    function addUserVault(uint256 _pid, address _user) external returns(address vault, address stakeAddress, address stakeToken, address rewards);\\n    function deactivatePool(uint256 _pid) external;\\n    function addPool(address _implementation, address _stakingAddress, address _stakingToken) external;\\n    function setRewardActiveOnCreation(bool _active) external;\\n    function setRewardImplementation(address _imp) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFraxFarmERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFraxFarmERC20 {\\n    \\n    struct LockedStake {\\n        bytes32 kek_id;\\n        uint256 start_timestamp;\\n        uint256 liquidity;\\n        uint256 ending_timestamp;\\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\\n    }\\n\\n    function owner() external view returns (address);\\n    function stakingToken() external view returns (address);\\n    function fraxPerLPToken() external view returns (uint256);\\n    function calcCurCombinedWeight(address account) external view\\n        returns (\\n            uint256 old_combined_weight,\\n            uint256 new_vefxs_multiplier,\\n            uint256 new_combined_weight\\n        );\\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory);\\n    function lockedStakesOfLength(address account) external view returns (uint256);\\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) external;\\n    function lockLonger(bytes32 kek_id, uint256 new_ending_ts) external;\\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32);\\n    function withdrawLocked(bytes32 kek_id, address destination_address) external returns (uint256);\\n\\n\\n\\n    function periodFinish() external view returns (uint256);\\n    function rewardsDuration() external view returns (uint256);\\n    function getAllRewardTokens() external view returns (address[] memory);\\n    function earned(address account) external view returns (uint256[] memory new_earned);\\n    function totalLiquidityLocked() external view returns (uint256);\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\n    function totalCombinedWeight() external view returns (uint256);\\n    function combinedWeightOf(address account) external view returns (uint256);\\n    function lockMultiplier(uint256 secs) external view returns (uint256);\\n    function rewardRates(uint256 token_idx) external view returns (uint256 rwd_rate);\\n\\n    function userStakedFrax(address account) external view returns (uint256);\\n    function proxyStakedFrax(address proxy_address) external view returns (uint256);\\n    function maxLPForMaxBoost(address account) external view returns (uint256);\\n    function minVeFXSForMaxBoost(address account) external view returns (uint256);\\n    function minVeFXSForMaxBoostProxy(address proxy_address) external view returns (uint256);\\n    function veFXSMultiplier(address account) external view returns (uint256 vefxs_multiplier);\\n\\n    function toggleValidVeFXSProxy(address proxy_address) external;\\n    function proxyToggleStaker(address staker_address) external;\\n    function stakerSetVeFXSProxy(address proxy_address) external;\\n    function getReward(address destination_address) external returns (uint256[] memory);\\n    function vefxs_max_multiplier() external view returns(uint256);\\n    function vefxs_boost_scale_factor() external view returns(uint256);\\n    function vefxs_per_frax_for_max_boost() external view returns(uint256);\\n    function getProxyFor(address addr) external view returns (address);\\n\\n    function sync() external;\\n    function setRewardVars(address reward_token_address, uint256 _new_rate, address _gauge_controller_address, address _rewards_distributor_address) external;\\n    function changeTokenManager(address reward_token_address, address new_manager_address) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IConvexWrapperV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IConvexWrapperV2{\\n\\n   struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n   struct RewardType {\\n        address reward_token;\\n        address reward_pool;\\n        uint128 reward_integral;\\n        uint128 reward_remaining;\\n    }\\n\\n  function distroContract() external view returns(address distro);\\n  function collateralVault() external view returns(address vault);\\n  function convexPoolId() external view returns(uint256 _poolId);\\n  function curveToken() external view returns(address);\\n  function convexToken() external view returns(address);\\n  function rewardRedirect(address _account) external view returns(address);\\n  function balanceOf(address _account) external view returns(uint256);\\n  function totalBalanceOf(address _account) external view returns(uint256);\\n  function deposit(uint256 _amount, address _to) external;\\n  function stake(uint256 _amount, address _to) external;\\n  function withdraw(uint256 _amount) external;\\n  function withdrawAndUnwrap(uint256 _amount) external;\\n  function getReward(address _account) external;\\n  function getReward(address _account, address _forwardTo) external;\\n  function rewardLength() external view returns(uint256);\\n  function rewards(uint256 _index) external view returns(RewardType memory rewardInfo);\\n  function earned(address _account) external returns(EarnedData[] memory claimable);\\n  function earnedView(address _account) external view returns(EarnedData[] memory claimable);\\n  function setVault(address _vault) external;\\n  function user_checkpoint(address _account) external returns(bool);\\n  function setDistributor(address _vault, address _distro) external;\\n  function sealDistributor() external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"OperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"SetPoolType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"SetTypeName\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"convexProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"setPoolType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setTypeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolTypes", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}