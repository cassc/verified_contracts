{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { UniswapV2Library } from \\\"src/libraries/UniswapV2Library.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IWETH } from \\\"src/interfaces/IWETH.sol\\\";\\nimport { IRouter } from \\\"src/interfaces/IRouter.sol\\\";\\nimport { IPonzioTheCat } from \\\"src/interfaces/IPonzioTheCat.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"src/interfaces/UniswapV2/IUniswapV2Pair.sol\\\";\\nimport { IUniswapV2Router02 } from \\\"src/interfaces/UniswapV2/IUniswapV2Router02.sol\\\";\\n\\n/**\\n * @title Router\\n * @dev This contract is responsible for handling token swaps and liquidity provisions on a UniswapV2 pair.\\n */\\ncontract Router is IRouter, ReentrancyGuard {\\n    using SafeERC20 for IPonzioTheCat;\\n    using SafeERC20 for IERC20;\\n\\n    /// @inheritdoc IRouter\\n    IERC20 public immutable LP_TOKEN;\\n    /// @inheritdoc IRouter\\n    IPonzioTheCat public immutable PONZIO;\\n    /// @notice the address of the Uniswap V2 Router\\n    address internal constant UNISWAPV2_ROUTER_ADDR = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    /// @notice the address of the WETH token\\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    constructor(address lpToken, address ponzioTheCatAddress) {\\n        LP_TOKEN = IERC20(lpToken);\\n        PONZIO = IPonzioTheCat(ponzioTheCatAddress);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             external functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @inheritdoc IRouter\\n    function updateSupplyAndAddLiquidity(\\n        uint256 amountWETHDesired,\\n        uint256 amountPonzioDesired,\\n        uint256 amountETHMin,\\n        uint256 amountPonzioMin,\\n        address to\\n    ) external payable nonReentrant returns (uint256 amountPonzio_, uint256 amountETH_, uint256 liquidity_) {\\n        PONZIO.updateTotalSupply();\\n\\n        (amountPonzio_, amountETH_, liquidity_) = _handlePairAndAddLiquidity(\\n            amountWETHDesired, amountPonzioDesired, amountETHMin, amountPonzioMin, to, msg.sender\\n        );\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function swap(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        if (path.length < 2) {\\n            revert Router_invalidPath(path);\\n        }\\n\\n        PONZIO.updateTotalSupply();\\n\\n        if (path[0] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            if (msg.value == 0) {\\n                revert Router_valueNeeded();\\n            }\\n\\n            path[0] = WETH_ADDR;\\n            IUniswapV2Router02(UNISWAPV2_ROUTER_ADDR).swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: msg.value\\n            }(amountOutMin, path, to, deadline);\\n        } else {\\n            if (msg.value != 0) {\\n                revert Router_valueNotNeeded();\\n            }\\n\\n            IERC20(path[0]).safeTransferFrom(msg.sender, address(this), amountIn);\\n            IERC20(path[0]).forceApprove(UNISWAPV2_ROUTER_ADDR, amountIn);\\n\\n            if (path[path.length - 1] == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n                path[path.length - 1] = WETH_ADDR;\\n                IUniswapV2Router02(UNISWAPV2_ROUTER_ADDR).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    amountIn, amountOutMin, path, to, deadline\\n                );\\n            } else {\\n                IUniswapV2Router02(UNISWAPV2_ROUTER_ADDR).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    amountIn, amountOutMin, path, to, deadline\\n                );\\n            }\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             internal functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Calculates liquidity to add to the Uniswap pair for Ponzio and WETH.\\n     * @param amountPonzioDesired The amount of Ponzio the user wants to add as liquidity.\\n     * @param amountWETHDesired The amount of WETH the user wants to add as liquidity.\\n     * @param amountPonzioMin The minimum amount of Ponzio the user wants to add as liquidity.\\n     * @param amountWETHMin The minimum amount of WETH the user wants to add as liquidity.\\n     * @return amountPonzio_ The actual amount of Ponzio added as liquidity.\\n     * @return amountWETH_ The actual amount of WETH added as liquidity.\\n     */\\n    function _calcLiquidityToAdd(\\n        uint256 amountPonzioDesired,\\n        uint256 amountWETHDesired,\\n        uint256 amountPonzioMin,\\n        uint256 amountWETHMin\\n    ) internal view returns (uint256 amountPonzio_, uint256 amountWETH_) {\\n        address token0 = WETH_ADDR < address(PONZIO) ? WETH_ADDR : address(PONZIO);\\n\\n        // slither-disable-next-line unused-return\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(address(LP_TOKEN)).getReserves();\\n        (uint256 reservePonzio, uint256 reserveWETH) =\\n            address(PONZIO) == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\n        uint256 amountWETHOptimal = UniswapV2Library.quote(amountPonzioDesired, reservePonzio, reserveWETH);\\n\\n        if (amountWETHOptimal <= amountWETHDesired) {\\n            if (amountWETHMin > amountWETHOptimal) {\\n                revert Router_insufficientAmount();\\n            }\\n\\n            (amountPonzio_, amountWETH_) = (amountPonzioDesired, amountWETHOptimal);\\n        } else {\\n            uint256 amountPonzioOptimal = UniswapV2Library.quote(amountWETHDesired, reserveWETH, reservePonzio);\\n\\n            if (amountPonzioOptimal > amountPonzioDesired) {\\n                revert Router_liquidityError();\\n            }\\n            if (amountPonzioMin > amountPonzioOptimal) {\\n                revert Router_insufficientAmount();\\n            }\\n\\n            (amountPonzio_, amountWETH_) = (amountPonzioOptimal, amountWETHDesired);\\n        }\\n    }\\n\\n    /**\\n     * @notice Handle the pair address and add liquidity to it.\\n     * @param amountWETHDesired The amount of WETH the user wants to add as liquidity.\\n     * @param amountPonzioDesired The amount of Ponzio token the user wants to add as liquidity.\\n     * @param amountETHMin The minimum amount of ETH/WETH the user wants to add as liquidity.\\n     * @param amountPonzioMin The minimum amount of Ponzio token the user wants to add as liquidity.\\n     * @param to The address to which the liquidity tokens will be minted.\\n     * @param from The address from which the tokens will be transferred.\\n     * @return amountPonzio_ The actual amount of Ponzio token added as liquidity.\\n     * @return amountETH_ The actual amount of token A added as liquidity.\\n     * @return liquidity_ The amount of liquidity tokens minted.\\n     */\\n    function _handlePairAndAddLiquidity(\\n        uint256 amountWETHDesired,\\n        uint256 amountPonzioDesired,\\n        uint256 amountETHMin,\\n        uint256 amountPonzioMin,\\n        address to,\\n        address from\\n    ) internal returns (uint256 amountPonzio_, uint256 amountETH_, uint256 liquidity_) {\\n        if (msg.value == 0) {\\n            (amountPonzio_, amountETH_) =\\n                _calcLiquidityToAdd(amountPonzioDesired, amountWETHDesired, amountPonzioMin, amountETHMin);\\n\\n            IERC20(WETH_ADDR).safeTransferFrom(from, address(LP_TOKEN), amountETH_);\\n            PONZIO.safeTransferFrom(from, address(LP_TOKEN), amountPonzio_);\\n\\n            liquidity_ = IUniswapV2Pair(address(LP_TOKEN)).mint(to);\\n        } else {\\n            (amountPonzio_, amountETH_) = _calcLiquidityToAdd(amountPonzioDesired, msg.value, amountPonzioMin, amountETHMin);\\n\\n            IWETH(WETH_ADDR).deposit{ value: amountETH_ }();\\n            IERC20(WETH_ADDR).safeTransfer(address(LP_TOKEN), amountETH_);\\n            PONZIO.safeTransferFrom(from, address(LP_TOKEN), amountPonzio_);\\n\\n            liquidity_ = IUniswapV2Pair(address(LP_TOKEN)).mint(to);\\n\\n            // refund dust eth, if any\\n            if (msg.value > amountETH_) {\\n                (bool success,) = msg.sender.call{ value: msg.value - amountETH_ }(\\\"\\\");\\n                if (!success) {\\n                    revert Router_refundFailed();\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/UniswapV2Library.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport { IUniswapV2Pair } from \\\"src/interfaces/UniswapV2/IUniswapV2Pair.sol\\\";\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (uint256 reserveA, uint256 reserveB)\\n    {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        // slither-disable-next-line unused-return\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n    function approve(address guy, uint256 wad) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { IPonzioTheCat } from \\\"src/interfaces/IPonzioTheCat.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRouter {\\n    /// @notice Revert when the user sent a value but it wasn't needed\\n    error Router_valueNotNeeded();\\n\\n    /// @notice Revert when no value was added to the transaction but it was needed\\n    error Router_valueNeeded();\\n\\n    /**\\n     * @notice Revert when the user passes an invalid path (length < 2).\\n     * @param path the invalid array of addresses\\n     */\\n    error Router_invalidPath(address[] path);\\n\\n    /// @notice Revert when the refund in addLiquidity fails.\\n    error Router_refundFailed();\\n\\n    /// @notice Revert when the amount isn't enough in addLiquidity.\\n    error Router_insufficientAmount();\\n\\n    /// @notice Revert when the calculation of liquidity to add fails.\\n    error Router_liquidityError();\\n\\n    /**\\n     * @notice Returns the address of the staking token.\\n     * @return IERC20 address of the staking token\\n     */\\n    function LP_TOKEN() external view returns (IERC20);\\n\\n    /**\\n     * @notice Returns the address of the Ponzio.\\n     * @return IPonzioTheCat address of the Ponzio\\n     */\\n    function PONZIO() external view returns (IPonzioTheCat);\\n\\n    /**\\n     * @notice Update the supply of Ponzio and add liquidity to the pair.\\n     * @param amountWETHDesired The amount of WETH the user wants to add as liquidity.\\n     * @param amountPonzioDesired The amount of Ponzio token the user wants to add as liquidity.\\n     * @param amountETHMin The minimum amount of ETH/WETH the user wants to add as liquidity.\\n     * @param amountPonzioMin The minimum amount of Ponzio token the user wants to add as liquidity.\\n     * @param to The address to which the liquidity tokens will be minted.\\n     * @return amountPonzio_ The actual amount of Ponzio token added as liquidity.\\n     * @return amountETH_ The actual amount of ETH (or equivalent) added as liquidity.\\n     * @return liquidity_ The amount of liquidity tokens minted.\\n     * @dev amountWETHDesired = 0 when adding liquidity with ETH\\n     */\\n    function updateSupplyAndAddLiquidity(\\n        uint256 amountWETHDesired,\\n        uint256 amountPonzioDesired,\\n        uint256 amountETHMin,\\n        uint256 amountPonzioMin,\\n        address to\\n    ) external payable returns (uint256 amountPonzio_, uint256 amountETH_, uint256 liquidity_);\\n\\n    /**\\n     * @notice Swaps a certain `amountIn` of a token for another token, ensuring a minimum output `amountOutMin`.\\n     * @param amountIn The amount of input tokens to be sent.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path An array of token addresses. The path[0] address is the input token and the last address is the\\n     * output token.\\n     * @param to The address to send the output tokens to.\\n     * @param deadline The time after which the swap is invalid.\\n     *\\n     * @dev :\\n     * This function supports both ETH and ERC20 tokens as input and output. The address\\n     * 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE is used as a placeholder for ETH.\\n     * If the input token is ETH, it is replaced with the actual WETH address and\\n     * `swapExactETHForTokensSupportingFeeOnTransferTokens` is called.\\n     * If the output token is ETH, it is replaced with the actual WETH address and\\n     * `swapExactTokensForETHSupportingFeeOnTransferTokens` is called.\\n     * Otherwise, `swapExactTokensForTokensSupportingFeeOnTransferTokens` is called.\\n     *\\n     * If there is any ETH balance left in the contract, it is sent back to the caller.\\n     *\\n     * Requirements:\\n     * - The `path` must have at least two addresses.\\n     * - The sender must have approved this contract to spend the input tokens.\\n     */\\n    function swap(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline)\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPonzioTheCat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport { IERC20Rebasable } from \\\"src/interfaces/IERC20Rebasable.sol\\\";\\nimport { IUniswapV2Pair } from \\\"src/interfaces/UniswapV2/IUniswapV2Pair.sol\\\";\\n\\ninterface IPonzioTheCat is IERC20Rebasable {\\n    /// @notice Error code is thrown when the contract is being initialized a 2nd time.\\n    error PONZIO_alreadyInitialized();\\n\\n    /// @notice Error code thrown in setFeesCollector when the contract has not been initialized yet.\\n    error PONZIO_notInitialized();\\n\\n    /// @notice Error code thrown in setFeesCollector when the new feesCollector is the zero address.\\n    error PONZIO_feeCollectorZeroAddress();\\n\\n    /**\\n     * @notice Emitted when the max shares are reached.\\n     * @param timestamp The timestamp at which the maximum is reached.\\n     */\\n    event MaxSharesReached(uint256 timestamp);\\n\\n    /**\\n     * @notice Emitted FeesCollector changes.\\n     * @param feesCollector The new feesCollector.\\n     * It's ok to set the feesCollector to the zero address, in which case no fees will be collected.\\n     */\\n    event FeesCollectorSet(address indexed feesCollector);\\n\\n    /**\\n     * @notice Emitted when the Uniswap V2 pair address is set.\\n     * @param uniV2PoolPair The new uniV2PoolPair.\\n     */\\n    event UniV2PoolPairSet(address indexed uniV2PoolPair);\\n\\n    /**\\n     * @notice Emitted when an account is blacklisted for UpdateTotalSupply.\\n     * @param account The account that is blacklisted.\\n     * @param value The new value of the blacklist.\\n     */\\n    event BlacklistForUpdateSupplySet(address indexed account, bool indexed value);\\n\\n    /**\\n     * @notice Emitted when the total supply is updated.\\n     * @param oldTotalSupply The old total supply.\\n     * @param newTotalSupply The new total supply.\\n     * @param oldTotalShare The old total share.\\n     * @param newTotalShare The new total share.\\n     * @param fees The fees collected.\\n     */\\n    event TotalSupplyUpdated(\\n        uint256 oldTotalSupply, uint256 newTotalSupply, uint256 oldTotalShare, uint256 newTotalShare, uint256 fees\\n    );\\n\\n    /**\\n     * @notice Initial supply of the token.\\n     * @return The initial supply of the token.\\n     */\\n    function INITIAL_SUPPLY() external view returns (uint256);\\n\\n    /**\\n     * @notice Time between each halving.\\n     * @return The time between each halving.\\n     */\\n    function HALVING_EVERY() external view returns (uint256);\\n\\n    /**\\n     * @notice Time between each debasing.\\n     * @return The time between each debasing.\\n     */\\n    function DEBASE_EVERY() external view returns (uint256);\\n\\n    /**\\n     * @notice Number of debasing per halving.\\n     * @return The number of debasing per halving.\\n     */\\n    function NB_DEBASE_PER_HALVING() external view returns (uint256);\\n\\n    /**\\n     * @notice Minimum total supply. When the total supply reaches this value, it can't go lower.\\n     * @return The minimum total supply.\\n     */\\n    function MINIMUM_TOTAL_SUPPLY() external view returns (uint256);\\n\\n    /**\\n     * @notice The time at which the contract was deployed.\\n     * @return The time at which the contract was deployed.\\n     */\\n    function DEPLOYED_TIME() external view returns (uint256);\\n\\n    /**\\n     * @notice Fees collected on each debasing, in FEES_BASE percent.\\n     * @return The fees collected on each debasing.\\n     */\\n    function FEES_STAKING() external view returns (uint256);\\n\\n    /**\\n     * @notice The fee base used for FEES_STAKING\\n     * @return The fee base\\n     */\\n    function FEES_BASE() external view returns (uint256);\\n\\n    /**\\n     * @notice The address that collects the fees (the staking contract)\\n     * @return The address that collects the fees\\n     */\\n    function feesCollector() external view returns (address);\\n\\n    /**\\n     * @notice returns if the max shares are reached.\\n     * @return True if the max shares are reached, false otherwise.\\n     * @dev The max shares are reached when the total of shares is about to overflow.\\n     * When reached, fees are not collected anymore.\\n     */\\n    function maxSharesReached() external view returns (bool);\\n\\n    /**\\n     * @notice The Uniswap V2 pair to sync when debasing.\\n     * @return The Uniswap V2 pair.\\n     */\\n    function uniswapV2Pair() external view returns (IUniswapV2Pair);\\n\\n    /**\\n     * @notice Changes the Uniswap V2 pair address.\\n     * @param uniV2PoolAddr_ The new Uniswap V2 pair address.\\n     * @dev Set the Uniswap V2 pair address to zero address to disable syncing.\\n     */\\n    function setUniswapV2Pair(address uniV2PoolAddr_) external;\\n\\n    /**\\n     * @notice Changes the fees collector.\\n     * @param feesCollector_ The new fees collector.\\n     */\\n    function setFeesCollector(address feesCollector_) external;\\n\\n    /**\\n     * @notice Blacklist an address for UpdateTotalSupply.\\n     * @param addrToBlacklist The address to blacklist.\\n     * @param value The new value of the blacklist.\\n     */\\n    function setBlacklistForUpdateSupply(address addrToBlacklist, bool value) external;\\n\\n    /**\\n     * @notice Initialize the contract by setting the fees collector and staking the first amount of tokens.\\n     * @param feesCollector_ The address that will collect the fees.\\n     * @param uniV2PoolAddr_ The address of the uniswap V2 pool.\\n     */\\n    function initialize(address feesCollector_, address uniV2PoolAddr_) external;\\n\\n    /**\\n     * @notice Return the real-time balance of an account after an UpdateTotalSupply() call.\\n     * @param account_ The account to check the balance of.\\n     * @return balance_ The real-time balance of the account.\\n     * @dev This function will only return the right balance if the feesCollector is set.\\n     */\\n    function realBalanceOf(address account_) external view returns (uint256 balance_);\\n\\n    /**\\n     * @notice Compute the total supply and the fees to collect.\\n     * @return totalSupply_ The new total supply.\\n     * @return fees_ The fees to collect.\\n     */\\n    function computeSupply() external view returns (uint256 totalSupply_, uint256 fees_);\\n\\n    /**\\n     * @notice Compute the total shares, supply and the fees to collect.\\n     * @return totalShares_ The new total shares.\\n     * @return totalSupply_ The new total supply.\\n     * @return fees_ The fees to collect.\\n     */\\n    function computeNewState() external view returns (uint256 totalShares_, uint256 totalSupply_, uint256 fees_);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/UniswapV2/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/UniswapV2/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.2;\\n\\nimport \\\"src/interfaces/UniswapV2/IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20Rebasable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IERC20Rebasable is IERC20, IERC20Permit {\\n    /**\\n     * @notice returns the precision factor for shares.\\n     * @return The precision factor for shares.\\n     */\\n    function SHARES_PRECISION_FACTOR() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total shares.\\n     * @return The total shares.\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the share of the user.\\n     * @param user The address of the user to get the share of.\\n     * @return The share of the user.\\n     */\\n    function sharesOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfer tokens to a specified address by specifying the share amount.\\n     * @param to The address to transfer the tokens to.\\n     * @param shares The amount of shares to be transferred.\\n     * @return True if the transfer was successful, revert otherwise.\\n     */\\n    function transferShares(address to, uint256 shares) external returns (bool);\\n\\n    /**\\n     * @notice Transfer shares from a specified address to another specified address.\\n     * @param from The address to transfer the shares from.\\n     * @param to The address to transfer the shares to.\\n     * @param shares The amount of shares to be transferred.\\n     * @return True if the transfer was successful, revert otherwise.\\n     * @dev This function tries to update the total supply by calling `updateTotalSupply()`\\n     */\\n    function transferSharesFrom(address from, address to, uint256 shares) external returns (bool);\\n\\n    /**\\n     * @notice update the total supply, compute the debase accordingly and transfer the fees to the feesCollector.\\n     * @dev This function is already called at each approval and transfer. It needs to be implemented by a child\\n     * contract\\n     */\\n    function updateTotalSupply() external;\\n\\n    /**\\n     * @notice Convert tokens to shares.\\n     * @param amount The amount of tokens to convert to shares.\\n     * @return shares_ The number of shares corresponding to the tokens.\\n     */\\n    function tokenToShares(uint256 amount) external view returns (uint256 shares_);\\n\\n    /**\\n     * @notice Convert tokens to shares given the new total shares and total supply.\\n     * @param amount The amount of tokens to convert to shares.\\n     * @param newTotalShares The new total shares.\\n     * @param newTotalSupply The new total supply.\\n     * @return shares_ The number of shares corresponding to the tokens.\\n     */\\n    function tokenToShares(uint256 amount, uint256 newTotalShares, uint256 newTotalSupply)\\n        external\\n        view\\n        returns (uint256 shares_);\\n\\n    /**\\n     * @notice Convert shares to tokens.\\n     * @param shares The amount of shares to convert to tokens.\\n     * @return tokenAmount_ The amount of tokens corresponding to the shares.\\n     */\\n    function sharesToToken(uint256 shares) external view returns (uint256 tokenAmount_);\\n\\n    /**\\n     * @notice Convert shares to tokens given the new total shares and total supply.\\n     * @param shares The amount of shares to convert to tokens.\\n     * @param newTotalShares The new total shares.\\n     * @param newTotalSupply The new total supply.\\n     * @return tokenAmount_ The amount of tokens corresponding to the shares.\\n     */\\n    function sharesToToken(uint256 shares, uint256 newTotalShares, uint256 newTotalSupply)\\n        external\\n        view\\n        returns (uint256 tokenAmount_);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/UniswapV2/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountOut);\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountIn);\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ponzioTheCatAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Router_insufficientAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"Router_invalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Router_liquidityError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Router_refundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Router_valueNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Router_valueNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LP_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PONZIO\",\"outputs\":[{\"internalType\":\"contract IPonzioTheCat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWETHDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPonzioDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPonzioMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"updateSupplyAndAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPonzio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Router", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000090908e414d3525e33733d320798b5681508255ea000000000000000000000000873259322be8e50d80a4b868d186cc5ab148543a", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}