{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"node0x_revShare.sol\": {\r\n      \"content\": \"/**\\n    NODE0X - RevShare\\n\\n    The Node0x RevShare contract enables users to claim ETH and reinvest it into node0x tokens at their discretion, \\n    regardless of the ETH amount. Utilizing Merkle Proofs, the ETH remains tied to the user's address until claimed. \\n    \\n    Users can easily track both claimed and unclaimed rewards, as well as the overall distributed rewards. \\n    Moreover, the contract facilitates monitoring of the ETH volume added to the contract and \\n    provides calculations for APY, APR, and individual rewards.\\n\\n*/\\n\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen - 1 != totalHashes) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen\\n                ? leaves[leafPos++]\\n                : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen - 1 != totalHashes) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen\\n                ? leaves[leafPos++]\\n                : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b)\\n        private\\n        pure\\n        returns (bytes32 value)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function symbol() external view returns (uint256);\\n}\\n\\ncontract Node0xRevShare {\\n    IUniswapV2Router02 public router;\\n\\n    address public token;\\n\\n    address public owner;\\n\\n    bool public claimingEnabled;\\n\\n    bytes32 public merkleRoot;\\n\\n    mapping(address => uint256) public amountClaimed;\\n\\n    uint256 public totalEthForRewards;\\n    uint256 public lastEthForRewards;\\n    uint256 public totalClaimedEth;\\n    uint256 public totalRounds;\\n    uint256 public lastRewardTime;\\n\\n    uint256 year = 365;\\n    uint256 public rewardReplenishFrequency = 7;\\n\\n    uint256 constant PRECISION = 10**18;\\n\\n    // Ineligible holders\\n    address[] private ineligibleHolders;\\n\\n    error ExceedsClaim();\\n    error NotInMerkle();\\n    error ClaimingDisabled();\\n\\n    constructor() {\\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        token = 0x2862259F492B51CD01a702b24D6d3ad6146c2972;\\n        owner = msg.sender;\\n        addIneligibleHolder(0x000000000000000000000000000000000000dEaD);\\n        addIneligibleHolder(0x2862259F492B51CD01a702b24D6d3ad6146c2972);\\n        addIneligibleHolder(0x60dCd5DdF035255EaA36Eb6EdA558E3d1Bc68f3C);\\n        addIneligibleHolder(0x3505f14670B2D8597cE5Ad029b73aaBd10469BD3);\\n        addIneligibleHolder(0x6038f9D41391DB481EFFEb59038589661FDC3695);\\n    }\\n   \\n\\n    event Claim(\\n        address indexed to,\\n        uint256 amount,\\n        uint256 amountClaimed\\n    );\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    \\n    function processClaim(\\n        address to,\\n        uint256 amount,\\n        bytes32[] calldata proof,\\n        uint256 claimAmount\\n    ) internal {\\n        // Throw if address tries to claim too many tokens\\n        if (amountClaimed[to] + claimAmount > amount)\\n            revert ExceedsClaim();\\n        if(!claimingEnabled)\\n            revert ClaimingDisabled();\\n\\n        // Verify merkle proof, or revert if not in tree\\n        bytes32 leaf = keccak256(abi.encodePacked(to, amount));\\n        bool isValidLeaf = MerkleProof.verify(proof, merkleRoot, leaf);\\n        if (!isValidLeaf) revert NotInMerkle();\\n\\n        // Track ETH claimed\\n        amountClaimed[to] += claimAmount;\\n        totalClaimedEth += claimAmount;\\n    }\\n\\n    function claimTokens(\\n        uint256 amount,\\n        bytes32[] calldata proof,\\n        uint256 claimAmount,\\n        uint256 minAmount\\n    ) external {\\n\\n        address to = msg.sender;\\n\\n        // Check if the claimer is not an ineligible holder\\n        require(!isIneligibleHolder(to), \\\"Claimer is ineligible.\\\");\\n\\n        processClaim(to, amount, proof, claimAmount);\\n\\n        swapEthForTokens(claimAmount, to, minAmount);\\n\\n        // Emit claim event\\n        emit Claim(to, amount, claimAmount);\\n    }\\n\\n    function claimEth(\\n        uint256 amount,\\n        bytes32[] calldata proof,\\n        uint256 claimAmount\\n    ) external returns (bool success) {\\n\\n        address to = msg.sender;\\n\\n        // Check if the claimer is not an ineligible holder\\n        require(!isIneligibleHolder(to), \\\"Claimer is ineligible.\\\");\\n\\n        processClaim(to, amount, proof, claimAmount);\\n\\n        // Send ETH to address\\n        (success, ) = to.call{value: claimAmount}(\\\"\\\");\\n\\n        // Emit claim event\\n        emit Claim(to, amount, claimAmount);\\n    }\\n\\n    function swapEthForTokens(uint256 ethAmount, address to, uint256 minAmount) internal {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = token;\\n\\n        // make the swap\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n            value: ethAmount\\n        }(\\n            minAmount,\\n            path,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function getAmountOut(uint256 ethIn) external view returns(uint256){\\n        (uint256 reserveA, uint256 reserveB,) = IUniswapV2Pair(IUniswapV2Factory(router.factory()).getPair(token, router.WETH())).getReserves();\\n\\n        return router.getAmountOut(ethIn, reserveB, reserveA);\\n    }\\n\\n    function toggleClaiming() external onlyOwner {\\n        claimingEnabled = !claimingEnabled;\\n    }\\n\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n    }\\n\\n    function newRoot(bytes32 root) public payable onlyOwner {\\n        require(msg.value > 0, \\\"Must send some ETH with the newRoot function.\\\");\\n\\n        totalEthForRewards += msg.value;\\n        lastEthForRewards = msg.value;\\n        rewardReplenishFrequency = (block.timestamp - lastRewardTime) / (60 * 60 * 24);\\n\\n        // Check if rewardReplenishFrequency is 0, set it to 1\\n        if (rewardReplenishFrequency == 0) {\\n            rewardReplenishFrequency = 1;\\n        }\\n\\n        merkleRoot = root;\\n        lastRewardTime = block.timestamp;\\n        totalRounds++; // Increment the totalRounds counter\\n    }\\n\\n    function withdrawETH(uint256 _amount, address payable _to) external onlyOwner {\\n        require(_to != address(0), \\\"Zero address is invalid.\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero.\\\");\\n        require(address(this).balance >= _amount, \\\"Not enough ETH!\\\");\\n        \\n        // totalEthForRewards -= _amount;\\n\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed!\\\");\\n    }\\n\\n    function withdrawToken(uint256 _amount, address _to, address _token) external onlyOwner {\\n        require(_to != address(0), \\\"Zero address is invalid.\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero.\\\");\\n        require(_amount <= IERC20(_token).balanceOf(address(this)), \\\"Not enough tokens!\\\");\\n\\n        bool success = IERC20(_token).transfer(msg.sender, _amount);\\n        require(success, \\\"Transfer failed!\\\");\\n    }\\n\\n    // Calculate the adjusted token supply without decimals\\n    function calculateAdjustedTokenSupply() public view returns (uint256 adjustedSupplyWithNoDecimals) {\\n        adjustedSupplyWithNoDecimals = IERC20(token).totalSupply();\\n\\n        // Subtract the token balance of each ineligible holder from the total supply\\n        for (uint256 i = 0; i < ineligibleHolders.length; i++) {\\n            uint256 removeFromSupply = IERC20(token).balanceOf(ineligibleHolders[i]);\\n            adjustedSupplyWithNoDecimals -= removeFromSupply;\\n        }\\n\\n        // Adjust for decimals\\n        adjustedSupplyWithNoDecimals = adjustedSupplyWithNoDecimals / (10**IERC20(token).decimals());\\n\\n        return adjustedSupplyWithNoDecimals;\\n    }\\n\\n    // Calculate the price of 1 token in terms of WETH (output in Wei)\\n    function calculateTokenPriceInWETH() public view returns (uint256 tokenPriceInWei) {\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = router.WETH();\\n\\n        // Get the amounts out for 1 unit of the token in terms of WETH\\n        uint256[] memory amountsOut = router.getAmountsOut(1e9, path);\\n\\n        // Ensure that the token is the output token in the path\\n        require(amountsOut.length > 0 && amountsOut[amountsOut.length - 1] > 0, \\\"Invalid output token\\\");\\n\\n        tokenPriceInWei = amountsOut[amountsOut.length - 1];\\n        return (tokenPriceInWei);\\n    }\\n\\n    // Calculate the reward of 1 token (without decimals) in terms of WETH (output in Wei)\\n    function calculateRewardPerTokenInWETH() public view returns (uint256 rewardPerTokenInWei) {\\n\\n        uint256 adjustedSupply = calculateAdjustedTokenSupply();\\n\\n        // Get reward of 1 token\\n        rewardPerTokenInWei = totalEthForRewards / totalRounds / adjustedSupply;\\n\\n        return (rewardPerTokenInWei);\\n    }\\n\\n    // Calculate the rewards in terms of WETH\\n    // How much ETH will I receive if I hold `tokenAmount` number of tokens?\\n    function calculateRewardsInWETH(uint256 tokenAmount) public view returns (uint256 rewardsInWei) {\\n        uint256 rewardPerTokenInWETH = calculateRewardPerTokenInWETH();\\n\\n        // Calculate the rewards in WETH (output in Wei) \\n        rewardsInWei = rewardPerTokenInWETH * tokenAmount; // tokenAmount with no decimals\\n    }\\n\\n    // Calculate the holder rewards in terms of WETH\\n    function calculateHolderRewardsInWETH(address holderAddress) public view returns (uint256 holderRewardsInWei) {\\n        uint256 rewardPerTokenInWETH = calculateRewardPerTokenInWETH();\\n\\n        // Calculate holder rewards in WETH (output in Wei)\\n        holderRewardsInWei = rewardPerTokenInWETH * IERC20(token).balanceOf(holderAddress) / (10**IERC20(token).decimals()); // tokenAmount with no decimals\\n    }\\n\\n    // Calculate APR and APY\\n    /* \\n        Formula:\\n            uint256 rewardPerTokenInWETH = calculateRewardPerTokenInWETH();\\n            uint256 tokenPriceInWETH = calculateTokenPriceInWETH();\\n        \\n            uint256 r = rewardPerTokenInWETH / tokenPriceInWETH;\\n            uint256 n = year / rewardReplenishFrequency;\\n\\n            // Calculate APR\\n            APR = r * n;\\n\\n            // Calculate APY\\n            APY = ((1 + (r / n))**n) - 1;\\n    */\\n    function calculateRAndN() public view returns (uint256 r, uint256 n) {\\n        uint256 rewardPerTokenInWETH = calculateRewardPerTokenInWETH();\\n        uint256 tokenPriceInWETH = calculateTokenPriceInWETH();\\n\\n        r = (rewardPerTokenInWETH * PRECISION) / tokenPriceInWETH;\\n        n = year / rewardReplenishFrequency;\\n\\n        return (r, n);\\n    }\\n\\n    function calculateAPYAndAPR() public view returns (uint256 APR, uint256 APY) {\\n        uint256 r;\\n        uint256 n;\\n        (r, n) = calculateRAndN();\\n\\n        // Calculate APR (precision in Wei, i.e., 18 decimals)\\n        APR = r * n;\\n\\n        // Calculate APY iteratively (precision in Wei, i.e., 18 decimals)\\n        uint256 tempAPY = PRECISION;\\n        for (uint256 i = 0; i < n; i++) {\\n            tempAPY = (tempAPY * (r + PRECISION)) / PRECISION;\\n        }\\n        APY = tempAPY - PRECISION;\\n    }\\n\\n    // Calculate custom volume\\n    // How much ETH will I receive if I hold `tokenAmount` number of tokens \\n    // if `ethReplenishedForRewardsInWei` amount of ETH is added \\n    // every `ethReplenishedFrequencyInDays` and what's the APY and APR?\\n    function calculateCustomVolume(\\n        uint256 tokenAmount, \\n        uint256 ethReplenishedForRewardsInWei, \\n        uint256 ethReplenishedFrequencyInDays\\n        ) public view returns (\\n        uint256 yourEthRewardsInWei,\\n        uint256 r,\\n        uint256 n,\\n        uint256 APR, \\n        uint256 APY\\n        ) {\\n        \\n        uint256 adjustedSupply = calculateAdjustedTokenSupply();\\n        uint256 tokenPriceInWETH = calculateTokenPriceInWETH();\\n        uint256 rewardPerTokenInWETH = ethReplenishedForRewardsInWei / adjustedSupply;\\n\\n        r = (rewardPerTokenInWETH * PRECISION) / tokenPriceInWETH;\\n        n = year / ethReplenishedFrequencyInDays;\\n\\n        // Calculate the rewards in terms of WETH (output in Wei)\\n        yourEthRewardsInWei = rewardPerTokenInWETH * tokenAmount; // tokenAmount with no decimals\\n\\n        // Calculate APR (precision in Wei, i.e., 18 decimals)\\n        APR = r * n;\\n\\n        // Calculate APY iteratively (precision in Wei, i.e., 18 decimals)\\n        uint256 tempAPY = PRECISION;\\n        for (uint256 i = 0; i < n; i++) {\\n            tempAPY = (tempAPY * (r + PRECISION)) / PRECISION;\\n        }\\n        APY = tempAPY - PRECISION;\\n    }\\n\\n    function updateRewardReplenishFrequency(uint256 _rewardReplenishFrequency) public onlyOwner {\\n        rewardReplenishFrequency =  _rewardReplenishFrequency;\\n    }\\n\\n    function updateTotalRounds(uint256 _totalRounds) public onlyOwner {\\n        totalRounds =  _totalRounds;\\n    }\\n\\n    function updateTotalEthForRewards(uint256 _totalEthForRewards) public onlyOwner {\\n        totalEthForRewards =  _totalEthForRewards;\\n    }\\n\\n    function updateToken(address _token) public onlyOwner {\\n        token = _token;\\n    }\\n\\n    function updateRouter(address _router) public onlyOwner {\\n        router = IUniswapV2Router02(_router);\\n    }\\n\\n    function addIneligibleHolder(address user) public onlyOwner {\\n      ineligibleHolders.push(user);\\n    }\\n    \\n    function removeIneligibleHolder(address user) public onlyOwner {\\n      uint256 len = ineligibleHolders.length;\\n      for(uint i; i < len; i++) {\\n        if(ineligibleHolders[i] == user) {\\n          ineligibleHolders[i] = ineligibleHolders[len - 1];\\n          ineligibleHolders.pop();\\n          break;\\n        }\\n      }\\n    }\\n\\n    // Function to check if an address is an ineligible holder\\n    function isIneligibleHolder(address user) public view returns (bool) {\\n        for (uint256 i = 0; i < ineligibleHolders.length; i++) {\\n            if (ineligibleHolders[i] == user) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // Function to allow setting the claimed amount for addresses\\n    function setAmountClaimed(address _address, uint256 _amount) public onlyOwner {\\n        require(!isIneligibleHolder(_address), \\\"Address is ineligible\\\");\\n        amountClaimed[_address] = _amount;\\n    }\\n\\n    function setAmountClaimedBatch(address[] calldata addresses, uint256[] calldata amounts) public onlyOwner {\\n        require(addresses.length == amounts.length, \\\"Arrays must have the same length\\\");\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            address _address = addresses[i];\\n            uint256 _amount = amounts[i];\\n\\n            require(!isIneligibleHolder(_address), \\\"Address is ineligible\\\");\\n            amountClaimed[_address] = _amount;\\n        }\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ClaimingDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInMerkle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addIneligibleHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateAPYAndAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"APR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateAdjustedTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustedSupplyWithNoDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReplenishedForRewardsInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReplenishedFrequencyInDays\",\"type\":\"uint256\"}],\"name\":\"calculateCustomVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yourEthRewardsInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"calculateHolderRewardsInWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"holderRewardsInWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRAndN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRewardPerTokenInWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenInWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRewardsInWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsInWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTokenPriceInWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPriceInWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"claimEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isIneligibleHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEthForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"newRoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeIneligibleHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReplenishFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAmountClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setAmountClaimedBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardReplenishFrequency\",\"type\":\"uint256\"}],\"name\":\"updateRewardReplenishFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEthForRewards\",\"type\":\"uint256\"}],\"name\":\"updateTotalEthForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRounds\",\"type\":\"uint256\"}],\"name\":\"updateTotalRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Node0xRevShare", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}