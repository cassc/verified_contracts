{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.18;\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// TokenizedStrategy interface used for internal view delegateCalls.\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\r\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\r\n *\r\n * _Available since v4.7._\r\n */\r\ninterface IERC4626 is IERC20, IERC20Metadata {\r\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\r\n\r\n    event Withdraw(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        address indexed owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\r\n     *\r\n     * - MUST be an ERC-20 token contract.\r\n     * - MUST NOT revert.\r\n     */\r\n    function asset() external view returns (address assetTokenAddress);\r\n\r\n    /**\r\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\r\n     *\r\n     * - SHOULD include any compounding that occurs from yield.\r\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT revert.\r\n     */\r\n    function totalAssets() external view returns (uint256 totalManagedAssets);\r\n\r\n    /**\r\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\r\n     * through a deposit call.\r\n     *\r\n     * - MUST return a limited value if receiver is subject to some deposit limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\r\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\r\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   deposit execution, and are accounted for during deposit.\r\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\r\n     * - MUST return a limited value if receiver is subject to some mint limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxMint(address receiver) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\r\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\r\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\r\n     */\r\n    function previewMint(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\r\n     *   execution, and are accounted for during mint.\r\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\r\n     * Vault, through a withdraw call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\r\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\r\n     *   called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\r\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   withdraw execution, and are accounted for during withdraw.\r\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\r\n     * through a redeem call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\r\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\r\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\r\n     */\r\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   redeem execution, and are accounted for during redeem.\r\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// Interface that implements the 4626 standard and the implementation functions\r\ninterface ITokenizedStrategy is IERC4626, IERC20Permit {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event StrategyShutdown();\r\n\r\n    event NewTokenizedStrategy(\r\n        address indexed strategy,\r\n        address indexed asset,\r\n        string apiVersion\r\n    );\r\n\r\n    event Reported(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 protocolFees,\r\n        uint256 performanceFees\r\n    );\r\n\r\n    event UpdatePerformanceFeeRecipient(\r\n        address indexed newPerformanceFeeRecipient\r\n    );\r\n\r\n    event UpdateKeeper(address indexed newKeeper);\r\n\r\n    event UpdatePerformanceFee(uint16 newPerformanceFee);\r\n\r\n    event UpdateManagement(address indexed newManagement);\r\n\r\n    event UpdateEmergencyAdmin(address indexed newEmergencyAdmin);\r\n\r\n    event UpdateProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime);\r\n\r\n    event UpdatePendingManagement(address indexed newPendingManagement);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           INITIALIZATION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function initialize(\r\n        address _asset,\r\n        string memory _name,\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) external;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    NON-STANDARD 4626 OPTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        MODIFIER HELPERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function requireManagement(address _sender) external view;\r\n\r\n    function requireKeeperOrManagement(address _sender) external view;\r\n\r\n    function requireEmergencyAuthorized(address _sender) external view;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        KEEPERS FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function tend() external;\r\n\r\n    function report() external returns (uint256 _profit, uint256 _loss);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function MAX_FEE() external view returns (uint16);\r\n\r\n    function FACTORY() external view returns (address);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function management() external view returns (address);\r\n\r\n    function pendingManagement() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function emergencyAdmin() external view returns (address);\r\n\r\n    function performanceFee() external view returns (uint16);\r\n\r\n    function performanceFeeRecipient() external view returns (address);\r\n\r\n    function fullProfitUnlockDate() external view returns (uint256);\r\n\r\n    function profitUnlockingRate() external view returns (uint256);\r\n\r\n    function profitMaxUnlockTime() external view returns (uint256);\r\n\r\n    function lastReport() external view returns (uint256);\r\n\r\n    function isShutdown() external view returns (bool);\r\n\r\n    function unlockedShares() external view returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setPendingManagement(address) external;\r\n\r\n    function acceptManagement() external;\r\n\r\n    function setKeeper(address _keeper) external;\r\n\r\n    function setEmergencyAdmin(address _emergencyAdmin) external;\r\n\r\n    function setPerformanceFee(uint16 _performanceFee) external;\r\n\r\n    function setPerformanceFeeRecipient(\r\n        address _performanceFeeRecipient\r\n    ) external;\r\n\r\n    function setProfitMaxUnlockTime(uint256 _profitMaxUnlockTime) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function emergencyWithdraw(uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * @title YearnV3 Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to\r\n *  seamlessly integrate with the `TokenizedStrategy` implementation contract\r\n *  allowing anyone to easily build a fully permissionless ERC-4626 compliant\r\n *  Vault by inheriting this contract and overriding three simple functions.\r\n\r\n *  It utilizes an immutable proxy pattern that allows the BaseStrategy\r\n *  to remain simple and small. All standard logic is held within the\r\n *  `TokenizedStrategy` and is reused over any n strategies all using the\r\n *  `fallback` function to delegatecall the implementation so that strategists\r\n *  can only be concerned with writing their strategy specific code.\r\n *\r\n *  This contract should be inherited and the three main abstract methods\r\n *  `_deployFunds`, `_freeFunds` and `_harvestAndReport` implemented to adapt\r\n *  the Strategy to the particular needs it has to generate yield. There are\r\n *  other optional methods that can be implemented to further customize\r\n *  the strategy if desired.\r\n *\r\n *  All default storage for the strategy is controlled and updated by the\r\n *  `TokenizedStrategy`. The implementation holds a storage struct that\r\n *  contains all needed global variables in a manual storage slot. This\r\n *  means strategists can feel free to implement their own custom storage\r\n *  variables as they need with no concern of collisions. All global variables\r\n *  can be viewed within the Strategy by a simple call using the\r\n *  `TokenizedStrategy` variable. IE: TokenizedStrategy.globalVariable();.\r\n */\r\nabstract contract BaseStrategy {\r\n    /*//////////////////////////////////////////////////////////////\r\n                            MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev Used on TokenizedStrategy callback functions to make sure it is post\r\n     * a delegateCall from this address to the TokenizedStrategy.\r\n     */\r\n    modifier onlySelf() {\r\n        _onlySelf();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from the strategies management.\r\n     */\r\n    modifier onlyManagement() {\r\n        TokenizedStrategy.requireManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the keeper.\r\n     */\r\n    modifier onlyKeepers() {\r\n        TokenizedStrategy.requireKeeperOrManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the emergency admin.\r\n     */\r\n    modifier onlyEmergencyAuthorized() {\r\n        TokenizedStrategy.requireEmergencyAuthorized(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Require that the msg.sender is this address.\r\n     */\r\n    function _onlySelf() internal view {\r\n        require(msg.sender == address(this), \"!self\");\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev This is the address of the TokenizedStrategy implementation\r\n     * contract that will be used by all strategies to handle the\r\n     * accounting, logic, storage etc.\r\n     *\r\n     * Any external calls to the that don't hit one of the functions\r\n     * defined in this base or the strategy will end up being forwarded\r\n     * through the fallback function, which will delegateCall this address.\r\n     *\r\n     * This address should be the same for every strategy, never be adjusted\r\n     * and always be checked before any integration with the Strategy.\r\n     */\r\n    address public constant tokenizedStrategyAddress =\r\n        0xBB51273D6c746910C7C06fe718f30c936170feD0;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            IMMUTABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Underlying asset the Strategy is earning yield on.\r\n     * Stored here for cheap retrievals within the strategy.\r\n     */\r\n    ERC20 internal immutable asset;\r\n\r\n    /**\r\n     * @dev This variable is set to address(this) during initialization of each strategy.\r\n     *\r\n     * This can be used to retrieve storage data within the strategy\r\n     * contract as if it were a linked library.\r\n     *\r\n     *       i.e. uint256 totalAssets = TokenizedStrategy.totalAssets()\r\n     *\r\n     * Using address(this) will mean any calls using this variable will lead\r\n     * to a call to itself. Which will hit the fallback function and\r\n     * delegateCall that to the actual TokenizedStrategy.\r\n     */\r\n    ITokenizedStrategy internal immutable TokenizedStrategy;\r\n\r\n    /**\r\n     * @notice Used to initialize the strategy on deployment.\r\n     *\r\n     * This will set the `TokenizedStrategy` variable for easy\r\n     * internal view calls to the implementation. As well as\r\n     * initializing the default storage variables based on the\r\n     * parameters and using the deployer for the permissioned roles.\r\n     *\r\n     * @param _asset Address of the underlying asset.\r\n     * @param _name Name the strategy will use.\r\n     */\r\n    constructor(address _asset, string memory _name) {\r\n        asset = ERC20(_asset);\r\n\r\n        // Set instance of the implementation for internal use.\r\n        TokenizedStrategy = ITokenizedStrategy(address(this));\r\n\r\n        // Initialize the strategy's storage variables.\r\n        _delegateCall(\r\n            abi.encodeCall(\r\n                ITokenizedStrategy.initialize,\r\n                (_asset, _name, msg.sender, msg.sender, msg.sender)\r\n            )\r\n        );\r\n\r\n        // Store the tokenizedStrategyAddress at the standard implementation\r\n        // address storage slot so etherscan picks up the interface. This gets\r\n        // stored on initialization and never updated.\r\n        assembly {\r\n            sstore(\r\n                // keccak256('eip1967.proxy.implementation' - 1)\r\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\r\n                tokenizedStrategyAddress\r\n            )\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                NEEDED TO BE OVERRIDDEN BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Can deploy up to '_amount' of 'asset' in the yield source.\r\n     *\r\n     * This function is called at the end of a {deposit} or {mint}\r\n     * call. Meaning that unless a whitelist is implemented it will\r\n     * be entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy can attempt\r\n     * to deposit in the yield source.\r\n     */\r\n    function _deployFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Should attempt to free the '_amount' of 'asset'.\r\n     *\r\n     * NOTE: The amount of 'asset' that is already loose has already\r\n     * been accounted for.\r\n     *\r\n     * This function is called during {withdraw} and {redeem} calls.\r\n     * Meaning that unless a whitelist is implemented it will be\r\n     * entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * Should not rely on asset.balanceOf(address(this)) calls other than\r\n     * for diff accounting purposes.\r\n     *\r\n     * Any difference between `_amount` and what is actually freed will be\r\n     * counted as a loss and passed on to the withdrawer. This means\r\n     * care should be taken in times of illiquidity. It may be better to revert\r\n     * if withdraws are simply illiquid so not to realize incorrect losses.\r\n     *\r\n     * @param _amount, The amount of 'asset' to be freed.\r\n     */\r\n    function _freeFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Internal function to harvest all rewards, redeploy any idle\r\n     * funds and return an accurate accounting of all funds currently\r\n     * held by the Strategy.\r\n     *\r\n     * This should do any needed harvesting, rewards selling, accrual,\r\n     * redepositing etc. to get the most accurate view of current assets.\r\n     *\r\n     * NOTE: All applicable assets including loose assets should be\r\n     * accounted for in this function.\r\n     *\r\n     * Care should be taken when relying on oracles or swap values rather\r\n     * than actual amounts as all Strategy profit/loss accounting will\r\n     * be done based on this returned value.\r\n     *\r\n     * This can still be called post a shutdown, a strategist can check\r\n     * `TokenizedStrategy.isShutdown()` to decide if funds should be\r\n     * redeployed or simply realize any profits/losses.\r\n     *\r\n     * @return _totalAssets A trusted and accurate account for the total\r\n     * amount of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function _harvestAndReport()\r\n        internal\r\n        virtual\r\n        returns (uint256 _totalAssets);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    OPTIONAL TO OVERRIDE BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Optional function for strategist to override that can\r\n     *  be called in between reports.\r\n     *\r\n     * If '_tend' is used tendTrigger() will also need to be overridden.\r\n     *\r\n     * This call can only be called by a permissioned role so may be\r\n     * through protected relays.\r\n     *\r\n     * This can be used to harvest and compound rewards, deposit idle funds,\r\n     * perform needed position maintenance or anything else that doesn't need\r\n     * a full report for.\r\n     *\r\n     *   EX: A strategy that can not deposit funds without getting\r\n     *       sandwiched can use the tend when a certain threshold\r\n     *       of idle to totalAssets has been reached.\r\n     *\r\n     * This will have no effect on PPS of the strategy till report() is called.\r\n     *\r\n     * @param _totalIdle The current amount of idle funds that are available to deploy.\r\n     */\r\n    function _tend(uint256 _totalIdle) internal virtual {}\r\n\r\n    /**\r\n     * @dev Optional trigger to override if tend() will be used by the strategy.\r\n     * This must be implemented if the strategy hopes to invoke _tend().\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     */\r\n    function _tendTrigger() internal view virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if tend() should be called by a keeper.\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     * @return . Calldata for the tend call.\r\n     */\r\n    function tendTrigger() external view virtual returns (bool, bytes memory) {\r\n        return (\r\n            // Return the status of the tend trigger.\r\n            _tendTrigger(),\r\n            // And the needed calldata either way.\r\n            abi.encodeWithSelector(ITokenizedStrategy.tend.selector)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that an address can deposit.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any deposit or mints to enforce\r\n     * any limits desired by the strategist. This can be used for either a\r\n     * traditional deposit limit or for implementing a whitelist etc.\r\n     *\r\n     *   EX:\r\n     *      if(isAllowed[_owner]) return super.availableDepositLimit(_owner);\r\n     *\r\n     * This does not need to take into account any conversion rates\r\n     * from shares to assets. But should know that any non max uint256\r\n     * amounts may be converted to shares. So it is recommended to keep\r\n     * custom amounts low enough as not to cause overflow when multiplied\r\n     * by `totalSupply`.\r\n     *\r\n     * @param . The address that is depositing into the strategy.\r\n     * @return . The available amount the `_owner` can deposit in terms of `asset`\r\n     */\r\n    function availableDepositLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that can be withdrawn.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any withdraw or redeem to enforce\r\n     * any limits desired by the strategist. This can be used for illiquid\r\n     * or sandwichable strategies. It should never be lower than `totalIdle`.\r\n     *\r\n     *   EX:\r\n     *       return TokenIzedStrategy.totalIdle();\r\n     *\r\n     * This does not need to take into account the `_owner`'s share balance\r\n     * or conversion rates from shares to assets.\r\n     *\r\n     * @param . The address that is withdrawing from the strategy.\r\n     * @return . The available amount that can be withdrawn in terms of `asset`\r\n     */\r\n    function availableWithdrawLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @dev Optional function for a strategist to override that will\r\n     * allow management to manually withdraw deployed funds from the\r\n     * yield source if a strategy is shutdown.\r\n     *\r\n     * This should attempt to free `_amount`, noting that `_amount` may\r\n     * be more than is currently deployed.\r\n     *\r\n     * NOTE: This will not realize any profits or losses. A separate\r\n     * {report} will be needed in order to record any profit/loss. If\r\n     * a report may need to be called after a shutdown it is important\r\n     * to check if the strategy is shutdown during {_harvestAndReport}\r\n     * so that it does not simply re-deploy all funds that had been freed.\r\n     *\r\n     * EX:\r\n     *   if(freeAsset > 0 && !TokenizedStrategy.isShutdown()) {\r\n     *       depositFunds...\r\n     *    }\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal virtual {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        TokenizedStrategy HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Can deploy up to '_amount' of 'asset' in yield source.\r\n     * @dev Callback for the TokenizedStrategy to call during a {deposit}\r\n     * or {mint} to tell the strategy it can deploy funds.\r\n     *\r\n     * Since this can only be called after a {deposit} or {mint}\r\n     * delegateCall to the TokenizedStrategy msg.sender == address(this).\r\n     *\r\n     * Unless a whitelist is implemented this will be entirely permissionless\r\n     * and thus can be sandwiched or otherwise manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy can\r\n     * attempt to deposit in the yield source.\r\n     */\r\n    function deployFunds(uint256 _amount) external virtual onlySelf {\r\n        _deployFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Should attempt to free the '_amount' of 'asset'.\r\n     * @dev Callback for the TokenizedStrategy to call during a withdraw\r\n     * or redeem to free the needed funds to service the withdraw.\r\n     *\r\n     * This can only be called after a 'withdraw' or 'redeem' delegateCall\r\n     * to the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt to free up.\r\n     */\r\n    function freeFunds(uint256 _amount) external virtual onlySelf {\r\n        _freeFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the accurate amount of all funds currently\r\n     * held by the Strategy.\r\n     * @dev Callback for the TokenizedStrategy to call during a report to\r\n     * get an accurate accounting of assets the strategy controls.\r\n     *\r\n     * This can only be called after a report() delegateCall to the\r\n     * TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @return . A trusted and accurate account for the total amount\r\n     * of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function harvestAndReport() external virtual onlySelf returns (uint256) {\r\n        return _harvestAndReport();\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_tend' when a keeper tends the strategy.\r\n     * @dev Callback for the TokenizedStrategy to initiate a _tend call in the strategy.\r\n     *\r\n     * This can only be called after a tend() delegateCall to the TokenizedStrategy\r\n     * so msg.sender == address(this).\r\n     *\r\n     * We name the function `tendThis` so that `tend` calls are forwarded to\r\n     * the TokenizedStrategy.\r\n\r\n     * @param _totalIdle The amount of current idle funds that can be\r\n     * deployed during the tend\r\n     */\r\n    function tendThis(uint256 _totalIdle) external virtual onlySelf {\r\n        _tend(_totalIdle);\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_emergencyWithdraw' function.\r\n     * @dev Callback for the TokenizedStrategy during an emergency withdraw.\r\n     *\r\n     * This can only be called after a emergencyWithdraw() delegateCall to\r\n     * the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * We name the function `shutdownWithdraw` so that `emergencyWithdraw`\r\n     * calls are forwarded to the TokenizedStrategy.\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function shutdownWithdraw(uint256 _amount) external virtual onlySelf {\r\n        _emergencyWithdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function used to delegate call the TokenizedStrategy with\r\n     * certain `_calldata` and return any return values.\r\n     *\r\n     * This is used to setup the initial storage of the strategy, and\r\n     * can be used by strategist to forward any other call to the\r\n     * TokenizedStrategy implementation.\r\n     *\r\n     * @param _calldata The abi encoded calldata to use in delegatecall.\r\n     * @return . The return value if the call was successful in bytes.\r\n     */\r\n    function _delegateCall(\r\n        bytes memory _calldata\r\n    ) internal returns (bytes memory) {\r\n        // Delegate call the tokenized strategy with provided calldata.\r\n        (bool success, bytes memory result) = tokenizedStrategyAddress\r\n            .delegatecall(_calldata);\r\n\r\n        // If the call reverted. Return the error.\r\n        if (!success) {\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                let size := returndatasize()\r\n                returndatacopy(ptr, 0, size)\r\n                revert(ptr, size)\r\n            }\r\n        }\r\n\r\n        // Return the result.\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a function on the TokenizedStrategy and return any value.\r\n     *\r\n     * This fallback function will be executed when any of the standard functions\r\n     * defined in the TokenizedStrategy are called since they wont be defined in\r\n     * this contract.\r\n     *\r\n     * It will delegatecall the TokenizedStrategy implementation with the exact\r\n     * calldata and return any relevant values.\r\n     *\r\n     */\r\n    fallback() external {\r\n        // load our target address\r\n        address _tokenizedStrategyAddress = tokenizedStrategyAddress;\r\n        // Execute external function using delegatecall and return any value.\r\n        assembly {\r\n            // Copy function selector and any arguments.\r\n            calldatacopy(0, 0, calldatasize())\r\n            // Execute function delegatecall.\r\n            let result := delegatecall(\r\n                gas(),\r\n                _tokenizedStrategyAddress,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            // Get any return value\r\n            returndatacopy(0, 0, returndatasize())\r\n            // Return any return value or error back to the caller\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *   @title Base Health Check\r\n *   @author Yearn.finance\r\n *   @notice This contract can be inherited by any Yearn\r\n *   V3 strategy wishing to implement a health check during\r\n *   the `report` function in order to prevent any unexpected\r\n *   behavior from being permanently recorded as well as the\r\n *   `checkHealth` modifier.\r\n *\r\n *   A strategist simply needs to inherit this contract. Set\r\n *   the limit ratios to the desired amounts and then\r\n *   override `_harvestAndReport()` just as they otherwise\r\n *  would. If the profit or loss that would be recorded is\r\n *   outside the acceptable bounds the tx will revert.\r\n *\r\n *   The healthcheck does not prevent a strategy from reporting\r\n *   losses, but rather can make sure manual intervention is\r\n *   needed before reporting an unexpected loss or profit.\r\n */\r\nabstract contract BaseHealthCheck is BaseStrategy {\r\n    // Can be used to determine if a healthcheck should be called.\r\n    // Defaults to true;\r\n    bool public doHealthCheck = true;\r\n\r\n    uint256 internal constant MAX_BPS = 10_000;\r\n\r\n    // Default profit limit to 100%.\r\n    uint16 private _profitLimitRatio = uint16(MAX_BPS);\r\n\r\n    // Defaults loss limit to 0.\r\n    uint16 private _lossLimitRatio;\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name\r\n    ) BaseStrategy(_asset, _name) {}\r\n\r\n    /**\r\n     * @notice Returns the current profit limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current profit limit ratio.\r\n     */\r\n    function profitLimitRatio() public view returns (uint256) {\r\n        return _profitLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current loss limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current loss limit ratio.\r\n     */\r\n    function lossLimitRatio() public view returns (uint256) {\r\n        return _lossLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `profitLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function setProfitLimitRatio(\r\n        uint256 _newProfitLimitRatio\r\n    ) external onlyManagement {\r\n        _setProfitLimitRatio(_newProfitLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the profit limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function _setProfitLimitRatio(uint256 _newProfitLimitRatio) internal {\r\n        require(_newProfitLimitRatio > 0, \"!zero profit\");\r\n        require(_newProfitLimitRatio <= type(uint16).max, \"!too high\");\r\n        _profitLimitRatio = uint16(_newProfitLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `lossLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function setLossLimitRatio(\r\n        uint256 _newLossLimitRatio\r\n    ) external onlyManagement {\r\n        _setLossLimitRatio(_newLossLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the loss limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function _setLossLimitRatio(uint256 _newLossLimitRatio) internal {\r\n        require(_newLossLimitRatio < MAX_BPS, \"!loss limit\");\r\n        _lossLimitRatio = uint16(_newLossLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @notice Turns the healthcheck on and off.\r\n     * @dev If turned off the next report will auto turn it back on.\r\n     * @param _doHealthCheck Bool if healthCheck should be done.\r\n     */\r\n    function setDoHealthCheck(bool _doHealthCheck) public onlyManagement {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice OVerrides the default {harvestAndReport} to include a healthcheck.\r\n     * @return _totalAssets New totalAssets post report.\r\n     */\r\n    function harvestAndReport()\r\n        external\r\n        override\r\n        onlySelf\r\n        returns (uint256 _totalAssets)\r\n    {\r\n        // Let the strategy report.\r\n        _totalAssets = _harvestAndReport();\r\n\r\n        // Run the healthcheck on the amount returned.\r\n        _executeHealthCheck(_totalAssets);\r\n    }\r\n\r\n    /**\r\n     * @dev To be called during a report to make sure the profit\r\n     * or loss being recorded is within the acceptable bound.\r\n     *\r\n     * @param _newTotalAssets The amount that will be reported.\r\n     */\r\n    function _executeHealthCheck(uint256 _newTotalAssets) internal virtual {\r\n        if (!doHealthCheck) {\r\n            doHealthCheck = true;\r\n            return;\r\n        }\r\n\r\n        // Get the current total assets from the implementation.\r\n        uint256 currentTotalAssets = TokenizedStrategy.totalAssets();\r\n\r\n        if (_newTotalAssets > currentTotalAssets) {\r\n            require(\r\n                ((_newTotalAssets - currentTotalAssets) <=\r\n                    (currentTotalAssets * uint256(_profitLimitRatio)) /\r\n                        MAX_BPS),\r\n                \"healthCheck\"\r\n            );\r\n        } else if (currentTotalAssets > _newTotalAssets) {\r\n            require(\r\n                (currentTotalAssets - _newTotalAssets <=\r\n                    ((currentTotalAssets * uint256(_lossLimitRatio)) /\r\n                        MAX_BPS)),\r\n                \"healthCheck\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\ninterface IPendleMarket {\r\n    function readTokens() external view returns (address _SY, address _PT, address _YT);\r\n    function swapSyForExactPt(address receiver, uint256 exactPtOut, bytes calldata data) external returns (uint256 netSyIn, uint256 netSyFee);\r\n    function isExpired() external view returns (bool);\r\n}\r\n\r\ninterface IPendleStaking {\r\n    function masterPenpie() external view returns (address);\r\n    function marketDepositHelper() external view returns (address);\r\n}\r\n\r\ninterface IMarketDepositHelper {\r\n    function depositMarket(address market, uint256 amount) external;\r\n    function withdrawMarket(address market, uint256 amount) external;\r\n    function withdrawMarketWithClaim(address market, uint256 amount, bool doClaim) external;\r\n    function balance(address market, address user) external view returns (uint256);\r\n}\r\n\r\ninterface IMasterPenpie {\r\n    function multiclaim(address[] calldata _stakingTokens) external;\r\n}\r\n\r\ninterface ISY {\r\n    function deposit(\r\n        address receiver,\r\n        address tokenIn,\r\n        uint256 amountTokenToDeposit,\r\n        uint256 minSharesOut) external payable returns (uint256 amountSharesOut);\r\n    \r\n \r\n    function getTokensIn() external view returns (address[] calldata);\r\n    function redeem(\r\n        address receiver,\r\n        uint256 amountSharesToRedeem,\r\n        address tokenOut,\r\n        uint256 minTokenOut,\r\n        bool burnFromInternalBalance) external payable returns (uint256 amountTokenOut);\r\n    function isValidTokenIn(address) external view returns (bool);\r\n}\r\n\r\ninterface IPendleRouter {\r\n    struct ApproxParams {\r\n        uint256 guessMin;\r\n        uint256 guessMax;\r\n        uint256 guessOffchain; // pass 0 in to skip this variable\r\n        uint256 maxIteration; // every iteration, the diff between guessMin and guessMax will be divided by 2\r\n        uint256 eps; // the max eps between the returned result & the correct result, base 1e18. Normally this number will be set\r\n        // to 1e15 (1e18/1000 = 0.1%)\r\n    }\r\n\r\n    struct LimitOrderData {\r\n        address limitRouter;\r\n        uint256 epsSkipMarket; // only used for swap operations, will be ignored otherwise\r\n        FillOrderParams[] normalFills;\r\n        FillOrderParams[] flashFills;\r\n        bytes optData;\r\n    }\r\n\r\n    struct FillOrderParams {\r\n       Order order;\r\n        bytes signature;\r\n        uint256 makingAmount;\r\n    }\r\n\r\n    struct Order {\r\n        uint256 salt;\r\n        uint256 expiry;\r\n        uint256 nonce;\r\n        OrderType orderType;\r\n        address token;\r\n        address YT;\r\n        address maker;\r\n        address receiver;\r\n        uint256 makingAmount;\r\n        uint256 lnImpliedRate;\r\n        uint256 failSafeRate;\r\n        bytes permit;\r\n    }\r\n\r\n    enum OrderType {\r\n        SY_FOR_PT,\r\n        PT_FOR_SY,\r\n        SY_FOR_YT,\r\n        YT_FOR_SY\r\n    }\r\n\r\n    function addLiquiditySingleSy(\r\n        address receiver,\r\n        address market,\r\n        uint256 netSyIn,\r\n        uint256 minLpOut,\r\n        ApproxParams calldata guessPtReceivedFromSy,\r\n        LimitOrderData calldata limit\r\n    ) external returns (uint256 netLpOut, uint256 netSyFee);\r\n\r\n    function removeLiquiditySingleSy(\r\n        address receiver, \r\n        address market, \r\n        uint256 netLPToRemove, \r\n        uint256 minSyOut, \r\n        LimitOrderData calldata limit\r\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint256) external;\r\n    function deposit() external payable;\r\n}\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    // Taken from https://soliditydeveloper.com/uniswap3\r\n    // Manually added to the interface\r\n    function refundETH() external payable;\r\n}\r\n\r\n/**\r\n *   @title UniswapV3Swapper\r\n *   @author Yearn.finance\r\n *   @dev This is a simple contract that can be inherited by any tokenized\r\n *   strategy that would like to use Uniswap V3 for swaps. It hold all needed\r\n *   logic to perform both exact input and exact output swaps.\r\n *\r\n *   The global address variables default to the ETH mainnet addresses but\r\n *   remain settable by the inheriting contract to allow for customization\r\n *   based on needs or chain its used on.\r\n *\r\n *   The only variables that are required to be set are the specific fees\r\n *   for each token pair. The inheriting contract can use the {_setUniFees}\r\n *   function to easily set this for any token pairs needed.\r\n */\r\ncontract UniswapV3Swapper {\r\n    using SafeERC20 for ERC20;\r\n\r\n    // Optional Variable to be set to not sell dust.\r\n    uint256 public minAmountToSell;\r\n    // Defaults to WETH on mainnet.\r\n    address public base = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // Defaults to Uniswap V3 router on mainnet.\r\n    address public router = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n\r\n    // Fees for the Uni V3 pools. Each fee should get set each way in\r\n    // the mapping so no matter the direction the correct fee will get\r\n    // returned for any two tokens.\r\n    mapping(address => mapping(address => uint24)) public uniFees;\r\n\r\n    /**\r\n     * @dev All fess will default to 0 on creation. A strategist will need\r\n     * To set the mapping for the tokens expected to swap. This function\r\n     * is to help set the mapping. It can be called internally during\r\n     * initialization, through permissioned functions etc.\r\n     */\r\n    function _setUniFees(\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee\r\n    ) internal virtual {\r\n        uniFees[_token0][_token1] = _fee;\r\n        uniFees[_token1][_token0] = _fee;\r\n    }\r\n\r\n    /**\r\n     * @dev Used to swap a specific amount of `_from` to `_to`.\r\n     * This will check and handle all allowances as well as not swapping\r\n     * unless `_amountIn` is greater than the set `_minAmountOut`\r\n     *\r\n     * If one of the tokens matches with the `base` token it will do only\r\n     * one jump, otherwise will do two jumps.\r\n     *\r\n     * The corresponding uniFees for each token pair will need to be set\r\n     * other wise this function will revert.\r\n     *\r\n     * @param _from The token we are swapping from.\r\n     * @param _to The token we are swapping to.\r\n     * @param _amountIn The amount of `_from` we will swap.\r\n     * @param _minAmountOut The min of `_to` to get out.\r\n     * @return _amountOut The actual amount of `_to` that was swapped to\r\n     */\r\n    function _swapFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _minAmountOut\r\n    ) internal virtual returns (uint256 _amountOut) {\r\n        if (_amountIn > minAmountToSell) {\r\n            _checkAllowance(router, _from, _amountIn);\r\n            if (_from == base || _to == base) {\r\n                ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n                    .ExactInputSingleParams(\r\n                        _from, // tokenIn\r\n                        _to, // tokenOut\r\n                        uniFees[_from][_to], // from-to fee\r\n                        address(this), // recipient\r\n                        block.timestamp, // deadline\r\n                        _amountIn, // amountIn\r\n                        _minAmountOut, // amountOut\r\n                        0 // sqrtPriceLimitX96\r\n                    );\r\n\r\n                _amountOut = ISwapRouter(router).exactInputSingle(params);\r\n            } else {\r\n                bytes memory path = abi.encodePacked(\r\n                    _from, // tokenIn\r\n                    uniFees[_from][base], // from-base fee\r\n                    base, // base token\r\n                    uniFees[base][_to], // base-to fee\r\n                    _to // tokenOut\r\n                );\r\n\r\n                _amountOut = ISwapRouter(router).exactInput(\r\n                    ISwapRouter.ExactInputParams(\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp,\r\n                        _amountIn,\r\n                        _minAmountOut\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Used to swap a specific amount of `_to` from `_from` unless\r\n     * it takes more than `_maxAmountFrom`.\r\n     *\r\n     * This will check and handle all allowances as well as not swapping\r\n     * unless `_maxAmountFrom` is greater than the set `minAmountToSell`\r\n     *\r\n     * If one of the tokens matches with the `base` token it will do only\r\n     * one jump, otherwise will do two jumps.\r\n     *\r\n     * The corresponding uniFees for each token pair will need to be set\r\n     * other wise this function will revert.\r\n     *\r\n     * @param _from The token we are swapping from.\r\n     * @param _to The token we are swapping to.\r\n     * @param _amountTo The amount of `_to` we need out.\r\n     * @param _maxAmountFrom The max of `_from` we will swap.\r\n     * @return _amountIn The actual amount of `_from` swapped.\r\n     */\r\n    function _swapTo(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountTo,\r\n        uint256 _maxAmountFrom\r\n    ) internal virtual returns (uint256 _amountIn) {\r\n        if (_maxAmountFrom > minAmountToSell) {\r\n            _checkAllowance(router, _from, _maxAmountFrom);\r\n            if (_from == base || _to == base) {\r\n                ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\r\n                    .ExactOutputSingleParams(\r\n                        _from, // tokenIn\r\n                        _to, // tokenOut\r\n                        uniFees[_from][_to], // from-to fee\r\n                        address(this), // recipient\r\n                        block.timestamp, // deadline\r\n                        _amountTo, // amountOut\r\n                        _maxAmountFrom, // maxAmountIn\r\n                        0 // sqrtPriceLimitX96\r\n                    );\r\n\r\n                _amountIn = ISwapRouter(router).exactOutputSingle(params);\r\n            } else {\r\n                bytes memory path = abi.encodePacked(\r\n                    _to,\r\n                    uniFees[base][_to], // base-to fee\r\n                    base,\r\n                    uniFees[_from][base], // from-base fee\r\n                    _from\r\n                );\r\n\r\n                _amountIn = ISwapRouter(router).exactOutput(\r\n                    ISwapRouter.ExactOutputParams(\r\n                        path,\r\n                        address(this),\r\n                        block.timestamp,\r\n                        _amountTo, // How much we want out\r\n                        _maxAmountFrom\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal safe function to make sure the contract you want to\r\n     * interact with has enough allowance to pull the desired tokens.\r\n     *\r\n     * @param _contract The address of the contract that will move the token.\r\n     * @param _token The ERC-20 token that will be getting spent.\r\n     * @param _amount The amount of `_token` to be spent.\r\n     */\r\n    function _checkAllowance(\r\n        address _contract,\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal virtual {\r\n        if (ERC20(_token).allowance(address(this), _contract) < _amount) {\r\n            ERC20(_token).safeApprove(_contract, 0);\r\n            ERC20(_token).safeApprove(_contract, _amount);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITradeFactory {\r\n    function enable(address, address) external;\r\n\r\n    function disable(address, address) external;\r\n}\r\n\r\n/**\r\n * @title Trade Factory Swapper\r\n * @dev Inherit to use a Trade Factory for token swapping.\r\n *   External functions with the proper modifiers should be\r\n *   declared in the strategy that inherits this to add a\r\n *   Trade Factory and the tokens to sell.\r\n */\r\nabstract contract TradeFactorySwapper {\r\n    using SafeERC20 for ERC20;\r\n\r\n    // Address of the trade factory in use if any.\r\n    address private _tradeFactory;\r\n\r\n    // Array of any tokens added to be sold.\r\n    address[] private _rewardTokens;\r\n\r\n    /**\r\n     * @notice Get the current Trade Factory.\r\n     * @dev We use a getter so trade factory can only be set through the\r\n     *   proper functions to avoid issues.\r\n     * @return The current trade factory in use if any.\r\n     */\r\n    function tradeFactory() public view returns (address) {\r\n        return _tradeFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current tokens being sold through the Trade Factory.\r\n     * @dev We use a getter so the array can only be set through the\r\n     *   proper functions to avoid issues.\r\n     * @return The current array of tokens being sold if any.\r\n     */\r\n    function rewardTokens() public view returns (address[] memory) {\r\n        return _rewardTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Add an array of tokens to sell to its corresponding `_to_.\r\n     */\r\n    function _addTokens(address[] memory _from, address[] memory _to) internal {\r\n        for (uint256 i; i < _from.length; ++i) {\r\n            _addToken(_from[i], _to[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add the `_tokenFrom` to be sold to `_tokenTo` through the Trade Factory\r\n     */\r\n    function _addToken(address _tokenFrom, address _tokenTo) internal {\r\n        address _tf = tradeFactory();\r\n        if (_tf != address(0)) {\r\n            ERC20(_tokenFrom).forceApprove(_tf, type(uint256).max);\r\n            ITradeFactory(_tf).enable(_tokenFrom, _tokenTo);\r\n        }\r\n\r\n        _rewardTokens.push(_tokenFrom);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a specific `_tokenFrom` that was previously added to not be\r\n     * sold through the Trade Factory any more.\r\n     */\r\n    function _removeToken(address _tokenFrom, address _tokenTo) internal {\r\n        address _tf = tradeFactory();\r\n        address[] memory _rewardTokensLocal = rewardTokens();\r\n        for (uint256 i; i < _rewardTokensLocal.length; ++i) {\r\n            if (_rewardTokensLocal[i] == _tokenFrom) {\r\n                if (i != _rewardTokensLocal.length - 1) {\r\n                    // if it isn't the last token, swap with the last one/\r\n                    _rewardTokensLocal[i] = _rewardTokensLocal[\r\n                        _rewardTokensLocal.length - 1\r\n                    ];\r\n                }\r\n\r\n                if (_tf != address(0)) {\r\n                    ERC20(_tokenFrom).forceApprove(_tf, 0);\r\n                    ITradeFactory(_tf).disable(_tokenFrom, _tokenTo);\r\n                }\r\n\r\n                // Set to storage\r\n                _rewardTokens = _rewardTokensLocal;\r\n                _rewardTokens.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes all reward tokens and delete the Trade Factory.\r\n     */\r\n    function _deleteRewardTokens() internal {\r\n        _removeTradeFactoryPermissions();\r\n        delete _rewardTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Set a new instance of the Trade Factory.\r\n     *   This will remove any old approvals for current factory if any.\r\n     *   Then will add the new approvals for the new Trade Factory.\r\n     *   Can pass in address(0) for `tradeFactory_` to remove all permissions.\r\n     */\r\n    function _setTradeFactory(\r\n        address tradeFactory_,\r\n        address _tokenTo\r\n    ) internal {\r\n        address _tf = tradeFactory();\r\n\r\n        // Remove any old Trade Factory\r\n        if (_tf != address(0)) {\r\n            _removeTradeFactoryPermissions();\r\n        }\r\n\r\n        // If setting to address(0) we are done.\r\n        if (tradeFactory_ == address(0)) return;\r\n\r\n        address[] memory _rewardTokensLocal = _rewardTokens;\r\n\r\n        for (uint256 i; i < _rewardTokensLocal.length; ++i) {\r\n            address token = _rewardTokensLocal[i];\r\n\r\n            ERC20(token).forceApprove(tradeFactory_, type(uint256).max);\r\n            ITradeFactory(tradeFactory_).enable(token, _tokenTo);\r\n        }\r\n\r\n        // Set to storage\r\n        _tradeFactory = tradeFactory_;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove any active approvals and set the trade factory to address(0).\r\n     */\r\n    function _removeTradeFactoryPermissions() internal {\r\n        address _tf = tradeFactory();\r\n        address[] memory rewardTokensLocal = rewardTokens();\r\n        for (uint256 i; i < rewardTokensLocal.length; ++i) {\r\n            ERC20(rewardTokensLocal[i]).forceApprove(_tf, 0);\r\n        }\r\n\r\n        _tradeFactory = address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Used for TradeFactory to claim rewards.\r\n     */\r\n    function claimRewards() external {\r\n        require(msg.sender == _tradeFactory, \"!authorized\");\r\n        _claimRewards();\r\n    }\r\n\r\n    /**\r\n     * @dev Need to be overridden to claim rewards mid report cycles.\r\n     */\r\n    function _claimRewards() internal virtual;\r\n}\r\n\r\n// Math library from https://github.com/ajna-finance/ajna-core/blob/master/src/libraries/internal/Maths.sol\r\n\r\n/**\r\n    @title  Maths library\r\n    @notice Internal library containing common maths.\r\n */\r\nlibrary Maths {\r\n    uint256 internal constant WAD = 1e18;\r\n    uint256 internal constant RAY = 1e27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + WAD / 2) / WAD;\r\n    }\r\n\r\n    function floorWmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y) / WAD;\r\n    }\r\n\r\n    function ceilWmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + WAD - 1) / WAD;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD + y / 2) / y;\r\n    }\r\n\r\n    function floorWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD) / y;\r\n    }\r\n\r\n    function ceilWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD + y - 1) / y;\r\n    }\r\n\r\n    function ceilDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x + y - 1) / y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function wad(uint256 x) internal pure returns (uint256) {\r\n        return x * WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + RAY / 2) / RAY;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*************************/\r\n    /*** Integer Functions ***/\r\n    /*************************/\r\n\r\n    function maxInt(int256 x, int256 y) internal pure returns (int256) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function minInt(int256 x, int256 y) internal pure returns (int256) {\r\n        return x <= y ? x : y;\r\n    }\r\n}\r\n\r\ncontract Governance {\r\n    /// @notice Emitted when the governance address is updated.\r\n    event GovernanceTransferred(\r\n        address indexed previousGovernance,\r\n        address indexed newGovernance\r\n    );\r\n\r\n    modifier onlyGovernance() {\r\n        _checkGovernance();\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks if the msg sender is the governance.\r\n    function _checkGovernance() internal view virtual {\r\n        require(governance == msg.sender, \"!governance\");\r\n    }\r\n\r\n    /// @notice Address that can set the default base fee and provider\r\n    address public governance;\r\n\r\n    constructor(address _governance) {\r\n        governance = _governance;\r\n\r\n        emit GovernanceTransferred(address(0), _governance);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new address as the governance of the contract.\r\n     * @dev Throws if the caller is not current governance.\r\n     * @param _newGovernance The new governance address.\r\n     */\r\n    function transferGovernance(\r\n        address _newGovernance\r\n    ) external virtual onlyGovernance {\r\n        require(_newGovernance != address(0), \"ZERO ADDRESS\");\r\n        address oldGovernance = governance;\r\n        governance = _newGovernance;\r\n\r\n        emit GovernanceTransferred(oldGovernance, _newGovernance);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ninterface ITaker {\r\n    function auctionTakeCallback(\r\n        bytes32 _auctionId,\r\n        address _sender,\r\n        uint256 _amountTaken,\r\n        uint256 _amountNeeded,\r\n        bytes calldata _data\r\n    ) external;\r\n}\r\n\r\n/// @notice Interface that the optional `hook` contract should implement if the non-standard logic is desired.\r\ninterface IHook {\r\n    function kickable(address _fromToken) external view returns (uint256);\r\n\r\n    function auctionKicked(address _fromToken) external returns (uint256);\r\n\r\n    function preTake(\r\n        address _fromToken,\r\n        uint256 _amountToTake,\r\n        uint256 _amountToPay\r\n    ) external;\r\n\r\n    function postTake(\r\n        address _toToken,\r\n        uint256 _amountTaken,\r\n        uint256 _amountPayed\r\n    ) external;\r\n}\r\n\r\n/**\r\n *   @title Auction\r\n *   @author yearn.fi\r\n *   @notice General use dutch auction contract for token sales.\r\n */\r\ncontract Auction is Governance, ReentrancyGuard {\r\n    using SafeERC20 for ERC20;\r\n\r\n    /// @notice Emitted when a new auction is enabled\r\n    event AuctionEnabled(\r\n        bytes32 auctionId,\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed auctionAddress\r\n    );\r\n\r\n    /// @notice Emitted when an auction is disabled.\r\n    event AuctionDisabled(\r\n        bytes32 auctionId,\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed auctionAddress\r\n    );\r\n\r\n    /// @notice Emitted when auction has been kicked.\r\n    event AuctionKicked(bytes32 auctionId, uint256 available);\r\n\r\n    /// @notice Emitted when any amount of an active auction was taken.\r\n    event AuctionTaken(\r\n        bytes32 auctionId,\r\n        uint256 amountTaken,\r\n        uint256 amountLeft\r\n    );\r\n\r\n    /// @dev Store address and scaler in one slot.\r\n    struct TokenInfo {\r\n        address tokenAddress;\r\n        uint96 scaler;\r\n    }\r\n\r\n    /// @notice Store all the auction specific information.\r\n    struct AuctionInfo {\r\n        TokenInfo fromInfo;\r\n        uint96 kicked;\r\n        address receiver;\r\n        uint128 initialAvailable;\r\n        uint128 currentAvailable;\r\n    }\r\n\r\n    /// @notice Store the hook address and each flag in one slot.\r\n    struct Hook {\r\n        address hook;\r\n        bool kickable;\r\n        bool kick;\r\n        bool preTake;\r\n        bool postTake;\r\n    }\r\n\r\n    uint256 internal constant WAD = 1e18;\r\n\r\n    /// @notice Used for the price decay.\r\n    uint256 internal constant MINUTE_HALF_LIFE =\r\n        0.988514020352896135_356867505 * 1e27; // 0.5^(1/60)\r\n\r\n    /// @notice Struct to hold the info for `want`.\r\n    TokenInfo internal wantInfo;\r\n\r\n    /// @notice Contract to call during write functions.\r\n    Hook internal hook_;\r\n\r\n    /// @notice The amount to start the auction at.\r\n    uint256 public startingPrice;\r\n\r\n    /// @notice The time that each auction lasts.\r\n    uint256 public auctionLength;\r\n\r\n    /// @notice The minimum time to wait between auction 'kicks'.\r\n    uint256 public auctionCooldown;\r\n\r\n    /// @notice Mapping from an auction ID to its struct.\r\n    mapping(bytes32 => AuctionInfo) public auctions;\r\n\r\n    /// @notice Array of all the enabled auction for this contract.\r\n    bytes32[] public enabledAuctions;\r\n\r\n    constructor() Governance(msg.sender) {}\r\n\r\n    /**\r\n     * @notice Initializes the Auction contract with initial parameters.\r\n     * @param _want Address this auction is selling to.\r\n     * @param _hook Address of the hook contract (optional).\r\n     * @param _governance Address of the contract governance.\r\n     * @param _auctionLength Duration of each auction in seconds.\r\n     * @param _auctionCooldown Cooldown period between auctions in seconds.\r\n     * @param _startingPrice Starting price for each auction.\r\n     */\r\n    function initialize(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) external virtual {\r\n        require(auctionLength == 0, \"initialized\");\r\n        require(_want != address(0), \"ZERO ADDRESS\");\r\n        require(_auctionLength != 0, \"length\");\r\n        require(_auctionLength < _auctionCooldown, \"cooldown\");\r\n        require(_startingPrice != 0, \"starting price\");\r\n\r\n        // Cannot have more than 18 decimals.\r\n        uint256 decimals = ERC20(_want).decimals();\r\n        require(decimals <= 18, \"unsupported decimals\");\r\n\r\n        // Set variables\r\n        wantInfo = TokenInfo({\r\n            tokenAddress: _want,\r\n            scaler: uint96(WAD / 10 ** decimals)\r\n        });\r\n\r\n        // If we are using a hook.\r\n        if (_hook != address(0)) {\r\n            // All flags default to true.\r\n            hook_ = Hook({\r\n                hook: _hook,\r\n                kickable: true,\r\n                kick: true,\r\n                preTake: true,\r\n                postTake: true\r\n            });\r\n        }\r\n\r\n        governance = _governance;\r\n        auctionLength = _auctionLength;\r\n        auctionCooldown = _auctionCooldown;\r\n        startingPrice = _startingPrice;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         VIEW METHODS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Get the address of this auctions want token.\r\n     * @return . The want token.\r\n     */\r\n    function want() public view virtual returns (address) {\r\n        return wantInfo.tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the address of the hook if any.\r\n     * @return . The hook.\r\n     */\r\n    function hook() external view virtual returns (address) {\r\n        return hook_.hook;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current status of which hooks are being used.\r\n     * @return . If the kickable hook is used.\r\n     * @return . If the kick hook is used.\r\n     * @return . If the preTake hook is used.\r\n     * @return . If the postTake hook is used.\r\n     */\r\n    function getHookFlags()\r\n        external\r\n        view\r\n        virtual\r\n        returns (bool, bool, bool, bool)\r\n    {\r\n        Hook memory _hook = hook_;\r\n        return (_hook.kickable, _hook.kick, _hook.preTake, _hook.postTake);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the length of the enabled auctions array.\r\n     */\r\n    function numberOfEnabledAuctions() external view virtual returns (uint256) {\r\n        return enabledAuctions.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the unique auction identifier.\r\n     * @param _from The address of the token to sell.\r\n     * @return bytes32 A unique auction identifier.\r\n     */\r\n    function getAuctionId(address _from) public view virtual returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_from, want(), address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves information about a specific auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return _from The address of the token to sell.\r\n     * @return _to The address of the token to buy.\r\n     * @return _kicked The timestamp of the last kick.\r\n     * @return _available The current available amount for the auction.\r\n     */\r\n    function auctionInfo(\r\n        bytes32 _auctionId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            address _from,\r\n            address _to,\r\n            uint256 _kicked,\r\n            uint256 _available\r\n        )\r\n    {\r\n        AuctionInfo memory auction = auctions[_auctionId];\r\n\r\n        return (\r\n            auction.fromInfo.tokenAddress,\r\n            want(),\r\n            auction.kicked,\r\n            auction.kicked + auctionLength > block.timestamp\r\n                ? auction.currentAvailable\r\n                : 0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the pending amount available for the next auction.\r\n     * @dev Defaults to the auctions balance of the from token if no hook.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return uint256 The amount that can be kicked into the auction.\r\n     */\r\n    function kickable(\r\n        bytes32 _auctionId\r\n    ) external view virtual returns (uint256) {\r\n        // If not enough time has passed then `kickable` is 0.\r\n        if (auctions[_auctionId].kicked + auctionCooldown > block.timestamp) {\r\n            return 0;\r\n        }\r\n\r\n        // Check if we have a hook to call.\r\n        Hook memory _hook = hook_;\r\n        if (_hook.kickable) {\r\n            // If so default to the hooks logic.\r\n            return\r\n                IHook(_hook.hook).kickable(\r\n                    auctions[_auctionId].fromInfo.tokenAddress\r\n                );\r\n        } else {\r\n            // Else just use the full balance of this contract.\r\n            return\r\n                ERC20(auctions[_auctionId].fromInfo.tokenAddress).balanceOf(\r\n                    address(this)\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of `want` needed to buy a specific amount of `from`.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _amountToTake The amount of `from` to take in the auction.\r\n     * @return . The amount of `want` needed to fulfill the take amount.\r\n     */\r\n    function getAmountNeeded(\r\n        bytes32 _auctionId,\r\n        uint256 _amountToTake\r\n    ) external view virtual returns (uint256) {\r\n        return\r\n            _getAmountNeeded(\r\n                auctions[_auctionId],\r\n                _amountToTake,\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of `want` needed to buy a specific amount of `from` at a specific timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _amountToTake The amount `from` to take in the auction.\r\n     * @param _timestamp The specific timestamp for calculating the amount needed.\r\n     * @return . The amount of `want` needed to fulfill the take amount.\r\n     */\r\n    function getAmountNeeded(\r\n        bytes32 _auctionId,\r\n        uint256 _amountToTake,\r\n        uint256 _timestamp\r\n    ) external view virtual returns (uint256) {\r\n        return\r\n            _getAmountNeeded(auctions[_auctionId], _amountToTake, _timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the amount of `want` needed to buy `_amountToTake`.\r\n     */\r\n    function _getAmountNeeded(\r\n        AuctionInfo memory _auction,\r\n        uint256 _amountToTake,\r\n        uint256 _timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        return\r\n            // Scale _amountToTake to 1e18\r\n            (_amountToTake *\r\n                _auction.fromInfo.scaler *\r\n                // Price is always 1e18\r\n                _price(\r\n                    _auction.kicked,\r\n                    _auction.initialAvailable * _auction.fromInfo.scaler,\r\n                    _timestamp\r\n                )) /\r\n            1e18 /\r\n            // Scale back down to want.\r\n            wantInfo.scaler;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the price of the auction at the current timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return . The price of the auction.\r\n     */\r\n    function price(bytes32 _auctionId) external view virtual returns (uint256) {\r\n        return price(_auctionId, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the price of the auction at a specific timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _timestamp The specific timestamp for calculating the price.\r\n     * @return . The price of the auction.\r\n     */\r\n    function price(\r\n        bytes32 _auctionId,\r\n        uint256 _timestamp\r\n    ) public view virtual returns (uint256) {\r\n        // Get unscaled price and scale it down.\r\n        return\r\n            _price(\r\n                auctions[_auctionId].kicked,\r\n                auctions[_auctionId].initialAvailable *\r\n                    auctions[_auctionId].fromInfo.scaler,\r\n                _timestamp\r\n            ) / wantInfo.scaler;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate the scaled price based on auction parameters.\r\n     * @param _kicked The timestamp the auction was kicked.\r\n     * @param _available The initial available amount scaled 1e18.\r\n     * @param _timestamp The specific timestamp for calculating the price.\r\n     * @return . The calculated price scaled to 1e18.\r\n     */\r\n    function _price(\r\n        uint256 _kicked,\r\n        uint256 _available,\r\n        uint256 _timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        if (_available == 0) return 0;\r\n\r\n        uint256 secondsElapsed = _timestamp - _kicked;\r\n\r\n        if (secondsElapsed > auctionLength) return 0;\r\n\r\n        // Exponential decay from https://github.com/ajna-finance/ajna-core/blob/master/src/libraries/helpers/PoolHelper.sol\r\n        uint256 hoursComponent = 1e27 >> (secondsElapsed / 3600);\r\n        uint256 minutesComponent = Maths.rpow(\r\n            MINUTE_HALF_LIFE,\r\n            (secondsElapsed % 3600) / 60\r\n        );\r\n        uint256 initialPrice = Maths.wdiv(startingPrice * 1e18, _available);\r\n\r\n        return\r\n            (initialPrice * Maths.rmul(hoursComponent, minutesComponent)) /\r\n            1e27;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Enables a new auction.\r\n     * @dev Uses governance as the receiver.\r\n     * @param _from The address of the token to be auctioned.\r\n     * @return . The unique identifier of the enabled auction.\r\n     */\r\n    function enable(address _from) external virtual returns (bytes32) {\r\n        return enable(_from, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Enables a new auction.\r\n     * @param _from The address of the token to be auctioned.\r\n     * @param _receiver The address that will receive the funds in the auction.\r\n     * @return _auctionId The unique identifier of the enabled auction.\r\n     */\r\n    function enable(\r\n        address _from,\r\n        address _receiver\r\n    ) public virtual onlyGovernance returns (bytes32 _auctionId) {\r\n        address _want = want();\r\n        require(_from != address(0) && _from != _want, \"ZERO ADDRESS\");\r\n        require(\r\n            _receiver != address(0) && _receiver != address(this),\r\n            \"receiver\"\r\n        );\r\n        // Cannot have more than 18 decimals.\r\n        uint256 decimals = ERC20(_from).decimals();\r\n        require(decimals <= 18, \"unsupported decimals\");\r\n\r\n        // Calculate the id.\r\n        _auctionId = getAuctionId(_from);\r\n\r\n        require(\r\n            auctions[_auctionId].fromInfo.tokenAddress == address(0),\r\n            \"already enabled\"\r\n        );\r\n\r\n        // Store all needed info.\r\n        auctions[_auctionId].fromInfo = TokenInfo({\r\n            tokenAddress: _from,\r\n            scaler: uint96(WAD / 10 ** decimals)\r\n        });\r\n        auctions[_auctionId].receiver = _receiver;\r\n\r\n        // Add to the array.\r\n        enabledAuctions.push(_auctionId);\r\n\r\n        emit AuctionEnabled(_auctionId, _from, _want, address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Disables an existing auction.\r\n     * @dev Only callable by governance.\r\n     * @param _from The address of the token being sold.\r\n     */\r\n    function disable(address _from) external virtual {\r\n        disable(_from, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Disables an existing auction.\r\n     * @dev Only callable by governance.\r\n     * @param _from The address of the token being sold.\r\n     * @param _index The index the auctionId is at in the array.\r\n     */\r\n    function disable(\r\n        address _from,\r\n        uint256 _index\r\n    ) public virtual onlyGovernance {\r\n        bytes32 _auctionId = getAuctionId(_from);\r\n\r\n        // Make sure the auction was enabled.\r\n        require(\r\n            auctions[_auctionId].fromInfo.tokenAddress != address(0),\r\n            \"not enabled\"\r\n        );\r\n\r\n        // Remove the struct.\r\n        delete auctions[_auctionId];\r\n\r\n        // Remove the auction ID from the array.\r\n        bytes32[] memory _enabledAuctions = enabledAuctions;\r\n        if (_enabledAuctions[_index] != _auctionId) {\r\n            // If the _index given is not the id find it.\r\n            for (uint256 i = 0; i < _enabledAuctions.length; ++i) {\r\n                if (_enabledAuctions[i] == _auctionId) {\r\n                    _index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Move the id to the last spot if not there.\r\n        if (_index < _enabledAuctions.length - 1) {\r\n            _enabledAuctions[_index] = _enabledAuctions[\r\n                _enabledAuctions.length - 1\r\n            ];\r\n            // Update the array.\r\n            enabledAuctions = _enabledAuctions;\r\n        }\r\n\r\n        // Pop the id off the array.\r\n        enabledAuctions.pop();\r\n\r\n        emit AuctionDisabled(_auctionId, _from, want(), address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Set the flags to be used with hook.\r\n     * @param _kickable If the kickable hook should be used.\r\n     * @param _kick If the kick hook should be used.\r\n     * @param _preTake If the preTake hook should be used.\r\n     * @param _postTake If the postTake should be used.\r\n     */\r\n    function setHookFlags(\r\n        bool _kickable,\r\n        bool _kick,\r\n        bool _preTake,\r\n        bool _postTake\r\n    ) external virtual onlyGovernance {\r\n        address _hook = hook_.hook;\r\n        require(_hook != address(0), \"no hook set\");\r\n\r\n        hook_ = Hook({\r\n            hook: _hook,\r\n            kickable: _kickable,\r\n            kick: _kick,\r\n            preTake: _preTake,\r\n            postTake: _postTake\r\n        });\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                      PARTICIPATE IN AUCTION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Kicks off an auction, updating its status and making funds available for bidding.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return available The available amount for bidding on in the auction.\r\n     */\r\n    function kick(\r\n        bytes32 _auctionId\r\n    ) external virtual nonReentrant returns (uint256 available) {\r\n        address _fromToken = auctions[_auctionId].fromInfo.tokenAddress;\r\n        require(_fromToken != address(0), \"not enabled\");\r\n        require(\r\n            block.timestamp > auctions[_auctionId].kicked + auctionCooldown,\r\n            \"too soon\"\r\n        );\r\n\r\n        Hook memory _hook = hook_;\r\n        // Use hook if defined.\r\n        if (_hook.kick) {\r\n            available = IHook(_hook.hook).auctionKicked(_fromToken);\r\n        } else {\r\n            // Else just use current balance.\r\n            available = ERC20(_fromToken).balanceOf(address(this));\r\n        }\r\n\r\n        require(available != 0, \"nothing to kick\");\r\n\r\n        // Update the auctions status.\r\n        auctions[_auctionId].kicked = uint96(block.timestamp);\r\n        auctions[_auctionId].initialAvailable = uint128(available);\r\n        auctions[_auctionId].currentAvailable = uint128(available);\r\n\r\n        emit AuctionKicked(_auctionId, available);\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @dev Defaults to taking the full amount and sending to the msg sender.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return . The amount of fromToken taken in the auction.\r\n     */\r\n    function take(bytes32 _auctionId) external virtual returns (uint256) {\r\n        return _take(_auctionId, type(uint256).max, msg.sender, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction with a specified maximum amount.\r\n     * @dev Uses the sender's address as the receiver.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @return . The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, msg.sender, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @param _receiver The address that will receive the fromToken.\r\n     * @return _amountTaken The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, _receiver, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @param _receiver The address that will receive the fromToken.\r\n     * @param _data The data signify the callback should be used and sent with it.\r\n     * @return _amountTaken The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver,\r\n        bytes calldata _data\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, _receiver, _data);\r\n    }\r\n\r\n    /// @dev Implements the take of the auction.\r\n    function _take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver,\r\n        bytes memory _data\r\n    ) internal virtual nonReentrant returns (uint256 _amountTaken) {\r\n        AuctionInfo memory auction = auctions[_auctionId];\r\n        // Make sure the auction is active.\r\n        require(\r\n            auction.kicked + auctionLength >= block.timestamp,\r\n            \"not kicked\"\r\n        );\r\n\r\n        // Max amount that can be taken.\r\n        _amountTaken = auction.currentAvailable > _maxAmount\r\n            ? _maxAmount\r\n            : auction.currentAvailable;\r\n\r\n        // Get the amount needed\r\n        uint256 needed = _getAmountNeeded(\r\n            auction,\r\n            _amountTaken,\r\n            block.timestamp\r\n        );\r\n\r\n        require(needed != 0, \"zero needed\");\r\n\r\n        // How much is left in this auction.\r\n        uint256 left;\r\n        unchecked {\r\n            left = auction.currentAvailable - _amountTaken;\r\n        }\r\n        auctions[_auctionId].currentAvailable = uint128(left);\r\n\r\n        Hook memory _hook = hook_;\r\n        if (_hook.preTake) {\r\n            // Use hook if defined.\r\n            IHook(_hook.hook).preTake(\r\n                auction.fromInfo.tokenAddress,\r\n                _amountTaken,\r\n                needed\r\n            );\r\n        }\r\n\r\n        // Send `from`.\r\n        ERC20(auction.fromInfo.tokenAddress).safeTransfer(\r\n            _receiver,\r\n            _amountTaken\r\n        );\r\n\r\n        // If the caller has specified data.\r\n        if (_data.length != 0) {\r\n            // Do the callback.\r\n            ITaker(_receiver).auctionTakeCallback(\r\n                _auctionId,\r\n                msg.sender,\r\n                _amountTaken,\r\n                needed,\r\n                _data\r\n            );\r\n        }\r\n\r\n        // Cache the want address.\r\n        address _want = want();\r\n\r\n        // Pull `want`.\r\n        ERC20(_want).safeTransferFrom(msg.sender, auction.receiver, needed);\r\n\r\n        // Post take hook if defined.\r\n        if (_hook.postTake) {\r\n            IHook(_hook.hook).postTake(_want, _amountTaken, needed);\r\n        }\r\n\r\n        emit AuctionTaken(_auctionId, _amountTaken, left);\r\n    }\r\n}\r\n\r\ncontract Clonable {\r\n    /// @notice Set to the address to auto clone from.\r\n    address public original;\r\n\r\n    /**\r\n     * @notice Clone the contracts default `original` contract.\r\n     * @return Address of the new Minimal Proxy clone.\r\n     */\r\n    function _clone() internal virtual returns (address) {\r\n        return _clone(original);\r\n    }\r\n\r\n    /**\r\n     * @notice Clone any `_original` contract.\r\n     * @return _newContract Address of the new Minimal Proxy clone.\r\n     */\r\n    function _clone(\r\n        address _original\r\n    ) internal virtual returns (address _newContract) {\r\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\r\n        bytes20 addressBytes = bytes20(_original);\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(\r\n                clone_code,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(\r\n                add(clone_code, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            _newContract := create(0, clone_code, 0x37)\r\n        }\r\n    }\r\n}\r\n\r\n/// @title AuctionFactory\r\n/// @notice Deploy a new Auction.\r\ncontract AuctionFactory is Clonable {\r\n    event DeployedNewAuction(address indexed auction, address indexed want);\r\n\r\n    /// @notice The time that each auction lasts.\r\n    uint256 public constant DEFAULT_AUCTION_LENGTH = 1 days;\r\n\r\n    /// @notice The minimum time to wait between auction 'kicks'.\r\n    uint256 public constant DEFAULT_AUCTION_COOLDOWN = 5 days;\r\n\r\n    /// @notice The amount to start the auction with.\r\n    uint256 public constant DEFAULT_STARTING_PRICE = 1_000_000;\r\n\r\n    /// @notice Full array of all auctions deployed through this factory.\r\n    address[] public auctions;\r\n\r\n    constructor() {\r\n        // Deploy the original\r\n        original = address(new Auction());\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(address _want) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                address(0),\r\n                msg.sender,\r\n                DEFAULT_AUCTION_LENGTH,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                msg.sender,\r\n                DEFAULT_AUCTION_LENGTH,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                DEFAULT_AUCTION_LENGTH,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @param _auctionLength Length of the auction in seconds.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                _auctionLength,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @param _auctionLength Length of the auction in seconds.\r\n     * @param _auctionCooldown Minimum time period between kicks in seconds.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                _auctionLength,\r\n                _auctionCooldown,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @param _auctionLength Length of the auction in seconds.\r\n     * @param _auctionCooldown Minimum time period between kicks in seconds.\r\n     * @param _startingPrice Starting price for the auction (no decimals).\r\n     *  NOTE: The starting price should be without decimals (1k == 1_000).\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                _auctionLength,\r\n                _auctionCooldown,\r\n                _startingPrice\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and initializes a new Auction\r\n     */\r\n    function _createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) internal returns (address _newAuction) {\r\n        _newAuction = _clone();\r\n\r\n        Auction(_newAuction).initialize(\r\n            _want,\r\n            _hook,\r\n            _governance,\r\n            _auctionLength,\r\n            _auctionCooldown,\r\n            _startingPrice\r\n        );\r\n\r\n        auctions.push(_newAuction);\r\n\r\n        emit DeployedNewAuction(_newAuction, _want);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the full list of auctions deployed through this factory.\r\n     */\r\n    function getAllAuctions() external view returns (address[] memory) {\r\n        return auctions;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the total number of auctions deployed through this factory.\r\n     */\r\n    function numberOfAuctions() external view returns (uint256) {\r\n        return auctions.length;\r\n    }\r\n}\r\n\r\n/**\r\n *   @title AuctionSwapper\r\n *   @author yearn.fi\r\n *   @dev Helper contract for a strategy to use dutch auctions for token sales.\r\n *\r\n *   This contract is meant to be inherited by a V3 strategy in order\r\n *   to easily integrate dutch auctions into a contract for token swaps.\r\n *\r\n *   The strategist will need to implement a way to call `_enableAuction`\r\n *   for an token pair they want to use, or a setter to manually set the\r\n *   `auction` contract.\r\n *\r\n *   The contract comes with all of the needed function to act as a `hook`\r\n *   contract for the specific auction contract with the ability to override\r\n *   any of the functions to implement custom hooks.\r\n *\r\n *   NOTE: If any hooks are not desired, the strategist should also\r\n *   implement a way to call the {setHookFlags} on the auction contract\r\n *   to avoid unnecessary gas for unused functions.\r\n */\r\ncontract AuctionSwapper {\r\n    using SafeERC20 for ERC20;\r\n\r\n    modifier onlyAuction() {\r\n        _isAuction();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check the caller is the auction contract for hooks.\r\n     */\r\n    function _isAuction() internal view virtual {\r\n        require(msg.sender == auction, \"!auction\");\r\n    }\r\n\r\n    /// @notice The pre-deployed Auction factory for cloning.\r\n    address public constant auctionFactory =\r\n        0xE6aB098E8582178A76DC80d55ca304d1Dec11AD8;\r\n\r\n    /// @notice Address of the specific Auction this strategy uses.\r\n    address public auction;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    AUCTION STARTING AND STOPPING\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _enableAuction(\r\n        address _from,\r\n        address _want\r\n    ) internal virtual returns (bytes32) {\r\n        return _enableAuction(_from, _want, 1 days, 3 days, 1e6);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to enable a new Auction to sell `_from` to `_want`.\r\n     *   If this is the first auction enabled it will deploy a new `auction`\r\n     *   contract to use from the factory.\r\n     *\r\n     * NOTE: This only supports one `_want` token per strategy.\r\n     *\r\n     * @param _from Token to sell\r\n     * @param _want Token to buy.\r\n     * @return .The auction ID.\r\n     */\r\n    function _enableAuction(\r\n        address _from,\r\n        address _want,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) internal virtual returns (bytes32) {\r\n        address _auction = auction;\r\n\r\n        // If this is the first auction.\r\n        if (_auction == address(0)) {\r\n            // Deploy a new auction\r\n            _auction = AuctionFactory(auctionFactory).createNewAuction(\r\n                _want,\r\n                address(this),\r\n                address(this),\r\n                _auctionLength,\r\n                _auctionCooldown,\r\n                _startingPrice\r\n            );\r\n            // Store it for future use.\r\n            auction = _auction;\r\n        } else {\r\n            // Can only use one `want` per auction contract.\r\n            require(Auction(_auction).want() == _want, \"wrong want\");\r\n        }\r\n\r\n        // Enable new auction for `_from` token.\r\n        return Auction(_auction).enable(_from);\r\n    }\r\n\r\n    /**\r\n     * @dev Disable an auction for a given token.\r\n     * @param _from The token that was being sold.\r\n     */\r\n    function _disableAuction(address _from) internal virtual {\r\n        Auction(auction).disable(_from);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        OPTIONAL AUCTION HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Return how much `_token` could currently be kicked into auction.\r\n     * @dev This can be overridden by a strategist to implement custom logic.\r\n     * @param _token Address of the `_from` token.\r\n     * @return . The amount of `_token` ready to be auctioned off.\r\n     */\r\n    function kickable(address _token) public view virtual returns (uint256) {\r\n        return ERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev To override if something other than just sending the loose balance\r\n     *  of `_token` to the auction is desired, such as accruing and and claiming rewards.\r\n     *\r\n     * @param _token Address of the token being auctioned off\r\n     */\r\n    function _auctionKicked(address _token) internal virtual returns (uint256) {\r\n        // Send any loose balance to the auction.\r\n        uint256 balance = ERC20(_token).balanceOf(address(this));\r\n        if (balance != 0) ERC20(_token).safeTransfer(auction, balance);\r\n        return ERC20(_token).balanceOf(auction);\r\n    }\r\n\r\n    /**\r\n     * @dev To override if something needs to be done before a take is completed.\r\n     *   This can be used if the auctioned token only will be freed up when a `take`\r\n     *   occurs.\r\n     * @param _token Address of the token being taken.\r\n     * @param _amountToTake Amount of `_token` needed.\r\n     * @param _amountToPay Amount of `want` that will be payed.\r\n     */\r\n    function _preTake(\r\n        address _token,\r\n        uint256 _amountToTake,\r\n        uint256 _amountToPay\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev To override if a post take action is desired.\r\n     *\r\n     * This could be used to re-deploy the bought token back into the yield source,\r\n     * or in conjunction with {_preTake} to check that the price sold at was within\r\n     * some allowed range.\r\n     *\r\n     * @param _token Address of the token that the strategy was sent.\r\n     * @param _amountTaken Amount of the from token taken.\r\n     * @param _amountPayed Amount of `_token` that was sent to the strategy.\r\n     */\r\n    function _postTake(\r\n        address _token,\r\n        uint256 _amountTaken,\r\n        uint256 _amountPayed\r\n    ) internal virtual {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            AUCTION HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice External hook for the auction to call during a `kick`.\r\n     * @dev Will call the internal version for the strategist to override.\r\n     * @param _token Token being kicked into auction.\r\n     * @return . The amount of `_token` to be auctioned off.\r\n     */\r\n    function auctionKicked(\r\n        address _token\r\n    ) external virtual onlyAuction returns (uint256) {\r\n        return _auctionKicked(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice External hook for the auction to call before a `take`.\r\n     * @dev Will call the internal version for the strategist to override.\r\n     * @param _token Token being taken in the auction.\r\n     * @param _amountToTake The amount of `_token` to be sent to the taker.\r\n     * @param _amountToPay Amount of `want` that will be payed.\r\n     */\r\n    function preTake(\r\n        address _token,\r\n        uint256 _amountToTake,\r\n        uint256 _amountToPay\r\n    ) external virtual onlyAuction {\r\n        _preTake(_token, _amountToTake, _amountToPay);\r\n    }\r\n\r\n    /**\r\n     * @notice External hook for the auction to call after a `take` completed.\r\n     * @dev Will call the internal version for the strategist to override.\r\n     * @param _token The `want` token that was sent to the strategy.\r\n     * @param _amountTaken Amount of the from token taken.\r\n     * @param _amountPayed Amount of `_token` that was sent to the strategy.\r\n     */\r\n    function postTake(\r\n        address _token,\r\n        uint256 _amountTaken,\r\n        uint256 _amountPayed\r\n    ) external virtual onlyAuction {\r\n        _postTake(_token, _amountTaken, _amountPayed);\r\n    }\r\n}\r\n\r\n/// @title yearn-v3-Pendle\r\n/// @author mil0x\r\n/// @notice yearn-v3 Strategy that autocompounds Pendle LP positions.\r\ncontract PendleLPCompounder is BaseHealthCheck, UniswapV3Swapper, TradeFactorySwapper, AuctionSwapper {\r\n    using SafeERC20 for ERC20;\r\n\r\n    // Bool to keep autocompounding the strategy. Defaults to true. Set this to false to deactivate the strategy completely after a shutdown & emergencyWithdraw to leave everything withdrawable in asset.\r\n    bool public autocompound = true;\r\n\r\n    // If rewards should be sold through TradeFactory.\r\n    bool public useTradeFactory;\r\n\r\n    // If rewards should be sold through Auctions.\r\n    bool public useAuction;\r\n\r\n    // Mapping to be set by management for any reward tokens.\r\n    // This can be used to set different mins for different tokens\r\n    // or to set to uin256.max if selling a reward token is reverting\r\n    // to allow for reports to still work properly.\r\n    mapping(address => uint256) public minAmountToSellMapping;\r\n\r\n    address internal constant pendleRouter = 0x00000000005BBB0EF59571E58418F9a4357b68A0;\r\n    IPendleRouter.ApproxParams public routerParams;\r\n\r\n    address internal immutable pendleStaking;\r\n    address internal immutable marketDepositHelper;\r\n    address internal immutable masterPenpie;\r\n    address internal immutable PENDLE;\r\n\r\n    address internal immutable SY;\r\n    address public immutable targetToken;\r\n    \r\n    // Bool wether or not its necessary to unwrap asset before depositing into SY.\r\n    bool public immutable unwrapTargetTokenToSY;\r\n\r\n    address public immutable GOV; //yearn governance\r\n    uint256 private constant WAD = 1e18;\r\n\r\n    constructor(address _asset, address _pendleStaking, address _PENDLE, uint24 _feePENDLEtoBase, address _base, uint24 _feeBaseToTargetToken, address _targetToken, address _GOV, string memory _name) BaseHealthCheck(_asset, _name) {\r\n        require(!_isExpired(), \"expired\");\r\n\r\n        (SY, , ) = IPendleMarket(_asset).readTokens();\r\n        unwrapTargetTokenToSY = !ISY(SY).isValidTokenIn(_targetToken); //if targetToken is invalid tokenIn, unwrapping is necessary.\r\n        if (unwrapTargetTokenToSY) {\r\n            require(ISY(SY).isValidTokenIn(address(0)), \"!valid\"); //if targetToken & address(0) are both invalid tokenIn --> revert\r\n        }\r\n\r\n        targetToken = _targetToken;\r\n        pendleStaking = _pendleStaking;\r\n        marketDepositHelper = IPendleStaking(pendleStaking).marketDepositHelper();\r\n        masterPenpie = IPendleStaking(_pendleStaking).masterPenpie();\r\n        PENDLE = _PENDLE;\r\n        GOV = _GOV;\r\n\r\n        routerParams.guessMin = 0;\r\n        routerParams.guessMax = type(uint256).max;\r\n        routerParams.guessOffchain = 0; // strictly 0\r\n        routerParams.maxIteration = 256;\r\n        routerParams.eps = 1e15; // max 0.1% unused\r\n\r\n        // Set uni swapper values\r\n        base = _base;\r\n        _setUniFees(PENDLE, base, _feePENDLEtoBase);\r\n        _setUniFees(_base, _targetToken, _feeBaseToTargetToken);\r\n\r\n        //approvals:\r\n        ERC20(_asset).safeApprove(pendleStaking, type(uint).max);\r\n        ERC20(_targetToken).safeApprove(SY, type(uint).max);\r\n        ERC20(SY).safeApprove(pendleRouter, type(uint).max);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                INTERNAL\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _deployFunds(uint256 _amount) internal override {\r\n        IMarketDepositHelper(marketDepositHelper).depositMarket(address(asset), _amount);\r\n    }\r\n\r\n    function _freeFunds(uint256 _amount) internal override {\r\n        IMarketDepositHelper(marketDepositHelper).withdrawMarket(address(asset), _amount);\r\n    }\r\n\r\n    function _harvestAndReport() internal override returns (uint256 _totalAssets) {\r\n        if (autocompound) {\r\n            _claimAndSellRewards();\r\n\r\n            uint256 assetBalance = _balanceAsset();\r\n            if (assetBalance > 0) {\r\n                _deployFunds(assetBalance); //stake LP\r\n            }\r\n        }\r\n\r\n        _totalAssets = _balanceAsset() + _balanceStaked();\r\n    }\r\n\r\n    function _claimRewards() internal override {\r\n        address[] memory stakingTokens = new address[](1);\r\n        stakingTokens[0] = address(asset);\r\n        IMasterPenpie(masterPenpie).multiclaim(stakingTokens);\r\n    }\r\n\r\n    function _claimAndSellRewards() internal {\r\n        _claimRewards();\r\n        uint256 rewardBalance;\r\n\r\n        // If both tradeFactory and Auction are not being used, we sell rewards here:\r\n        if (!useTradeFactory && !useAuction) {\r\n            //PENDLE --> targetToken\r\n            if (PENDLE != targetToken) {\r\n                rewardBalance = _balancePENDLE();\r\n                if (rewardBalance > minAmountToSellMapping[PENDLE]) {\r\n                    _swapFrom(PENDLE, targetToken, rewardBalance, 0);\r\n                }\r\n            }\r\n\r\n            //Other rewards --> targetToken\r\n            address[] memory _rewardTokens = rewardTokens();\r\n            uint256 rewardsLength = _rewardTokens.length;\r\n            if (rewardsLength > 0) {\r\n                address currentReward;\r\n                for (uint256 i; i < rewardsLength; ++i) {\r\n                    currentReward = _rewardTokens[i];\r\n                    if (currentReward != targetToken) {\r\n                        rewardBalance = ERC20(currentReward).balanceOf(address(this));\r\n                        if (rewardBalance > minAmountToSellMapping[currentReward]) {\r\n                            _swapFrom(currentReward, targetToken, rewardBalance, 0);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the maturity of the Pendle LP is reached, we cannot compound anymore.\r\n        if (_isExpired()) return;\r\n\r\n        //Create asset from targetToken:\r\n        //targetToken --> SY\r\n        rewardBalance = ERC20(targetToken).balanceOf(address(this));\r\n        if (rewardBalance <= minAmountToSellMapping[targetToken]) return; //set minAmountToSell for targetToken in case of deposit minimum in SY\r\n        uint256 payableBalance;\r\n        address depositToken;\r\n        if (unwrapTargetTokenToSY) { //for pools that require unwrapped gas as SY deposit asset\r\n            IWETH(targetToken).withdraw(rewardBalance);\r\n            payableBalance = rewardBalance;\r\n            depositToken = address(0); //unwrapped\r\n        } else {\r\n            depositToken = targetToken;\r\n        }\r\n        ISY(SY).deposit{value: payableBalance}(address(this), depositToken, rewardBalance, 0);\r\n        rewardBalance = ERC20(SY).balanceOf(address(this));\r\n\r\n        //SY --> asset\r\n        if (rewardBalance == 0) return;\r\n        IPendleRouter.LimitOrderData memory limit; //skip limit order by passing zero address\r\n        IPendleRouter(pendleRouter).addLiquiditySingleSy(address(this), address(asset), rewardBalance, 0, routerParams, limit);\r\n    }\r\n\r\n    function _balanceAsset() internal view returns (uint256) {\r\n        return ERC20(asset).balanceOf(address(this));\r\n    }\r\n\r\n    function _balanceStaked() internal view returns (uint256) {\r\n        return IMarketDepositHelper(marketDepositHelper).balance(address(asset), address(this));\r\n    }\r\n    \r\n    function _balancePENDLE() internal view returns (uint256) {\r\n        return ERC20(PENDLE).balanceOf(address(this));\r\n    }\r\n\r\n    function _isExpired() internal view returns (bool) {\r\n        return IPendleMarket(address(asset)).isExpired();\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                EXTERNAL:\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function balanceAsset() external view returns (uint256) {\r\n        return _balanceAsset();\r\n    }\r\n\r\n    function balanceStaked() external view returns (uint256) {\r\n        return _balanceStaked();\r\n    }\r\n\r\n    function isExpired() external view returns (bool) {\r\n        return _isExpired();\r\n    }\r\n\r\n    /**\r\n     * @notice Set wether or not to keep autocompounding the strategy. Defaults to true. Set this to false to deactivate the strategy completely after a shutdown & emergencyWithdraw to leave everything withdrawable in asset.\r\n     * @param _autocompound Wether or not to deactivate the autocompounding of the strategy.\r\n     */\r\n    function setAutocompound(bool _autocompound) external onlyManagement {\r\n        autocompound = _autocompound;\r\n    }\r\n\r\n    /**\r\n     * @notice Set wether to use the trade factory contract address.\r\n     * @param _useTradeFactory wether to use the trade factory or not.\r\n     */\r\n    function setUseTradeFactory(bool _useTradeFactory) external onlyManagement {\r\n        require(tradeFactory() != address(0));\r\n        useTradeFactory = _useTradeFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Remove all the permissions of the tradeFactory and set its address to zero.\r\n     */\r\n    function removeTradeFactory() external onlyManagement {\r\n        require(tradeFactory() != address(0));\r\n        _removeTradeFactoryPermissions();\r\n        useTradeFactory = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Add a reward address that will be sold to autocompound the LP.\r\n     * @param _rewardToken address of the reward token to be sold.\r\n     * @param _feeRewardTokenToBase automatic swapping fee tier between rewardToken and base (0.01% = 100, 0.05% = 500, 0.3% = 3000, 1% = 10000).\r\n     */\r\n    function addReward(address _rewardToken, uint24 _feeRewardTokenToBase) external onlyManagement {\r\n        require(_rewardToken != address(asset));\r\n        _setUniFees(_rewardToken, base, _feeRewardTokenToBase);\r\n        _addToken(_rewardToken, address(asset));\r\n        if (targetToken != address(asset)) {\r\n            _addToken(_rewardToken, targetToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a reward token to stop it being autocompounded to the LP.\r\n     * @param _rewardToken address of the reward token to be removed.\r\n     */\r\n    function removeReward(address _rewardToken) external onlyManagement {\r\n        _removeToken(_rewardToken, address(asset));\r\n        if (targetToken != address(asset)) {\r\n            _removeToken(_rewardToken, targetToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Set the uni fees for swaps.\r\n     * Any incentivized tokens will need a fee to be set for each\r\n     * reward token that it wishes to swap on reports.\r\n     *\r\n     * @param _token0 The first token of the pair.\r\n     * @param _token1 The second token of the pair.\r\n     * @param _fee The fee to be used for the pair.\r\n     */\r\n    function setUniFees(\r\n        address _token0,\r\n        address _token1,\r\n        uint24 _fee\r\n    ) external onlyManagement {\r\n        _setUniFees(_token0, _token1, _fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `minAmountToSellMapping` for a specific `_token`.\r\n     * @dev This can be used by management to adjust wether or not the\r\n     * _claimAndSellRewards() function will attempt to sell a specific\r\n     * reward token. This can be used if liquidity is too low, amounts\r\n     * are too low or any other reason that may cause reverts.\r\n     *\r\n     * @param _token The address of the token to adjust.\r\n     * @param _amount Min required amount to sell.\r\n     */\r\n    function setMinAmountToSellMapping(\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyManagement {\r\n        minAmountToSellMapping[_token] = _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the routerParams for the pendleRouter. Pendle's AMM only supports the built-in swapSyForExactPt. To execute a swapExactSyForPt, the router will conduct a binary search to determine the amount of PT to swap.\r\n     * @param _guessMin The minimum value for binary search. Default: 0.\r\n     * @param _guessMax The maximum value for binary search. Default: type(uint256).max.\r\n     * @param _maxIteration The maximum number of times binary search will be performed. Default: 256.\r\n     * @param _eps The precision of binary search - the maximum proportion of the input that can be unused. Default: 1e15 == max 0.1% unused. Alternatively: 1e14 implies that no more than 0.01% unused.     \r\n     */\r\n    function setRouterParams(uint256 _guessMin, uint256 _guessMax, uint256 _maxIteration, uint256 _eps) external onlyManagement {\r\n        routerParams.guessMin = _guessMin; // default: 0\r\n        routerParams.guessMax = _guessMax; // default: type(uint256).max\r\n        routerParams.maxIteration = _maxIteration; // default: 256\r\n        routerParams.eps = _eps; // default: 1e15 == max 0.1% unused. Alternatively: 1e14 implies that no more than 0.01% unused.\r\n    }\r\n\r\n    ///////////// DUTCH AUCTION FUNCTIONS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n    function setAuction(address _auction) external onlyEmergencyAuthorized {\r\n        if (_auction != address(0)) {\r\n            address want = Auction(_auction).want();\r\n            require(want == targetToken || want == address(asset), \"wrong want\");\r\n        }\r\n        auction = _auction;\r\n    }\r\n\r\n    function _auctionKicked(address _token) internal virtual override returns (uint256 _kicked) {\r\n        require(_token != address(asset), \"asset\");\r\n        _kicked = super._auctionKicked(_token);\r\n        require(_kicked >= minAmountToSellMapping[_token], \"< minAmount\");\r\n    }\r\n\r\n    /**\r\n     * @notice Set if tokens should be sold through the dutch auction contract.\r\n     */\r\n    function setUseAuction(bool _useAuction) external onlyManagement {\r\n        useAuction = _useAuction;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                EMERGENCY & GOVERNANCE:\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _emergencyWithdraw(uint256 _amount) internal override {\r\n        uint256 stakedBalance = _balanceStaked();\r\n        if (_amount > stakedBalance) {\r\n            _amount = stakedBalance;\r\n        }\r\n        _freeFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the trade factory contract address.\r\n     * @dev For disabling, call removeTradeFactory.\r\n     * @param _tradeFactory The address of the trade factory contract.\r\n     */\r\n    function setTradeFactory(address _tradeFactory, bool _useTradeFactory) external onlyGovernance {\r\n        _setTradeFactory(_tradeFactory, address(asset));\r\n        if (targetToken != address(asset)) { //enable tradeFactory also for targetToken for all rewardTokens \r\n            address[] memory _rewardTokensLocal = rewardTokens();\r\n            uint256 rewardsLength = _rewardTokensLocal.length;\r\n            for (uint256 i; i < rewardsLength; ++i) {\r\n                address reward = _rewardTokensLocal[i];\r\n                ITradeFactory(_tradeFactory).enable(reward, targetToken);\r\n            }\r\n        }\r\n        useTradeFactory = _useTradeFactory;\r\n    }\r\n\r\n    /// @notice Sweep of non-asset ERC20 tokens to governance (onlyGovernance)\r\n    /// @param _token The ERC20 token to sweep\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(asset), \"!asset\");\r\n        ERC20(_token).safeTransfer(GOV, ERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == GOV, \"!gov\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PENDLE\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_feePENDLEtoBase\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_feeBaseToTargetToken\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GOV\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"GOV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_feeRewardTokenToBase\",\"type\":\"uint24\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"auctionKicked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autocompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deployFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHealthCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"kickable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAmountToSellMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPayed\",\"type\":\"uint256\"}],\"name\":\"postTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPay\",\"type\":\"uint256\"}],\"name\":\"preTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTradeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"guessMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guessMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guessOffchain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autocompound\",\"type\":\"bool\"}],\"name\":\"setAutocompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doHealthCheck\",\"type\":\"bool\"}],\"name\":\"setDoHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLossLimitRatio\",\"type\":\"uint256\"}],\"name\":\"setLossLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToSellMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProfitLimitRatio\",\"type\":\"uint256\"}],\"name\":\"setProfitLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guessMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guessMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eps\",\"type\":\"uint256\"}],\"name\":\"setRouterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeFactory\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useTradeFactory\",\"type\":\"bool\"}],\"name\":\"setTradeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"setUniFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useAuction\",\"type\":\"bool\"}],\"name\":\"setUseAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useTradeFactory\",\"type\":\"bool\"}],\"name\":\"setUseTradeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"shutdownWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalIdle\",\"type\":\"uint256\"}],\"name\":\"tendThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenizedStrategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniFees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapTargetTokenToSY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useTradeFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PendleLPCompounder", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bbd395d4820da5c89a3bca4fa28af97254a0fcbe0000000000000000000000006e799758cee75dae3d84e09d40dc416ecf713652000000000000000000000000808507121b80c02388fad14726482e061b8da8270000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e000000000000000000000000feb4acf3df3cdea7399794d0869ef76a6efaff5200000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000017637276555344204c5020283237204a554e203230323429000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "1", "Implementation": "0xbb51273d6c746910c7c06fe718f30c936170fed0", "SwarmSource": "ipfs://b7b40a215e88974ef610e10be1d934682881fb344aec4a29858b8096d9530fca"}