{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\u201cAkai\u201d (\u8d64\u3044) is a japanese adjective meaning \u201cred.\u201d\r\n\r\n$AKAI is a hyper deflationary token that is on a mission to fuel $SHIB's journey \r\nthrough the Shibarium chain. Akai has developed a unique contract that will auto-buy\r\nShiba Inu tokens and then burn them by sending the tokens to a dead address, resulting\r\nin less $SHIB in circulation. Akai will be used to continuously burn $SHIB!\r\n\r\nWebsite \r\nhttps://akaitoken.com\r\n\r\nTelegram (Entry Portal)\r\nhttps://t.me/AkaiToken\r\n\r\nTwitter\r\nhttps://twitter.com/AkaiShibarium\r\n\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Tokens/Akai/Akaiv2.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    \r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    \r\n}\r\n\r\ncontract Akai is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"Akai\";\r\n    string private constant _symbol = \"AKAI\";\r\n    uint8 private constant _decimals = 18;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _tTotal; //Total Supply\r\n\r\n    uint256 public _maxTxAmount;\r\n    uint256 public _maxWalletAmount;\r\n    uint256 public swapAmount;\r\n    uint256 public _buybackThreshold;\r\n\r\n    //Buy Fees\r\n    uint256 private bLPFee; \r\n    uint256 private bMarketingFee; \r\n    uint256 private bBuybackFee; \r\n\r\n    //Sell Fee\r\n    uint256 private sLPFee; \r\n    uint256 private sMarketingFee; \r\n    uint256 private sBuybackFee; \r\n\r\n    //Early Max Sell Fee (Decay)\r\n    uint256 private sEarlySellFee;\r\n    \r\n    //Previous Fee \r\n    uint256 private pLPFee = rLPFee;\r\n    uint256 private pMarketingFee = rMarketingFee;\r\n    uint256 private pBuybackFee = rBuybackFee;\r\n    uint256 private pEarlySellFee = rEarlySellFee;\r\n\r\n    //Real Fee\r\n    uint256 private rLPFee;\r\n    uint256 private rMarketingFee;\r\n    uint256 private rBuybackFee;\r\n    uint256 private rEarlySellFee;\r\n\r\n    struct FeeBreakdown {\r\n        uint256 tLiq;\r\n        uint256 tMarket;\r\n        uint256 tBuyback;\r\n        uint256 tEarlySell;\r\n        uint256 tAmount;\r\n    }\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) public preTrader;\r\n    mapping(address => bool) public bots;\r\n\r\n    address payable private _taxWallet1;\r\n    address payable private _taxWallet2;\r\n\r\n    address private _buybackTokenReceiver;\r\n    address private _lpTokensReceiver;\r\n    \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool private swapEnabled;\r\n    bool private swapping;\r\n\r\n    //Decaying Tax Logic\r\n    uint256 private decayTaxExpiration;\r\n    mapping(address => uint256) private buyTracker;\r\n    mapping(address => uint256) private lastBuyTimestamp;\r\n    mapping(address => uint256) private sellTracker;\r\n\r\n    bool private tradingOpen;\r\n\r\n    modifier lockSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        //Initialize numbers for token\r\n        _tTotal = 1000000000 * 10**18; //Total Supply\r\n        _maxTxAmount = _tTotal.mul(10000).div(10000); //1%\r\n        _maxWalletAmount = _tTotal.mul(10000).div(10000); //%\r\n        swapAmount = _tTotal.mul(1).div(1000); //0.1%\r\n        _buybackThreshold = 10; //10 wei\r\n\r\n        //Buy Fees\r\n        bLPFee = 100; \r\n        bMarketingFee = 300; \r\n        bBuybackFee = 200; \r\n\r\n        //Sell Fee\r\n        sLPFee = 100; \r\n        sMarketingFee = 300; \r\n        sBuybackFee = 200; \r\n        sEarlySellFee = 600;\r\n            \r\n        _taxWallet1 = payable(0x51513E1054Eed53FA4A0474A589bB5E94C3188e1);\r\n        _taxWallet2 = payable(0x51513E1054Eed53FA4A0474A589bB5E94C3188e1);\r\n        _buybackTokenReceiver = 0x000000000000000000000000000000000000dEaD;\r\n        _lpTokensReceiver = 0x51513E1054Eed53FA4A0474A589bB5E94C3188e1;\r\n\r\n        swapEnabled = true;\r\n        tradingOpen = false;\r\n        swapping = false;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        \r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[_taxWallet1] = true;\r\n        _isExcludedFromFee[_taxWallet2] = true;\r\n        _isExcludedFromFee[_buybackTokenReceiver] = true;\r\n        _isExcludedFromFee[_lpTokensReceiver] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        preTrader[owner()] = true;\r\n\r\n        //initialie decay tax\r\n        decayTaxExpiration = 2 days;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (rLPFee == 0 && rMarketingFee == 0 && rBuybackFee == 0 && rEarlySellFee == 0) return;\r\n        \r\n        pLPFee = rLPFee;\r\n        pMarketingFee = rMarketingFee;\r\n        pBuybackFee = rBuybackFee;\r\n        pEarlySellFee = rEarlySellFee;\r\n\r\n        rLPFee = 0;\r\n        rMarketingFee = 0;\r\n        rBuybackFee = 0;\r\n        rEarlySellFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        rLPFee = pLPFee;\r\n        rMarketingFee = pMarketingFee;\r\n        rBuybackFee = pBuybackFee;\r\n        rEarlySellFee = pEarlySellFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!bots[from] && !bots[to], \"You are blacklisted\");\r\n\r\n        bool takeFee = true;\r\n\r\n        if (from != owner() && to != owner() && !preTrader[from] && !preTrader[to] && from != address(this) && to != address(this)) {\r\n\r\n            //Trade start check\r\n            if (!tradingOpen) {\r\n                require(preTrader[from], \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n            }\r\n\r\n            //Max wallet Limit\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                require(balanceOf(to).add(amount) < _maxWalletAmount, \"TOKEN: Balance exceeds wallet size!\");\r\n            }\r\n            \r\n            //Max txn amount limit\r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n\r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                rLPFee = bLPFee;\r\n                rMarketingFee = bMarketingFee;\r\n                rBuybackFee = bBuybackFee;\r\n                rEarlySellFee = 0;\r\n            }\r\n                \r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                rLPFee = sLPFee;\r\n                rMarketingFee = sMarketingFee;\r\n                rBuybackFee = sBuybackFee;\r\n                rEarlySellFee = sEarlySellFee;\r\n            }\r\n           \r\n            if(!swapping && swapEnabled && from != uniswapV2Pair) {\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n                if(contractTokenBalance >= _maxTxAmount) {\r\n                    contractTokenBalance = _maxTxAmount;\r\n                }\r\n                \r\n                if (contractTokenBalance > swapAmount) {\r\n                    processDistributions(contractTokenBalance);\r\n                }\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        //No tax on Transfer Tokens\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        \r\n        if(!takeFee) {\r\n            removeAllFee();\r\n        }\r\n\r\n        //Define Fee amounts\r\n        FeeBreakdown memory fees;\r\n        fees.tLiq = amount.mul(rLPFee).div(10000);\r\n        fees.tMarket = amount.mul(rMarketingFee).div(10000);\r\n        fees.tBuyback = amount.mul(rBuybackFee).div(10000);\r\n\r\n        fees.tEarlySell = 0;\r\n        if(rEarlySellFee > 0) {\r\n            uint256 finalEarlySellFee = getUserEarlySellTax(sender, amount, rEarlySellFee);\r\n            fees.tEarlySell = amount.mul(finalEarlySellFee).div(10000);\r\n        }\r\n\r\n        //Calculate total fee amount\r\n        uint256 totalFeeAmount = fees.tLiq.add(fees.tBuyback).add(fees.tMarket).add(fees.tEarlySell);\r\n        fees.tAmount = amount.sub(totalFeeAmount);\r\n\r\n        //Update balances\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(fees.tAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(totalFeeAmount);\r\n        \r\n        emit Transfer(sender, recipient, fees.tAmount);\r\n        if(totalFeeAmount > 0) {\r\n            emit Transfer(sender, address(this), totalFeeAmount);\r\n        }\r\n        restoreAllFee();\r\n\r\n        //Update decay tax for user\r\n        //Set for Buys\r\n        if(sender == uniswapV2Pair && recipient != address(uniswapV2Router)) {\r\n            buyTracker[recipient] += amount;\r\n            lastBuyTimestamp[recipient] = block.timestamp;\r\n        }\r\n            \r\n        //Set for Sells\r\n        if (recipient == uniswapV2Pair && sender != address(uniswapV2Router)) {\r\n            sellTracker[sender] += amount;\r\n        }\r\n\r\n        // if the sell tracker equals or exceeds the amount of tokens bought,\r\n        // reset all variables here which resets the time-decaying sell tax logic.\r\n        if(sellTracker[sender] >= buyTracker[sender]) {\r\n            resetBuySellDecayTax(sender);\r\n        }\r\n        \r\n        // handles transferring to a fresh wallet or wallet that hasn't bought tokens before\r\n        if(lastBuyTimestamp[recipient] == 0) {\r\n            resetBuySellDecayTax(recipient);\r\n        }\r\n\r\n    }\r\n    \r\n    /// @notice Get user decayed tax\r\n    function getUserEarlySellTax(address _seller, uint256 _sellAmount, uint256 _earlySellFee) public view returns (uint256) {\r\n        uint256 _tax = _earlySellFee;\r\n\r\n        if(lastBuyTimestamp[_seller] == 0) {\r\n            return _tax;\r\n        }\r\n\r\n        if(sellTracker[_seller] + _sellAmount > buyTracker[_seller]) {\r\n            return _tax;\r\n        }\r\n\r\n        if(block.timestamp > getSellEarlyExpiration(_seller)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 _secondsAfterBuy = block.timestamp - lastBuyTimestamp[_seller];\r\n        return (_tax * (decayTaxExpiration - _secondsAfterBuy)) / decayTaxExpiration;\r\n    }\r\n\r\n    function getSellEarlyExpiration(address _seller) private  view returns (uint256) {\r\n        return lastBuyTimestamp[_seller] == 0 ? 0 : lastBuyTimestamp[_seller] + decayTaxExpiration;\r\n    }\r\n\r\n    function resetBuySellDecayTax(address _user) private {\r\n        buyTracker[_user] = balanceOf(_user);\r\n        lastBuyTimestamp[_user] = block.timestamp;\r\n        sellTracker[_user] = 0;\r\n    }\r\n\r\n    //Buyback Module\r\n    function buyBackTokens() private lockSwap {\r\n        if(address(this).balance > 0) {\r\n    \t    swapETHForTokens(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function swapETHForTokens(uint256 amount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; //USDC Address\r\n        path[2] = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE; //SHIB Address\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            _buybackTokenReceiver, //Send bought tokens to this address\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            _lpTokensReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet1.transfer(amount.div(2));\r\n        _taxWallet2.transfer(amount.div(2));\r\n    }\r\n\r\n    function processDistributions(uint256 tokens) private {\r\n\r\n        uint256 totalTokensFee = sMarketingFee.add(sLPFee).add(sBuybackFee);\r\n        uint256 halfLPFee = sLPFee.div(2);\r\n\r\n        //Get tokens to swap for eth. excluding tokens to add to LP\r\n        uint256 tokensToSwapToETH = tokens.mul(totalTokensFee.sub(halfLPFee)).div(totalTokensFee);\r\n\r\n        //Swap for eth\r\n        uint256 initialETHBalance = address(this).balance;\r\n        swapTokensForEth(tokensToSwapToETH);\r\n        uint256 newETHBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 liquidityTokens = tokens.mul(halfLPFee).div(totalTokensFee);\r\n\r\n        uint256 ethMarketingShare = newETHBalance.mul(sMarketingFee).div(totalTokensFee.sub(halfLPFee));\r\n        uint256 ethLPShare = newETHBalance.mul(halfLPFee).div(totalTokensFee.sub(halfLPFee));\r\n\r\n        //Send eth share to distribute to tax wallets        \r\n        sendETHToFee(ethMarketingShare);\r\n        //Send lp share along with tokens to add LP\r\n        addLiquidity(liquidityTokens, ethLPShare);\r\n        //Leave the remaining eth in contract itself for buybacking\r\n\r\n        //Process buyback\r\n        if(address(this).balance >= _buybackThreshold) {\r\n            buyBackTokens();\r\n        }\r\n    }\r\n    \r\n    /// @notice Manually convert tokens in contract to Eth\r\n    function manualswap() external {\r\n        require(_msgSender() == _taxWallet1 || _msgSender() == _taxWallet2 || _msgSender() == owner());\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n    }\r\n\r\n    /// @notice Manually send ETH in contract to marketing wallets\r\n    function manualsend() external {\r\n        require(_msgSender() == _taxWallet1 || _msgSender() == _taxWallet2 || _msgSender() == owner());\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    /// @notice Manually execute buyback with Eth availabe in contract\r\n    function manualBuyBack() external {\r\n        require(_msgSender() == _taxWallet1 || _msgSender() == _taxWallet2 || _msgSender() == owner());\r\n        require(address(0).balance > 0, \"No ETH in contract to buyback\");\r\n        buyBackTokens();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /// @notice Add an address to a pre trader\r\n    function allowPreTrading(address account, bool allowed) public onlyOwner {\r\n        require(preTrader[account] != allowed, \"TOKEN: Already enabled.\");\r\n        preTrader[account] = allowed;\r\n    }\r\n\r\n    /// @notice Add multiple address to exclude/include fee\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    /// @notice Block address from transfer\r\n    function blockMultipleBots(address[] calldata _bots, bool status) public onlyOwner {\r\n        for(uint256 i = 0; i < _bots.length; i++) {\r\n            bots[_bots[i]] = status;\r\n        }\r\n    }\r\n\r\n    /// @notice Enable disable trading\r\n    function setTrading(bool _tradingOpen) public onlyOwner {\r\n        tradingOpen = _tradingOpen;\r\n    }\r\n\r\n    /// @notice Enable/Disable contract fee distribution\r\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n    //Settings: Limits\r\n    /// @notice Set maximum wallet limit\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) public onlyOwner() {\r\n        require(maxWalletAmount > _tTotal.div(1000), \"Amount must be greater than 0.1% of supply\");\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    /// @notice Set max amount a user can buy/sell/transfer\r\n    function setMaxTxnAmount(uint256 maxTxnAmount) public onlyOwner() {\r\n        require(_maxTxAmount > _tTotal.div(1000), \"Amount must be greater than 0.1% of supply\");\r\n        _maxTxAmount = maxTxnAmount;\r\n    }\r\n\r\n    /// @notice Set Contract swap amount threshold\r\n    function setSwapAmount(uint256 _swapAmount) public onlyOwner() {\r\n        swapAmount = _swapAmount;\r\n    }\r\n\r\n    /// @notice Set buyback threshold\r\n    function setBuyBackThreshold(uint256 amount) public onlyOwner {\r\n        _buybackThreshold = amount;\r\n    }\r\n\r\n    /// @notice Set wallets\r\n    function setWallets(address taxWallet1, address taxWallet2, address lpTokensReceiver, address buybackTokenReceiver) public onlyOwner {\r\n        _taxWallet1 = payable(taxWallet1);\r\n        _taxWallet2 = payable(taxWallet2);\r\n        _lpTokensReceiver = lpTokensReceiver;\r\n        _buybackTokenReceiver = buybackTokenReceiver;\r\n    }\r\n\r\n    /// @notice Setup fee in rate of 100 (If 1%, then set 100)\r\n    function setBuyFee(uint256 _bMarketingFee, uint256 _bLPFee, uint256 _bBuybackFee) public onlyOwner {\r\n        \r\n        //Hard cap check to prevent honeypot\r\n        require(_bMarketingFee <= 2000, \"Hard cap 20%\");\r\n        require(_bLPFee <= 2000, \"Hard cap 20%\");\r\n        require(_bBuybackFee <= 2000, \"Hard cap 20%\");\r\n        \r\n        bMarketingFee = _bMarketingFee;\r\n        bLPFee = _bLPFee;\r\n        bBuybackFee = _bBuybackFee;\r\n    \r\n    }\r\n\r\n    /// @notice Setup fee in rate of 100 (If 1%, then set 100)\r\n    function setSellFee(uint256 _sMarketingFee, uint256 _sLPFee, uint256 _sBuybackFee, uint256 _sEarlySellFee) public onlyOwner {\r\n        \r\n        //Hard cap check to prevent honeypot\r\n        require(_sMarketingFee <= 2000, \"Hard cap 20%\");\r\n        require(_sLPFee <= 2000, \"Hard cap 20%\");\r\n        require(_sBuybackFee <= 2000, \"Hard cap 20%\");\r\n        require(_sEarlySellFee <= 2000, \"Hard cap 20%\");\r\n        \r\n        sMarketingFee = _sMarketingFee;\r\n        sLPFee = _sLPFee;\r\n        sBuybackFee = _sBuybackFee;\r\n        sEarlySellFee = _sEarlySellFee;\r\n    \r\n    }\r\n\r\n    function readFees() external view returns (uint _totalBuyFee, uint _totalSellFee, uint _marketingFeeBuy, uint _marketingFeeSell, uint _liquidityFeeBuy, uint _liquidityFeeSell, uint _buybackFeeBuy, uint _buybackFeeSell, uint maxEarlySellFee) {\r\n\r\n        return (\r\n            bMarketingFee+bLPFee+bBuybackFee,\r\n            sMarketingFee+sLPFee+sBuybackFee+sEarlySellFee,\r\n            bMarketingFee,\r\n            sMarketingFee,\r\n            bLPFee,\r\n            sLPFee,\r\n            bBuybackFee,\r\n            sBuybackFee,\r\n            sEarlySellFee\r\n        );\r\n    }\r\n\r\n    /// @notice Airdropper inbuilt\r\n    function multiSend(address[] calldata addresses, uint256[] calldata amounts, bool overrideTracker, uint256 trackerTimestamp) external {\r\n        require(addresses.length == amounts.length, \"Must be the same length\");\r\n        for(uint256 i = 0; i < addresses.length; i++){\r\n            _transfer(_msgSender(), addresses[i], amounts[i] * 10**_decimals);\r\n\r\n            //Suppose to airdrop holders who bought long back and don't want to reset their decaytax\r\n            if(overrideTracker) {\r\n                //Override buytracker\r\n                buyTracker[addresses[i]] += amounts[i];\r\n                lastBuyTimestamp[addresses[i]] = trackerTimestamp;\r\n            }\r\n        }\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buybackThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowPreTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bots\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"blockMultipleBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlySellFee\",\"type\":\"uint256\"}],\"name\":\"getUserEarlySellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"overrideTracker\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"trackerTimestamp\",\"type\":\"uint256\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEarlySellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBuyBackThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bLPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bBuybackFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxnAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sLPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sEarlySellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxWallet1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxWallet2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpTokensReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buybackTokenReceiver\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Akai", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cb5906b266e915509133259ecc74fe7b8e6c3dd941c54d56afc398c22a6a1031"}