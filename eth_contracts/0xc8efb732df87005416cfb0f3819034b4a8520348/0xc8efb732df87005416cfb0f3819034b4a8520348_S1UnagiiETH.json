{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/S1UnagiiETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IUniswapConnector.sol\\\";\\nimport \\\"./interfaces/IS1Proxy.sol\\\";\\nimport \\\"./proxies/S1UnagiiETHProxy.sol\\\";\\n\\n\\ninterface IFees {\\n    function feeCollector(uint256 _index) external view returns (address);\\n    function depositStatus(uint256 _index) external view returns (bool);\\n    function calcFee(\\n        uint256 _strategyId,\\n        address _user,\\n        address _feeToken\\n    ) external view returns (uint256);\\n    function whitelistedDepositCurrencies(uint256 _index, address _token) external view returns(bool);\\n}\\n\\n\\ncontract S1UnagiiETH {\\n    uint8 constant public strategyIndex = 19;\\n    address public feesAddress;\\n    address public uniswapConnector;\\n    address public wethAddress;\\n\\n    // protocols\\n    address public UnagiiEthVault;\\n    address public UnagiiEthV2;\\n\\n    mapping(address => address) public depositors; \\n\\n    constructor(\\n        address _feesAddress,\\n        address _uniswapConnector,\\n        address _wethAddress,\\n        address _UnagiiEthVault,\\n        address _UnagiiEthV2\\n    ) {\\n        feesAddress = _feesAddress;\\n        uniswapConnector = _uniswapConnector;\\n        wethAddress = _wethAddress;\\n        UnagiiEthVault = _UnagiiEthVault;\\n        UnagiiEthV2 = _UnagiiEthV2;\\n    }\\n\\n    event Deposit(address indexed _depositor, address indexed _token, uint256 _amountIn, uint256 _amountOut);\\n\\n    event ProxyCreation(address indexed _depositor, address indexed _proxy);\\n\\n    event Withdraw(address indexed _depositor, address indexed _token, uint256 _amount, uint256 _fee);\\n\\n    function calcWithdraw(uint256 _shares) external view returns(uint256) {\\n        return IUnagii(UnagiiEthVault).calcWithdraw(_shares);\\n    }\\n\\n    function calcSharesToMint(uint256 _amount) external view returns(uint256) {\\n        return IUnagii(UnagiiEthVault).calcSharesToMint(_amount);\\n    }\\n\\n    // Get current stake\\n    function getCurrentDeposit(address _address) external view returns(uint256, uint256) {\\n        uint256 UnagiiEthV2Balance = IERC20(UnagiiEthV2).balanceOf(depositors[_address]);\\n        uint256 UnagiiDeposit;\\n        if (UnagiiEthV2Balance > 0) {\\n            UnagiiDeposit = IUnagii(UnagiiEthVault).calcWithdraw(UnagiiEthV2Balance);\\n        }\\n        return (UnagiiEthV2Balance, UnagiiDeposit);\\n    }\\n\\n    function depositETH(uint256 _depositMin) external payable {\\n        require(IFees(feesAddress).depositStatus(strategyIndex), \\\"ERR: DEPOSITS_STOPPED\\\");\\n\\n        _yieldDeposit(msg.value, _depositMin);\\n        emit Deposit(msg.sender, wethAddress, msg.value, 0);     \\n    }\\n\\n    function depositToken(address _token, uint256 _amount, uint256 _amountOutMin, uint256 _depositMin) external {\\n        require(IFees(feesAddress).depositStatus(strategyIndex), \\\"ERR: DEPOSITS_STOPPED\\\");\\n        require(IFees(feesAddress).whitelistedDepositCurrencies(strategyIndex, _token), \\\"ERR: INVALID_DEPOSIT_TOKEN\\\");\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n\\n        if (IERC20(_token).allowance(address(this), uniswapConnector) == 0) {\\n            IERC20(_token).approve(uniswapConnector, 2**256 - 1);\\n        }\\n\\n        uint256 depositAmount = IUniswapConnector(uniswapConnector).swapTokenForToken(\\n            _token,\\n            wethAddress, \\n            _amount, \\n            _amountOutMin, \\n            address(this)\\n        );\\n        IWETH(wethAddress).withdraw(depositAmount);\\n        _yieldDeposit(depositAmount, _depositMin);\\n \\n        emit Deposit(msg.sender, _token, _amount, depositAmount);\\n    }\\n\\n    function _yieldDeposit(uint256 _amount, uint256 _depositMin) private {\\n        if (depositors[msg.sender] == address(0)) {\\n            // deploy new proxy contract\\n            S1UnagiiETHProxy s1proxy = new S1UnagiiETHProxy(\\n                address(this),\\n                UnagiiEthVault,\\n                UnagiiEthV2\\n            );\\n            depositors[msg.sender] = address(s1proxy);\\n            s1proxy.depositETHWithMin{value: _amount}(_depositMin);\\n\\n            emit ProxyCreation(msg.sender, address(s1proxy));\\n        } else {\\n            // send the deposit to the existing proxy contract\\n            IS1Proxy(depositors[msg.sender]).depositETHWithMin{value: _amount}(_depositMin);\\n        }\\n    }\\n\\n    function withdrawETH(uint256 _amount, uint256 _withdrawMin, address _feeToken) external {\\n        require(depositors[msg.sender] != address(0), \\\"ERR: INVALID_DEPOSITOR\\\");\\n        (uint256 yieldDeposit, uint256 fee) = _withdrawYieldDeposit(_amount, _withdrawMin, _feeToken);\\n\\n        // withdraw ETH\\n        (bool success, ) = payable(msg.sender).call{value: yieldDeposit - fee}(\\\"\\\");\\n        require(success, \\\"ERR: FAIL_SENDING_ETH\\\");\\n        emit Withdraw(msg.sender, wethAddress, yieldDeposit - fee, fee);\\n    }\\n\\n    function withdrawToken(address _token, uint256 _amount, uint256 _amountOutMin, uint256 _withdrawMin, address _feeToken) public {\\n        require(depositors[msg.sender] != address(0), \\\"ERR: INVALID_DEPOSITOR\\\");\\n        (uint256 yieldDeposit, uint256 fee) = _withdrawYieldDeposit(_amount, _withdrawMin, _feeToken);\\n\\n        uint256 tokenAmount = IUniswapConnector(uniswapConnector).swapETHForToken{value: yieldDeposit - fee}(\\n            _token, \\n            0, \\n            _amountOutMin, \\n            msg.sender\\n        );\\n\\n        emit Withdraw(msg.sender, _token, tokenAmount, fee);\\n    }\\n\\n    function _withdrawYieldDeposit(uint256 _amount, uint256 _withdrawMin, address _feeToken) private returns(uint256, uint256) {\\n        uint256 ethAmountToBeWithdrawn = IS1Proxy(depositors[msg.sender]).withdrawWithMin(_amount, _withdrawMin);\\n        \\n        // if fee then send it to the feeCollector \\n        uint256 fee = (ethAmountToBeWithdrawn * IFees(feesAddress).calcFee(strategyIndex, msg.sender, _feeToken)) / 1000;\\n        if (fee > 0) {\\n            (bool success, ) = payable(IFees(feesAddress).feeCollector(strategyIndex)).call{value: fee}(\\\"\\\");\\n            require(success, \\\"ERR: FAIL_SENDING_ETH\\\");\\n        }\\n        return (ethAmountToBeWithdrawn, fee);\\n    }\\n\\n    receive() external payable {}\\n}\\n\\n// MN bby \u00af\\\\_(\u30c4)_/\u00af\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IERC20 {\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function decimals() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/proxies/S1UnagiiETHProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IUnagii.sol\\\";\\n\\n\\ncontract S1UnagiiETHProxy {\\n    address public deployer;\\n    address public UnagiiEthVault;\\n    address public UnagiiEthV2;\\n\\n    constructor(\\n        address _deployer,\\n        address _UnagiiEthVault,\\n        address _UnagiiEthV2\\n    ) {\\n        deployer = _deployer;\\n        UnagiiEthVault = _UnagiiEthVault;\\n        UnagiiEthV2 = _UnagiiEthV2;\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(msg.sender == deployer, \\\"ERR: WRONG_DEPLOYER\\\");\\n        _;\\n    } \\n\\n    function depositETHWithMin(uint256 _depositMin) external payable onlyDeployer {\\n        IUnagii(UnagiiEthVault).deposit{value: msg.value}(msg.value, _depositMin);\\n    }\\n\\n    function withdrawWithMin(uint256 _amount, uint256 _withdrawMin) external onlyDeployer returns(uint256) {\\n        IUnagii(UnagiiEthVault).withdraw(_amount, _withdrawMin);\\n        uint256 ethBalance = address(this).balance;\\n        (bool success, ) = payable(deployer).call{value: ethBalance}(\\\"\\\");\\n        require(success, \\\"ERR: FAIL_SENDING_ETH\\\");\\n\\n        return ethBalance;\\n    }\\n\\n    receive() external payable {}\\n}\\n\\n// MN bby \u00af\\\\_(\u30c4)_/\u00af\"\r\n    },\r\n    \"contracts/interfaces/IUniswapConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IUniswapConnector {\\n    function swapTokenForToken(address _tokenIn, address _tokenOut, uint256 _amount, uint256 _amountOutMin, address _to) external returns(uint256);\\n\\n    function swapTokenForETH(address _tokenIn, uint256 _amount, uint256 _amountOutMin, address _to) external returns(uint256);\\n\\n    function swapETHForToken(address _tokenOut, uint256 _amount, uint256 _amountOutMin, address _to) external payable returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IS1Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IS1Proxy {\\n    function deposit(uint256 _deposit) external;\\n    function depositETH() external payable;\\n    function depositETHWithMin(uint256 _depositMin) external payable;\\n    function withdraw(uint256 _amount) external returns(uint256);\\n    function withdrawWithMin(uint256 _amount, uint256 _withdrawMin) external returns(uint256);\\n    function claimToDepositor(address _depositor) external returns(uint256);\\n    function claimToDeployer() external returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IWETH {\\n    function withdraw(uint wad) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUnagii.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IUnagii {\\n    function deposit(uint256 amount, uint256 _min) external payable;\\n\\n    function withdraw(uint256 shares, uint256 _min) external;\\n\\n    function calcWithdraw(uint256 _shares) external view returns(uint256);\\n\\n    function calcSharesToMint(uint256 _amount) external view returns(uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UnagiiEthVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UnagiiEthV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UnagiiEthV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnagiiEthVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcSharesToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositMin\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositMin\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCurrentDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "S1UnagiiETH", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c90205668e7c7a1a2256893d17ca1b766b2be88000000000000000000000000e87be21afcd2043c39d2d74646b8dff6a2b9f233000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000008ef11c51a666c53aeeec504f120cd1435e451342000000000000000000000000de07f45688cb6cfaac398c1485860e186d55996d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}