{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/interfaces/IPoolController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport '../../interfaces/IPool.sol';\\nimport '../../interfaces/ILoan.sol';\\n\\n/**\\n * @dev Expresses the various states a pool can be in throughout its lifecycle.\\n */\\nenum IPoolLifeCycleState {\\n  Initialized,\\n  Active,\\n  Closed\\n}\\n\\n/**\\n * @title The various configurable settings that customize Pool behavior.\\n */\\nstruct IPoolConfigurableSettings {\\n  uint256 maxCapacity; // amount\\n  uint256 endDate; // epoch seconds\\n  uint256 requestFeeBps; // bips\\n  uint256 requestCancellationFeeBps; // bips\\n  uint256 withdrawGateBps; // bips, percent of liquidity pool available to withdraw\\n  uint256 serviceFeeBps; // bips, percent taken from borrower payments to be paid to pool admin\\n  uint256 firstLossInitialMinimum; // amount of tokens to be deposited to first loss before a pool is active\\n  uint256 withdrawRequestPeriodDuration; // seconds (e.g. 30 days)\\n  uint256 fixedFee; // amount of tokens the pool admin can claim every interval\\n  uint256 fixedFeeInterval; // interval in days at which a pool admin can claim fixed fees from the pool\\n}\\n\\n/**\\n * @title A Pool's Admin controller\\n * @dev Pool Admin's interact with the pool via the controller, including funding loans and adjusting\\n * settings.\\n */\\ninterface IPoolController {\\n  /**\\n   * @dev Emitted when pool settings are updated.\\n   */\\n  event PoolSettingsUpdated();\\n\\n  /**\\n   * @dev Emitted when the pool transitions a lifecycle state.\\n   */\\n  event LifeCycleStateTransition(IPoolLifeCycleState state);\\n\\n  /**\\n   * @dev Emitted when a funded loan is marked as in default.\\n   */\\n  event LoanDefaulted(address indexed loan);\\n\\n  /**\\n   * @dev Emitted when first loss is supplied to the pool.\\n   */\\n  event FirstLossDeposited(address indexed caller, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when first loss is withdrawn from the pool.\\n   */\\n  event FirstLossWithdrawn(address indexed caller, address indexed receiver, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when first loss capital is used to cover loan defaults\\n   */\\n  event FirstLossApplied(address indexed loan, uint256 amount);\\n\\n  /**\\n   * @dev The Pool's admin\\n   */\\n  function admin() external view returns (address);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                Settings\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev The current configurable pool settings.\\n   */\\n  function settings() external view returns (IPoolConfigurableSettings memory);\\n\\n  /**\\n   * @dev Allow the current pool admin to update the service fee.\\n   */\\n  function setServiceFeeBps(uint256) external;\\n\\n  /**\\n   * @dev Allow the current pool admin to update the fixed fee.\\n   */\\n  function setFixedFee(uint256 amount, uint256 interval) external;\\n\\n  /**\\n   * @dev Allow the current pool admin to manually change the hasFunded status.\\n   */\\n  function setHasFunded(bool newStatus) external;\\n\\n  /**\\n   * @dev Allow the current pool admin to update the pool fees\\n   * before the pool has been activated.\\n   */\\n  function setRequestFee(uint256) external;\\n\\n  /**\\n   * @dev Returns the redeem fee for a given withdrawal amount at the current block.\\n   * The fee is the number of shares that will be charged.\\n   */\\n  function requestFee(uint256) external view returns (uint256);\\n\\n  /**\\n   * @dev Allow the current pool admin to update the pool cancellation fees\\n   * before the pool has been activated.\\n   */\\n  function setRequestCancellationFee(uint256) external;\\n\\n  /**\\n   * @dev Returns the cancellation fee for a given withdrawal request at the\\n   * current block. The fee is the number of shares that will be charged.\\n   */\\n  function requestCancellationFee(uint256) external view returns (uint256);\\n\\n  /**\\n   * @dev Allow the current pool admin to update the withdraw gate at any\\n   * time if the pool is Initialized or Active\\n   */\\n  function setWithdrawGate(uint256) external;\\n\\n  /**\\n   * @dev Returns the current withdraw gate in bps. If the pool is closed,\\n   * this is set to 10_000 (100%)\\n   */\\n  function withdrawGate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the current withdraw request period duration in seconds. If the pool is closed,\\n   * this is lowered (if needed) to 1 day.\\n   */\\n  function withdrawRequestPeriodDuration() external view returns (uint256);\\n\\n  /**\\n   * @dev Allow the current pool admin to update the pool capacity at any\\n   * time.\\n   */\\n  function setPoolCapacity(uint256) external;\\n\\n  /**\\n   * @dev Allow the current pool admin to update the pool's end date. The end date can\\n   * only be moved earlier (but not in the past, as measured by the current block's timestamp).\\n   * Once the end date is reached, the Pool is closed.\\n   */\\n  function setPoolEndDate(uint256) external;\\n\\n  /**\\n   * @dev The current amount of first loss available to the pool\\n   */\\n  function firstLossVault() external view returns (address);\\n\\n  /**\\n   * @dev The current amount of first loss available to the pool\\n   */\\n  function firstLossBalance() external view returns (uint256);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                State\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Returns the current pool lifecycle state.\\n   */\\n  function state() external view returns (IPoolLifeCycleState);\\n\\n  /**\\n   * @dev Returns true if the pool is in an active or initialized state\\n   */\\n  function isInitializedOrActive() external view returns (bool);\\n\\n  /**\\n   * @dev Returns true if the pool is in an active or closed state\\n   */\\n  function isActiveOrClosed() external view returns (bool);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                First Loss\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Deposits first-loss to the pool. Can only be called by the Pool Admin.\\n   */\\n  function depositFirstLoss(uint256 amount, address spender) external;\\n\\n  /**\\n   * @dev Withdraws first-loss from the pool. Can only be called by the Pool Admin.\\n   */\\n  function withdrawFirstLoss(uint256 amount, address receiver) external returns (uint256);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                Loans\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Called by the pool admin, this transfers liquidity from the pool to a given loan.\\n   */\\n  function fundLoan(address) external;\\n\\n  /**\\n   * @dev Called by the pool admin, this marks a loan as in default, triggering liquiditation\\n   * proceedings and updating pool accounting.\\n   */\\n  function defaultLoan(address) external;\\n\\n  /**\\n   * @dev Called by the pool admin, this allows reclaiming loan principal funds back to the pool\\n   * from open-term loans.\\n   */\\n  function reclaimLoanFunds(address loan, uint256 amount) external;\\n\\n  /**\\n   * @dev Called by the pool admin, this allows claiming loan collateral\\n   * back to the PA.\\n   */\\n  function claimLoanCollateral(\\n    address loan,\\n    address[] memory assets\\n  ) external;\\n\\n  /**\\n   * @dev Called by the pool admin, this cancels a funded loan.\\n   */\\n  function cancelFundedLoan(address loan) external;\\n\\n  /**\\n   * @dev Called by the pool admin, this marks an open-term loan as being\\n   * called back.\\n   */\\n  function markLoanCallback(address loan) external;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                Fees\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Called by the pool admin, this claims a fixed fee from the pool. Fee can only be\\n   * claimed once every interval, as set on the pool.\\n   */\\n  function claimFixedFee() external;\\n\\n  /**\\n   * @dev Called by the pool admin, this claims fees that have accumulated\\n   * in the Pool's FeeVault from ongoing borrower payments.\\n   */\\n  function withdrawFeeVault(uint256 amount, address receiver) external;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                Snapshot\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Snapshots the Pool, earmarking percentages of liquidity reserve for withdrawal.\\n   */\\n  function snapshot() external;\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/interfaces/IWithdrawController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev Contains state related to withdraw requests, either globally or for a given lender.\\n */\\nstruct IPoolWithdrawState {\\n  uint256 requestedShares; // Number of shares requested in the `latestPeriod`\\n  uint256 eligibleShares; // Number of shares that are eligibble to be CONSIDERED for withdraw by the snapshot\\n  uint256 latestRequestPeriod; // Period where this was last updated\\n  uint256 redeemableShares; // The shares that are currently withdrawable\\n  uint256 withdrawableAssets; // The assets that are currently withdrawable\\n  uint256 latestSnapshotPeriod; // window last snapshotted in\\n}\\n\\n/**\\n * @dev Holds per-snapshot state used to compute a user's redeemable shares and assets.\\n */\\nstruct IPoolSnapshotState {\\n  uint256 redeemableRateRay;\\n  uint256 sharesRedeemable;\\n  uint256 fxRateRay;\\n  uint256 nextSnapshotPeriod; // This serves as a pointer to the next snapshot (set whenever the next snapshot runs).\\n}\\n\\n/**\\n * @title A Pool's Withdraw controller\\n * @dev Holds state related to withdraw requests, and logic for snapshotting the\\n * pool's liquidity reserve at regular intervals, earmarking funds for lenders according\\n * to their withdrawal requests.\\n */\\ninterface IWithdrawController {\\n  /**\\n   * @dev Emitted when a lender claims snapshots.\\n   */\\n  event SnapshotsClaimed(address indexed lender, uint256 numberSnapshots, uint256 shares, uint256 assets);\\n\\n  function withdrawPeriod() external view returns (uint256);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Balance Views\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Returns the amount of shares that should be considered interest\\n   * bearing for a given owner.  This number is their balance, minus their\\n   * \\\"redeemable\\\" shares.\\n   */\\n  function interestBearingBalanceOf(address) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of shares that have been requested to be redeemed\\n   * by the owner as of the current block.\\n   */\\n  function requestedBalanceOf(address) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of shares that are available to be redeemed by\\n   * the owner in the current block.\\n   */\\n  function totalRequestedBalance() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of shares owned by an address that are \\\"vested\\\"\\n   * enough to be considered for redeeming during the next withdraw period.\\n   */\\n  function eligibleBalanceOf(address) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of shares overall that are \\\"vested\\\" enough to be\\n   * considered for redeeming during the next withdraw period.\\n   */\\n  function totalEligibleBalance() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of shares that are available to be redeemed\\n   * overall in the current block.\\n   */\\n  function totalRedeemableShares() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the number of `assets` that are available to be withdrawn\\n   * overall in the current block.\\n   */\\n  function totalWithdrawableAssets() external view returns (uint256);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Max Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Returns the maximum number of `shares` that can be\\n   * requested to be redeemed from the owner balance with a single\\n   * `requestRedeem` call in the current block.\\n   *\\n   * Note: This is equivalent of EIP-4626 `maxRedeem`\\n   */\\n  function maxRedeemRequest(address) external view returns (uint256);\\n\\n  /**\\n   * @dev The maximum amount of shares that can be redeemed from the owner\\n   * balance through a redeem call.\\n   */\\n  function maxRedeem(address) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the maximum amount of underlying assets that can be\\n   * withdrawn from the owner balance with a single withdraw call.\\n   */\\n  function maxWithdraw(address) external view returns (uint256);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Preview Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Simulate the effects of a redeem request at the current block.\\n   * Returns the amount of underlying assets that would be requested if this\\n   * entire redeem request were to be processed at the current block.\\n   *\\n   * Note: This is equivalent of EIP-4626 `previewRedeem`\\n   */\\n  function previewRedeemRequest(uint256) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of fees (shares) that would be required to process\\n   * a redeem request at this current block.\\n   *\\n   */\\n  function previewRedeemRequestFees(uint256 shares) external view returns (uint256 feeShares);\\n\\n  /**\\n   * @dev Simulate the effects of a withdrawal request at the current block.\\n   * Returns the amount of `shares` that would be burned if this entire\\n   * withdrawal request were to be processed at the current block.\\n   *\\n   * Note: This is equivalent of EIP-4626 `previewWithdraw`\\n   */\\n  function previewWithdrawRequest(uint256) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of fees that would be burned, in shares, to fulfill\\n   * a withdraw request in this current block.\\n   */\\n  function previewWithdrawRequestFees(uint256 assets) external view returns (uint256 feeShares);\\n\\n  /**\\n   * @dev Simulates the effects of their redeemption at the current block.\\n   * Per EIP4626, should round DOWN.\\n   */\\n  function previewRedeem(address, uint256) external view returns (uint256);\\n\\n  /**\\n   * @dev Simulate the effects of their withdrawal at the current block.\\n   * Per EIP4626, should round UP on the number of shares required for assets.\\n   */\\n  function previewWithdraw(address, uint256) external view returns (uint256);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Request Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Requests redeeming a specific number of `shares` and `assets` from\\n   * the pool.\\n   *\\n   * NOTE: The pool is responsible for handling any fees, and for providing\\n   * the proper shares/assets ratio.\\n   */\\n  function performRequest(address, uint256) external;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        Cancellation Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Returns the maximum number of `shares` that can be\\n   * cancelled from being requested for a redemption.\\n   *\\n   * Note: This is equivalent of EIP-4626 `maxRedeem`\\n   */\\n  function maxRequestCancellation(address) external view returns (uint256);\\n\\n  /**\\n   * @dev Cancels a withdraw request for the owner,\\n   *\\n   * NOTE This method does not charge fees, as this should be handled outside\\n   * of the WithdrawController.\\n   */\\n  function performRequestCancellation(address, uint256) external;\\n\\n  /**\\n   * @dev Iterates over snapshots, up to a limit, and claims eligible funds earmarked\\n   * across the snapshots, updating the lenders withdrawal state accordingly.\\n   */\\n  function claimSnapshots(address lender, uint256 limit) external returns (uint256 shares, uint256 assets);\\n\\n  /**\\n   * @dev Determines whether a lender is \\\"up to date\\\" with the snapshots.\\n   */\\n  function claimRequired(address lender) external view returns (bool);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Snapshot\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Snapshot the protocol. Performs accounting for withdrawals\\n   */\\n  function snapshot(\\n    uint256 withdrawGate\\n  ) external returns (uint256 period, uint256 shares, uint256 assets, bool periodSnapshotted);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Withdraw / Redeem\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev Redeems a specific number of shares from owner and send assets of underlying token from the vault to receiver.\\n   *\\n   * Per EIP4626, should round DOWN.\\n   */\\n  function redeem(address, uint256) external returns (uint256);\\n\\n  /**\\n   * @dev Burns shares from owner and send exactly assets token from the vault to receiver.\\n   * Should round UP for EIP4626.\\n   */\\n  function withdraw(address, uint256) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/interfaces/ILoanFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport '../../interfaces/ILoan.sol';\\n\\n/**\\n * @title Interface for the LoanFactory.\\n */\\ninterface ILoanFactory {\\n  /**\\n   * @dev Emitted when a loan is created.\\n   */\\n  event LoanCreated(address indexed addr);\\n\\n  /**\\n   * @dev Creates a loan\\n   * @dev Emits `LoanCreated` event.\\n   */\\n  function createLoan(\\n    address borrower,\\n    address pool,\\n    address liquidityAsset,\\n    ILoanSettings memory settings\\n  ) external returns (address);\\n\\n  /**\\n   * @dev Checks whether a Loan address was created by the factory.\\n   */\\n  function isLoan(address loan) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title Interface for the VaultFactory.\\n */\\ninterface IVaultFactory {\\n  /**\\n   * @dev Emitted when a vault is created.\\n   */\\n  event VaultCreated(address indexed owner);\\n\\n  /**\\n   * @dev Creates a new vault.\\n   * @dev Emits a `VaultCreated` event.\\n   */\\n  function createVault(address owner) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/factories/LoanFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport '../interfaces/IServiceConfiguration.sol';\\nimport './interfaces/ILoanFactory.sol';\\nimport '../Loan.sol';\\nimport '../upgrades/BeaconProxyFactory.sol';\\nimport { BeaconProxy } from '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\\n\\n/**\\n * @title A factory that emits Loan contracts.\\n * @dev Acts as a beacon contract, emitting beacon proxies and holding a reference\\n * to their implementation contract.\\n */\\ncontract LoanFactory is ILoanFactory, BeaconProxyFactory {\\n  /**\\n   * @inheritdoc ILoanFactory\\n   */\\n  mapping(address => bool) public isLoan;\\n\\n  /**\\n   * @dev A reference to the VaultFactory.\\n   */\\n  address internal _vaultFactory;\\n\\n  /**\\n   * @dev Constructor for the LoanFactory.\\n   * @param serviceConfiguration Reference to the global service configuration.\\n   * @param vaultFactory Reference to a VaultFactory.\\n   */\\n  constructor(address serviceConfiguration, address vaultFactory) {\\n    _serviceConfiguration = IServiceConfiguration(serviceConfiguration);\\n    _vaultFactory = vaultFactory;\\n  }\\n\\n  /**\\n   * @dev Creates a Loan\\n   * @dev Emits `LoanCreated` event.\\n   */\\n  function createLoan(\\n    address borrower,\\n    address pool,\\n    address liquidityAsset,\\n    ILoanSettings memory settings\\n  ) public returns (address) {\\n    require(_serviceConfiguration.paused() == false, 'LoanFactory: Protocol paused');\\n    require(implementation != address(0), 'LoanFactory: no implementation');\\n    address addr = initializeLoan(borrower, pool, liquidityAsset, settings);\\n    emit LoanCreated(addr);\\n    isLoan[addr] = true;\\n    return addr;\\n  }\\n\\n  /**\\n   * @dev Internal initialization of Beacon proxy for Loans\\n   */\\n  function initializeLoan(\\n    address borrower,\\n    address pool,\\n    address liquidityAsset,\\n    ILoanSettings memory settings\\n  ) internal virtual returns (address) {\\n    BeaconProxy proxy = new BeaconProxy(\\n      address(this),\\n      abi.encodeWithSelector(\\n        Loan.initialize.selector,\\n        address(_serviceConfiguration),\\n        address(this),\\n        borrower,\\n        pool,\\n        liquidityAsset,\\n        _vaultFactory,\\n        settings\\n      )\\n    );\\n    return address(proxy);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport { IERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\n/**\\n * @title The interface according to the ERC-4626 standard.\\n */\\ninterface IERC4626 is IERC20Upgradeable {\\n  /**\\n   * @dev Emitted when tokens are deposited into the vault via the mint and deposit methods.\\n   */\\n  event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n  /**\\n   * @dev Emitted when shares are withdrawn from the vault by a depositor in the redeem or withdraw methods.\\n   */\\n  event Withdraw(\\n    address indexed sender,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 shares\\n  );\\n\\n  /**\\n   * @dev Return the address of the underlying ERC-20 token used for the vault for accounting, depositing, withdrawing.\\n   */\\n  function asset() external view returns (address);\\n\\n  /**\\n   * @dev Calculate the total amount of underlying assets held by the vault.\\n   * NOTE: This method includes assets that are marked for withdrawal.\\n   */\\n  function totalAssets() external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the amount of shares that would be exchanged by the vault for the amount of assets provided.\\n   * Rounds DOWN per EIP4626.\\n   */\\n  function convertToShares(uint256 assets) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the amount of assets that would be exchanged by the vault for the amount of shares provided.\\n   * Rounds DOWN per EIP4626.\\n   */\\n  function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the maximum amount of underlying assets that can be deposited in a single deposit call by the receiver.\\n   */\\n  function maxDeposit(address receiver) external view returns (uint256);\\n\\n  /**\\n   * @dev Allows users to simulate the effects of their deposit at the current block.\\n   */\\n  function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n  /**\\n   * @dev Deposits assets of underlying tokens into the vault and grants ownership of shares to receiver.\\n   * Emits a {Deposit} event.\\n   */\\n  function deposit(uint256 assets, address receiver) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the maximum amount of shares that can be minted in a single mint call by the receiver.\\n   */\\n  function maxMint(address receiver) external view returns (uint256);\\n\\n  /**\\n   * @dev Allows users to simulate the effects of their mint at the current block.\\n   */\\n  function previewMint(uint256 shares) external view returns (uint256);\\n\\n  /**\\n   * @dev Mints exactly shares vault shares to receiver by depositing assets of underlying tokens.\\n   * Emits a {Deposit} event.\\n   */\\n  function mint(uint256 shares, address receiver) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the maximum amount of underlying assets that can be withdrawn from the owner balance with a single withdraw call.\\n   */\\n  function maxWithdraw(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Simulate the effects of their withdrawal at the current block.\\n   * Per EIP4626, should round UP on the number of shares required for assets.\\n   */\\n  function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n  /**\\n   * @dev Burns shares from owner and send exactly assets token from the vault to receiver.\\n   * Emits a {Withdraw} event.\\n   * Should round UP for EIP4626.\\n   */\\n  function withdraw(uint256 assets, address receiver, address owner) external returns (uint256);\\n\\n  /**\\n   * @dev The maximum amount of shares that can be redeemed from the owner balance through a redeem call.\\n   */\\n  function maxRedeem(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Simulates the effects of their redeemption at the current block.\\n   * Per EIP4626, should round DOWN.\\n   */\\n  function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n  /**\\n   * @dev Redeems a specific number of shares from owner and send assets of underlying token from the vault to receiver.\\n   * Emits a {Withdraw} event.\\n   * Per EIP4626, should round DOWN.\\n   */\\n  function redeem(uint256 shares, address receiver, address owner) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport './IServiceConfiguration.sol';\\nimport '../interfaces/IVault.sol';\\n\\n/**\\n * @title An enum capturing the various states a Loan may be in.\\n */\\nenum ILoanLifeCycleState {\\n  Requested,\\n  Collateralized,\\n  Canceled,\\n  Defaulted,\\n  Funded,\\n  Matured,\\n  Active\\n}\\n\\n/**\\n * @title The basic type of a loan.\\n */\\nenum ILoanType {\\n  Fixed,\\n  Open\\n}\\n\\n/**\\n * @title The various Loan terms.\\n */\\nstruct ILoanSettings {\\n  ILoanType loanType;\\n  uint256 principal;\\n  uint256 apr;\\n  uint256 duration;\\n  uint256 paymentPeriod;\\n  uint256 dropDeadTimestamp;\\n  uint256 latePayment;\\n  uint256 originationBps;\\n}\\n\\nstruct ILoanFees {\\n  uint256 interestPayment; // interest payment transferred to pool\\n  uint256 firstLossFee; // deducted from interest payments and transferred to first loss vault\\n  uint256 serviceFee; // deducted from interest payments and transferred to fee vault\\n  uint256 originationFee; // additional payment on top of interest payments and transferred to fee vault\\n  uint256 latePaymentFee; // additional payment transferred to pool\\n  uint256 payment; // cached monthly payment by borrowers\\n}\\n\\n/**\\n * @title The primary interface for Perimeter loans.\\n */\\ninterface ILoan {\\n  /**\\n   * @dev Emitted when loan is funded.\\n   */\\n  event LoanFunded(address asset, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when the loan is drawn down.\\n   */\\n  event LoanDrawnDown(address asset, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when a Loan's lifecycle state transitions\\n   */\\n  event LifeCycleStateTransition(ILoanLifeCycleState state);\\n\\n  /**\\n   * @dev Emitted when collateral is posted to the loan.\\n   */\\n  event PostedCollateral(address asset, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when collateral is withdrawn from the loan.\\n   */\\n  event WithdrewCollateral(address asset, uint256 amount);\\n\\n\\n  /**\\n   * @dev Emitted when a loan is canceled and principal returned to the pool.\\n   */\\n  event CanceledLoanPrincipalReturned(address indexed pool, uint256 principal);\\n\\n  /**\\n   * @dev Current Loan lifecycle state.\\n   */\\n  function state() external view returns (ILoanLifeCycleState);\\n\\n  /**\\n   * @dev The loan's borrower.\\n   */\\n  function borrower() external view returns (address);\\n\\n  /**\\n   * @dev The pool associated with a loan.\\n   */\\n  function pool() external view returns (address);\\n\\n  /**\\n   * @dev The factory that created the loan.\\n   */\\n  function factory() external view returns (address);\\n\\n  /**\\n   * @dev A timestamp that controls when the loan can be dissolved and collateral returned.\\n   */\\n  function dropDeadTimestamp() external view returns (uint256);\\n\\n  /**\\n   * @dev Cancels the loan if in a Requested state.\\n   */\\n  function cancelRequested() external returns (ILoanLifeCycleState);\\n\\n  /**\\n   * @dev Cancels the loan if in a Collateralized state.\\n   */\\n  function cancelCollateralized() external returns (ILoanLifeCycleState);\\n\\n  /**\\n   * @dev Allows borrower to PM to cancel a Funded loan, after the dropdead date.\\n   * This cancels a loan, allowing collateral to be returned and principal reclaimed to\\n   * the pool.\\n   */\\n  function cancelFunded() external returns (ILoanLifeCycleState);\\n\\n  /**\\n   * @dev Number of payments remaining\\n   */\\n  function paymentsRemaining() external view returns (uint256);\\n\\n  /**\\n   * @dev Amount expected in each payment\\n   */\\n  function payment() external view returns (uint256);\\n\\n  /**\\n   * @dev Due date for the next payment\\n   */\\n  function paymentDueDate() external view returns (uint256);\\n\\n  /**\\n   * @dev Complete the next payment according to loan schedule inclusive of all fees.\\n   */\\n  function completeNextPayment() external;\\n\\n  /**\\n   * @dev Complete the final payment of the loan.\\n   */\\n  function completeFullPayment() external;\\n\\n  /**\\n   * @dev Allows partial repayment of outstanding principal in open-term loans.\\n   */\\n  function paydownPrincipal(uint256 amount) external;\\n\\n  /**\\n   * @dev Allows a pool admin to reclaim funds held in the funding vault.\\n   */\\n  function reclaimFunds(uint256 amount) external;\\n\\n  /**\\n   * @dev Preview fees for a given interest payment amount.\\n   * @param amount allows previewing the fee for a full or prorated payment.\\n   */\\n  function previewFees(uint256 amount) external view returns (ILoanFees memory);\\n\\n  /**\\n   * @dev Called by the borrower, this posts ERC20 assets to the collateral vault.\\n   */\\n  function postFungibleCollateral(address asset, uint256 amount) external returns (ILoanLifeCycleState);\\n\\n  /**\\n   * @dev Returns the ERC20 collateral posted to the loan.\\n   */\\n  function fungibleCollateral() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Transfers out the collateral held by the loan. Can only be\\n   * called by the borrower or the Pool Admin under specific constraints.\\n   */\\n  function claimCollateral(address[] memory assets) external;\\n\\n  /**\\n   * @dev Called by the Pool, this funds the loan with Pool liquidity.\\n   */\\n  function fund() external returns (ILoanLifeCycleState);\\n\\n  /**\\n   * @dev Called by the borrower, this draws down the loans funds.\\n   * Fixed term loans can only drawdown the full loan amount.\\n   */\\n  function drawdown(uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev When the loan was created.\\n   */\\n  function createdAt() external returns (uint256);\\n\\n  /**\\n   * @dev Duration of the loan, after which the principal must be returned.\\n   */\\n  function duration() external returns (uint256);\\n\\n  /**\\n   * @dev The time between each loan interest payment.\\n   */\\n  function paymentPeriod() external view returns (uint256);\\n\\n  /**\\n   * @dev Loan type configured for the loan. Either fixed or open term.\\n   */\\n  function loanType() external returns (ILoanType);\\n\\n  /**\\n   * @dev Interest rate for the loan.\\n   */\\n  function apr() external returns (uint256);\\n\\n  /**\\n   * @dev Amount of loan principal.\\n   */\\n  function principal() external returns (uint256);\\n\\n  /**\\n   * @dev The amount of principal outstanding (drawn out of the loan) by the borrower.\\n   * In fixed term loans, this is equal to the principal.\\n   */\\n  function outstandingPrincipal() external view returns (uint256);\\n\\n  /**\\n   * @dev Address of the loan's funding vault, which holds liquidity transferred from the pool.\\n   */\\n  function fundingVault() external returns (IVault);\\n\\n  /**\\n   * @dev Called by the Pool, this triggers default proceedings on the loan.\\n   */\\n  function markDefaulted() external returns (ILoanLifeCycleState);\\n\\n  /**\\n   * @dev Called by the PoolAdmin, this indicated that the open term loan\\n   * has been called back.\\n   */\\n  function markCallback() external;\\n\\n  /**\\n   * @dev Liquidity asset of the loan or pool.\\n   */\\n  function liquidityAsset() external view returns (address);\\n\\n  /**\\n   * @dev Address of the global service configuration.\\n   */\\n  function serviceConfiguration() external view returns (IServiceConfiguration);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport './IERC4626.sol';\\nimport './IServiceConfiguration.sol';\\nimport './IRequestWithdrawable.sol';\\nimport '../controllers/interfaces/IPoolController.sol';\\nimport '../controllers/interfaces/IWithdrawController.sol';\\nimport { EnumerableSet } from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\n/**\\n * @title Data type storing collected accounting statistics\\n */\\nstruct IPoolAccountings {\\n  uint256 outstandingLoanPrincipals;\\n  uint256 fixedFeeDueDate;\\n  uint256 totalAssetsDeposited;\\n  uint256 totalAssetsWithdrawn;\\n  uint256 totalDefaults;\\n  uint256 totalFirstLossApplied;\\n}\\n\\n/**\\n * @title The interface for liquidity pools.\\n */\\ninterface IPool is IERC4626, IRequestWithdrawable {\\n  /**\\n   * @dev Emitted when a loan is funded from the pool.\\n   */\\n  event LoanFunded(address indexed loan, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when a funded loan matures.\\n   */\\n  event LoanMatured(address indexed loan);\\n\\n  /**\\n   * @dev Emitted when a redeem fee is paid.\\n   */\\n  event RequestFeePaid(address indexed lender, uint256 feeShares);\\n\\n  /**\\n   * @dev Emitted when a withdrawal is requested.\\n   */\\n  event WithdrawRequested(address indexed lender, uint256 assets, uint256 shares);\\n\\n  /**\\n   * @dev Emitted when a withdrawal is requested.\\n   */\\n  event WithdrawRequestCancelled(address indexed lender, uint256 assets, uint256 shares);\\n\\n  /**\\n   * @dev Emitted when the pool is snapshotted for a given withdraw period.\\n   */\\n  event PoolSnapshotted(uint256 withDrawPeriod, uint256 redeemableShares, uint256 withdrawableAssets);\\n\\n  /**\\n   * @dev The PoolController contract\\n   */\\n  function poolController() external view returns (IPoolController);\\n\\n  /**\\n   * @dev The WithdrawController contract\\n   */\\n  function withdrawController() external view returns (IWithdrawController);\\n\\n  /**\\n   * @dev The ServiceConfiguration.\\n   */\\n  function serviceConfiguration() external view returns (IServiceConfiguration);\\n\\n  /**\\n   * @dev The current configurable pool settings.\\n   */\\n  function settings() external view returns (IPoolConfigurableSettings calldata settings);\\n\\n  /**\\n   * @dev The current pool state.\\n   */\\n  function state() external view returns (IPoolLifeCycleState);\\n\\n  /**\\n   * @dev The admin for the pool.\\n   */\\n  function admin() external view returns (address);\\n\\n  /**\\n   * @dev The address of the fee vault.\\n   */\\n  function feeVault() external view returns (address);\\n\\n  /**\\n   * @dev The first loss vault\\n   */\\n  function firstLossVault() external view returns (address);\\n\\n  /**\\n   * @dev The pool accounting variables;\\n   */\\n  function accountings() external view returns (IPoolAccountings memory);\\n\\n  /**\\n   * @dev The activation timestamp of the pool.\\n   */\\n  function activatedAt() external view returns (uint256);\\n\\n  /**\\n   * @dev The pool fee, in bps, taken from each interest payment\\n   */\\n  function serviceFeeBps() external view returns (uint256);\\n\\n  /**\\n   * @dev The sum of all assets available in the liquidity pool, excluding\\n   * any assets that are marked for withdrawal.\\n   */\\n  function liquidityPoolAssets() external view returns (uint256);\\n\\n  /**\\n   * @dev Callback from the pool controller when the pool is activated\\n   */\\n  function onActivated() external;\\n\\n  /**\\n   * @dev Snapshots the pool's withdrawals\\n   */\\n  function snapshot() external;\\n\\n  /**\\n   * @dev Returns the set of currently Active loans.\\n   */\\n  function activeLoans() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns whether a loan is an active Pool loan.\\n   */\\n  function isActiveLoan(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns whether a loan is an active Pool loan.\\n   */\\n  function numActiveLoans() external view returns (uint256);\\n\\n  /**\\n   * @dev Fund a loan, add it to the funded loans list and increment the\\n   * outstanding principal balance. Only callable by the Pool Controller\\n   */\\n  function fundLoan(address) external;\\n\\n  /**\\n   * @dev Allow the current pool admin to manually change the hasFunded status via controller.\\n   */\\n  function setHasFunded(bool newStatus) external;\\n\\n  /**\\n   * @dev Called by a loan, it notifies the pool that the loan has returned\\n   * principal to the pool.\\n   */\\n  function onLoanPrincipalReturned(uint256 amount) external;\\n\\n  /**\\n   * @dev Called by a loan, it notifies the pool that the loan has transitioned stated.\\n   */\\n  function onLoanStateTransitioned() external;\\n\\n  /**\\n   * @dev Called by the PoolController, notifies the Pool that a loan has been defaulted.\\n   */\\n  function onLoanDefaulted(address loan, uint256 firstLossApplied) external;\\n\\n  /**\\n   * @dev Called by an active loan, this notifies the Pool that payment will be made.\\n   */\\n  function onLoanWillMakePayment() external;\\n\\n  /**\\n   * @dev Called by the Pool Controller, it transfers the fixed fee\\n   */\\n  function claimFixedFee(address, uint256, uint256) external;\\n\\n  /**\\n   * @dev Called by the Pool Controller, it withdraws from the FeeVault.\\n   */\\n  function withdrawFeeVault(uint256 amount, address receiver) external;\\n\\n  /**\\n   * @dev Calculate the total amount of underlying assets held by the vault,\\n   * excluding any assets due for withdrawal.\\n   */\\n  function totalAvailableAssets() external view returns (uint256);\\n\\n  /**\\n   * @dev The total available supply that is not marked for withdrawal\\n   */\\n  function totalAvailableSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev The accrued interest at the current block.\\n   */\\n  function currentExpectedInterest() external view returns (uint256 interest);\\n\\n  /**\\n   * @dev Claims funds earmarked across snapshots, up a limit of n snapshots.\\n   */\\n  function claimSnapshots(uint256 limit) external returns (uint256 shares, uint256 assets);\\n\\n  /**\\n   * @dev Determines whether a lender has any funds across snapshots eligible for claiming.\\n   */\\n  function claimRequired(address lender) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRequestWithdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\n/**\\n * @title Interface that exposes methods to request withdraws / redeems.\\n * @dev Terminology and design informed to complement ERC4626.\\n */\\ninterface IRequestWithdrawable {\\n  /**\\n   * @dev Returns the maximum number of `shares` that can be\\n   * requested to be redeemed from the owner balance with a single\\n   * `requestRedeem` call in the current block.\\n   *\\n   * Note: This is equivalent of EIP-4626 `maxRedeem`\\n   */\\n  function maxRedeemRequest(address owner) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Returns the maximum amount of underlying `assets` that can be\\n   * requested to be withdrawn from the owner balance with a single\\n   * `requestWithdraw` call in the current block.\\n   *\\n   * Note: This is equivalent of EIP-4626 `maxWithdraw`\\n   */\\n  function maxWithdrawRequest(address owner) external view returns (uint256 maxAssets);\\n\\n  /**\\n   * @dev Simulate the effects of a redeem request at the current block.\\n   * Returns the amount of underlying assets that would be requested if this\\n   * entire redeem request were to be processed at the current block.\\n   *\\n   * Note: This is equivalent of EIP-4626 `previewRedeem`\\n   */\\n  function previewRedeemRequest(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @dev Returns the amount of fees (shares) that would be required to process\\n   * a redeem request at this current block.\\n   *\\n   */\\n  function previewRedeemRequestFees(uint256 shares) external view returns (uint256 feeShares);\\n\\n  /**\\n   * @dev Simulate the effects of a withdrawal request at the current block.\\n   * Returns the amount of `shares` that would be burned if this entire\\n   * withdrawal request were to be processed at the current block.\\n   *\\n   * Note: This is equivalent of EIP-4626 `previewWithdraw`\\n   */\\n  function previewWithdrawRequest(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the amount of fees that would be burned, in shares, to fulfill\\n   * a withdraw request in this current block.\\n   */\\n  function previewWithdrawRequestFees(uint256 assets) external view returns (uint256 feeShares);\\n\\n  /**\\n   * @dev Submits a withdrawal request, incurring a fee.\\n   */\\n  function requestRedeem(uint256 shares) external returns (uint256 assets);\\n\\n  /**\\n   * @dev Submits a withdrawal request, incurring a fee.\\n   */\\n  function requestWithdraw(uint256 assets) external returns (uint256 shares);\\n\\n  /**\\n   * @dev Returns the maximum number of `shares` that can be\\n   * cancelled from being requested for a redemption.\\n   *\\n   * Note: This is equivalent of EIP-4626 `maxRedeem`\\n   */\\n  function maxRequestCancellation(address owner) external view returns (uint256 maxShares);\\n\\n  /**\\n   * @dev Cancels a redeem request for a specific number of `shares` from\\n   * owner and returns an estimated amnount of underlying that equates to\\n   * this number of shares.\\n   *\\n   * Emits a {WithdrawRequestCancelled} event.\\n   */\\n  function cancelRedeemRequest(uint256 shares) external returns (uint256 assets);\\n\\n  /**\\n   * @dev Cancels a withdraw request for a specific values of `assets` from\\n   * owner and returns an estimated number of shares that equates to\\n   * this number of assets.\\n   *\\n   * Emits a {WithdrawRequestCancelled} event.\\n   */\\n  function cancelWithdrawRequest(uint256 assets) external returns (uint256 shares);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IServiceConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title The protocol global Service Configuration\\n */\\ninterface IServiceConfiguration {\\n  /**\\n   * @dev Emitted when an address is changed.\\n   */\\n  event AddressSet(bytes32 which, address addr);\\n\\n  /**\\n   * @dev Emitted when a liquidity asset is set.\\n   */\\n  event LiquidityAssetSet(address addr, bool value);\\n\\n  /**\\n   * @dev Emitted when first loss minimum is set for an asset.\\n   */\\n  event FirstLossMinimumSet(address addr, uint256 value);\\n\\n  /**\\n   * @dev Emitted when a parameter is set.\\n   */\\n  event ParameterSet(bytes32, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the protocol is paused.\\n   */\\n  event ProtocolPaused(bool paused);\\n\\n  /**\\n   * @dev Emitted when a loan factory is set\\n   */\\n  event LoanFactorySet(address indexed factory, bool isValid);\\n\\n  /**\\n   * @dev Emitted when the TermsOfServiceRegistry is set\\n   */\\n  event TermsOfServiceRegistrySet(address indexed registry);\\n\\n  /**\\n   * @dev Emitted when a lender's whitelist status is successfully toggled.\\n   */\\n  event PermittedLenderToggled(address indexed lender, bool newStatus);\\n\\n  /**\\n   * @dev Emitted when a borrower's whitelist status is successfully toggled.\\n   */\\n  event PermittedBorrowerToggled(address indexed borrower, bool newStatus);\\n\\n\\n  /**\\n   * @dev checks if a given address has the Operator role\\n   */\\n  function isOperator(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev checks if a given address has the Deployer role\\n   */\\n  function isDeployer(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Whether the protocol is paused.\\n   */\\n  function paused() external view returns (bool);\\n\\n  /**\\n   * @dev First loss minimum required per-currency to activate a pool.\\n   */\\n  function firstLossMinimum(address addr) external view returns (uint256);\\n\\n  /**\\n   * @dev Ongoing fee deducted from borrower interest payments to the first loss vault.\\n   */\\n  function firstLossFeeBps() external view returns (uint256);\\n\\n  /**\\n   * @dev Protocol fee. Set to zero.\\n   */\\n  function protocolFeeBps() external view returns (uint256);\\n\\n  /**\\n   * @dev Whether an address is supported as a liquidity asset.\\n   */\\n  function isLiquidityAsset(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev checks if an address is a valid loan factory\\n   * @param addr Address of loan factory\\n   * @return bool whether the loan factory is valid\\n   */\\n  function isLoanFactory(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Sets whether a loan factory is valid\\n   * @param addr Address of loan factory\\n   * @param isValid Whether the loan factory is valid\\n   */\\n  function setLoanFactory(address addr, bool isValid) external;\\n\\n  /**\\n   * @dev Sets the first loss minimum for the given asset\\n   * @param addr address of the liquidity asset\\n   * @param value the minimum tokens required to be deposited by pool admins\\n   */\\n  function setFirstLossMinimum(address addr, uint256 value) external;\\n\\n  /**\\n   * @dev Sets the first loss fee for the protocol\\n   * @param value amount of each payment that is allocated to the first loss vault. Value is in basis points, e.g. 500 equals 5%.\\n   */\\n  function setFirstLossFeeBps(uint256 value) external;\\n\\n  /**\\n   * @dev Sets supported liquidity assets for the protocol. Callable by the operator.\\n   * @param addr Address of liquidity asset\\n   * @param value Whether supported or not\\n   */\\n  function setLiquidityAsset(address addr, bool value) external;\\n\\n  /**\\n   * @dev Toggle the status of a permitted lender.\\n   */\\n  function togglePermittedLender(address lender, bool newStatus) external;\\n\\n  /**\\n   * @dev Toggle the status of a permitted borrower.\\n   */\\n  function togglePermittedBorrower(address borrower, bool newStatus) external;\\n\\n  /**\\n   * @dev checks if an address is a permitted lender\\n   * @param lender Address to check\\n   * @return bool whether the lender is permitted\\n   */\\n  function isPermittedLender(address lender) external view returns (bool);\\n\\n  /**\\n   * @dev checks if an address is a permitted borrower\\n   * @param borrower Address to check\\n   * @return bool whether the borrower is permitted\\n   */\\n  function isPermittedBorrower(address borrower) external view returns (bool);\\n  \\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\n/**\\n * @title Interface for the Vault.\\n * @dev Vaults simply hold a balance, and allow withdrawals by the Vault's owner.\\n */\\ninterface IVault {\\n  /**\\n   * @dev Emitted on ERC20 withdrawals\\n   */\\n  event WithdrewERC20(address indexed asset, uint256 amount, address indexed receiver);\\n\\n  /**\\n   * @dev Withdraws ERC20 of a given asset\\n   */\\n  function withdrawERC20(address asset, uint256 amount, address receiver) external;\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport '../interfaces/ILoan.sol';\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IServiceConfiguration.sol';\\nimport '../interfaces/IVault.sol';\\n\\nlibrary LoanLib {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  uint256 public constant RAY = 10 ** 27;\\n\\n  /**\\n   * @dev Emitted when loan is funded.\\n   */\\n  event LoanFunded(address asset, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when the loan is drawn down.\\n   */\\n  event LoanDrawnDown(address asset, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when loan principal is repaid ahead of schedule.\\n   */\\n  event LoanPrincipalPaid(address asset, uint256 amount, address fundingVault);\\n\\n  /**\\n   * @dev Emitted when a loan payment is made.\\n   */\\n  event LoanPaymentMade(address pool, address liquidityAsset, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when collateral is posted to the loan.\\n   */\\n  event PostedCollateral(address asset, uint256 amount);\\n\\n  /**\\n   * @dev Emitted when collateral is withdrawn from the loan.\\n   */\\n  event WithdrewCollateral(address asset, uint256 amount);\\n\\n  /**\\n   * @dev See ILoan\\n   */\\n  event CanceledLoanPrincipalReturned(address indexed pool, uint256 principal);\\n\\n  /**\\n   * @dev Validate Loan constructor arguments\\n   */\\n  function validateLoan(\\n    IServiceConfiguration config,\\n    IPool pool,\\n    uint256 duration,\\n    uint256 paymentPeriod,\\n    uint256 principal,\\n    address liquidityAsset\\n  ) external view {\\n    require(duration > 0, 'LoanLib: Duration cannot be zero');\\n    require(paymentPeriod > 0, 'LoanLib: Payment period cannot be zero');\\n    require(paymentPeriod >= 1, 'LoanLib: Payment period must be at least 1 day');\\n    require(duration.mod(paymentPeriod) == 0, 'LoanLib: Duration not evenly divisible');\\n    require(principal > 0, 'LoanLib: Principal cannot be zero');\\n\\n    require(config.isLiquidityAsset(liquidityAsset), 'LoanLib: Liquidity asset not allowed');\\n    require(pool.asset() == liquidityAsset, 'LoanLib: Not allowed asset for pool');\\n  }\\n\\n  /**\\n   * @dev Post ERC20 tokens as collateral\\n   */\\n  function postFungibleCollateral(\\n    address collateralVault,\\n    address asset,\\n    uint256 amount,\\n    ILoanLifeCycleState state,\\n    address[] storage collateral\\n  ) external returns (ILoanLifeCycleState) {\\n    // Transfer collateral\\n    IERC20(asset).safeTransferFrom(msg.sender, collateralVault, amount);\\n\\n    // Keep track of collateral\\n    bool found = false;\\n    for (uint256 i = 0; i < collateral.length; i++) {\\n      if (collateral[i] == asset) {\\n        found = true;\\n        break;\\n      }\\n    }\\n    if (!found) {\\n      collateral.push(asset);\\n    }\\n\\n    // Emit event\\n    emit PostedCollateral(asset, amount);\\n\\n    // Determine state\\n    if (state == ILoanLifeCycleState.Requested) {\\n      return ILoanLifeCycleState.Collateralized;\\n    } else {\\n      return state;\\n    }\\n  }\\n\\n  /**\\n   * @dev Withdraw ERC20 collateral\\n   */\\n  function withdrawFungibleCollateral(\\n    IVault collateralVault,\\n    address[] memory collateralToWithdraw,\\n    address recipient\\n  ) external {\\n    for (uint256 i = 0; i < collateralToWithdraw.length; i++) {\\n      address asset = collateralToWithdraw[i];\\n\\n      // Perform transfer\\n      uint256 amount = IERC20(asset).balanceOf(address(collateralVault));\\n      collateralVault.withdrawERC20(asset, amount, recipient);\\n      emit WithdrewCollateral(asset, amount);\\n    }\\n  }\\n\\n  /**\\n   * @dev Called on loan fundings, pulls funds from the pool into the\\n   * loan's funding vault.\\n   */\\n  function fundLoan(address liquidityAsset, IVault fundingVault, uint256 amount) public returns (ILoanLifeCycleState) {\\n    IERC20(liquidityAsset).safeTransferFrom(msg.sender, address(fundingVault), amount);\\n    emit LoanFunded(liquidityAsset, amount);\\n    return ILoanLifeCycleState.Funded;\\n  }\\n\\n  /**\\n   * @dev Pulls funds from the loan's funding vault and transfers\\n   * to the borrower.\\n   */\\n  function drawdown(\\n    uint256 amount,\\n    address asset,\\n    IVault fundingVault,\\n    address receiver,\\n    uint256 paymentDueDate,\\n    ILoanSettings storage settings,\\n    ILoanLifeCycleState state\\n  ) public returns (ILoanLifeCycleState, uint256) {\\n    // First drawdown kicks off the payment schedule\\n    if (paymentDueDate == 0) {\\n      paymentDueDate = block.timestamp + (settings.paymentPeriod * 1 days);\\n    }\\n\\n    // Fixed term loans require the borrower to drawdown the full amount\\n    if (settings.loanType == ILoanType.Fixed) {\\n      require(state == ILoanLifeCycleState.Funded, 'LoanLib: invalid state');\\n      require(amount == IERC20(asset).balanceOf(address(fundingVault)), 'LoanLib: invalid amount');\\n    } else {\\n      // Open Term\\n      require(state == ILoanLifeCycleState.Funded || state == ILoanLifeCycleState.Active, 'LoanLib: invalid state');\\n    }\\n    fundingVault.withdrawERC20(asset, amount, receiver);\\n    emit LoanDrawnDown(address(asset), amount);\\n    return (ILoanLifeCycleState.Active, paymentDueDate);\\n  }\\n\\n  /**\\n   * @dev Allows partial re-payment of loan principal, moving funds from the\\n   * borrower to the loan's funding vault.\\n   */\\n  function paydownPrincipal(address asset, uint256 amount, IVault fundingVault) external {\\n    IERC20(asset).safeTransferFrom(msg.sender, address(fundingVault), amount);\\n    emit LoanPrincipalPaid(asset, amount, address(fundingVault));\\n  }\\n\\n  /**\\n   * @dev Transfers funds from the borrower back to the pool.\\n   */\\n  function completePayment(address liquidityAsset, address pool, uint256 amount) public {\\n    IERC20(liquidityAsset).safeTransferFrom(msg.sender, pool, amount);\\n    emit LoanPaymentMade(pool, liquidityAsset, amount);\\n  }\\n\\n  /**\\n   * @dev Withdraws from funding vault and returns capital to the pool.\\n   */\\n  function returnCanceledLoanPrincipal(IVault fundingVault, address asset, address pool, uint256 amount) public {\\n    fundingVault.withdrawERC20(asset, amount, pool);\\n    IPool(pool).onLoanPrincipalReturned(amount);\\n    emit CanceledLoanPrincipalReturned(pool, amount);\\n  }\\n\\n  function previewFirstLossFee(uint256 payment, uint256 firstLossFeeBps) public pure returns (uint256) {\\n    return RAY.mul(payment).mul(firstLossFeeBps).div(100_00).div(RAY);\\n  }\\n\\n  function previewServiceFee(uint256 payment, uint256 serviceFeeBps) public pure returns (uint256) {\\n    return RAY.mul(payment).mul(serviceFeeBps).div(100_00).div(RAY);\\n  }\\n\\n  function previewOriginationFee(ILoanSettings calldata settings, uint256 scalingValue) public pure returns (uint256) {\\n    return\\n      settings\\n        .principal\\n        .mul(settings.originationBps)\\n        .mul(settings.duration.mul(scalingValue).div(360))\\n        .div(settings.duration.div(settings.paymentPeriod))\\n        .div(RAY)\\n        .div(10000);\\n  }\\n\\n  function previewLatePaymentFee(\\n    ILoanSettings calldata settings,\\n    uint256 blockTimestamp,\\n    uint256 paymentDueDate\\n  ) public pure returns (uint256) {\\n    if (blockTimestamp > paymentDueDate) {\\n      return settings.latePayment;\\n    }\\n\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Calculate the fees for a given interest payment.\\n   */\\n  function previewFees(\\n    ILoanSettings calldata settings,\\n    uint256 payment,\\n    uint256 firstLoss,\\n    uint256 serviceFeeBps,\\n    uint256 blockTimestamp,\\n    uint256 paymentDueDate,\\n    uint256 scalingValue\\n  ) public pure returns (ILoanFees memory) {\\n    // If there is a scaling value\\n    payment = payment.mul(scalingValue).div(RAY);\\n    ILoanFees memory fees;\\n    fees.payment = payment;\\n    fees.firstLossFee = previewFirstLossFee(payment, firstLoss);\\n    fees.serviceFee = previewServiceFee(payment, serviceFeeBps);\\n    fees.originationFee = previewOriginationFee(settings, scalingValue);\\n    fees.latePaymentFee = previewLatePaymentFee(settings, blockTimestamp, paymentDueDate);\\n    fees.interestPayment = payment - fees.serviceFee - fees.firstLossFee;\\n\\n    return fees;\\n  }\\n\\n  function payFees(address asset, address firstLossVault, address feeVault, ILoanFees calldata fees) public {\\n    if (fees.firstLossFee > 0 || fees.latePaymentFee > 0) {\\n      IERC20(asset).safeTransferFrom(msg.sender, firstLossVault, fees.firstLossFee + fees.latePaymentFee);\\n    }\\n\\n    // The FeeVault holds the balance of fees intended for the PoolAdmin.\\n    // This include both the service fee and origiantion fees.\\n    uint256 feeVaultAmount = fees.serviceFee + fees.originationFee;\\n    if (feeVaultAmount > 0) {\\n      IERC20(asset).safeTransferFrom(msg.sender, feeVault, feeVaultAmount);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Loan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport { SafeMath } from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport './interfaces/ILoan.sol';\\nimport './interfaces/IPool.sol';\\nimport './interfaces/IServiceConfiguration.sol';\\nimport './interfaces/IVault.sol';\\nimport './factories/interfaces/IVaultFactory.sol';\\nimport './libraries/LoanLib.sol';\\nimport './upgrades/BeaconImplementation.sol';\\n\\n/**\\n * @title Perimeter Loan contract.\\n */\\ncontract Loan is ILoan, BeaconImplementation {\\n  using SafeMath for uint256;\\n\\n  IServiceConfiguration private _serviceConfiguration;\\n  address private _factory;\\n  ILoanLifeCycleState private _state = ILoanLifeCycleState.Requested;\\n  address private _borrower;\\n  address private _pool;\\n  IVault public collateralVault;\\n  IVault public fundingVault;\\n  address[] private _fungibleCollateral;\\n  uint256 public createdAt;\\n  address public liquidityAsset;\\n  uint256 public payment;\\n  uint256 public outstandingPrincipal;\\n  uint256 public paymentsRemaining;\\n  uint256 public paymentDueDate;\\n  uint256 public callbackTimestamp;\\n  ILoanSettings public settings;\\n\\n  event FundsReclaimed(uint256 amount, address pool);\\n\\n  /**\\n   * @dev Modifier that requires the protocol not be paused.\\n   */\\n  modifier onlyNotPaused() {\\n    require(IServiceConfiguration(_serviceConfiguration).paused() == false, 'Loan: Protocol paused');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that requires the Loan be in the given `state_`\\n   */\\n  modifier atState(ILoanLifeCycleState state_) {\\n    require(_state == state_, 'Loan: FunctionInvalidAtThisILoanLifeCycleState');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that requires `msg.sender` to be the pool. Loan assumes the pool has performed access checks\\n   */\\n  modifier onlyPool() {\\n    require(msg.sender == _pool, 'Loan: caller is not pool');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that requires `msg.sender` to be the pool controller.\\n   */\\n  modifier onlyPoolController() {\\n    require(msg.sender == address(IPool(_pool).poolController()), 'Loan: caller is not pool');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that requires `msg.sender` be the borrower.\\n   */\\n  modifier onlyBorrower() {\\n    require(msg.sender == _borrower, 'Loan: caller is not borrower');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that can be overriden by derived classes to enforce\\n   * access control.\\n   */\\n  modifier onlyPermittedBorrower() {\\n    require(_serviceConfiguration.isPermittedBorrower(msg.sender), \\\"Not permitted borrower\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that requires the loan not be in a terminal state.\\n   */\\n  modifier onlyNonTerminalState() {\\n    require(_state != ILoanLifeCycleState.Canceled, 'Loan: loan is in terminal state');\\n    require(_state != ILoanLifeCycleState.Defaulted, 'Loan: loan is in terminal state');\\n    require(_state != ILoanLifeCycleState.Matured, 'Loan: loan is in terminal state');\\n    _;\\n  }\\n\\n  function initialize(\\n    address serviceConfiguration_,\\n    address factory_,\\n    address borrower_,\\n    address pool_,\\n    address liquidityAsset_,\\n    address vaultFactory,\\n    ILoanSettings memory settings_\\n  ) public virtual initializer {\\n    _serviceConfiguration = IServiceConfiguration(serviceConfiguration_);\\n    _factory = factory_;\\n    _borrower = borrower_;\\n    _pool = pool_;\\n\\n    collateralVault = IVault(IVaultFactory(vaultFactory).createVault(address(this)));\\n    fundingVault = IVault(IVaultFactory(vaultFactory).createVault(address(this)));\\n    createdAt = block.timestamp;\\n    liquidityAsset = liquidityAsset_;\\n    settings = settings_;\\n\\n    LoanLib.validateLoan(\\n      _serviceConfiguration,\\n      IPool(_pool),\\n      settings.duration,\\n      settings.paymentPeriod,\\n      settings.principal,\\n      liquidityAsset\\n    );\\n\\n    paymentsRemaining = settings.duration.div(settings.paymentPeriod);\\n    uint256 paymentsTotal = settings\\n      .principal\\n      .mul(settings.apr)\\n      .mul(settings.duration.mul(LoanLib.RAY).div(360))\\n      .div(LoanLib.RAY)\\n      .div(10000);\\n    payment = paymentsTotal.mul(LoanLib.RAY).div(paymentsRemaining).div(LoanLib.RAY);\\n  }\\n\\n  /**\\n   * @dev Cancel the Loan\\n   */\\n  function cancelRequested()\\n    external\\n    onlyNotPaused\\n    onlyBorrower\\n    atState(ILoanLifeCycleState.Requested)\\n    returns (ILoanLifeCycleState)\\n  {\\n    require(((block.timestamp - createdAt) / 86400) > 1, 'Loan: Cannot Cancel Loan for 30 days');\\n    _state = ILoanLifeCycleState.Canceled;\\n    return _state;\\n  }\\n\\n  /**\\n   * @dev Cancel the Loan and return any collateral\\n   */\\n  function cancelCollateralized()\\n    external\\n    onlyNotPaused\\n    onlyPermittedBorrower\\n    onlyBorrower\\n    atState(ILoanLifeCycleState.Collateralized)\\n    returns (ILoanLifeCycleState)\\n  {\\n    require(settings.dropDeadTimestamp < block.timestamp, 'Loan: Drop dead date not met');\\n\\n    _state = ILoanLifeCycleState.Canceled;\\n    return _state;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function cancelFunded()\\n    external\\n    override\\n    onlyNotPaused\\n    atState(ILoanLifeCycleState.Funded)\\n    returns (ILoanLifeCycleState)\\n  {\\n    require(msg.sender == _borrower || msg.sender == address(IPool(_pool).poolController()), 'Loan: invalid caller');\\n    require(settings.dropDeadTimestamp < block.timestamp, 'Loan: Drop dead date not met');\\n\\n    LoanLib.returnCanceledLoanPrincipal(fundingVault, liquidityAsset, _pool, settings.principal);\\n    _state = ILoanLifeCycleState.Canceled;\\n    return _state;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function claimCollateral(address[] memory assets) external override onlyNotPaused {\\n    address recipient;\\n    if (msg.sender == _borrower) {\\n      _checkBorrowerCanWithdrawCollateral();\\n      recipient = _borrower;\\n    } else {\\n      // Only the PA or borrower can withdraw collateral.\\n      _checkAdminCanWithdrawCollateral();\\n      recipient = IPool(_pool).admin();\\n    }\\n\\n    LoanLib.withdrawFungibleCollateral(collateralVault, assets, recipient);\\n  }\\n\\n  /**\\n   * @dev Internal check that a borrower is eligible to withdraw collateral.\\n   */\\n  function _checkBorrowerCanWithdrawCollateral() internal view onlyPermittedBorrower {\\n    require(\\n      _state == ILoanLifeCycleState.Canceled || _state == ILoanLifeCycleState.Matured,\\n      'Loan: unable to claim collateral'\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal check that a PA is eligible to withdraw collateral.\\n   */\\n  function _checkAdminCanWithdrawCollateral() internal view onlyPoolController {\\n    require(_state == ILoanLifeCycleState.Defaulted, 'Loan: unable to claim collateral');\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function postFungibleCollateral(\\n    address asset,\\n    uint256 amount\\n  )\\n    external\\n    virtual\\n    onlyNotPaused\\n    onlyPermittedBorrower\\n    onlyBorrower\\n    onlyNonTerminalState\\n    returns (ILoanLifeCycleState)\\n  {\\n    require(amount > 0, 'Loan: posting 0 collateral');\\n    _state = LoanLib.postFungibleCollateral(address(collateralVault), asset, amount, _state, _fungibleCollateral);\\n    return _state;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function fund() external onlyPool returns (ILoanLifeCycleState) {\\n    require(\\n      _state == ILoanLifeCycleState.Requested || _state == ILoanLifeCycleState.Collateralized,\\n      'Loan: FunctionInvalidAtThisILoanLifeCycleState'\\n    );\\n    _state = LoanLib.fundLoan(liquidityAsset, fundingVault, settings.principal);\\n    return _state;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function reclaimFunds(uint256 amount) external override onlyPoolController {\\n    require(settings.loanType == ILoanType.Open);\\n\\n    fundingVault.withdrawERC20(liquidityAsset, amount, _pool);\\n    IPool(_pool).onLoanPrincipalReturned(amount);\\n\\n    emit FundsReclaimed(amount, _pool);\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function drawdown(\\n    uint256 amount\\n  ) external virtual onlyNotPaused onlyPermittedBorrower onlyBorrower returns (uint256) {\\n    (_state, paymentDueDate) = LoanLib.drawdown(\\n      amount,\\n      liquidityAsset,\\n      fundingVault,\\n      msg.sender,\\n      paymentDueDate,\\n      settings,\\n      _state\\n    );\\n    outstandingPrincipal += amount;\\n    IPool(_pool).onLoanStateTransitioned();\\n    return amount;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function paydownPrincipal(uint256 amount) external onlyNotPaused onlyPermittedBorrower onlyBorrower {\\n    require(outstandingPrincipal >= amount, 'Loan: amount too high');\\n    require(settings.loanType == ILoanType.Open, 'Loan: invalid loan type');\\n    LoanLib.paydownPrincipal(liquidityAsset, amount, fundingVault);\\n    outstandingPrincipal -= amount;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function completeNextPayment()\\n    external\\n    override\\n    onlyNotPaused\\n    onlyPermittedBorrower\\n    onlyBorrower\\n    atState(ILoanLifeCycleState.Active)\\n  {\\n    require(paymentsRemaining > 0, 'Loan: No more payments remain');\\n    IPool(_pool).onLoanWillMakePayment();\\n    ILoanFees memory _fees = LoanLib.previewFees(\\n      settings,\\n      payment,\\n      _serviceConfiguration.firstLossFeeBps(),\\n      IPool(_pool).serviceFeeBps(),\\n      block.timestamp,\\n      paymentDueDate,\\n      LoanLib.RAY\\n    );\\n\\n    LoanLib.payFees(liquidityAsset, IPool(_pool).firstLossVault(), IPool(_pool).feeVault(), _fees);\\n    LoanLib.completePayment(liquidityAsset, _pool, _fees.interestPayment);\\n    paymentsRemaining -= 1;\\n    if (paymentsRemaining > 0) {\\n      paymentDueDate += settings.paymentPeriod * 1 days;\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function previewFees(uint256 amount) public view returns (ILoanFees memory) {\\n    return\\n      LoanLib.previewFees(\\n        settings,\\n        amount,\\n        _serviceConfiguration.firstLossFeeBps(),\\n        IPool(_pool).serviceFeeBps(),\\n        block.timestamp,\\n        paymentDueDate,\\n        LoanLib.RAY\\n      );\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function completeFullPayment()\\n    external\\n    override\\n    onlyNotPaused\\n    onlyPermittedBorrower\\n    onlyBorrower\\n    atState(ILoanLifeCycleState.Active)\\n  {\\n    IPool(_pool).onLoanWillMakePayment();\\n    uint256 scalingValue = LoanLib.RAY;\\n\\n    if (settings.loanType == ILoanType.Open) {\\n      // If an open term loan payment is not overdue, we will prorate the\\n      // payment\\n      if (paymentDueDate > block.timestamp) {\\n        // Calculate the scaling value\\n        // LoanLib.RAY - ((paymentDueDate - blocktimestamp) * LoanLib.RAY / paymentPeriod (seconds))\\n        scalingValue = LoanLib.RAY.sub(\\n          (paymentDueDate - block.timestamp).mul(LoanLib.RAY).div(settings.paymentPeriod * 1 days)\\n        );\\n      }\\n    } else {\\n      // Fixed term loans must pay all outstanding interest payments and fees.\\n      scalingValue = LoanLib.RAY.mul(paymentsRemaining);\\n    }\\n\\n    ILoanFees memory _fees = LoanLib.previewFees(\\n      settings,\\n      payment,\\n      _serviceConfiguration.firstLossFeeBps(),\\n      IPool(_pool).serviceFeeBps(),\\n      block.timestamp,\\n      paymentDueDate,\\n      scalingValue\\n    );\\n\\n    LoanLib.payFees(liquidityAsset, IPool(_pool).firstLossVault(), IPool(_pool).feeVault(), _fees);\\n\\n    LoanLib.completePayment(liquidityAsset, _pool, outstandingPrincipal.add(_fees.interestPayment));\\n    IPool(_pool).onLoanPrincipalReturned(outstandingPrincipal);\\n\\n    paymentsRemaining = 0;\\n    _state = ILoanLifeCycleState.Matured;\\n\\n    IPool(_pool).onLoanStateTransitioned();\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function markDefaulted()\\n    external\\n    override\\n    onlyPoolController\\n    atState(ILoanLifeCycleState.Active)\\n    returns (ILoanLifeCycleState)\\n  {\\n    _state = ILoanLifeCycleState.Defaulted;\\n    IPool(_pool).onLoanStateTransitioned();\\n    emit LifeCycleStateTransition(_state);\\n    return _state;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function markCallback() external override onlyPoolController {\\n    callbackTimestamp = block.timestamp;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function fungibleCollateral() external view returns (address[] memory) {\\n    return _fungibleCollateral;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function state() external view returns (ILoanLifeCycleState) {\\n    return _state;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function borrower() external view returns (address) {\\n    return _borrower;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function pool() external view returns (address) {\\n    return _pool;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function factory() external view returns (address) {\\n    return _factory;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function dropDeadTimestamp() external view returns (uint256) {\\n    return settings.dropDeadTimestamp;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function duration() external view returns (uint256) {\\n    return settings.duration;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function paymentPeriod() external view returns (uint256) {\\n    return settings.paymentPeriod;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function apr() external view returns (uint256) {\\n    return settings.apr;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function principal() external view returns (uint256) {\\n    return settings.principal;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function loanType() external view returns (ILoanType) {\\n    return settings.loanType;\\n  }\\n\\n  /**\\n   * @inheritdoc ILoan\\n   */\\n  function serviceConfiguration() external view returns (IServiceConfiguration) {\\n    return _serviceConfiguration;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/BeaconImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/**\\n * @title BeaconImplementation base contract\\n * @dev Base contract that overrides the constructor to disable initialization.\\n */\\nabstract contract BeaconImplementation is Initializable {\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/BeaconProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\nimport '../interfaces/IServiceConfiguration.sol';\\nimport './interfaces/IBeacon.sol';\\n\\n/**\\n * @title Factory for emitting beacon proxies.\\n * @dev Base contract for emitting new Beacon proxy contracts. Allows setting new\\n * implementations by the global deployer.\\n */\\nabstract contract BeaconProxyFactory is IBeacon {\\n  /**\\n   * @dev Address of the protocol service configuration\\n   */\\n  IServiceConfiguration internal _serviceConfiguration;\\n\\n  /**\\n   * @dev Modifier that requires that the sender is registered as a protocol deployer.\\n   */\\n  modifier onlyDeployer() {\\n    require(_serviceConfiguration.isDeployer(msg.sender), 'Upgrade: unauthorized');\\n    _;\\n  }\\n\\n  /**\\n   * @inheritdoc IBeacon\\n   */\\n  address public implementation;\\n\\n  /**\\n   * @inheritdoc IBeacon\\n   */\\n  function setImplementation(address newImplementation) external onlyDeployer {\\n    implementation = newImplementation;\\n    emit ImplementationSet(newImplementation);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/upgrades/interfaces/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title Interface for Beacon contracts.\\n * @dev Holds a reference to the implementation, and allows setting new ones.\\n */\\ninterface IBeacon {\\n  /**\\n   * @dev Emitted when a new implementation is set.\\n   */\\n  event ImplementationSet(address indexed implementation);\\n\\n  /**\\n   * @dev Returns an address used by BeaconProxy contracts for delegated calls.\\n   */\\n  function implementation() external view returns (address);\\n\\n  /**\\n   * @dev Updates the implementation.\\n   */\\n  function setImplementation(address implementation) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"serviceConfiguration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ILoanType\",\"name\":\"loanType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropDeadTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latePayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originationBps\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoanSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LoanFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000021d63c1c802b22d2d632bca96bf27e4cd3712d77000000000000000000000000116316bf88d959e53be5daa24a6db629a7cf424d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}